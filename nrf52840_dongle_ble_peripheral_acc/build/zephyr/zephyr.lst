
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20005de0 	.word	0x20005de0
    1004:	00015735 	.word	0x00015735
    1008:	00020567 	.word	0x00020567
    100c:	00015765 	.word	0x00015765
    1010:	00015765 	.word	0x00015765
    1014:	00015765 	.word	0x00015765
    1018:	00015765 	.word	0x00015765
	...
    102c:	000154cd 	.word	0x000154cd
    1030:	00015765 	.word	0x00015765
    1034:	00000000 	.word	0x00000000
    1038:	00015479 	.word	0x00015479
    103c:	000201a1 	.word	0x000201a1

00001040 <_irq_vector_table>:
    1040:	000156f5 00021e8b 000156f5 000156f5     .V.......V...V..
    1050:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    1060:	00021e53 000156f5 000156f5 00021e71     S....V...V..q...
    1070:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    1080:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    1090:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10a0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10b0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10c0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10d0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10e0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..
    10f0:	000156f5 000156f5 000156f5 000156f5     .V...V...V...V..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b96c 	b.w	13f0 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	468e      	mov	lr, r1
    113c:	2b00      	cmp	r3, #0
    113e:	f040 8082 	bne.w	1246 <__udivmoddi4+0x116>
    1142:	428a      	cmp	r2, r1
    1144:	4617      	mov	r7, r2
    1146:	d946      	bls.n	11d6 <__udivmoddi4+0xa6>
    1148:	fab2 f282 	clz	r2, r2
    114c:	b14a      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114e:	f1c2 0120 	rsb	r1, r2, #32
    1152:	fa05 f302 	lsl.w	r3, r5, r2
    1156:	fa20 f101 	lsr.w	r1, r0, r1
    115a:	4097      	lsls	r7, r2
    115c:	ea41 0e03 	orr.w	lr, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1166:	0c23      	lsrs	r3, r4, #16
    1168:	fbbe fcf8 	udiv	ip, lr, r8
    116c:	b2b9      	uxth	r1, r7
    116e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1176:	fb0c f001 	mul.w	r0, ip, r1
    117a:	4298      	cmp	r0, r3
    117c:	d90a      	bls.n	1194 <__udivmoddi4+0x64>
    117e:	18fb      	adds	r3, r7, r3
    1180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
    1184:	f080 8116 	bcs.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1188:	4298      	cmp	r0, r3
    118a:	f240 8113 	bls.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    118e:	f1ac 0c02 	sub.w	ip, ip, #2
    1192:	443b      	add	r3, r7
    1194:	1a1b      	subs	r3, r3, r0
    1196:	b2a4      	uxth	r4, r4
    1198:	fbb3 f0f8 	udiv	r0, r3, r8
    119c:	fb08 3310 	mls	r3, r8, r0, r3
    11a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a4:	fb00 f101 	mul.w	r1, r0, r1
    11a8:	42a1      	cmp	r1, r4
    11aa:	d909      	bls.n	11c0 <__udivmoddi4+0x90>
    11ac:	193c      	adds	r4, r7, r4
    11ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11b2:	f080 8101 	bcs.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11b6:	42a1      	cmp	r1, r4
    11b8:	f240 80fe 	bls.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	1a64      	subs	r4, r4, r1
    11c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c6:	2100      	movs	r1, #0
    11c8:	b11e      	cbz	r6, 11d2 <__udivmoddi4+0xa2>
    11ca:	40d4      	lsrs	r4, r2
    11cc:	2300      	movs	r3, #0
    11ce:	e9c6 4300 	strd	r4, r3, [r6]
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d6:	b902      	cbnz	r2, 11da <__udivmoddi4+0xaa>
    11d8:	deff      	udf	#255	; 0xff
    11da:	fab2 f282 	clz	r2, r2
    11de:	2a00      	cmp	r2, #0
    11e0:	d14f      	bne.n	1282 <__udivmoddi4+0x152>
    11e2:	1bcb      	subs	r3, r1, r7
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa1f f887 	uxth.w	r8, r7
    11ec:	2101      	movs	r1, #1
    11ee:	fbb3 fcfe 	udiv	ip, r3, lr
    11f2:	0c25      	lsrs	r5, r4, #16
    11f4:	fb0e 331c 	mls	r3, lr, ip, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb08 f30c 	mul.w	r3, r8, ip
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0xe4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    120a:	d202      	bcs.n	1212 <__udivmoddi4+0xe2>
    120c:	42ab      	cmp	r3, r5
    120e:	f200 80e7 	bhi.w	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1212:	4684      	mov	ip, r0
    1214:	1aed      	subs	r5, r5, r3
    1216:	b2a3      	uxth	r3, r4
    1218:	fbb5 f0fe 	udiv	r0, r5, lr
    121c:	fb0e 5510 	mls	r5, lr, r0, r5
    1220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1224:	fb08 f800 	mul.w	r8, r8, r0
    1228:	45a0      	cmp	r8, r4
    122a:	d907      	bls.n	123c <__udivmoddi4+0x10c>
    122c:	193c      	adds	r4, r7, r4
    122e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1232:	d202      	bcs.n	123a <__udivmoddi4+0x10a>
    1234:	45a0      	cmp	r8, r4
    1236:	f200 80d7 	bhi.w	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    123a:	4618      	mov	r0, r3
    123c:	eba4 0408 	sub.w	r4, r4, r8
    1240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1244:	e7c0      	b.n	11c8 <__udivmoddi4+0x98>
    1246:	428b      	cmp	r3, r1
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	2e00      	cmp	r6, #0
    124c:	f000 80af 	beq.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    1250:	2100      	movs	r1, #0
    1252:	e9c6 0500 	strd	r0, r5, [r6]
    1256:	4608      	mov	r0, r1
    1258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    125c:	fab3 f183 	clz	r1, r3
    1260:	2900      	cmp	r1, #0
    1262:	d14b      	bne.n	12fc <__udivmoddi4+0x1cc>
    1264:	42ab      	cmp	r3, r5
    1266:	d302      	bcc.n	126e <__udivmoddi4+0x13e>
    1268:	4282      	cmp	r2, r0
    126a:	f200 80b7 	bhi.w	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    126e:	1a84      	subs	r4, r0, r2
    1270:	eb65 0303 	sbc.w	r3, r5, r3
    1274:	2001      	movs	r0, #1
    1276:	469e      	mov	lr, r3
    1278:	2e00      	cmp	r6, #0
    127a:	d0aa      	beq.n	11d2 <__udivmoddi4+0xa2>
    127c:	e9c6 4e00 	strd	r4, lr, [r6]
    1280:	e7a7      	b.n	11d2 <__udivmoddi4+0xa2>
    1282:	f1c2 0c20 	rsb	ip, r2, #32
    1286:	fa01 f302 	lsl.w	r3, r1, r2
    128a:	4097      	lsls	r7, r2
    128c:	fa20 f00c 	lsr.w	r0, r0, ip
    1290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1294:	fa21 fc0c 	lsr.w	ip, r1, ip
    1298:	4318      	orrs	r0, r3
    129a:	fbbc f1fe 	udiv	r1, ip, lr
    129e:	0c05      	lsrs	r5, r0, #16
    12a0:	fb0e cc11 	mls	ip, lr, r1, ip
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    12ac:	fb01 f308 	mul.w	r3, r1, r8
    12b0:	42ab      	cmp	r3, r5
    12b2:	fa04 f402 	lsl.w	r4, r4, r2
    12b6:	d909      	bls.n	12cc <__udivmoddi4+0x19c>
    12b8:	197d      	adds	r5, r7, r5
    12ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    12be:	f080 808b 	bcs.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c2:	42ab      	cmp	r3, r5
    12c4:	f240 8088 	bls.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c8:	3902      	subs	r1, #2
    12ca:	443d      	add	r5, r7
    12cc:	1aeb      	subs	r3, r5, r3
    12ce:	b285      	uxth	r5, r0
    12d0:	fbb3 f0fe 	udiv	r0, r3, lr
    12d4:	fb0e 3310 	mls	r3, lr, r0, r3
    12d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    12dc:	fb00 f308 	mul.w	r3, r0, r8
    12e0:	42ab      	cmp	r3, r5
    12e2:	d907      	bls.n	12f4 <__udivmoddi4+0x1c4>
    12e4:	197d      	adds	r5, r7, r5
    12e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    12ea:	d271      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12ec:	42ab      	cmp	r3, r5
    12ee:	d96f      	bls.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12f0:	3802      	subs	r0, #2
    12f2:	443d      	add	r5, r7
    12f4:	1aeb      	subs	r3, r5, r3
    12f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12fa:	e778      	b.n	11ee <__udivmoddi4+0xbe>
    12fc:	f1c1 0c20 	rsb	ip, r1, #32
    1300:	408b      	lsls	r3, r1
    1302:	fa22 f70c 	lsr.w	r7, r2, ip
    1306:	431f      	orrs	r7, r3
    1308:	fa20 f40c 	lsr.w	r4, r0, ip
    130c:	fa05 f301 	lsl.w	r3, r5, r1
    1310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1314:	fa25 f50c 	lsr.w	r5, r5, ip
    1318:	431c      	orrs	r4, r3
    131a:	0c23      	lsrs	r3, r4, #16
    131c:	fbb5 f9fe 	udiv	r9, r5, lr
    1320:	fa1f f887 	uxth.w	r8, r7
    1324:	fb0e 5519 	mls	r5, lr, r9, r5
    1328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    132c:	fb09 fa08 	mul.w	sl, r9, r8
    1330:	45aa      	cmp	sl, r5
    1332:	fa02 f201 	lsl.w	r2, r2, r1
    1336:	fa00 f301 	lsl.w	r3, r0, r1
    133a:	d908      	bls.n	134e <__udivmoddi4+0x21e>
    133c:	197d      	adds	r5, r7, r5
    133e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    1342:	d247      	bcs.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1344:	45aa      	cmp	sl, r5
    1346:	d945      	bls.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1348:	f1a9 0902 	sub.w	r9, r9, #2
    134c:	443d      	add	r5, r7
    134e:	eba5 050a 	sub.w	r5, r5, sl
    1352:	b2a4      	uxth	r4, r4
    1354:	fbb5 f0fe 	udiv	r0, r5, lr
    1358:	fb0e 5510 	mls	r5, lr, r0, r5
    135c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1360:	fb00 f808 	mul.w	r8, r0, r8
    1364:	45a0      	cmp	r8, r4
    1366:	d907      	bls.n	1378 <__udivmoddi4+0x248>
    1368:	193c      	adds	r4, r7, r4
    136a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    136e:	d22d      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1370:	45a0      	cmp	r8, r4
    1372:	d92b      	bls.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1374:	3802      	subs	r0, #2
    1376:	443c      	add	r4, r7
    1378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	fba0 8902 	umull	r8, r9, r0, r2
    1384:	454c      	cmp	r4, r9
    1386:	46c6      	mov	lr, r8
    1388:	464d      	mov	r5, r9
    138a:	d319      	bcc.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    138c:	d016      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    138e:	b15e      	cbz	r6, 13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    1390:	ebb3 020e 	subs.w	r2, r3, lr
    1394:	eb64 0405 	sbc.w	r4, r4, r5
    1398:	fa04 fc0c 	lsl.w	ip, r4, ip
    139c:	40ca      	lsrs	r2, r1
    139e:	ea4c 0202 	orr.w	r2, ip, r2
    13a2:	40cc      	lsrs	r4, r1
    13a4:	e9c6 2400 	strd	r2, r4, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13ae:	4631      	mov	r1, r6
    13b0:	4630      	mov	r0, r6
    13b2:	e70e      	b.n	11d2 <__udivmoddi4+0xa2>
    13b4:	46ac      	mov	ip, r5
    13b6:	e6ed      	b.n	1194 <__udivmoddi4+0x64>
    13b8:	4618      	mov	r0, r3
    13ba:	e701      	b.n	11c0 <__udivmoddi4+0x90>
    13bc:	4543      	cmp	r3, r8
    13be:	d2e6      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13c0:	ebb8 0e02 	subs.w	lr, r8, r2
    13c4:	eb69 0507 	sbc.w	r5, r9, r7
    13c8:	3801      	subs	r0, #1
    13ca:	e7e0      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13cc:	4628      	mov	r0, r5
    13ce:	e7d3      	b.n	1378 <__udivmoddi4+0x248>
    13d0:	4660      	mov	r0, ip
    13d2:	e78f      	b.n	12f4 <__udivmoddi4+0x1c4>
    13d4:	4681      	mov	r9, r0
    13d6:	e7ba      	b.n	134e <__udivmoddi4+0x21e>
    13d8:	4661      	mov	r1, ip
    13da:	e777      	b.n	12cc <__udivmoddi4+0x19c>
    13dc:	4608      	mov	r0, r1
    13de:	e74b      	b.n	1278 <__udivmoddi4+0x148>
    13e0:	f1ac 0c02 	sub.w	ip, ip, #2
    13e4:	443d      	add	r5, r7
    13e6:	e715      	b.n	1214 <__udivmoddi4+0xe4>
    13e8:	3802      	subs	r0, #2
    13ea:	443c      	add	r4, r7
    13ec:	e726      	b.n	123c <__udivmoddi4+0x10c>
    13ee:	bf00      	nop

000013f0 <__aeabi_idiv0>:
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	4615      	mov	r5, r2
    13f8:	4a0a      	ldr	r2, [pc, #40]	; (1424 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13fa:	461c      	mov	r4, r3
    13fc:	6856      	ldr	r6, [r2, #4]
    13fe:	b12e      	cbz	r6, 140c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1400:	b001      	add	sp, #4
    1402:	462a      	mov	r2, r5
    1404:	46b4      	mov	ip, r6
    1406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    140a:	4760      	bx	ip
    140c:	2000      	movs	r0, #0
    140e:	f88d 0000 	strb.w	r0, [sp]
    1412:	4668      	mov	r0, sp
    1414:	f00e fca8 	bl	fd68 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1418:	f89d 0000 	ldrb.w	r0, [sp]
    141c:	1a28      	subs	r0, r5, r0
    141e:	7020      	strb	r0, [r4, #0]
    1420:	2000      	movs	r0, #0
    1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1424:	20000000 	.word	0x20000000

00001428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	4770      	bx	lr
    142e:	0000      	.short	0x0000
    1430:	20000008 	.word	0x20000008

00001434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1434:	4904      	ldr	r1, [pc, #16]	; (1448 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
    1436:	780a      	ldrb	r2, [r1, #0]
    1438:	4290      	cmp	r0, r2
    143a:	d301      	bcc.n	1440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    143c:	2000      	movs	r0, #0
    143e:	4770      	bx	lr
    1440:	6849      	ldr	r1, [r1, #4]
    1442:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    1446:	4770      	bx	lr
    1448:	20000008 	.word	0x20000008
    144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1450:	4615      	mov	r5, r2
    1452:	4604      	mov	r4, r0
    1454:	f100 0208 	add.w	r2, r0, #8
    1458:	1cc8      	adds	r0, r1, #3
    145a:	4241      	negs	r1, r0
    145c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 14fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc8>
    1460:	461f      	mov	r7, r3
    1462:	1a28      	subs	r0, r5, r0
    1464:	2300      	movs	r3, #0
    1466:	9e08      	ldr	r6, [sp, #32]
    1468:	ebbc 0c05 	subs.w	ip, ip, r5
    146c:	419b      	sbcs	r3, r3
    146e:	d204      	bcs.n	147a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46>
    1470:	f240 51e1 	movw	r1, #1505	; 0x5e1
    1474:	2070      	movs	r0, #112	; 0x70
    1476:	f003 f8f9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    147a:	4b21      	ldr	r3, [pc, #132]	; (1500 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcc>)
    147c:	4299      	cmp	r1, r3
    147e:	dd04      	ble.n	148a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56>
    1480:	f240 51e2 	movw	r1, #1506	; 0x5e2
    1484:	2070      	movs	r0, #112	; 0x70
    1486:	f003 f8f1 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    148a:	4b1e      	ldr	r3, [pc, #120]	; (1504 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd0>)
    148c:	4299      	cmp	r1, r3
    148e:	da04      	bge.n	149a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66>
    1490:	f240 51e3 	movw	r1, #1507	; 0x5e3
    1494:	2070      	movs	r0, #112	; 0x70
    1496:	f003 f8e9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    149a:	491b      	ldr	r1, [pc, #108]	; (1508 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4>)
    149c:	4288      	cmp	r0, r1
    149e:	bfa8      	it	ge
    14a0:	491a      	ldrge	r1, [pc, #104]	; (150c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd8>)
    14a2:	da03      	bge.n	14ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x78>
    14a4:	2800      	cmp	r0, #0
    14a6:	bfb8      	it	lt
    14a8:	4917      	ldrlt	r1, [pc, #92]	; (1508 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4>)
    14aa:	da00      	bge.n	14ae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7a>
    14ac:	1840      	adds	r0, r0, r1
    14ae:	4621      	mov	r1, r4
    14b0:	f002 fd4e 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    14b4:	6820      	ldr	r0, [r4, #0]
    14b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    14ba:	19e8      	adds	r0, r5, r7
    14bc:	1cc0      	adds	r0, r0, #3
    14be:	6021      	str	r1, [r4, #0]
    14c0:	2e00      	cmp	r6, #0
    14c2:	bf08      	it	eq
    14c4:	307a      	addeq	r0, #122	; 0x7a
    14c6:	d008      	beq.n	14da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa6>
    14c8:	2e01      	cmp	r6, #1
    14ca:	bf08      	it	eq
    14cc:	3045      	addeq	r0, #69	; 0x45
    14ce:	d004      	beq.n	14da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa6>
    14d0:	f240 6186 	movw	r1, #1670	; 0x686
    14d4:	2070      	movs	r0, #112	; 0x70
    14d6:	f003 f8c9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14da:	466a      	mov	r2, sp
    14dc:	1d21      	adds	r1, r4, #4
    14de:	f002 fd37 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    14e2:	f99d 0000 	ldrsb.w	r0, [sp]
    14e6:	2800      	cmp	r0, #0
    14e8:	6860      	ldr	r0, [r4, #4]
    14ea:	bfc4      	itt	gt
    14ec:	1c40      	addgt	r0, r0, #1
    14ee:	6060      	strgt	r0, [r4, #4]
    14f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14f4:	6060      	str	r0, [r4, #4]
    14f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14fa:	0000      	.short	0x0000
    14fc:	1e847fff 	.word	0x1e847fff
    1500:	07a12000 	.word	0x07a12000
    1504:	f85ee000 	.word	0xf85ee000
    1508:	1e848000 	.word	0x1e848000
    150c:	e17b8000 	.word	0xe17b8000
    1510:	b570      	push	{r4, r5, r6, lr}
    1512:	4605      	mov	r5, r0
    1514:	2a20      	cmp	r2, #32
    1516:	d027      	beq.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1518:	4819      	ldr	r0, [pc, #100]	; (1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>)
    151a:	4c1a      	ldr	r4, [pc, #104]	; (1584 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x150>)
    151c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1520:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1528:	2920      	cmp	r1, #32
    152a:	d022      	beq.n	1572 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x13e>
    152c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1530:	7840      	ldrb	r0, [r0, #1]
    1532:	784c      	ldrb	r4, [r1, #1]
    1534:	7048      	strb	r0, [r1, #1]
    1536:	4620      	mov	r0, r4
    1538:	4601      	mov	r1, r0
    153a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    153e:	4291      	cmp	r1, r2
    1540:	7005      	strb	r5, [r0, #0]
    1542:	7840      	ldrb	r0, [r0, #1]
    1544:	d1f8      	bne.n	1538 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x104>
    1546:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    154a:	2a20      	cmp	r2, #32
    154c:	bf1a      	itte	ne
    154e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1552:	7054      	strbne	r4, [r2, #1]
    1554:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1558:	2220      	movs	r2, #32
    155a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    155e:	f88c 2001 	strb.w	r2, [ip, #1]
    1562:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1566:	bd70      	pop	{r4, r5, r6, pc}
    1568:	f44f 7122 	mov.w	r1, #648	; 0x288
    156c:	2070      	movs	r0, #112	; 0x70
    156e:	f003 f87d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1572:	f893 4020 	ldrb.w	r4, [r3, #32]
    1576:	7840      	ldrb	r0, [r0, #1]
    1578:	f883 0020 	strb.w	r0, [r3, #32]
    157c:	e7db      	b.n	1536 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x102>
    157e:	0000      	.short	0x0000
    1580:	20000e8c 	.word	0x20000e8c
    1584:	20000f0c 	.word	0x20000f0c
    1588:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    158c:	b087      	sub	sp, #28
    158e:	4604      	mov	r4, r0
    1590:	2000      	movs	r0, #0
    1592:	9002      	str	r0, [sp, #8]
    1594:	489e      	ldr	r0, [pc, #632]	; (1810 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3dc>)
    1596:	9f08      	ldr	r7, [sp, #32]
    1598:	4e9e      	ldr	r6, [pc, #632]	; (1814 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e0>)
    159a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    159e:	9003      	str	r0, [sp, #12]
    15a0:	f890 5020 	ldrb.w	r5, [r0, #32]
    15a4:	2020      	movs	r0, #32
    15a6:	46e9      	mov	r9, sp
    15a8:	f10d 0804 	add.w	r8, sp, #4
    15ac:	f88d 0000 	strb.w	r0, [sp]
    15b0:	f506 7a20 	add.w	sl, r6, #640	; 0x280
    15b4:	2d20      	cmp	r5, #32
    15b6:	bf18      	it	ne
    15b8:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    15bc:	d032      	beq.n	1624 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
    15be:	bf00      	nop
    15c0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    15c4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    15c8:	1d01      	adds	r1, r0, #4
    15ca:	6880      	ldr	r0, [r0, #8]
    15cc:	6822      	ldr	r2, [r4, #0]
    15ce:	1a10      	subs	r0, r2, r0
    15d0:	0200      	lsls	r0, r0, #8
    15d2:	17c2      	asrs	r2, r0, #31
    15d4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    15d8:	1200      	asrs	r0, r0, #8
    15da:	d423      	bmi.n	1624 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
    15dc:	8960      	ldrh	r0, [r4, #10]
    15de:	b1d0      	cbz	r0, 1616 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1e2>
    15e0:	8948      	ldrh	r0, [r1, #10]
    15e2:	b9c0      	cbnz	r0, 1616 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1e2>
    15e4:	4608      	mov	r0, r1
    15e6:	f000 fcdb 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    15ea:	aa05      	add	r2, sp, #20
    15ec:	a904      	add	r1, sp, #16
    15ee:	f002 fcaf 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    15f2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    15f6:	2800      	cmp	r0, #0
    15f8:	bfcc      	ite	gt
    15fa:	2001      	movgt	r0, #1
    15fc:	2000      	movle	r0, #0
    15fe:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1602:	9804      	ldr	r0, [sp, #16]
    1604:	6822      	ldr	r2, [r4, #0]
    1606:	1a10      	subs	r0, r2, r0
    1608:	0200      	lsls	r0, r0, #8
    160a:	17c2      	asrs	r2, r0, #31
    160c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1610:	1200      	asrs	r0, r0, #8
    1612:	4288      	cmp	r0, r1
    1614:	db06      	blt.n	1624 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
    1616:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    161a:	f889 5000 	strb.w	r5, [r9]
    161e:	7845      	ldrb	r5, [r0, #1]
    1620:	2d20      	cmp	r5, #32
    1622:	d1cd      	bne.n	15c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18c>
    1624:	f899 0000 	ldrb.w	r0, [r9]
    1628:	f888 0000 	strb.w	r0, [r8]
    162c:	46a1      	mov	r9, r4
    162e:	2d20      	cmp	r5, #32
    1630:	bf1c      	itt	ne
    1632:	4879      	ldrne	r0, [pc, #484]	; (1818 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
    1634:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1638:	f000 80e5 	beq.w	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    163c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    1640:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
    1644:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1648:	f8da 1004 	ldr.w	r1, [sl, #4]
    164c:	4648      	mov	r0, r9
    164e:	1a89      	subs	r1, r1, r2
    1650:	0209      	lsls	r1, r1, #8
    1652:	17ca      	asrs	r2, r1, #31
    1654:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1658:	f10a 0704 	add.w	r7, sl, #4
    165c:	1209      	asrs	r1, r1, #8
    165e:	d41f      	bmi.n	16a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x26c>
    1660:	8979      	ldrh	r1, [r7, #10]
    1662:	2900      	cmp	r1, #0
    1664:	f000 80cf 	beq.w	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    1668:	8941      	ldrh	r1, [r0, #10]
    166a:	2900      	cmp	r1, #0
    166c:	f040 80cb 	bne.w	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    1670:	f000 fc96 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1674:	aa05      	add	r2, sp, #20
    1676:	a904      	add	r1, sp, #16
    1678:	f002 fc6a 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    167c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    1680:	2800      	cmp	r0, #0
    1682:	bfcc      	ite	gt
    1684:	2001      	movgt	r0, #1
    1686:	2000      	movle	r0, #0
    1688:	f100 0133 	add.w	r1, r0, #51	; 0x33
    168c:	9804      	ldr	r0, [sp, #16]
    168e:	683a      	ldr	r2, [r7, #0]
    1690:	1a10      	subs	r0, r2, r0
    1692:	0200      	lsls	r0, r0, #8
    1694:	17c2      	asrs	r2, r0, #31
    1696:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    169a:	1200      	asrs	r0, r0, #8
    169c:	4288      	cmp	r0, r1
    169e:	da7d      	bge.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16a0:	f888 5000 	strb.w	r5, [r8]
    16a4:	f89a 0010 	ldrb.w	r0, [sl, #16]
    16a8:	f899 100c 	ldrb.w	r1, [r9, #12]
    16ac:	4288      	cmp	r0, r1
    16ae:	d905      	bls.n	16bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x288>
    16b0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    16b4:	7845      	ldrb	r5, [r0, #1]
    16b6:	2d20      	cmp	r5, #32
    16b8:	d1c0      	bne.n	163c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x208>
    16ba:	e0a4      	b.n	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    16bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    16c0:	e9d4 2100 	ldrd	r2, r1, [r4]
    16c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    16c8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    16cc:	1a89      	subs	r1, r1, r2
    16ce:	6880      	ldr	r0, [r0, #8]
    16d0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    16d4:	4408      	add	r0, r1
    16d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16da:	e9c4 2000 	strd	r2, r0, [r4]
    16de:	2001      	movs	r0, #1
    16e0:	9002      	str	r0, [sp, #8]
    16e2:	484b      	ldr	r0, [pc, #300]	; (1810 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3dc>)
    16e4:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    16e8:	b118      	cbz	r0, 16f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2be>
    16ea:	b009      	add	sp, #36	; 0x24
    16ec:	2000      	movs	r0, #0
    16ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16f2:	9803      	ldr	r0, [sp, #12]
    16f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16f8:	466f      	mov	r7, sp
    16fa:	f890 5020 	ldrb.w	r5, [r0, #32]
    16fe:	2020      	movs	r0, #32
    1700:	f10d 0a04 	add.w	sl, sp, #4
    1704:	f88d 0000 	strb.w	r0, [sp]
    1708:	2d20      	cmp	r5, #32
    170a:	bf1c      	itt	ne
    170c:	4842      	ldrne	r0, [pc, #264]	; (1818 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
    170e:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1712:	d030      	beq.n	1776 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
    1714:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1718:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    171c:	1d01      	adds	r1, r0, #4
    171e:	6880      	ldr	r0, [r0, #8]
    1720:	6822      	ldr	r2, [r4, #0]
    1722:	1a10      	subs	r0, r2, r0
    1724:	0200      	lsls	r0, r0, #8
    1726:	17c2      	asrs	r2, r0, #31
    1728:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    172c:	1200      	asrs	r0, r0, #8
    172e:	d422      	bmi.n	1776 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
    1730:	8960      	ldrh	r0, [r4, #10]
    1732:	b1d0      	cbz	r0, 176a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x336>
    1734:	8948      	ldrh	r0, [r1, #10]
    1736:	b9c0      	cbnz	r0, 176a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x336>
    1738:	4608      	mov	r0, r1
    173a:	f000 fc31 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    173e:	aa05      	add	r2, sp, #20
    1740:	a904      	add	r1, sp, #16
    1742:	f002 fc05 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1746:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    174a:	2800      	cmp	r0, #0
    174c:	bfcc      	ite	gt
    174e:	2001      	movgt	r0, #1
    1750:	2000      	movle	r0, #0
    1752:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1756:	9804      	ldr	r0, [sp, #16]
    1758:	6822      	ldr	r2, [r4, #0]
    175a:	1a10      	subs	r0, r2, r0
    175c:	0200      	lsls	r0, r0, #8
    175e:	17c2      	asrs	r2, r0, #31
    1760:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1764:	1200      	asrs	r0, r0, #8
    1766:	4288      	cmp	r0, r1
    1768:	db05      	blt.n	1776 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
    176a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    176e:	703d      	strb	r5, [r7, #0]
    1770:	7845      	ldrb	r5, [r0, #1]
    1772:	2d20      	cmp	r5, #32
    1774:	d1ce      	bne.n	1714 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e0>
    1776:	7838      	ldrb	r0, [r7, #0]
    1778:	f88a 0000 	strb.w	r0, [sl]
    177c:	4627      	mov	r7, r4
    177e:	2d20      	cmp	r5, #32
    1780:	bf1c      	itt	ne
    1782:	4825      	ldrne	r0, [pc, #148]	; (1818 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
    1784:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1788:	d03d      	beq.n	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    178a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    178e:	eb06 0981 	add.w	r9, r6, r1, lsl #2
    1792:	4638      	mov	r0, r7
    1794:	f109 0804 	add.w	r8, r9, #4
    1798:	687a      	ldr	r2, [r7, #4]
    179a:	e000      	b.n	179e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x36a>
    179c:	e033      	b.n	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    179e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    17a2:	1a89      	subs	r1, r1, r2
    17a4:	0209      	lsls	r1, r1, #8
    17a6:	17ca      	asrs	r2, r1, #31
    17a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    17ac:	1209      	asrs	r1, r1, #8
    17ae:	d41d      	bmi.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    17b0:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    17b4:	b339      	cbz	r1, 1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    17b6:	8941      	ldrh	r1, [r0, #10]
    17b8:	bb29      	cbnz	r1, 1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    17ba:	f000 fbf1 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    17be:	aa05      	add	r2, sp, #20
    17c0:	a904      	add	r1, sp, #16
    17c2:	f002 fbc5 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    17c6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    17ca:	2800      	cmp	r0, #0
    17cc:	bfcc      	ite	gt
    17ce:	2001      	movgt	r0, #1
    17d0:	2000      	movle	r0, #0
    17d2:	f100 0133 	add.w	r1, r0, #51	; 0x33
    17d6:	9804      	ldr	r0, [sp, #16]
    17d8:	f8d8 2000 	ldr.w	r2, [r8]
    17dc:	1a10      	subs	r0, r2, r0
    17de:	0200      	lsls	r0, r0, #8
    17e0:	17c2      	asrs	r2, r0, #31
    17e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17e6:	1200      	asrs	r0, r0, #8
    17e8:	4288      	cmp	r0, r1
    17ea:	da0c      	bge.n	1806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
    17ec:	f88a 5000 	strb.w	r5, [sl]
    17f0:	f899 1010 	ldrb.w	r1, [r9, #16]
    17f4:	7b38      	ldrb	r0, [r7, #12]
    17f6:	4281      	cmp	r1, r0
    17f8:	f67f af60 	bls.w	16bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x288>
    17fc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1800:	7845      	ldrb	r5, [r0, #1]
    1802:	2d20      	cmp	r5, #32
    1804:	d1c1      	bne.n	178a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x356>
    1806:	9802      	ldr	r0, [sp, #8]
    1808:	b009      	add	sp, #36	; 0x24
    180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    180e:	0000      	.short	0x0000
    1810:	20000f0c 	.word	0x20000f0c
    1814:	20000c0c 	.word	0x20000c0c
    1818:	20000e8c 	.word	0x20000e8c
    181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1820:	4604      	mov	r4, r0
    1822:	4847      	ldr	r0, [pc, #284]	; (1940 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x50c>)
    1824:	460e      	mov	r6, r1
    1826:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    182a:	4f46      	ldr	r7, [pc, #280]	; (1944 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x510>)
    182c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1830:	2020      	movs	r0, #32
    1832:	b083      	sub	sp, #12
    1834:	4698      	mov	r8, r3
    1836:	4692      	mov	sl, r2
    1838:	7010      	strb	r0, [r2, #0]
    183a:	f507 7920 	add.w	r9, r7, #640	; 0x280
    183e:	2d20      	cmp	r5, #32
    1840:	bf18      	it	ne
    1842:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1846:	d031      	beq.n	18ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
    1848:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    184c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    1850:	1d01      	adds	r1, r0, #4
    1852:	6880      	ldr	r0, [r0, #8]
    1854:	6822      	ldr	r2, [r4, #0]
    1856:	1a10      	subs	r0, r2, r0
    1858:	0200      	lsls	r0, r0, #8
    185a:	17c2      	asrs	r2, r0, #31
    185c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1860:	1200      	asrs	r0, r0, #8
    1862:	d423      	bmi.n	18ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
    1864:	8960      	ldrh	r0, [r4, #10]
    1866:	b1d0      	cbz	r0, 189e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46a>
    1868:	8948      	ldrh	r0, [r1, #10]
    186a:	b9c0      	cbnz	r0, 189e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46a>
    186c:	4608      	mov	r0, r1
    186e:	f000 fb97 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1872:	aa01      	add	r2, sp, #4
    1874:	4669      	mov	r1, sp
    1876:	f002 fb6b 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    187a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    187e:	2800      	cmp	r0, #0
    1880:	bfcc      	ite	gt
    1882:	2001      	movgt	r0, #1
    1884:	2000      	movle	r0, #0
    1886:	f100 0133 	add.w	r1, r0, #51	; 0x33
    188a:	9800      	ldr	r0, [sp, #0]
    188c:	6822      	ldr	r2, [r4, #0]
    188e:	1a10      	subs	r0, r2, r0
    1890:	0200      	lsls	r0, r0, #8
    1892:	17c2      	asrs	r2, r0, #31
    1894:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1898:	1200      	asrs	r0, r0, #8
    189a:	4288      	cmp	r0, r1
    189c:	db06      	blt.n	18ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
    189e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    18a2:	f88a 5000 	strb.w	r5, [sl]
    18a6:	7845      	ldrb	r5, [r0, #1]
    18a8:	2d20      	cmp	r5, #32
    18aa:	d1cd      	bne.n	1848 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x414>
    18ac:	f89a 0000 	ldrb.w	r0, [sl]
    18b0:	f888 0000 	strb.w	r0, [r8]
    18b4:	2d20      	cmp	r5, #32
    18b6:	bf18      	it	ne
    18b8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    18bc:	d03c      	beq.n	1938 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
    18be:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    18c2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
    18c6:	6861      	ldr	r1, [r4, #4]
    18c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    18cc:	4620      	mov	r0, r4
    18ce:	1a51      	subs	r1, r2, r1
    18d0:	0209      	lsls	r1, r1, #8
    18d2:	17ca      	asrs	r2, r1, #31
    18d4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    18d8:	f109 0604 	add.w	r6, r9, #4
    18dc:	1209      	asrs	r1, r1, #8
    18de:	d41b      	bmi.n	1918 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4e4>
    18e0:	8971      	ldrh	r1, [r6, #10]
    18e2:	b349      	cbz	r1, 1938 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
    18e4:	8941      	ldrh	r1, [r0, #10]
    18e6:	bb39      	cbnz	r1, 1938 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
    18e8:	f000 fb5a 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    18ec:	aa01      	add	r2, sp, #4
    18ee:	4669      	mov	r1, sp
    18f0:	f002 fb2e 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    18f4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    18f8:	2800      	cmp	r0, #0
    18fa:	bfcc      	ite	gt
    18fc:	2001      	movgt	r0, #1
    18fe:	2000      	movle	r0, #0
    1900:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1904:	9800      	ldr	r0, [sp, #0]
    1906:	6832      	ldr	r2, [r6, #0]
    1908:	1a10      	subs	r0, r2, r0
    190a:	0200      	lsls	r0, r0, #8
    190c:	17c2      	asrs	r2, r0, #31
    190e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1912:	1200      	asrs	r0, r0, #8
    1914:	4288      	cmp	r0, r1
    1916:	da0f      	bge.n	1938 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
    1918:	f888 5000 	strb.w	r5, [r8]
    191c:	f899 0010 	ldrb.w	r0, [r9, #16]
    1920:	7b21      	ldrb	r1, [r4, #12]
    1922:	4288      	cmp	r0, r1
    1924:	d803      	bhi.n	192e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4fa>
    1926:	b003      	add	sp, #12
    1928:	2000      	movs	r0, #0
    192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    192e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1932:	7845      	ldrb	r5, [r0, #1]
    1934:	2d20      	cmp	r5, #32
    1936:	d1c2      	bne.n	18be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48a>
    1938:	b003      	add	sp, #12
    193a:	2001      	movs	r0, #1
    193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1940:	20000f0c 	.word	0x20000f0c
    1944:	20000c0c 	.word	0x20000c0c
    1948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    194c:	f04f 0800 	mov.w	r8, #0
    1950:	b098      	sub	sp, #96	; 0x60
    1952:	4616      	mov	r6, r2
    1954:	460d      	mov	r5, r1
    1956:	46c3      	mov	fp, r8
    1958:	f002 f8a2 	bl	3aa0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    195c:	4604      	mov	r4, r0
    195e:	2d01      	cmp	r5, #1
    1960:	bf18      	it	ne
    1962:	2d02      	cmpne	r5, #2
    1964:	d005      	beq.n	1972 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x53e>
    1966:	f640 1169 	movw	r1, #2409	; 0x969
    196a:	f04f 0070 	mov.w	r0, #112	; 0x70
    196e:	f002 fe7d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1972:	49ff      	ldr	r1, [pc, #1020]	; (1d70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>)
    1974:	2001      	movs	r0, #1
    1976:	6008      	str	r0, [r1, #0]
    1978:	49fe      	ldr	r1, [pc, #1016]	; (1d74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>)
    197a:	6889      	ldr	r1, [r1, #8]
    197c:	6008      	str	r0, [r1, #0]
    197e:	2000      	movs	r0, #0
    1980:	9006      	str	r0, [sp, #24]
    1982:	1e40      	subs	r0, r0, #1
    1984:	9008      	str	r0, [sp, #32]
    1986:	49fc      	ldr	r1, [pc, #1008]	; (1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    1988:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    198c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    1990:	1d1b      	adds	r3, r3, #4
    1992:	af09      	add	r7, sp, #36	; 0x24
    1994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1996:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    199a:	a809      	add	r0, sp, #36	; 0x24
    199c:	f000 fb00 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    19a0:	9007      	str	r0, [sp, #28]
    19a2:	48f5      	ldr	r0, [pc, #980]	; (1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    19a4:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
    19a8:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
    19ac:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    19b0:	f1b9 0f00 	cmp.w	r9, #0
    19b4:	bf14      	ite	ne
    19b6:	f04f 0a01 	movne.w	sl, #1
    19ba:	f04f 0a00 	moveq.w	sl, #0
    19be:	9809      	ldr	r0, [sp, #36]	; 0x24
    19c0:	9012      	str	r0, [sp, #72]	; 0x48
    19c2:	f1ba 0f00 	cmp.w	sl, #0
    19c6:	d009      	beq.n	19dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a8>
    19c8:	48ec      	ldr	r0, [pc, #944]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    19ca:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    19ce:	b928      	cbnz	r0, 19dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a8>
    19d0:	f002 fde8 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    19d4:	2800      	cmp	r0, #0
    19d6:	bf08      	it	eq
    19d8:	2701      	moveq	r7, #1
    19da:	d000      	beq.n	19de <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5aa>
    19dc:	2700      	movs	r7, #0
    19de:	48e8      	ldr	r0, [pc, #928]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    19e0:	2200      	movs	r2, #0
    19e2:	9214      	str	r2, [sp, #80]	; 0x50
    19e4:	7800      	ldrb	r0, [r0, #0]
    19e6:	4616      	mov	r6, r2
    19e8:	2801      	cmp	r0, #1
    19ea:	bf18      	it	ne
    19ec:	2803      	cmpne	r0, #3
    19ee:	d143      	bne.n	1a78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
    19f0:	48e3      	ldr	r0, [pc, #908]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    19f2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    19f6:	eba8 0009 	sub.w	r0, r8, r9
    19fa:	9014      	str	r0, [sp, #80]	; 0x50
    19fc:	45c1      	cmp	r9, r8
    19fe:	d23b      	bcs.n	1a78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
    1a00:	a803      	add	r0, sp, #12
    1a02:	9005      	str	r0, [sp, #20]
    1a04:	a817      	add	r0, sp, #92	; 0x5c
    1a06:	9010      	str	r0, [sp, #64]	; 0x40
    1a08:	9907      	ldr	r1, [sp, #28]
    1a0a:	f108 0003 	add.w	r0, r8, #3
    1a0e:	4242      	negs	r2, r0
    1a10:	f8df c370 	ldr.w	ip, [pc, #880]	; 1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1a14:	1a08      	subs	r0, r1, r0
    1a16:	2300      	movs	r3, #0
    1a18:	ebbc 0101 	subs.w	r1, ip, r1
    1a1c:	eb73 0103 	sbcs.w	r1, r3, r3
    1a20:	d204      	bcs.n	1a2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f8>
    1a22:	f240 51e1 	movw	r1, #1505	; 0x5e1
    1a26:	2070      	movs	r0, #112	; 0x70
    1a28:	f002 fe20 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a2c:	49d6      	ldr	r1, [pc, #856]	; (1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>)
    1a2e:	428a      	cmp	r2, r1
    1a30:	dd04      	ble.n	1a3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x608>
    1a32:	f240 51e2 	movw	r1, #1506	; 0x5e2
    1a36:	2070      	movs	r0, #112	; 0x70
    1a38:	f002 fe18 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a3c:	49d3      	ldr	r1, [pc, #844]	; (1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>)
    1a3e:	428a      	cmp	r2, r1
    1a40:	da04      	bge.n	1a4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x618>
    1a42:	f240 51e3 	movw	r1, #1507	; 0x5e3
    1a46:	2070      	movs	r0, #112	; 0x70
    1a48:	f002 fe10 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a4c:	49d0      	ldr	r1, [pc, #832]	; (1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>)
    1a4e:	4288      	cmp	r0, r1
    1a50:	bfa8      	it	ge
    1a52:	49d0      	ldrge	r1, [pc, #832]	; (1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>)
    1a54:	da03      	bge.n	1a5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x62a>
    1a56:	2800      	cmp	r0, #0
    1a58:	bfb8      	it	lt
    1a5a:	49cd      	ldrlt	r1, [pc, #820]	; (1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>)
    1a5c:	da00      	bge.n	1a60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x62c>
    1a5e:	1840      	adds	r0, r0, r1
    1a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a62:	9905      	ldr	r1, [sp, #20]
    1a64:	f002 fa74 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1a68:	9803      	ldr	r0, [sp, #12]
    1a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a70:	9003      	str	r0, [sp, #12]
    1a72:	1a08      	subs	r0, r1, r0
    1a74:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1a78:	2f00      	cmp	r7, #0
    1a7a:	bf18      	it	ne
    1a7c:	2632      	movne	r6, #50	; 0x32
    1a7e:	d104      	bne.n	1a8a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x656>
    1a80:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1a84:	2800      	cmp	r0, #0
    1a86:	bf18      	it	ne
    1a88:	2602      	movne	r6, #2
    1a8a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a8e:	d008      	beq.n	1aa2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
    1a90:	9809      	ldr	r0, [sp, #36]	; 0x24
    1a92:	1b00      	subs	r0, r0, r4
    1a94:	0200      	lsls	r0, r0, #8
    1a96:	17c1      	asrs	r1, r0, #31
    1a98:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a9c:	1200      	asrs	r0, r0, #8
    1a9e:	2801      	cmp	r0, #1
    1aa0:	da02      	bge.n	1aa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    1aa2:	2004      	movs	r0, #4
    1aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
    1aa6:	e00b      	b.n	1ac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68c>
    1aa8:	b147      	cbz	r7, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1aaa:	48b4      	ldr	r0, [pc, #720]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1aac:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1ab0:	b120      	cbz	r0, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1ab2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1ab6:	1c06      	adds	r6, r0, #0
    1ab8:	bf18      	it	ne
    1aba:	2602      	movne	r6, #2
    1abc:	4621      	mov	r1, r4
    1abe:	2001      	movs	r0, #1
    1ac0:	f1b9 0f00 	cmp.w	r9, #0
    1ac4:	d002      	beq.n	1acc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    1ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1ac8:	2b1e      	cmp	r3, #30
    1aca:	da02      	bge.n	1ad2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x69e>
    1acc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    1ad0:	b113      	cbz	r3, 1ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
    1ad2:	f04f 0b01 	mov.w	fp, #1
    1ad6:	1e40      	subs	r0, r0, #1
    1ad8:	1983      	adds	r3, r0, r6
    1ada:	48a9      	ldr	r0, [pc, #676]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1adc:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
    1ae0:	7800      	ldrb	r0, [r0, #0]
    1ae2:	9015      	str	r0, [sp, #84]	; 0x54
    1ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
    1ae6:	1a80      	subs	r0, r0, r2
    1ae8:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    1aec:	ebac 0001 	sub.w	r0, ip, r1
    1af0:	0200      	lsls	r0, r0, #8
    1af2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
    1af6:	eb00 601e 	add.w	r0, r0, lr, lsr #24
    1afa:	1200      	asrs	r0, r0, #8
    1afc:	4298      	cmp	r0, r3
    1afe:	db18      	blt.n	1b32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6fe>
    1b00:	2a00      	cmp	r2, #0
    1b02:	bf18      	it	ne
    1b04:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
    1b08:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1b0a:	9710      	str	r7, [sp, #64]	; 0x40
    1b0c:	2700      	movs	r7, #0
    1b0e:	f001 fec1 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1b12:	1a30      	subs	r0, r6, r0
    1b14:	0200      	lsls	r0, r0, #8
    1b16:	17c1      	asrs	r1, r0, #31
    1b18:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b1c:	1200      	asrs	r0, r0, #8
    1b1e:	283e      	cmp	r0, #62	; 0x3e
    1b20:	da3e      	bge.n	1ba0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x76c>
    1b22:	2d01      	cmp	r5, #1
    1b24:	d01f      	beq.n	1b66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x732>
    1b26:	1e70      	subs	r0, r6, #1
    1b28:	9910      	ldr	r1, [sp, #64]	; 0x40
    1b2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b2e:	b311      	cbz	r1, 1b76 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    1b30:	e02c      	b.n	1b8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1b32:	b17a      	cbz	r2, 1b54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x720>
    1b34:	2e00      	cmp	r6, #0
    1b36:	bf04      	itt	eq
    1b38:	9815      	ldreq	r0, [sp, #84]	; 0x54
    1b3a:	2803      	cmpeq	r0, #3
    1b3c:	d00a      	beq.n	1b54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x720>
    1b3e:	b927      	cbnz	r7, 1b4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x716>
    1b40:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1b44:	2800      	cmp	r0, #0
    1b46:	bf18      	it	ne
    1b48:	1e9b      	subne	r3, r3, #2
    1b4a:	2200      	movs	r2, #0
    1b4c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    1b50:	4690      	mov	r8, r2
    1b52:	e7c7      	b.n	1ae4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b0>
    1b54:	bb07      	cbnz	r7, 1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x764>
    1b56:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1b5a:	b1e8      	cbz	r0, 1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x764>
    1b5c:	2000      	movs	r0, #0
    1b5e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    1b62:	1e9b      	subs	r3, r3, #2
    1b64:	e7be      	b.n	1ae4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b0>
    1b66:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b6a:	d120      	bne.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1b6c:	f640 01e2 	movw	r1, #2274	; 0x8e2
    1b70:	2070      	movs	r0, #112	; 0x70
    1b72:	f002 fd7b 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b76:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b7a:	d007      	beq.n	1b8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1b7c:	1a21      	subs	r1, r4, r0
    1b7e:	0209      	lsls	r1, r1, #8
    1b80:	17ca      	asrs	r2, r1, #31
    1b82:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b86:	1209      	asrs	r1, r1, #8
    1b88:	2904      	cmp	r1, #4
    1b8a:	dd03      	ble.n	1b94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x760>
    1b8c:	4604      	mov	r4, r0
    1b8e:	f001 fe87 	bl	38a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b92:	e00c      	b.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1b94:	2900      	cmp	r1, #0
    1b96:	dd0a      	ble.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1b98:	b01b      	add	sp, #108	; 0x6c
    1b9a:	2000      	movs	r0, #0
    1b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ba0:	1e70      	subs	r0, r6, #1
    1ba2:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1ba6:	4620      	mov	r0, r4
    1ba8:	f001 fe7a 	bl	38a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1bac:	4657      	mov	r7, sl
    1bae:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1bb2:	d028      	beq.n	1c06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d2>
    1bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    1bb6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    1bba:	1b00      	subs	r0, r0, r4
    1bbc:	f08b 0301 	eor.w	r3, fp, #1
    1bc0:	4a75      	ldr	r2, [pc, #468]	; (1d98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bc6:	ebac 0c04 	sub.w	ip, ip, r4
    1bca:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1bce:	4283      	cmp	r3, r0
    1bd0:	bf98      	it	ls
    1bd2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1bd6:	d2df      	bcs.n	1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x764>
    1bd8:	4562      	cmp	r2, ip
    1bda:	d3dd      	bcc.n	1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x764>
    1bdc:	4620      	mov	r0, r4
    1bde:	f00e f8e3 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1be2:	4a68      	ldr	r2, [pc, #416]	; (1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1be4:	9907      	ldr	r1, [sp, #28]
    1be6:	1c53      	adds	r3, r2, #1
    1be8:	1a0e      	subs	r6, r1, r0
    1bea:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1bee:	bf24      	itt	cs
    1bf0:	eba0 0c01 	subcs.w	ip, r0, r1
    1bf4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1bf8:	d310      	bcc.n	1c1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    1bfa:	42b2      	cmp	r2, r6
    1bfc:	d208      	bcs.n	1c10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7dc>
    1bfe:	1a10      	subs	r0, r2, r0
    1c00:	4408      	add	r0, r1
    1c02:	1c46      	adds	r6, r0, #1
    1c04:	e00a      	b.n	1c1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    1c06:	f640 2101 	movw	r1, #2561	; 0xa01
    1c0a:	2070      	movs	r0, #112	; 0x70
    1c0c:	f002 fd2e 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c10:	4562      	cmp	r2, ip
    1c12:	d22d      	bcs.n	1c70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83c>
    1c14:	1a51      	subs	r1, r2, r1
    1c16:	4408      	add	r0, r1
    1c18:	1c40      	adds	r0, r0, #1
    1c1a:	4246      	negs	r6, r0
    1c1c:	4857      	ldr	r0, [pc, #348]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1c1e:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    1c22:	b350      	cbz	r0, 1c7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    1c24:	4628      	mov	r0, r5
    1c26:	4645      	mov	r5, r8
    1c28:	f04f 0b00 	mov.w	fp, #0
    1c2c:	46d8      	mov	r8, fp
    1c2e:	2801      	cmp	r0, #1
    1c30:	d005      	beq.n	1c3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80a>
    1c32:	2002      	movs	r0, #2
    1c34:	f002 f87c 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c38:	2001      	movs	r0, #1
    1c3a:	f002 f879 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c3e:	45a9      	cmp	r9, r5
    1c40:	d22c      	bcs.n	1c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x868>
    1c42:	eba6 0105 	sub.w	r1, r6, r5
    1c46:	f04f 0301 	mov.w	r3, #1
    1c4a:	f04f 0203 	mov.w	r2, #3
    1c4e:	f04f 0002 	mov.w	r0, #2
    1c52:	f001 ffa5 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c56:	2800      	cmp	r0, #0
    1c58:	bf08      	it	eq
    1c5a:	f04f 0801 	moveq.w	r8, #1
    1c5e:	f1b9 0f00 	cmp.w	r9, #0
    1c62:	d035      	beq.n	1cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    1c64:	2301      	movs	r3, #1
    1c66:	eba6 0109 	sub.w	r1, r6, r9
    1c6a:	2203      	movs	r2, #3
    1c6c:	4618      	mov	r0, r3
    1c6e:	e023      	b.n	1cb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x884>
    1c70:	f640 21e1 	movw	r1, #2785	; 0xae1
    1c74:	2070      	movs	r0, #112	; 0x70
    1c76:	f002 fcf9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c7a:	45c1      	cmp	r9, r8
    1c7c:	bf34      	ite	cc
    1c7e:	4640      	movcc	r0, r8
    1c80:	4648      	movcs	r0, r9
    1c82:	f1bb 0f00 	cmp.w	fp, #0
    1c86:	bf14      	ite	ne
    1c88:	2100      	movne	r1, #0
    1c8a:	211e      	moveq	r1, #30
    1c8c:	4408      	add	r0, r1
    1c8e:	42b0      	cmp	r0, r6
    1c90:	dbc8      	blt.n	1c24 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    1c92:	f640 2114 	movw	r1, #2580	; 0xa14
    1c96:	2070      	movs	r0, #112	; 0x70
    1c98:	f002 fce8 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c9c:	d910      	bls.n	1cc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x88c>
    1c9e:	2301      	movs	r3, #1
    1ca0:	eba6 0109 	sub.w	r1, r6, r9
    1ca4:	2203      	movs	r2, #3
    1ca6:	4618      	mov	r0, r3
    1ca8:	f001 ff7a 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cac:	b328      	cbz	r0, 1cfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c6>
    1cae:	b17d      	cbz	r5, 1cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    1cb0:	1b71      	subs	r1, r6, r5
    1cb2:	2301      	movs	r3, #1
    1cb4:	2203      	movs	r2, #3
    1cb6:	2002      	movs	r0, #2
    1cb8:	f001 ff72 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cbc:	b1e8      	cbz	r0, 1cfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c6>
    1cbe:	e007      	b.n	1cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    1cc0:	ea55 0009 	orrs.w	r0, r5, r9
    1cc4:	d004      	beq.n	1cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    1cc6:	f640 114c 	movw	r1, #2380	; 0x94c
    1cca:	2070      	movs	r0, #112	; 0x70
    1ccc:	f002 fcce 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cd0:	2301      	movs	r3, #1
    1cd2:	2203      	movs	r2, #3
    1cd4:	4631      	mov	r1, r6
    1cd6:	2000      	movs	r0, #0
    1cd8:	f001 ff62 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cdc:	b168      	cbz	r0, 1cfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c6>
    1cde:	2501      	movs	r5, #1
    1ce0:	f1b8 0f00 	cmp.w	r8, #0
    1ce4:	d003      	beq.n	1cee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ba>
    1ce6:	9812      	ldr	r0, [sp, #72]	; 0x48
    1ce8:	9009      	str	r0, [sp, #36]	; 0x24
    1cea:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
    1cee:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1d9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1cf2:	f1ba 0f00 	cmp.w	sl, #0
    1cf6:	d10e      	bne.n	1d16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e2>
    1cf8:	e009      	b.n	1d0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8da>
    1cfa:	2002      	movs	r0, #2
    1cfc:	f002 f818 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d00:	2001      	movs	r0, #1
    1d02:	f002 f815 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d06:	b01b      	add	sp, #108	; 0x6c
    1d08:	2000      	movs	r0, #0
    1d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d0e:	481b      	ldr	r0, [pc, #108]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1d10:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1d14:	b100      	cbz	r0, 1d18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e4>
    1d16:	b34f      	cbz	r7, 1d6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d18:	f8df a060 	ldr.w	sl, [pc, #96]	; 1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d1c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1d20:	b118      	cbz	r0, 1d2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8f6>
    1d22:	f002 faf1 	bl	4308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1d26:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1d2a:	b307      	cbz	r7, 1d6e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d2c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1d30:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1d34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d38:	f8c8 0000 	str.w	r0, [r8]
    1d3c:	2300      	movs	r3, #0
    1d3e:	2203      	movs	r2, #3
    1d40:	2005      	movs	r0, #5
    1d42:	f001 ff2d 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d46:	b378      	cbz	r0, 1da8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>
    1d48:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1d4c:	2005      	movs	r0, #5
    1d4e:	f002 f8a9 	bl	3ea4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1d52:	4913      	ldr	r1, [pc, #76]	; (1da0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>)
    1d54:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1d58:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1d5c:	4911      	ldr	r1, [pc, #68]	; (1da4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58>)
    1d5e:	12e0      	asrs	r0, r4, #11
    1d60:	6008      	str	r0, [r1, #0]
    1d62:	4c06      	ldr	r4, [pc, #24]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1d64:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d68:	b3f0      	cbz	r0, 1de8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1d6a:	e05d      	b.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d6c:	e01d      	b.n	1daa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d6e:	e021      	b.n	1db4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1d70:	40000508 	.word	0x40000508
    1d74:	20000010 	.word	0x20000010
    1d78:	20000c0c 	.word	0x20000c0c
    1d7c:	20000f0c 	.word	0x20000f0c
    1d80:	20000012 	.word	0x20000012
    1d84:	1e847fff 	.word	0x1e847fff
    1d88:	07a12000 	.word	0x07a12000
    1d8c:	f85ee000 	.word	0xf85ee000
    1d90:	1e848000 	.word	0x1e848000
    1d94:	e17b8000 	.word	0xe17b8000
    1d98:	003fffff 	.word	0x003fffff
    1d9c:	4001f508 	.word	0x4001f508
    1da0:	4001f098 	.word	0x4001f098
    1da4:	4001f504 	.word	0x4001f504
    1da8:	e035      	b.n	1e16 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1daa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1e64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1dae:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1db2:	b358      	cbz	r0, 1e0c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1db4:	4c2b      	ldr	r4, [pc, #172]	; (1e64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>)
    1db6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dba:	b150      	cbz	r0, 1dd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1dbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1dc0:	f8c8 0000 	str.w	r0, [r8]
    1dc4:	2005      	movs	r0, #5
    1dc6:	f001 ffb3 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1dca:	f002 fb05 	bl	43d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1dce:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1dd2:	ac06      	add	r4, sp, #24
    1dd4:	4824      	ldr	r0, [pc, #144]	; (1e68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>)
    1dd6:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1dda:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    1dde:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    1de2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    1de6:	e000      	b.n	1dea <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de8:	e01a      	b.n	1e20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1dea:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
    1dee:	ac0a      	add	r4, sp, #40	; 0x28
    1df0:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1df4:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
    1df8:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
    1dfc:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
    1e00:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
    1e04:	b01b      	add	sp, #108	; 0x6c
    1e06:	2001      	movs	r0, #1
    1e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e0c:	f002 fa98 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e10:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1e14:	e789      	b.n	1d2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8f6>
    1e16:	f44f 7152 	mov.w	r1, #840	; 0x348
    1e1a:	2070      	movs	r0, #112	; 0x70
    1e1c:	f002 fc26 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e20:	f002 facc 	bl	43bc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1e24:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1e28:	eba6 0009 	sub.w	r0, r6, r9
    1e2c:	f1a0 0119 	sub.w	r1, r0, #25
    1e30:	2900      	cmp	r1, #0
    1e32:	dc04      	bgt.n	1e3e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e34:	f640 213e 	movw	r1, #2622	; 0xa3e
    1e38:	2070      	movs	r0, #112	; 0x70
    1e3a:	f002 fc17 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3e:	2203      	movs	r2, #3
    1e40:	2301      	movs	r3, #1
    1e42:	4610      	mov	r0, r2
    1e44:	f001 feac 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1e48:	b138      	cbz	r0, 1e5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e4a:	4808      	ldr	r0, [pc, #32]	; (1e6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1e4c:	6880      	ldr	r0, [r0, #8]
    1e4e:	f8c0 b000 	str.w	fp, [r0]
    1e52:	4807      	ldr	r0, [pc, #28]	; (1e70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1e54:	f8c0 b000 	str.w	fp, [r0]
    1e58:	e7bb      	b.n	1dd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1e5a:	f640 2149 	movw	r1, #2633	; 0xa49
    1e5e:	2070      	movs	r0, #112	; 0x70
    1e60:	f002 fc04 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e64:	20000f0c 	.word	0x20000f0c
    1e68:	20000c0c 	.word	0x20000c0c
    1e6c:	20000010 	.word	0x20000010
    1e70:	40000508 	.word	0x40000508
    1e74:	b510      	push	{r4, lr}
    1e76:	4c15      	ldr	r4, [pc, #84]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1e78:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e7c:	2820      	cmp	r0, #32
    1e7e:	bf18      	it	ne
    1e80:	bd10      	popne	{r4, pc}
    1e82:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1e86:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1e8a:	f890 1020 	ldrb.w	r1, [r0, #32]
    1e8e:	2920      	cmp	r1, #32
    1e90:	d016      	beq.n	1ec0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1e92:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>
    1e96:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1e9a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1e9e:	785b      	ldrb	r3, [r3, #1]
    1ea0:	f880 3020 	strb.w	r3, [r0, #32]
    1ea4:	2301      	movs	r3, #1
    1ea6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1eaa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1eae:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1eb2:	2002      	movs	r0, #2
    1eb4:	f000 f8b2 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    1eb8:	2000      	movs	r0, #0
    1eba:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1ebe:	bd10      	pop	{r4, pc}
    1ec0:	f240 3195 	movw	r1, #917	; 0x395
    1ec4:	2070      	movs	r0, #112	; 0x70
    1ec6:	f002 fbd1 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eca:	0000      	.short	0x0000
    1ecc:	20000f0c 	.word	0x20000f0c
    1ed0:	20000e8c 	.word	0x20000e8c
    1ed4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1ed8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1f90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1edc:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ee0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1ee4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ee8:	2c20      	cmp	r4, #32
    1eea:	bf08      	it	eq
    1eec:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1ef0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1f94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x248>
    1ef4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1f98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1ef8:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
    1efc:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    1f00:	2607      	movs	r6, #7
    1f02:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1f06:	2801      	cmp	r0, #1
    1f08:	d00e      	beq.n	1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1f0a:	2804      	cmp	r0, #4
    1f0c:	bf08      	it	eq
    1f0e:	2602      	moveq	r6, #2
    1f10:	d00a      	beq.n	1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1f12:	2805      	cmp	r0, #5
    1f14:	bf0c      	ite	eq
    1f16:	2603      	moveq	r6, #3
    1f18:	2806      	cmpne	r0, #6
    1f1a:	d005      	beq.n	1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1f1c:	f640 01af 	movw	r1, #2223	; 0x8af
    1f20:	f04f 0070 	mov.w	r0, #112	; 0x70
    1f24:	f002 fba2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f28:	f1ba 0f00 	cmp.w	sl, #0
    1f2c:	bf18      	it	ne
    1f2e:	f3af 8000 	nopne.w
    1f32:	f3ef 8010 	mrs	r0, PRIMASK
    1f36:	b672      	cpsid	i
    1f38:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1f3c:	784a      	ldrb	r2, [r1, #1]
    1f3e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1f42:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1f46:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1f4a:	42a2      	cmp	r2, r4
    1f4c:	bf04      	itt	eq
    1f4e:	2220      	moveq	r2, #32
    1f50:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1f54:	b1a8      	cbz	r0, 1f82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x236>
    1f56:	462a      	mov	r2, r5
    1f58:	4621      	mov	r1, r4
    1f5a:	2001      	movs	r0, #1
    1f5c:	f000 f85e 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    1f60:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1f64:	4631      	mov	r1, r6
    1f66:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    1f6a:	4620      	mov	r0, r4
    1f6c:	4790      	blx	r2
    1f6e:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1f72:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1f76:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1f7a:	2c20      	cmp	r4, #32
    1f7c:	d1be      	bne.n	1efc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1f7e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1f82:	4806      	ldr	r0, [pc, #24]	; (1f9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>)
    1f84:	2800      	cmp	r0, #0
    1f86:	bf18      	it	ne
    1f88:	f3af 8000 	nopne.w
    1f8c:	b662      	cpsie	i
    1f8e:	e7e2      	b.n	1f56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f90:	20000f0c 	.word	0x20000f0c
    1f94:	00000000 	.word	0x00000000
    1f98:	20000e8c 	.word	0x20000e8c
    1f9c:	00000000 	.word	0x00000000
    1fa0:	b510      	push	{r4, lr}
    1fa2:	4604      	mov	r4, r0
    1fa4:	6800      	ldr	r0, [r0, #0]
    1fa6:	f00d feff 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1faa:	4601      	mov	r1, r0
    1fac:	8960      	ldrh	r0, [r4, #10]
    1fae:	f994 2008 	ldrsb.w	r2, [r4, #8]
    1fb2:	f8df c054 	ldr.w	ip, [pc, #84]	; 2008 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    1fb6:	4410      	add	r0, r2
    1fb8:	1cc2      	adds	r2, r0, #3
    1fba:	1888      	adds	r0, r1, r2
    1fbc:	2300      	movs	r3, #0
    1fbe:	ebbc 0101 	subs.w	r1, ip, r1
    1fc2:	eb73 0103 	sbcs.w	r1, r3, r3
    1fc6:	d204      	bcs.n	1fd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x286>
    1fc8:	f240 51e1 	movw	r1, #1505	; 0x5e1
    1fcc:	2070      	movs	r0, #112	; 0x70
    1fce:	f002 fb4d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fd2:	490e      	ldr	r1, [pc, #56]	; (200c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c0>)
    1fd4:	428a      	cmp	r2, r1
    1fd6:	dd04      	ble.n	1fe2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd8:	f240 51e2 	movw	r1, #1506	; 0x5e2
    1fdc:	2070      	movs	r0, #112	; 0x70
    1fde:	f002 fb45 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe2:	490b      	ldr	r1, [pc, #44]	; (2010 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>)
    1fe4:	428a      	cmp	r2, r1
    1fe6:	da04      	bge.n	1ff2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a6>
    1fe8:	f240 51e3 	movw	r1, #1507	; 0x5e3
    1fec:	2070      	movs	r0, #112	; 0x70
    1fee:	f002 fb3d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ff2:	4908      	ldr	r1, [pc, #32]	; (2014 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>)
    1ff4:	4288      	cmp	r0, r1
    1ff6:	bfa8      	it	ge
    1ff8:	4907      	ldrge	r1, [pc, #28]	; (2018 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>)
    1ffa:	da03      	bge.n	2004 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b8>
    1ffc:	2800      	cmp	r0, #0
    1ffe:	bfb4      	ite	lt
    2000:	4904      	ldrlt	r1, [pc, #16]	; (2014 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>)
    2002:	bd10      	popge	{r4, pc}
    2004:	1840      	adds	r0, r0, r1
    2006:	bd10      	pop	{r4, pc}
    2008:	1e847fff 	.word	0x1e847fff
    200c:	07a12000 	.word	0x07a12000
    2010:	f85ee000 	.word	0xf85ee000
    2014:	1e848000 	.word	0x1e848000
    2018:	e17b8000 	.word	0xe17b8000
    201c:	f8df c054 	ldr.w	ip, [pc, #84]	; 2074 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>
    2020:	b510      	push	{r4, lr}
    2022:	2300      	movs	r3, #0
    2024:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2028:	2807      	cmp	r0, #7
    202a:	d21e      	bcs.n	206a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    202c:	e8df f000 	tbb	[pc, r0]
    2030:	05050505 	.word	0x05050505
    2034:	00040404 	.word	0x00040404
    2038:	2301      	movs	r3, #1
    203a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    203e:	2b00      	cmp	r3, #0
    2040:	bf08      	it	eq
    2042:	bd10      	popeq	{r4, pc}
    2044:	480c      	ldr	r0, [pc, #48]	; (2078 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    2046:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    204a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    204e:	2820      	cmp	r0, #32
    2050:	bf0e      	itee	eq
    2052:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2056:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    205a:	7041      	strbne	r1, [r0, #1]
    205c:	2020      	movs	r0, #32
    205e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2062:	7058      	strb	r0, [r3, #1]
    2064:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2068:	bd10      	pop	{r4, pc}
    206a:	f240 215e 	movw	r1, #606	; 0x25e
    206e:	2070      	movs	r0, #112	; 0x70
    2070:	f002 fafc 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2074:	20000e8c 	.word	0x20000e8c
    2078:	20000f0c 	.word	0x20000f0c
    207c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2080:	b083      	sub	sp, #12
    2082:	485c      	ldr	r0, [pc, #368]	; (21f4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a8>)
    2084:	9904      	ldr	r1, [sp, #16]
    2086:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    208a:	9001      	str	r0, [sp, #4]
    208c:	f890 4020 	ldrb.w	r4, [r0, #32]
    2090:	9803      	ldr	r0, [sp, #12]
    2092:	4625      	mov	r5, r4
    2094:	2801      	cmp	r0, #1
    2096:	bf18      	it	ne
    2098:	2802      	cmpne	r0, #2
    209a:	d005      	beq.n	20a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    209c:	f640 2185 	movw	r1, #2693	; 0xa85
    20a0:	f04f 0070 	mov.w	r0, #112	; 0x70
    20a4:	f002 fae2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20a8:	2700      	movs	r7, #0
    20aa:	2d20      	cmp	r5, #32
    20ac:	d04b      	beq.n	2146 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fa>
    20ae:	4851      	ldr	r0, [pc, #324]	; (21f4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a8>)
    20b0:	9100      	str	r1, [sp, #0]
    20b2:	2600      	movs	r6, #0
    20b4:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    20b8:	2800      	cmp	r0, #0
    20ba:	bf08      	it	eq
    20bc:	2602      	moveq	r6, #2
    20be:	f001 fbe9 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    20c2:	f8df a138 	ldr.w	sl, [pc, #312]	; 21fc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b0>
    20c6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    20ca:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    20ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 21f8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ac>
    20d2:	684a      	ldr	r2, [r1, #4]
    20d4:	6889      	ldr	r1, [r1, #8]
    20d6:	1a12      	subs	r2, r2, r0
    20d8:	1a09      	subs	r1, r1, r0
    20da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    20de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    20e2:	4296      	cmp	r6, r2
    20e4:	bf98      	it	ls
    20e6:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    20ea:	d201      	bcs.n	20f0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    20ec:	4589      	cmp	r9, r1
    20ee:	d228      	bcs.n	2142 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f6>
    20f0:	4a43      	ldr	r2, [pc, #268]	; (2200 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b4>)
    20f2:	9900      	ldr	r1, [sp, #0]
    20f4:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    20f8:	4622      	mov	r2, r4
    20fa:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    20fe:	784c      	ldrb	r4, [r1, #1]
    2100:	2c20      	cmp	r4, #32
    2102:	d016      	beq.n	2132 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e6>
    2104:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    2108:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    210c:	f8dc 8004 	ldr.w	r8, [ip, #4]
    2110:	f8dc c008 	ldr.w	ip, [ip, #8]
    2114:	eba8 0800 	sub.w	r8, r8, r0
    2118:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    211c:	ebac 0100 	sub.w	r1, ip, r0
    2120:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2124:	4546      	cmp	r6, r8
    2126:	bf98      	it	ls
    2128:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    212c:	d2e4      	bcs.n	20f8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ac>
    212e:	4589      	cmp	r9, r1
    2130:	d3e2      	bcc.n	20f8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ac>
    2132:	2a20      	cmp	r2, #32
    2134:	d005      	beq.n	2142 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f6>
    2136:	2120      	movs	r1, #32
    2138:	2004      	movs	r0, #4
    213a:	9b00      	ldr	r3, [sp, #0]
    213c:	f7ff f9e8 	bl	1510 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    2140:	4604      	mov	r4, r0
    2142:	42ac      	cmp	r4, r5
    2144:	d115      	bne.n	2172 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x426>
    2146:	482f      	ldr	r0, [pc, #188]	; (2204 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b8>)
    2148:	2800      	cmp	r0, #0
    214a:	bf18      	it	ne
    214c:	f3af 8000 	nopne.w
    2150:	f001 fba0 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2154:	4c27      	ldr	r4, [pc, #156]	; (21f4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a8>)
    2156:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    215a:	2920      	cmp	r1, #32
    215c:	d00d      	beq.n	217a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    215e:	68e1      	ldr	r1, [r4, #12]
    2160:	1c82      	adds	r2, r0, #2
    2162:	1a51      	subs	r1, r2, r1
    2164:	0209      	lsls	r1, r1, #8
    2166:	17ca      	asrs	r2, r1, #31
    2168:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    216c:	1209      	asrs	r1, r1, #8
    216e:	2900      	cmp	r1, #0
    2170:	dd03      	ble.n	217a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    2172:	b005      	add	sp, #20
    2174:	2000      	movs	r0, #0
    2176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    217a:	2d20      	cmp	r5, #32
    217c:	d00d      	beq.n	219a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44e>
    217e:	462a      	mov	r2, r5
    2180:	9903      	ldr	r1, [sp, #12]
    2182:	f7ff fbe1 	bl	1948 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
    2186:	b358      	cbz	r0, 21e0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x494>
    2188:	9801      	ldr	r0, [sp, #4]
    218a:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    218e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2192:	b005      	add	sp, #20
    2194:	2001      	movs	r0, #1
    2196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    219a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    219e:	b118      	cbz	r0, 21a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45c>
    21a0:	f002 f8b2 	bl	4308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    21a4:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    21a8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    21ac:	b150      	cbz	r0, 21c4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x478>
    21ae:	4916      	ldr	r1, [pc, #88]	; (2208 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4bc>)
    21b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    21b4:	6008      	str	r0, [r1, #0]
    21b6:	2005      	movs	r0, #5
    21b8:	f001 fdba 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    21bc:	f002 f90c 	bl	43d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    21c0:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    21c4:	2004      	movs	r0, #4
    21c6:	f001 fdb3 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    21ca:	f001 fe0d 	bl	3de8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    21ce:	2020      	movs	r0, #32
    21d0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    21d4:	480d      	ldr	r0, [pc, #52]	; (220c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c0>)
    21d6:	6880      	ldr	r0, [r0, #8]
    21d8:	6007      	str	r7, [r0, #0]
    21da:	480d      	ldr	r0, [pc, #52]	; (2210 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c4>)
    21dc:	6007      	str	r7, [r0, #0]
    21de:	e7d8      	b.n	2192 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x446>
    21e0:	462a      	mov	r2, r5
    21e2:	2120      	movs	r1, #32
    21e4:	2004      	movs	r0, #4
    21e6:	9b04      	ldr	r3, [sp, #16]
    21e8:	f7ff f992 	bl	1510 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    21ec:	b005      	add	sp, #20
    21ee:	2000      	movs	r0, #0
    21f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21f4:	20000f0c 	.word	0x20000f0c
    21f8:	003fffff 	.word	0x003fffff
    21fc:	20000c0c 	.word	0x20000c0c
    2200:	20000e8c 	.word	0x20000e8c
    2204:	00000000 	.word	0x00000000
    2208:	4001f508 	.word	0x4001f508
    220c:	20000010 	.word	0x20000010
    2210:	40000508 	.word	0x40000508

00002214 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2218:	4e73      	ldr	r6, [pc, #460]	; (23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    221a:	4607      	mov	r7, r0
    221c:	b087      	sub	sp, #28
    221e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2222:	468a      	mov	sl, r1
    2224:	2820      	cmp	r0, #32
    2226:	d05a      	beq.n	22de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2228:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    222c:	f106 040c 	add.w	r4, r6, #12
    2230:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2234:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    2238:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    223c:	2020      	movs	r0, #32
    223e:	f88d 0000 	strb.w	r0, [sp]
    2242:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2246:	aa03      	add	r2, sp, #12
    2248:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    224c:	a901      	add	r1, sp, #4
    224e:	f890 5020 	ldrb.w	r5, [r0, #32]
    2252:	6930      	ldr	r0, [r6, #16]
    2254:	9002      	str	r0, [sp, #8]
    2256:	6830      	ldr	r0, [r6, #0]
    2258:	4438      	add	r0, r7
    225a:	f001 fe79 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    225e:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    2262:	2800      	cmp	r0, #0
    2264:	dd02      	ble.n	226c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    2266:	9801      	ldr	r0, [sp, #4]
    2268:	1c40      	adds	r0, r0, #1
    226a:	9001      	str	r0, [sp, #4]
    226c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    2270:	9901      	ldr	r1, [sp, #4]
    2272:	1843      	adds	r3, r0, r1
    2274:	2f64      	cmp	r7, #100	; 0x64
    2276:	d337      	bcc.n	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    2278:	495c      	ldr	r1, [pc, #368]	; (23ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    227a:	2200      	movs	r2, #0
    227c:	1bc9      	subs	r1, r1, r7
    227e:	eb72 0002 	sbcs.w	r0, r2, r2
    2282:	d331      	bcc.n	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    2284:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2288:	1a18      	subs	r0, r3, r0
    228a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    228e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2292:	d229      	bcs.n	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    2294:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    2298:	6060      	str	r0, [r4, #4]
    229a:	4853      	ldr	r0, [pc, #332]	; (23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    229c:	f884 a00c 	strb.w	sl, [r4, #12]
    22a0:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
    22a4:	46ea      	mov	sl, sp
    22a6:	2d20      	cmp	r5, #32
    22a8:	bf1c      	itt	ne
    22aa:	4851      	ldrne	r0, [pc, #324]	; (23f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    22ac:	eb00 1b81 	addne.w	fp, r0, r1, lsl #6
    22b0:	d04a      	beq.n	2348 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    22b2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    22b6:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    22ba:	6860      	ldr	r0, [r4, #4]
    22bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    22c0:	4621      	mov	r1, r4
    22c2:	1a10      	subs	r0, r2, r0
    22c4:	0200      	lsls	r0, r0, #8
    22c6:	17c2      	asrs	r2, r0, #31
    22c8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    22cc:	f108 0604 	add.w	r6, r8, #4
    22d0:	1200      	asrs	r0, r0, #8
    22d2:	d426      	bmi.n	2322 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    22d4:	8970      	ldrh	r0, [r6, #10]
    22d6:	b388      	cbz	r0, 233c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    22d8:	8948      	ldrh	r0, [r1, #10]
    22da:	b148      	cbz	r0, 22f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    22dc:	e034      	b.n	2348 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    22de:	f640 3152 	movw	r1, #2898	; 0xb52
    22e2:	2070      	movs	r0, #112	; 0x70
    22e4:	f002 f9c2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e8:	b007      	add	sp, #28
    22ea:	2001      	movs	r0, #1
    22ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22f0:	4620      	mov	r0, r4
    22f2:	f7ff fe55 	bl	1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    22f6:	aa05      	add	r2, sp, #20
    22f8:	a904      	add	r1, sp, #16
    22fa:	f001 fe29 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    22fe:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    2302:	2800      	cmp	r0, #0
    2304:	bfcc      	ite	gt
    2306:	2001      	movgt	r0, #1
    2308:	2000      	movle	r0, #0
    230a:	f100 0133 	add.w	r1, r0, #51	; 0x33
    230e:	9804      	ldr	r0, [sp, #16]
    2310:	6832      	ldr	r2, [r6, #0]
    2312:	1a10      	subs	r0, r2, r0
    2314:	0200      	lsls	r0, r0, #8
    2316:	17c2      	asrs	r2, r0, #31
    2318:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    231c:	1200      	asrs	r0, r0, #8
    231e:	4288      	cmp	r0, r1
    2320:	da12      	bge.n	2348 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2322:	f88a 5000 	strb.w	r5, [sl]
    2326:	f898 1010 	ldrb.w	r1, [r8, #16]
    232a:	7b20      	ldrb	r0, [r4, #12]
    232c:	4281      	cmp	r1, r0
    232e:	d806      	bhi.n	233e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    2330:	9802      	ldr	r0, [sp, #8]
    2332:	6060      	str	r0, [r4, #4]
    2334:	b007      	add	sp, #28
    2336:	2003      	movs	r0, #3
    2338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    233c:	e004      	b.n	2348 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    233e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2342:	7845      	ldrb	r5, [r0, #1]
    2344:	2d20      	cmp	r5, #32
    2346:	d1b4      	bne.n	22b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    2348:	4d27      	ldr	r5, [pc, #156]	; (23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    234a:	68a8      	ldr	r0, [r5, #8]
    234c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2350:	d016      	beq.n	2380 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    2352:	f001 fa9f 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2356:	68a9      	ldr	r1, [r5, #8]
    2358:	1a08      	subs	r0, r1, r0
    235a:	0200      	lsls	r0, r0, #8
    235c:	17c1      	asrs	r1, r0, #31
    235e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2362:	1200      	asrs	r0, r0, #8
    2364:	2802      	cmp	r0, #2
    2366:	dc05      	bgt.n	2374 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    2368:	9802      	ldr	r0, [sp, #8]
    236a:	6060      	str	r0, [r4, #4]
    236c:	b007      	add	sp, #28
    236e:	2002      	movs	r0, #2
    2370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2374:	2005      	movs	r0, #5
    2376:	f001 fcdb 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    237a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    237e:	60a8      	str	r0, [r5, #8]
    2380:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2384:	f89d 2000 	ldrb.w	r2, [sp]
    2388:	2120      	movs	r1, #32
    238a:	2a20      	cmp	r2, #32
    238c:	bf13      	iteet	ne
    238e:	2005      	movne	r0, #5
    2390:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    2394:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2398:	f7ff f8ba 	blne	1510 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    239c:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    23a0:	4913      	ldr	r1, [pc, #76]	; (23f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    23a2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    23a6:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
    23aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    23ae:	7048      	strb	r0, [r1, #1]
    23b0:	6828      	ldr	r0, [r5, #0]
    23b2:	4438      	add	r0, r7
    23b4:	6028      	str	r0, [r5, #0]
    23b6:	2001      	movs	r0, #1
    23b8:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    23bc:	7e68      	ldrb	r0, [r5, #25]
    23be:	2801      	cmp	r0, #1
    23c0:	d105      	bne.n	23ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ba>
    23c2:	6928      	ldr	r0, [r5, #16]
    23c4:	1e40      	subs	r0, r0, #1
    23c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ca:	f001 fb03 	bl	39d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    23ce:	f89d 0000 	ldrb.w	r0, [sp]
    23d2:	2820      	cmp	r0, #32
    23d4:	d003      	beq.n	23de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ca>
    23d6:	4807      	ldr	r0, [pc, #28]	; (23f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    23d8:	7840      	ldrb	r0, [r0, #1]
    23da:	f002 fa17 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    23de:	b007      	add	sp, #28
    23e0:	2000      	movs	r0, #0
    23e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e6:	0000      	.short	0x0000
    23e8:	20000f0c 	.word	0x20000f0c
    23ec:	07a11fff 	.word	0x07a11fff
    23f0:	20000e8c 	.word	0x20000e8c
    23f4:	20000010 	.word	0x20000010

000023f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    23f8:	4602      	mov	r2, r0
    23fa:	f8df c054 	ldr.w	ip, [pc, #84]	; 2450 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    23fe:	b510      	push	{r4, lr}
    2400:	2300      	movs	r3, #0
    2402:	ebbc 0202 	subs.w	r2, ip, r2
    2406:	4408      	add	r0, r1
    2408:	eb73 0203 	sbcs.w	r2, r3, r3
    240c:	d204      	bcs.n	2418 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    240e:	f240 51e1 	movw	r1, #1505	; 0x5e1
    2412:	2070      	movs	r0, #112	; 0x70
    2414:	f002 f92a 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2418:	4a0e      	ldr	r2, [pc, #56]	; (2454 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    241a:	4291      	cmp	r1, r2
    241c:	dd04      	ble.n	2428 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    241e:	f240 51e2 	movw	r1, #1506	; 0x5e2
    2422:	2070      	movs	r0, #112	; 0x70
    2424:	f002 f922 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2428:	4a0b      	ldr	r2, [pc, #44]	; (2458 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    242a:	4291      	cmp	r1, r2
    242c:	da04      	bge.n	2438 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    242e:	f240 51e3 	movw	r1, #1507	; 0x5e3
    2432:	2070      	movs	r0, #112	; 0x70
    2434:	f002 f91a 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2438:	4908      	ldr	r1, [pc, #32]	; (245c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    243a:	4288      	cmp	r0, r1
    243c:	bfa8      	it	ge
    243e:	4908      	ldrge	r1, [pc, #32]	; (2460 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    2440:	da03      	bge.n	244a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    2442:	2800      	cmp	r0, #0
    2444:	bfb4      	ite	lt
    2446:	4905      	ldrlt	r1, [pc, #20]	; (245c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    2448:	bd10      	popge	{r4, pc}
    244a:	1840      	adds	r0, r0, r1
    244c:	bd10      	pop	{r4, pc}
    244e:	0000      	.short	0x0000
    2450:	1e847fff 	.word	0x1e847fff
    2454:	07a12000 	.word	0x07a12000
    2458:	f85ee000 	.word	0xf85ee000
    245c:	1e848000 	.word	0x1e848000
    2460:	e17b8000 	.word	0xe17b8000

00002464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2464:	4a10      	ldr	r2, [pc, #64]	; (24a8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    2466:	1a0b      	subs	r3, r1, r0
    2468:	f102 0c01 	add.w	ip, r2, #1
    246c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2470:	bf3c      	itt	cc
    2472:	4618      	movcc	r0, r3
    2474:	4770      	bxcc	lr
    2476:	b510      	push	{r4, lr}
    2478:	1a44      	subs	r4, r0, r1
    247a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    247e:	bf3c      	itt	cc
    2480:	4618      	movcc	r0, r3
    2482:	bd10      	popcc	{r4, pc}
    2484:	429a      	cmp	r2, r3
    2486:	d203      	bcs.n	2490 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2488:	1a10      	subs	r0, r2, r0
    248a:	4408      	add	r0, r1
    248c:	1c40      	adds	r0, r0, #1
    248e:	bd10      	pop	{r4, pc}
    2490:	42a2      	cmp	r2, r4
    2492:	d204      	bcs.n	249e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2494:	1a51      	subs	r1, r2, r1
    2496:	4408      	add	r0, r1
    2498:	1c40      	adds	r0, r0, #1
    249a:	4240      	negs	r0, r0
    249c:	bd10      	pop	{r4, pc}
    249e:	f640 21e1 	movw	r1, #2785	; 0xae1
    24a2:	2070      	movs	r0, #112	; 0x70
    24a4:	f002 f8e2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24a8:	1e847fff 	.word	0x1e847fff

000024ac <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    24ac:	490b      	ldr	r1, [pc, #44]	; (24dc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    24ae:	b510      	push	{r4, lr}
    24b0:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    24b4:	2820      	cmp	r0, #32
    24b6:	d00c      	beq.n	24d2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    24b8:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    24bc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    24c0:	4a07      	ldr	r2, [pc, #28]	; (24e0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    24c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    24c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    24ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    24ce:	2104      	movs	r1, #4
    24d0:	4710      	bx	r2
    24d2:	f640 0193 	movw	r1, #2195	; 0x893
    24d6:	2070      	movs	r0, #112	; 0x70
    24d8:	f002 f8c8 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24dc:	20000f0c 	.word	0x20000f0c
    24e0:	20000c0c 	.word	0x20000c0c

000024e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    24e4:	b570      	push	{r4, r5, r6, lr}
    24e6:	4e60      	ldr	r6, [pc, #384]	; (2668 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    24e8:	4960      	ldr	r1, [pc, #384]	; (266c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    24ea:	2501      	movs	r5, #1
    24ec:	f506 7440 	add.w	r4, r6, #768	; 0x300
    24f0:	2808      	cmp	r0, #8
    24f2:	d27c      	bcs.n	25ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    24f4:	e8df f000 	tbb	[pc, r0]
    24f8:	9a885704 	.word	0x9a885704
    24fc:	a49f3eb2 	.word	0xa49f3eb2
    2500:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2504:	b918      	cbnz	r0, 250e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2506:	f001 ff1b 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    250a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    250e:	8ae0      	ldrh	r0, [r4, #22]
    2510:	b110      	cbz	r0, 2518 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2512:	f002 f847 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2516:	b188      	cbz	r0, 253c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2518:	f7ff fcac 	bl	1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    251c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    2520:	68a1      	ldr	r1, [r4, #8]
    2522:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2526:	d005      	beq.n	2534 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2528:	2301      	movs	r3, #1
    252a:	2203      	movs	r2, #3
    252c:	2005      	movs	r0, #5
    252e:	f001 fb37 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2532:	b140      	cbz	r0, 2546 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2534:	7e60      	ldrb	r0, [r4, #25]
    2536:	2801      	cmp	r0, #1
    2538:	d110      	bne.n	255c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    253a:	e009      	b.n	2550 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    253c:	f640 014b 	movw	r1, #2123	; 0x84b
    2540:	2070      	movs	r0, #112	; 0x70
    2542:	f002 f893 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2546:	f44f 6105 	mov.w	r1, #2128	; 0x850
    254a:	2070      	movs	r0, #112	; 0x70
    254c:	f002 f88e 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2550:	6920      	ldr	r0, [r4, #16]
    2552:	1e40      	subs	r0, r0, #1
    2554:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2558:	f001 fa3c 	bl	39d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    255c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2560:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2564:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2568:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    256c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2570:	2101      	movs	r1, #1
    2572:	4710      	bx	r2
    2574:	f7ff fc7e 	bl	1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    2578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    257c:	60a0      	str	r0, [r4, #8]
    257e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2582:	b158      	cbz	r0, 259c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    2584:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2588:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    258c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2590:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    2594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2598:	2106      	movs	r1, #6
    259a:	4710      	bx	r2
    259c:	f44f 6106 	mov.w	r1, #2144	; 0x860
    25a0:	2070      	movs	r0, #112	; 0x70
    25a2:	f002 f863 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a6:	f7ff fc65 	bl	1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    25aa:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    25ae:	f001 fff9 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25b2:	b118      	cbz	r0, 25bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    25b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    25b8:	b128      	cbz	r0, 25c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    25ba:	e008      	b.n	25ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    25bc:	f640 016f 	movw	r1, #2159	; 0x86f
    25c0:	2070      	movs	r0, #112	; 0x70
    25c2:	f002 f853 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c6:	f001 febb 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    25ca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    25ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    25d2:	b158      	cbz	r0, 25ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    25d4:	4926      	ldr	r1, [pc, #152]	; (2670 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    25d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    25da:	6008      	str	r0, [r1, #0]
    25dc:	2005      	movs	r0, #5
    25de:	f001 fba7 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    25e2:	f001 fef9 	bl	43d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    25e6:	2000      	movs	r0, #0
    25e8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    25ec:	e000      	b.n	25f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    25ee:	e035      	b.n	265c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    25f0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25f4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    25f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    25fc:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    2600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2604:	2100      	movs	r1, #0
    2606:	4710      	bx	r2
    2608:	f001 fc38 	bl	3e7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    260c:	8ae0      	ldrh	r0, [r4, #22]
    260e:	b110      	cbz	r0, 2616 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    2610:	f001 ffc8 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2614:	b128      	cbz	r0, 2622 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    2616:	4817      	ldr	r0, [pc, #92]	; (2674 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    2618:	7800      	ldrb	r0, [r0, #0]
    261a:	2803      	cmp	r0, #3
    261c:	bf08      	it	eq
    261e:	7765      	strbeq	r5, [r4, #29]
    2620:	bd70      	pop	{r4, r5, r6, pc}
    2622:	f640 0179 	movw	r1, #2169	; 0x879
    2626:	2070      	movs	r0, #112	; 0x70
    2628:	f002 f820 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    262c:	4812      	ldr	r0, [pc, #72]	; (2678 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    262e:	6005      	str	r5, [r0, #0]
    2630:	6888      	ldr	r0, [r1, #8]
    2632:	6005      	str	r5, [r0, #0]
    2634:	bd70      	pop	{r4, r5, r6, pc}
    2636:	7808      	ldrb	r0, [r1, #0]
    2638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    263c:	f002 b8e6 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2640:	f7ff fc18 	bl	1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    2644:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2648:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    264c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2650:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    2654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2658:	2105      	movs	r1, #5
    265a:	4710      	bx	r2
    265c:	f640 018b 	movw	r1, #2187	; 0x88b
    2660:	2070      	movs	r0, #112	; 0x70
    2662:	f002 f803 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2666:	0000      	.short	0x0000
    2668:	20000c0c 	.word	0x20000c0c
    266c:	20000010 	.word	0x20000010
    2670:	4001f508 	.word	0x4001f508
    2674:	20000012 	.word	0x20000012
    2678:	40000508 	.word	0x40000508

0000267c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    267c:	4803      	ldr	r0, [pc, #12]	; (268c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    267e:	b510      	push	{r4, lr}
    2680:	7840      	ldrb	r0, [r0, #1]
    2682:	f00d fb91 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2686:	b280      	uxth	r0, r0
    2688:	bd10      	pop	{r4, pc}
    268a:	0000      	.short	0x0000
    268c:	20000012 	.word	0x20000012

00002690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2690:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2694:	48ff      	ldr	r0, [pc, #1020]	; (2a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    2696:	b093      	sub	sp, #76	; 0x4c
    2698:	4688      	mov	r8, r1
    269a:	6800      	ldr	r0, [r0, #0]
    269c:	4dfe      	ldr	r5, [pc, #1016]	; (2a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    269e:	05c0      	lsls	r0, r0, #23
    26a0:	0dc0      	lsrs	r0, r0, #23
    26a2:	d00e      	beq.n	26c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    26a4:	3810      	subs	r0, #16
    26a6:	b240      	sxtb	r0, r0
    26a8:	2800      	cmp	r0, #0
    26aa:	bfb8      	it	lt
    26ac:	f000 000f 	andlt.w	r0, r0, #15
    26b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    26b4:	bfac      	ite	ge
    26b6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    26ba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    26be:	0940      	lsrs	r0, r0, #5
    26c0:	d00d      	beq.n	26de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    26c2:	f898 0000 	ldrb.w	r0, [r8]
    26c6:	f04f 0b00 	mov.w	fp, #0
    26ca:	2800      	cmp	r0, #0
    26cc:	bf18      	it	ne
    26ce:	2801      	cmpne	r0, #1
    26d0:	d018      	beq.n	2704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    26d2:	f240 7139 	movw	r1, #1849	; 0x739
    26d6:	f04f 0070 	mov.w	r0, #112	; 0x70
    26da:	f001 ffc7 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26de:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    26e2:	f04f 0b01 	mov.w	fp, #1
    26e6:	2820      	cmp	r0, #32
    26e8:	d007      	beq.n	26fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    26ea:	f898 0000 	ldrb.w	r0, [r8]
    26ee:	b148      	cbz	r0, 2704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    26f0:	f240 7135 	movw	r1, #1845	; 0x735
    26f4:	2070      	movs	r0, #112	; 0x70
    26f6:	f001 ffb9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fa:	f240 7132 	movw	r1, #1842	; 0x732
    26fe:	2070      	movs	r0, #112	; 0x70
    2700:	f001 ffb4 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2704:	4ce5      	ldr	r4, [pc, #916]	; (2a9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    2706:	b124      	cbz	r4, 2712 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2708:	2100      	movs	r1, #0
    270a:	f240 703c 	movw	r0, #1852	; 0x73c
    270e:	f3af 8000 	nop.w
    2712:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2714:	49e2      	ldr	r1, [pc, #904]	; (2aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    2716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    271a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    271e:	f04f 0901 	mov.w	r9, #1
    2722:	9001      	str	r0, [sp, #4]
    2724:	b124      	cbz	r4, 2730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    2726:	2100      	movs	r1, #0
    2728:	f240 7044 	movw	r0, #1860	; 0x744
    272c:	f3af 8000 	nop.w
    2730:	f1b9 0f00 	cmp.w	r9, #0
    2734:	d00a      	beq.n	274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    2736:	bf00      	nop
    2738:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    273c:	f04f 0a00 	mov.w	sl, #0
    2740:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    2744:	f1bb 0f00 	cmp.w	fp, #0
    2748:	d007      	beq.n	275a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    274a:	e02e      	b.n	27aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    274c:	48d5      	ldr	r0, [pc, #852]	; (2aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    274e:	2800      	cmp	r0, #0
    2750:	bf18      	it	ne
    2752:	f3af 8000 	nopne.w
    2756:	b662      	cpsie	i
    2758:	e7ee      	b.n	2738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    275a:	4637      	mov	r7, r6
    275c:	2001      	movs	r0, #1
    275e:	ea20 0607 	bic.w	r6, r0, r7
    2762:	48d1      	ldr	r0, [pc, #836]	; (2aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    2764:	2240      	movs	r2, #64	; 0x40
    2766:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    276a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    276e:	f002 f8d3 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2772:	b124      	cbz	r4, 277e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    2774:	2100      	movs	r1, #0
    2776:	f240 50a5 	movw	r0, #1445	; 0x5a5
    277a:	f3af 8000 	nop.w
    277e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2782:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2786:	6a09      	ldr	r1, [r1, #32]
    2788:	6201      	str	r1, [r0, #32]
    278a:	b124      	cbz	r4, 2796 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    278c:	2100      	movs	r1, #0
    278e:	f240 50a9 	movw	r0, #1449	; 0x5a9
    2792:	f3af 8000 	nop.w
    2796:	b124      	cbz	r4, 27a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    2798:	2100      	movs	r1, #0
    279a:	f240 704e 	movw	r0, #1870	; 0x74e
    279e:	f3af 8000 	nop.w
    27a2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    27a6:	2800      	cmp	r0, #0
    27a8:	d1bc      	bne.n	2724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    27aa:	b124      	cbz	r4, 27b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    27ac:	2100      	movs	r1, #0
    27ae:	f44f 60eb 	mov.w	r0, #1880	; 0x758
    27b2:	f3af 8000 	nop.w
    27b6:	f001 f86d 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    27ba:	4607      	mov	r7, r0
    27bc:	f898 0000 	ldrb.w	r0, [r8]
    27c0:	f10d 0908 	add.w	r9, sp, #8
    27c4:	2800      	cmp	r0, #0
    27c6:	f898 000b 	ldrb.w	r0, [r8, #11]
    27ca:	f88d 0015 	strb.w	r0, [sp, #21]
    27ce:	f898 100a 	ldrb.w	r1, [r8, #10]
    27d2:	f88d 1014 	strb.w	r1, [sp, #20]
    27d6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    27da:	f8ad 1012 	strh.w	r1, [sp, #18]
    27de:	9000      	str	r0, [sp, #0]
    27e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    27e4:	d013      	beq.n	280e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x17e>
    27e6:	2200      	movs	r2, #0
    27e8:	4648      	mov	r0, r9
    27ea:	f7fe fe2f 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    27ee:	9707      	str	r7, [sp, #28]
    27f0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    27f4:	aa0f      	add	r2, sp, #60	; 0x3c
    27f6:	a90e      	add	r1, sp, #56	; 0x38
    27f8:	f001 fbaa 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    27fc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2800:	2820      	cmp	r0, #32
    2802:	d00a      	beq.n	281a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x18a>
    2804:	6928      	ldr	r0, [r5, #16]
    2806:	1d40      	adds	r0, r0, #5
    2808:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    280c:	e01e      	b.n	284c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    280e:	4648      	mov	r0, r9
    2810:	f8d8 200c 	ldr.w	r2, [r8, #12]
    2814:	f7fe fe1a 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2818:	e04b      	b.n	28b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x222>
    281a:	9807      	ldr	r0, [sp, #28]
    281c:	3009      	adds	r0, #9
    281e:	9000      	str	r0, [sp, #0]
    2820:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2824:	b128      	cbz	r0, 2832 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    2826:	f001 febd 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    282a:	b910      	cbnz	r0, 2832 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    282c:	9800      	ldr	r0, [sp, #0]
    282e:	3032      	adds	r0, #50	; 0x32
    2830:	9000      	str	r0, [sp, #0]
    2832:	489e      	ldr	r0, [pc, #632]	; (2aac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    2834:	7841      	ldrb	r1, [r0, #1]
    2836:	980e      	ldr	r0, [sp, #56]	; 0x38
    2838:	4281      	cmp	r1, r0
    283a:	bf98      	it	ls
    283c:	9800      	ldrls	r0, [sp, #0]
    283e:	d903      	bls.n	2848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1b8>
    2840:	1a09      	subs	r1, r1, r0
    2842:	9800      	ldr	r0, [sp, #0]
    2844:	4408      	add	r0, r1
    2846:	9000      	str	r0, [sp, #0]
    2848:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    284c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2850:	1a89      	subs	r1, r1, r2
    2852:	9002      	str	r0, [sp, #8]
    2854:	4408      	add	r0, r1
    2856:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    285a:	9003      	str	r0, [sp, #12]
    285c:	4631      	mov	r1, r6
    285e:	4648      	mov	r0, r9
    2860:	f7fe fe92 	bl	1588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    2864:	f898 000b 	ldrb.w	r0, [r8, #11]
    2868:	9000      	str	r0, [sp, #0]
    286a:	46b9      	mov	r9, r7
    286c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    2870:	a80e      	add	r0, sp, #56	; 0x38
    2872:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2876:	f8d8 200c 	ldr.w	r2, [r8, #12]
    287a:	f7fe fde7 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    287e:	9802      	ldr	r0, [sp, #8]
    2880:	9a03      	ldr	r2, [sp, #12]
    2882:	eba0 0009 	sub.w	r0, r0, r9
    2886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    288a:	eba2 0209 	sub.w	r2, r2, r9
    288e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2890:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2894:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2898:	d201      	bcs.n	289e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20e>
    289a:	4291      	cmp	r1, r2
    289c:	d209      	bcs.n	28b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x222>
    289e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    28a2:	1a89      	subs	r1, r1, r2
    28a4:	1878      	adds	r0, r7, r1
    28a6:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    28aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28ae:	e9cd 2002 	strd	r2, r0, [sp, #8]
    28b2:	b124      	cbz	r4, 28be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22e>
    28b4:	2100      	movs	r1, #0
    28b6:	f240 705f 	movw	r0, #1887	; 0x75f
    28ba:	f3af 8000 	nop.w
    28be:	4a7a      	ldr	r2, [pc, #488]	; (2aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    28c0:	4639      	mov	r1, r7
    28c2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    28c6:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    28ca:	a802      	add	r0, sp, #8
    28cc:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    28d0:	2a01      	cmp	r2, #1
    28d2:	bf18      	it	ne
    28d4:	2a02      	cmpne	r2, #2
    28d6:	d13d      	bne.n	2954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    28d8:	9a02      	ldr	r2, [sp, #8]
    28da:	f8dd c00c 	ldr.w	ip, [sp, #12]
    28de:	eba2 0201 	sub.w	r2, r2, r1
    28e2:	4b73      	ldr	r3, [pc, #460]	; (2ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    28e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    28e8:	ebac 0101 	sub.w	r1, ip, r1
    28ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28f0:	2a02      	cmp	r2, #2
    28f2:	d369      	bcc.n	29c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    28f4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    28f8:	d266      	bcs.n	29c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    28fa:	428b      	cmp	r3, r1
    28fc:	d364      	bcc.n	29c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    28fe:	f04f 0a01 	mov.w	sl, #1
    2902:	ab0e      	add	r3, sp, #56	; 0x38
    2904:	aa0d      	add	r2, sp, #52	; 0x34
    2906:	4631      	mov	r1, r6
    2908:	f7fe ff88 	bl	181c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e8>
    290c:	b3f0      	cbz	r0, 298c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    290e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    2912:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2916:	4633      	mov	r3, r6
    2918:	428a      	cmp	r2, r1
    291a:	d061      	beq.n	29e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    291c:	2005      	movs	r0, #5
    291e:	f7fe fdf7 	bl	1510 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    2922:	bf00      	nop
    2924:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    2928:	7048      	strb	r0, [r1, #1]
    292a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    292e:	2820      	cmp	r0, #32
    2930:	bf03      	ittte	eq
    2932:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2936:	f880 9020 	strbeq.w	r9, [r0, #32]
    293a:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    293e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2942:	bf18      	it	ne
    2944:	f880 9001 	strbne.w	r9, [r0, #1]
    2948:	4632      	mov	r2, r6
    294a:	4649      	mov	r1, r9
    294c:	f05f 0003 	movs.w	r0, #3
    2950:	f7ff fb64 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    2954:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2958:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    295c:	b124      	cbz	r4, 2968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    295e:	2100      	movs	r1, #0
    2960:	f240 7066 	movw	r0, #1894	; 0x766
    2964:	f3af 8000 	nop.w
    2968:	4852      	ldr	r0, [pc, #328]	; (2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    296a:	2800      	cmp	r0, #0
    296c:	bf18      	it	ne
    296e:	f3af 8000 	nopne.w
    2972:	f3ef 8910 	mrs	r9, PRIMASK
    2976:	b672      	cpsid	i
    2978:	b124      	cbz	r4, 2984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    297a:	2100      	movs	r1, #0
    297c:	f240 706c 	movw	r0, #1900	; 0x76c
    2980:	f3af 8000 	nop.w
    2984:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2988:	2800      	cmp	r0, #0
    298a:	e000      	b.n	298e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fe>
    298c:	e024      	b.n	29d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    298e:	f47f aec9 	bne.w	2724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2992:	b124      	cbz	r4, 299e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    2994:	2100      	movs	r1, #0
    2996:	f240 7074 	movw	r0, #1908	; 0x774
    299a:	f3af 8000 	nop.w
    299e:	f10d 0e04 	add.w	lr, sp, #4
    29a2:	f1ba 0f00 	cmp.w	sl, #0
    29a6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    29aa:	f100 0004 	add.w	r0, r0, #4
    29ae:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    29b2:	d041      	beq.n	2a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    29b4:	b124      	cbz	r4, 29c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x330>
    29b6:	2100      	movs	r1, #0
    29b8:	f240 7081 	movw	r0, #1921	; 0x781
    29bc:	f3af 8000 	nop.w
    29c0:	f1bb 0f00 	cmp.w	fp, #0
    29c4:	d12b      	bne.n	2a1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    29c6:	e015      	b.n	29f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    29c8:	4632      	mov	r2, r6
    29ca:	4649      	mov	r1, r9
    29cc:	2004      	movs	r0, #4
    29ce:	f7ff fb25 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    29d2:	f04f 0a01 	mov.w	sl, #1
    29d6:	e7bd      	b.n	2954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    29d8:	4632      	mov	r2, r6
    29da:	4649      	mov	r1, r9
    29dc:	2004      	movs	r0, #4
    29de:	e7b7      	b.n	2950 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    29e0:	2920      	cmp	r1, #32
    29e2:	bf19      	ittee	ne
    29e4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    29e8:	7840      	ldrbne	r0, [r0, #1]
    29ea:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    29ee:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    29f2:	e797      	b.n	2924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x294>
    29f4:	b19f      	cbz	r7, 2a1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    29f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    29fa:	2820      	cmp	r0, #32
    29fc:	d10f      	bne.n	2a1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    29fe:	b124      	cbz	r4, 2a0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    2a00:	2100      	movs	r1, #0
    2a02:	f240 7086 	movw	r0, #1926	; 0x786
    2a06:	f3af 8000 	nop.w
    2a0a:	4631      	mov	r1, r6
    2a0c:	2002      	movs	r0, #2
    2a0e:	f7ff fb35 	bl	207c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>
    2a12:	b920      	cbnz	r0, 2a1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    2a14:	f898 0000 	ldrb.w	r0, [r8]
    2a18:	b3d0      	cbz	r0, 2a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    2a1a:	2801      	cmp	r0, #1
    2a1c:	d05e      	beq.n	2adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    2a1e:	b124      	cbz	r4, 2a2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    2a20:	2100      	movs	r1, #0
    2a22:	f240 70a3 	movw	r0, #1955	; 0x7a3
    2a26:	f3af 8000 	nop.w
    2a2a:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2a2e:	2001      	movs	r0, #1
    2a30:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2a34:	f04f 0a01 	mov.w	sl, #1
    2a38:	b124      	cbz	r4, 2a44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b4>
    2a3a:	2100      	movs	r1, #0
    2a3c:	f240 70ac 	movw	r0, #1964	; 0x7ac
    2a40:	f3af 8000 	nop.w
    2a44:	f1b9 0f00 	cmp.w	r9, #0
    2a48:	d051      	beq.n	2aee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45e>
    2a4a:	b124      	cbz	r4, 2a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c6>
    2a4c:	2100      	movs	r1, #0
    2a4e:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    2a52:	f3af 8000 	nop.w
    2a56:	f1ba 0f00 	cmp.w	sl, #0
    2a5a:	d011      	beq.n	2a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>
    2a5c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2a60:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2a64:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2a68:	2820      	cmp	r0, #32
    2a6a:	d009      	beq.n	2a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>
    2a6c:	b124      	cbz	r4, 2a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>
    2a6e:	2100      	movs	r1, #0
    2a70:	f240 70b7 	movw	r0, #1975	; 0x7b7
    2a74:	f3af 8000 	nop.w
    2a78:	480f      	ldr	r0, [pc, #60]	; (2ab8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>)
    2a7a:	7840      	ldrb	r0, [r0, #1]
    2a7c:	f001 fec6 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2a80:	b124      	cbz	r4, 2a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>
    2a82:	2100      	movs	r1, #0
    2a84:	f240 70bc 	movw	r0, #1980	; 0x7bc
    2a88:	f3af 8000 	nop.w
    2a8c:	4650      	mov	r0, sl
    2a8e:	e015      	b.n	2abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    2a90:	e017      	b.n	2ac2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x432>
    2a92:	0000      	.short	0x0000
    2a94:	e000ed04 	.word	0xe000ed04
    2a98:	20000f0c 	.word	0x20000f0c
    2a9c:	00000000 	.word	0x00000000
    2aa0:	20000c0c 	.word	0x20000c0c
    2aa4:	00000000 	.word	0x00000000
    2aa8:	20000e8c 	.word	0x20000e8c
    2aac:	20000012 	.word	0x20000012
    2ab0:	003fffff 	.word	0x003fffff
    2ab4:	00000000 	.word	0x00000000
    2ab8:	20000010 	.word	0x20000010
    2abc:	b015      	add	sp, #84	; 0x54
    2abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ac2:	b124      	cbz	r4, 2ace <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43e>
    2ac4:	2100      	movs	r1, #0
    2ac6:	f240 708e 	movw	r0, #1934	; 0x78e
    2aca:	f3af 8000 	nop.w
    2ace:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2ad2:	2004      	movs	r0, #4
    2ad4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2ad6:	f7ff faa1 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    2ada:	e7ab      	b.n	2a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>
    2adc:	2c00      	cmp	r4, #0
    2ade:	f43f ae21 	beq.w	2724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2ae2:	2100      	movs	r1, #0
    2ae4:	f240 7099 	movw	r0, #1945	; 0x799
    2ae8:	f3af 8000 	nop.w
    2aec:	e61a      	b.n	2724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2aee:	4803      	ldr	r0, [pc, #12]	; (2afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>)
    2af0:	2800      	cmp	r0, #0
    2af2:	bf18      	it	ne
    2af4:	f3af 8000 	nopne.w
    2af8:	b662      	cpsie	i
    2afa:	e7a6      	b.n	2a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    2afc:	00000000 	.word	0x00000000

00002b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b04:	4605      	mov	r5, r0
    2b06:	48e1      	ldr	r0, [pc, #900]	; (2e8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38c>)
    2b08:	b08d      	sub	sp, #52	; 0x34
    2b0a:	6800      	ldr	r0, [r0, #0]
    2b0c:	05c0      	lsls	r0, r0, #23
    2b0e:	0dc0      	lsrs	r0, r0, #23
    2b10:	d011      	beq.n	2b36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    2b12:	3810      	subs	r0, #16
    2b14:	b240      	sxtb	r0, r0
    2b16:	2800      	cmp	r0, #0
    2b18:	bfb8      	it	lt
    2b1a:	f000 000f 	andlt.w	r0, r0, #15
    2b1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2b22:	bfac      	ite	ge
    2b24:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2b28:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2b2c:	0940      	lsrs	r0, r0, #5
    2b2e:	bf08      	it	eq
    2b30:	f04f 0b01 	moveq.w	fp, #1
    2b34:	d001      	beq.n	2b3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    2b36:	f04f 0b00 	mov.w	fp, #0
    2b3a:	7828      	ldrb	r0, [r5, #0]
    2b3c:	2800      	cmp	r0, #0
    2b3e:	f04f 0000 	mov.w	r0, #0
    2b42:	bf1c      	itt	ne
    2b44:	b00d      	addne	sp, #52	; 0x34
    2b46:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b4a:	f8df 8344 	ldr.w	r8, [pc, #836]	; 2e90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x390>
    2b4e:	4ed1      	ldr	r6, [pc, #836]	; (2e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x394>)
    2b50:	f04f 0900 	mov.w	r9, #0
    2b54:	f8cd 0018 	str.w	r0, [sp, #24]
    2b58:	f1b8 0f00 	cmp.w	r8, #0
    2b5c:	d004      	beq.n	2b68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    2b5e:	2100      	movs	r1, #0
    2b60:	f44f 60c6 	mov.w	r0, #1584	; 0x630
    2b64:	f3af 8000 	nop.w
    2b68:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    2b6c:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    2b70:	f04f 0a00 	mov.w	sl, #0
    2b74:	f1b8 0f00 	cmp.w	r8, #0
    2b78:	d004      	beq.n	2b84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    2b7a:	2100      	movs	r1, #0
    2b7c:	f240 6035 	movw	r0, #1589	; 0x635
    2b80:	f3af 8000 	nop.w
    2b84:	f1bb 0f00 	cmp.w	fp, #0
    2b88:	d121      	bne.n	2bce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    2b8a:	463c      	mov	r4, r7
    2b8c:	2001      	movs	r0, #1
    2b8e:	ea20 0704 	bic.w	r7, r0, r4
    2b92:	48c1      	ldr	r0, [pc, #772]	; (2e98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x398>)
    2b94:	2240      	movs	r2, #64	; 0x40
    2b96:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    2b9a:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2b9e:	f001 febb 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ba2:	f1b8 0f00 	cmp.w	r8, #0
    2ba6:	d004      	beq.n	2bb2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    2ba8:	2100      	movs	r1, #0
    2baa:	f240 50a5 	movw	r0, #1445	; 0x5a5
    2bae:	f3af 8000 	nop.w
    2bb2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    2bb6:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    2bba:	6a09      	ldr	r1, [r1, #32]
    2bbc:	6201      	str	r1, [r0, #32]
    2bbe:	f1b8 0f00 	cmp.w	r8, #0
    2bc2:	d004      	beq.n	2bce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    2bc4:	2100      	movs	r1, #0
    2bc6:	f240 50a9 	movw	r0, #1449	; 0x5a9
    2bca:	f3af 8000 	nop.w
    2bce:	f1b8 0f00 	cmp.w	r8, #0
    2bd2:	d004      	beq.n	2bde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    2bd4:	2100      	movs	r1, #0
    2bd6:	f240 603d 	movw	r0, #1597	; 0x63d
    2bda:	f3af 8000 	nop.w
    2bde:	f000 fe59 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2be2:	4604      	mov	r4, r0
    2be4:	a802      	add	r0, sp, #8
    2be6:	9001      	str	r0, [sp, #4]
    2be8:	7828      	ldrb	r0, [r5, #0]
    2bea:	2800      	cmp	r0, #0
    2bec:	7ae8      	ldrb	r0, [r5, #11]
    2bee:	f88d 0015 	strb.w	r0, [sp, #21]
    2bf2:	7aa9      	ldrb	r1, [r5, #10]
    2bf4:	f88d 1014 	strb.w	r1, [sp, #20]
    2bf8:	8929      	ldrh	r1, [r5, #8]
    2bfa:	f8ad 1012 	strh.w	r1, [sp, #18]
    2bfe:	9000      	str	r0, [sp, #0]
    2c00:	686b      	ldr	r3, [r5, #4]
    2c02:	d013      	beq.n	2c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12c>
    2c04:	2200      	movs	r2, #0
    2c06:	9801      	ldr	r0, [sp, #4]
    2c08:	f7fe fc20 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2c0c:	9400      	str	r4, [sp, #0]
    2c0e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2c12:	aa08      	add	r2, sp, #32
    2c14:	a907      	add	r1, sp, #28
    2c16:	f001 f99b 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2c1a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2c1e:	2820      	cmp	r0, #32
    2c20:	d009      	beq.n	2c36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x136>
    2c22:	6930      	ldr	r0, [r6, #16]
    2c24:	1d40      	adds	r0, r0, #5
    2c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c2a:	e01d      	b.n	2c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2c2c:	68ea      	ldr	r2, [r5, #12]
    2c2e:	9801      	ldr	r0, [sp, #4]
    2c30:	f7fe fc0c 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2c34:	e046      	b.n	2cc4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2c36:	9800      	ldr	r0, [sp, #0]
    2c38:	3009      	adds	r0, #9
    2c3a:	9000      	str	r0, [sp, #0]
    2c3c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2c40:	b128      	cbz	r0, 2c4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    2c42:	f001 fcaf 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2c46:	b910      	cbnz	r0, 2c4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    2c48:	9800      	ldr	r0, [sp, #0]
    2c4a:	3032      	adds	r0, #50	; 0x32
    2c4c:	9000      	str	r0, [sp, #0]
    2c4e:	4893      	ldr	r0, [pc, #588]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>)
    2c50:	9907      	ldr	r1, [sp, #28]
    2c52:	7840      	ldrb	r0, [r0, #1]
    2c54:	4288      	cmp	r0, r1
    2c56:	bf98      	it	ls
    2c58:	9800      	ldrls	r0, [sp, #0]
    2c5a:	d903      	bls.n	2c64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    2c5c:	1a41      	subs	r1, r0, r1
    2c5e:	9800      	ldr	r0, [sp, #0]
    2c60:	4408      	add	r0, r1
    2c62:	9000      	str	r0, [sp, #0]
    2c64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c68:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2c6c:	1a89      	subs	r1, r1, r2
    2c6e:	9002      	str	r0, [sp, #8]
    2c70:	4408      	add	r0, r1
    2c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c76:	9003      	str	r0, [sp, #12]
    2c78:	4639      	mov	r1, r7
    2c7a:	9801      	ldr	r0, [sp, #4]
    2c7c:	f7fe fc84 	bl	1588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    2c80:	9401      	str	r4, [sp, #4]
    2c82:	7ae8      	ldrb	r0, [r5, #11]
    2c84:	9000      	str	r0, [sp, #0]
    2c86:	8929      	ldrh	r1, [r5, #8]
    2c88:	a808      	add	r0, sp, #32
    2c8a:	686b      	ldr	r3, [r5, #4]
    2c8c:	68ea      	ldr	r2, [r5, #12]
    2c8e:	f7fe fbdd 	bl	144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2c92:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    2c96:	9a03      	ldr	r2, [sp, #12]
    2c98:	1ac0      	subs	r0, r0, r3
    2c9a:	1ad2      	subs	r2, r2, r3
    2c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
    2ca2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2ca6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2caa:	d201      	bcs.n	2cb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2cac:	4291      	cmp	r1, r2
    2cae:	d209      	bcs.n	2cc4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2cb0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2cb4:	1a89      	subs	r1, r1, r2
    2cb6:	1860      	adds	r0, r4, r1
    2cb8:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    2cbc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cc0:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2cc4:	f1b8 0f00 	cmp.w	r8, #0
    2cc8:	d004      	beq.n	2cd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    2cca:	2100      	movs	r1, #0
    2ccc:	f240 6043 	movw	r0, #1603	; 0x643
    2cd0:	f3af 8000 	nop.w
    2cd4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2cd8:	2820      	cmp	r0, #32
    2cda:	d014      	beq.n	2d06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    2cdc:	6930      	ldr	r0, [r6, #16]
    2cde:	9902      	ldr	r1, [sp, #8]
    2ce0:	1a09      	subs	r1, r1, r0
    2ce2:	0209      	lsls	r1, r1, #8
    2ce4:	17ca      	asrs	r2, r1, #31
    2ce6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2cea:	1209      	asrs	r1, r1, #8
    2cec:	d50b      	bpl.n	2d06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    2cee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2cf2:	1a89      	subs	r1, r1, r2
    2cf4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2cf8:	4408      	add	r0, r1
    2cfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cfe:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2d02:	f04f 0a01 	mov.w	sl, #1
    2d06:	f1b8 0f00 	cmp.w	r8, #0
    2d0a:	d009      	beq.n	2d20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x220>
    2d0c:	2100      	movs	r1, #0
    2d0e:	f240 604d 	movw	r0, #1613	; 0x64d
    2d12:	f3af 8000 	nop.w
    2d16:	2100      	movs	r1, #0
    2d18:	f240 6053 	movw	r0, #1619	; 0x653
    2d1c:	f3af 8000 	nop.w
    2d20:	9902      	ldr	r1, [sp, #8]
    2d22:	9a03      	ldr	r2, [sp, #12]
    2d24:	1b09      	subs	r1, r1, r4
    2d26:	1b12      	subs	r2, r2, r4
    2d28:	485d      	ldr	r0, [pc, #372]	; (2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a0>)
    2d2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2d32:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2d36:	d205      	bcs.n	2d44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2d38:	4290      	cmp	r0, r2
    2d3a:	d303      	bcc.n	2d44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2d3c:	f1bb 0f00 	cmp.w	fp, #0
    2d40:	d10b      	bne.n	2d5a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    2d42:	e004      	b.n	2d4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2d44:	464f      	mov	r7, r9
    2d46:	f1bb 0f00 	cmp.w	fp, #0
    2d4a:	d039      	beq.n	2dc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    2d4c:	e094      	b.n	2e78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2d4e:	4639      	mov	r1, r7
    2d50:	a802      	add	r0, sp, #8
    2d52:	f7fe fc19 	bl	1588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    2d56:	ea4a 0a00 	orr.w	sl, sl, r0
    2d5a:	f1ba 0f00 	cmp.w	sl, #0
    2d5e:	d023      	beq.n	2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    2d60:	9802      	ldr	r0, [sp, #8]
    2d62:	f00d f821 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2d66:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    2d6a:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    2d6e:	f8df c134 	ldr.w	ip, [pc, #308]	; 2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>
    2d72:	4411      	add	r1, r2
    2d74:	1cca      	adds	r2, r1, #3
    2d76:	1881      	adds	r1, r0, r2
    2d78:	2400      	movs	r4, #0
    2d7a:	ebbc 0000 	subs.w	r0, ip, r0
    2d7e:	eb74 0009 	sbcs.w	r0, r4, r9
    2d82:	d343      	bcc.n	2e0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    2d84:	4848      	ldr	r0, [pc, #288]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2d86:	4282      	cmp	r2, r0
    2d88:	dc5b      	bgt.n	2e42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    2d8a:	4240      	negs	r0, r0
    2d8c:	4282      	cmp	r2, r0
    2d8e:	db60      	blt.n	2e52 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x352>
    2d90:	f10c 0001 	add.w	r0, ip, #1
    2d94:	4281      	cmp	r1, r0
    2d96:	bfa8      	it	ge
    2d98:	4844      	ldrge	r0, [pc, #272]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    2d9a:	da03      	bge.n	2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>
    2d9c:	2900      	cmp	r1, #0
    2d9e:	bfb8      	it	lt
    2da0:	4843      	ldrlt	r0, [pc, #268]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2da2:	da00      	bge.n	2da6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    2da4:	1809      	adds	r1, r1, r0
    2da6:	60e9      	str	r1, [r5, #12]
    2da8:	f04f 0001 	mov.w	r0, #1
    2dac:	9006      	str	r0, [sp, #24]
    2dae:	f1b8 0f00 	cmp.w	r8, #0
    2db2:	d061      	beq.n	2e78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2db4:	2100      	movs	r1, #0
    2db6:	f240 6066 	movw	r0, #1638	; 0x666
    2dba:	f3af 8000 	nop.w
    2dbe:	e05b      	b.n	2e78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2dc0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2dc4:	aa01      	add	r2, sp, #4
    2dc6:	4669      	mov	r1, sp
    2dc8:	f001 f8c2 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2dcc:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2dd0:	2820      	cmp	r0, #32
    2dd2:	d020      	beq.n	2e16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x316>
    2dd4:	6930      	ldr	r0, [r6, #16]
    2dd6:	1d40      	adds	r0, r0, #5
    2dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ddc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2de0:	1a89      	subs	r1, r1, r2
    2de2:	4401      	add	r1, r0
    2de4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2dec:	f00c ffdc 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2df0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    2df4:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    2df8:	4b2a      	ldr	r3, [pc, #168]	; (2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>)
    2dfa:	4411      	add	r1, r2
    2dfc:	1cc9      	adds	r1, r1, #3
    2dfe:	1842      	adds	r2, r0, r1
    2e00:	f04f 0c00 	mov.w	ip, #0
    2e04:	1a18      	subs	r0, r3, r0
    2e06:	eb7c 0007 	sbcs.w	r0, ip, r7
    2e0a:	d217      	bcs.n	2e3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    2e0c:	f240 51e1 	movw	r1, #1505	; 0x5e1
    2e10:	2070      	movs	r0, #112	; 0x70
    2e12:	f001 fc2b 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e16:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2e1a:	3409      	adds	r4, #9
    2e1c:	b120      	cbz	r0, 2e28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x328>
    2e1e:	f001 fbc1 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e22:	2800      	cmp	r0, #0
    2e24:	bf08      	it	eq
    2e26:	3432      	addeq	r4, #50	; 0x32
    2e28:	481c      	ldr	r0, [pc, #112]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>)
    2e2a:	7841      	ldrb	r1, [r0, #1]
    2e2c:	9800      	ldr	r0, [sp, #0]
    2e2e:	4281      	cmp	r1, r0
    2e30:	bf84      	itt	hi
    2e32:	1a08      	subhi	r0, r1, r0
    2e34:	4404      	addhi	r4, r0
    2e36:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    2e3a:	e7cf      	b.n	2ddc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2dc>
    2e3c:	481a      	ldr	r0, [pc, #104]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2e3e:	4281      	cmp	r1, r0
    2e40:	dd04      	ble.n	2e4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34c>
    2e42:	f240 51e2 	movw	r1, #1506	; 0x5e2
    2e46:	2070      	movs	r0, #112	; 0x70
    2e48:	f001 fc10 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e4c:	4819      	ldr	r0, [pc, #100]	; (2eb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    2e4e:	4281      	cmp	r1, r0
    2e50:	da04      	bge.n	2e5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>
    2e52:	f240 51e3 	movw	r1, #1507	; 0x5e3
    2e56:	2070      	movs	r0, #112	; 0x70
    2e58:	f001 fc08 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e5c:	4814      	ldr	r0, [pc, #80]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2e5e:	4282      	cmp	r2, r0
    2e60:	bfa8      	it	ge
    2e62:	4812      	ldrge	r0, [pc, #72]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    2e64:	da03      	bge.n	2e6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36e>
    2e66:	2a00      	cmp	r2, #0
    2e68:	bfb8      	it	lt
    2e6a:	4811      	ldrlt	r0, [pc, #68]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2e6c:	da00      	bge.n	2e70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>
    2e6e:	1812      	adds	r2, r2, r0
    2e70:	f04f 0001 	mov.w	r0, #1
    2e74:	60ea      	str	r2, [r5, #12]
    2e76:	9006      	str	r0, [sp, #24]
    2e78:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2e7c:	2800      	cmp	r0, #0
    2e7e:	f47f ae6b 	bne.w	2b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2e82:	9806      	ldr	r0, [sp, #24]
    2e84:	b00d      	add	sp, #52	; 0x34
    2e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e8a:	0000      	.short	0x0000
    2e8c:	e000ed04 	.word	0xe000ed04
    2e90:	00000000 	.word	0x00000000
    2e94:	20000f0c 	.word	0x20000f0c
    2e98:	20000e8c 	.word	0x20000e8c
    2e9c:	20000012 	.word	0x20000012
    2ea0:	003fffff 	.word	0x003fffff
    2ea4:	1e847fff 	.word	0x1e847fff
    2ea8:	07a12000 	.word	0x07a12000
    2eac:	e17b8000 	.word	0xe17b8000
    2eb0:	1e848000 	.word	0x1e848000
    2eb4:	f85ee000 	.word	0xf85ee000

00002eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2eb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ebc:	4d80      	ldr	r5, [pc, #512]	; (30c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    2ebe:	b08c      	sub	sp, #48	; 0x30
    2ec0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ec4:	2000      	movs	r0, #0
    2ec6:	9009      	str	r0, [sp, #36]	; 0x24
    2ec8:	2001      	movs	r0, #1
    2eca:	4c7e      	ldr	r4, [pc, #504]	; (30c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    2ecc:	f04f 0800 	mov.w	r8, #0
    2ed0:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2ed4:	4683      	mov	fp, r0
    2ed6:	9008      	str	r0, [sp, #32]
    2ed8:	b124      	cbz	r4, 2ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2eda:	2100      	movs	r1, #0
    2edc:	f240 70cb 	movw	r0, #1995	; 0x7cb
    2ee0:	f3af 8000 	nop.w
    2ee4:	9808      	ldr	r0, [sp, #32]
    2ee6:	b390      	cbz	r0, 2f4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2ee8:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2eec:	b124      	cbz	r4, 2ef8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    2eee:	2100      	movs	r1, #0
    2ef0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2ef4:	f3af 8000 	nop.w
    2ef8:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    2efc:	2240      	movs	r2, #64	; 0x40
    2efe:	ea2b 0609 	bic.w	r6, fp, r9
    2f02:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2f06:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    2f0a:	4682      	mov	sl, r0
    2f0c:	f001 fd04 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f10:	b124      	cbz	r4, 2f1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    2f12:	2100      	movs	r1, #0
    2f14:	f240 50a5 	movw	r0, #1445	; 0x5a5
    2f18:	f3af 8000 	nop.w
    2f1c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f20:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    2f24:	9000      	str	r0, [sp, #0]
    2f26:	6a09      	ldr	r1, [r1, #32]
    2f28:	6201      	str	r1, [r0, #32]
    2f2a:	b124      	cbz	r4, 2f36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2f2c:	2100      	movs	r1, #0
    2f2e:	f240 50a9 	movw	r0, #1449	; 0x5a9
    2f32:	f3af 8000 	nop.w
    2f36:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f3a:	b180      	cbz	r0, 2f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2f3c:	2c00      	cmp	r4, #0
    2f3e:	bf1c      	itt	ne
    2f40:	2100      	movne	r1, #0
    2f42:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    2f46:	d0c7      	beq.n	2ed8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f48:	f3af 8000 	nop.w
    2f4c:	e7c4      	b.n	2ed8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f4e:	e7ff      	b.n	2f50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2f50:	485d      	ldr	r0, [pc, #372]	; (30c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2f52:	2800      	cmp	r0, #0
    2f54:	bf18      	it	ne
    2f56:	f3af 8000 	nopne.w
    2f5a:	b662      	cpsie	i
    2f5c:	e7c4      	b.n	2ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2f5e:	b124      	cbz	r4, 2f6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    2f60:	2100      	movs	r1, #0
    2f62:	f240 70da 	movw	r0, #2010	; 0x7da
    2f66:	f3af 8000 	nop.w
    2f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f6c:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2f70:	2803      	cmp	r0, #3
    2f72:	d178      	bne.n	3066 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2f74:	f8dd 9000 	ldr.w	r9, [sp]
    2f78:	f8cd 9018 	str.w	r9, [sp, #24]
    2f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f7e:	f899 0020 	ldrb.w	r0, [r9, #32]
    2f82:	4288      	cmp	r0, r1
    2f84:	bf14      	ite	ne
    2f86:	f04f 0a00 	movne.w	sl, #0
    2f8a:	f04f 0a01 	moveq.w	sl, #1
    2f8e:	f109 0c20 	add.w	ip, r9, #32
    2f92:	4686      	mov	lr, r0
    2f94:	2220      	movs	r2, #32
    2f96:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2f9a:	e003      	b.n	2fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    2f9c:	4602      	mov	r2, r0
    2f9e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2fa2:	7840      	ldrb	r0, [r0, #1]
    2fa4:	4288      	cmp	r0, r1
    2fa6:	d002      	beq.n	2fae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2fa8:	2820      	cmp	r0, #32
    2faa:	d00a      	beq.n	2fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2fac:	e7f6      	b.n	2f9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    2fae:	2820      	cmp	r0, #32
    2fb0:	d007      	beq.n	2fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2fb2:	4586      	cmp	lr, r0
    2fb4:	d107      	bne.n	2fc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2fb6:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2fba:	7840      	ldrb	r0, [r0, #1]
    2fbc:	f88c 0000 	strb.w	r0, [ip]
    2fc0:	e007      	b.n	2fd2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2fc2:	4640      	mov	r0, r8
    2fc4:	e00c      	b.n	2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    2fc6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fca:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2fce:	7840      	ldrb	r0, [r0, #1]
    2fd0:	7048      	strb	r0, [r1, #1]
    2fd2:	b124      	cbz	r4, 2fde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2fd4:	2100      	movs	r1, #0
    2fd6:	f240 502a 	movw	r0, #1322	; 0x52a
    2fda:	f3af 8000 	nop.w
    2fde:	4658      	mov	r0, fp
    2fe0:	ea10 0f0a 	tst.w	r0, sl
    2fe4:	bf18      	it	ne
    2fe6:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    2fea:	b3e0      	cbz	r0, 3066 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2fec:	b124      	cbz	r4, 2ff8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2fee:	2100      	movs	r1, #0
    2ff0:	f240 70df 	movw	r0, #2015	; 0x7df
    2ff4:	f3af 8000 	nop.w
    2ff8:	4632      	mov	r2, r6
    2ffa:	2001      	movs	r0, #1
    2ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ffe:	f7ff f80d 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    3002:	9806      	ldr	r0, [sp, #24]
    3004:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    3008:	b124      	cbz	r4, 3014 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    300a:	2100      	movs	r1, #0
    300c:	f240 70ea 	movw	r0, #2026	; 0x7ea
    3010:	f3af 8000 	nop.w
    3014:	482d      	ldr	r0, [pc, #180]	; (30cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    3016:	2800      	cmp	r0, #0
    3018:	bf18      	it	ne
    301a:	f3af 8000 	nopne.w
    301e:	f3ef 8010 	mrs	r0, PRIMASK
    3022:	b672      	cpsid	i
    3024:	9008      	str	r0, [sp, #32]
    3026:	b124      	cbz	r4, 3032 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    3028:	2100      	movs	r1, #0
    302a:	f240 70ef 	movw	r0, #2031	; 0x7ef
    302e:	f3af 8000 	nop.w
    3032:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    3036:	b138      	cbz	r0, 3048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    3038:	2c00      	cmp	r4, #0
    303a:	bf1c      	itt	ne
    303c:	2100      	movne	r1, #0
    303e:	f240 70f3 	movwne	r0, #2035	; 0x7f3
    3042:	f43f af49 	beq.w	2ed8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3046:	e77f      	b.n	2f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    3048:	f1b9 0f00 	cmp.w	r9, #0
    304c:	d008      	beq.n	3060 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    304e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3052:	2820      	cmp	r0, #32
    3054:	d104      	bne.n	3060 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    3056:	4631      	mov	r1, r6
    3058:	2002      	movs	r0, #2
    305a:	f7ff f80f 	bl	207c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>
    305e:	b1f8      	cbz	r0, 30a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    3060:	b134      	cbz	r4, 3070 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    3062:	2100      	movs	r1, #0
    3064:	e000      	b.n	3068 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    3066:	e009      	b.n	307c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    3068:	f640 0007 	movw	r0, #2055	; 0x807
    306c:	f3af 8000 	nop.w
    3070:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    3074:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    3078:	2001      	movs	r0, #1
    307a:	9009      	str	r0, [sp, #36]	; 0x24
    307c:	b124      	cbz	r4, 3088 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    307e:	2100      	movs	r1, #0
    3080:	f44f 6001 	mov.w	r0, #2064	; 0x810
    3084:	f3af 8000 	nop.w
    3088:	9808      	ldr	r0, [sp, #32]
    308a:	b188      	cbz	r0, 30b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    308c:	b124      	cbz	r4, 3098 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    308e:	2100      	movs	r1, #0
    3090:	f640 0014 	movw	r0, #2068	; 0x814
    3094:	f3af 8000 	nop.w
    3098:	9809      	ldr	r0, [sp, #36]	; 0x24
    309a:	b00d      	add	sp, #52	; 0x34
    309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30a0:	2c00      	cmp	r4, #0
    30a2:	d0f1      	beq.n	3088 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    30a4:	2100      	movs	r1, #0
    30a6:	f640 0002 	movw	r0, #2050	; 0x802
    30aa:	f3af 8000 	nop.w
    30ae:	e7e6      	b.n	307e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    30b0:	4805      	ldr	r0, [pc, #20]	; (30c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    30b2:	2800      	cmp	r0, #0
    30b4:	bf18      	it	ne
    30b6:	f3af 8000 	nopne.w
    30ba:	b662      	cpsie	i
    30bc:	e7e6      	b.n	308c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    30be:	0000      	.short	0x0000
    30c0:	20000f0c 	.word	0x20000f0c
	...

000030d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    30d0:	b510      	push	{r4, lr}
    30d2:	2820      	cmp	r0, #32
    30d4:	d211      	bcs.n	30fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    30d6:	490e      	ldr	r1, [pc, #56]	; (3110 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    30d8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    30dc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    30e0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    30e4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    30e8:	b13b      	cbz	r3, 30fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    30ea:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    30ee:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    30f2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    30f6:	2a01      	cmp	r2, #1
    30f8:	d001      	beq.n	30fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    30fa:	2000      	movs	r0, #0
    30fc:	bd10      	pop	{r4, pc}
    30fe:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3102:	4601      	mov	r1, r0
    3104:	2000      	movs	r0, #0
    3106:	f7fe ff89 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    310a:	2001      	movs	r0, #1
    310c:	bd10      	pop	{r4, pc}
    310e:	0000      	.short	0x0000
    3110:	20000f0c 	.word	0x20000f0c

00003114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3114:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3118:	4e7e      	ldr	r6, [pc, #504]	; (3314 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    311a:	4680      	mov	r8, r0
    311c:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3120:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3124:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3128:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    312c:	2800      	cmp	r0, #0
    312e:	d065      	beq.n	31fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3130:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3134:	4d78      	ldr	r5, [pc, #480]	; (3318 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    3136:	b125      	cbz	r5, 3142 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3138:	2100      	movs	r1, #0
    313a:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    313e:	f3af 8000 	nop.w
    3142:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    3146:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    314a:	2801      	cmp	r0, #1
    314c:	d018      	beq.n	3180 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    314e:	b2c0      	uxtb	r0, r0
    3150:	2804      	cmp	r0, #4
    3152:	bf1c      	itt	ne
    3154:	2805      	cmpne	r0, #5
    3156:	2806      	cmpne	r0, #6
    3158:	d055      	beq.n	3206 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    315a:	b12d      	cbz	r5, 3168 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    315c:	f04f 0100 	mov.w	r1, #0
    3160:	f640 30ac 	movw	r0, #2988	; 0xbac
    3164:	f3af 8000 	nop.w
    3168:	f001 fba6 	bl	48b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    316c:	b125      	cbz	r5, 3178 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    316e:	2100      	movs	r1, #0
    3170:	f44f 603b 	mov.w	r0, #2992	; 0xbb0
    3174:	f3af 8000 	nop.w
    3178:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    317c:	2801      	cmp	r0, #1
    317e:	d1e6      	bne.n	314e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3180:	2401      	movs	r4, #1
    3182:	b125      	cbz	r5, 318e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3184:	2100      	movs	r1, #0
    3186:	f640 30b7 	movw	r0, #2999	; 0xbb7
    318a:	f3af 8000 	nop.w
    318e:	b3a4      	cbz	r4, 31fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    3190:	2000      	movs	r0, #0
    3192:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3196:	b125      	cbz	r5, 31a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    3198:	2100      	movs	r1, #0
    319a:	f640 30bc 	movw	r0, #3004	; 0xbbc
    319e:	f3af 8000 	nop.w
    31a2:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    31a6:	2001      	movs	r0, #1
    31a8:	ea20 090b 	bic.w	r9, r0, fp
    31ac:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    31b0:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    31b4:	2240      	movs	r2, #64	; 0x40
    31b6:	f001 fbaf 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    31ba:	b125      	cbz	r5, 31c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    31bc:	2100      	movs	r1, #0
    31be:	f240 50a5 	movw	r0, #1445	; 0x5a5
    31c2:	f3af 8000 	nop.w
    31c6:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    31ca:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    31ce:	6a00      	ldr	r0, [r0, #32]
    31d0:	f8ca 0020 	str.w	r0, [sl, #32]
    31d4:	b125      	cbz	r5, 31e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    31d6:	2100      	movs	r1, #0
    31d8:	f240 50a9 	movw	r0, #1449	; 0x5a9
    31dc:	f3af 8000 	nop.w
    31e0:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    31e4:	b1e0      	cbz	r0, 3220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    31e6:	2d00      	cmp	r5, #0
    31e8:	bf1c      	itt	ne
    31ea:	2100      	movne	r1, #0
    31ec:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    31f0:	d0c7      	beq.n	3182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    31f2:	bf00      	nop
    31f4:	f3af 8000 	nop.w
    31f8:	e7c3      	b.n	3182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    31fa:	e00a      	b.n	3212 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    31fc:	f640 3197 	movw	r1, #2967	; 0xb97
    3200:	2070      	movs	r0, #112	; 0x70
    3202:	f001 fa33 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3206:	464a      	mov	r2, r9
    3208:	4641      	mov	r1, r8
    320a:	2001      	movs	r0, #1
    320c:	f7fe ff06 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    3210:	e7ac      	b.n	316c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3212:	4842      	ldr	r0, [pc, #264]	; (331c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    3214:	2800      	cmp	r0, #0
    3216:	bf18      	it	ne
    3218:	f3af 8000 	nopne.w
    321c:	b662      	cpsie	i
    321e:	e7b7      	b.n	3190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    3220:	b125      	cbz	r5, 322c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    3222:	2100      	movs	r1, #0
    3224:	f640 30c6 	movw	r0, #3014	; 0xbc6
    3228:	f3af 8000 	nop.w
    322c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    3230:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    3234:	4640      	mov	r0, r8
    3236:	461c      	mov	r4, r3
    3238:	f04f 0b20 	mov.w	fp, #32
    323c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    3240:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    3244:	e004      	b.n	3250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    3246:	46a3      	mov	fp, r4
    3248:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    324c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    3250:	4284      	cmp	r4, r0
    3252:	d002      	beq.n	325a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    3254:	2c20      	cmp	r4, #32
    3256:	d02b      	beq.n	32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    3258:	e7f5      	b.n	3246 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    325a:	2c20      	cmp	r4, #32
    325c:	d028      	beq.n	32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    325e:	42a3      	cmp	r3, r4
    3260:	d104      	bne.n	326c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    3262:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3266:	7840      	ldrb	r0, [r0, #1]
    3268:	7008      	strb	r0, [r1, #0]
    326a:	e005      	b.n	3278 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    326c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3270:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3274:	7840      	ldrb	r0, [r0, #1]
    3276:	7048      	strb	r0, [r1, #1]
    3278:	f1ba 0f00 	cmp.w	sl, #0
    327c:	d011      	beq.n	32a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    327e:	b125      	cbz	r5, 328a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    3280:	2100      	movs	r1, #0
    3282:	f240 5022 	movw	r0, #1314	; 0x522
    3286:	f3af 8000 	nop.w
    328a:	f89a 0000 	ldrb.w	r0, [sl]
    328e:	42a0      	cmp	r0, r4
    3290:	d107      	bne.n	32a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    3292:	b125      	cbz	r5, 329e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    3294:	2100      	movs	r1, #0
    3296:	f240 5025 	movw	r0, #1317	; 0x525
    329a:	f3af 8000 	nop.w
    329e:	f88a b000 	strb.w	fp, [sl]
    32a2:	b15d      	cbz	r5, 32bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    32a4:	2100      	movs	r1, #0
    32a6:	f240 502a 	movw	r0, #1322	; 0x52a
    32aa:	f3af 8000 	nop.w
    32ae:	e000      	b.n	32b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    32b0:	b125      	cbz	r5, 32bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    32b2:	2100      	movs	r1, #0
    32b4:	f640 30ca 	movw	r0, #3018	; 0xbca
    32b8:	f3af 8000 	nop.w
    32bc:	4818      	ldr	r0, [pc, #96]	; (3320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    32be:	2800      	cmp	r0, #0
    32c0:	bf18      	it	ne
    32c2:	f3af 8000 	nopne.w
    32c6:	f3ef 8410 	mrs	r4, PRIMASK
    32ca:	b672      	cpsid	i
    32cc:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    32d0:	b138      	cbz	r0, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    32d2:	2d00      	cmp	r5, #0
    32d4:	bf1c      	itt	ne
    32d6:	2100      	movne	r1, #0
    32d8:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    32dc:	f43f af51 	beq.w	3182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    32e0:	e788      	b.n	31f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    32e2:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    32e6:	2001      	movs	r0, #1
    32e8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    32ec:	b154      	cbz	r4, 3304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    32ee:	2d00      	cmp	r5, #0
    32f0:	bf08      	it	eq
    32f2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    32f6:	2100      	movs	r1, #0
    32f8:	f640 30dd 	movw	r0, #3037	; 0xbdd
    32fc:	f3af 8000 	nop.w
    3300:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3304:	4805      	ldr	r0, [pc, #20]	; (331c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    3306:	2800      	cmp	r0, #0
    3308:	bf18      	it	ne
    330a:	f3af 8000 	nopne.w
    330e:	b662      	cpsie	i
    3310:	e7ed      	b.n	32ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    3312:	0000      	.short	0x0000
    3314:	20000f0c 	.word	0x20000f0c
	...

00003324 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3324:	b570      	push	{r4, r5, r6, lr}
    3326:	4605      	mov	r5, r0
    3328:	f001 f92a 	bl	4580 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    332c:	480d      	ldr	r0, [pc, #52]	; (3364 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    332e:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3332:	2400      	movs	r4, #0
    3334:	3880      	subs	r0, #128	; 0x80
    3336:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    333a:	bf00      	nop
    333c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3340:	b129      	cbz	r1, 334e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3342:	1c61      	adds	r1, r4, #1
    3344:	b2cc      	uxtb	r4, r1
    3346:	2c20      	cmp	r4, #32
    3348:	d3f8      	bcc.n	333c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    334a:	2020      	movs	r0, #32
    334c:	bd70      	pop	{r4, r5, r6, pc}
    334e:	4906      	ldr	r1, [pc, #24]	; (3368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    3350:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    3354:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    3358:	4621      	mov	r1, r4
    335a:	2001      	movs	r0, #1
    335c:	f7fe fe5e 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    3360:	4620      	mov	r0, r4
    3362:	bd70      	pop	{r4, r5, r6, pc}
    3364:	20000f0c 	.word	0x20000f0c
    3368:	20000c0c 	.word	0x20000c0c

0000336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3370:	f000 fa90 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3374:	4605      	mov	r5, r0
    3376:	f000 fd37 	bl	3de8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    337a:	4c48      	ldr	r4, [pc, #288]	; (349c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x130>)
    337c:	68a0      	ldr	r0, [r4, #8]
    337e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3382:	bf1c      	itt	ne
    3384:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3388:	60a0      	strne	r0, [r4, #8]
    338a:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    338e:	b9a8      	cbnz	r0, 33bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x50>
    3390:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    3394:	1a08      	subs	r0, r1, r0
    3396:	0200      	lsls	r0, r0, #8
    3398:	17c1      	asrs	r1, r0, #31
    339a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    339e:	1200      	asrs	r0, r0, #8
    33a0:	f44f 710c 	mov.w	r1, #560	; 0x230
    33a4:	f00c fd2d 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    33a8:	6921      	ldr	r1, [r4, #16]
    33aa:	4408      	add	r0, r1
    33ac:	1a28      	subs	r0, r5, r0
    33ae:	0200      	lsls	r0, r0, #8
    33b0:	17c1      	asrs	r1, r0, #31
    33b2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33b6:	1200      	asrs	r0, r0, #8
    33b8:	0fc0      	lsrs	r0, r0, #31
    33ba:	d00b      	beq.n	33d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x68>
    33bc:	7e60      	ldrb	r0, [r4, #25]
    33be:	b1c8      	cbz	r0, 33f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    33c0:	f000 fb74 	bl	3aac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    33c4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    33c8:	b1d0      	cbz	r0, 3400 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    33ca:	f44f 6189 	mov.w	r1, #1096	; 0x448
    33ce:	2070      	movs	r0, #112	; 0x70
    33d0:	f001 f94c 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33d4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    33d8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    33dc:	4a30      	ldr	r2, [pc, #192]	; (34a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x134>)
    33de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    33e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    33e6:	2108      	movs	r1, #8
    33e8:	4790      	blx	r2
    33ea:	f240 4137 	movw	r1, #1079	; 0x437
    33ee:	2070      	movs	r0, #112	; 0x70
    33f0:	f001 f93c 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33f4:	1ce8      	adds	r0, r5, #3
    33f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33fa:	f000 fa51 	bl	38a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    33fe:	e7e1      	b.n	33c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    3400:	2601      	movs	r6, #1
    3402:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    3406:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    340a:	2820      	cmp	r0, #32
    340c:	d025      	beq.n	345a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xee>
    340e:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    3412:	2020      	movs	r0, #32
    3414:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3418:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    341c:	2500      	movs	r5, #0
    341e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    3422:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    3426:	481f      	ldr	r0, [pc, #124]	; (34a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x138>)
    3428:	6025      	str	r5, [r4, #0]
    342a:	7800      	ldrb	r0, [r0, #0]
    342c:	2802      	cmp	r0, #2
    342e:	bf16      	itet	ne
    3430:	2803      	cmpne	r0, #3
    3432:	2001      	moveq	r0, #1
    3434:	2000      	movne	r0, #0
    3436:	7720      	strb	r0, [r4, #28]
    3438:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
    343c:	f04f 0001 	mov.w	r0, #1
    3440:	4641      	mov	r1, r8
    3442:	f7fe fe1b 	bl	207c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>
    3446:	2800      	cmp	r0, #0
    3448:	d0f8      	beq.n	343c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd0>
    344a:	4817      	ldr	r0, [pc, #92]	; (34a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>)
    344c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3450:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    3454:	2802      	cmp	r0, #2
    3456:	d005      	beq.n	3464 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf8>
    3458:	e009      	b.n	346e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x102>
    345a:	f240 414b 	movw	r1, #1099	; 0x44b
    345e:	2070      	movs	r0, #112	; 0x70
    3460:	f001 f904 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3464:	4642      	mov	r2, r8
    3466:	4639      	mov	r1, r7
    3468:	2006      	movs	r0, #6
    346a:	f7fe fdd7 	bl	201c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    346e:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
    3472:	eb04 0088 	add.w	r0, r4, r8, lsl #2
    3476:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    347a:	2820      	cmp	r0, #32
    347c:	d003      	beq.n	3486 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    347e:	480b      	ldr	r0, [pc, #44]	; (34ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>)
    3480:	7840      	ldrb	r0, [r0, #1]
    3482:	f001 f9c3 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3486:	7f20      	ldrb	r0, [r4, #28]
    3488:	2800      	cmp	r0, #0
    348a:	bf08      	it	eq
    348c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3490:	f000 fcf4 	bl	3e7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3494:	7725      	strb	r5, [r4, #28]
    3496:	7765      	strb	r5, [r4, #29]
    3498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    349c:	20000f0c 	.word	0x20000f0c
    34a0:	20000c0c 	.word	0x20000c0c
    34a4:	20000012 	.word	0x20000012
    34a8:	20000e8c 	.word	0x20000e8c
    34ac:	20000010 	.word	0x20000010

000034b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    34b0:	b530      	push	{r4, r5, lr}
    34b2:	4c30      	ldr	r4, [pc, #192]	; (3574 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    34b4:	b083      	sub	sp, #12
    34b6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    34ba:	2920      	cmp	r1, #32
    34bc:	d008      	beq.n	34d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    34be:	68a1      	ldr	r1, [r4, #8]
    34c0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    34c4:	d009      	beq.n	34da <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    34c6:	f640 21be 	movw	r1, #2750	; 0xabe
    34ca:	2070      	movs	r0, #112	; 0x70
    34cc:	f001 f8ce 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34d0:	f640 21bd 	movw	r1, #2749	; 0xabd
    34d4:	2070      	movs	r0, #112	; 0x70
    34d6:	f001 f8c9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34da:	6861      	ldr	r1, [r4, #4]
    34dc:	f8df c098 	ldr.w	ip, [pc, #152]	; 3578 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    34e0:	180b      	adds	r3, r1, r0
    34e2:	2200      	movs	r2, #0
    34e4:	ebbc 0101 	subs.w	r1, ip, r1
    34e8:	eb72 0102 	sbcs.w	r1, r2, r2
    34ec:	d204      	bcs.n	34f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    34ee:	f240 51e1 	movw	r1, #1505	; 0x5e1
    34f2:	2070      	movs	r0, #112	; 0x70
    34f4:	f001 f8ba 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34f8:	4920      	ldr	r1, [pc, #128]	; (357c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    34fa:	4288      	cmp	r0, r1
    34fc:	dd04      	ble.n	3508 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    34fe:	f240 51e2 	movw	r1, #1506	; 0x5e2
    3502:	2070      	movs	r0, #112	; 0x70
    3504:	f001 f8b2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3508:	491d      	ldr	r1, [pc, #116]	; (3580 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    350a:	4288      	cmp	r0, r1
    350c:	da04      	bge.n	3518 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    350e:	f240 51e3 	movw	r1, #1507	; 0x5e3
    3512:	2070      	movs	r0, #112	; 0x70
    3514:	f001 f8aa 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3518:	481a      	ldr	r0, [pc, #104]	; (3584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    351a:	4283      	cmp	r3, r0
    351c:	bfa8      	it	ge
    351e:	481a      	ldrge	r0, [pc, #104]	; (3588 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    3520:	da03      	bge.n	352a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    3522:	2b00      	cmp	r3, #0
    3524:	bfb8      	it	lt
    3526:	4817      	ldrlt	r0, [pc, #92]	; (3584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    3528:	da00      	bge.n	352c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    352a:	181b      	adds	r3, r3, r0
    352c:	4618      	mov	r0, r3
    352e:	aa01      	add	r2, sp, #4
    3530:	4669      	mov	r1, sp
    3532:	f000 fd0d 	bl	3f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    3536:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    353a:	280f      	cmp	r0, #15
    353c:	bfcc      	ite	gt
    353e:	2001      	movgt	r0, #1
    3540:	2000      	movle	r0, #0
    3542:	9900      	ldr	r1, [sp, #0]
    3544:	4408      	add	r0, r1
    3546:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    354a:	60a1      	str	r1, [r4, #8]
    354c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3550:	2800      	cmp	r0, #0
    3552:	bf04      	itt	eq
    3554:	b003      	addeq	sp, #12
    3556:	bd30      	popeq	{r4, r5, pc}
    3558:	2301      	movs	r3, #1
    355a:	2203      	movs	r2, #3
    355c:	2005      	movs	r0, #5
    355e:	f000 fb1f 	bl	3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3562:	2800      	cmp	r0, #0
    3564:	bf1c      	itt	ne
    3566:	b003      	addne	sp, #12
    3568:	bd30      	popne	{r4, r5, pc}
    356a:	f640 21c6 	movw	r1, #2758	; 0xac6
    356e:	2070      	movs	r0, #112	; 0x70
    3570:	f001 f87c 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3574:	20000f0c 	.word	0x20000f0c
    3578:	1e847fff 	.word	0x1e847fff
    357c:	07a12000 	.word	0x07a12000
    3580:	f85ee000 	.word	0xf85ee000
    3584:	1e848000 	.word	0x1e848000
    3588:	e17b8000 	.word	0xe17b8000

0000358c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    358c:	4a1e      	ldr	r2, [pc, #120]	; (3608 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    358e:	b510      	push	{r4, lr}
    3590:	2120      	movs	r1, #32
    3592:	f882 1020 	strb.w	r1, [r2, #32]
    3596:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    359a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    359e:	2000      	movs	r0, #0
    35a0:	f882 0023 	strb.w	r0, [r2, #35]	; 0x23
    35a4:	f882 002e 	strb.w	r0, [r2, #46]	; 0x2e
    35a8:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    35ac:	1e43      	subs	r3, r0, #1
    35ae:	6093      	str	r3, [r2, #8]
    35b0:	6010      	str	r0, [r2, #0]
    35b2:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    35b6:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
    35ba:	7710      	strb	r0, [r2, #28]
    35bc:	7750      	strb	r0, [r2, #29]
    35be:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    35c2:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
    35c6:	4911      	ldr	r1, [pc, #68]	; (360c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    35c8:	f882 002d 	strb.w	r0, [r2, #45]	; 0x2d
    35cc:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
    35d0:	7008      	strb	r0, [r1, #0]
    35d2:	7048      	strb	r0, [r1, #1]
    35d4:	8048      	strh	r0, [r1, #2]
    35d6:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
    35da:	2310      	movs	r3, #16
    35dc:	7088      	strb	r0, [r1, #2]
    35de:	f801 0f04 	strb.w	r0, [r1, #4]!
    35e2:	1e5b      	subs	r3, r3, #1
    35e4:	d1fa      	bne.n	35dc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x50>
    35e6:	2001      	movs	r0, #1
    35e8:	4c09      	ldr	r4, [pc, #36]	; (3610 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    35ea:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
    35ee:	20ff      	movs	r0, #255	; 0xff
    35f0:	7020      	strb	r0, [r4, #0]
    35f2:	4808      	ldr	r0, [pc, #32]	; (3614 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    35f4:	f001 f8ec 	bl	47d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    35f8:	7060      	strb	r0, [r4, #1]
    35fa:	f001 f947 	bl	488c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    35fe:	60a0      	str	r0, [r4, #8]
    3600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3604:	f000 bc68 	b.w	3ed8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3608:	20000f0c 	.word	0x20000f0c
    360c:	20000012 	.word	0x20000012
    3610:	20000010 	.word	0x20000010
    3614:	00001ed5 	.word	0x00001ed5

00003618 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    3618:	b570      	push	{r4, r5, r6, lr}
    361a:	4605      	mov	r5, r0
    361c:	2001      	movs	r0, #1
    361e:	fa00 f405 	lsl.w	r4, r0, r5
    3622:	460e      	mov	r6, r1
    3624:	2a00      	cmp	r2, #0
    3626:	bf08      	it	eq
    3628:	4808      	ldreq	r0, [pc, #32]	; (364c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    362a:	d00c      	beq.n	3646 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    362c:	2000      	movs	r0, #0
    362e:	f000 fc39 	bl	3ea4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    3632:	00e9      	lsls	r1, r5, #3
    3634:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3638:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    363c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    3640:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    3644:	4802      	ldr	r0, [pc, #8]	; (3650 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    3646:	6004      	str	r4, [r0, #0]
    3648:	bd70      	pop	{r4, r5, r6, pc}
    364a:	0000      	.short	0x0000
    364c:	4001f508 	.word	0x4001f508
    3650:	4001f504 	.word	0x4001f504

00003654 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3654:	b570      	push	{r4, r5, r6, lr}
    3656:	4604      	mov	r4, r0
    3658:	4615      	mov	r5, r2
    365a:	4608      	mov	r0, r1
    365c:	f00c fba4 	bl	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    3660:	4a0f      	ldr	r2, [pc, #60]	; (36a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    3662:	1b01      	subs	r1, r0, r4
    3664:	f102 0c01 	add.w	ip, r2, #1
    3668:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    366c:	bf24      	itt	cs
    366e:	1a23      	subcs	r3, r4, r0
    3670:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    3674:	d30b      	bcc.n	368e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3676:	428a      	cmp	r2, r1
    3678:	d203      	bcs.n	3682 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    367a:	1b11      	subs	r1, r2, r4
    367c:	4408      	add	r0, r1
    367e:	1c41      	adds	r1, r0, #1
    3680:	e005      	b.n	368e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3682:	429a      	cmp	r2, r3
    3684:	d207      	bcs.n	3696 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    3686:	1a10      	subs	r0, r2, r0
    3688:	4420      	add	r0, r4
    368a:	1c40      	adds	r0, r0, #1
    368c:	4241      	negs	r1, r0
    368e:	f101 000f 	add.w	r0, r1, #15
    3692:	1a28      	subs	r0, r5, r0
    3694:	bd70      	pop	{r4, r5, r6, pc}
    3696:	f640 21e1 	movw	r1, #2785	; 0xae1
    369a:	2070      	movs	r0, #112	; 0x70
    369c:	f000 ffe6 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36a0:	1e847fff 	.word	0x1e847fff

000036a4 <MPSL_IRQ_RTC0_Handler>:
    36a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36a8:	4c24      	ldr	r4, [pc, #144]	; (373c <MPSL_IRQ_RTC0_Handler+0x98>)
    36aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36ae:	f04f 0500 	mov.w	r5, #0
    36b2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    36b6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    36ba:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    36be:	bf1c      	itt	ne
    36c0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    36c4:	2800      	cmpne	r0, #0
    36c6:	d00b      	beq.n	36e0 <MPSL_IRQ_RTC0_Handler+0x3c>
    36c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    36cc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36d0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    36d4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    36d8:	f04f 0004 	mov.w	r0, #4
    36dc:	f7fe ff02 	bl	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36e0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36e4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    36e8:	bf1c      	itt	ne
    36ea:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    36ee:	2800      	cmpne	r0, #0
    36f0:	d00b      	beq.n	370a <MPSL_IRQ_RTC0_Handler+0x66>
    36f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    36f6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36fa:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    36fe:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3702:	f04f 0005 	mov.w	r0, #5
    3706:	f7fe feed 	bl	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    370a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    370e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3712:	bf1a      	itte	ne
    3714:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3718:	2800      	cmpne	r0, #0
    371a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    371e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3722:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3726:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    372a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    372e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3732:	f04f 0006 	mov.w	r0, #6
    3736:	f7fe bed5 	b.w	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    373a:	0000      	.short	0x0000
    373c:	4000b000 	.word	0x4000b000

00003740 <MPSL_IRQ_TIMER0_Handler>:
    3740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3744:	4d3a      	ldr	r5, [pc, #232]	; (3830 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3746:	7828      	ldrb	r0, [r5, #0]
    3748:	2804      	cmp	r0, #4
    374a:	d06c      	beq.n	3826 <MPSL_IRQ_TIMER0_Handler+0xe6>
    374c:	1ce8      	adds	r0, r5, #3
    374e:	2201      	movs	r2, #1
    3750:	7801      	ldrb	r1, [r0, #0]
    3752:	b159      	cbz	r1, 376c <MPSL_IRQ_TIMER0_Handler+0x2c>
    3754:	2901      	cmp	r1, #1
    3756:	bf08      	it	eq
    3758:	706a      	strbeq	r2, [r5, #1]
    375a:	d002      	beq.n	3762 <MPSL_IRQ_TIMER0_Handler+0x22>
    375c:	7869      	ldrb	r1, [r5, #1]
    375e:	2900      	cmp	r1, #0
    3760:	d05c      	beq.n	381c <MPSL_IRQ_TIMER0_Handler+0xdc>
    3762:	2102      	movs	r1, #2
    3764:	7001      	strb	r1, [r0, #0]
    3766:	7840      	ldrb	r0, [r0, #1]
    3768:	f000 fae2 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    376c:	4c31      	ldr	r4, [pc, #196]	; (3834 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    376e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3772:	f04f 0800 	mov.w	r8, #0
    3776:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    377a:	f44f 7680 	mov.w	r6, #256	; 0x100
    377e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3782:	bf1c      	itt	ne
    3784:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    3788:	2800      	cmpne	r0, #0
    378a:	d008      	beq.n	379e <MPSL_IRQ_TIMER0_Handler+0x5e>
    378c:	f04f 0003 	mov.w	r0, #3
    3790:	f000 face 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3794:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3798:	2003      	movs	r0, #3
    379a:	f7fe fea3 	bl	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    379e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37a2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    37a6:	bf1c      	itt	ne
    37a8:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    37ac:	2800      	cmpne	r0, #0
    37ae:	d008      	beq.n	37c2 <MPSL_IRQ_TIMER0_Handler+0x82>
    37b0:	f04f 0002 	mov.w	r0, #2
    37b4:	f000 fabc 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    37b8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37bc:	2002      	movs	r0, #2
    37be:	f7fe fe91 	bl	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37c2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37c6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    37ca:	bf1c      	itt	ne
    37cc:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    37d0:	2800      	cmpne	r0, #0
    37d2:	d008      	beq.n	37e6 <MPSL_IRQ_TIMER0_Handler+0xa6>
    37d4:	f04f 0001 	mov.w	r0, #1
    37d8:	f000 faaa 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    37dc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37e0:	2001      	movs	r0, #1
    37e2:	f7fe fe7f 	bl	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37ea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    37ee:	bf1a      	itte	ne
    37f0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    37f4:	2800      	cmpne	r0, #0
    37f6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    37fa:	f04f 0000 	mov.w	r0, #0
    37fe:	f000 fa97 	bl	3d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3802:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3806:	2004      	movs	r0, #4
    3808:	7028      	strb	r0, [r5, #0]
    380a:	f8c5 8008 	str.w	r8, [r5, #8]
    380e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3816:	2000      	movs	r0, #0
    3818:	f7fe be64 	b.w	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    381c:	f240 3172 	movw	r1, #882	; 0x372
    3820:	206c      	movs	r0, #108	; 0x6c
    3822:	f000 ff23 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    382a:	2007      	movs	r0, #7
    382c:	f7fe be5a 	b.w	24e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3830:	2000001c 	.word	0x2000001c
    3834:	40008000 	.word	0x40008000
    3838:	2201      	movs	r2, #1
    383a:	0213      	lsls	r3, r2, #8
    383c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3840:	2000      	movs	r0, #0
    3842:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    3846:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    384a:	f3bf 8f4f 	dsb	sy
    384e:	f3bf 8f6f 	isb	sy
    3852:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    3856:	490c      	ldr	r1, [pc, #48]	; (3888 <MPSL_IRQ_TIMER0_Handler+0x148>)
    3858:	604a      	str	r2, [r1, #4]
    385a:	1e43      	subs	r3, r0, #1
    385c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3860:	4b0a      	ldr	r3, [pc, #40]	; (388c <MPSL_IRQ_TIMER0_Handler+0x14c>)
    3862:	6018      	str	r0, [r3, #0]
    3864:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3868:	1d1b      	adds	r3, r3, #4
    386a:	6018      	str	r0, [r3, #0]
    386c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3870:	1d1b      	adds	r3, r3, #4
    3872:	6018      	str	r0, [r3, #0]
    3874:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3878:	1d1b      	adds	r3, r3, #4
    387a:	6018      	str	r0, [r3, #0]
    387c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3880:	610a      	str	r2, [r1, #16]
    3882:	4903      	ldr	r1, [pc, #12]	; (3890 <MPSL_IRQ_TIMER0_Handler+0x150>)
    3884:	7048      	strb	r0, [r1, #1]
    3886:	4770      	bx	lr
    3888:	40008000 	.word	0x40008000
    388c:	40008540 	.word	0x40008540
    3890:	2000001c 	.word	0x2000001c

00003894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3894:	4801      	ldr	r0, [pc, #4]	; (389c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3896:	6800      	ldr	r0, [r0, #0]
    3898:	4770      	bx	lr
    389a:	0000      	.short	0x0000
    389c:	4000b504 	.word	0x4000b504

000038a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    38a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    38a4:	4e41      	ldr	r6, [pc, #260]	; (39ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    38a6:	4604      	mov	r4, r0
    38a8:	1ef7      	subs	r7, r6, #3
    38aa:	f896 c000 	ldrb.w	ip, [r6]
    38ae:	68f8      	ldr	r0, [r7, #12]
    38b0:	f1bc 0f01 	cmp.w	ip, #1
    38b4:	bf04      	itt	eq
    38b6:	42a0      	cmpeq	r0, r4
    38b8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    38bc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    38c0:	4a3b      	ldr	r2, [pc, #236]	; (39b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    38c2:	6011      	str	r1, [r2, #0]
    38c4:	493b      	ldr	r1, [pc, #236]	; (39b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    38c6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    38ca:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    38ce:	4a3a      	ldr	r2, [pc, #232]	; (39b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    38d0:	f04f 0500 	mov.w	r5, #0
    38d4:	f1bc 0f00 	cmp.w	ip, #0
    38d8:	d057      	beq.n	398a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    38da:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    38de:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    38e2:	6015      	str	r5, [r2, #0]
    38e4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    38e8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    38ec:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    38f0:	f04f 0801 	mov.w	r8, #1
    38f4:	2a00      	cmp	r2, #0
    38f6:	bf04      	itt	eq
    38f8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    38fc:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3904:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3908:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    390c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3910:	4a2a      	ldr	r2, [pc, #168]	; (39bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    3912:	f8d2 a000 	ldr.w	sl, [r2]
    3916:	eba4 0a0a 	sub.w	sl, r4, sl
    391a:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    391e:	f1bb 0f02 	cmp.w	fp, #2
    3922:	d33c      	bcc.n	399e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3924:	f04f 0a02 	mov.w	sl, #2
    3928:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    392c:	d237      	bcs.n	399e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    392e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3932:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3936:	f1bc 0f00 	cmp.w	ip, #0
    393a:	d005      	beq.n	3948 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    393c:	6811      	ldr	r1, [r2, #0]
    393e:	1a41      	subs	r1, r0, r1
    3940:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3944:	2902      	cmp	r1, #2
    3946:	d3f9      	bcc.n	393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    3948:	f8c7 8008 	str.w	r8, [r7, #8]
    394c:	703d      	strb	r5, [r7, #0]
    394e:	f7ff ff73 	bl	3838 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3952:	481b      	ldr	r0, [pc, #108]	; (39c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    3954:	6005      	str	r5, [r0, #0]
    3956:	1d00      	adds	r0, r0, #4
    3958:	f8c0 a000 	str.w	sl, [r0]
    395c:	4919      	ldr	r1, [pc, #100]	; (39c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    395e:	2004      	movs	r0, #4
    3960:	6008      	str	r0, [r1, #0]
    3962:	4919      	ldr	r1, [pc, #100]	; (39c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3964:	f8c1 800c 	str.w	r8, [r1, #12]
    3968:	68ba      	ldr	r2, [r7, #8]
    396a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    396e:	0181      	lsls	r1, r0, #6
    3970:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    3974:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    3978:	4a14      	ldr	r2, [pc, #80]	; (39cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    397a:	0741      	lsls	r1, r0, #29
    397c:	6011      	str	r1, [r2, #0]
    397e:	60fc      	str	r4, [r7, #12]
    3980:	7070      	strb	r0, [r6, #1]
    3982:	f886 8000 	strb.w	r8, [r6]
    3986:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    398a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    398e:	4b10      	ldr	r3, [pc, #64]	; (39d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3990:	601d      	str	r5, [r3, #0]
    3992:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3996:	6015      	str	r5, [r2, #0]
    3998:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    399c:	e7a4      	b.n	38e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    399e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    39a2:	f240 11a5 	movw	r1, #421	; 0x1a5
    39a6:	206c      	movs	r0, #108	; 0x6c
    39a8:	f000 fe60 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39ac:	2000001f 	.word	0x2000001f
    39b0:	4001f508 	.word	0x4001f508
    39b4:	4000b000 	.word	0x4000b000
    39b8:	4000b544 	.word	0x4000b544
    39bc:	4000b504 	.word	0x4000b504
    39c0:	40008504 	.word	0x40008504
    39c4:	40008510 	.word	0x40008510
    39c8:	40008000 	.word	0x40008000
    39cc:	4001f504 	.word	0x4001f504
    39d0:	4000b540 	.word	0x4000b540

000039d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    39d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d8:	4c2b      	ldr	r4, [pc, #172]	; (3a88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    39da:	68e1      	ldr	r1, [r4, #12]
    39dc:	4281      	cmp	r1, r0
    39de:	bf14      	ite	ne
    39e0:	2201      	movne	r2, #1
    39e2:	2200      	moveq	r2, #0
    39e4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3a8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    39e8:	f89c 7000 	ldrb.w	r7, [ip]
    39ec:	2f02      	cmp	r7, #2
    39ee:	d002      	beq.n	39f6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    39f0:	2a00      	cmp	r2, #0
    39f2:	d038      	beq.n	3a66 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    39f4:	e003      	b.n	39fe <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    39f6:	2a00      	cmp	r2, #0
    39f8:	bf08      	it	eq
    39fa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    39fe:	7862      	ldrb	r2, [r4, #1]
    3a00:	b382      	cbz	r2, 3a64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3a02:	4b23      	ldr	r3, [pc, #140]	; (3a90 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a08:	601a      	str	r2, [r3, #0]
    3a0a:	4b22      	ldr	r3, [pc, #136]	; (3a94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3a0c:	1395      	asrs	r5, r2, #14
    3a0e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3a12:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3a16:	2600      	movs	r6, #0
    3a18:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3a1c:	4a1e      	ldr	r2, [pc, #120]	; (3a98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3a1e:	f8d2 8000 	ldr.w	r8, [r2]
    3a22:	eba0 0808 	sub.w	r8, r0, r8
    3a26:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    3a2a:	f1b8 0f02 	cmp.w	r8, #2
    3a2e:	d324      	bcc.n	3a7a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3a30:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    3a34:	d221      	bcs.n	3a7a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3a36:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a3a:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    3a3e:	b12f      	cbz	r7, 3a4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    3a40:	6813      	ldr	r3, [r2, #0]
    3a42:	1acb      	subs	r3, r1, r3
    3a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3a48:	2b02      	cmp	r3, #2
    3a4a:	d3f9      	bcc.n	3a40 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    3a4c:	4b13      	ldr	r3, [pc, #76]	; (3a9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    3a4e:	2102      	movs	r1, #2
    3a50:	074a      	lsls	r2, r1, #29
    3a52:	601a      	str	r2, [r3, #0]
    3a54:	60e0      	str	r0, [r4, #12]
    3a56:	2004      	movs	r0, #4
    3a58:	f88c 0001 	strb.w	r0, [ip, #1]
    3a5c:	f88c 1000 	strb.w	r1, [ip]
    3a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a64:	e004      	b.n	3a70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3a66:	f240 11b3 	movw	r1, #435	; 0x1b3
    3a6a:	206c      	movs	r0, #108	; 0x6c
    3a6c:	f000 fdfe 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a70:	f240 11b7 	movw	r1, #439	; 0x1b7
    3a74:	206c      	movs	r0, #108	; 0x6c
    3a76:	f000 fdf9 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a7a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3a7e:	f240 11c3 	movw	r1, #451	; 0x1c3
    3a82:	206c      	movs	r0, #108	; 0x6c
    3a84:	f000 fdf2 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a88:	2000001c 	.word	0x2000001c
    3a8c:	2000001f 	.word	0x2000001f
    3a90:	4001f508 	.word	0x4001f508
    3a94:	4000b000 	.word	0x4000b000
    3a98:	4000b504 	.word	0x4000b504
    3a9c:	4001f504 	.word	0x4001f504

00003aa0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3aa0:	4801      	ldr	r0, [pc, #4]	; (3aa8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3aa2:	68c0      	ldr	r0, [r0, #12]
    3aa4:	4770      	bx	lr
    3aa6:	0000      	.short	0x0000
    3aa8:	2000001c 	.word	0x2000001c

00003aac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ab0:	4833      	ldr	r0, [pc, #204]	; (3b80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3ab2:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3ab6:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    3aba:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3abe:	4a32      	ldr	r2, [pc, #200]	; (3b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3ac0:	2100      	movs	r1, #0
    3ac2:	f89c 3000 	ldrb.w	r3, [ip]
    3ac6:	b163      	cbz	r3, 3ae2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3ac8:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3acc:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3ad0:	6011      	str	r1, [r2, #0]
    3ad2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3ad6:	bf00      	nop
    3ad8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3adc:	2201      	movs	r2, #1
    3ade:	b980      	cbnz	r0, 3b02 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3ae0:	e009      	b.n	3af6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3ae2:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3ae6:	4c29      	ldr	r4, [pc, #164]	; (3b8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3ae8:	6021      	str	r1, [r4, #0]
    3aea:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3aee:	6011      	str	r1, [r2, #0]
    3af0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3af4:	e7f0      	b.n	3ad8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3af6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3afa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3afe:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3b02:	2b02      	cmp	r3, #2
    3b04:	d004      	beq.n	3b10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3b06:	f240 11cf 	movw	r1, #463	; 0x1cf
    3b0a:	206c      	movs	r0, #108	; 0x6c
    3b0c:	f000 fdae 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b10:	4e1f      	ldr	r6, [pc, #124]	; (3b90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3b12:	6830      	ldr	r0, [r6, #0]
    3b14:	4c1f      	ldr	r4, [pc, #124]	; (3b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3b16:	1cc0      	adds	r0, r0, #3
    3b18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b1c:	68e3      	ldr	r3, [r4, #12]
    3b1e:	4d1e      	ldr	r5, [pc, #120]	; (3b98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3b20:	4298      	cmp	r0, r3
    3b22:	d00b      	beq.n	3b3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3b24:	6837      	ldr	r7, [r6, #0]
    3b26:	1bdf      	subs	r7, r3, r7
    3b28:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3b2c:	2f04      	cmp	r7, #4
    3b2e:	d305      	bcc.n	3b3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3b30:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3b34:	d202      	bcs.n	3b3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3b36:	f7ff feb3 	bl	38a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3b3a:	e01b      	b.n	3b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3b3c:	6830      	ldr	r0, [r6, #0]
    3b3e:	1a18      	subs	r0, r3, r0
    3b40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b44:	2802      	cmp	r0, #2
    3b46:	d313      	bcc.n	3b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3b48:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3b4c:	d210      	bcs.n	3b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3b4e:	4b13      	ldr	r3, [pc, #76]	; (3b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3b50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3b54:	6018      	str	r0, [r3, #0]
    3b56:	60a2      	str	r2, [r4, #8]
    3b58:	7021      	strb	r1, [r4, #0]
    3b5a:	606a      	str	r2, [r5, #4]
    3b5c:	60ea      	str	r2, [r5, #12]
    3b5e:	0040      	lsls	r0, r0, #1
    3b60:	1f19      	subs	r1, r3, #4
    3b62:	6008      	str	r0, [r1, #0]
    3b64:	2004      	movs	r0, #4
    3b66:	f88c 0001 	strb.w	r0, [ip, #1]
    3b6a:	f88c 2000 	strb.w	r2, [ip]
    3b6e:	e001      	b.n	3b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3b70:	60a2      	str	r2, [r4, #8]
    3b72:	7021      	strb	r1, [r4, #0]
    3b74:	68a0      	ldr	r0, [r4, #8]
    3b76:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b7e:	0000      	.short	0x0000
    3b80:	4000b000 	.word	0x4000b000
    3b84:	2000001f 	.word	0x2000001f
    3b88:	4000b544 	.word	0x4000b544
    3b8c:	4000b540 	.word	0x4000b540
    3b90:	4000b504 	.word	0x4000b504
    3b94:	2000001c 	.word	0x2000001c
    3b98:	40008000 	.word	0x40008000
    3b9c:	4001f508 	.word	0x4001f508

00003ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ba4:	f8df c174 	ldr.w	ip, [pc, #372]	; 3d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3ba8:	2701      	movs	r7, #1
    3baa:	f04f 0800 	mov.w	r8, #0
    3bae:	f89c 5000 	ldrb.w	r5, [ip]
    3bb2:	f89c c001 	ldrb.w	ip, [ip, #1]
    3bb6:	2807      	cmp	r0, #7
    3bb8:	d27e      	bcs.n	3cb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3bba:	e8df f000 	tbb	[pc, r0]
    3bbe:	0404      	.short	0x0404
    3bc0:	6a6a0404 	.word	0x6a6a0404
    3bc4:	006a      	.short	0x006a
    3bc6:	4c56      	ldr	r4, [pc, #344]	; (3d20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3bc8:	68e6      	ldr	r6, [r4, #12]
    3bca:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3bce:	bf04      	itt	eq
    3bd0:	7864      	ldrbeq	r4, [r4, #1]
    3bd2:	2c00      	cmpeq	r4, #0
    3bd4:	d002      	beq.n	3bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3bd6:	2d02      	cmp	r5, #2
    3bd8:	d005      	beq.n	3be6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3bda:	e03c      	b.n	3c56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3bdc:	f240 2102 	movw	r1, #514	; 0x202
    3be0:	206c      	movs	r0, #108	; 0x6c
    3be2:	f000 fd43 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be6:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3bea:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3bee:	f1ac 0404 	sub.w	r4, ip, #4
    3bf2:	0624      	lsls	r4, r4, #24
    3bf4:	0da4      	lsrs	r4, r4, #22
    3bf6:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3bfa:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3bfe:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3c02:	2400      	movs	r4, #0
    3c04:	2d01      	cmp	r5, #1
    3c06:	d002      	beq.n	3c0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3c08:	2d02      	cmp	r5, #2
    3c0a:	d011      	beq.n	3c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3c0c:	e020      	b.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c0e:	f1bc 0f04 	cmp.w	ip, #4
    3c12:	d205      	bcs.n	3c20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3c14:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3c18:	f1ba 0f00 	cmp.w	sl, #0
    3c1c:	d118      	bne.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c1e:	e004      	b.n	3c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3c20:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3c24:	f1ba 0f00 	cmp.w	sl, #0
    3c28:	d112      	bne.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c2a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3c2e:	e00f      	b.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c30:	f1bc 0f04 	cmp.w	ip, #4
    3c34:	d205      	bcs.n	3c42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3c36:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3c3a:	f1ba 0f00 	cmp.w	sl, #0
    3c3e:	d107      	bne.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c40:	e004      	b.n	3c4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3c42:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3c46:	f1ba 0f00 	cmp.w	sl, #0
    3c4a:	d101      	bne.n	3c50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3c4c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3c50:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3c54:	d1d5      	bne.n	3c02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3c56:	4c33      	ldr	r4, [pc, #204]	; (3d24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3c58:	f100 0c10 	add.w	ip, r0, #16
    3c5c:	fa07 fc0c 	lsl.w	ip, r7, ip
    3c60:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3c64:	0080      	lsls	r0, r0, #2
    3c66:	4420      	add	r0, r4
    3c68:	b152      	cbz	r2, 3c80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3c6a:	6407      	str	r7, [r0, #64]	; 0x40
    3c6c:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3c70:	1b8d      	subs	r5, r1, r6
    3c72:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3c76:	42aa      	cmp	r2, r5
    3c78:	bf98      	it	ls
    3c7a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3c7e:	d243      	bcs.n	3d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3c80:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c84:	2b01      	cmp	r3, #1
    3c86:	bf08      	it	eq
    3c88:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3c8c:	2001      	movs	r0, #1
    3c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c92:	b135      	cbz	r5, 3ca2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3c94:	4584      	cmp	ip, r0
    3c96:	d104      	bne.n	3ca2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3c98:	f240 2129 	movw	r1, #553	; 0x229
    3c9c:	206c      	movs	r0, #108	; 0x6c
    3c9e:	f000 fce5 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ca2:	1f00      	subs	r0, r0, #4
    3ca4:	b2c0      	uxtb	r0, r0
    3ca6:	2b01      	cmp	r3, #1
    3ca8:	bf0c      	ite	eq
    3caa:	2401      	moveq	r4, #1
    3cac:	2400      	movne	r4, #0
    3cae:	2803      	cmp	r0, #3
    3cb0:	d306      	bcc.n	3cc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3cb2:	f240 1103 	movw	r1, #259	; 0x103
    3cb6:	e000      	b.n	3cba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3cb8:	e02b      	b.n	3d12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3cba:	206c      	movs	r0, #108	; 0x6c
    3cbc:	f000 fcd6 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cc0:	f8df c064 	ldr.w	ip, [pc, #100]	; 3d28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3cc4:	f100 0310 	add.w	r3, r0, #16
    3cc8:	fa07 f303 	lsl.w	r3, r7, r3
    3ccc:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3cd0:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3cd4:	0080      	lsls	r0, r0, #2
    3cd6:	4460      	add	r0, ip
    3cd8:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3cdc:	b14a      	cbz	r2, 3cf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3cde:	4d13      	ldr	r5, [pc, #76]	; (3d2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3ce0:	682e      	ldr	r6, [r5, #0]
    3ce2:	1b8d      	subs	r5, r1, r6
    3ce4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3ce8:	42aa      	cmp	r2, r5
    3cea:	bf98      	it	ls
    3cec:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3cf0:	d20a      	bcs.n	3d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3cf2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3cf6:	2c00      	cmp	r4, #0
    3cf8:	bf18      	it	ne
    3cfa:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3cfe:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3d02:	2001      	movs	r0, #1
    3d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d08:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3d0c:	2000      	movs	r0, #0
    3d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d12:	f240 212e 	movw	r1, #558	; 0x22e
    3d16:	206c      	movs	r0, #108	; 0x6c
    3d18:	f000 fca8 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d1c:	2000001f 	.word	0x2000001f
    3d20:	2000001c 	.word	0x2000001c
    3d24:	40008000 	.word	0x40008000
    3d28:	4000b000 	.word	0x4000b000
    3d2c:	4000b504 	.word	0x4000b504

00003d30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d32:	2701      	movs	r7, #1
    3d34:	2400      	movs	r4, #0
    3d36:	2807      	cmp	r0, #7
    3d38:	d243      	bcs.n	3dc2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    3d3a:	e8df f000 	tbb	[pc, r0]
    3d3e:	0404      	.short	0x0404
    3d40:	16160404 	.word	0x16160404
    3d44:	0016      	.short	0x0016
    3d46:	4a21      	ldr	r2, [pc, #132]	; (3dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    3d48:	f100 0110 	add.w	r1, r0, #16
    3d4c:	fa07 f101 	lsl.w	r1, r7, r1
    3d50:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3d54:	0081      	lsls	r1, r0, #2
    3d56:	4411      	add	r1, r2
    3d58:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3d5c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3d60:	491b      	ldr	r1, [pc, #108]	; (3dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    3d62:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3d66:	9000      	str	r0, [sp, #0]
    3d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d6a:	4d1a      	ldr	r5, [pc, #104]	; (3dd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    3d6c:	1f01      	subs	r1, r0, #4
    3d6e:	b2ce      	uxtb	r6, r1
    3d70:	7829      	ldrb	r1, [r5, #0]
    3d72:	b179      	cbz	r1, 3d94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3d74:	786a      	ldrb	r2, [r5, #1]
    3d76:	4282      	cmp	r2, r0
    3d78:	d10c      	bne.n	3d94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3d7a:	4a17      	ldr	r2, [pc, #92]	; (3dd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    3d7c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3d80:	6010      	str	r0, [r2, #0]
    3d82:	2901      	cmp	r1, #1
    3d84:	bf08      	it	eq
    3d86:	f7ff fd57 	bleq	3838 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3d8a:	702c      	strb	r4, [r5, #0]
    3d8c:	4913      	ldr	r1, [pc, #76]	; (3ddc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    3d8e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3d92:	60c8      	str	r0, [r1, #12]
    3d94:	f106 0010 	add.w	r0, r6, #16
    3d98:	fa07 f100 	lsl.w	r1, r7, r0
    3d9c:	4810      	ldr	r0, [pc, #64]	; (3de0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3d9e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3da2:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3da6:	00b0      	lsls	r0, r6, #2
    3da8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3dac:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3db0:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3db4:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3db8:	480a      	ldr	r0, [pc, #40]	; (3de4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3dba:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3dbe:	9000      	str	r0, [sp, #0]
    3dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dc2:	f240 219b 	movw	r1, #667	; 0x29b
    3dc6:	206c      	movs	r0, #108	; 0x6c
    3dc8:	f000 fc50 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dcc:	40008000 	.word	0x40008000
    3dd0:	40008140 	.word	0x40008140
    3dd4:	2000001f 	.word	0x2000001f
    3dd8:	4001f508 	.word	0x4001f508
    3ddc:	2000001c 	.word	0x2000001c
    3de0:	4000b000 	.word	0x4000b000
    3de4:	4000b140 	.word	0x4000b140

00003de8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3de8:	491e      	ldr	r1, [pc, #120]	; (3e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3dea:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3dee:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3df2:	481d      	ldr	r0, [pc, #116]	; (3e68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3df4:	4a1d      	ldr	r2, [pc, #116]	; (3e6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3df6:	f890 c000 	ldrb.w	ip, [r0]
    3dfa:	2000      	movs	r0, #0
    3dfc:	f1bc 0f00 	cmp.w	ip, #0
    3e00:	d00a      	beq.n	3e18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3e02:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3e06:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3e0a:	6010      	str	r0, [r2, #0]
    3e0c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3e10:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3e14:	b981      	cbnz	r1, 3e38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3e16:	e009      	b.n	3e2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3e18:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3e1c:	4b14      	ldr	r3, [pc, #80]	; (3e70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3e1e:	6018      	str	r0, [r3, #0]
    3e20:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3e24:	6010      	str	r0, [r2, #0]
    3e26:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3e2a:	e7f1      	b.n	3e10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3e2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3e34:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3e38:	490e      	ldr	r1, [pc, #56]	; (3e74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3e42:	4a0d      	ldr	r2, [pc, #52]	; (3e78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3e44:	6010      	str	r0, [r2, #0]
    3e46:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3e4a:	1d12      	adds	r2, r2, #4
    3e4c:	6010      	str	r0, [r2, #0]
    3e4e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3e52:	1d12      	adds	r2, r2, #4
    3e54:	6010      	str	r0, [r2, #0]
    3e56:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3e5a:	1d12      	adds	r2, r2, #4
    3e5c:	6010      	str	r0, [r2, #0]
    3e5e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3e62:	4770      	bx	lr
    3e64:	4000b000 	.word	0x4000b000
    3e68:	2000001f 	.word	0x2000001f
    3e6c:	4000b544 	.word	0x4000b544
    3e70:	4000b540 	.word	0x4000b540
    3e74:	40008000 	.word	0x40008000
    3e78:	40008540 	.word	0x40008540

00003e7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3e7c:	4808      	ldr	r0, [pc, #32]	; (3ea0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3e7e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3e82:	2800      	cmp	r0, #0
    3e84:	bfb8      	it	lt
    3e86:	4770      	bxlt	lr
    3e88:	f000 011f 	and.w	r1, r0, #31
    3e8c:	2201      	movs	r2, #1
    3e8e:	fa02 f101 	lsl.w	r1, r2, r1
    3e92:	0940      	lsrs	r0, r0, #5
    3e94:	0080      	lsls	r0, r0, #2
    3e96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3e9a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3e9e:	4770      	bx	lr
    3ea0:	2000001c 	.word	0x2000001c

00003ea4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3ea4:	b510      	push	{r4, lr}
    3ea6:	2807      	cmp	r0, #7
    3ea8:	d20d      	bcs.n	3ec6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3eaa:	e8df f000 	tbb	[pc, r0]
    3eae:	0404      	.short	0x0404
    3eb0:	06060404 	.word	0x06060404
    3eb4:	0006      	.short	0x0006
    3eb6:	4906      	ldr	r1, [pc, #24]	; (3ed0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3eb8:	e002      	b.n	3ec0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3eba:	1f00      	subs	r0, r0, #4
    3ebc:	4905      	ldr	r1, [pc, #20]	; (3ed4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3ebe:	b2c0      	uxtb	r0, r0
    3ec0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	f240 2152 	movw	r1, #594	; 0x252
    3eca:	206c      	movs	r0, #108	; 0x6c
    3ecc:	f000 fbce 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ed0:	40008140 	.word	0x40008140
    3ed4:	4000b140 	.word	0x4000b140

00003ed8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	4819      	ldr	r0, [pc, #100]	; (3f40 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3edc:	2400      	movs	r4, #0
    3ede:	2104      	movs	r1, #4
    3ee0:	7004      	strb	r4, [r0, #0]
    3ee2:	1ec0      	subs	r0, r0, #3
    3ee4:	7001      	strb	r1, [r0, #0]
    3ee6:	0589      	lsls	r1, r1, #22
    3ee8:	60c1      	str	r1, [r0, #12]
    3eea:	f7ff fca5 	bl	3838 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3eee:	2501      	movs	r5, #1
    3ef0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3ef4:	02eb      	lsls	r3, r5, #11
    3ef6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3efa:	f3bf 8f4f 	dsb	sy
    3efe:	f3bf 8f6f 	isb	sy
    3f02:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3f06:	4a0f      	ldr	r2, [pc, #60]	; (3f44 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3f08:	6055      	str	r5, [r2, #4]
    3f0a:	6095      	str	r5, [r2, #8]
    3f0c:	480e      	ldr	r0, [pc, #56]	; (3f48 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3f0e:	6801      	ldr	r1, [r0, #0]
    3f10:	2900      	cmp	r1, #0
    3f12:	d1fc      	bne.n	3f0e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3f14:	1e48      	subs	r0, r1, #1
    3f16:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3f1a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3f1e:	480b      	ldr	r0, [pc, #44]	; (3f4c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3f20:	6004      	str	r4, [r0, #0]
    3f22:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3f26:	1d00      	adds	r0, r0, #4
    3f28:	6004      	str	r4, [r0, #0]
    3f2a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3f2e:	1d00      	adds	r0, r0, #4
    3f30:	6004      	str	r4, [r0, #0]
    3f32:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3f36:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3f3a:	6015      	str	r5, [r2, #0]
    3f3c:	bd70      	pop	{r4, r5, r6, pc}
    3f3e:	0000      	.short	0x0000
    3f40:	2000001f 	.word	0x2000001f
    3f44:	4000b000 	.word	0x4000b000
    3f48:	4000b504 	.word	0x4000b504
    3f4c:	4000b540 	.word	0x4000b540

00003f50 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    3f50:	0b43      	lsrs	r3, r0, #13
    3f52:	f248 6c37 	movw	ip, #34359	; 0x8637
    3f56:	fb03 f30c 	mul.w	r3, r3, ip
    3f5a:	0c1b      	lsrs	r3, r3, #16
    3f5c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    3f60:	f8c1 c000 	str.w	ip, [r1]
    3f64:	f8df c038 	ldr.w	ip, [pc, #56]	; 3fa0 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3f68:	fb03 030c 	mla	r3, r3, ip, r0
    3f6c:	480d      	ldr	r0, [pc, #52]	; (3fa4 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    3f6e:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    3f72:	4358      	muls	r0, r3
    3f74:	0d40      	lsrs	r0, r0, #21
    3f76:	fb10 fc0c 	smulbb	ip, r0, ip
    3f7a:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    3f7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3f82:	125b      	asrs	r3, r3, #9
    3f84:	7013      	strb	r3, [r2, #0]
    3f86:	680b      	ldr	r3, [r1, #0]
    3f88:	4418      	add	r0, r3
    3f8a:	6008      	str	r0, [r1, #0]
    3f8c:	7810      	ldrb	r0, [r2, #0]
    3f8e:	281f      	cmp	r0, #31
    3f90:	bf18      	it	ne
    3f92:	4770      	bxne	lr
    3f94:	2000      	movs	r0, #0
    3f96:	7010      	strb	r0, [r2, #0]
    3f98:	6808      	ldr	r0, [r1, #0]
    3f9a:	1c40      	adds	r0, r0, #1
    3f9c:	6008      	str	r0, [r1, #0]
    3f9e:	4770      	bx	lr
    3fa0:	ffffc2f7 	.word	0xffffc2f7
    3fa4:	00010c6f 	.word	0x00010c6f

00003fa8 <MPSL_IRQ_CLOCK_Handler>:
    3fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fac:	4c16      	ldr	r4, [pc, #88]	; (4008 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3fae:	7a60      	ldrb	r0, [r4, #9]
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d027      	beq.n	4004 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
    3fb8:	058d      	lsls	r5, r1, #22
    3fba:	4628      	mov	r0, r5
    3fbc:	f00b ff45 	bl	fe4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3fc0:	4680      	mov	r8, r0
    3fc2:	f44f 7182 	mov.w	r1, #260	; 0x104
    3fc6:	4628      	mov	r0, r5
    3fc8:	f00b ff3f 	bl	fe4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3fcc:	2600      	movs	r6, #0
    3fce:	4607      	mov	r7, r0
    3fd0:	f1b8 0f00 	cmp.w	r8, #0
    3fd4:	d009      	beq.n	3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fd6:	2001      	movs	r0, #1
    3fd8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3fdc:	7920      	ldrb	r0, [r4, #4]
    3fde:	b120      	cbz	r0, 3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fe0:	7126      	strb	r6, [r4, #4]
    3fe2:	69e0      	ldr	r0, [r4, #28]
    3fe4:	b108      	cbz	r0, 3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fe6:	4780      	blx	r0
    3fe8:	61e6      	str	r6, [r4, #28]
    3fea:	b137      	cbz	r7, 3ffa <MPSL_IRQ_CLOCK_Handler+0x52>
    3fec:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3ff0:	2002      	movs	r0, #2
    3ff2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3ff6:	f000 fa89 	bl	450c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3ffa:	4640      	mov	r0, r8
    3ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4000:	f000 b85a 	b.w	40b8 <MPSL_IRQ_CLOCK_Handler+0x110>
    4004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4008:	2000002c 	.word	0x2000002c
    400c:	b510      	push	{r4, lr}
    400e:	f00b ffc6 	bl	ff9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4012:	b930      	cbnz	r0, 4022 <MPSL_IRQ_CLOCK_Handler+0x7a>
    4014:	f00b ffe4 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4018:	b918      	cbnz	r0, 4022 <MPSL_IRQ_CLOCK_Handler+0x7a>
    401a:	f00c f817 	bl	1004c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    401e:	2800      	cmp	r0, #0
    4020:	d002      	beq.n	4028 <MPSL_IRQ_CLOCK_Handler+0x80>
    4022:	4902      	ldr	r1, [pc, #8]	; (402c <MPSL_IRQ_CLOCK_Handler+0x84>)
    4024:	2002      	movs	r0, #2
    4026:	6008      	str	r0, [r1, #0]
    4028:	bd10      	pop	{r4, pc}
    402a:	0000      	.short	0x0000
    402c:	40000c34 	.word	0x40000c34
    4030:	b570      	push	{r4, r5, r6, lr}
    4032:	f000 f985 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4036:	f000 fab5 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    403a:	4c09      	ldr	r4, [pc, #36]	; (4060 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    403c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4040:	b130      	cbz	r0, 4050 <MPSL_IRQ_CLOCK_Handler+0xa8>
    4042:	f7ff ffe3 	bl	400c <MPSL_IRQ_CLOCK_Handler+0x64>
    4046:	2001      	movs	r0, #1
    4048:	6128      	str	r0, [r5, #16]
    404a:	2003      	movs	r0, #3
    404c:	72a0      	strb	r0, [r4, #10]
    404e:	e004      	b.n	405a <MPSL_IRQ_CLOCK_Handler+0xb2>
    4050:	2002      	movs	r0, #2
    4052:	72a0      	strb	r0, [r4, #10]
    4054:	2001      	movs	r0, #1
    4056:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    405a:	2000      	movs	r0, #0
    405c:	71e0      	strb	r0, [r4, #7]
    405e:	bd70      	pop	{r4, r5, r6, pc}
    4060:	2000002c 	.word	0x2000002c
    4064:	b570      	push	{r4, r5, r6, lr}
    4066:	4c13      	ldr	r4, [pc, #76]	; (40b4 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4068:	79a0      	ldrb	r0, [r4, #6]
    406a:	b1f0      	cbz	r0, 40aa <MPSL_IRQ_CLOCK_Handler+0x102>
    406c:	2801      	cmp	r0, #1
    406e:	d003      	beq.n	4078 <MPSL_IRQ_CLOCK_Handler+0xd0>
    4070:	79e1      	ldrb	r1, [r4, #7]
    4072:	1e40      	subs	r0, r0, #1
    4074:	4281      	cmp	r1, r0
    4076:	da18      	bge.n	40aa <MPSL_IRQ_CLOCK_Handler+0x102>
    4078:	f000 fa94 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    407c:	4605      	mov	r5, r0
    407e:	f000 fb65 	bl	474c <mpsl_temperature_get>
    4082:	79a1      	ldrb	r1, [r4, #6]
    4084:	2901      	cmp	r1, #1
    4086:	d902      	bls.n	408e <MPSL_IRQ_CLOCK_Handler+0xe6>
    4088:	79e1      	ldrb	r1, [r4, #7]
    408a:	1c49      	adds	r1, r1, #1
    408c:	71e1      	strb	r1, [r4, #7]
    408e:	b10d      	cbz	r5, 4094 <MPSL_IRQ_CLOCK_Handler+0xec>
    4090:	6961      	ldr	r1, [r4, #20]
    4092:	e000      	b.n	4096 <MPSL_IRQ_CLOCK_Handler+0xee>
    4094:	6921      	ldr	r1, [r4, #16]
    4096:	1a41      	subs	r1, r0, r1
    4098:	2902      	cmp	r1, #2
    409a:	da02      	bge.n	40a2 <MPSL_IRQ_CLOCK_Handler+0xfa>
    409c:	f111 0f02 	cmn.w	r1, #2
    40a0:	dc07      	bgt.n	40b2 <MPSL_IRQ_CLOCK_Handler+0x10a>
    40a2:	b10d      	cbz	r5, 40a8 <MPSL_IRQ_CLOCK_Handler+0x100>
    40a4:	6160      	str	r0, [r4, #20]
    40a6:	e000      	b.n	40aa <MPSL_IRQ_CLOCK_Handler+0x102>
    40a8:	6120      	str	r0, [r4, #16]
    40aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40ae:	f7ff bfbf 	b.w	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    40b2:	bd70      	pop	{r4, r5, r6, pc}
    40b4:	2000002c 	.word	0x2000002c
    40b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40bc:	4606      	mov	r6, r0
    40be:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    40c2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    40c6:	4628      	mov	r0, r5
    40c8:	f00b febf 	bl	fe4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40cc:	4680      	mov	r8, r0
    40ce:	f44f 7188 	mov.w	r1, #272	; 0x110
    40d2:	4628      	mov	r0, r5
    40d4:	f00b feb9 	bl	fe4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40d8:	4c26      	ldr	r4, [pc, #152]	; (4174 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    40da:	4682      	mov	sl, r0
    40dc:	f894 9000 	ldrb.w	r9, [r4]
    40e0:	f104 0008 	add.w	r0, r4, #8
    40e4:	f00b ff25 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    40e8:	b110      	cbz	r0, 40f0 <MPSL_IRQ_CLOCK_Handler+0x148>
    40ea:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    40ee:	e014      	b.n	411a <MPSL_IRQ_CLOCK_Handler+0x172>
    40f0:	2701      	movs	r7, #1
    40f2:	b13e      	cbz	r6, 4104 <MPSL_IRQ_CLOCK_Handler+0x15c>
    40f4:	7aa0      	ldrb	r0, [r4, #10]
    40f6:	2802      	cmp	r0, #2
    40f8:	d104      	bne.n	4104 <MPSL_IRQ_CLOCK_Handler+0x15c>
    40fa:	2003      	movs	r0, #3
    40fc:	72a0      	strb	r0, [r4, #10]
    40fe:	f7ff ff85 	bl	400c <MPSL_IRQ_CLOCK_Handler+0x64>
    4102:	612f      	str	r7, [r5, #16]
    4104:	2600      	movs	r6, #0
    4106:	f1b8 0f00 	cmp.w	r8, #0
    410a:	d017      	beq.n	413c <MPSL_IRQ_CLOCK_Handler+0x194>
    410c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4110:	7aa0      	ldrb	r0, [r4, #10]
    4112:	2803      	cmp	r0, #3
    4114:	d004      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0x178>
    4116:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    411a:	206d      	movs	r0, #109	; 0x6d
    411c:	f000 faa6 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4120:	f00b ff3d 	bl	ff9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4124:	b928      	cbnz	r0, 4132 <MPSL_IRQ_CLOCK_Handler+0x18a>
    4126:	f00b ff5b 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    412a:	b910      	cbnz	r0, 4132 <MPSL_IRQ_CLOCK_Handler+0x18a>
    412c:	f00b ff8e 	bl	1004c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4130:	b108      	cbz	r0, 4136 <MPSL_IRQ_CLOCK_Handler+0x18e>
    4132:	4811      	ldr	r0, [pc, #68]	; (4178 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4134:	6006      	str	r6, [r0, #0]
    4136:	72a7      	strb	r7, [r4, #10]
    4138:	f000 f8e6 	bl	4308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    413c:	f1ba 0f00 	cmp.w	sl, #0
    4140:	d007      	beq.n	4152 <MPSL_IRQ_CLOCK_Handler+0x1aa>
    4142:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4146:	7aa0      	ldrb	r0, [r4, #10]
    4148:	2801      	cmp	r0, #1
    414a:	d101      	bne.n	4150 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    414c:	f7ff ff8a 	bl	4064 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4150:	616f      	str	r7, [r5, #20]
    4152:	f1b9 0f00 	cmp.w	r9, #0
    4156:	d007      	beq.n	4168 <MPSL_IRQ_CLOCK_Handler+0x1c0>
    4158:	7026      	strb	r6, [r4, #0]
    415a:	7aa0      	ldrb	r0, [r4, #10]
    415c:	2801      	cmp	r0, #1
    415e:	d101      	bne.n	4164 <MPSL_IRQ_CLOCK_Handler+0x1bc>
    4160:	f7ff ff66 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    4164:	f000 f8d0 	bl	4308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    416c:	4801      	ldr	r0, [pc, #4]	; (4174 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    416e:	3008      	adds	r0, #8
    4170:	f00b bef6 	b.w	ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4174:	2000002c 	.word	0x2000002c
    4178:	40000c34 	.word	0x40000c34
    417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4180:	4c5c      	ldr	r4, [pc, #368]	; (42f4 <MPSL_IRQ_CLOCK_Handler+0x34c>)
    4182:	2600      	movs	r6, #0
    4184:	4605      	mov	r5, r0
    4186:	61a6      	str	r6, [r4, #24]
    4188:	7842      	ldrb	r2, [r0, #1]
    418a:	7881      	ldrb	r1, [r0, #2]
    418c:	7800      	ldrb	r0, [r0, #0]
    418e:	72e0      	strb	r0, [r4, #11]
    4190:	7162      	strb	r2, [r4, #5]
    4192:	71a1      	strb	r1, [r4, #6]
    4194:	2701      	movs	r7, #1
    4196:	71e6      	strb	r6, [r4, #7]
    4198:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    419c:	2805      	cmp	r0, #5
    419e:	d221      	bcs.n	41e4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    41a0:	e8df f000 	tbb	[pc, r0]
    41a4:	1c05030f 	.word	0x1c05030f
    41a8:	001e      	.short	0x001e
    41aa:	61a7      	str	r7, [r4, #24]
    41ac:	e009      	b.n	41c2 <MPSL_IRQ_CLOCK_Handler+0x21a>
    41ae:	f000 f8c7 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41b2:	2101      	movs	r1, #1
    41b4:	4648      	mov	r0, r9
    41b6:	f00b fe4d 	bl	fe54 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    41ba:	2800      	cmp	r0, #0
    41bc:	d0f9      	beq.n	41b2 <MPSL_IRQ_CLOCK_Handler+0x20a>
    41be:	2002      	movs	r0, #2
    41c0:	61a0      	str	r0, [r4, #24]
    41c2:	f00b fe73 	bl	feac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    41c6:	b198      	cbz	r0, 41f0 <MPSL_IRQ_CLOCK_Handler+0x248>
    41c8:	f000 fa06 	bl	45d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    41cc:	7e21      	ldrb	r1, [r4, #24]
    41ce:	f001 0103 	and.w	r1, r1, #3
    41d2:	4288      	cmp	r0, r1
    41d4:	d10c      	bne.n	41f0 <MPSL_IRQ_CLOCK_Handler+0x248>
    41d6:	79a8      	ldrb	r0, [r5, #6]
    41d8:	b138      	cbz	r0, 41ea <MPSL_IRQ_CLOCK_Handler+0x242>
    41da:	e06f      	b.n	42bc <MPSL_IRQ_CLOCK_Handler+0x314>
    41dc:	4846      	ldr	r0, [pc, #280]	; (42f8 <MPSL_IRQ_CLOCK_Handler+0x350>)
    41de:	e7ef      	b.n	41c0 <MPSL_IRQ_CLOCK_Handler+0x218>
    41e0:	4846      	ldr	r0, [pc, #280]	; (42fc <MPSL_IRQ_CLOCK_Handler+0x354>)
    41e2:	e7ed      	b.n	41c0 <MPSL_IRQ_CLOCK_Handler+0x218>
    41e4:	f44f 714c 	mov.w	r1, #816	; 0x330
    41e8:	e04e      	b.n	4288 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    41ea:	f000 f9c9 	bl	4580 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    41ee:	e065      	b.n	42bc <MPSL_IRQ_CLOCK_Handler+0x314>
    41f0:	46c8      	mov	r8, r9
    41f2:	f8c9 700c 	str.w	r7, [r9, #12]
    41f6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    41fa:	f8c9 6104 	str.w	r6, [r9, #260]	; 0x104
    41fe:	69a1      	ldr	r1, [r4, #24]
    4200:	f8c9 1518 	str.w	r1, [r9, #1304]	; 0x518
    4204:	f00b feb7 	bl	ff76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4208:	b940      	cbnz	r0, 421c <MPSL_IRQ_CLOCK_Handler+0x274>
    420a:	f00b febe 	bl	ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    420e:	b928      	cbnz	r0, 421c <MPSL_IRQ_CLOCK_Handler+0x274>
    4210:	f00b fed2 	bl	ffb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4214:	b910      	cbnz	r0, 421c <MPSL_IRQ_CLOCK_Handler+0x274>
    4216:	f00b fee3 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    421a:	b138      	cbz	r0, 422c <MPSL_IRQ_CLOCK_Handler+0x284>
    421c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4220:	4837      	ldr	r0, [pc, #220]	; (4300 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4222:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    4226:	f3c1 3142 	ubfx	r1, r1, #13, #3
    422a:	6001      	str	r1, [r0, #0]
    422c:	f00b fea3 	bl	ff76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4230:	b940      	cbnz	r0, 4244 <MPSL_IRQ_CLOCK_Handler+0x29c>
    4232:	f00b feaa 	bl	ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4236:	b928      	cbnz	r0, 4244 <MPSL_IRQ_CLOCK_Handler+0x29c>
    4238:	f00b febe 	bl	ffb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    423c:	b910      	cbnz	r0, 4244 <MPSL_IRQ_CLOCK_Handler+0x29c>
    423e:	f00b fecf 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4242:	b110      	cbz	r0, 424a <MPSL_IRQ_CLOCK_Handler+0x2a2>
    4244:	482e      	ldr	r0, [pc, #184]	; (4300 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4246:	3010      	adds	r0, #16
    4248:	6007      	str	r7, [r0, #0]
    424a:	4640      	mov	r0, r8
    424c:	f8c8 7008 	str.w	r7, [r8, #8]
    4250:	2102      	movs	r1, #2
    4252:	f8c8 1304 	str.w	r1, [r8, #772]	; 0x304
    4256:	79a9      	ldrb	r1, [r5, #6]
    4258:	bb81      	cbnz	r1, 42bc <MPSL_IRQ_CLOCK_Handler+0x314>
    425a:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    425e:	f011 0f02 	tst.w	r1, #2
    4262:	d00f      	beq.n	4284 <MPSL_IRQ_CLOCK_Handler+0x2dc>
    4264:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4304 <MPSL_IRQ_CLOCK_Handler+0x35c>
    4268:	f8d8 2000 	ldr.w	r2, [r8]
    426c:	43d2      	mvns	r2, r2
    426e:	f342 1700 	sbfx	r7, r2, #4, #1
    4272:	f8d8 2000 	ldr.w	r2, [r8]
    4276:	f042 0210 	orr.w	r2, r2, #16
    427a:	f8c8 2000 	str.w	r2, [r8]
    427e:	4681      	mov	r9, r0
    4280:	1c7f      	adds	r7, r7, #1
    4282:	e007      	b.n	4294 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    4284:	f240 21f1 	movw	r1, #753	; 0x2f1
    4288:	206d      	movs	r0, #109	; 0x6d
    428a:	f000 f9ef 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    428e:	bf00      	nop
    4290:	f000 fb12 	bl	48b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4294:	4651      	mov	r1, sl
    4296:	4648      	mov	r0, r9
    4298:	f00b fdd7 	bl	fe4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    429c:	2800      	cmp	r0, #0
    429e:	d0f7      	beq.n	4290 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    42a0:	f000 f96e 	bl	4580 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    42a4:	b92f      	cbnz	r7, 42b2 <MPSL_IRQ_CLOCK_Handler+0x30a>
    42a6:	f8d8 1000 	ldr.w	r1, [r8]
    42aa:	f021 0110 	bic.w	r1, r1, #16
    42ae:	f8c8 1000 	str.w	r1, [r8]
    42b2:	2102      	movs	r1, #2
    42b4:	f8c9 1308 	str.w	r1, [r9, #776]	; 0x308
    42b8:	f8c9 6104 	str.w	r6, [r9, #260]	; 0x104
    42bc:	79a0      	ldrb	r0, [r4, #6]
    42be:	b170      	cbz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x336>
    42c0:	7828      	ldrb	r0, [r5, #0]
    42c2:	b960      	cbnz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x336>
    42c4:	f000 f96e 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    42c8:	4605      	mov	r5, r0
    42ca:	f000 fa3f 	bl	474c <mpsl_temperature_get>
    42ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    42d2:	b115      	cbz	r5, 42da <MPSL_IRQ_CLOCK_Handler+0x332>
    42d4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    42d8:	e001      	b.n	42de <MPSL_IRQ_CLOCK_Handler+0x336>
    42da:	e9c4 0204 	strd	r0, r2, [r4, #16]
    42de:	2101      	movs	r1, #1
    42e0:	4648      	mov	r0, r9
    42e2:	f00b fdb7 	bl	fe54 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42e6:	b108      	cbz	r0, 42ec <MPSL_IRQ_CLOCK_Handler+0x344>
    42e8:	f000 f956 	bl	4598 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    42ec:	72a6      	strb	r6, [r4, #10]
    42ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42f2:	0000      	.short	0x0000
    42f4:	2000002c 	.word	0x2000002c
    42f8:	00020001 	.word	0x00020001
    42fc:	00030001 	.word	0x00030001
    4300:	4000053c 	.word	0x4000053c
    4304:	e000ed10 	.word	0xe000ed10

00004308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4308:	b510      	push	{r4, lr}
    430a:	f3ef 8410 	mrs	r4, PRIMASK
    430e:	b672      	cpsid	i
    4310:	480a      	ldr	r0, [pc, #40]	; (433c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4312:	7841      	ldrb	r1, [r0, #1]
    4314:	b129      	cbz	r1, 4322 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4316:	7841      	ldrb	r1, [r0, #1]
    4318:	1e49      	subs	r1, r1, #1
    431a:	7041      	strb	r1, [r0, #1]
    431c:	7841      	ldrb	r1, [r0, #1]
    431e:	b129      	cbz	r1, 432c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4320:	e008      	b.n	4334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4322:	f44f 7183 	mov.w	r1, #262	; 0x106
    4326:	206d      	movs	r0, #109	; 0x6d
    4328:	f000 f9a0 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    432c:	7880      	ldrb	r0, [r0, #2]
    432e:	b908      	cbnz	r0, 4334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4330:	f000 f946 	bl	45c0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4334:	2c00      	cmp	r4, #0
    4336:	d100      	bne.n	433a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4338:	b662      	cpsie	i
    433a:	bd10      	pop	{r4, pc}
    433c:	2000002c 	.word	0x2000002c

00004340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4340:	b510      	push	{r4, lr}
    4342:	f3ef 8410 	mrs	r4, PRIMASK
    4346:	b672      	cpsid	i
    4348:	4806      	ldr	r0, [pc, #24]	; (4364 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    434a:	7841      	ldrb	r1, [r0, #1]
    434c:	1c49      	adds	r1, r1, #1
    434e:	7041      	strb	r1, [r0, #1]
    4350:	7840      	ldrb	r0, [r0, #1]
    4352:	2801      	cmp	r0, #1
    4354:	d101      	bne.n	435a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4356:	f00b fd94 	bl	fe82 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    435a:	2c00      	cmp	r4, #0
    435c:	d100      	bne.n	4360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    435e:	b662      	cpsie	i
    4360:	bd10      	pop	{r4, pc}
    4362:	0000      	.short	0x0000
    4364:	2000002c 	.word	0x2000002c

00004368 <mpsl_clock_hfclk_release>:
    4368:	4805      	ldr	r0, [pc, #20]	; (4380 <mpsl_clock_hfclk_release+0x18>)
    436a:	b510      	push	{r4, lr}
    436c:	78c1      	ldrb	r1, [r0, #3]
    436e:	b121      	cbz	r1, 437a <mpsl_clock_hfclk_release+0x12>
    4370:	2100      	movs	r1, #0
    4372:	7101      	strb	r1, [r0, #4]
    4374:	70c1      	strb	r1, [r0, #3]
    4376:	f7ff ffc7 	bl	4308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    437a:	2000      	movs	r0, #0
    437c:	bd10      	pop	{r4, pc}
    437e:	0000      	.short	0x0000
    4380:	2000002c 	.word	0x2000002c

00004384 <mpsl_clock_hfclk_request>:
    4384:	b570      	push	{r4, r5, r6, lr}
    4386:	4c0c      	ldr	r4, [pc, #48]	; (43b8 <mpsl_clock_hfclk_request+0x34>)
    4388:	78e1      	ldrb	r1, [r4, #3]
    438a:	b961      	cbnz	r1, 43a6 <mpsl_clock_hfclk_request+0x22>
    438c:	2501      	movs	r5, #1
    438e:	70e5      	strb	r5, [r4, #3]
    4390:	61e0      	str	r0, [r4, #28]
    4392:	f7ff ffd5 	bl	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4396:	f000 f905 	bl	45a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    439a:	b130      	cbz	r0, 43aa <mpsl_clock_hfclk_request+0x26>
    439c:	69e0      	ldr	r0, [r4, #28]
    439e:	b110      	cbz	r0, 43a6 <mpsl_clock_hfclk_request+0x22>
    43a0:	4780      	blx	r0
    43a2:	2000      	movs	r0, #0
    43a4:	61e0      	str	r0, [r4, #28]
    43a6:	2000      	movs	r0, #0
    43a8:	bd70      	pop	{r4, r5, r6, pc}
    43aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    43ae:	7125      	strb	r5, [r4, #4]
    43b0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    43b4:	e7f7      	b.n	43a6 <mpsl_clock_hfclk_request+0x22>
    43b6:	0000      	.short	0x0000
    43b8:	2000002c 	.word	0x2000002c

000043bc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    43bc:	f3ef 8010 	mrs	r0, PRIMASK
    43c0:	b672      	cpsid	i
    43c2:	4904      	ldr	r1, [pc, #16]	; (43d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    43c4:	788a      	ldrb	r2, [r1, #2]
    43c6:	1c52      	adds	r2, r2, #1
    43c8:	708a      	strb	r2, [r1, #2]
    43ca:	2800      	cmp	r0, #0
    43cc:	d100      	bne.n	43d0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    43ce:	b662      	cpsie	i
    43d0:	4770      	bx	lr
    43d2:	0000      	.short	0x0000
    43d4:	2000002c 	.word	0x2000002c

000043d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    43d8:	b510      	push	{r4, lr}
    43da:	f3ef 8410 	mrs	r4, PRIMASK
    43de:	b672      	cpsid	i
    43e0:	480a      	ldr	r0, [pc, #40]	; (440c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    43e2:	7881      	ldrb	r1, [r0, #2]
    43e4:	b129      	cbz	r1, 43f2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    43e6:	7881      	ldrb	r1, [r0, #2]
    43e8:	1e49      	subs	r1, r1, #1
    43ea:	7081      	strb	r1, [r0, #2]
    43ec:	7841      	ldrb	r1, [r0, #1]
    43ee:	b129      	cbz	r1, 43fc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    43f0:	e008      	b.n	4404 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    43f2:	f44f 7195 	mov.w	r1, #298	; 0x12a
    43f6:	206d      	movs	r0, #109	; 0x6d
    43f8:	f000 f938 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43fc:	7880      	ldrb	r0, [r0, #2]
    43fe:	b908      	cbnz	r0, 4404 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4400:	f000 f8de 	bl	45c0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4404:	2c00      	cmp	r4, #0
    4406:	d100      	bne.n	440a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4408:	b662      	cpsie	i
    440a:	bd10      	pop	{r4, pc}
    440c:	2000002c 	.word	0x2000002c

00004410 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4414:	0004      	movs	r4, r0
    4416:	f06f 0015 	mvn.w	r0, #21
    441a:	d03c      	beq.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    441c:	7821      	ldrb	r1, [r4, #0]
    441e:	2904      	cmp	r1, #4
    4420:	d839      	bhi.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4422:	2900      	cmp	r1, #0
    4424:	7861      	ldrb	r1, [r4, #1]
    4426:	d038      	beq.n	449a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4428:	2900      	cmp	r1, #0
    442a:	d134      	bne.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    442c:	78a1      	ldrb	r1, [r4, #2]
    442e:	2900      	cmp	r1, #0
    4430:	d131      	bne.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4432:	2000      	movs	r0, #0
    4434:	f00b fcd4 	bl	fde0 <MPSL_IRQ_RADIO_Handler+0x1e>
    4438:	2000      	movs	r0, #0
    443a:	f00b fcc4 	bl	fdc6 <MPSL_IRQ_RADIO_Handler+0x4>
    443e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4446:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    444a:	2600      	movs	r6, #0
    444c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4450:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4454:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4458:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    445c:	4f14      	ldr	r7, [pc, #80]	; (44b0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    445e:	707e      	strb	r6, [r7, #1]
    4460:	88a0      	ldrh	r0, [r4, #4]
    4462:	81b8      	strh	r0, [r7, #12]
    4464:	f00b fd04 	bl	fe70 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4468:	2501      	movs	r5, #1
    446a:	b108      	cbz	r0, 4470 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    446c:	70fd      	strb	r5, [r7, #3]
    446e:	707d      	strb	r5, [r7, #1]
    4470:	2101      	movs	r1, #1
    4472:	4640      	mov	r0, r8
    4474:	f00b fcee 	bl	fe54 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4478:	b108      	cbz	r0, 447e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    447a:	f000 f88d 	bl	4598 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    447e:	4620      	mov	r0, r4
    4480:	f7ff fe7c 	bl	417c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4484:	727d      	strb	r5, [r7, #9]
    4486:	2000      	movs	r0, #0
    4488:	f00b fc9d 	bl	fdc6 <MPSL_IRQ_RADIO_Handler+0x4>
    448c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4490:	4630      	mov	r0, r6
    4492:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    4496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    449a:	2900      	cmp	r1, #0
    449c:	d0fb      	beq.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    449e:	2920      	cmp	r1, #32
    44a0:	d8f9      	bhi.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44a2:	78a1      	ldrb	r1, [r4, #2]
    44a4:	2921      	cmp	r1, #33	; 0x21
    44a6:	d8f6      	bhi.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44a8:	2901      	cmp	r1, #1
    44aa:	d1c2      	bne.n	4432 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    44ac:	e7f3      	b.n	4496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44ae:	0000      	.short	0x0000
    44b0:	2000002c 	.word	0x2000002c

000044b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    44b4:	4801      	ldr	r0, [pc, #4]	; (44bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    44b6:	8980      	ldrh	r0, [r0, #12]
    44b8:	4770      	bx	lr
    44ba:	0000      	.short	0x0000
    44bc:	2000002c 	.word	0x2000002c

000044c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    44c0:	b510      	push	{r4, lr}
    44c2:	480d      	ldr	r0, [pc, #52]	; (44f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    44c4:	f00b fd35 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    44c8:	490b      	ldr	r1, [pc, #44]	; (44f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    44ca:	3908      	subs	r1, #8
    44cc:	b148      	cbz	r0, 44e2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    44ce:	2001      	movs	r0, #1
    44d0:	7008      	strb	r0, [r1, #0]
    44d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    44d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    44da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44de:	f7ff bf2f 	b.w	4340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44e2:	7a88      	ldrb	r0, [r1, #10]
    44e4:	2801      	cmp	r0, #1
    44e6:	d101      	bne.n	44ec <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    44e8:	f7ff fda2 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    44ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44f0:	4801      	ldr	r0, [pc, #4]	; (44f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    44f2:	f00b bd35 	b.w	ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    44f6:	0000      	.short	0x0000
    44f8:	20000034 	.word	0x20000034

000044fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    44fc:	4802      	ldr	r0, [pc, #8]	; (4508 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    44fe:	7a80      	ldrb	r0, [r0, #10]
    4500:	2800      	cmp	r0, #0
    4502:	d000      	beq.n	4506 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4504:	2001      	movs	r0, #1
    4506:	4770      	bx	lr
    4508:	2000002c 	.word	0x2000002c

0000450c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    450e:	4d1b      	ldr	r5, [pc, #108]	; (457c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
    4510:	7ae8      	ldrb	r0, [r5, #11]
    4512:	2800      	cmp	r0, #0
    4514:	d131      	bne.n	457a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    4516:	7e28      	ldrb	r0, [r5, #24]
    4518:	f000 0003 	and.w	r0, r0, #3
    451c:	f00b fcb6 	bl	fe8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4520:	2800      	cmp	r0, #0
    4522:	d02a      	beq.n	457a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    4524:	f7ff ffea 	bl	44fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4528:	2800      	cmp	r0, #0
    452a:	d126      	bne.n	457a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    452c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4530:	2018      	movs	r0, #24
    4532:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4536:	2601      	movs	r6, #1
    4538:	61a6      	str	r6, [r4, #24]
    453a:	f44f 7020 	mov.w	r0, #640	; 0x280
    453e:	f8ad 0000 	strh.w	r0, [sp]
    4542:	bf00      	nop
    4544:	f8bd 0000 	ldrh.w	r0, [sp]
    4548:	1e41      	subs	r1, r0, #1
    454a:	f8ad 1000 	strh.w	r1, [sp]
    454e:	d2f9      	bcs.n	4544 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x38>
    4550:	2700      	movs	r7, #0
    4552:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4556:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    455a:	4808      	ldr	r0, [pc, #32]	; (457c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
    455c:	3008      	adds	r0, #8
    455e:	f00b fcfb 	bl	ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4562:	702f      	strb	r7, [r5, #0]
    4564:	f7ff fd64 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    4568:	6166      	str	r6, [r4, #20]
    456a:	7968      	ldrb	r0, [r5, #5]
    456c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4570:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4574:	2018      	movs	r0, #24
    4576:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    457c:	2000002c 	.word	0x2000002c

00004580 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4580:	b510      	push	{r4, lr}
    4582:	4c04      	ldr	r4, [pc, #16]	; (4594 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4584:	7e20      	ldrb	r0, [r4, #24]
    4586:	f000 0003 	and.w	r0, r0, #3
    458a:	f00b fc7f 	bl	fe8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    458e:	2800      	cmp	r0, #0
    4590:	d0f8      	beq.n	4584 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4592:	bd10      	pop	{r4, pc}
    4594:	2000002c 	.word	0x2000002c

00004598 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4598:	4901      	ldr	r1, [pc, #4]	; (45a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    459a:	2001      	movs	r0, #1
    459c:	7008      	strb	r0, [r1, #0]
    459e:	4770      	bx	lr
    45a0:	200003a8 	.word	0x200003a8

000045a4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    45a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    45a8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    45ac:	b918      	cbnz	r0, 45b6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    45ae:	4803      	ldr	r0, [pc, #12]	; (45bc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    45b0:	7800      	ldrb	r0, [r0, #0]
    45b2:	2800      	cmp	r0, #0
    45b4:	d000      	beq.n	45b8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    45b6:	2001      	movs	r0, #1
    45b8:	4770      	bx	lr
    45ba:	0000      	.short	0x0000
    45bc:	200003a8 	.word	0x200003a8

000045c0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    45c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    45c4:	2101      	movs	r1, #1
    45c6:	6041      	str	r1, [r0, #4]
    45c8:	2100      	movs	r1, #0
    45ca:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    45ce:	4801      	ldr	r0, [pc, #4]	; (45d4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    45d0:	7001      	strb	r1, [r0, #0]
    45d2:	4770      	bx	lr
    45d4:	200003a8 	.word	0x200003a8

000045d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    45d8:	4802      	ldr	r0, [pc, #8]	; (45e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    45da:	6800      	ldr	r0, [r0, #0]
    45dc:	f000 0003 	and.w	r0, r0, #3
    45e0:	4770      	bx	lr
    45e2:	0000      	.short	0x0000
    45e4:	4000041c 	.word	0x4000041c
    45e8:	b510      	push	{r4, lr}
    45ea:	b131      	cbz	r1, 45fa <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    45ec:	2901      	cmp	r1, #1
    45ee:	d007      	beq.n	4600 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    45f0:	f44f 7142 	mov.w	r1, #776	; 0x308
    45f4:	a005      	add	r0, pc, #20	; (adr r0, 460c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    45f6:	f000 f80f 	bl	4618 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    45fa:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    45fe:	e001      	b.n	4604 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4600:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4604:	f000 0001 	and.w	r0, r0, #1
    4608:	bd10      	pop	{r4, pc}
    460a:	0000      	.short	0x0000
    460c:	5f66726e 	.word	0x5f66726e
    4610:	636f6c63 	.word	0x636f6c63
    4614:	00682e6b 	.word	0x00682e6b

00004618 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4618:	4a02      	ldr	r2, [pc, #8]	; (4624 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    461a:	6852      	ldr	r2, [r2, #4]
    461c:	b102      	cbz	r2, 4620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    461e:	4710      	bx	r2
    4620:	e7fe      	b.n	4620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4622:	0000      	.short	0x0000
    4624:	2000004c 	.word	0x2000004c
    4628:	4806      	ldr	r0, [pc, #24]	; (4644 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    462a:	b510      	push	{r4, lr}
    462c:	2100      	movs	r1, #0
    462e:	6001      	str	r1, [r0, #0]
    4630:	2101      	movs	r1, #1
    4632:	6001      	str	r1, [r0, #0]
    4634:	4608      	mov	r0, r1
    4636:	f00b fc50 	bl	feda <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    463e:	2001      	movs	r0, #1
    4640:	f00b bc3e 	b.w	fec0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4644:	40001ffc 	.word	0x40001ffc
    4648:	4807      	ldr	r0, [pc, #28]	; (4668 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    464a:	b510      	push	{r4, lr}
    464c:	2101      	movs	r1, #1
    464e:	6041      	str	r1, [r0, #4]
    4650:	1e89      	subs	r1, r1, #2
    4652:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4656:	200c      	movs	r0, #12
    4658:	f00b fc3f 	bl	feda <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4660:	200c      	movs	r0, #12
    4662:	f00b bc2d 	b.w	fec0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4666:	0000      	.short	0x0000
    4668:	4000c000 	.word	0x4000c000

0000466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    466c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    466e:	4a10      	ldr	r2, [pc, #64]	; (46b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4670:	6855      	ldr	r5, [r2, #4]
    4672:	b1e5      	cbz	r5, 46ae <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4674:	2200      	movs	r2, #0
    4676:	4603      	mov	r3, r0
    4678:	466e      	mov	r6, sp
    467a:	240a      	movs	r4, #10
    467c:	e003      	b.n	4686 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    467e:	fbb0 f0f4 	udiv	r0, r0, r4
    4682:	1c52      	adds	r2, r2, #1
    4684:	b2d2      	uxtb	r2, r2
    4686:	2800      	cmp	r0, #0
    4688:	d1f9      	bne.n	467e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    468a:	54b0      	strb	r0, [r6, r2]
    468c:	e00a      	b.n	46a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    468e:	bf00      	nop
    4690:	fbb3 f0f4 	udiv	r0, r3, r4
    4694:	fb04 3010 	mls	r0, r4, r0, r3
    4698:	fbb3 f3f4 	udiv	r3, r3, r4
    469c:	1e52      	subs	r2, r2, #1
    469e:	b2d2      	uxtb	r2, r2
    46a0:	3030      	adds	r0, #48	; 0x30
    46a2:	54b0      	strb	r0, [r6, r2]
    46a4:	2a00      	cmp	r2, #0
    46a6:	d1f3      	bne.n	4690 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    46a8:	4630      	mov	r0, r6
    46aa:	47a8      	blx	r5
    46ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    46ae:	e7fe      	b.n	46ae <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    46b0:	2000004c 	.word	0x2000004c

000046b4 <mpsl_init>:
    46b4:	b570      	push	{r4, r5, r6, lr}
    46b6:	4c17      	ldr	r4, [pc, #92]	; (4714 <mpsl_init+0x60>)
    46b8:	4606      	mov	r6, r0
    46ba:	460d      	mov	r5, r1
    46bc:	7860      	ldrb	r0, [r4, #1]
    46be:	b110      	cbz	r0, 46c6 <mpsl_init+0x12>
    46c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	b906      	cbnz	r6, 46ca <mpsl_init+0x16>
    46c8:	4e13      	ldr	r6, [pc, #76]	; (4718 <mpsl_init+0x64>)
    46ca:	6062      	str	r2, [r4, #4]
    46cc:	7025      	strb	r5, [r4, #0]
    46ce:	f7ff ffab 	bl	4628 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    46d2:	f7ff ffb9 	bl	4648 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    46d6:	4630      	mov	r0, r6
    46d8:	f7ff fe9a 	bl	4410 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    46dc:	0006      	movs	r6, r0
    46de:	d1f1      	bne.n	46c4 <mpsl_init+0x10>
    46e0:	f7fe ff54 	bl	358c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    46e4:	f7ff ff12 	bl	450c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    46e8:	f00b fb44 	bl	fd74 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    46ec:	4628      	mov	r0, r5
    46ee:	f00b fbe7 	bl	fec0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    46f2:	2001      	movs	r0, #1
    46f4:	2d00      	cmp	r5, #0
    46f6:	db09      	blt.n	470c <mpsl_init+0x58>
    46f8:	f005 011f 	and.w	r1, r5, #31
    46fc:	fa00 f101 	lsl.w	r1, r0, r1
    4700:	096a      	lsrs	r2, r5, #5
    4702:	0092      	lsls	r2, r2, #2
    4704:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4708:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    470c:	7060      	strb	r0, [r4, #1]
    470e:	4630      	mov	r0, r6
    4710:	bd70      	pop	{r4, r5, r6, pc}
    4712:	0000      	.short	0x0000
    4714:	2000004c 	.word	0x2000004c
    4718:	0000fefc 	.word	0x0000fefc

0000471c <mpsl_is_initialized>:
    471c:	4801      	ldr	r0, [pc, #4]	; (4724 <mpsl_is_initialized+0x8>)
    471e:	7840      	ldrb	r0, [r0, #1]
    4720:	4770      	bx	lr
    4722:	0000      	.short	0x0000
    4724:	2000004c 	.word	0x2000004c

00004728 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4728:	4807      	ldr	r0, [pc, #28]	; (4748 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    472a:	f990 0000 	ldrsb.w	r0, [r0]
    472e:	2800      	cmp	r0, #0
    4730:	db09      	blt.n	4746 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4732:	f000 021f 	and.w	r2, r0, #31
    4736:	2101      	movs	r1, #1
    4738:	4091      	lsls	r1, r2
    473a:	0940      	lsrs	r0, r0, #5
    473c:	0080      	lsls	r0, r0, #2
    473e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4742:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4746:	4770      	bx	lr
    4748:	2000004c 	.word	0x2000004c

0000474c <mpsl_temperature_get>:
    474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4750:	2601      	movs	r6, #1
    4752:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4756:	0331      	lsls	r1, r6, #12
    4758:	f04f 0800 	mov.w	r8, #0
    475c:	4640      	mov	r0, r8
    475e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4762:	f3bf 8f4f 	dsb	sy
    4766:	f3bf 8f6f 	isb	sy
    476a:	4c16      	ldr	r4, [pc, #88]	; (47c4 <mpsl_temperature_get+0x78>)
    476c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4770:	200c      	movs	r0, #12
    4772:	f00b fbd1 	bl	ff18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4776:	4d14      	ldr	r5, [pc, #80]	; (47c8 <mpsl_temperature_get+0x7c>)
    4778:	6828      	ldr	r0, [r5, #0]
    477a:	43c0      	mvns	r0, r0
    477c:	f340 1700 	sbfx	r7, r0, #4, #1
    4780:	6828      	ldr	r0, [r5, #0]
    4782:	f040 0010 	orr.w	r0, r0, #16
    4786:	6028      	str	r0, [r5, #0]
    4788:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    478c:	6026      	str	r6, [r4, #0]
    478e:	1c7f      	adds	r7, r7, #1
    4790:	e002      	b.n	4798 <mpsl_temperature_get+0x4c>
    4792:	bf00      	nop
    4794:	f000 f890 	bl	48b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4798:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    479c:	2800      	cmp	r0, #0
    479e:	d0f9      	beq.n	4794 <mpsl_temperature_get+0x48>
    47a0:	b91f      	cbnz	r7, 47aa <mpsl_temperature_get+0x5e>
    47a2:	6828      	ldr	r0, [r5, #0]
    47a4:	f020 0010 	bic.w	r0, r0, #16
    47a8:	6028      	str	r0, [r5, #0]
    47aa:	4808      	ldr	r0, [pc, #32]	; (47cc <mpsl_temperature_get+0x80>)
    47ac:	6805      	ldr	r5, [r0, #0]
    47ae:	6066      	str	r6, [r4, #4]
    47b0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    47b4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    47b8:	200c      	movs	r0, #12
    47ba:	f00b fbad 	bl	ff18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    47be:	4628      	mov	r0, r5
    47c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47c4:	4000c000 	.word	0x4000c000
    47c8:	e000ed10 	.word	0xe000ed10
    47cc:	4000c508 	.word	0x4000c508

000047d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    47d0:	b510      	push	{r4, lr}
    47d2:	4602      	mov	r2, r0
    47d4:	2005      	movs	r0, #5
    47d6:	490c      	ldr	r1, [pc, #48]	; (4808 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    47d8:	e004      	b.n	47e4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    47da:	bf00      	nop
    47dc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    47e0:	791b      	ldrb	r3, [r3, #4]
    47e2:	b133      	cbz	r3, 47f2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    47e4:	1e40      	subs	r0, r0, #1
    47e6:	b2c0      	uxtb	r0, r0
    47e8:	d2f8      	bcs.n	47dc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    47ea:	214b      	movs	r1, #75	; 0x4b
    47ec:	2069      	movs	r0, #105	; 0x69
    47ee:	f7ff ff3d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47f2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    47f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    47fa:	2200      	movs	r2, #0
    47fc:	714a      	strb	r2, [r1, #5]
    47fe:	718a      	strb	r2, [r1, #6]
    4800:	2201      	movs	r2, #1
    4802:	710a      	strb	r2, [r1, #4]
    4804:	bd10      	pop	{r4, pc}
    4806:	0000      	.short	0x0000
    4808:	20000f40 	.word	0x20000f40

0000480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    480c:	b510      	push	{r4, lr}
    480e:	2805      	cmp	r0, #5
    4810:	d301      	bcc.n	4816 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4812:	215a      	movs	r1, #90	; 0x5a
    4814:	e006      	b.n	4824 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4816:	490a      	ldr	r1, [pc, #40]	; (4840 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4818:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    481c:	7901      	ldrb	r1, [r0, #4]
    481e:	2901      	cmp	r1, #1
    4820:	d003      	beq.n	482a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4822:	215b      	movs	r1, #91	; 0x5b
    4824:	2069      	movs	r0, #105	; 0x69
    4826:	f7ff ff21 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    482a:	7941      	ldrb	r1, [r0, #5]
    482c:	7982      	ldrb	r2, [r0, #6]
    482e:	1c49      	adds	r1, r1, #1
    4830:	b2c9      	uxtb	r1, r1
    4832:	428a      	cmp	r2, r1
    4834:	d000      	beq.n	4838 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4836:	7141      	strb	r1, [r0, #5]
    4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    483c:	f7ff bf74 	b.w	4728 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4840:	20000f40 	.word	0x20000f40

00004844 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4844:	b570      	push	{r4, r5, r6, lr}
    4846:	2505      	movs	r5, #5
    4848:	4e0e      	ldr	r6, [pc, #56]	; (4884 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    484a:	4c0f      	ldr	r4, [pc, #60]	; (4888 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    484c:	e016      	b.n	487c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    484e:	7821      	ldrb	r1, [r4, #0]
    4850:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4854:	7902      	ldrb	r2, [r0, #4]
    4856:	2a01      	cmp	r2, #1
    4858:	d108      	bne.n	486c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    485a:	7942      	ldrb	r2, [r0, #5]
    485c:	7983      	ldrb	r3, [r0, #6]
    485e:	429a      	cmp	r2, r3
    4860:	d004      	beq.n	486c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4862:	7942      	ldrb	r2, [r0, #5]
    4864:	7182      	strb	r2, [r0, #6]
    4866:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    486a:	4780      	blx	r0
    486c:	7820      	ldrb	r0, [r4, #0]
    486e:	1c40      	adds	r0, r0, #1
    4870:	b2c0      	uxtb	r0, r0
    4872:	7020      	strb	r0, [r4, #0]
    4874:	2805      	cmp	r0, #5
    4876:	d301      	bcc.n	487c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4878:	2000      	movs	r0, #0
    487a:	7020      	strb	r0, [r4, #0]
    487c:	1e6d      	subs	r5, r5, #1
    487e:	b2ed      	uxtb	r5, r5
    4880:	d2e5      	bcs.n	484e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4882:	bd70      	pop	{r4, r5, r6, pc}
    4884:	20000f40 	.word	0x20000f40
    4888:	200003a9 	.word	0x200003a9

0000488c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    488c:	b500      	push	{lr}
    488e:	f00b fb72 	bl	ff76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4892:	b940      	cbnz	r0, 48a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4894:	f00b fb79 	bl	ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4898:	b928      	cbnz	r0, 48a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    489a:	f00b fb8d 	bl	ffb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    489e:	b910      	cbnz	r0, 48a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    48a0:	f00b fb9e 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    48a4:	b108      	cbz	r0, 48aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    48a6:	4802      	ldr	r0, [pc, #8]	; (48b0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    48a8:	bd00      	pop	{pc}
    48aa:	4802      	ldr	r0, [pc, #8]	; (48b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    48ac:	bd00      	pop	{pc}
    48ae:	0000      	.short	0x0000
    48b0:	4000050c 	.word	0x4000050c
    48b4:	4001e700 	.word	0x4001e700

000048b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    48b8:	b510      	push	{r4, lr}
    48ba:	f00b fb91 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    48be:	b330      	cbz	r0, 490e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    48c0:	f3ef 8010 	mrs	r0, PRIMASK
    48c4:	b1c8      	cbz	r0, 48fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    48c6:	2100      	movs	r1, #0
    48c8:	b672      	cpsid	i
    48ca:	4812      	ldr	r0, [pc, #72]	; (4914 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    48cc:	6802      	ldr	r2, [r0, #0]
    48ce:	6803      	ldr	r3, [r0, #0]
    48d0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    48d4:	f043 0310 	orr.w	r3, r3, #16
    48d8:	6003      	str	r3, [r0, #0]
    48da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48de:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    48e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    48e6:	431c      	orrs	r4, r3
    48e8:	d000      	beq.n	48ec <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    48ea:	bf40      	sev
    48ec:	bf20      	wfe
    48ee:	bf00      	nop
    48f0:	bf00      	nop
    48f2:	bf00      	nop
    48f4:	bf00      	nop
    48f6:	b112      	cbz	r2, 48fe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    48f8:	e005      	b.n	4906 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    48fa:	2101      	movs	r1, #1
    48fc:	e7e4      	b.n	48c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    48fe:	6802      	ldr	r2, [r0, #0]
    4900:	f022 0210 	bic.w	r2, r2, #16
    4904:	6002      	str	r2, [r0, #0]
    4906:	2900      	cmp	r1, #0
    4908:	d000      	beq.n	490c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    490a:	b662      	cpsie	i
    490c:	bd10      	pop	{r4, pc}
    490e:	bf20      	wfe
    4910:	bd10      	pop	{r4, pc}
    4912:	0000      	.short	0x0000
    4914:	e000ed10 	.word	0xe000ed10

00004918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    4918:	b510      	push	{r4, lr}
    491a:	ea80 0401 	eor.w	r4, r0, r1
    491e:	4603      	mov	r3, r0
    4920:	07a4      	lsls	r4, r4, #30
    4922:	d007      	beq.n	4934 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    4924:	e015      	b.n	4952 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    4926:	2a00      	cmp	r2, #0
    4928:	d015      	beq.n	4956 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    492a:	f811 4b01 	ldrb.w	r4, [r1], #1
    492e:	f803 4b01 	strb.w	r4, [r3], #1
    4932:	1e52      	subs	r2, r2, #1
    4934:	079c      	lsls	r4, r3, #30
    4936:	d1f6      	bne.n	4926 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    4938:	e002      	b.n	4940 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    493a:	c910      	ldmia	r1!, {r4}
    493c:	1f12      	subs	r2, r2, #4
    493e:	c310      	stmia	r3!, {r4}
    4940:	2a04      	cmp	r2, #4
    4942:	d2fa      	bcs.n	493a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    4944:	e005      	b.n	4952 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    4946:	bf00      	nop
    4948:	f811 4b01 	ldrb.w	r4, [r1], #1
    494c:	f803 4b01 	strb.w	r4, [r3], #1
    4950:	1e52      	subs	r2, r2, #1
    4952:	2a00      	cmp	r2, #0
    4954:	d1f8      	bne.n	4948 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    4956:	bd10      	pop	{r4, pc}
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	4c0e      	ldr	r4, [pc, #56]	; (4994 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    495c:	7860      	ldrb	r0, [r4, #1]
    495e:	2800      	cmp	r0, #0
    4960:	d117      	bne.n	4992 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    4962:	7820      	ldrb	r0, [r4, #0]
    4964:	2500      	movs	r5, #0
    4966:	2801      	cmp	r0, #1
    4968:	d106      	bne.n	4978 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    496a:	2002      	movs	r0, #2
    496c:	7020      	strb	r0, [r4, #0]
    496e:	68a0      	ldr	r0, [r4, #8]
    4970:	b110      	cbz	r0, 4978 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    4972:	68a0      	ldr	r0, [r4, #8]
    4974:	4780      	blx	r0
    4976:	60a5      	str	r5, [r4, #8]
    4978:	7820      	ldrb	r0, [r4, #0]
    497a:	2803      	cmp	r0, #3
    497c:	d109      	bne.n	4992 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    497e:	7025      	strb	r5, [r4, #0]
    4980:	68a0      	ldr	r0, [r4, #8]
    4982:	2800      	cmp	r0, #0
    4984:	d005      	beq.n	4992 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    4986:	6860      	ldr	r0, [r4, #4]
    4988:	6940      	ldr	r0, [r0, #20]
    498a:	4780      	blx	r0
    498c:	68a0      	ldr	r0, [r4, #8]
    498e:	4780      	blx	r0
    4990:	60a5      	str	r5, [r4, #8]
    4992:	bd70      	pop	{r4, r5, r6, pc}
    4994:	20000054 	.word	0x20000054

00004998 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    4998:	b510      	push	{r4, lr}
    499a:	4c08      	ldr	r4, [pc, #32]	; (49bc <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    499c:	7820      	ldrb	r0, [r4, #0]
    499e:	2802      	cmp	r0, #2
    49a0:	d002      	beq.n	49a8 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    49a2:	7820      	ldrb	r0, [r4, #0]
    49a4:	2803      	cmp	r0, #3
    49a6:	d102      	bne.n	49ae <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    49a8:	6860      	ldr	r0, [r4, #4]
    49aa:	6880      	ldr	r0, [r0, #8]
    49ac:	4780      	blx	r0
    49ae:	2000      	movs	r0, #0
    49b0:	7060      	strb	r0, [r4, #1]
    49b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49b6:	f7ff bfcf 	b.w	4958 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    49ba:	0000      	.short	0x0000
    49bc:	20000054 	.word	0x20000054

000049c0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    49c0:	b538      	push	{r3, r4, r5, lr}
    49c2:	4604      	mov	r4, r0
    49c4:	2805      	cmp	r0, #5
    49c6:	d304      	bcc.n	49d2 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    49c8:	f44f 7189 	mov.w	r1, #274	; 0x112
    49cc:	2068      	movs	r0, #104	; 0x68
    49ce:	f7ff fe4d 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49d2:	f7ff ffc1 	bl	4958 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    49d6:	4d0e      	ldr	r5, [pc, #56]	; (4a10 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    49d8:	2001      	movs	r0, #1
    49da:	7068      	strb	r0, [r5, #1]
    49dc:	7828      	ldrb	r0, [r5, #0]
    49de:	2802      	cmp	r0, #2
    49e0:	d115      	bne.n	4a0e <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    49e2:	6868      	ldr	r0, [r5, #4]
    49e4:	68c1      	ldr	r1, [r0, #12]
    49e6:	4620      	mov	r0, r4
    49e8:	4788      	blx	r1
    49ea:	490a      	ldr	r1, [pc, #40]	; (4a14 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    49ec:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    49f0:	7852      	ldrb	r2, [r2, #1]
    49f2:	4282      	cmp	r2, r0
    49f4:	d201      	bcs.n	49fa <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    49f6:	2001      	movs	r0, #1
    49f8:	e001      	b.n	49fe <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    49fa:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    49fe:	f88d 0000 	strb.w	r0, [sp]
    4a02:	f88d 4001 	strb.w	r4, [sp, #1]
    4a06:	6868      	ldr	r0, [r5, #4]
    4a08:	6801      	ldr	r1, [r0, #0]
    4a0a:	4668      	mov	r0, sp
    4a0c:	4788      	blx	r1
    4a0e:	bd38      	pop	{r3, r4, r5, pc}
    4a10:	20000054 	.word	0x20000054
    4a14:	20001956 	.word	0x20001956

00004a18 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    4a18:	4905      	ldr	r1, [pc, #20]	; (4a30 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    4a1a:	780a      	ldrb	r2, [r1, #0]
    4a1c:	2a02      	cmp	r2, #2
    4a1e:	d004      	beq.n	4a2a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    4a20:	780a      	ldrb	r2, [r1, #0]
    4a22:	2a03      	cmp	r2, #3
    4a24:	d001      	beq.n	4a2a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    4a26:	2000      	movs	r0, #0
    4a28:	4770      	bx	lr
    4a2a:	6849      	ldr	r1, [r1, #4]
    4a2c:	6909      	ldr	r1, [r1, #16]
    4a2e:	4708      	bx	r1
    4a30:	20000054 	.word	0x20000054

00004a34 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    4a34:	b510      	push	{r4, lr}
    4a36:	b158      	cbz	r0, 4a50 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    4a38:	4908      	ldr	r1, [pc, #32]	; (4a5c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    4a3a:	780a      	ldrb	r2, [r1, #0]
    4a3c:	2a02      	cmp	r2, #2
    4a3e:	d002      	beq.n	4a46 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    4a40:	780a      	ldrb	r2, [r1, #0]
    4a42:	2a03      	cmp	r2, #3
    4a44:	d109      	bne.n	4a5a <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    4a46:	6849      	ldr	r1, [r1, #4]
    4a48:	6849      	ldr	r1, [r1, #4]
    4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a4e:	4708      	bx	r1
    4a50:	f240 1127 	movw	r1, #295	; 0x127
    4a54:	2068      	movs	r0, #104	; 0x68
    4a56:	f7ff fe09 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	20000054 	.word	0x20000054

00004a60 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    4a60:	4805      	ldr	r0, [pc, #20]	; (4a78 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    4a62:	7801      	ldrb	r1, [r0, #0]
    4a64:	2902      	cmp	r1, #2
    4a66:	d004      	beq.n	4a72 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    4a68:	7801      	ldrb	r1, [r0, #0]
    4a6a:	2903      	cmp	r1, #3
    4a6c:	d001      	beq.n	4a72 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    4a6e:	2000      	movs	r0, #0
    4a70:	4770      	bx	lr
    4a72:	6840      	ldr	r0, [r0, #4]
    4a74:	6980      	ldr	r0, [r0, #24]
    4a76:	4700      	bx	r0
    4a78:	20000054 	.word	0x20000054
    4a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a7e:	4c18      	ldr	r4, [pc, #96]	; (4ae0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    4a80:	7960      	ldrb	r0, [r4, #5]
    4a82:	2803      	cmp	r0, #3
    4a84:	d203      	bcs.n	4a8e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    4a86:	bf00      	nop
    4a88:	f04f 0103 	mov.w	r1, #3
    4a8c:	e000      	b.n	4a90 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    4a8e:	4601      	mov	r1, r0
    4a90:	f88d 1001 	strb.w	r1, [sp, #1]
    4a94:	d201      	bcs.n	4a9a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    4a96:	f04f 0003 	mov.w	r0, #3
    4a9a:	f88d 0000 	strb.w	r0, [sp]
    4a9e:	78e0      	ldrb	r0, [r4, #3]
    4aa0:	f8ad 0004 	strh.w	r0, [sp, #4]
    4aa4:	78a0      	ldrb	r0, [r4, #2]
    4aa6:	f8ad 0002 	strh.w	r0, [sp, #2]
    4aaa:	4668      	mov	r0, sp
    4aac:	f008 ff08 	bl	d8c0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4ab0:	b108      	cbz	r0, 4ab6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    4ab2:	219c      	movs	r1, #156	; 0x9c
    4ab4:	e010      	b.n	4ad8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    4ab6:	68a0      	ldr	r0, [r4, #8]
    4ab8:	9002      	str	r0, [sp, #8]
    4aba:	a802      	add	r0, sp, #8
    4abc:	f008 ff18 	bl	d8f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4ac0:	b108      	cbz	r0, 4ac6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    4ac2:	21a0      	movs	r1, #160	; 0xa0
    4ac4:	e008      	b.n	4ad8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    4ac6:	4807      	ldr	r0, [pc, #28]	; (4ae4 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    4ac8:	6800      	ldr	r0, [r0, #0]
    4aca:	9003      	str	r0, [sp, #12]
    4acc:	a803      	add	r0, sp, #12
    4ace:	f00e f90a 	bl	12ce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d003      	beq.n	4ade <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    4ad6:	21a4      	movs	r1, #164	; 0xa4
    4ad8:	2003      	movs	r0, #3
    4ada:	f000 f8a9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ade:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4ae0:	2000006c 	.word	0x2000006c
    4ae4:	00004d24 	.word	0x00004d24

00004ae8 <sdc_build_revision_get>:
    4ae8:	b510      	push	{r4, lr}
    4aea:	b128      	cbz	r0, 4af8 <sdc_build_revision_get+0x10>
    4aec:	2214      	movs	r2, #20
    4aee:	4904      	ldr	r1, [pc, #16]	; (4b00 <sdc_build_revision_get+0x18>)
    4af0:	f7ff ff12 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4af4:	2000      	movs	r0, #0
    4af6:	bd10      	pop	{r4, pc}
    4af8:	f06f 0015 	mvn.w	r0, #21
    4afc:	bd10      	pop	{r4, pc}
    4afe:	0000      	.short	0x0000
    4b00:	00004d56 	.word	0x00004d56

00004b04 <sdc_cfg_set>:
    4b04:	b510      	push	{r4, lr}
    4b06:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    4b0a:	bb18      	cbnz	r0, 4b54 <sdc_cfg_set+0x50>
    4b0c:	b1c9      	cbz	r1, 4b42 <sdc_cfg_set+0x3e>
    4b0e:	b14a      	cbz	r2, 4b24 <sdc_cfg_set+0x20>
    4b10:	4b11      	ldr	r3, [pc, #68]	; (4b58 <sdc_cfg_set+0x54>)
    4b12:	2901      	cmp	r1, #1
    4b14:	d009      	beq.n	4b2a <sdc_cfg_set+0x26>
    4b16:	2902      	cmp	r1, #2
    4b18:	d00a      	beq.n	4b30 <sdc_cfg_set+0x2c>
    4b1a:	2903      	cmp	r1, #3
    4b1c:	d00b      	beq.n	4b36 <sdc_cfg_set+0x32>
    4b1e:	2904      	cmp	r1, #4
    4b20:	d118      	bne.n	4b54 <sdc_cfg_set+0x50>
    4b22:	e00c      	b.n	4b3e <sdc_cfg_set+0x3a>
    4b24:	f06f 0015 	mvn.w	r0, #21
    4b28:	bd10      	pop	{r4, pc}
    4b2a:	7810      	ldrb	r0, [r2, #0]
    4b2c:	7218      	strb	r0, [r3, #8]
    4b2e:	e008      	b.n	4b42 <sdc_cfg_set+0x3e>
    4b30:	7810      	ldrb	r0, [r2, #0]
    4b32:	7258      	strb	r0, [r3, #9]
    4b34:	e005      	b.n	4b42 <sdc_cfg_set+0x3e>
    4b36:	6810      	ldr	r0, [r2, #0]
    4b38:	f8c3 000a 	str.w	r0, [r3, #10]
    4b3c:	e001      	b.n	4b42 <sdc_cfg_set+0x3e>
    4b3e:	6810      	ldr	r0, [r2, #0]
    4b40:	6118      	str	r0, [r3, #16]
    4b42:	4905      	ldr	r1, [pc, #20]	; (4b58 <sdc_cfg_set+0x54>)
    4b44:	2201      	movs	r2, #1
    4b46:	3108      	adds	r1, #8
    4b48:	2000      	movs	r0, #0
    4b4a:	f00b fab5 	bl	100b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    4b4e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4b52:	dbe9      	blt.n	4b28 <sdc_cfg_set+0x24>
    4b54:	4620      	mov	r0, r4
    4b56:	bd10      	pop	{r4, pc}
    4b58:	20000064 	.word	0x20000064

00004b5c <sdc_enable>:
    4b5c:	b538      	push	{r3, r4, r5, lr}
    4b5e:	460d      	mov	r5, r1
    4b60:	b1d0      	cbz	r0, 4b98 <sdc_enable+0x3c>
    4b62:	b1cd      	cbz	r5, 4b98 <sdc_enable+0x3c>
    4b64:	f7ff fe34 	bl	47d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b68:	4c0d      	ldr	r4, [pc, #52]	; (4ba0 <sdc_enable+0x44>)
    4b6a:	2200      	movs	r2, #0
    4b6c:	f104 0108 	add.w	r1, r4, #8
    4b70:	7020      	strb	r0, [r4, #0]
    4b72:	4628      	mov	r0, r5
    4b74:	f00b faa0 	bl	100b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    4b78:	f00e fd41 	bl	135fe <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4b7c:	2100      	movs	r1, #0
    4b7e:	7820      	ldrb	r0, [r4, #0]
    4b80:	f009 f9f2 	bl	df68 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4b84:	7860      	ldrb	r0, [r4, #1]
    4b86:	f88d 0000 	strb.w	r0, [sp]
    4b8a:	4668      	mov	r0, sp
    4b8c:	f00e f899 	bl	12cc2 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    4b90:	2001      	movs	r0, #1
    4b92:	70a0      	strb	r0, [r4, #2]
    4b94:	2000      	movs	r0, #0
    4b96:	bd38      	pop	{r3, r4, r5, pc}
    4b98:	f06f 0015 	mvn.w	r0, #21
    4b9c:	bd38      	pop	{r3, r4, r5, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	20000064 	.word	0x20000064

00004ba4 <sdc_init>:
    4ba4:	b570      	push	{r4, r5, r6, lr}
    4ba6:	0004      	movs	r4, r0
    4ba8:	d00b      	beq.n	4bc2 <sdc_init+0x1e>
    4baa:	f7ff fdb7 	bl	471c <mpsl_is_initialized>
    4bae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    4bb2:	b120      	cbz	r0, 4bbe <sdc_init+0x1a>
    4bb4:	f7ff fc7e 	bl	44b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4bb8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4bbc:	d904      	bls.n	4bc8 <sdc_init+0x24>
    4bbe:	4628      	mov	r0, r5
    4bc0:	bd70      	pop	{r4, r5, r6, pc}
    4bc2:	f06f 0015 	mvn.w	r0, #21
    4bc6:	bd70      	pop	{r4, r5, r6, pc}
    4bc8:	2200      	movs	r2, #0
    4bca:	4b14      	ldr	r3, [pc, #80]	; (4c1c <sdc_init+0x78>)
    4bcc:	4611      	mov	r1, r2
    4bce:	bf00      	nop
    4bd0:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    4bd4:	4285      	cmp	r5, r0
    4bd6:	d303      	bcc.n	4be0 <sdc_init+0x3c>
    4bd8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    4bdc:	7882      	ldrb	r2, [r0, #2]
    4bde:	e003      	b.n	4be8 <sdc_init+0x44>
    4be0:	1c49      	adds	r1, r1, #1
    4be2:	b2c9      	uxtb	r1, r1
    4be4:	290c      	cmp	r1, #12
    4be6:	d3f3      	bcc.n	4bd0 <sdc_init+0x2c>
    4be8:	480d      	ldr	r0, [pc, #52]	; (4c20 <sdc_init+0x7c>)
    4bea:	7042      	strb	r2, [r0, #1]
    4bec:	6044      	str	r4, [r0, #4]
    4bee:	480d      	ldr	r0, [pc, #52]	; (4c24 <sdc_init+0x80>)
    4bf0:	f000 f9e2 	bl	4fb8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4bf4:	f3ef 8410 	mrs	r4, PRIMASK
    4bf8:	b672      	cpsid	i
    4bfa:	480b      	ldr	r0, [pc, #44]	; (4c28 <sdc_init+0x84>)
    4bfc:	f06f 010c 	mvn.w	r1, #12
    4c00:	f000 fce4 	bl	55cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4c04:	4809      	ldr	r0, [pc, #36]	; (4c2c <sdc_init+0x88>)
    4c06:	f000 fda7 	bl	5758 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4c0a:	b118      	cbz	r0, 4c14 <sdc_init+0x70>
    4c0c:	21b3      	movs	r1, #179	; 0xb3
    4c0e:	2003      	movs	r0, #3
    4c10:	f000 f80e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c14:	b904      	cbnz	r4, 4c18 <sdc_init+0x74>
    4c16:	b662      	cpsie	i
    4c18:	2000      	movs	r0, #0
    4c1a:	bd70      	pop	{r4, r5, r6, pc}
    4c1c:	00004d26 	.word	0x00004d26
    4c20:	20000064 	.word	0x20000064
    4c24:	00004a7d 	.word	0x00004a7d
    4c28:	4000e000 	.word	0x4000e000
    4c2c:	00004d6d 	.word	0x00004d6d

00004c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4c30:	b50e      	push	{r1, r2, r3, lr}
    4c32:	b672      	cpsid	i
    4c34:	4a15      	ldr	r2, [pc, #84]	; (4c8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4c36:	6855      	ldr	r5, [r2, #4]
    4c38:	b1d5      	cbz	r5, 4c70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4c3a:	2200      	movs	r2, #0
    4c3c:	4603      	mov	r3, r0
    4c3e:	466e      	mov	r6, sp
    4c40:	240a      	movs	r4, #10
    4c42:	e003      	b.n	4c4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4c44:	fbb0 f0f4 	udiv	r0, r0, r4
    4c48:	1c52      	adds	r2, r2, #1
    4c4a:	b2d2      	uxtb	r2, r2
    4c4c:	2800      	cmp	r0, #0
    4c4e:	d1f9      	bne.n	4c44 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4c50:	54b0      	strb	r0, [r6, r2]
    4c52:	e009      	b.n	4c68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4c54:	fbb3 f0f4 	udiv	r0, r3, r4
    4c58:	fb04 3010 	mls	r0, r4, r0, r3
    4c5c:	fbb3 f3f4 	udiv	r3, r3, r4
    4c60:	1e52      	subs	r2, r2, #1
    4c62:	b2d2      	uxtb	r2, r2
    4c64:	3030      	adds	r0, #48	; 0x30
    4c66:	54b0      	strb	r0, [r6, r2]
    4c68:	2a00      	cmp	r2, #0
    4c6a:	d1f3      	bne.n	4c54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4c6c:	4630      	mov	r0, r6
    4c6e:	47a8      	blx	r5
    4c70:	f3bf 8f4f 	dsb	sy
    4c74:	4806      	ldr	r0, [pc, #24]	; (4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4c76:	6801      	ldr	r1, [r0, #0]
    4c78:	4a06      	ldr	r2, [pc, #24]	; (4c94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4c7a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4c7e:	4311      	orrs	r1, r2
    4c80:	6001      	str	r1, [r0, #0]
    4c82:	f3bf 8f4f 	dsb	sy
    4c86:	bf00      	nop
    4c88:	e7fd      	b.n	4c86 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4c8a:	0000      	.short	0x0000
    4c8c:	20000064 	.word	0x20000064
    4c90:	e000ed0c 	.word	0xe000ed0c
    4c94:	05fa0004 	.word	0x05fa0004

00004c98 <sdc_support_adv>:
    4c98:	4805      	ldr	r0, [pc, #20]	; (4cb0 <sdc_support_adv+0x18>)
    4c9a:	b510      	push	{r4, lr}
    4c9c:	7880      	ldrb	r0, [r0, #2]
    4c9e:	b110      	cbz	r0, 4ca6 <sdc_support_adv+0xe>
    4ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	f009 f981 	bl	dfac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4caa:	2000      	movs	r0, #0
    4cac:	bd10      	pop	{r4, pc}
    4cae:	0000      	.short	0x0000
    4cb0:	20000064 	.word	0x20000064

00004cb4 <sdc_support_dle>:
    4cb4:	4805      	ldr	r0, [pc, #20]	; (4ccc <sdc_support_dle+0x18>)
    4cb6:	b510      	push	{r4, lr}
    4cb8:	7880      	ldrb	r0, [r0, #2]
    4cba:	b110      	cbz	r0, 4cc2 <sdc_support_dle+0xe>
    4cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cc0:	bd10      	pop	{r4, pc}
    4cc2:	f008 fe93 	bl	d9ec <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4cc6:	2000      	movs	r0, #0
    4cc8:	bd10      	pop	{r4, pc}
    4cca:	0000      	.short	0x0000
    4ccc:	20000064 	.word	0x20000064

00004cd0 <sdc_support_le_2m_phy>:
    4cd0:	4805      	ldr	r0, [pc, #20]	; (4ce8 <sdc_support_le_2m_phy+0x18>)
    4cd2:	b510      	push	{r4, lr}
    4cd4:	7880      	ldrb	r0, [r0, #2]
    4cd6:	b110      	cbz	r0, 4cde <sdc_support_le_2m_phy+0xe>
    4cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cdc:	bd10      	pop	{r4, pc}
    4cde:	f00e f937 	bl	12f50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4ce2:	2000      	movs	r0, #0
    4ce4:	bd10      	pop	{r4, pc}
    4ce6:	0000      	.short	0x0000
    4ce8:	20000064 	.word	0x20000064

00004cec <sdc_support_le_coded_phy>:
    4cec:	4805      	ldr	r0, [pc, #20]	; (4d04 <sdc_support_le_coded_phy+0x18>)
    4cee:	b510      	push	{r4, lr}
    4cf0:	7880      	ldrb	r0, [r0, #2]
    4cf2:	b110      	cbz	r0, 4cfa <sdc_support_le_coded_phy+0xe>
    4cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cf8:	bd10      	pop	{r4, pc}
    4cfa:	f00e f933 	bl	12f64 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>
    4cfe:	2000      	movs	r0, #0
    4d00:	bd10      	pop	{r4, pc}
    4d02:	0000      	.short	0x0000
    4d04:	20000064 	.word	0x20000064

00004d08 <sdc_support_slave>:
    4d08:	4805      	ldr	r0, [pc, #20]	; (4d20 <sdc_support_slave+0x18>)
    4d0a:	b510      	push	{r4, lr}
    4d0c:	7880      	ldrb	r0, [r0, #2]
    4d0e:	b110      	cbz	r0, 4d16 <sdc_support_slave+0xe>
    4d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d14:	bd10      	pop	{r4, pc}
    4d16:	f009 f95b 	bl	dfd0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4d1a:	2000      	movs	r0, #0
    4d1c:	bd10      	pop	{r4, pc}
    4d1e:	0000      	.short	0x0000
    4d20:	20000064 	.word	0x20000064
    4d24:	00010001 	.word	0x00010001
    4d28:	0002000b 	.word	0x0002000b
    4d2c:	0005000a 	.word	0x0005000a
    4d30:	000a0009 	.word	0x000a0009
    4d34:	00140008 	.word	0x00140008
    4d38:	001e0007 	.word	0x001e0007
    4d3c:	00320006 	.word	0x00320006
    4d40:	004b0005 	.word	0x004b0005
    4d44:	00640004 	.word	0x00640004
    4d48:	00960003 	.word	0x00960003
    4d4c:	00fa0002 	.word	0x00fa0002
    4d50:	01f40001 	.word	0x01f40001
    4d54:	c7e50000 	.word	0xc7e50000
    4d58:	0091d99c 	.word	0x0091d99c
    4d5c:	fbea661d 	.word	0xfbea661d
    4d60:	2f987b6e 	.word	0x2f987b6e
    4d64:	60f10d42 	.word	0x60f10d42
    4d68:	0000c893 	.word	0x0000c893

00004d6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d6e:	4c12      	ldr	r4, [pc, #72]	; (4db8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4d70:	2600      	movs	r6, #0
    4d72:	6825      	ldr	r5, [r4, #0]
    4d74:	e011      	b.n	4d9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4d76:	9800      	ldr	r0, [sp, #0]
    4d78:	2802      	cmp	r0, #2
    4d7a:	d002      	beq.n	4d82 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4d7c:	2803      	cmp	r0, #3
    4d7e:	d10c      	bne.n	4d9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4d80:	e006      	b.n	4d90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4d82:	6820      	ldr	r0, [r4, #0]
    4d84:	b110      	cbz	r0, 4d8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4d86:	2000      	movs	r0, #0
    4d88:	6026      	str	r6, [r4, #0]
    4d8a:	e005      	b.n	4d98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4d8c:	2126      	movs	r1, #38	; 0x26
    4d8e:	e00c      	b.n	4daa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4d90:	6820      	ldr	r0, [r4, #0]
    4d92:	b168      	cbz	r0, 4db0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4d94:	2001      	movs	r0, #1
    4d96:	6026      	str	r6, [r4, #0]
    4d98:	47a8      	blx	r5
    4d9a:	4668      	mov	r0, sp
    4d9c:	f000 fcae 	bl	56fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4da0:	2800      	cmp	r0, #0
    4da2:	d0e8      	beq.n	4d76 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4da4:	2805      	cmp	r0, #5
    4da6:	d005      	beq.n	4db4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4da8:	2133      	movs	r1, #51	; 0x33
    4daa:	2004      	movs	r0, #4
    4dac:	f7ff ff40 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4db0:	212b      	movs	r1, #43	; 0x2b
    4db2:	e7fa      	b.n	4daa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4db6:	0000      	.short	0x0000
    4db8:	20000078 	.word	0x20000078

00004dbc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    4dbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4dbe:	4d22      	ldr	r5, [pc, #136]	; (4e48 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x8c>)
    4dc0:	4606      	mov	r6, r0
    4dc2:	7828      	ldrb	r0, [r5, #0]
    4dc4:	b148      	cbz	r0, 4dda <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4dc6:	78ac      	ldrb	r4, [r5, #2]
    4dc8:	1c69      	adds	r1, r5, #1
    4dca:	1ca4      	adds	r4, r4, #2
    4dcc:	4622      	mov	r2, r4
    4dce:	4630      	mov	r0, r6
    4dd0:	f7ff fda2 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4dd4:	2000      	movs	r0, #0
    4dd6:	7028      	strb	r0, [r5, #0]
    4dd8:	e020      	b.n	4e1c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>
    4dda:	481c      	ldr	r0, [pc, #112]	; (4e4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    4ddc:	f008 fe66 	bl	daac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4de0:	2800      	cmp	r0, #0
    4de2:	d02f      	beq.n	4e44 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x88>
    4de4:	4c19      	ldr	r4, [pc, #100]	; (4e4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    4de6:	7820      	ldrb	r0, [r4, #0]
    4de8:	2814      	cmp	r0, #20
    4dea:	d104      	bne.n	4df6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    4dec:	210a      	movs	r1, #10
    4dee:	203e      	movs	r0, #62	; 0x3e
    4df0:	f000 f82e 	bl	4e50 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    4df4:	b118      	cbz	r0, 4dfe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    4df6:	7820      	ldrb	r0, [r4, #0]
    4df8:	280a      	cmp	r0, #10
    4dfa:	d005      	beq.n	4e08 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4c>
    4dfc:	e009      	b.n	4e12 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x56>
    4dfe:	4913      	ldr	r1, [pc, #76]	; (4e4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    4e00:	4630      	mov	r0, r6
    4e02:	f00b fc74 	bl	106ee <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4e06:	e008      	b.n	4e1a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    4e08:	2105      	movs	r1, #5
    4e0a:	203e      	movs	r0, #62	; 0x3e
    4e0c:	f000 f820 	bl	4e50 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    4e10:	b158      	cbz	r0, 4e2a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x6e>
    4e12:	490e      	ldr	r1, [pc, #56]	; (4e4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    4e14:	4630      	mov	r0, r6
    4e16:	f00b fa2d 	bl	10274 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4e1a:	4604      	mov	r4, r0
    4e1c:	b18c      	cbz	r4, 4e42 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x86>
    4e1e:	78b1      	ldrb	r1, [r6, #2]
    4e20:	7830      	ldrb	r0, [r6, #0]
    4e22:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4e26:	f000 b813 	b.w	4e50 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    4e2a:	88a0      	ldrh	r0, [r4, #4]
    4e2c:	f8ad 0000 	strh.w	r0, [sp]
    4e30:	a901      	add	r1, sp, #4
    4e32:	4668      	mov	r0, sp
    4e34:	f00b fd52 	bl	108dc <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4e38:	b118      	cbz	r0, 4e42 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x86>
    4e3a:	2195      	movs	r1, #149	; 0x95
    4e3c:	2008      	movs	r0, #8
    4e3e:	f7ff fef7 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e42:	2000      	movs	r0, #0
    4e44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e46:	0000      	.short	0x0000
    4e48:	20001088 	.word	0x20001088
    4e4c:	20000f68 	.word	0x20000f68
    4e50:	b570      	push	{r4, r5, r6, lr}
    4e52:	460c      	mov	r4, r1
    4e54:	4605      	mov	r5, r0
    4e56:	f000 f84b 	bl	4ef0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d002      	beq.n	4e64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xa8>
    4e5e:	2d3e      	cmp	r5, #62	; 0x3e
    4e60:	d001      	beq.n	4e66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xaa>
    4e62:	2001      	movs	r0, #1
    4e64:	bd70      	pop	{r4, r5, r6, pc}
    4e66:	2c12      	cmp	r4, #18
    4e68:	d106      	bne.n	4e78 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xbc>
    4e6a:	4806      	ldr	r0, [pc, #24]	; (4e84 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xc8>)
    4e6c:	7801      	ldrb	r1, [r0, #0]
    4e6e:	2902      	cmp	r1, #2
    4e70:	d002      	beq.n	4e78 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xbc>
    4e72:	7840      	ldrb	r0, [r0, #1]
    4e74:	2800      	cmp	r0, #0
    4e76:	d0f5      	beq.n	4e64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xa8>
    4e78:	4620      	mov	r0, r4
    4e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e7e:	f000 b853 	b.w	4f28 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    4e82:	0000      	.short	0x0000
    4e84:	200003aa 	.word	0x200003aa

00004e88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    4e88:	4901      	ldr	r1, [pc, #4]	; (4e90 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    4e8a:	7048      	strb	r0, [r1, #1]
    4e8c:	4770      	bx	lr
    4e8e:	0000      	.short	0x0000
    4e90:	200003aa 	.word	0x200003aa
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	780a      	ldrb	r2, [r1, #0]
    4e98:	7082      	strb	r2, [r0, #2]
    4e9a:	b33a      	cbz	r2, 4eec <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4e9c:	2a01      	cmp	r2, #1
    4e9e:	d825      	bhi.n	4eec <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4ea0:	2313      	movs	r3, #19
    4ea2:	7003      	strb	r3, [r0, #0]
    4ea4:	2300      	movs	r3, #0
    4ea6:	e00a      	b.n	4ebe <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    4ea8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4eac:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4eb0:	78a6      	ldrb	r6, [r4, #2]
    4eb2:	70ee      	strb	r6, [r5, #3]
    4eb4:	8864      	ldrh	r4, [r4, #2]
    4eb6:	0a24      	lsrs	r4, r4, #8
    4eb8:	1c5b      	adds	r3, r3, #1
    4eba:	712c      	strb	r4, [r5, #4]
    4ebc:	b2db      	uxtb	r3, r3
    4ebe:	4293      	cmp	r3, r2
    4ec0:	d3f2      	bcc.n	4ea8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    4ec2:	2300      	movs	r3, #0
    4ec4:	e00b      	b.n	4ede <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    4ec6:	bf00      	nop
    4ec8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4ecc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4ed0:	792e      	ldrb	r6, [r5, #4]
    4ed2:	7166      	strb	r6, [r4, #5]
    4ed4:	88ad      	ldrh	r5, [r5, #4]
    4ed6:	0a2d      	lsrs	r5, r5, #8
    4ed8:	1c5b      	adds	r3, r3, #1
    4eda:	71a5      	strb	r5, [r4, #6]
    4edc:	b2db      	uxtb	r3, r3
    4ede:	4293      	cmp	r3, r2
    4ee0:	d3f2      	bcc.n	4ec8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    4ee2:	2101      	movs	r1, #1
    4ee4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4ee8:	b2c0      	uxtb	r0, r0
    4eea:	bd70      	pop	{r4, r5, r6, pc}
    4eec:	2000      	movs	r0, #0
    4eee:	bd70      	pop	{r4, r5, r6, pc}

00004ef0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4ef0:	2101      	movs	r1, #1
    4ef2:	4a0c      	ldr	r2, [pc, #48]	; (4f24 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4ef4:	2840      	cmp	r0, #64	; 0x40
    4ef6:	d20c      	bcs.n	4f12 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4ef8:	2820      	cmp	r0, #32
    4efa:	d803      	bhi.n	4f04 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4efc:	1e40      	subs	r0, r0, #1
    4efe:	4081      	lsls	r1, r0
    4f00:	6810      	ldr	r0, [r2, #0]
    4f02:	e002      	b.n	4f0a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f04:	3821      	subs	r0, #33	; 0x21
    4f06:	4081      	lsls	r1, r0
    4f08:	6850      	ldr	r0, [r2, #4]
    4f0a:	4201      	tst	r1, r0
    4f0c:	d107      	bne.n	4f1e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f0e:	2000      	movs	r0, #0
    4f10:	4770      	bx	lr
    4f12:	28ff      	cmp	r0, #255	; 0xff
    4f14:	d003      	beq.n	4f1e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f16:	3840      	subs	r0, #64	; 0x40
    4f18:	4081      	lsls	r1, r0
    4f1a:	6890      	ldr	r0, [r2, #8]
    4f1c:	e7f5      	b.n	4f0a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f1e:	2001      	movs	r0, #1
    4f20:	4770      	bx	lr
    4f22:	0000      	.short	0x0000
    4f24:	2000007c 	.word	0x2000007c

00004f28 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4f28:	2101      	movs	r1, #1
    4f2a:	1e40      	subs	r0, r0, #1
    4f2c:	4081      	lsls	r1, r0
    4f2e:	4804      	ldr	r0, [pc, #16]	; (4f40 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4f30:	68c0      	ldr	r0, [r0, #12]
    4f32:	4201      	tst	r1, r0
    4f34:	d001      	beq.n	4f3a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4f36:	2001      	movs	r0, #1
    4f38:	4770      	bx	lr
    4f3a:	2000      	movs	r0, #0
    4f3c:	4770      	bx	lr
    4f3e:	0000      	.short	0x0000
    4f40:	2000007c 	.word	0x2000007c

00004f44 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4f44:	4901      	ldr	r1, [pc, #4]	; (4f4c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4f46:	6800      	ldr	r0, [r0, #0]
    4f48:	60c8      	str	r0, [r1, #12]
    4f4a:	4770      	bx	lr
    4f4c:	2000007c 	.word	0x2000007c

00004f50 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4f50:	4904      	ldr	r1, [pc, #16]	; (4f64 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4f52:	6802      	ldr	r2, [r0, #0]
    4f54:	6840      	ldr	r0, [r0, #4]
    4f56:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4f5a:	600a      	str	r2, [r1, #0]
    4f5c:	4a02      	ldr	r2, [pc, #8]	; (4f68 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4f5e:	4310      	orrs	r0, r2
    4f60:	6048      	str	r0, [r1, #4]
    4f62:	4770      	bx	lr
    4f64:	2000007c 	.word	0x2000007c
    4f68:	024007f8 	.word	0x024007f8

00004f6c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4f6c:	4901      	ldr	r1, [pc, #4]	; (4f74 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4f6e:	6800      	ldr	r0, [r0, #0]
    4f70:	6088      	str	r0, [r1, #8]
    4f72:	4770      	bx	lr
    4f74:	2000007c 	.word	0x2000007c

00004f78 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4f78:	4805      	ldr	r0, [pc, #20]	; (4f90 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f7e:	6001      	str	r1, [r0, #0]
    4f80:	0cc9      	lsrs	r1, r1, #19
    4f82:	6041      	str	r1, [r0, #4]
    4f84:	2100      	movs	r1, #0
    4f86:	6081      	str	r1, [r0, #8]
    4f88:	211f      	movs	r1, #31
    4f8a:	60c1      	str	r1, [r0, #12]
    4f8c:	4770      	bx	lr
    4f8e:	0000      	.short	0x0000
    4f90:	2000007c 	.word	0x2000007c

00004f94 <sdc_hci_cmd_cb_reset>:
    4f94:	b510      	push	{r4, lr}
    4f96:	f7ff ffef 	bl	4f78 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4f9a:	2000      	movs	r0, #0
    4f9c:	f7ff ff74 	bl	4e88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    4fa0:	f00d ff37 	bl	12e12 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4fa4:	4604      	mov	r4, r0
    4fa6:	4803      	ldr	r0, [pc, #12]	; (4fb4 <sdc_hci_cmd_cb_reset+0x20>)
    4fa8:	6800      	ldr	r0, [r0, #0]
    4faa:	b100      	cbz	r0, 4fae <sdc_hci_cmd_cb_reset+0x1a>
    4fac:	4780      	blx	r0
    4fae:	4620      	mov	r0, r4
    4fb0:	bd10      	pop	{r4, pc}
    4fb2:	0000      	.short	0x0000
    4fb4:	2000008c 	.word	0x2000008c

00004fb8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4fb8:	4901      	ldr	r1, [pc, #4]	; (4fc0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4fba:	6008      	str	r0, [r1, #0]
    4fbc:	4770      	bx	lr
    4fbe:	0000      	.short	0x0000
    4fc0:	2000008c 	.word	0x2000008c

00004fc4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4fc4:	2102      	movs	r1, #2
    4fc6:	8001      	strh	r1, [r0, #0]
    4fc8:	8041      	strh	r1, [r0, #2]
    4fca:	2100      	movs	r1, #0
    4fcc:	7101      	strb	r1, [r0, #4]
    4fce:	21e5      	movs	r1, #229	; 0xe5
    4fd0:	7141      	strb	r1, [r0, #5]
    4fd2:	f649 41c7 	movw	r1, #40135	; 0x9cc7
    4fd6:	80c1      	strh	r1, [r0, #6]
    4fd8:	4901      	ldr	r1, [pc, #4]	; (4fe0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4fda:	6081      	str	r1, [r0, #8]
    4fdc:	2000      	movs	r0, #0
    4fde:	4770      	bx	lr
    4fe0:	1d0091d9 	.word	0x1d0091d9

00004fe4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    4fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fe8:	4607      	mov	r7, r0
    4fea:	b111      	cbz	r1, 4ff2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    4fec:	2000      	movs	r0, #0
    4fee:	b960      	cbnz	r0, 500a <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    4ff0:	e001      	b.n	4ff6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    4ff2:	2001      	movs	r0, #1
    4ff4:	e7fb      	b.n	4fee <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    4ff6:	2901      	cmp	r1, #1
    4ff8:	d007      	beq.n	500a <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    4ffa:	2000      	movs	r0, #0
    4ffc:	2800      	cmp	r0, #0
    4ffe:	d01f      	beq.n	5040 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    5000:	2400      	movs	r4, #0
    5002:	4812      	ldr	r0, [pc, #72]	; (504c <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    5004:	2901      	cmp	r1, #1
    5006:	d002      	beq.n	500e <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    5008:	e002      	b.n	5010 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    500a:	2001      	movs	r0, #1
    500c:	e7f6      	b.n	4ffc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    500e:	7804      	ldrb	r4, [r0, #0]
    5010:	2300      	movs	r3, #0
    5012:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5016:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    501a:	f810 e001 	ldrb.w	lr, [r0, r1]
    501e:	e008      	b.n	5032 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    5020:	1918      	adds	r0, r3, r4
    5022:	f8dc 500c 	ldr.w	r5, [ip, #12]
    5026:	b280      	uxth	r0, r0
    5028:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    502c:	b125      	cbz	r5, 5038 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    502e:	1c5b      	adds	r3, r3, #1
    5030:	b29b      	uxth	r3, r3
    5032:	459e      	cmp	lr, r3
    5034:	d8f4      	bhi.n	5020 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    5036:	4630      	mov	r0, r6
    5038:	8038      	strh	r0, [r7, #0]
    503a:	42b0      	cmp	r0, r6
    503c:	d102      	bne.n	5044 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    503e:	2000      	movs	r0, #0
    5040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5048:	f000 b8b4 	b.w	51b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    504c:	2000118c 	.word	0x2000118c

00005050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5050:	b510      	push	{r4, lr}
    5052:	2802      	cmp	r0, #2
    5054:	d304      	bcc.n	5060 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5056:	f240 1153 	movw	r1, #339	; 0x153
    505a:	2017      	movs	r0, #23
    505c:	f7ff fde8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5060:	4901      	ldr	r1, [pc, #4]	; (5068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5062:	5c08      	ldrb	r0, [r1, r0]
    5064:	bd10      	pop	{r4, pc}
    5066:	0000      	.short	0x0000
    5068:	2000118c 	.word	0x2000118c

0000506c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506e:	4605      	mov	r5, r0
    5070:	18c8      	adds	r0, r1, r3
    5072:	28ff      	cmp	r0, #255	; 0xff
    5074:	d902      	bls.n	507c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    5076:	f240 1121 	movw	r1, #289	; 0x121
    507a:	e00f      	b.n	509c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    507c:	429a      	cmp	r2, r3
    507e:	d902      	bls.n	5086 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    5080:	f44f 7191 	mov.w	r1, #290	; 0x122
    5084:	e00a      	b.n	509c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    5086:	b2c4      	uxtb	r4, r0
    5088:	9500      	str	r5, [sp, #0]
    508a:	b155      	cbz	r5, 50a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    508c:	2600      	movs	r6, #0
    508e:	1ce8      	adds	r0, r5, #3
    5090:	f020 0003 	bic.w	r0, r0, #3
    5094:	42a8      	cmp	r0, r5
    5096:	d006      	beq.n	50a6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    5098:	f44f 7194 	mov.w	r1, #296	; 0x128
    509c:	2017      	movs	r0, #23
    509e:	f7ff fdc7 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a2:	2601      	movs	r6, #1
    50a4:	e7f3      	b.n	508e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    50a6:	4f12      	ldr	r7, [pc, #72]	; (50f0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    50a8:	4668      	mov	r0, sp
    50aa:	703b      	strb	r3, [r7, #0]
    50ac:	7079      	strb	r1, [r7, #1]
    50ae:	4631      	mov	r1, r6
    50b0:	f000 f8c6 	bl	5240 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    50b4:	2100      	movs	r1, #0
    50b6:	468c      	mov	ip, r1
    50b8:	9800      	ldr	r0, [sp, #0]
    50ba:	1cc0      	adds	r0, r0, #3
    50bc:	f020 0003 	bic.w	r0, r0, #3
    50c0:	9000      	str	r0, [sp, #0]
    50c2:	b95e      	cbnz	r6, 50dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    50c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    50c8:	60d8      	str	r0, [r3, #12]
    50ca:	2000      	movs	r0, #0
    50cc:	e004      	b.n	50d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    50ce:	68da      	ldr	r2, [r3, #12]
    50d0:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    50d4:	1c40      	adds	r0, r0, #1
    50d6:	b2c0      	uxtb	r0, r0
    50d8:	42a0      	cmp	r0, r4
    50da:	d3f8      	bcc.n	50ce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    50dc:	9800      	ldr	r0, [sp, #0]
    50de:	1c49      	adds	r1, r1, #1
    50e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    50e4:	b2c9      	uxtb	r1, r1
    50e6:	9000      	str	r0, [sp, #0]
    50e8:	2902      	cmp	r1, #2
    50ea:	d3e5      	bcc.n	50b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    50ec:	1b40      	subs	r0, r0, r5
    50ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50f0:	2000118c 	.word	0x2000118c

000050f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    50f4:	b570      	push	{r4, r5, r6, lr}
    50f6:	4604      	mov	r4, r0
    50f8:	f00c f90b 	bl	11312 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    50fc:	b108      	cbz	r0, 5102 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    50fe:	2010      	movs	r0, #16
    5100:	bd70      	pop	{r4, r5, r6, pc}
    5102:	7825      	ldrb	r5, [r4, #0]
    5104:	f000 f84e 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5108:	4602      	mov	r2, r0
    510a:	480c      	ldr	r0, [pc, #48]	; (513c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    510c:	8861      	ldrh	r1, [r4, #2]
    510e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5112:	e00e      	b.n	5132 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5114:	68c3      	ldr	r3, [r0, #12]
    5116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    511a:	b143      	cbz	r3, 512e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    511c:	1c4a      	adds	r2, r1, #1
    511e:	8062      	strh	r2, [r4, #2]
    5120:	80a1      	strh	r1, [r4, #4]
    5122:	68c0      	ldr	r0, [r0, #12]
    5124:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5128:	60a0      	str	r0, [r4, #8]
    512a:	2000      	movs	r0, #0
    512c:	bd70      	pop	{r4, r5, r6, pc}
    512e:	1c49      	adds	r1, r1, #1
    5130:	b289      	uxth	r1, r1
    5132:	4291      	cmp	r1, r2
    5134:	d3ee      	bcc.n	5114 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5136:	8061      	strh	r1, [r4, #2]
    5138:	2005      	movs	r0, #5
    513a:	bd70      	pop	{r4, r5, r6, pc}
    513c:	2000118c 	.word	0x2000118c

00005140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5144:	4607      	mov	r7, r0
    5146:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    514a:	460c      	mov	r4, r1
    514c:	f243 0602 	movw	r6, #12290	; 0x3002
    5150:	38ff      	subs	r0, #255	; 0xff
    5152:	d020      	beq.n	5196 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5154:	2c02      	cmp	r4, #2
    5156:	d302      	bcc.n	515e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5158:	2007      	movs	r0, #7
    515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    515e:	4638      	mov	r0, r7
    5160:	f000 f85e 	bl	5220 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    5164:	0005      	movs	r5, r0
    5166:	d016      	beq.n	5196 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5168:	480c      	ldr	r0, [pc, #48]	; (519c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    516a:	4629      	mov	r1, r5
    516c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5170:	4638      	mov	r0, r7
    5172:	4790      	blx	r2
    5174:	480a      	ldr	r0, [pc, #40]	; (51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5176:	2100      	movs	r1, #0
    5178:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    517c:	68f0      	ldr	r0, [r6, #12]
    517e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    5182:	4620      	mov	r0, r4
    5184:	f000 f88e 	bl	52a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    5188:	4602      	mov	r2, r0
    518a:	4629      	mov	r1, r5
    518c:	6870      	ldr	r0, [r6, #4]
    518e:	f00b fff8 	bl	11182 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5192:	2000      	movs	r0, #0
    5194:	e7e1      	b.n	515a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5196:	4630      	mov	r0, r6
    5198:	e7df      	b.n	515a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    519a:	0000      	.short	0x0000
    519c:	000052c4 	.word	0x000052c4
    51a0:	2000118c 	.word	0x2000118c
    51a4:	4902      	ldr	r1, [pc, #8]	; (51b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    51a6:	7808      	ldrb	r0, [r1, #0]
    51a8:	7849      	ldrb	r1, [r1, #1]
    51aa:	4408      	add	r0, r1
    51ac:	b2c0      	uxtb	r0, r0
    51ae:	4770      	bx	lr
    51b0:	2000118c 	.word	0x2000118c
    51b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51b8:	4690      	mov	r8, r2
    51ba:	460e      	mov	r6, r1
    51bc:	4607      	mov	r7, r0
    51be:	f00c f81a 	bl	111f6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    51c2:	b140      	cbz	r0, 51d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    51c4:	4814      	ldr	r0, [pc, #80]	; (5218 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    51c6:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    51ca:	68e0      	ldr	r0, [r4, #12]
    51cc:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    51d0:	b118      	cbz	r0, 51da <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    51d2:	21f4      	movs	r1, #244	; 0xf4
    51d4:	e013      	b.n	51fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    51d6:	21f3      	movs	r1, #243	; 0xf3
    51d8:	e011      	b.n	51fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    51da:	6860      	ldr	r0, [r4, #4]
    51dc:	2800      	cmp	r0, #0
    51de:	d019      	beq.n	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    51e0:	4630      	mov	r0, r6
    51e2:	f000 f85f 	bl	52a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    51e6:	4601      	mov	r1, r0
    51e8:	6860      	ldr	r0, [r4, #4]
    51ea:	f00b ff7c 	bl	110e6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    51ee:	0005      	movs	r5, r0
    51f0:	d00f      	beq.n	5212 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    51f2:	68e0      	ldr	r0, [r4, #12]
    51f4:	2e02      	cmp	r6, #2
    51f6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    51fa:	d303      	bcc.n	5204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    51fc:	21ff      	movs	r1, #255	; 0xff
    51fe:	2017      	movs	r0, #23
    5200:	f7ff fd16 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5204:	4805      	ldr	r0, [pc, #20]	; (521c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    5206:	4642      	mov	r2, r8
    5208:	4629      	mov	r1, r5
    520a:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    520e:	4638      	mov	r0, r7
    5210:	4798      	blx	r3
    5212:	4628      	mov	r0, r5
    5214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5218:	2000118c 	.word	0x2000118c
    521c:	000052bc 	.word	0x000052bc
    5220:	b570      	push	{r4, r5, r6, lr}
    5222:	460c      	mov	r4, r1
    5224:	4605      	mov	r5, r0
    5226:	f00b ffe6 	bl	111f6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    522a:	2800      	cmp	r0, #0
    522c:	d005      	beq.n	523a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    522e:	4803      	ldr	r0, [pc, #12]	; (523c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    5230:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5234:	68c0      	ldr	r0, [r0, #12]
    5236:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    523a:	bd70      	pop	{r4, r5, r6, pc}
    523c:	2000118c 	.word	0x2000118c
    5240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5244:	4f16      	ldr	r7, [pc, #88]	; (52a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    5246:	4688      	mov	r8, r1
    5248:	4605      	mov	r5, r0
    524a:	2400      	movs	r4, #0
    524c:	6828      	ldr	r0, [r5, #0]
    524e:	1cc0      	adds	r0, r0, #3
    5250:	f020 0003 	bic.w	r0, r0, #3
    5254:	6028      	str	r0, [r5, #0]
    5256:	4620      	mov	r0, r4
    5258:	f000 f824 	bl	52a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    525c:	5d39      	ldrb	r1, [r7, r4]
    525e:	4341      	muls	r1, r0
    5260:	f1b8 0f00 	cmp.w	r8, #0
    5264:	d001      	beq.n	526a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    5266:	2000      	movs	r0, #0
    5268:	e000      	b.n	526c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    526a:	6828      	ldr	r0, [r5, #0]
    526c:	9000      	str	r0, [sp, #0]
    526e:	b118      	cbz	r0, 5278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5270:	2600      	movs	r6, #0
    5272:	b11e      	cbz	r6, 527c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    5274:	2000      	movs	r0, #0
    5276:	e002      	b.n	527e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5278:	2601      	movs	r6, #1
    527a:	e7fa      	b.n	5272 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    527c:	4668      	mov	r0, sp
    527e:	f00b ff5f 	bl	11140 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5282:	b91e      	cbnz	r6, 528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    5284:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    5288:	9a00      	ldr	r2, [sp, #0]
    528a:	604a      	str	r2, [r1, #4]
    528c:	6829      	ldr	r1, [r5, #0]
    528e:	1c64      	adds	r4, r4, #1
    5290:	4408      	add	r0, r1
    5292:	b2e4      	uxtb	r4, r4
    5294:	6028      	str	r0, [r5, #0]
    5296:	2c02      	cmp	r4, #2
    5298:	d3d8      	bcc.n	524c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    529e:	0000      	.short	0x0000
    52a0:	2000118c 	.word	0x2000118c
    52a4:	4903      	ldr	r1, [pc, #12]	; (52b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    52a6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    52aa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    52ae:	1cc0      	adds	r0, r0, #3
    52b0:	4008      	ands	r0, r1
    52b2:	4770      	bx	lr
    52b4:	000052b8 	.word	0x000052b8
    52b8:	022801e0 	.word	0x022801e0
    52bc:	00012727 	.word	0x00012727
    52c0:	000124f7 	.word	0x000124f7
    52c4:	00012753 	.word	0x00012753
    52c8:	0001250d 	.word	0x0001250d

000052cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    52cc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d0:	4c26      	ldr	r4, [pc, #152]	; (536c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    52d2:	4680      	mov	r8, r0
    52d4:	b081      	sub	sp, #4
    52d6:	6820      	ldr	r0, [r4, #0]
    52d8:	469a      	mov	sl, r3
    52da:	4693      	mov	fp, r2
    52dc:	b158      	cbz	r0, 52f6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    52de:	7a02      	ldrb	r2, [r0, #8]
    52e0:	4542      	cmp	r2, r8
    52e2:	d903      	bls.n	52ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    52e4:	6841      	ldr	r1, [r0, #4]
    52e6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    52ea:	b140      	cbz	r0, 52fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    52ec:	f243 0002 	movw	r0, #12290	; 0x3002
    52f0:	b005      	add	sp, #20
    52f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52f6:	21a5      	movs	r1, #165	; 0xa5
    52f8:	2018      	movs	r0, #24
    52fa:	f7ff fc99 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52fe:	4619      	mov	r1, r3
    5300:	9802      	ldr	r0, [sp, #8]
    5302:	f00b ff99 	bl	11238 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5306:	b287      	uxth	r7, r0
    5308:	4658      	mov	r0, fp
    530a:	990e      	ldr	r1, [sp, #56]	; 0x38
    530c:	f00b ff8b 	bl	11226 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5310:	b286      	uxth	r6, r0
    5312:	19b8      	adds	r0, r7, r6
    5314:	1d00      	adds	r0, r0, #4
    5316:	b285      	uxth	r5, r0
    5318:	6820      	ldr	r0, [r4, #0]
    531a:	46a1      	mov	r9, r4
    531c:	4629      	mov	r1, r5
    531e:	6800      	ldr	r0, [r0, #0]
    5320:	f00b fee1 	bl	110e6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5324:	0004      	movs	r4, r0
    5326:	d01f      	beq.n	5368 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5328:	8065      	strh	r5, [r4, #2]
    532a:	8026      	strh	r6, [r4, #0]
    532c:	980e      	ldr	r0, [sp, #56]	; 0x38
    532e:	1d25      	adds	r5, r4, #4
    5330:	9000      	str	r0, [sp, #0]
    5332:	4631      	mov	r1, r6
    5334:	465a      	mov	r2, fp
    5336:	2301      	movs	r3, #1
    5338:	4628      	mov	r0, r5
    533a:	f00b fe0f 	bl	10f5c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    533e:	8820      	ldrh	r0, [r4, #0]
    5340:	4639      	mov	r1, r7
    5342:	4428      	add	r0, r5
    5344:	2301      	movs	r3, #1
    5346:	9a02      	ldr	r2, [sp, #8]
    5348:	f8cd a000 	str.w	sl, [sp]
    534c:	f00b fe06 	bl	10f5c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5350:	8820      	ldrh	r0, [r4, #0]
    5352:	1941      	adds	r1, r0, r5
    5354:	4628      	mov	r0, r5
    5356:	f00b fe37 	bl	10fc8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    535a:	f8d9 0000 	ldr.w	r0, [r9]
    535e:	6841      	ldr	r1, [r0, #4]
    5360:	2000      	movs	r0, #0
    5362:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5366:	e7c3      	b.n	52f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5368:	2004      	movs	r0, #4
    536a:	e7c1      	b.n	52f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    536c:	20000090 	.word	0x20000090

00005370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5370:	b570      	push	{r4, r5, r6, lr}
    5372:	4c14      	ldr	r4, [pc, #80]	; (53c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5374:	6823      	ldr	r3, [r4, #0]
    5376:	b18b      	cbz	r3, 539c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5378:	7a19      	ldrb	r1, [r3, #8]
    537a:	4281      	cmp	r1, r0
    537c:	d912      	bls.n	53a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    537e:	685a      	ldr	r2, [r3, #4]
    5380:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5384:	b171      	cbz	r1, 53a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5386:	2500      	movs	r5, #0
    5388:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    538c:	884a      	ldrh	r2, [r1, #2]
    538e:	6818      	ldr	r0, [r3, #0]
    5390:	f00b fef7 	bl	11182 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5394:	6821      	ldr	r1, [r4, #0]
    5396:	2000      	movs	r0, #0
    5398:	7a0a      	ldrb	r2, [r1, #8]
    539a:	e00c      	b.n	53b6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    539c:	21c8      	movs	r1, #200	; 0xc8
    539e:	2018      	movs	r0, #24
    53a0:	f7ff fc46 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53a4:	f243 0002 	movw	r0, #12290	; 0x3002
    53a8:	bd70      	pop	{r4, r5, r6, pc}
    53aa:	684b      	ldr	r3, [r1, #4]
    53ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    53b0:	b933      	cbnz	r3, 53c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    53b2:	1c40      	adds	r0, r0, #1
    53b4:	b2c0      	uxtb	r0, r0
    53b6:	4282      	cmp	r2, r0
    53b8:	d8f7      	bhi.n	53aa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    53ba:	6808      	ldr	r0, [r1, #0]
    53bc:	f00b fed6 	bl	1116c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    53c0:	2000      	movs	r0, #0
    53c2:	bd70      	pop	{r4, r5, r6, pc}
    53c4:	20000090 	.word	0x20000090

000053c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    53c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53cc:	460d      	mov	r5, r1
    53ce:	0004      	movs	r4, r0
    53d0:	4690      	mov	r8, r2
    53d2:	f04f 0600 	mov.w	r6, #0
    53d6:	d009      	beq.n	53ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    53d8:	2700      	movs	r7, #0
    53da:	1ce0      	adds	r0, r4, #3
    53dc:	f020 0003 	bic.w	r0, r0, #3
    53e0:	42a0      	cmp	r0, r4
    53e2:	d005      	beq.n	53f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    53e4:	2186      	movs	r1, #134	; 0x86
    53e6:	2018      	movs	r0, #24
    53e8:	f7ff fc22 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ec:	2701      	movs	r7, #1
    53ee:	e7f4      	b.n	53da <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    53f0:	b1cd      	cbz	r5, 5426 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    53f2:	4611      	mov	r1, r2
    53f4:	2000      	movs	r0, #0
    53f6:	f00b fea3 	bl	11140 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    53fa:	300c      	adds	r0, #12
    53fc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5400:	b98f      	cbnz	r7, 5426 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5402:	4f0a      	ldr	r7, [pc, #40]	; (542c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5404:	f104 000c 	add.w	r0, r4, #12
    5408:	00aa      	lsls	r2, r5, #2
    540a:	603c      	str	r4, [r7, #0]
    540c:	7225      	strb	r5, [r4, #8]
    540e:	6060      	str	r0, [r4, #4]
    5410:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5414:	6020      	str	r0, [r4, #0]
    5416:	2100      	movs	r1, #0
    5418:	6860      	ldr	r0, [r4, #4]
    541a:	f00a fe31 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    541e:	4641      	mov	r1, r8
    5420:	6838      	ldr	r0, [r7, #0]
    5422:	f00b fe8d 	bl	11140 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5426:	4630      	mov	r0, r6
    5428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    542c:	20000090 	.word	0x20000090

00005430 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	4d08      	ldr	r5, [pc, #32]	; (5454 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5434:	6828      	ldr	r0, [r5, #0]
    5436:	2800      	cmp	r0, #0
    5438:	d00a      	beq.n	5450 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    543a:	2400      	movs	r4, #0
    543c:	e004      	b.n	5448 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    543e:	4620      	mov	r0, r4
    5440:	f7ff ff96 	bl	5370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5444:	1c64      	adds	r4, r4, #1
    5446:	b2e4      	uxtb	r4, r4
    5448:	6828      	ldr	r0, [r5, #0]
    544a:	7a00      	ldrb	r0, [r0, #8]
    544c:	42a0      	cmp	r0, r4
    544e:	d8f6      	bhi.n	543e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5450:	bd70      	pop	{r4, r5, r6, pc}
    5452:	0000      	.short	0x0000
    5454:	20000090 	.word	0x20000090

00005458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5458:	4909      	ldr	r1, [pc, #36]	; (5480 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    545a:	b510      	push	{r4, lr}
    545c:	4602      	mov	r2, r0
    545e:	6809      	ldr	r1, [r1, #0]
    5460:	2000      	movs	r0, #0
    5462:	b149      	cbz	r1, 5478 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5464:	7a0b      	ldrb	r3, [r1, #8]
    5466:	4293      	cmp	r3, r2
    5468:	d905      	bls.n	5476 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    546a:	6849      	ldr	r1, [r1, #4]
    546c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5470:	2900      	cmp	r1, #0
    5472:	d000      	beq.n	5476 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5474:	1d08      	adds	r0, r1, #4
    5476:	bd10      	pop	{r4, pc}
    5478:	21ee      	movs	r1, #238	; 0xee
    547a:	2018      	movs	r0, #24
    547c:	f7ff fbd8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5480:	20000090 	.word	0x20000090

00005484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5484:	490a      	ldr	r1, [pc, #40]	; (54b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5486:	b510      	push	{r4, lr}
    5488:	4602      	mov	r2, r0
    548a:	6809      	ldr	r1, [r1, #0]
    548c:	2000      	movs	r0, #0
    548e:	b159      	cbz	r1, 54a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5490:	7a0b      	ldrb	r3, [r1, #8]
    5492:	4293      	cmp	r3, r2
    5494:	d907      	bls.n	54a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5496:	6849      	ldr	r1, [r1, #4]
    5498:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    549c:	2900      	cmp	r1, #0
    549e:	d002      	beq.n	54a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    54a0:	f831 0b04 	ldrh.w	r0, [r1], #4
    54a4:	4408      	add	r0, r1
    54a6:	bd10      	pop	{r4, pc}
    54a8:	21fc      	movs	r1, #252	; 0xfc
    54aa:	2018      	movs	r0, #24
    54ac:	f7ff fbc0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b0:	20000090 	.word	0x20000090
    54b4:	4909      	ldr	r1, [pc, #36]	; (54dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    54b6:	b510      	push	{r4, lr}
    54b8:	4807      	ldr	r0, [pc, #28]	; (54d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    54ba:	6008      	str	r0, [r1, #0]
    54bc:	4b08      	ldr	r3, [pc, #32]	; (54e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    54be:	2011      	movs	r0, #17
    54c0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    54c4:	2200      	movs	r2, #0
    54c6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    54ca:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    54ce:	1c40      	adds	r0, r0, #1
    54d0:	b2c0      	uxtb	r0, r0
    54d2:	2814      	cmp	r0, #20
    54d4:	d3f4      	bcc.n	54c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    54d6:	bd10      	pop	{r4, pc}
    54d8:	fffe0000 	.word	0xfffe0000
    54dc:	4001f508 	.word	0x4001f508
    54e0:	4001f000 	.word	0x4001f000
    54e4:	b570      	push	{r4, r5, r6, lr}
    54e6:	2420      	movs	r4, #32
    54e8:	2100      	movs	r1, #0
    54ea:	2301      	movs	r3, #1
    54ec:	fa20 f201 	lsr.w	r2, r0, r1
    54f0:	07d2      	lsls	r2, r2, #31
    54f2:	d020      	beq.n	5536 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    54f4:	b24a      	sxtb	r2, r1
    54f6:	2a00      	cmp	r2, #0
    54f8:	db10      	blt.n	551c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    54fa:	bf00      	nop
    54fc:	ea4f 1652 	mov.w	r6, r2, lsr #5
    5500:	ea4f 0686 	mov.w	r6, r6, lsl #2
    5504:	f002 051f 	and.w	r5, r2, #31
    5508:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    550c:	fa03 f505 	lsl.w	r5, r3, r5
    5510:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5514:	f3bf 8f4f 	dsb	sy
    5518:	f3bf 8f6f 	isb	sy
    551c:	db0b      	blt.n	5536 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    551e:	f002 051f 	and.w	r5, r2, #31
    5522:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5526:	ea4f 0282 	mov.w	r2, r2, lsl #2
    552a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    552e:	fa03 f505 	lsl.w	r5, r3, r5
    5532:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5536:	f101 0101 	add.w	r1, r1, #1
    553a:	42a1      	cmp	r1, r4
    553c:	d3d6      	bcc.n	54ec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    553e:	bd70      	pop	{r4, r5, r6, pc}
    5540:	b570      	push	{r4, r5, r6, lr}
    5542:	0041      	lsls	r1, r0, #1
    5544:	f04f 0300 	mov.w	r3, #0
    5548:	d501      	bpl.n	554e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    554a:	491a      	ldr	r1, [pc, #104]	; (55b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    554c:	600b      	str	r3, [r1, #0]
    554e:	0484      	lsls	r4, r0, #18
    5550:	f04f 0101 	mov.w	r1, #1
    5554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5558:	d507      	bpl.n	556a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    555a:	4c17      	ldr	r4, [pc, #92]	; (55b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    555c:	6061      	str	r1, [r4, #4]
    555e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    5562:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    5566:	4c15      	ldr	r4, [pc, #84]	; (55bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    5568:	6023      	str	r3, [r4, #0]
    556a:	f3c0 3480 	ubfx	r4, r0, #14, #1
    556e:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    5572:	42ac      	cmp	r4, r5
    5574:	d003      	beq.n	557e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    5576:	2172      	movs	r1, #114	; 0x72
    5578:	201b      	movs	r0, #27
    557a:	f7ff fb59 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    557e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5582:	d012      	beq.n	55aa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    5584:	480e      	ldr	r0, [pc, #56]	; (55c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    5586:	6041      	str	r1, [r0, #4]
    5588:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    558c:	480d      	ldr	r0, [pc, #52]	; (55c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    558e:	6081      	str	r1, [r0, #8]
    5590:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    5594:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    5598:	4c0b      	ldr	r4, [pc, #44]	; (55c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    559a:	6023      	str	r3, [r4, #0]
    559c:	1d25      	adds	r5, r4, #4
    559e:	6029      	str	r1, [r5, #0]
    55a0:	6081      	str	r1, [r0, #8]
    55a2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    55a6:	6023      	str	r3, [r4, #0]
    55a8:	6029      	str	r1, [r5, #0]
    55aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55ae:	f7ff bf81 	b.w	54b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    55b2:	0000      	.short	0x0000
    55b4:	4001e504 	.word	0x4001e504
    55b8:	4000d000 	.word	0x4000d000
    55bc:	4000d504 	.word	0x4000d504
    55c0:	4000e000 	.word	0x4000e000
    55c4:	4000f000 	.word	0x4000f000
    55c8:	4000f500 	.word	0x4000f500

000055cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    55cc:	b570      	push	{r4, r5, r6, lr}
    55ce:	4c0b      	ldr	r4, [pc, #44]	; (55fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    55d0:	460d      	mov	r5, r1
    55d2:	6020      	str	r0, [r4, #0]
    55d4:	f7ff ffb4 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    55d8:	6820      	ldr	r0, [r4, #0]
    55da:	f7ff ff83 	bl	54e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    55de:	f000 f879 	bl	56d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    55e2:	f000 f959 	bl	5898 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    55e6:	f7ff ff65 	bl	54b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    55ea:	f00b fe5b 	bl	112a4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    55ee:	4628      	mov	r0, r5
    55f0:	f000 f8aa 	bl	5748 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    55f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55f8:	f000 b8c2 	b.w	5780 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    55fc:	20000094 	.word	0x20000094

00005600 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    5600:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5604:	4e2f      	ldr	r6, [pc, #188]	; (56c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    5606:	4683      	mov	fp, r0
    5608:	6830      	ldr	r0, [r6, #0]
    560a:	9001      	str	r0, [sp, #4]
    560c:	2701      	movs	r7, #1
    560e:	482e      	ldr	r0, [pc, #184]	; (56c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    5610:	f00a fc8f 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5614:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 56c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    5618:	b920      	cbnz	r0, 5624 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    561a:	2700      	movs	r7, #0
    561c:	f108 0001 	add.w	r0, r8, #1
    5620:	f00a fc9e 	bl	ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5624:	4c29      	ldr	r4, [pc, #164]	; (56cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    5626:	2500      	movs	r5, #0
    5628:	f04f 0903 	mov.w	r9, #3
    562c:	2001      	movs	r0, #1
    562e:	6060      	str	r0, [r4, #4]
    5630:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5634:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5638:	f8c6 b000 	str.w	fp, [r6]
    563c:	6020      	str	r0, [r4, #0]
    563e:	f8df a090 	ldr.w	sl, [pc, #144]	; 56d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    5642:	e017      	b.n	5674 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5644:	f8da 0000 	ldr.w	r0, [sl]
    5648:	06c0      	lsls	r0, r0, #27
    564a:	d513      	bpl.n	5674 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    564c:	200e      	movs	r0, #14
    564e:	f00b fdfc 	bl	1124a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    5652:	f3ef 8010 	mrs	r0, PRIMASK
    5656:	9000      	str	r0, [sp, #0]
    5658:	b672      	cpsid	i
    565a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    565e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5662:	b920      	cbnz	r0, 566e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5664:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5668:	b908      	cbnz	r0, 566e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    566a:	f7ff f925 	bl	48b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    566e:	9800      	ldr	r0, [sp, #0]
    5670:	b900      	cbnz	r0, 5674 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5672:	b662      	cpsie	i
    5674:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5678:	b918      	cbnz	r0, 5682 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    567a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    567e:	2800      	cmp	r0, #0
    5680:	d0e0      	beq.n	5644 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    5682:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5686:	2800      	cmp	r0, #0
    5688:	d1d0      	bne.n	562c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    568a:	b137      	cbz	r7, 569a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    568c:	9801      	ldr	r0, [sp, #4]
    568e:	6030      	str	r0, [r6, #0]
    5690:	f108 0001 	add.w	r0, r8, #1
    5694:	f00a fc4d 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5698:	e011      	b.n	56be <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    569a:	f108 0001 	add.w	r0, r8, #1
    569e:	f00a fc48 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    56a2:	2800      	cmp	r0, #0
    56a4:	d1ba      	bne.n	561c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    56a6:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    56aa:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    56ae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    56b2:	200e      	movs	r0, #14
    56b4:	f00b fdc9 	bl	1124a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    56b8:	4803      	ldr	r0, [pc, #12]	; (56c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    56ba:	f00a fc51 	bl	ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    56be:	2000      	movs	r0, #0
    56c0:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    56c4:	4000e504 	.word	0x4000e504
    56c8:	200003ac 	.word	0x200003ac
    56cc:	4000e000 	.word	0x4000e000
    56d0:	e000ed10 	.word	0xe000ed10

000056d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    56d4:	b510      	push	{r4, lr}
    56d6:	4808      	ldr	r0, [pc, #32]	; (56f8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    56d8:	f00a fc3e 	bl	ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    56dc:	b108      	cbz	r0, 56e2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    56de:	2124      	movs	r1, #36	; 0x24
    56e0:	e006      	b.n	56f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    56e2:	4805      	ldr	r0, [pc, #20]	; (56f8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    56e4:	1c40      	adds	r0, r0, #1
    56e6:	f00a fc37 	bl	ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    56ea:	2800      	cmp	r0, #0
    56ec:	d003      	beq.n	56f6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    56ee:	2128      	movs	r1, #40	; 0x28
    56f0:	201d      	movs	r0, #29
    56f2:	f7ff fa9d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f6:	bd10      	pop	{r4, pc}
    56f8:	200003ac 	.word	0x200003ac

000056fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    56fc:	b570      	push	{r4, r5, r6, lr}
    56fe:	4911      	ldr	r1, [pc, #68]	; (5744 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5700:	680a      	ldr	r2, [r1, #0]
    5702:	b1ea      	cbz	r2, 5740 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5704:	2300      	movs	r3, #0
    5706:	461d      	mov	r5, r3
    5708:	2401      	movs	r4, #1
    570a:	684a      	ldr	r2, [r1, #4]
    570c:	1c52      	adds	r2, r2, #1
    570e:	604a      	str	r2, [r1, #4]
    5710:	2a0c      	cmp	r2, #12
    5712:	d300      	bcc.n	5716 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5714:	604d      	str	r5, [r1, #4]
    5716:	790e      	ldrb	r6, [r1, #4]
    5718:	fa04 f206 	lsl.w	r2, r4, r6
    571c:	680e      	ldr	r6, [r1, #0]
    571e:	4216      	tst	r6, r2
    5720:	d00b      	beq.n	573a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5722:	f3ef 8310 	mrs	r3, PRIMASK
    5726:	b672      	cpsid	i
    5728:	680c      	ldr	r4, [r1, #0]
    572a:	4394      	bics	r4, r2
    572c:	600c      	str	r4, [r1, #0]
    572e:	b903      	cbnz	r3, 5732 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5730:	b662      	cpsie	i
    5732:	6849      	ldr	r1, [r1, #4]
    5734:	6001      	str	r1, [r0, #0]
    5736:	2000      	movs	r0, #0
    5738:	bd70      	pop	{r4, r5, r6, pc}
    573a:	1c5b      	adds	r3, r3, #1
    573c:	2b0c      	cmp	r3, #12
    573e:	d3e4      	bcc.n	570a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5740:	2005      	movs	r0, #5
    5742:	bd70      	pop	{r4, r5, r6, pc}
    5744:	20000098 	.word	0x20000098

00005748 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5748:	4802      	ldr	r0, [pc, #8]	; (5754 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    574a:	2100      	movs	r1, #0
    574c:	6001      	str	r1, [r0, #0]
    574e:	6041      	str	r1, [r0, #4]
    5750:	4770      	bx	lr
    5752:	0000      	.short	0x0000
    5754:	20000098 	.word	0x20000098

00005758 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5758:	b510      	push	{r4, lr}
    575a:	4c08      	ldr	r4, [pc, #32]	; (577c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    575c:	7861      	ldrb	r1, [r4, #1]
    575e:	b109      	cbz	r1, 5764 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5760:	200f      	movs	r0, #15
    5762:	bd10      	pop	{r4, pc}
    5764:	f7ff f834 	bl	47d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5768:	7020      	strb	r0, [r4, #0]
    576a:	28ff      	cmp	r0, #255	; 0xff
    576c:	d001      	beq.n	5772 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    576e:	2000      	movs	r0, #0
    5770:	bd10      	pop	{r4, pc}
    5772:	2176      	movs	r1, #118	; 0x76
    5774:	201f      	movs	r0, #31
    5776:	f7ff fa5b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    577a:	0000      	.short	0x0000
    577c:	200000a0 	.word	0x200000a0

00005780 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5780:	4901      	ldr	r1, [pc, #4]	; (5788 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5782:	2000      	movs	r0, #0
    5784:	7048      	strb	r0, [r1, #1]
    5786:	4770      	bx	lr
    5788:	200000a0 	.word	0x200000a0

0000578c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    578c:	4906      	ldr	r1, [pc, #24]	; (57a8 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    578e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    5792:	2801      	cmp	r0, #1
    5794:	d107      	bne.n	57a6 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    5796:	4805      	ldr	r0, [pc, #20]	; (57ac <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    5798:	6800      	ldr	r0, [r0, #0]
    579a:	2200      	movs	r2, #0
    579c:	b2c0      	uxtb	r0, r0
    579e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    57a2:	f000 b8df 	b.w	5964 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    57a6:	4770      	bx	lr
    57a8:	4000d000 	.word	0x4000d000
    57ac:	4000d508 	.word	0x4000d508

000057b0 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    57b0:	4901      	ldr	r1, [pc, #4]	; (57b8 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    57b2:	2001      	movs	r0, #1
    57b4:	6008      	str	r0, [r1, #0]
    57b6:	4770      	bx	lr
    57b8:	4000d504 	.word	0x4000d504

000057bc <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    57bc:	b510      	push	{r4, lr}
    57be:	4806      	ldr	r0, [pc, #24]	; (57d8 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    57c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    57c4:	2900      	cmp	r1, #0
    57c6:	d0fb      	beq.n	57c0 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    57c8:	f7ff ffe0 	bl	578c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    57cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    57d0:	200d      	movs	r0, #13
    57d2:	f00b bd49 	b.w	11268 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    57d6:	0000      	.short	0x0000
    57d8:	4000d000 	.word	0x4000d000

000057dc <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    57dc:	b570      	push	{r4, r5, r6, lr}
    57de:	200d      	movs	r0, #13
    57e0:	f00b fd4f 	bl	11282 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    57e4:	4c08      	ldr	r4, [pc, #32]	; (5808 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    57e6:	2000      	movs	r0, #0
    57e8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    57ec:	2501      	movs	r5, #1
    57ee:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    57f2:	200d      	movs	r0, #13
    57f4:	f00b fd38 	bl	11268 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    57f8:	6025      	str	r5, [r4, #0]
    57fa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    57fe:	1460      	asrs	r0, r4, #17
    5800:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    5804:	bd70      	pop	{r4, r5, r6, pc}
    5806:	0000      	.short	0x0000
    5808:	4000d000 	.word	0x4000d000

0000580c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    580c:	b510      	push	{r4, lr}
    580e:	200d      	movs	r0, #13
    5810:	f00b fd37 	bl	11282 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    5814:	4805      	ldr	r0, [pc, #20]	; (582c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    5816:	2101      	movs	r1, #1
    5818:	6041      	str	r1, [r0, #4]
    581a:	2100      	movs	r1, #0
    581c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    5820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5824:	200d      	movs	r0, #13
    5826:	f00b bd1f 	b.w	11268 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    582a:	0000      	.short	0x0000
    582c:	4000d000 	.word	0x4000d000
    5830:	b510      	push	{r4, lr}
    5832:	4805      	ldr	r0, [pc, #20]	; (5848 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    5834:	f00a fb7d 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5838:	2800      	cmp	r0, #0
    583a:	d103      	bne.n	5844 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5840:	f7ff bfcc 	b.w	57dc <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    5844:	bd10      	pop	{r4, pc}
    5846:	0000      	.short	0x0000
    5848:	200000bc 	.word	0x200000bc
    584c:	b570      	push	{r4, r5, r6, lr}
    584e:	4615      	mov	r5, r2
    5850:	460e      	mov	r6, r1
    5852:	4604      	mov	r4, r0
    5854:	f00b fd40 	bl	112d8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    5858:	42a8      	cmp	r0, r5
    585a:	d318      	bcc.n	588e <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x82>
    585c:	2000      	movs	r0, #0
    585e:	2141      	movs	r1, #65	; 0x41
    5860:	e00f      	b.n	5882 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x76>
    5862:	bf00      	nop
    5864:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    5868:	5ce3      	ldrb	r3, [r4, r3]
    586a:	5433      	strb	r3, [r6, r0]
    586c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    5870:	1c52      	adds	r2, r2, #1
    5872:	fbb2 f3f1 	udiv	r3, r2, r1
    5876:	fb01 2213 	mls	r2, r1, r3, r2
    587a:	1c40      	adds	r0, r0, #1
    587c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5880:	b2c0      	uxtb	r0, r0
    5882:	42a8      	cmp	r0, r5
    5884:	d3ee      	bcc.n	5864 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x58>
    5886:	f7ff ffd3 	bl	5830 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    588a:	4628      	mov	r0, r5
    588c:	bd70      	pop	{r4, r5, r6, pc}
    588e:	f7ff ffcf 	bl	5830 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    5892:	2000      	movs	r0, #0
    5894:	bd70      	pop	{r4, r5, r6, pc}
	...

00005898 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    5898:	490e      	ldr	r1, [pc, #56]	; (58d4 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    589a:	b510      	push	{r4, lr}
    589c:	2000      	movs	r0, #0
    589e:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    58a2:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    58a6:	3143      	adds	r1, #67	; 0x43
    58a8:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    58ac:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    58b0:	3143      	adds	r1, #67	; 0x43
    58b2:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    58b6:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    58ba:	4807      	ldr	r0, [pc, #28]	; (58d8 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    58bc:	f00a fb4c 	bl	ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58c0:	4805      	ldr	r0, [pc, #20]	; (58d8 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    58c2:	1c40      	adds	r0, r0, #1
    58c4:	f00a fb48 	bl	ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58c8:	f7ff ff72 	bl	57b0 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    58cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58d0:	f7ff bfae 	b.w	5830 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    58d4:	20001960 	.word	0x20001960
    58d8:	200000bc 	.word	0x200000bc

000058dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    58dc:	460a      	mov	r2, r1
    58de:	4601      	mov	r1, r0
    58e0:	4801      	ldr	r0, [pc, #4]	; (58e8 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    58e2:	f7ff bfb3 	b.w	584c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    58e6:	0000      	.short	0x0000
    58e8:	200019a3 	.word	0x200019a3

000058ec <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    58ec:	4801      	ldr	r0, [pc, #4]	; (58f4 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    58ee:	f00b bcf3 	b.w	112d8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    58f2:	0000      	.short	0x0000
    58f4:	20001960 	.word	0x20001960

000058f8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    58f8:	460a      	mov	r2, r1
    58fa:	b510      	push	{r4, lr}
    58fc:	4601      	mov	r1, r0
    58fe:	4803      	ldr	r0, [pc, #12]	; (590c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0x14>)
    5900:	f7ff ffa4 	bl	584c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    5904:	2800      	cmp	r0, #0
    5906:	d000      	beq.n	590a <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0x12>
    5908:	2001      	movs	r0, #1
    590a:	bd10      	pop	{r4, pc}
    590c:	20001960 	.word	0x20001960

00005910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    5910:	b570      	push	{r4, r5, r6, lr}
    5912:	460c      	mov	r4, r1
    5914:	4606      	mov	r6, r0
    5916:	2941      	cmp	r1, #65	; 0x41
    5918:	d903      	bls.n	5922 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    591a:	21fb      	movs	r1, #251	; 0xfb
    591c:	2023      	movs	r0, #35	; 0x23
    591e:	f7ff f987 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5922:	480e      	ldr	r0, [pc, #56]	; (595c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    5924:	6800      	ldr	r0, [r0, #0]
    5926:	3810      	subs	r0, #16
    5928:	b240      	sxtb	r0, r0
    592a:	f00b fcc6 	bl	112ba <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    592e:	b2c5      	uxtb	r5, r0
    5930:	200d      	movs	r0, #13
    5932:	f00b fcc2 	bl	112ba <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    5936:	b2c0      	uxtb	r0, r0
    5938:	4285      	cmp	r5, r0
    593a:	d801      	bhi.n	5940 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    593c:	2501      	movs	r5, #1
    593e:	e004      	b.n	594a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    5940:	2500      	movs	r5, #0
    5942:	e002      	b.n	594a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    5944:	b10d      	cbz	r5, 594a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    5946:	f7ff ff39 	bl	57bc <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    594a:	4622      	mov	r2, r4
    594c:	4631      	mov	r1, r6
    594e:	4804      	ldr	r0, [pc, #16]	; (5960 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    5950:	f7ff ff7c 	bl	584c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    5954:	2800      	cmp	r0, #0
    5956:	d0f5      	beq.n	5944 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    5958:	bd70      	pop	{r4, r5, r6, pc}
    595a:	0000      	.short	0x0000
    595c:	e000ed04 	.word	0xe000ed04
    5960:	20001960 	.word	0x20001960

00005964 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    5964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5968:	4f1f      	ldr	r7, [pc, #124]	; (59e8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    596a:	4606      	mov	r6, r0
    596c:	2500      	movs	r5, #0
    596e:	bf00      	nop
    5970:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    5974:	4620      	mov	r0, r4
    5976:	f00b fcbb 	bl	112f0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    597a:	b300      	cbz	r0, 59be <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    597c:	1c6d      	adds	r5, r5, #1
    597e:	b2ed      	uxtb	r5, r5
    5980:	2d03      	cmp	r5, #3
    5982:	d3f5      	bcc.n	5970 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    5984:	4819      	ldr	r0, [pc, #100]	; (59ec <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    5986:	f00b fcb3 	bl	112f0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    598a:	2800      	cmp	r0, #0
    598c:	d02a      	beq.n	59e4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    598e:	4817      	ldr	r0, [pc, #92]	; (59ec <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    5990:	3843      	subs	r0, #67	; 0x43
    5992:	f00b fcad 	bl	112f0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    5996:	2800      	cmp	r0, #0
    5998:	d024      	beq.n	59e4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    599a:	4814      	ldr	r0, [pc, #80]	; (59ec <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    599c:	3043      	adds	r0, #67	; 0x43
    599e:	f00b fca7 	bl	112f0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    59a2:	2800      	cmp	r0, #0
    59a4:	d01e      	beq.n	59e4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    59a6:	f7ff ff31 	bl	580c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    59aa:	480f      	ldr	r0, [pc, #60]	; (59e8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    59ac:	1f00      	subs	r0, r0, #4
    59ae:	f00a fac0 	bl	ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    59b2:	3023      	adds	r0, #35	; 0x23
    59b4:	d010      	beq.n	59d8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    59b6:	21b3      	movs	r1, #179	; 0xb3
    59b8:	2023      	movs	r0, #35	; 0x23
    59ba:	f7ff f939 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59be:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    59c2:	2141      	movs	r1, #65	; 0x41
    59c4:	5426      	strb	r6, [r4, r0]
    59c6:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    59ca:	1c40      	adds	r0, r0, #1
    59cc:	fbb0 f2f1 	udiv	r2, r0, r1
    59d0:	fb01 0012 	mls	r0, r1, r2, r0
    59d4:	7020      	strb	r0, [r4, #0]
    59d6:	e7d5      	b.n	5984 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    59d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59dc:	4802      	ldr	r0, [pc, #8]	; (59e8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    59de:	1f00      	subs	r0, r0, #4
    59e0:	f00a babe 	b.w	ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    59e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59e8:	200000c0 	.word	0x200000c0
    59ec:	200019a3 	.word	0x200019a3

000059f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    59f0:	4905      	ldr	r1, [pc, #20]	; (5a08 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    59f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    59f4:	4282      	cmp	r2, r0
    59f6:	bf18      	it	ne
    59f8:	4770      	bxne	lr
    59fa:	2000      	movs	r0, #0
    59fc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5a00:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5a04:	8488      	strh	r0, [r1, #36]	; 0x24
    5a06:	4770      	bx	lr
    5a08:	200018f0 	.word	0x200018f0

00005a0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5a0c:	4806      	ldr	r0, [pc, #24]	; (5a28 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5a0e:	4a07      	ldr	r2, [pc, #28]	; (5a2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5a10:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a12:	8852      	ldrh	r2, [r2, #2]
    5a14:	4291      	cmp	r1, r2
    5a16:	d105      	bne.n	5a24 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    5a18:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5a1c:	2800      	cmp	r0, #0
    5a1e:	bf1c      	itt	ne
    5a20:	2000      	movne	r0, #0
    5a22:	4770      	bxne	lr
    5a24:	2001      	movs	r0, #1
    5a26:	4770      	bx	lr
    5a28:	200018f0 	.word	0x200018f0
    5a2c:	20000398 	.word	0x20000398

00005a30 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5a30:	4901      	ldr	r1, [pc, #4]	; (5a38 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5a32:	8048      	strh	r0, [r1, #2]
    5a34:	4770      	bx	lr
    5a36:	0000      	.short	0x0000
    5a38:	20000398 	.word	0x20000398

00005a3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5a3c:	4808      	ldr	r0, [pc, #32]	; (5a60 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5a3e:	4a09      	ldr	r2, [pc, #36]	; (5a64 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5a40:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a42:	8852      	ldrh	r2, [r2, #2]
    5a44:	4291      	cmp	r1, r2
    5a46:	d109      	bne.n	5a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a4c:	8481      	strh	r1, [r0, #36]	; 0x24
    5a4e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5a52:	b119      	cbz	r1, 5a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a54:	2100      	movs	r1, #0
    5a56:	7001      	strb	r1, [r0, #0]
    5a58:	2001      	movs	r0, #1
    5a5a:	4770      	bx	lr
    5a5c:	2000      	movs	r0, #0
    5a5e:	4770      	bx	lr
    5a60:	200018f0 	.word	0x200018f0
    5a64:	20000398 	.word	0x20000398

00005a68 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5a68:	4907      	ldr	r1, [pc, #28]	; (5a88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5a6a:	f101 0022 	add.w	r0, r1, #34	; 0x22
    5a6e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a72:	2a01      	cmp	r2, #1
    5a74:	bf04      	itt	eq
    5a76:	2000      	moveq	r0, #0
    5a78:	4770      	bxeq	lr
    5a7a:	2201      	movs	r2, #1
    5a7c:	7002      	strb	r2, [r0, #0]
    5a7e:	4803      	ldr	r0, [pc, #12]	; (5a8c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5a80:	8800      	ldrh	r0, [r0, #0]
    5a82:	8488      	strh	r0, [r1, #36]	; 0x24
    5a84:	4610      	mov	r0, r2
    5a86:	4770      	bx	lr
    5a88:	200018f0 	.word	0x200018f0
    5a8c:	20000398 	.word	0x20000398

00005a90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5a90:	4907      	ldr	r1, [pc, #28]	; (5ab0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5a92:	4b08      	ldr	r3, [pc, #32]	; (5ab4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    5a94:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a96:	885b      	ldrh	r3, [r3, #2]
    5a98:	429a      	cmp	r2, r3
    5a9a:	d106      	bne.n	5aaa <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    5a9c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5aa0:	2a00      	cmp	r2, #0
    5aa2:	bf1e      	ittt	ne
    5aa4:	6001      	strne	r1, [r0, #0]
    5aa6:	2001      	movne	r0, #1
    5aa8:	4770      	bxne	lr
    5aaa:	2000      	movs	r0, #0
    5aac:	4770      	bx	lr
    5aae:	0000      	.short	0x0000
    5ab0:	200018f0 	.word	0x200018f0
    5ab4:	20000398 	.word	0x20000398

00005ab8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5ab8:	4909      	ldr	r1, [pc, #36]	; (5ae0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5aba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5abc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5ac0:	3bff      	subs	r3, #255	; 0xff
    5ac2:	d003      	beq.n	5acc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    5ac4:	2100      	movs	r1, #0
    5ac6:	6001      	str	r1, [r0, #0]
    5ac8:	4608      	mov	r0, r1
    5aca:	4770      	bx	lr
    5acc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5ad0:	4903      	ldr	r1, [pc, #12]	; (5ae0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5ad2:	2a01      	cmp	r2, #1
    5ad4:	bf1a      	itte	ne
    5ad6:	6001      	strne	r1, [r0, #0]
    5ad8:	2001      	movne	r0, #1
    5ada:	2000      	moveq	r0, #0
    5adc:	4770      	bx	lr
    5ade:	0000      	.short	0x0000
    5ae0:	200018f0 	.word	0x200018f0

00005ae4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5ae4:	4901      	ldr	r1, [pc, #4]	; (5aec <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5ae6:	8008      	strh	r0, [r1, #0]
    5ae8:	4770      	bx	lr
    5aea:	0000      	.short	0x0000
    5aec:	20000398 	.word	0x20000398

00005af0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    5af0:	4905      	ldr	r1, [pc, #20]	; (5b08 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    5af2:	2000      	movs	r0, #0
    5af4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5afc:	8488      	strh	r0, [r1, #36]	; 0x24
    5afe:	4903      	ldr	r1, [pc, #12]	; (5b0c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    5b00:	8008      	strh	r0, [r1, #0]
    5b02:	8048      	strh	r0, [r1, #2]
    5b04:	4770      	bx	lr
    5b06:	0000      	.short	0x0000
    5b08:	200018f0 	.word	0x200018f0
    5b0c:	20000398 	.word	0x20000398

00005b10 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5b10:	4905      	ldr	r1, [pc, #20]	; (5b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5b12:	2000      	movs	r0, #0
    5b14:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5b18:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5b1c:	8488      	strh	r0, [r1, #36]	; 0x24
    5b1e:	4903      	ldr	r1, [pc, #12]	; (5b2c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5b20:	8008      	strh	r0, [r1, #0]
    5b22:	8048      	strh	r0, [r1, #2]
    5b24:	4770      	bx	lr
    5b26:	0000      	.short	0x0000
    5b28:	200018f0 	.word	0x200018f0
    5b2c:	20000398 	.word	0x20000398

00005b30 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    5b30:	4b0d      	ldr	r3, [pc, #52]	; (5b68 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    5b32:	b169      	cbz	r1, 5b50 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    5b34:	2901      	cmp	r1, #1
    5b36:	bf04      	itt	eq
    5b38:	7899      	ldrbeq	r1, [r3, #2]
    5b3a:	4281      	cmpeq	r1, r0
    5b3c:	d110      	bne.n	5b60 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    5b3e:	f8d3 000f 	ldr.w	r0, [r3, #15]
    5b42:	6010      	str	r0, [r2, #0]
    5b44:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    5b48:	8090      	strh	r0, [r2, #4]
    5b4a:	f04f 0001 	mov.w	r0, #1
    5b4e:	4770      	bx	lr
    5b50:	7858      	ldrb	r0, [r3, #1]
    5b52:	b128      	cbz	r0, 5b60 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    5b54:	f8d3 0003 	ldr.w	r0, [r3, #3]
    5b58:	6010      	str	r0, [r2, #0]
    5b5a:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    5b5e:	e7f3      	b.n	5b48 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    5b60:	f04f 0000 	mov.w	r0, #0
    5b64:	4770      	bx	lr
    5b66:	0000      	.short	0x0000
    5b68:	200003ae 	.word	0x200003ae

00005b6c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    5b6c:	4a07      	ldr	r2, [pc, #28]	; (5b8c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    5b6e:	b129      	cbz	r1, 5b7c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    5b70:	2901      	cmp	r1, #1
    5b72:	bf04      	itt	eq
    5b74:	7891      	ldrbeq	r1, [r2, #2]
    5b76:	4281      	cmpeq	r1, r0
    5b78:	d002      	beq.n	5b80 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    5b7a:	e004      	b.n	5b86 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    5b7c:	7850      	ldrb	r0, [r2, #1]
    5b7e:	b110      	cbz	r0, 5b86 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    5b80:	f04f 0001 	mov.w	r0, #1
    5b84:	4770      	bx	lr
    5b86:	f04f 0000 	mov.w	r0, #0
    5b8a:	4770      	bx	lr
    5b8c:	200003ae 	.word	0x200003ae

00005b90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5b90:	4a0c      	ldr	r2, [pc, #48]	; (5bc4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    5b92:	b110      	cbz	r0, 5b9a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5b94:	2801      	cmp	r0, #1
    5b96:	d008      	beq.n	5baa <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    5b98:	e011      	b.n	5bbe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    5b9a:	7850      	ldrb	r0, [r2, #1]
    5b9c:	b178      	cbz	r0, 5bbe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    5b9e:	f8d2 0003 	ldr.w	r0, [r2, #3]
    5ba2:	6008      	str	r0, [r1, #0]
    5ba4:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    5ba8:	e006      	b.n	5bb8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5baa:	7810      	ldrb	r0, [r2, #0]
    5bac:	b138      	cbz	r0, 5bbe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    5bae:	f8d2 0009 	ldr.w	r0, [r2, #9]
    5bb2:	6008      	str	r0, [r1, #0]
    5bb4:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    5bb8:	8088      	strh	r0, [r1, #4]
    5bba:	2001      	movs	r0, #1
    5bbc:	4770      	bx	lr
    5bbe:	2000      	movs	r0, #0
    5bc0:	4770      	bx	lr
    5bc2:	0000      	.short	0x0000
    5bc4:	200003ae 	.word	0x200003ae

00005bc8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    5bc8:	4901      	ldr	r1, [pc, #4]	; (5bd0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    5bca:	20ff      	movs	r0, #255	; 0xff
    5bcc:	7088      	strb	r0, [r1, #2]
    5bce:	4770      	bx	lr
    5bd0:	200003ae 	.word	0x200003ae

00005bd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5bd4:	4a0a      	ldr	r2, [pc, #40]	; (5c00 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    5bd6:	2301      	movs	r3, #1
    5bd8:	b150      	cbz	r0, 5bf0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    5bda:	2801      	cmp	r0, #1
    5bdc:	bf18      	it	ne
    5bde:	4770      	bxne	lr
    5be0:	7013      	strb	r3, [r2, #0]
    5be2:	6808      	ldr	r0, [r1, #0]
    5be4:	f8c2 0009 	str.w	r0, [r2, #9]
    5be8:	8888      	ldrh	r0, [r1, #4]
    5bea:	f8a2 000d 	strh.w	r0, [r2, #13]
    5bee:	4770      	bx	lr
    5bf0:	7053      	strb	r3, [r2, #1]
    5bf2:	6808      	ldr	r0, [r1, #0]
    5bf4:	f8c2 0003 	str.w	r0, [r2, #3]
    5bf8:	8888      	ldrh	r0, [r1, #4]
    5bfa:	f8a2 0007 	strh.w	r0, [r2, #7]
    5bfe:	4770      	bx	lr
    5c00:	200003ae 	.word	0x200003ae

00005c04 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5c04:	4906      	ldr	r1, [pc, #24]	; (5c20 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5c06:	b110      	cbz	r0, 5c0e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5c08:	2801      	cmp	r0, #1
    5c0a:	d003      	beq.n	5c14 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5c0c:	e006      	b.n	5c1c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    5c0e:	7848      	ldrb	r0, [r1, #1]
    5c10:	b910      	cbnz	r0, 5c18 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    5c12:	e003      	b.n	5c1c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    5c14:	7808      	ldrb	r0, [r1, #0]
    5c16:	b108      	cbz	r0, 5c1c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    5c18:	2001      	movs	r0, #1
    5c1a:	4770      	bx	lr
    5c1c:	2000      	movs	r0, #0
    5c1e:	4770      	bx	lr
    5c20:	200003ae 	.word	0x200003ae

00005c24 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    5c24:	4901      	ldr	r1, [pc, #4]	; (5c2c <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    5c26:	2001      	movs	r0, #1
    5c28:	7148      	strb	r0, [r1, #5]
    5c2a:	4770      	bx	lr
    5c2c:	200000cc 	.word	0x200000cc

00005c30 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5c30:	4901      	ldr	r1, [pc, #4]	; (5c38 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5c32:	7448      	strb	r0, [r1, #17]
    5c34:	4770      	bx	lr
    5c36:	0000      	.short	0x0000
    5c38:	20000bfa 	.word	0x20000bfa

00005c3c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5c3c:	4801      	ldr	r0, [pc, #4]	; (5c44 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5c3e:	78c0      	ldrb	r0, [r0, #3]
    5c40:	4770      	bx	lr
    5c42:	0000      	.short	0x0000
    5c44:	200000cc 	.word	0x200000cc

00005c48 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5c48:	4801      	ldr	r0, [pc, #4]	; (5c50 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5c4a:	7900      	ldrb	r0, [r0, #4]
    5c4c:	4770      	bx	lr
    5c4e:	0000      	.short	0x0000
    5c50:	200000cc 	.word	0x200000cc

00005c54 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5c54:	4910      	ldr	r1, [pc, #64]	; (5c98 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    5c56:	b430      	push	{r4, r5}
    5c58:	7c4a      	ldrb	r2, [r1, #17]
    5c5a:	2a00      	cmp	r2, #0
    5c5c:	bf19      	ittee	ne
    5c5e:	7c0a      	ldrbne	r2, [r1, #16]
    5c60:	2a00      	cmpne	r2, #0
    5c62:	2000      	moveq	r0, #0
    5c64:	bc30      	popeq	{r4, r5}
    5c66:	bf08      	it	eq
    5c68:	4770      	bxeq	lr
    5c6a:	f04f 0200 	mov.w	r2, #0
    5c6e:	f04f 0c1f 	mov.w	ip, #31
    5c72:	4b0a      	ldr	r3, [pc, #40]	; (5c9c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    5c74:	740a      	strb	r2, [r1, #16]
    5c76:	7042      	strb	r2, [r0, #1]
    5c78:	f880 c000 	strb.w	ip, [r0]
    5c7c:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    5c80:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    5c84:	6044      	str	r4, [r0, #4]
    5c86:	6085      	str	r5, [r0, #8]
    5c88:	7c0c      	ldrb	r4, [r1, #16]
    5c8a:	2c00      	cmp	r4, #0
    5c8c:	d1f2      	bne.n	5c74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    5c8e:	bc30      	pop	{r4, r5}
    5c90:	f04f 0001 	mov.w	r0, #1
    5c94:	4770      	bx	lr
    5c96:	0000      	.short	0x0000
    5c98:	20000bfa 	.word	0x20000bfa
    5c9c:	20000aa8 	.word	0x20000aa8

00005ca0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5ca0:	b570      	push	{r4, r5, r6, lr}
    5ca2:	4c09      	ldr	r4, [pc, #36]	; (5cc8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    5ca4:	4606      	mov	r6, r0
    5ca6:	460d      	mov	r5, r1
    5ca8:	7820      	ldrb	r0, [r4, #0]
    5caa:	b118      	cbz	r0, 5cb4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    5cac:	21ab      	movs	r1, #171	; 0xab
    5cae:	2027      	movs	r0, #39	; 0x27
    5cb0:	f7fe ffbe 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cb4:	4905      	ldr	r1, [pc, #20]	; (5ccc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x2c>)
    5cb6:	2000      	movs	r0, #0
    5cb8:	7448      	strb	r0, [r1, #17]
    5cba:	2101      	movs	r1, #1
    5cbc:	4804      	ldr	r0, [pc, #16]	; (5cd0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x30>)
    5cbe:	f00b fed3 	bl	11a68 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5cc2:	7226      	strb	r6, [r4, #8]
    5cc4:	6325      	str	r5, [r4, #48]	; 0x30
    5cc6:	bd70      	pop	{r4, r5, r6, pc}
    5cc8:	200000cc 	.word	0x200000cc
    5ccc:	20000bfa 	.word	0x20000bfa
    5cd0:	20000bd8 	.word	0x20000bd8

00005cd4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5cd4:	4901      	ldr	r1, [pc, #4]	; (5cdc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5cd6:	2001      	movs	r0, #1
    5cd8:	71c8      	strb	r0, [r1, #7]
    5cda:	4770      	bx	lr
    5cdc:	200000cc 	.word	0x200000cc

00005ce0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ce4:	4d82      	ldr	r5, [pc, #520]	; (5ef0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    5ce6:	b085      	sub	sp, #20
    5ce8:	782c      	ldrb	r4, [r5, #0]
    5cea:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    5cee:	2c00      	cmp	r4, #0
    5cf0:	d175      	bne.n	5dde <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5cf2:	2a00      	cmp	r2, #0
    5cf4:	bf1c      	itt	ne
    5cf6:	2b00      	cmpne	r3, #0
    5cf8:	f1bc 0f00 	cmpne.w	ip, #0
    5cfc:	d06f      	beq.n	5dde <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5cfe:	f8c5 c020 	str.w	ip, [r5, #32]
    5d02:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    5d06:	f04f 0000 	mov.w	r0, #0
    5d0a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    5d0e:	71e8      	strb	r0, [r5, #7]
    5d10:	71a8      	strb	r0, [r5, #6]
    5d12:	70e8      	strb	r0, [r5, #3]
    5d14:	70a8      	strb	r0, [r5, #2]
    5d16:	7128      	strb	r0, [r5, #4]
    5d18:	7168      	strb	r0, [r5, #5]
    5d1a:	4f76      	ldr	r7, [pc, #472]	; (5ef4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    5d1c:	81e8      	strh	r0, [r5, #14]
    5d1e:	8228      	strh	r0, [r5, #16]
    5d20:	6878      	ldr	r0, [r7, #4]
    5d22:	f100 0678 	add.w	r6, r0, #120	; 0x78
    5d26:	4604      	mov	r4, r0
    5d28:	f008 ff8c 	bl	ec44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5d2c:	f008 fac2 	bl	e2b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d30:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    5d34:	f009 f812 	bl	ed5c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5d38:	f104 0016 	add.w	r0, r4, #22
    5d3c:	f009 fb30 	bl	f3a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5d40:	f104 0012 	add.w	r0, r4, #18
    5d44:	f009 fb20 	bl	f388 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5d48:	7ef0      	ldrb	r0, [r6, #27]
    5d4a:	f009 fb87 	bl	f45c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5d4e:	7838      	ldrb	r0, [r7, #0]
    5d50:	f641 584c 	movw	r8, #7500	; 0x1d4c
    5d54:	2800      	cmp	r0, #0
    5d56:	d046      	beq.n	5de6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    5d58:	2004      	movs	r0, #4
    5d5a:	f7fe fe31 	bl	49c0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    5d5e:	6860      	ldr	r0, [r4, #4]
    5d60:	4540      	cmp	r0, r8
    5d62:	bf28      	it	cs
    5d64:	2096      	movcs	r0, #150	; 0x96
    5d66:	d203      	bcs.n	5d70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    5d68:	2001      	movs	r0, #1
    5d6a:	f009 fab1 	bl	f2d0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    5d6e:	204d      	movs	r0, #77	; 0x4d
    5d70:	f008 fe92 	bl	ea98 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    5d74:	6878      	ldr	r0, [r7, #4]
    5d76:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    5d7a:	2800      	cmp	r0, #0
    5d7c:	bf18      	it	ne
    5d7e:	f008 fe7b 	blne	ea78 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5d82:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5d86:	2001      	movs	r0, #1
    5d88:	f008 fc78 	bl	e67c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5d8c:	2800      	cmp	r0, #0
    5d8e:	bf04      	itt	eq
    5d90:	b005      	addeq	sp, #20
    5d92:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d96:	7838      	ldrb	r0, [r7, #0]
    5d98:	2800      	cmp	r0, #0
    5d9a:	bf0c      	ite	eq
    5d9c:	2003      	moveq	r0, #3
    5d9e:	2001      	movne	r0, #1
    5da0:	f008 fed2 	bl	eb48 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    5da4:	4854      	ldr	r0, [pc, #336]	; (5ef8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    5da6:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    5daa:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    5dae:	6900      	ldr	r0, [r0, #16]
    5db0:	9004      	str	r0, [sp, #16]
    5db2:	7838      	ldrb	r0, [r7, #0]
    5db4:	2800      	cmp	r0, #0
    5db6:	bf0c      	ite	eq
    5db8:	4850      	ldreq	r0, [pc, #320]	; (5efc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    5dba:	4851      	ldrne	r0, [pc, #324]	; (5f00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    5dbc:	9004      	str	r0, [sp, #16]
    5dbe:	4668      	mov	r0, sp
    5dc0:	f008 fdf0 	bl	e9a4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5dc4:	8820      	ldrh	r0, [r4, #0]
    5dc6:	f7ff fb5d 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5dca:	6368      	str	r0, [r5, #52]	; 0x34
    5dcc:	8820      	ldrh	r0, [r4, #0]
    5dce:	f7ff fb43 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5dd2:	63a8      	str	r0, [r5, #56]	; 0x38
    5dd4:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    5dd8:	bb68      	cbnz	r0, 5e36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5dda:	e01c      	b.n	5e16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    5ddc:	e7ff      	b.n	5dde <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5dde:	21d4      	movs	r1, #212	; 0xd4
    5de0:	2027      	movs	r0, #39	; 0x27
    5de2:	f7fe ff25 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5de6:	2003      	movs	r0, #3
    5de8:	f7fe fdea 	bl	49c0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    5dec:	6860      	ldr	r0, [r4, #4]
    5dee:	4540      	cmp	r0, r8
    5df0:	bf28      	it	cs
    5df2:	2096      	movcs	r0, #150	; 0x96
    5df4:	d203      	bcs.n	5dfe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    5df6:	2001      	movs	r0, #1
    5df8:	f009 fa6a 	bl	f2d0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    5dfc:	204d      	movs	r0, #77	; 0x4d
    5dfe:	f008 fe4b 	bl	ea98 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    5e02:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    5e06:	2000      	movs	r0, #0
    5e08:	f008 fc38 	bl	e67c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d1c2      	bne.n	5d96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    5e10:	b005      	add	sp, #20
    5e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5e16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5e18:	b168      	cbz	r0, 5e36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5e1a:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    5e1c:	8831      	ldrh	r1, [r6, #0]
    5e1e:	4288      	cmp	r0, r1
    5e20:	d109      	bne.n	5e36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5e22:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    5e26:	2201      	movs	r2, #1
    5e28:	4408      	add	r0, r1
    5e2a:	8570      	strh	r0, [r6, #42]	; 0x2a
    5e2c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5e30:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    5e32:	f7fd fbf1 	bl	3618 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5e36:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5e3a:	4832      	ldr	r0, [pc, #200]	; (5f04 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    5e3c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5e40:	f500 7884 	add.w	r8, r0, #264	; 0x108
    5e44:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5e48:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5e4a:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    5e4e:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5e50:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    5e54:	20ff      	movs	r0, #255	; 0xff
    5e56:	72a8      	strb	r0, [r5, #10]
    5e58:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5e5c:	f896 9012 	ldrb.w	r9, [r6, #18]
    5e60:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    5e64:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    5e66:	2908      	cmp	r1, #8
    5e68:	d01c      	beq.n	5ea4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    5e6a:	f00b fb84 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5e6e:	bf00      	nop
    5e70:	f1b9 0f00 	cmp.w	r9, #0
    5e74:	bf04      	itt	eq
    5e76:	1d00      	addeq	r0, r0, #4
    5e78:	b280      	uxtheq	r0, r0
    5e7a:	4580      	cmp	r8, r0
    5e7c:	bf38      	it	cc
    5e7e:	4640      	movcc	r0, r8
    5e80:	b2c0      	uxtb	r0, r0
    5e82:	7cb1      	ldrb	r1, [r6, #18]
    5e84:	2900      	cmp	r1, #0
    5e86:	bf18      	it	ne
    5e88:	2104      	movne	r1, #4
    5e8a:	4408      	add	r0, r1
    5e8c:	b2c0      	uxtb	r0, r0
    5e8e:	7268      	strb	r0, [r5, #9]
    5e90:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    5e94:	1d09      	adds	r1, r1, #4
    5e96:	4281      	cmp	r1, r0
    5e98:	d208      	bcs.n	5eac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    5e9a:	f240 116b 	movw	r1, #363	; 0x16b
    5e9e:	2027      	movs	r0, #39	; 0x27
    5ea0:	f7fe fec6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ea4:	2104      	movs	r1, #4
    5ea6:	f00b fb66 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5eaa:	e7e1      	b.n	5e70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    5eac:	7838      	ldrb	r0, [r7, #0]
    5eae:	2800      	cmp	r0, #0
    5eb0:	f04f 0001 	mov.w	r0, #1
    5eb4:	d014      	beq.n	5ee0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    5eb6:	f000 fb55 	bl	6564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50c>
    5eba:	4813      	ldr	r0, [pc, #76]	; (5f08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    5ebc:	6800      	ldr	r0, [r0, #0]
    5ebe:	2803      	cmp	r0, #3
    5ec0:	bf18      	it	ne
    5ec2:	280b      	cmpne	r0, #11
    5ec4:	d00f      	beq.n	5ee6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    5ec6:	4d11      	ldr	r5, [pc, #68]	; (5f0c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    5ec8:	4628      	mov	r0, r5
    5eca:	f00d fc6c 	bl	137a6 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    5ece:	8830      	ldrh	r0, [r6, #0]
    5ed0:	8068      	strh	r0, [r5, #2]
    5ed2:	8820      	ldrh	r0, [r4, #0]
    5ed4:	8028      	strh	r0, [r5, #0]
    5ed6:	7ef0      	ldrb	r0, [r6, #27]
    5ed8:	7128      	strb	r0, [r5, #4]
    5eda:	b005      	add	sp, #20
    5edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ee0:	f000 fbda 	bl	6698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    5ee4:	e7e9      	b.n	5eba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    5ee6:	f240 117b 	movw	r1, #379	; 0x17b
    5eea:	2027      	movs	r0, #39	; 0x27
    5eec:	f7fe fea0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ef0:	200000cc 	.word	0x200000cc
    5ef4:	20000108 	.word	0x20000108
    5ef8:	000069ec 	.word	0x000069ec
    5efc:	0000cfc9 	.word	0x0000cfc9
    5f00:	00009cfd 	.word	0x00009cfd
    5f04:	20000aa8 	.word	0x20000aa8
    5f08:	40001550 	.word	0x40001550
    5f0c:	20000bfa 	.word	0x20000bfa

00005f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f14:	0006      	movs	r6, r0
    5f16:	4847      	ldr	r0, [pc, #284]	; (6034 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    5f18:	4d47      	ldr	r5, [pc, #284]	; (6038 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    5f1a:	6840      	ldr	r0, [r0, #4]
    5f1c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    5f20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5f22:	f890 9001 	ldrb.w	r9, [r0, #1]
    5f26:	bf18      	it	ne
    5f28:	2e01      	cmpne	r6, #1
    5f2a:	d103      	bne.n	5f34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    5f2c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5f2e:	f00a f93e 	bl	101ae <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5f32:	7068      	strb	r0, [r5, #1]
    5f34:	7868      	ldrb	r0, [r5, #1]
    5f36:	2700      	movs	r7, #0
    5f38:	f04f 0801 	mov.w	r8, #1
    5f3c:	b150      	cbz	r0, 5f54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    5f3e:	2801      	cmp	r0, #1
    5f40:	d030      	beq.n	5fa4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5f42:	2802      	cmp	r0, #2
    5f44:	d056      	beq.n	5ff4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    5f46:	2803      	cmp	r0, #3
    5f48:	d068      	beq.n	601c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    5f4a:	f240 31c2 	movw	r1, #962	; 0x3c2
    5f4e:	2027      	movs	r0, #39	; 0x27
    5f50:	f7fe fe6e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f54:	2e01      	cmp	r6, #1
    5f56:	d012      	beq.n	5f7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    5f58:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d045      	beq.n	5fea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    5f5e:	89a9      	ldrh	r1, [r5, #12]
    5f60:	1cca      	adds	r2, r1, #3
    5f62:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5f64:	f7fe fcd8 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f68:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5f6a:	62a8      	str	r0, [r5, #40]	; 0x28
    5f6c:	2201      	movs	r2, #1
    5f6e:	4649      	mov	r1, r9
    5f70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5f72:	f00a fddc 	bl	10b2e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5f76:	2e02      	cmp	r6, #2
    5f78:	bf08      	it	eq
    5f7a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f7e:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    5f82:	1c49      	adds	r1, r1, #1
    5f84:	f140 0000 	adc.w	r0, r0, #0
    5f88:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    5f8c:	79e0      	ldrb	r0, [r4, #7]
    5f8e:	2801      	cmp	r0, #1
    5f90:	d101      	bne.n	5f96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    5f92:	71e7      	strb	r7, [r4, #7]
    5f94:	e001      	b.n	5f9a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5f96:	f884 8007 	strb.w	r8, [r4, #7]
    5f9a:	7a28      	ldrb	r0, [r5, #8]
    5f9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fa0:	f7fe bc34 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5fa4:	2e01      	cmp	r6, #1
    5fa6:	d011      	beq.n	5fcc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    5fa8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5faa:	b1f0      	cbz	r0, 5fea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    5fac:	89a9      	ldrh	r1, [r5, #12]
    5fae:	1cca      	adds	r2, r1, #3
    5fb0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5fb2:	f7fe fcb1 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5fb6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5fb8:	62a8      	str	r0, [r5, #40]	; 0x28
    5fba:	2200      	movs	r2, #0
    5fbc:	4649      	mov	r1, r9
    5fbe:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5fc0:	f00a fdb5 	bl	10b2e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5fc4:	2e02      	cmp	r6, #2
    5fc6:	bf08      	it	eq
    5fc8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fcc:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    5fd0:	1c41      	adds	r1, r0, #1
    5fd2:	f142 0000 	adc.w	r0, r2, #0
    5fd6:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    5fda:	79e0      	ldrb	r0, [r4, #7]
    5fdc:	2801      	cmp	r0, #1
    5fde:	bf0c      	ite	eq
    5fe0:	71e7      	strbeq	r7, [r4, #7]
    5fe2:	f884 8007 	strbne.w	r8, [r4, #7]
    5fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fea:	f240 4109 	movw	r1, #1033	; 0x409
    5fee:	2027      	movs	r0, #39	; 0x27
    5ff0:	f7fe fe1e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ff4:	2e01      	cmp	r6, #1
    5ff6:	d006      	beq.n	6006 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    5ff8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5ffa:	f00b f86d 	bl	110d8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ffe:	2e02      	cmp	r6, #2
    6000:	bf08      	it	eq
    6002:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6006:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    600a:	1c49      	adds	r1, r1, #1
    600c:	f140 0000 	adc.w	r0, r0, #0
    6010:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    6014:	79e0      	ldrb	r0, [r4, #7]
    6016:	2801      	cmp	r0, #1
    6018:	d1bd      	bne.n	5f96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    601a:	e7ba      	b.n	5f92 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    601c:	2e01      	cmp	r6, #1
    601e:	bf08      	it	eq
    6020:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6024:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    6026:	f00b f857 	bl	110d8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    602a:	7a28      	ldrb	r0, [r5, #8]
    602c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6030:	f7fe bbec 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6034:	20000108 	.word	0x20000108
    6038:	200000cc 	.word	0x200000cc

0000603c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    603c:	4804      	ldr	r0, [pc, #16]	; (6050 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    603e:	7800      	ldrb	r0, [r0, #0]
    6040:	2800      	cmp	r0, #0
    6042:	bf1c      	itt	ne
    6044:	200c      	movne	r0, #12
    6046:	4770      	bxne	lr
    6048:	2000      	movs	r0, #0
    604a:	4902      	ldr	r1, [pc, #8]	; (6054 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    604c:	7448      	strb	r0, [r1, #17]
    604e:	4770      	bx	lr
    6050:	200000cc 	.word	0x200000cc
    6054:	20000bfa 	.word	0x20000bfa

00006058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    6058:	4818      	ldr	r0, [pc, #96]	; (60bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64>)
    605a:	b510      	push	{r4, lr}
    605c:	7801      	ldrb	r1, [r0, #0]
    605e:	f100 043c 	add.w	r4, r0, #60	; 0x3c
    6062:	b149      	cbz	r1, 6078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    6064:	7821      	ldrb	r1, [r4, #0]
    6066:	7800      	ldrb	r0, [r0, #0]
    6068:	b149      	cbz	r1, 607e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
    606a:	2802      	cmp	r0, #2
    606c:	d00e      	beq.n	608c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
    606e:	f240 1197 	movw	r1, #407	; 0x197
    6072:	2027      	movs	r0, #39	; 0x27
    6074:	f7fe fddc 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6078:	f000 fa22 	bl	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    607c:	e00b      	b.n	6096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    607e:	2801      	cmp	r0, #1
    6080:	d009      	beq.n	6096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    6082:	f240 1193 	movw	r1, #403	; 0x193
    6086:	2027      	movs	r0, #39	; 0x27
    6088:	f7fe fdd2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    608c:	6860      	ldr	r0, [r4, #4]
    608e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    6092:	f008 fc93 	bl	e9bc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    6096:	6860      	ldr	r0, [r4, #4]
    6098:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
    609c:	2900      	cmp	r1, #0
    609e:	bf18      	it	ne
    60a0:	bd10      	popne	{r4, pc}
    60a2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    60a4:	2900      	cmp	r1, #0
    60a6:	bf08      	it	eq
    60a8:	bd10      	popeq	{r4, pc}
    60aa:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
    60ae:	2200      	movs	r2, #0
    60b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    60b4:	4611      	mov	r1, r2
    60b6:	f7fd baaf 	b.w	3618 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    60ba:	0000      	.short	0x0000
    60bc:	200000cc 	.word	0x200000cc
    60c0:	b570      	push	{r4, r5, r6, lr}
    60c2:	4c26      	ldr	r4, [pc, #152]	; (615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    60c4:	4605      	mov	r5, r0
    60c6:	2900      	cmp	r1, #0
    60c8:	bf08      	it	eq
    60ca:	2d01      	cmpeq	r5, #1
    60cc:	d106      	bne.n	60dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    60ce:	78e0      	ldrb	r0, [r4, #3]
    60d0:	f100 0001 	add.w	r0, r0, #1
    60d4:	b2c0      	uxtb	r0, r0
    60d6:	70e0      	strb	r0, [r4, #3]
    60d8:	2801      	cmp	r0, #1
    60da:	d83c      	bhi.n	6156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    60dc:	69e1      	ldr	r1, [r4, #28]
    60de:	4628      	mov	r0, r5
    60e0:	4788      	blx	r1
    60e2:	2800      	cmp	r0, #0
    60e4:	d037      	beq.n	6156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    60e6:	7960      	ldrb	r0, [r4, #5]
    60e8:	b148      	cbz	r0, 60fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa6>
    60ea:	2d01      	cmp	r5, #1
    60ec:	d107      	bne.n	60fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa6>
    60ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    60f0:	7841      	ldrb	r1, [r0, #1]
    60f2:	2900      	cmp	r1, #0
    60f4:	bf04      	itt	eq
    60f6:	7800      	ldrbeq	r0, [r0, #0]
    60f8:	f010 0f10 	tsteq.w	r0, #16
    60fc:	d02b      	beq.n	6156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    60fe:	79a0      	ldrb	r0, [r4, #6]
    6100:	bb48      	cbnz	r0, 6156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    6102:	4817      	ldr	r0, [pc, #92]	; (6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    6104:	7801      	ldrb	r1, [r0, #0]
    6106:	2900      	cmp	r1, #0
    6108:	bf08      	it	eq
    610a:	2d01      	cmpeq	r5, #1
    610c:	d004      	beq.n	6118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    610e:	b101      	cbz	r1, 6112 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xba>
    6110:	b115      	cbz	r5, 6118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    6112:	f04f 0000 	mov.w	r0, #0
    6116:	bd70      	pop	{r4, r5, r6, pc}
    6118:	4812      	ldr	r0, [pc, #72]	; (6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    611a:	7801      	ldrb	r1, [r0, #0]
    611c:	f011 0f10 	tst.w	r1, #16
    6120:	d106      	bne.n	6130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    6122:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6124:	7800      	ldrb	r0, [r0, #0]
    6126:	f010 0f10 	tst.w	r0, #16
    612a:	bf08      	it	eq
    612c:	2001      	moveq	r0, #1
    612e:	d001      	beq.n	6134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    6130:	f04f 0000 	mov.w	r0, #0
    6134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6136:	b932      	cbnz	r2, 6146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6138:	89a2      	ldrh	r2, [r4, #12]
    613a:	b122      	cbz	r2, 6146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    613c:	f011 0f10 	tst.w	r1, #16
    6140:	bf08      	it	eq
    6142:	2101      	moveq	r1, #1
    6144:	d001      	beq.n	614a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6146:	f04f 0100 	mov.w	r1, #0
    614a:	89e2      	ldrh	r2, [r4, #14]
    614c:	ea40 0002 	orr.w	r0, r0, r2
    6150:	4308      	orrs	r0, r1
    6152:	bf08      	it	eq
    6154:	bd70      	popeq	{r4, r5, r6, pc}
    6156:	2001      	movs	r0, #1
    6158:	bd70      	pop	{r4, r5, r6, pc}
    615a:	0000      	.short	0x0000
    615c:	200000cc 	.word	0x200000cc
    6160:	20000108 	.word	0x20000108
    6164:	200000de 	.word	0x200000de
    6168:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    616c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 6414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    6170:	2700      	movs	r7, #0
    6172:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    6176:	f8d8 0004 	ldr.w	r0, [r8, #4]
    617a:	463d      	mov	r5, r7
    617c:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    6180:	7820      	ldrb	r0, [r4, #0]
    6182:	2802      	cmp	r0, #2
    6184:	d004      	beq.n	6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    6186:	f240 415b 	movw	r1, #1115	; 0x45b
    618a:	2027      	movs	r0, #39	; 0x27
    618c:	f7fe fd50 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6190:	7c20      	ldrb	r0, [r4, #16]
    6192:	f010 0f40 	tst.w	r0, #64	; 0x40
    6196:	d107      	bne.n	61a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    6198:	2040      	movs	r0, #64	; 0x40
    619a:	69a2      	ldr	r2, [r4, #24]
    619c:	2100      	movs	r1, #0
    619e:	4790      	blx	r2
    61a0:	8a20      	ldrh	r0, [r4, #16]
    61a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    61a6:	8220      	strh	r0, [r4, #16]
    61a8:	9900      	ldr	r1, [sp, #0]
    61aa:	489b      	ldr	r0, [pc, #620]	; (6418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c0>)
    61ac:	2900      	cmp	r1, #0
    61ae:	f000 8100 	beq.w	63b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    61b2:	7941      	ldrb	r1, [r0, #5]
    61b4:	1c49      	adds	r1, r1, #1
    61b6:	7141      	strb	r1, [r0, #5]
    61b8:	f89a 0012 	ldrb.w	r0, [sl, #18]
    61bc:	f008 f91c 	bl	e3f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    61c0:	f008 f8fe 	bl	e3c0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    61c4:	f04f 0901 	mov.w	r9, #1
    61c8:	b998      	cbnz	r0, 61f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    61ca:	f89a 0012 	ldrb.w	r0, [sl, #18]
    61ce:	b180      	cbz	r0, 61f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    61d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    61d2:	7841      	ldrb	r1, [r0, #1]
    61d4:	b169      	cbz	r1, 61f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    61d6:	7800      	ldrb	r0, [r0, #0]
    61d8:	f89a 1007 	ldrb.w	r1, [sl, #7]
    61dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    61e0:	4288      	cmp	r0, r1
    61e2:	d106      	bne.n	61f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    61e4:	f884 9002 	strb.w	r9, [r4, #2]
    61e8:	b002      	add	sp, #8
    61ea:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    61ee:	f000 b967 	b.w	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    61f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    61f4:	7841      	ldrb	r1, [r0, #1]
    61f6:	81a1      	strh	r1, [r4, #12]
    61f8:	2900      	cmp	r1, #0
    61fa:	bf08      	it	eq
    61fc:	62e7      	streq	r7, [r4, #44]	; 0x2c
    61fe:	d003      	beq.n	6208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    6200:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6202:	f00a ff22 	bl	1104a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6206:	62e0      	str	r0, [r4, #44]	; 0x2c
    6208:	8a20      	ldrh	r0, [r4, #16]
    620a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    620e:	8220      	strh	r0, [r4, #16]
    6210:	70e7      	strb	r7, [r4, #3]
    6212:	f8d8 6004 	ldr.w	r6, [r8, #4]
    6216:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    621a:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    621e:	2801      	cmp	r0, #1
    6220:	d11d      	bne.n	625e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x206>
    6222:	f009 f85b 	bl	f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    6226:	4659      	mov	r1, fp
    6228:	4630      	mov	r0, r6
    622a:	f00b fabd 	bl	117a8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    622e:	b1b0      	cbz	r0, 625e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x206>
    6230:	f898 0000 	ldrb.w	r0, [r8]
    6234:	2800      	cmp	r0, #0
    6236:	f8d8 0004 	ldr.w	r0, [r8, #4]
    623a:	bf0c      	ite	eq
    623c:	f500 70c4 	addeq.w	r0, r0, #392	; 0x188
    6240:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    6244:	8831      	ldrh	r1, [r6, #0]
    6246:	8041      	strh	r1, [r0, #2]
    6248:	f89b 1008 	ldrb.w	r1, [fp, #8]
    624c:	7101      	strb	r1, [r0, #4]
    624e:	f89b 1009 	ldrb.w	r1, [fp, #9]
    6252:	7141      	strb	r1, [r0, #5]
    6254:	f880 9000 	strb.w	r9, [r0]
    6258:	7a20      	ldrb	r0, [r4, #8]
    625a:	f7fe fad7 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    625e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6260:	f89a 1006 	ldrb.w	r1, [sl, #6]
    6264:	7800      	ldrb	r0, [r0, #0]
    6266:	f3c0 0080 	ubfx	r0, r0, #2, #1
    626a:	4288      	cmp	r0, r1
    626c:	d049      	beq.n	6302 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    626e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6272:	f100 0678 	add.w	r6, r0, #120	; 0x78
    6276:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    627a:	2800      	cmp	r0, #0
    627c:	d03d      	beq.n	62fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    627e:	2802      	cmp	r0, #2
    6280:	d10e      	bne.n	62a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    6282:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6284:	f00a fc1f 	bl	10ac6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6288:	2800      	cmp	r0, #0
    628a:	d055      	beq.n	6338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    628c:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    6290:	1c49      	adds	r1, r1, #1
    6292:	f140 0000 	adc.w	r0, r0, #0
    6296:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    629a:	7a20      	ldrb	r0, [r4, #8]
    629c:	f7fe fab6 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    62a0:	7177      	strb	r7, [r6, #5]
    62a2:	f898 0000 	ldrb.w	r0, [r8]
    62a6:	2800      	cmp	r0, #0
    62a8:	bf1c      	itt	ne
    62aa:	7930      	ldrbne	r0, [r6, #4]
    62ac:	2800      	cmpne	r0, #0
    62ae:	d009      	beq.n	62c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    62b0:	7137      	strb	r7, [r6, #4]
    62b2:	89e2      	ldrh	r2, [r4, #14]
    62b4:	4639      	mov	r1, r7
    62b6:	f042 0210 	orr.w	r2, r2, #16
    62ba:	81e2      	strh	r2, [r4, #14]
    62bc:	69a2      	ldr	r2, [r4, #24]
    62be:	f04f 0010 	mov.w	r0, #16
    62c2:	4790      	blx	r2
    62c4:	78f0      	ldrb	r0, [r6, #3]
    62c6:	b190      	cbz	r0, 62ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    62c8:	70f7      	strb	r7, [r6, #3]
    62ca:	f7ff fbb7 	bl	5a3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    62ce:	b390      	cbz	r0, 6336 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    62d0:	89e2      	ldrh	r2, [r4, #14]
    62d2:	2008      	movs	r0, #8
    62d4:	f042 0208 	orr.w	r2, r2, #8
    62d8:	81e2      	strh	r2, [r4, #14]
    62da:	69a2      	ldr	r2, [r4, #24]
    62dc:	2100      	movs	r1, #0
    62de:	4790      	blx	r2
    62e0:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    62e4:	1c49      	adds	r1, r1, #1
    62e6:	f140 0000 	adc.w	r0, r0, #0
    62ea:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    62ee:	79b0      	ldrb	r0, [r6, #6]
    62f0:	2801      	cmp	r0, #1
    62f2:	bf0c      	ite	eq
    62f4:	71b7      	strbeq	r7, [r6, #6]
    62f6:	f886 9006 	strbne.w	r9, [r6, #6]
    62fa:	8a20      	ldrh	r0, [r4, #16]
    62fc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6300:	8220      	strh	r0, [r4, #16]
    6302:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6304:	f89a 3007 	ldrb.w	r3, [sl, #7]
    6308:	7808      	ldrb	r0, [r1, #0]
    630a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    630e:	429a      	cmp	r2, r3
    6310:	d148      	bne.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6312:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6316:	f000 0003 	and.w	r0, r0, #3
    631a:	f102 0678 	add.w	r6, r2, #120	; 0x78
    631e:	2801      	cmp	r0, #1
    6320:	bf18      	it	ne
    6322:	2802      	cmpne	r0, #2
    6324:	d027      	beq.n	6376 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    6326:	2803      	cmp	r0, #3
    6328:	bf1c      	itt	ne
    632a:	79a0      	ldrbne	r0, [r4, #6]
    632c:	f040 0004 	orrne.w	r0, r0, #4
    6330:	d00c      	beq.n	634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    6332:	71a0      	strb	r0, [r4, #6]
    6334:	e036      	b.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6336:	e004      	b.n	6342 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ea>
    6338:	f240 315d 	movw	r1, #861	; 0x35d
    633c:	2027      	movs	r0, #39	; 0x27
    633e:	f7fe fc77 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6342:	f240 3175 	movw	r1, #885	; 0x375
    6346:	2027      	movs	r0, #39	; 0x27
    6348:	f7fe fc72 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    634c:	f886 9002 	strb.w	r9, [r6, #2]
    6350:	8a22      	ldrh	r2, [r4, #16]
    6352:	4648      	mov	r0, r9
    6354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    6358:	8222      	strh	r2, [r4, #16]
    635a:	89e2      	ldrh	r2, [r4, #14]
    635c:	f042 0201 	orr.w	r2, r2, #1
    6360:	81e2      	strh	r2, [r4, #14]
    6362:	69a2      	ldr	r2, [r4, #24]
    6364:	4790      	blx	r2
    6366:	79f0      	ldrb	r0, [r6, #7]
    6368:	2801      	cmp	r0, #1
    636a:	d101      	bne.n	6370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    636c:	71f7      	strb	r7, [r6, #7]
    636e:	e019      	b.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6370:	f886 9007 	strb.w	r9, [r6, #7]
    6374:	e016      	b.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6376:	7848      	ldrb	r0, [r1, #1]
    6378:	b1b8      	cbz	r0, 63aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    637a:	8a21      	ldrh	r1, [r4, #16]
    637c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6380:	8221      	strh	r1, [r4, #16]
    6382:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6384:	b171      	cbz	r1, 63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6386:	28fb      	cmp	r0, #251	; 0xfb
    6388:	bf84      	itt	hi
    638a:	79a0      	ldrbhi	r0, [r4, #6]
    638c:	f040 0010 	orrhi.w	r0, r0, #16
    6390:	d8cf      	bhi.n	6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2da>
    6392:	79e0      	ldrb	r0, [r4, #7]
    6394:	2800      	cmp	r0, #0
    6396:	bf08      	it	eq
    6398:	464d      	moveq	r5, r9
    639a:	d003      	beq.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    639c:	2020      	movs	r0, #32
    639e:	69a2      	ldr	r2, [r4, #24]
    63a0:	2100      	movs	r1, #0
    63a2:	4790      	blx	r2
    63a4:	9801      	ldr	r0, [sp, #4]
    63a6:	b9b8      	cbnz	r0, 63d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    63a8:	e011      	b.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    63aa:	79f0      	ldrb	r0, [r6, #7]
    63ac:	2801      	cmp	r0, #1
    63ae:	d1df      	bne.n	6370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    63b0:	e7dc      	b.n	636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    63b2:	7981      	ldrb	r1, [r0, #6]
    63b4:	1c49      	adds	r1, r1, #1
    63b6:	7181      	strb	r1, [r0, #6]
    63b8:	f89a 0012 	ldrb.w	r0, [sl, #18]
    63bc:	2800      	cmp	r0, #0
    63be:	bf18      	it	ne
    63c0:	f008 f814 	blne	e3ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    63c4:	8a20      	ldrh	r0, [r4, #16]
    63c6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    63ca:	8220      	strh	r0, [r4, #16]
    63cc:	e7ea      	b.n	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    63ce:	2001      	movs	r0, #1
    63d0:	9900      	ldr	r1, [sp, #0]
    63d2:	f7ff fe75 	bl	60c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    63d6:	b148      	cbz	r0, 63ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x394>
    63d8:	2d00      	cmp	r5, #0
    63da:	bf1c      	itt	ne
    63dc:	2000      	movne	r0, #0
    63de:	f7ff fd97 	blne	5f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    63e2:	b002      	add	sp, #8
    63e4:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    63e8:	f000 b86a 	b.w	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    63ec:	2d00      	cmp	r5, #0
    63ee:	bf1c      	itt	ne
    63f0:	2001      	movne	r0, #1
    63f2:	f7ff fd8d 	blne	5f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    63f6:	2000      	movs	r0, #0
    63f8:	f000 f94e 	bl	6698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    63fc:	2d00      	cmp	r5, #0
    63fe:	bf04      	itt	eq
    6400:	b002      	addeq	sp, #8
    6402:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6406:	2002      	movs	r0, #2
    6408:	b002      	add	sp, #8
    640a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    640e:	f7ff bd7f 	b.w	5f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6412:	0000      	.short	0x0000
    6414:	20000108 	.word	0x20000108
    6418:	20000bfa 	.word	0x20000bfa
    641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6420:	4e26      	ldr	r6, [pc, #152]	; (64bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    6422:	4681      	mov	r9, r0
    6424:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    6428:	6870      	ldr	r0, [r6, #4]
    642a:	4688      	mov	r8, r1
    642c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6430:	7828      	ldrb	r0, [r5, #0]
    6432:	2801      	cmp	r0, #1
    6434:	d004      	beq.n	6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    6436:	f44f 6183 	mov.w	r1, #1048	; 0x418
    643a:	2027      	movs	r0, #39	; 0x27
    643c:	f7fe fbf8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6440:	78a0      	ldrb	r0, [r4, #2]
    6442:	2701      	movs	r7, #1
    6444:	b160      	cbz	r0, 6460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x408>
    6446:	2100      	movs	r1, #0
    6448:	70a1      	strb	r1, [r4, #2]
    644a:	89ea      	ldrh	r2, [r5, #14]
    644c:	2004      	movs	r0, #4
    644e:	f042 0204 	orr.w	r2, r2, #4
    6452:	81ea      	strh	r2, [r5, #14]
    6454:	69aa      	ldr	r2, [r5, #24]
    6456:	4790      	blx	r2
    6458:	7830      	ldrb	r0, [r6, #0]
    645a:	2800      	cmp	r0, #0
    645c:	bf18      	it	ne
    645e:	7127      	strbne	r7, [r4, #4]
    6460:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6462:	2603      	movs	r6, #3
    6464:	7808      	ldrb	r0, [r1, #0]
    6466:	ea36 0000 	bics.w	r0, r6, r0
    646a:	d10d      	bne.n	6488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    646c:	7960      	ldrb	r0, [r4, #5]
    646e:	b998      	cbnz	r0, 6498 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>
    6470:	89ea      	ldrh	r2, [r5, #14]
    6472:	2002      	movs	r0, #2
    6474:	f042 0202 	orr.w	r2, r2, #2
    6478:	81ea      	strh	r2, [r5, #14]
    647a:	69aa      	ldr	r2, [r5, #24]
    647c:	4790      	blx	r2
    647e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6480:	7800      	ldrb	r0, [r0, #0]
    6482:	ea36 0000 	bics.w	r0, r6, r0
    6486:	d007      	beq.n	6498 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>
    6488:	6a68      	ldr	r0, [r5, #36]	; 0x24
    648a:	7840      	ldrb	r0, [r0, #1]
    648c:	2800      	cmp	r0, #0
    648e:	bf0e      	itee	eq
    6490:	7167      	strbeq	r7, [r4, #5]
    6492:	2002      	movne	r0, #2
    6494:	7160      	strbne	r0, [r4, #5]
    6496:	e000      	b.n	649a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x442>
    6498:	7166      	strb	r6, [r4, #5]
    649a:	ea38 0009 	bics.w	r0, r8, r9
    649e:	d004      	beq.n	64aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    64a0:	2101      	movs	r1, #1
    64a2:	2000      	movs	r0, #0
    64a4:	f7ff fe0c 	bl	60c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    64a8:	b118      	cbz	r0, 64b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    64aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64ae:	f000 b807 	b.w	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    64b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64b6:	2000      	movs	r0, #0
    64b8:	f000 b854 	b.w	6564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50c>
    64bc:	20000108 	.word	0x20000108
    64c0:	b510      	push	{r4, lr}
    64c2:	f008 f867 	bl	e594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    64c6:	f007 fef5 	bl	e2b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64ca:	4813      	ldr	r0, [pc, #76]	; (6518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    64cc:	6840      	ldr	r0, [r0, #4]
    64ce:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    64d2:	2801      	cmp	r0, #1
    64d4:	bf08      	it	eq
    64d6:	f008 ff01 	bleq	f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    64da:	4c10      	ldr	r4, [pc, #64]	; (651c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>)
    64dc:	2100      	movs	r1, #0
    64de:	69a2      	ldr	r2, [r4, #24]
    64e0:	8a20      	ldrh	r0, [r4, #16]
    64e2:	4790      	blx	r2
    64e4:	6a22      	ldr	r2, [r4, #32]
    64e6:	79a1      	ldrb	r1, [r4, #6]
    64e8:	78a0      	ldrb	r0, [r4, #2]
    64ea:	4790      	blx	r2
    64ec:	490c      	ldr	r1, [pc, #48]	; (6520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c8>)
    64ee:	7c48      	ldrb	r0, [r1, #17]
    64f0:	b170      	cbz	r0, 6510 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>
    64f2:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    64f6:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    64fa:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    64fe:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    6502:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    6506:	2001      	movs	r0, #1
    6508:	7408      	strb	r0, [r1, #16]
    650a:	7a20      	ldrb	r0, [r4, #8]
    650c:	f7fe f97e 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6510:	2000      	movs	r0, #0
    6512:	7020      	strb	r0, [r4, #0]
    6514:	bd10      	pop	{r4, pc}
    6516:	0000      	.short	0x0000
    6518:	20000108 	.word	0x20000108
    651c:	200000cc 	.word	0x200000cc
    6520:	20000bfa 	.word	0x20000bfa
    6524:	4808      	ldr	r0, [pc, #32]	; (6548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>)
    6526:	b510      	push	{r4, lr}
    6528:	7800      	ldrb	r0, [r0, #0]
    652a:	2802      	cmp	r0, #2
    652c:	d004      	beq.n	6538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    652e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    6532:	2027      	movs	r0, #39	; 0x27
    6534:	f7fe fb7c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6538:	4904      	ldr	r1, [pc, #16]	; (654c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>)
    653a:	2001      	movs	r0, #1
    653c:	71c8      	strb	r0, [r1, #7]
    653e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6542:	f7ff bfbd 	b.w	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    6546:	0000      	.short	0x0000
    6548:	200000cc 	.word	0x200000cc
    654c:	20000bfa 	.word	0x20000bfa
    6550:	4803      	ldr	r0, [pc, #12]	; (6560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>)
    6552:	7800      	ldrb	r0, [r0, #0]
    6554:	2800      	cmp	r0, #0
    6556:	bf08      	it	eq
    6558:	4770      	bxeq	lr
    655a:	f7ff bfb1 	b.w	64c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    655e:	0000      	.short	0x0000
    6560:	200000cc 	.word	0x200000cc
    6564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6568:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    656c:	4606      	mov	r6, r0
    656e:	f8d8 4004 	ldr.w	r4, [r8, #4]
    6572:	f104 0778 	add.w	r7, r4, #120	; 0x78
    6576:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    657a:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    657c:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    6580:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    6582:	2908      	cmp	r1, #8
    6584:	d011      	beq.n	65aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    6586:	f00a fff6 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    658a:	bf00      	nop
    658c:	f1b9 0f00 	cmp.w	r9, #0
    6590:	bf04      	itt	eq
    6592:	1d00      	addeq	r0, r0, #4
    6594:	b280      	uxtheq	r0, r0
    6596:	4285      	cmp	r5, r0
    6598:	bf38      	it	cc
    659a:	4628      	movcc	r0, r5
    659c:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    65a0:	4d3a      	ldr	r5, [pc, #232]	; (668c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>)
    65a2:	6b28      	ldr	r0, [r5, #48]	; 0x30
    65a4:	62a8      	str	r0, [r5, #40]	; 0x28
    65a6:	b976      	cbnz	r6, 65c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    65a8:	e003      	b.n	65b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55a>
    65aa:	2104      	movs	r1, #4
    65ac:	f00a ffe3 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    65b0:	e7ec      	b.n	658c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    65b2:	7a68      	ldrb	r0, [r5, #9]
    65b4:	7aa9      	ldrb	r1, [r5, #10]
    65b6:	4288      	cmp	r0, r1
    65b8:	d105      	bne.n	65c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    65ba:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    65be:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    65c2:	4288      	cmp	r0, r1
    65c4:	d004      	beq.n	65d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    65c6:	7a68      	ldrb	r0, [r5, #9]
    65c8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    65cc:	f008 fef0 	bl	f3b0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    65d0:	7cb8      	ldrb	r0, [r7, #18]
    65d2:	2800      	cmp	r0, #0
    65d4:	d031      	beq.n	663a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    65d6:	482e      	ldr	r0, [pc, #184]	; (6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>)
    65d8:	f008 fbc6 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65dc:	f898 0000 	ldrb.w	r0, [r8]
    65e0:	2800      	cmp	r0, #0
    65e2:	bf0c      	ite	eq
    65e4:	2001      	moveq	r0, #1
    65e6:	2000      	movne	r0, #0
    65e8:	f080 0101 	eor.w	r1, r0, #1
    65ec:	4829      	ldr	r0, [pc, #164]	; (6694 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63c>)
    65ee:	7601      	strb	r1, [r0, #24]
    65f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    65f4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    65f8:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    65fc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    65fe:	f007 fe49 	bl	e294 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    6602:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    6606:	2801      	cmp	r0, #1
    6608:	bf08      	it	eq
    660a:	2200      	moveq	r2, #0
    660c:	d010      	beq.n	6630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    660e:	2802      	cmp	r0, #2
    6610:	bf08      	it	eq
    6612:	2201      	moveq	r2, #1
    6614:	d00c      	beq.n	6630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    6616:	2804      	cmp	r0, #4
    6618:	bf08      	it	eq
    661a:	2203      	moveq	r2, #3
    661c:	d008      	beq.n	6630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    661e:	2808      	cmp	r0, #8
    6620:	bf08      	it	eq
    6622:	2202      	moveq	r2, #2
    6624:	d004      	beq.n	6630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    6626:	f240 31b3 	movw	r1, #947	; 0x3b3
    662a:	2006      	movs	r0, #6
    662c:	f7fe fb00 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6630:	4649      	mov	r1, r9
    6632:	2001      	movs	r0, #1
    6634:	f007 fe5e 	bl	e2f4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    6638:	e004      	b.n	6644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    663a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    663c:	f008 fb94 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6640:	f007 fe38 	bl	e2b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6644:	b93e      	cbnz	r6, 6656 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5fe>
    6646:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    664a:	f010 000c 	ands.w	r0, r0, #12
    664e:	bf18      	it	ne
    6650:	2028      	movne	r0, #40	; 0x28
    6652:	f008 f9e7 	bl	ea24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6656:	6860      	ldr	r0, [r4, #4]
    6658:	f641 514c 	movw	r1, #7500	; 0x1d4c
    665c:	4288      	cmp	r0, r1
    665e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    6662:	f04f 0201 	mov.w	r2, #1
    6666:	f04f 0100 	mov.w	r1, #0
    666a:	bf34      	ite	cc
    666c:	2001      	movcc	r0, #1
    666e:	2000      	movcs	r0, #0
    6670:	f008 fd8a 	bl	f188 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6674:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6678:	2801      	cmp	r0, #1
    667a:	bf08      	it	eq
    667c:	f008 fe3a 	bleq	f2f4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    6680:	2002      	movs	r0, #2
    6682:	7028      	strb	r0, [r5, #0]
    6684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6688:	20000108 	.word	0x20000108
    668c:	200000cc 	.word	0x200000cc
    6690:	20000aa8 	.word	0x20000aa8
    6694:	20000bb0 	.word	0x20000bb0
    6698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    669c:	f8df 933c 	ldr.w	r9, [pc, #828]	; 69dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x984>
    66a0:	0002      	movs	r2, r0
    66a2:	b083      	sub	sp, #12
    66a4:	f1a9 0018 	sub.w	r0, r9, #24
    66a8:	f8d9 6004 	ldr.w	r6, [r9, #4]
    66ac:	f1a0 0424 	sub.w	r4, r0, #36	; 0x24
    66b0:	9002      	str	r0, [sp, #8]
    66b2:	7aa0      	ldrb	r0, [r4, #10]
    66b4:	f896 1066 	ldrb.w	r1, [r6, #102]	; 0x66
    66b8:	f106 0778 	add.w	r7, r6, #120	; 0x78
    66bc:	bf01      	itttt	eq
    66be:	7a62      	ldrbeq	r2, [r4, #9]
    66c0:	4282      	cmpeq	r2, r0
    66c2:	f896 2067 	ldrbeq.w	r2, [r6, #103]	; 0x67
    66c6:	428a      	cmpeq	r2, r1
    66c8:	d001      	beq.n	66ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x676>
    66ca:	f008 fe71 	bl	f3b0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    66ce:	7978      	ldrb	r0, [r7, #5]
    66d0:	f8df b30c 	ldr.w	fp, [pc, #780]	; 69e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x988>
    66d4:	f04f 0808 	mov.w	r8, #8
    66d8:	f04f 0a00 	mov.w	sl, #0
    66dc:	2501      	movs	r5, #1
    66de:	b168      	cbz	r0, 66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    66e0:	2801      	cmp	r0, #1
    66e2:	f000 80c9 	beq.w	6878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    66e6:	2802      	cmp	r0, #2
    66e8:	f000 80da 	beq.w	68a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x848>
    66ec:	2803      	cmp	r0, #3
    66ee:	f000 80e7 	beq.w	68c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x868>
    66f2:	f240 216e 	movw	r1, #622	; 0x26e
    66f6:	2027      	movs	r0, #39	; 0x27
    66f8:	f7fe fa9a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66fc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    6700:	f100 0178 	add.w	r1, r0, #120	; 0x78
    6704:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    6708:	2b24      	cmp	r3, #36	; 0x24
    670a:	bf1c      	itt	ne
    670c:	7b49      	ldrbne	r1, [r1, #13]
    670e:	2924      	cmpne	r1, #36	; 0x24
    6710:	d008      	beq.n	6724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6cc>
    6712:	f04f 0202 	mov.w	r2, #2
    6716:	2b1f      	cmp	r3, #31
    6718:	bf18      	it	ne
    671a:	2b20      	cmpne	r3, #32
    671c:	d02c      	beq.n	6778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    671e:	2922      	cmp	r1, #34	; 0x22
    6720:	d051      	beq.n	67c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76e>
    6722:	e07d      	b.n	6820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    6724:	f899 1000 	ldrb.w	r1, [r9]
    6728:	2900      	cmp	r1, #0
    672a:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    672e:	d012      	beq.n	6756 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fe>
    6730:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    6734:	2800      	cmp	r0, #0
    6736:	d077      	beq.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    6738:	2908      	cmp	r1, #8
    673a:	bf18      	it	ne
    673c:	2904      	cmpne	r1, #4
    673e:	d06c      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    6740:	2808      	cmp	r0, #8
    6742:	bf18      	it	ne
    6744:	2804      	cmpne	r0, #4
    6746:	d068      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    6748:	2901      	cmp	r1, #1
    674a:	bf18      	it	ne
    674c:	2801      	cmpne	r0, #1
    674e:	d056      	beq.n	67fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    6750:	f04f 0102 	mov.w	r1, #2
    6754:	e068      	b.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    6756:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    675a:	2800      	cmp	r0, #0
    675c:	d064      	beq.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    675e:	2908      	cmp	r1, #8
    6760:	bf18      	it	ne
    6762:	2904      	cmpne	r1, #4
    6764:	d059      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    6766:	2808      	cmp	r0, #8
    6768:	bf18      	it	ne
    676a:	2804      	cmpne	r0, #4
    676c:	d055      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    676e:	2901      	cmp	r1, #1
    6770:	bf18      	it	ne
    6772:	2801      	cmpne	r0, #1
    6774:	d043      	beq.n	67fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    6776:	e7eb      	b.n	6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6778:	2922      	cmp	r1, #34	; 0x22
    677a:	d024      	beq.n	67c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76e>
    677c:	f899 1000 	ldrb.w	r1, [r9]
    6780:	2900      	cmp	r1, #0
    6782:	d04d      	beq.n	6820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    6784:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    6788:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    678c:	f010 0f04 	tst.w	r0, #4
    6790:	bf18      	it	ne
    6792:	4640      	movne	r0, r8
    6794:	d00c      	beq.n	67b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6796:	2908      	cmp	r1, #8
    6798:	bf18      	it	ne
    679a:	2904      	cmpne	r1, #4
    679c:	d03d      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    679e:	2808      	cmp	r0, #8
    67a0:	bf18      	it	ne
    67a2:	2804      	cmpne	r0, #4
    67a4:	d039      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    67a6:	2901      	cmp	r1, #1
    67a8:	bf18      	it	ne
    67aa:	2801      	cmpne	r0, #1
    67ac:	d027      	beq.n	67fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    67ae:	e7cf      	b.n	6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    67b0:	f010 0f01 	tst.w	r0, #1
    67b4:	bf18      	it	ne
    67b6:	4628      	movne	r0, r5
    67b8:	d1ed      	bne.n	6796 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    67ba:	f010 0f02 	tst.w	r0, #2
    67be:	bf18      	it	ne
    67c0:	4610      	movne	r0, r2
    67c2:	d1e8      	bne.n	6796 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    67c4:	e030      	b.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    67c6:	f899 1000 	ldrb.w	r1, [r9]
    67ca:	b349      	cbz	r1, 6820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    67cc:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    67d0:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    67d4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    67d8:	ea03 0000 	and.w	r0, r3, r0
    67dc:	f010 0f04 	tst.w	r0, #4
    67e0:	bf18      	it	ne
    67e2:	4640      	movne	r0, r8
    67e4:	d00e      	beq.n	6804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    67e6:	2908      	cmp	r1, #8
    67e8:	bf18      	it	ne
    67ea:	2904      	cmpne	r1, #4
    67ec:	d015      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    67ee:	2808      	cmp	r0, #8
    67f0:	bf18      	it	ne
    67f2:	2804      	cmpne	r0, #4
    67f4:	d011      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    67f6:	2901      	cmp	r1, #1
    67f8:	bf18      	it	ne
    67fa:	2801      	cmpne	r0, #1
    67fc:	d1a8      	bne.n	6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    67fe:	f04f 0101 	mov.w	r1, #1
    6802:	e011      	b.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    6804:	f010 0f01 	tst.w	r0, #1
    6808:	bf18      	it	ne
    680a:	4628      	movne	r0, r5
    680c:	d1eb      	bne.n	67e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78e>
    680e:	f010 0f02 	tst.w	r0, #2
    6812:	bf18      	it	ne
    6814:	4610      	movne	r0, r2
    6816:	d1e6      	bne.n	67e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78e>
    6818:	e006      	b.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    681a:	f04f 0108 	mov.w	r1, #8
    681e:	e003      	b.n	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    6820:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    6824:	2904      	cmp	r1, #4
    6826:	d0f8      	beq.n	681a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    6828:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    682a:	f011 0f0c 	tst.w	r1, #12
    682e:	bf18      	it	ne
    6830:	f44f 6029 	movne.w	r0, #2704	; 0xa90
    6834:	f00a fe9f 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    6838:	8e31      	ldrh	r1, [r6, #48]	; 0x30
    683a:	4281      	cmp	r1, r0
    683c:	bf38      	it	cc
    683e:	4608      	movcc	r0, r1
    6840:	f8ad 0004 	strh.w	r0, [sp, #4]
    6844:	f8a6 004c 	strh.w	r0, [r6, #76]	; 0x4c
    6848:	9802      	ldr	r0, [sp, #8]
    684a:	f7ff f921 	bl	5a90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    684e:	b148      	cbz	r0, 6864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80c>
    6850:	89e2      	ldrh	r2, [r4, #14]
    6852:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6858:	81e2      	strh	r2, [r4, #14]
    685a:	69a2      	ldr	r2, [r4, #24]
    685c:	2080      	movs	r0, #128	; 0x80
    685e:	4790      	blx	r2
    6860:	70fd      	strb	r5, [r7, #3]
    6862:	e031      	b.n	68c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    6864:	466a      	mov	r2, sp
    6866:	a901      	add	r1, sp, #4
    6868:	6b60      	ldr	r0, [r4, #52]	; 0x34
    686a:	f00a fb17 	bl	10e9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    686e:	6260      	str	r0, [r4, #36]	; 0x24
    6870:	b110      	cbz	r0, 6878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    6872:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    6876:	b111      	cbz	r1, 687e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x826>
    6878:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
    687c:	e024      	b.n	68c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    687e:	f89d 1000 	ldrb.w	r1, [sp]
    6882:	b931      	cbnz	r1, 6892 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83a>
    6884:	f8a0 a000 	strh.w	sl, [r0]
    6888:	f880 a002 	strb.w	sl, [r0, #2]
    688c:	2101      	movs	r1, #1
    688e:	f00b f8eb 	bl	11a68 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6892:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6896:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6898:	f00b f8a0 	bl	119dc <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    689c:	e014      	b.n	68c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    689e:	bf00      	nop
    68a0:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
    68a4:	f8ad 0004 	strh.w	r0, [sp, #4]
    68a8:	466a      	mov	r2, sp
    68aa:	a901      	add	r1, sp, #4
    68ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
    68ae:	f00a faf5 	bl	10e9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    68b2:	6260      	str	r0, [r4, #36]	; 0x24
    68b4:	b940      	cbnz	r0, 68c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    68b6:	f240 215f 	movw	r1, #607	; 0x25f
    68ba:	2027      	movs	r0, #39	; 0x27
    68bc:	f7fe f9b8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68c0:	9802      	ldr	r0, [sp, #8]
    68c2:	f7ff f8e5 	bl	5a90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    68c6:	b318      	cbz	r0, 6910 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8b8>
    68c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    68ca:	2304      	movs	r3, #4
    68cc:	7801      	ldrb	r1, [r0, #0]
    68ce:	f021 0108 	bic.w	r1, r1, #8
    68d2:	7001      	strb	r1, [r0, #0]
    68d4:	79ba      	ldrb	r2, [r7, #6]
    68d6:	ea08 02c2 	and.w	r2, r8, r2, lsl #3
    68da:	4311      	orrs	r1, r2
    68dc:	f021 0104 	bic.w	r1, r1, #4
    68e0:	7001      	strb	r1, [r0, #0]
    68e2:	79fa      	ldrb	r2, [r7, #7]
    68e4:	f04f 0803 	mov.w	r8, #3
    68e8:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    68ec:	4311      	orrs	r1, r2
    68ee:	f021 0110 	bic.w	r1, r1, #16
    68f2:	7001      	strb	r1, [r0, #0]
    68f4:	ea38 0101 	bics.w	r1, r8, r1
    68f8:	bf04      	itt	eq
    68fa:	78c0      	ldrbeq	r0, [r0, #3]
    68fc:	2802      	cmpeq	r0, #2
    68fe:	d015      	beq.n	692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    6900:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6902:	f00a fa9c 	bl	10e3e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6906:	2800      	cmp	r0, #0
    6908:	bf18      	it	ne
    690a:	46aa      	movne	sl, r5
    690c:	d005      	beq.n	691a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    690e:	e00d      	b.n	692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    6910:	f44f 711a 	mov.w	r1, #616	; 0x268
    6914:	2027      	movs	r0, #39	; 0x27
    6916:	f7fe f98b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    691a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    691c:	7800      	ldrb	r0, [r0, #0]
    691e:	ea38 0000 	bics.w	r0, r8, r0
    6922:	d003      	beq.n	692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    6924:	f7ff f872 	bl	5a0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6928:	f080 0a01 	eor.w	sl, r0, #1
    692c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    692e:	7801      	ldrb	r1, [r0, #0]
    6930:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
    6934:	7001      	strb	r1, [r0, #0]
    6936:	7c79      	ldrb	r1, [r7, #17]
    6938:	2900      	cmp	r1, #0
    693a:	bf1c      	itt	ne
    693c:	7841      	ldrbne	r1, [r0, #1]
    693e:	2900      	cmpne	r1, #0
    6940:	d02f      	beq.n	69a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94a>
    6942:	4828      	ldr	r0, [pc, #160]	; (69e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x98c>)
    6944:	f008 fa10 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6948:	f899 0000 	ldrb.w	r0, [r9]
    694c:	2800      	cmp	r0, #0
    694e:	bf0c      	ite	eq
    6950:	2101      	moveq	r1, #1
    6952:	2100      	movne	r1, #0
    6954:	4824      	ldr	r0, [pc, #144]	; (69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x990>)
    6956:	7601      	strb	r1, [r0, #24]
    6958:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    695c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6960:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    6964:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6966:	f007 fc95 	bl	e294 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    696a:	f896 0066 	ldrb.w	r0, [r6, #102]	; 0x66
    696e:	2801      	cmp	r0, #1
    6970:	bf08      	it	eq
    6972:	2200      	moveq	r2, #0
    6974:	d010      	beq.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    6976:	2802      	cmp	r0, #2
    6978:	bf08      	it	eq
    697a:	2201      	moveq	r2, #1
    697c:	d00c      	beq.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    697e:	2804      	cmp	r0, #4
    6980:	bf08      	it	eq
    6982:	2203      	moveq	r2, #3
    6984:	d008      	beq.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    6986:	2808      	cmp	r0, #8
    6988:	bf08      	it	eq
    698a:	2202      	moveq	r2, #2
    698c:	d004      	beq.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    698e:	f240 31b3 	movw	r1, #947	; 0x3b3
    6992:	2006      	movs	r0, #6
    6994:	f7fe f94c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6998:	21fb      	movs	r1, #251	; 0xfb
    699a:	2000      	movs	r0, #0
    699c:	f007 fcaa 	bl	e2f4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    69a0:	e003      	b.n	69aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x952>
    69a2:	f008 f9e1 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69a6:	f007 fc85 	bl	e2b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    69aa:	6870      	ldr	r0, [r6, #4]
    69ac:	f641 514c 	movw	r1, #7500	; 0x1d4c
    69b0:	4288      	cmp	r0, r1
    69b2:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
    69b6:	f04f 0201 	mov.w	r2, #1
    69ba:	4611      	mov	r1, r2
    69bc:	bf34      	ite	cc
    69be:	2001      	movcc	r0, #1
    69c0:	2000      	movcs	r0, #0
    69c2:	f008 fbe1 	bl	f188 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    69c6:	7125      	strb	r5, [r4, #4]
    69c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    69ca:	8801      	ldrh	r1, [r0, #0]
    69cc:	8261      	strh	r1, [r4, #18]
    69ce:	7880      	ldrb	r0, [r0, #2]
    69d0:	7520      	strb	r0, [r4, #20]
    69d2:	7025      	strb	r5, [r4, #0]
    69d4:	b003      	add	sp, #12
    69d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69da:	0000      	.short	0x0000
    69dc:	20000108 	.word	0x20000108
    69e0:	20000bd8 	.word	0x20000bd8
    69e4:	20000aa8 	.word	0x20000aa8
    69e8:	20000bb0 	.word	0x20000bb0
    69ec:	00006525 	.word	0x00006525
    69f0:	00006169 	.word	0x00006169
    69f4:	0000641d 	.word	0x0000641d
    69f8:	00006551 	.word	0x00006551
    69fc:	00000000 	.word	0x00000000

00006a00 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    6a00:	460a      	mov	r2, r1
    6a02:	4907      	ldr	r1, [pc, #28]	; (6a20 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    6a04:	b510      	push	{r4, lr}
    6a06:	7809      	ldrb	r1, [r1, #0]
    6a08:	b141      	cbz	r1, 6a1c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    6a0a:	4b06      	ldr	r3, [pc, #24]	; (6a24 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    6a0c:	7899      	ldrb	r1, [r3, #2]
    6a0e:	b129      	cbz	r1, 6a1c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    6a10:	4402      	add	r2, r0
    6a12:	1cd8      	adds	r0, r3, #3
    6a14:	f007 fb68 	bl	e0e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6a18:	2001      	movs	r0, #1
    6a1a:	bd10      	pop	{r4, pc}
    6a1c:	2000      	movs	r0, #0
    6a1e:	bd10      	pop	{r4, pc}
    6a20:	2000039c 	.word	0x2000039c
    6a24:	20001a29 	.word	0x20001a29

00006a28 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6a28:	4800      	ldr	r0, [pc, #0]	; (6a2c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6a2a:	4770      	bx	lr
    6a2c:	20001bfc 	.word	0x20001bfc

00006a30 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6a30:	4904      	ldr	r1, [pc, #16]	; (6a44 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6a32:	788a      	ldrb	r2, [r1, #2]
    6a34:	4282      	cmp	r2, r0
    6a36:	bf86      	itte	hi
    6a38:	4408      	addhi	r0, r1
    6a3a:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    6a3e:	2000      	movls	r0, #0
    6a40:	4770      	bx	lr
    6a42:	0000      	.short	0x0000
    6a44:	20001a29 	.word	0x20001a29

00006a48 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6a48:	4904      	ldr	r1, [pc, #16]	; (6a5c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6a4a:	788a      	ldrb	r2, [r1, #2]
    6a4c:	4282      	cmp	r2, r0
    6a4e:	bf86      	itte	hi
    6a50:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    6a54:	3083      	addhi	r0, #131	; 0x83
    6a56:	2000      	movls	r0, #0
    6a58:	4770      	bx	lr
    6a5a:	0000      	.short	0x0000
    6a5c:	20001a29 	.word	0x20001a29

00006a60 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6a60:	4a05      	ldr	r2, [pc, #20]	; (6a78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6a62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6a66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6a6a:	6802      	ldr	r2, [r0, #0]
    6a6c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6a70:	8880      	ldrh	r0, [r0, #4]
    6a72:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6a76:	4770      	bx	lr
    6a78:	20001a29 	.word	0x20001a29

00006a7c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a80:	460e      	mov	r6, r1
    6a82:	4607      	mov	r7, r0
    6a84:	4615      	mov	r5, r2
    6a86:	2106      	movs	r1, #6
    6a88:	4630      	mov	r0, r6
    6a8a:	f000 fecf 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6a8e:	4c1c      	ldr	r4, [pc, #112]	; (6b00 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    6a90:	b198      	cbz	r0, 6aba <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    6a92:	78a1      	ldrb	r1, [r4, #2]
    6a94:	b171      	cbz	r1, 6ab4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    6a96:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    6a9a:	f011 0f01 	tst.w	r1, #1
    6a9e:	bf18      	it	ne
    6aa0:	f800 5f01 	strbne.w	r5, [r0, #1]!
    6aa4:	78a1      	ldrb	r1, [r4, #2]
    6aa6:	0849      	lsrs	r1, r1, #1
    6aa8:	d004      	beq.n	6ab4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    6aaa:	7045      	strb	r5, [r0, #1]
    6aac:	f800 5f02 	strb.w	r5, [r0, #2]!
    6ab0:	1e49      	subs	r1, r1, #1
    6ab2:	d1fa      	bne.n	6aaa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    6ab4:	2001      	movs	r0, #1
    6ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6aba:	4638      	mov	r0, r7
    6abc:	4631      	mov	r1, r6
    6abe:	f000 fad5 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6ac2:	2810      	cmp	r0, #16
    6ac4:	d019      	beq.n	6afa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    6ac6:	78a3      	ldrb	r3, [r4, #2]
    6ac8:	2100      	movs	r1, #0
    6aca:	2b00      	cmp	r3, #0
    6acc:	d915      	bls.n	6afa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    6ace:	1862      	adds	r2, r4, r1
    6ad0:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    6ad4:	4282      	cmp	r2, r0
    6ad6:	d10b      	bne.n	6af0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    6ad8:	2910      	cmp	r1, #16
    6ada:	bf18      	it	ne
    6adc:	2908      	cmpne	r1, #8
    6ade:	d00c      	beq.n	6afa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    6ae0:	eb04 0001 	add.w	r0, r4, r1
    6ae4:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6ae8:	f04f 0001 	mov.w	r0, #1
    6aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6af0:	f101 0101 	add.w	r1, r1, #1
    6af4:	b2c9      	uxtb	r1, r1
    6af6:	428b      	cmp	r3, r1
    6af8:	d8e9      	bhi.n	6ace <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    6afa:	2000      	movs	r0, #0
    6afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b00:	20001a29 	.word	0x20001a29

00006b04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6b04:	4904      	ldr	r1, [pc, #16]	; (6b18 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6b06:	788a      	ldrb	r2, [r1, #2]
    6b08:	4282      	cmp	r2, r0
    6b0a:	bf86      	itte	hi
    6b0c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    6b10:	1cc0      	addhi	r0, r0, #3
    6b12:	2000      	movls	r0, #0
    6b14:	4770      	bx	lr
    6b16:	0000      	.short	0x0000
    6b18:	20001a29 	.word	0x20001a29

00006b1c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6b1c:	b510      	push	{r4, lr}
    6b1e:	f240 12d3 	movw	r2, #467	; 0x1d3
    6b22:	2100      	movs	r1, #0
    6b24:	4807      	ldr	r0, [pc, #28]	; (6b44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    6b26:	f009 faab 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b2a:	2208      	movs	r2, #8
    6b2c:	21ff      	movs	r1, #255	; 0xff
    6b2e:	4806      	ldr	r0, [pc, #24]	; (6b48 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6b30:	f009 faa6 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b34:	4805      	ldr	r0, [pc, #20]	; (6b4c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6b36:	2100      	movs	r1, #0
    6b38:	7001      	strb	r1, [r0, #0]
    6b3a:	7041      	strb	r1, [r0, #1]
    6b3c:	f44f 7161 	mov.w	r1, #900	; 0x384
    6b40:	8041      	strh	r1, [r0, #2]
    6b42:	bd10      	pop	{r4, pc}
    6b44:	20001a29 	.word	0x20001a29
    6b48:	200003a0 	.word	0x200003a0
    6b4c:	2000039c 	.word	0x2000039c

00006b50 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6b50:	4901      	ldr	r1, [pc, #4]	; (6b58 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    6b52:	7008      	strb	r0, [r1, #0]
    6b54:	4770      	bx	lr
    6b56:	0000      	.short	0x0000
    6b58:	2000039c 	.word	0x2000039c

00006b5c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6b5c:	4801      	ldr	r0, [pc, #4]	; (6b64 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6b5e:	7800      	ldrb	r0, [r0, #0]
    6b60:	4770      	bx	lr
    6b62:	0000      	.short	0x0000
    6b64:	2000039c 	.word	0x2000039c

00006b68 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6b68:	4b0b      	ldr	r3, [pc, #44]	; (6b98 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6b6a:	f893 c002 	ldrb.w	ip, [r3, #2]
    6b6e:	4584      	cmp	ip, r0
    6b70:	bf9c      	itt	ls
    6b72:	2000      	movls	r0, #0
    6b74:	4770      	bxls	lr
    6b76:	4418      	add	r0, r3
    6b78:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6b7c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b80:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6b84:	700b      	strb	r3, [r1, #0]
    6b86:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6b8a:	6011      	str	r1, [r2, #0]
    6b8c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6b90:	8090      	strh	r0, [r2, #4]
    6b92:	2001      	movs	r0, #1
    6b94:	4770      	bx	lr
    6b96:	0000      	.short	0x0000
    6b98:	20001a29 	.word	0x20001a29

00006b9c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6b9c:	4907      	ldr	r1, [pc, #28]	; (6bbc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6b9e:	788a      	ldrb	r2, [r1, #2]
    6ba0:	4282      	cmp	r2, r0
    6ba2:	bf9c      	itt	ls
    6ba4:	2000      	movls	r0, #0
    6ba6:	4770      	bxls	lr
    6ba8:	4408      	add	r0, r1
    6baa:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6bae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6bb2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6bb6:	f000 0001 	and.w	r0, r0, #1
    6bba:	4770      	bx	lr
    6bbc:	20001a29 	.word	0x20001a29

00006bc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    6bc0:	b510      	push	{r4, lr}
    6bc2:	f000 fa53 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6bc6:	2810      	cmp	r0, #16
    6bc8:	d014      	beq.n	6bf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    6bca:	4a0b      	ldr	r2, [pc, #44]	; (6bf8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    6bcc:	4601      	mov	r1, r0
    6bce:	2000      	movs	r0, #0
    6bd0:	f892 c002 	ldrb.w	ip, [r2, #2]
    6bd4:	f1bc 0f00 	cmp.w	ip, #0
    6bd8:	d90c      	bls.n	6bf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    6bda:	1813      	adds	r3, r2, r0
    6bdc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    6be0:	428b      	cmp	r3, r1
    6be2:	d103      	bne.n	6bec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    6be4:	2810      	cmp	r0, #16
    6be6:	bf18      	it	ne
    6be8:	bd10      	popne	{r4, pc}
    6bea:	e003      	b.n	6bf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    6bec:	1c40      	adds	r0, r0, #1
    6bee:	b2c0      	uxtb	r0, r0
    6bf0:	4584      	cmp	ip, r0
    6bf2:	d8f2      	bhi.n	6bda <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    6bf4:	2008      	movs	r0, #8
    6bf6:	bd10      	pop	{r4, pc}
    6bf8:	20001a29 	.word	0x20001a29

00006bfc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c00:	4698      	mov	r8, r3
    6c02:	4691      	mov	r9, r2
    6c04:	460f      	mov	r7, r1
    6c06:	4606      	mov	r6, r0
    6c08:	f000 fa30 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6c0c:	4c2d      	ldr	r4, [pc, #180]	; (6cc4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    6c0e:	4605      	mov	r5, r0
    6c10:	2810      	cmp	r0, #16
    6c12:	d017      	beq.n	6c44 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    6c14:	78a1      	ldrb	r1, [r4, #2]
    6c16:	2000      	movs	r0, #0
    6c18:	2900      	cmp	r1, #0
    6c1a:	d90e      	bls.n	6c3a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    6c1c:	1822      	adds	r2, r4, r0
    6c1e:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    6c22:	42ab      	cmp	r3, r5
    6c24:	d105      	bne.n	6c32 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    6c26:	2810      	cmp	r0, #16
    6c28:	bf1c      	itt	ne
    6c2a:	2012      	movne	r0, #18
    6c2c:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c30:	e003      	b.n	6c3a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    6c32:	1c40      	adds	r0, r0, #1
    6c34:	b2c0      	uxtb	r0, r0
    6c36:	4281      	cmp	r1, r0
    6c38:	d8f0      	bhi.n	6c1c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6c3a:	2908      	cmp	r1, #8
    6c3c:	d23f      	bcs.n	6cbe <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    6c3e:	2d10      	cmp	r5, #16
    6c40:	d003      	beq.n	6c4a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    6c42:	e018      	b.n	6c76 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    6c44:	78a1      	ldrb	r1, [r4, #2]
    6c46:	2908      	cmp	r1, #8
    6c48:	d239      	bcs.n	6cbe <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    6c4a:	7825      	ldrb	r5, [r4, #0]
    6c4c:	2100      	movs	r1, #0
    6c4e:	1c68      	adds	r0, r5, #1
    6c50:	7020      	strb	r0, [r4, #0]
    6c52:	2d10      	cmp	r5, #16
    6c54:	d303      	bcc.n	6c5e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    6c56:	2146      	movs	r1, #70	; 0x46
    6c58:	2028      	movs	r0, #40	; 0x28
    6c5a:	f7fd ffe9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c5e:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    6c62:	683a      	ldr	r2, [r7, #0]
    6c64:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    6c68:	88ba      	ldrh	r2, [r7, #4]
    6c6a:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    6c6e:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    6c72:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6c76:	78a6      	ldrb	r6, [r4, #2]
    6c78:	2210      	movs	r2, #16
    6c7a:	1c70      	adds	r0, r6, #1
    6c7c:	70a0      	strb	r0, [r4, #2]
    6c7e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    6c82:	1cf8      	adds	r0, r7, #3
    6c84:	4649      	mov	r1, r9
    6c86:	f000 fd07 	bl	7698 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6c8a:	f107 0083 	add.w	r0, r7, #131	; 0x83
    6c8e:	2210      	movs	r2, #16
    6c90:	4641      	mov	r1, r8
    6c92:	f000 fd01 	bl	7698 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6c96:	2110      	movs	r1, #16
    6c98:	4640      	mov	r0, r8
    6c9a:	f000 fdc7 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6c9e:	4434      	add	r4, r6
    6ca0:	2110      	movs	r1, #16
    6ca2:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6ca6:	4648      	mov	r0, r9
    6ca8:	f000 fdc0 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6cac:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    6cb0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    6cb4:	2000      	movs	r0, #0
    6cb6:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    6cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cbe:	2007      	movs	r0, #7
    6cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cc4:	20001a29 	.word	0x20001a29

00006cc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6cc8:	b470      	push	{r4, r5, r6}
    6cca:	484d      	ldr	r0, [pc, #308]	; (6e00 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    6ccc:	7881      	ldrb	r1, [r0, #2]
    6cce:	1e49      	subs	r1, r1, #1
    6cd0:	b24b      	sxtb	r3, r1
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	bfbc      	itt	lt
    6cd6:	bc70      	poplt	{r4, r5, r6}
    6cd8:	4770      	bxlt	lr
    6cda:	bf00      	nop
    6cdc:	7881      	ldrb	r1, [r0, #2]
    6cde:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    6ce2:	1e49      	subs	r1, r1, #1
    6ce4:	b2ca      	uxtb	r2, r1
    6ce6:	7082      	strb	r2, [r0, #2]
    6ce8:	fa50 f183 	uxtab	r1, r0, r3
    6cec:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    6cf0:	4594      	cmp	ip, r2
    6cf2:	d03e      	beq.n	6d72 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    6cf4:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    6cf8:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    6cfc:	f8d5 6003 	ldr.w	r6, [r5, #3]
    6d00:	f8c4 6003 	str.w	r6, [r4, #3]
    6d04:	f8d5 6007 	ldr.w	r6, [r5, #7]
    6d08:	f8c4 6007 	str.w	r6, [r4, #7]
    6d0c:	f8d5 600b 	ldr.w	r6, [r5, #11]
    6d10:	f8c4 600b 	str.w	r6, [r4, #11]
    6d14:	f8d5 600f 	ldr.w	r6, [r5, #15]
    6d18:	f8c4 600f 	str.w	r6, [r4, #15]
    6d1c:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    6d20:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    6d24:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    6d28:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    6d2c:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    6d30:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    6d34:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    6d38:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    6d3c:	1885      	adds	r5, r0, r2
    6d3e:	eb00 040c 	add.w	r4, r0, ip
    6d42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6d46:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    6d4a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    6d4e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    6d52:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    6d56:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    6d5a:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    6d5e:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    6d62:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6d66:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    6d6a:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    6d6e:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    6d72:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6d76:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    6d7a:	f012 0f01 	tst.w	r2, #1
    6d7e:	d133      	bne.n	6de8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6d80:	f890 c002 	ldrb.w	ip, [r0, #2]
    6d84:	2200      	movs	r2, #0
    6d86:	f1bc 0f00 	cmp.w	ip, #0
    6d8a:	d90b      	bls.n	6da4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6d8c:	1884      	adds	r4, r0, r2
    6d8e:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    6d92:	428d      	cmp	r5, r1
    6d94:	d102      	bne.n	6d9c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    6d96:	2a10      	cmp	r2, #16
    6d98:	d126      	bne.n	6de8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6d9a:	e003      	b.n	6da4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6d9c:	1c52      	adds	r2, r2, #1
    6d9e:	b2d2      	uxtb	r2, r2
    6da0:	4594      	cmp	ip, r2
    6da2:	d8f3      	bhi.n	6d8c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    6da4:	7802      	ldrb	r2, [r0, #0]
    6da6:	1e52      	subs	r2, r2, #1
    6da8:	b2d2      	uxtb	r2, r2
    6daa:	7002      	strb	r2, [r0, #0]
    6dac:	428a      	cmp	r2, r1
    6dae:	d01b      	beq.n	6de8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6db0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    6db4:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6db8:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    6dbc:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    6dc0:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6dc4:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6dc8:	7884      	ldrb	r4, [r0, #2]
    6dca:	f890 c000 	ldrb.w	ip, [r0]
    6dce:	2200      	movs	r2, #0
    6dd0:	2c00      	cmp	r4, #0
    6dd2:	d909      	bls.n	6de8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6dd4:	1885      	adds	r5, r0, r2
    6dd6:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    6dda:	4565      	cmp	r5, ip
    6ddc:	d10b      	bne.n	6df6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    6dde:	2a10      	cmp	r2, #16
    6de0:	bf1c      	itt	ne
    6de2:	4402      	addne	r2, r0
    6de4:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6de8:	1e59      	subs	r1, r3, #1
    6dea:	b24b      	sxtb	r3, r1
    6dec:	2b00      	cmp	r3, #0
    6dee:	f6bf af75 	bge.w	6cdc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    6df2:	bc70      	pop	{r4, r5, r6}
    6df4:	4770      	bx	lr
    6df6:	1c52      	adds	r2, r2, #1
    6df8:	b2d2      	uxtb	r2, r2
    6dfa:	4294      	cmp	r4, r2
    6dfc:	d8ea      	bhi.n	6dd4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    6dfe:	e7f3      	b.n	6de8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6e00:	20001a29 	.word	0x20001a29

00006e04 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    6e04:	b510      	push	{r4, lr}
    6e06:	f000 f931 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6e0a:	2810      	cmp	r0, #16
    6e0c:	d016      	beq.n	6e3c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    6e0e:	4a0c      	ldr	r2, [pc, #48]	; (6e40 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    6e10:	4601      	mov	r1, r0
    6e12:	2000      	movs	r0, #0
    6e14:	7893      	ldrb	r3, [r2, #2]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d910      	bls.n	6e3c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    6e1a:	bf00      	nop
    6e1c:	eb02 0c00 	add.w	ip, r2, r0
    6e20:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6e24:	458c      	cmp	ip, r1
    6e26:	d105      	bne.n	6e34 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    6e28:	2810      	cmp	r0, #16
    6e2a:	d007      	beq.n	6e3c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    6e2c:	f000 f942 	bl	70b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    6e30:	2001      	movs	r0, #1
    6e32:	bd10      	pop	{r4, pc}
    6e34:	1c40      	adds	r0, r0, #1
    6e36:	b2c0      	uxtb	r0, r0
    6e38:	4283      	cmp	r3, r0
    6e3a:	d8ef      	bhi.n	6e1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    6e3c:	2000      	movs	r0, #0
    6e3e:	bd10      	pop	{r4, pc}
    6e40:	20001a29 	.word	0x20001a29

00006e44 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6e44:	4801      	ldr	r0, [pc, #4]	; (6e4c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6e46:	8840      	ldrh	r0, [r0, #2]
    6e48:	4770      	bx	lr
    6e4a:	0000      	.short	0x0000
    6e4c:	2000039c 	.word	0x2000039c

00006e50 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6e50:	b138      	cbz	r0, 6e62 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6e52:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6e56:	4288      	cmp	r0, r1
    6e58:	d803      	bhi.n	6e62 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6e5a:	4903      	ldr	r1, [pc, #12]	; (6e68 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6e5c:	8048      	strh	r0, [r1, #2]
    6e5e:	2001      	movs	r0, #1
    6e60:	4770      	bx	lr
    6e62:	2000      	movs	r0, #0
    6e64:	4770      	bx	lr
    6e66:	0000      	.short	0x0000
    6e68:	2000039c 	.word	0x2000039c

00006e6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6e6c:	4906      	ldr	r1, [pc, #24]	; (6e88 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    6e6e:	788a      	ldrb	r2, [r1, #2]
    6e70:	4282      	cmp	r2, r0
    6e72:	d906      	bls.n	6e82 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    6e74:	4408      	add	r0, r1
    6e76:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6e7a:	2800      	cmp	r0, #0
    6e7c:	bf04      	itt	eq
    6e7e:	2001      	moveq	r0, #1
    6e80:	4770      	bxeq	lr
    6e82:	2000      	movs	r0, #0
    6e84:	4770      	bx	lr
    6e86:	0000      	.short	0x0000
    6e88:	20001a29 	.word	0x20001a29

00006e8c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6e8c:	b570      	push	{r4, r5, r6, lr}
    6e8e:	460d      	mov	r5, r1
    6e90:	4604      	mov	r4, r0
    6e92:	f000 f8eb 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6e96:	4a1a      	ldr	r2, [pc, #104]	; (6f00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    6e98:	2810      	cmp	r0, #16
    6e9a:	d014      	beq.n	6ec6 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    6e9c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    6ea0:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    6ea4:	f010 0f01 	tst.w	r0, #1
    6ea8:	bf1c      	itt	ne
    6eaa:	2001      	movne	r0, #1
    6eac:	bd70      	popne	{r4, r5, r6, pc}
    6eae:	7850      	ldrb	r0, [r2, #1]
    6eb0:	2808      	cmp	r0, #8
    6eb2:	bf3c      	itt	cc
    6eb4:	2001      	movcc	r0, #1
    6eb6:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    6eba:	d21e      	bcs.n	6efa <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    6ebc:	7850      	ldrb	r0, [r2, #1]
    6ebe:	1c40      	adds	r0, r0, #1
    6ec0:	7050      	strb	r0, [r2, #1]
    6ec2:	2001      	movs	r0, #1
    6ec4:	bd70      	pop	{r4, r5, r6, pc}
    6ec6:	7850      	ldrb	r0, [r2, #1]
    6ec8:	2808      	cmp	r0, #8
    6eca:	d216      	bcs.n	6efa <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    6ecc:	7813      	ldrb	r3, [r2, #0]
    6ece:	2001      	movs	r0, #1
    6ed0:	1c59      	adds	r1, r3, #1
    6ed2:	7011      	strb	r1, [r2, #0]
    6ed4:	2b10      	cmp	r3, #16
    6ed6:	d303      	bcc.n	6ee0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    6ed8:	2146      	movs	r1, #70	; 0x46
    6eda:	2028      	movs	r0, #40	; 0x28
    6edc:	f7fd fea8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ee0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ee4:	6829      	ldr	r1, [r5, #0]
    6ee6:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    6eea:	88a9      	ldrh	r1, [r5, #4]
    6eec:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6ef0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6ef4:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    6ef8:	e7e0      	b.n	6ebc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    6efa:	2000      	movs	r0, #0
    6efc:	bd70      	pop	{r4, r5, r6, pc}
    6efe:	0000      	.short	0x0000
    6f00:	20001a29 	.word	0x20001a29

00006f04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    6f04:	4901      	ldr	r1, [pc, #4]	; (6f0c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    6f06:	7048      	strb	r0, [r1, #1]
    6f08:	4770      	bx	lr
    6f0a:	0000      	.short	0x0000
    6f0c:	2000039c 	.word	0x2000039c

00006f10 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6f10:	b470      	push	{r4, r5, r6}
    6f12:	482b      	ldr	r0, [pc, #172]	; (6fc0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    6f14:	2500      	movs	r5, #0
    6f16:	7801      	ldrb	r1, [r0, #0]
    6f18:	1e49      	subs	r1, r1, #1
    6f1a:	b24b      	sxtb	r3, r1
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	db46      	blt.n	6fae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    6f20:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    6f24:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6f28:	f011 0f01 	tst.w	r1, #1
    6f2c:	d03b      	beq.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6f2e:	7842      	ldrb	r2, [r0, #1]
    6f30:	b2d9      	uxtb	r1, r3
    6f32:	1e52      	subs	r2, r2, #1
    6f34:	7042      	strb	r2, [r0, #1]
    6f36:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6f3a:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    6f3e:	f890 c002 	ldrb.w	ip, [r0, #2]
    6f42:	2200      	movs	r2, #0
    6f44:	f1bc 0f00 	cmp.w	ip, #0
    6f48:	d90b      	bls.n	6f62 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    6f4a:	1884      	adds	r4, r0, r2
    6f4c:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    6f50:	428e      	cmp	r6, r1
    6f52:	d102      	bne.n	6f5a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    6f54:	2a10      	cmp	r2, #16
    6f56:	d126      	bne.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6f58:	e003      	b.n	6f62 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    6f5a:	1c52      	adds	r2, r2, #1
    6f5c:	b2d2      	uxtb	r2, r2
    6f5e:	4594      	cmp	ip, r2
    6f60:	d8f3      	bhi.n	6f4a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    6f62:	7802      	ldrb	r2, [r0, #0]
    6f64:	1e52      	subs	r2, r2, #1
    6f66:	b2d2      	uxtb	r2, r2
    6f68:	7002      	strb	r2, [r0, #0]
    6f6a:	428a      	cmp	r2, r1
    6f6c:	d01b      	beq.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6f6e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    6f72:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6f76:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    6f7a:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    6f7e:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6f82:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6f86:	7884      	ldrb	r4, [r0, #2]
    6f88:	f890 c000 	ldrb.w	ip, [r0]
    6f8c:	2200      	movs	r2, #0
    6f8e:	2c00      	cmp	r4, #0
    6f90:	d909      	bls.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6f92:	1886      	adds	r6, r0, r2
    6f94:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    6f98:	4566      	cmp	r6, ip
    6f9a:	d10c      	bne.n	6fb6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    6f9c:	2a10      	cmp	r2, #16
    6f9e:	bf1c      	itt	ne
    6fa0:	4402      	addne	r2, r0
    6fa2:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6fa6:	1e59      	subs	r1, r3, #1
    6fa8:	b24b      	sxtb	r3, r1
    6faa:	2b00      	cmp	r3, #0
    6fac:	dab8      	bge.n	6f20 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    6fae:	4805      	ldr	r0, [pc, #20]	; (6fc4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    6fb0:	7045      	strb	r5, [r0, #1]
    6fb2:	bc70      	pop	{r4, r5, r6}
    6fb4:	4770      	bx	lr
    6fb6:	1c52      	adds	r2, r2, #1
    6fb8:	b2d2      	uxtb	r2, r2
    6fba:	4294      	cmp	r4, r2
    6fbc:	d8e9      	bhi.n	6f92 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    6fbe:	e7f2      	b.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6fc0:	20001a29 	.word	0x20001a29
    6fc4:	2000039c 	.word	0x2000039c

00006fc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fcc:	4d25      	ldr	r5, [pc, #148]	; (7064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6fce:	2600      	movs	r6, #0
    6fd0:	4634      	mov	r4, r6
    6fd2:	7828      	ldrb	r0, [r5, #0]
    6fd4:	2800      	cmp	r0, #0
    6fd6:	bf8c      	ite	hi
    6fd8:	4f23      	ldrhi	r7, [pc, #140]	; (7068 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6fda:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fde:	bf00      	nop
    6fe0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6fe4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    6fe8:	f011 0f01 	tst.w	r1, #1
    6fec:	d032      	beq.n	7054 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6fee:	78aa      	ldrb	r2, [r5, #2]
    6ff0:	2100      	movs	r1, #0
    6ff2:	4623      	mov	r3, r4
    6ff4:	2a00      	cmp	r2, #0
    6ff6:	d909      	bls.n	700c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    6ff8:	eb05 0c01 	add.w	ip, r5, r1
    6ffc:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    7000:	459c      	cmp	ip, r3
    7002:	d004      	beq.n	700e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    7004:	1c49      	adds	r1, r1, #1
    7006:	b2c9      	uxtb	r1, r1
    7008:	428a      	cmp	r2, r1
    700a:	d8f5      	bhi.n	6ff8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    700c:	2110      	movs	r1, #16
    700e:	428a      	cmp	r2, r1
    7010:	bf86      	itte	hi
    7012:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    7016:	1cd3      	addhi	r3, r2, #3
    7018:	2300      	movls	r3, #0
    701a:	2200      	movs	r2, #0
    701c:	2910      	cmp	r1, #16
    701e:	d00c      	beq.n	703a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    7020:	eb05 0c01 	add.w	ip, r5, r1
    7024:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    7028:	f1b8 0f01 	cmp.w	r8, #1
    702c:	d004      	beq.n	7038 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    702e:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    7032:	f1bc 0f00 	cmp.w	ip, #0
    7036:	d000      	beq.n	703a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    7038:	2201      	movs	r2, #1
    703a:	1e52      	subs	r2, r2, #1
    703c:	4213      	tst	r3, r2
    703e:	d109      	bne.n	7054 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    7040:	55b9      	strb	r1, [r7, r6]
    7042:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    7046:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    704a:	4630      	mov	r0, r6
    704c:	1c73      	adds	r3, r6, #1
    704e:	b2de      	uxtb	r6, r3
    7050:	f008 fd60 	bl	fb14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    7054:	1c60      	adds	r0, r4, #1
    7056:	b2c4      	uxtb	r4, r0
    7058:	7828      	ldrb	r0, [r5, #0]
    705a:	42a0      	cmp	r0, r4
    705c:	d8c0      	bhi.n	6fe0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    705e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7062:	0000      	.short	0x0000
    7064:	20001a29 	.word	0x20001a29
    7068:	200003a0 	.word	0x200003a0
    706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7070:	4d0f      	ldr	r5, [pc, #60]	; (70b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    7072:	4606      	mov	r6, r0
    7074:	2400      	movs	r4, #0
    7076:	7828      	ldrb	r0, [r5, #0]
    7078:	460f      	mov	r7, r1
    707a:	2800      	cmp	r0, #0
    707c:	d912      	bls.n	70a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    707e:	bf00      	nop
    7080:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    7084:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    7088:	42b1      	cmp	r1, r6
    708a:	d106      	bne.n	709a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    708c:	2206      	movs	r2, #6
    708e:	4639      	mov	r1, r7
    7090:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    7094:	f008 ffe4 	bl	10060 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7098:	b138      	cbz	r0, 70aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    709a:	1c60      	adds	r0, r4, #1
    709c:	b2c4      	uxtb	r4, r0
    709e:	7828      	ldrb	r0, [r5, #0]
    70a0:	42a0      	cmp	r0, r4
    70a2:	d8ed      	bhi.n	7080 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    70a4:	2010      	movs	r0, #16
    70a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70aa:	4620      	mov	r0, r4
    70ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70b0:	20001a29 	.word	0x20001a29
    70b4:	b470      	push	{r4, r5, r6}
    70b6:	4949      	ldr	r1, [pc, #292]	; (71dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    70b8:	180d      	adds	r5, r1, r0
    70ba:	788a      	ldrb	r2, [r1, #2]
    70bc:	1e52      	subs	r2, r2, #1
    70be:	b2d3      	uxtb	r3, r2
    70c0:	708b      	strb	r3, [r1, #2]
    70c2:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    70c6:	4298      	cmp	r0, r3
    70c8:	d03d      	beq.n	7146 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    70ca:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    70ce:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    70d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    70d6:	f8dc 6003 	ldr.w	r6, [ip, #3]
    70da:	f8c4 6003 	str.w	r6, [r4, #3]
    70de:	f8dc 6007 	ldr.w	r6, [ip, #7]
    70e2:	f8c4 6007 	str.w	r6, [r4, #7]
    70e6:	f8dc 600b 	ldr.w	r6, [ip, #11]
    70ea:	f8c4 600b 	str.w	r6, [r4, #11]
    70ee:	f8dc 600f 	ldr.w	r6, [ip, #15]
    70f2:	f8c4 600f 	str.w	r6, [r4, #15]
    70f6:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    70fa:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    70fe:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    7102:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    7106:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    710a:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    710e:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    7112:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    7116:	eb01 0c03 	add.w	ip, r1, r3
    711a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    711e:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    7122:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    7126:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    712a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    712e:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    7132:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    7136:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    713a:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    713e:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    7142:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    7146:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    714a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    714e:	f010 0f01 	tst.w	r0, #1
    7152:	bf1c      	itt	ne
    7154:	bc70      	popne	{r4, r5, r6}
    7156:	4770      	bxne	lr
    7158:	2000      	movs	r0, #0
    715a:	788c      	ldrb	r4, [r1, #2]
    715c:	2c00      	cmp	r4, #0
    715e:	d90d      	bls.n	717c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    7160:	180b      	adds	r3, r1, r0
    7162:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    7166:	4594      	cmp	ip, r2
    7168:	d104      	bne.n	7174 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    716a:	2810      	cmp	r0, #16
    716c:	bf1c      	itt	ne
    716e:	bc70      	popne	{r4, r5, r6}
    7170:	4770      	bxne	lr
    7172:	e003      	b.n	717c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    7174:	1c40      	adds	r0, r0, #1
    7176:	b2c0      	uxtb	r0, r0
    7178:	4284      	cmp	r4, r0
    717a:	d8f1      	bhi.n	7160 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    717c:	7808      	ldrb	r0, [r1, #0]
    717e:	1e40      	subs	r0, r0, #1
    7180:	b2c0      	uxtb	r0, r0
    7182:	7008      	strb	r0, [r1, #0]
    7184:	4290      	cmp	r0, r2
    7186:	bf04      	itt	eq
    7188:	bc70      	popeq	{r4, r5, r6}
    718a:	4770      	bxeq	lr
    718c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    7190:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7194:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    7198:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    719c:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    71a0:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    71a4:	788c      	ldrb	r4, [r1, #2]
    71a6:	780b      	ldrb	r3, [r1, #0]
    71a8:	2000      	movs	r0, #0
    71aa:	2c00      	cmp	r4, #0
    71ac:	bf9c      	itt	ls
    71ae:	bc70      	popls	{r4, r5, r6}
    71b0:	4770      	bxls	lr
    71b2:	bf00      	nop
    71b4:	eb01 0c00 	add.w	ip, r1, r0
    71b8:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    71bc:	459c      	cmp	ip, r3
    71be:	d106      	bne.n	71ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    71c0:	2810      	cmp	r0, #16
    71c2:	bf1c      	itt	ne
    71c4:	4408      	addne	r0, r1
    71c6:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    71ca:	bc70      	pop	{r4, r5, r6}
    71cc:	4770      	bx	lr
    71ce:	1c40      	adds	r0, r0, #1
    71d0:	b2c0      	uxtb	r0, r0
    71d2:	4284      	cmp	r4, r0
    71d4:	d8ee      	bhi.n	71b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    71d6:	bc70      	pop	{r4, r5, r6}
    71d8:	4770      	bx	lr
    71da:	0000      	.short	0x0000
    71dc:	20001a29 	.word	0x20001a29
    71e0:	4925      	ldr	r1, [pc, #148]	; (7278 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    71e2:	b410      	push	{r4}
    71e4:	784a      	ldrb	r2, [r1, #1]
    71e6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    71ea:	1e52      	subs	r2, r2, #1
    71ec:	704a      	strb	r2, [r1, #1]
    71ee:	2200      	movs	r2, #0
    71f0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    71f4:	f891 c002 	ldrb.w	ip, [r1, #2]
    71f8:	f1bc 0f00 	cmp.w	ip, #0
    71fc:	d90d      	bls.n	721a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    71fe:	188b      	adds	r3, r1, r2
    7200:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    7204:	4284      	cmp	r4, r0
    7206:	d104      	bne.n	7212 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    7208:	2a10      	cmp	r2, #16
    720a:	bf1c      	itt	ne
    720c:	bc10      	popne	{r4}
    720e:	4770      	bxne	lr
    7210:	e003      	b.n	721a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    7212:	1c52      	adds	r2, r2, #1
    7214:	b2d2      	uxtb	r2, r2
    7216:	4594      	cmp	ip, r2
    7218:	d8f1      	bhi.n	71fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    721a:	780a      	ldrb	r2, [r1, #0]
    721c:	1e52      	subs	r2, r2, #1
    721e:	b2d2      	uxtb	r2, r2
    7220:	700a      	strb	r2, [r1, #0]
    7222:	4282      	cmp	r2, r0
    7224:	bf04      	itt	eq
    7226:	bc10      	popeq	{r4}
    7228:	4770      	bxeq	lr
    722a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    722e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    7232:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    7236:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    723a:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    723e:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    7242:	788c      	ldrb	r4, [r1, #2]
    7244:	f891 c000 	ldrb.w	ip, [r1]
    7248:	2200      	movs	r2, #0
    724a:	2c00      	cmp	r4, #0
    724c:	bf9c      	itt	ls
    724e:	bc10      	popls	{r4}
    7250:	4770      	bxls	lr
    7252:	188b      	adds	r3, r1, r2
    7254:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    7258:	4563      	cmp	r3, ip
    725a:	d106      	bne.n	726a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    725c:	2a10      	cmp	r2, #16
    725e:	bf1c      	itt	ne
    7260:	4411      	addne	r1, r2
    7262:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    7266:	bc10      	pop	{r4}
    7268:	4770      	bx	lr
    726a:	1c52      	adds	r2, r2, #1
    726c:	b2d2      	uxtb	r2, r2
    726e:	4294      	cmp	r4, r2
    7270:	d8ef      	bhi.n	7252 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    7272:	bc10      	pop	{r4}
    7274:	4770      	bx	lr
    7276:	0000      	.short	0x0000
    7278:	20001a29 	.word	0x20001a29

0000727c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    727c:	b570      	push	{r4, r5, r6, lr}
    727e:	b08c      	sub	sp, #48	; 0x30
    7280:	f100 0410 	add.w	r4, r0, #16
    7284:	461d      	mov	r5, r3
    7286:	4616      	mov	r6, r2
    7288:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    728c:	f05f 0008 	movs.w	r0, #8
    7290:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    7294:	f88c 2001 	strb.w	r2, [ip, #1]
    7298:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    729c:	f80c 2f02 	strb.w	r2, [ip, #2]!
    72a0:	1e40      	subs	r0, r0, #1
    72a2:	d1f5      	bne.n	7290 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    72a4:	f101 0c10 	add.w	ip, r1, #16
    72a8:	466c      	mov	r4, sp
    72aa:	f10d 010f 	add.w	r1, sp, #15
    72ae:	2008      	movs	r0, #8
    72b0:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    72b4:	704a      	strb	r2, [r1, #1]
    72b6:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    72ba:	f801 2f02 	strb.w	r2, [r1, #2]!
    72be:	1e40      	subs	r0, r0, #1
    72c0:	d1f6      	bne.n	72b0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    72c2:	4620      	mov	r0, r4
    72c4:	f009 ffce 	bl	11264 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    72c8:	b17e      	cbz	r6, 72ea <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    72ca:	1e6a      	subs	r2, r5, #1
    72cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    72d0:	f05f 0108 	movs.w	r1, #8
    72d4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    72d8:	7053      	strb	r3, [r2, #1]
    72da:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    72de:	f802 3f02 	strb.w	r3, [r2, #2]!
    72e2:	1e49      	subs	r1, r1, #1
    72e4:	d1f6      	bne.n	72d4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    72e6:	b00c      	add	sp, #48	; 0x30
    72e8:	bd70      	pop	{r4, r5, r6, pc}
    72ea:	9808      	ldr	r0, [sp, #32]
    72ec:	6028      	str	r0, [r5, #0]
    72ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    72f0:	6068      	str	r0, [r5, #4]
    72f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    72f4:	60a8      	str	r0, [r5, #8]
    72f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    72f8:	60e8      	str	r0, [r5, #12]
    72fa:	b00c      	add	sp, #48	; 0x30
    72fc:	bd70      	pop	{r4, r5, r6, pc}
	...

00007300 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    7300:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    7304:	7e44      	ldrb	r4, [r0, #25]
    7306:	b10c      	cbz	r4, 730c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    7308:	2c25      	cmp	r4, #37	; 0x25
    730a:	d903      	bls.n	7314 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    730c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7310:	2012      	movs	r0, #18
    7312:	4770      	bx	lr
    7314:	2a00      	cmp	r2, #0
    7316:	bf02      	ittt	eq
    7318:	2000      	moveq	r0, #0
    731a:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    731e:	4770      	bxeq	lr
    7320:	f891 c011 	ldrb.w	ip, [r1, #17]
    7324:	261f      	movs	r6, #31
    7326:	2301      	movs	r3, #1
    7328:	4d6c      	ldr	r5, [pc, #432]	; (74dc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    732a:	f04f 0800 	mov.w	r8, #0
    732e:	f1bc 0f00 	cmp.w	ip, #0
    7332:	d073      	beq.n	741c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    7334:	f1bc 0f01 	cmp.w	ip, #1
    7338:	bf1e      	ittt	ne
    733a:	201f      	movne	r0, #31
    733c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    7340:	4770      	bxne	lr
    7342:	f8b0 c000 	ldrh.w	ip, [r0]
    7346:	7d0a      	ldrb	r2, [r1, #20]
    7348:	7c8f      	ldrb	r7, [r1, #18]
    734a:	f891 9013 	ldrb.w	r9, [r1, #19]
    734e:	407a      	eors	r2, r7
    7350:	7d4f      	ldrb	r7, [r1, #21]
    7352:	ea87 0709 	eor.w	r7, r7, r9
    7356:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    735a:	ea82 0c0c 	eor.w	ip, r2, ip
    735e:	2700      	movs	r7, #0
    7360:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    7364:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    7368:	fa99 f9a9 	rbit	r9, r9
    736c:	fa9c fcac 	rbit	ip, ip
    7370:	ea4f 6919 	mov.w	r9, r9, lsr #24
    7374:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    7378:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    737c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    7380:	1c7f      	adds	r7, r7, #1
    7382:	4494      	add	ip, r2
    7384:	b2ff      	uxtb	r7, r7
    7386:	fa1f fc8c 	uxth.w	ip, ip
    738a:	2f03      	cmp	r7, #3
    738c:	d3e8      	bcc.n	7360 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    738e:	ea8c 0c02 	eor.w	ip, ip, r2
    7392:	4f52      	ldr	r7, [pc, #328]	; (74dc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    7394:	2200      	movs	r2, #0
    7396:	fbec 7205 	umlal	r7, r2, ip, r5
    739a:	0912      	lsrs	r2, r2, #4
    739c:	f06f 0524 	mvn.w	r5, #36	; 0x24
    73a0:	fb02 c205 	mla	r2, r2, r5, ip
    73a4:	b2d2      	uxtb	r2, r2
    73a6:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    73aa:	7682      	strb	r2, [r0, #26]
    73ac:	f002 0507 	and.w	r5, r2, #7
    73b0:	7b3f      	ldrb	r7, [r7, #12]
    73b2:	fa03 f505 	lsl.w	r5, r3, r5
    73b6:	422f      	tst	r7, r5
    73b8:	bf18      	it	ne
    73ba:	76c2      	strbne	r2, [r0, #27]
    73bc:	d17e      	bne.n	74bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    73be:	fb04 f20c 	mul.w	r2, r4, ip
    73c2:	0c12      	lsrs	r2, r2, #16
    73c4:	1c52      	adds	r2, r2, #1
    73c6:	b2d2      	uxtb	r2, r2
    73c8:	f05f 0400 	movs.w	r4, #0
    73cc:	eb00 0c04 	add.w	ip, r0, r4
    73d0:	f89c c014 	ldrb.w	ip, [ip, #20]
    73d4:	4594      	cmp	ip, r2
    73d6:	bf3c      	itt	cc
    73d8:	eba2 020c 	subcc.w	r2, r2, ip
    73dc:	b2d2      	uxtbcc	r2, r2
    73de:	d312      	bcc.n	7406 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    73e0:	190d      	adds	r5, r1, r4
    73e2:	f04f 0c00 	mov.w	ip, #0
    73e6:	7b2d      	ldrb	r5, [r5, #12]
    73e8:	fa03 f70c 	lsl.w	r7, r3, ip
    73ec:	423d      	tst	r5, r7
    73ee:	bf1c      	itt	ne
    73f0:	1e52      	subne	r2, r2, #1
    73f2:	b2d2      	uxtbne	r2, r2
    73f4:	2a00      	cmp	r2, #0
    73f6:	d069      	beq.n	74cc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    73f8:	f10c 0c01 	add.w	ip, ip, #1
    73fc:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    7400:	f1bc 0f08 	cmp.w	ip, #8
    7404:	d3f0      	bcc.n	73e8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    7406:	f104 0c01 	add.w	ip, r4, #1
    740a:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    740e:	2c05      	cmp	r4, #5
    7410:	d3dc      	bcc.n	73cc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    7412:	4630      	mov	r0, r6
    7414:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7418:	4770      	bx	lr
    741a:	e7ff      	b.n	741c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    741c:	f890 c01a 	ldrb.w	ip, [r0, #26]
    7420:	f891 4020 	ldrb.w	r4, [r1, #32]
    7424:	4647      	mov	r7, r8
    7426:	fb04 c202 	mla	r2, r4, r2, ip
    742a:	4c2c      	ldr	r4, [pc, #176]	; (74dc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    742c:	f04f 0c00 	mov.w	ip, #0
    7430:	fbe2 4c05 	umlal	r4, ip, r2, r5
    7434:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    7438:	f06f 0424 	mvn.w	r4, #36	; 0x24
    743c:	fb0c 2204 	mla	r2, ip, r4, r2
    7440:	b2d2      	uxtb	r2, r2
    7442:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    7446:	7682      	strb	r2, [r0, #26]
    7448:	f002 0c07 	and.w	ip, r2, #7
    744c:	7b24      	ldrb	r4, [r4, #12]
    744e:	fa03 fc0c 	lsl.w	ip, r3, ip
    7452:	ea14 0f0c 	tst.w	r4, ip
    7456:	bf1f      	itttt	ne
    7458:	76c2      	strbne	r2, [r0, #27]
    745a:	4640      	movne	r0, r8
    745c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    7460:	4770      	bxne	lr
    7462:	f890 c019 	ldrb.w	ip, [r0, #25]
    7466:	fbb2 f4fc 	udiv	r4, r2, ip
    746a:	fb0c 2214 	mls	r2, ip, r4, r2
    746e:	1c52      	adds	r2, r2, #1
    7470:	b2d2      	uxtb	r2, r2
    7472:	2400      	movs	r4, #0
    7474:	eb00 0c04 	add.w	ip, r0, r4
    7478:	f89c c014 	ldrb.w	ip, [ip, #20]
    747c:	4594      	cmp	ip, r2
    747e:	bf3c      	itt	cc
    7480:	eba2 020c 	subcc.w	r2, r2, ip
    7484:	b2d2      	uxtbcc	r2, r2
    7486:	d312      	bcc.n	74ae <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    7488:	190d      	adds	r5, r1, r4
    748a:	f04f 0c00 	mov.w	ip, #0
    748e:	7b2d      	ldrb	r5, [r5, #12]
    7490:	fa03 f80c 	lsl.w	r8, r3, ip
    7494:	ea15 0f08 	tst.w	r5, r8
    7498:	bf1c      	itt	ne
    749a:	1e52      	subne	r2, r2, #1
    749c:	b2d2      	uxtbne	r2, r2
    749e:	b172      	cbz	r2, 74be <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    74a0:	f10c 0c01 	add.w	ip, ip, #1
    74a4:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    74a8:	f1bc 0f08 	cmp.w	ip, #8
    74ac:	d3f0      	bcc.n	7490 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    74ae:	f104 0c01 	add.w	ip, r4, #1
    74b2:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    74b6:	2c05      	cmp	r4, #5
    74b8:	d3dc      	bcc.n	7474 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    74ba:	e7aa      	b.n	7412 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    74bc:	e009      	b.n	74d2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    74be:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    74c2:	76c1      	strb	r1, [r0, #27]
    74c4:	4638      	mov	r0, r7
    74c6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    74ca:	4770      	bx	lr
    74cc:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    74d0:	76c1      	strb	r1, [r0, #27]
    74d2:	4640      	mov	r0, r8
    74d4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    74d8:	4770      	bx	lr
    74da:	0000      	.short	0x0000
    74dc:	6eb3e453 	.word	0x6eb3e453

000074e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    74e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74e4:	2701      	movs	r7, #1
    74e6:	4604      	mov	r4, r0
    74e8:	2500      	movs	r5, #0
    74ea:	b169      	cbz	r1, 7508 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    74ec:	2901      	cmp	r1, #1
    74ee:	d05d      	beq.n	75ac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    74f0:	2902      	cmp	r1, #2
    74f2:	d07c      	beq.n	75ee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    74f4:	2903      	cmp	r1, #3
    74f6:	bf18      	it	ne
    74f8:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74fc:	4601      	mov	r1, r0
    74fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7502:	3078      	adds	r0, #120	; 0x78
    7504:	f00a b9ae 	b.w	11864 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    7508:	f104 0678 	add.w	r6, r4, #120	; 0x78
    750c:	2288      	movs	r2, #136	; 0x88
    750e:	2100      	movs	r1, #0
    7510:	4630      	mov	r0, r6
    7512:	f008 fdb5 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7516:	71b5      	strb	r5, [r6, #6]
    7518:	71f5      	strb	r5, [r6, #7]
    751a:	7335      	strb	r5, [r6, #12]
    751c:	7375      	strb	r5, [r6, #13]
    751e:	73f5      	strb	r5, [r6, #15]
    7520:	7435      	strb	r5, [r6, #16]
    7522:	7175      	strb	r5, [r6, #5]
    7524:	76b5      	strb	r5, [r6, #26]
    7526:	76f5      	strb	r5, [r6, #27]
    7528:	f006 fdca 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    752c:	f644 112b 	movw	r1, #18731	; 0x492b
    7530:	4008      	ands	r0, r1
    7532:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    7536:	0a00      	lsrs	r0, r0, #8
    7538:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    753c:	20fe      	movs	r0, #254	; 0xfe
    753e:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    7542:	8826      	ldrh	r6, [r4, #0]
    7544:	2274      	movs	r2, #116	; 0x74
    7546:	2100      	movs	r1, #0
    7548:	4620      	mov	r0, r4
    754a:	f008 fd99 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    754e:	8026      	strh	r6, [r4, #0]
    7550:	2101      	movs	r1, #1
    7552:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    7556:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    755a:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    755e:	2100      	movs	r1, #0
    7560:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7564:	f00a fc7c 	bl	11e60 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7568:	221b      	movs	r2, #27
    756a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    756e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    7572:	66e5      	str	r5, [r4, #108]	; 0x6c
    7574:	6725      	str	r5, [r4, #112]	; 0x70
    7576:	7467      	strb	r7, [r4, #17]
    7578:	2280      	movs	r2, #128	; 0x80
    757a:	2100      	movs	r1, #0
    757c:	f504 7080 	add.w	r0, r4, #256	; 0x100
    7580:	f008 fd7e 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7584:	4842      	ldr	r0, [pc, #264]	; (7690 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    7586:	6060      	str	r0, [r4, #4]
    7588:	2212      	movs	r2, #18
    758a:	2100      	movs	r1, #0
    758c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    7590:	f008 fd76 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7594:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    7598:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    759c:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    75a0:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    75a4:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    75a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75ac:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    75b0:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    75b4:	6861      	ldr	r1, [r4, #4]
    75b6:	4837      	ldr	r0, [pc, #220]	; (7694 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    75b8:	460a      	mov	r2, r1
    75ba:	4408      	add	r0, r1
    75bc:	fbb0 f0f1 	udiv	r0, r0, r1
    75c0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    75c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    75c8:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    75cc:	8963      	ldrh	r3, [r4, #10]
    75ce:	f104 0078 	add.w	r0, r4, #120	; 0x78
    75d2:	f000 f94f 	bl	7874 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    75d6:	4621      	mov	r1, r4
    75d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    75dc:	f00a f942 	bl	11864 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    75e0:	f008 fd1a 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    75e4:	b3f0      	cbz	r0, 7664 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    75e6:	f8d4 1012 	ldr.w	r1, [r4, #18]
    75ea:	0c08      	lsrs	r0, r1, #16
    75ec:	e000      	b.n	75f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    75ee:	e045      	b.n	767c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    75f0:	f06f 021f 	mvn.w	r2, #31
    75f4:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    75f8:	261f      	movs	r6, #31
    75fa:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    75fe:	3954      	subs	r1, #84	; 0x54
    7600:	bf1c      	itt	ne
    7602:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    7606:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    760a:	d00a      	beq.n	7622 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    760c:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    7610:	39aa      	subs	r1, #170	; 0xaa
    7612:	bf1e      	ittt	ne
    7614:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    7618:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    761c:	f04f 0901 	movne.w	r9, #1
    7620:	d101      	bne.n	7626 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    7622:	f04f 0900 	mov.w	r9, #0
    7626:	f04f 0c00 	mov.w	ip, #0
    762a:	4663      	mov	r3, ip
    762c:	ea4f 010c 	mov.w	r1, ip
    7630:	ea8c 0800 	eor.w	r8, ip, r0
    7634:	ea6f 0808 	mvn.w	r8, r8
    7638:	ea48 0803 	orr.w	r8, r8, r3
    763c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7640:	d018      	beq.n	7674 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    7642:	f002 0801 	and.w	r8, r2, #1
    7646:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    764a:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    764e:	f006 0801 	and.w	r8, r6, #1
    7652:	085b      	lsrs	r3, r3, #1
    7654:	0852      	lsrs	r2, r2, #1
    7656:	0876      	lsrs	r6, r6, #1
    7658:	1c49      	adds	r1, r1, #1
    765a:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    765e:	2916      	cmp	r1, #22
    7660:	d3e6      	bcc.n	7630 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    7662:	e000      	b.n	7666 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    7664:	e002      	b.n	766c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    7666:	f1b9 0f00 	cmp.w	r9, #0
    766a:	d003      	beq.n	7674 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    766c:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    7670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7674:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    7678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    767c:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    7680:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    7684:	6861      	ldr	r1, [r4, #4]
    7686:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    768a:	3078      	adds	r0, #120	; 0x78
    768c:	f000 b8f2 	b.w	7874 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    7690:	003d0900 	.word	0x003d0900
    7694:	01c9c37f 	.word	0x01c9c37f

00007698 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    7698:	2a00      	cmp	r2, #0
    769a:	bf08      	it	eq
    769c:	4770      	bxeq	lr
    769e:	4411      	add	r1, r2
    76a0:	1e40      	subs	r0, r0, #1
    76a2:	f012 0f01 	tst.w	r2, #1
    76a6:	d003      	beq.n	76b0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    76a8:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    76ac:	f800 3f01 	strb.w	r3, [r0, #1]!
    76b0:	0852      	lsrs	r2, r2, #1
    76b2:	bf08      	it	eq
    76b4:	4770      	bxeq	lr
    76b6:	bf00      	nop
    76b8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    76bc:	7043      	strb	r3, [r0, #1]
    76be:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    76c2:	f800 3f02 	strb.w	r3, [r0, #2]!
    76c6:	1e52      	subs	r2, r2, #1
    76c8:	d1f6      	bne.n	76b8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    76ca:	4770      	bx	lr

000076cc <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    76cc:	b510      	push	{r4, lr}
    76ce:	2820      	cmp	r0, #32
    76d0:	bf3e      	ittt	cc
    76d2:	4904      	ldrcc	r1, [pc, #16]	; (76e4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    76d4:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    76d8:	bd10      	popcc	{r4, pc}
    76da:	f240 1187 	movw	r1, #391	; 0x187
    76de:	2029      	movs	r0, #41	; 0x29
    76e0:	f7fd faa6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76e4:	20001916 	.word	0x20001916

000076e8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    76e8:	b510      	push	{r4, lr}
    76ea:	2820      	cmp	r0, #32
    76ec:	bf3e      	ittt	cc
    76ee:	4a04      	ldrcc	r2, [pc, #16]	; (7700 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    76f0:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    76f4:	bd10      	popcc	{r4, pc}
    76f6:	f240 118d 	movw	r1, #397	; 0x18d
    76fa:	2029      	movs	r0, #41	; 0x29
    76fc:	f7fd fa98 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7700:	20001916 	.word	0x20001916

00007704 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    7704:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7708:	4604      	mov	r4, r0
    770a:	4690      	mov	r8, r2
    770c:	468a      	mov	sl, r1
    770e:	f04f 0901 	mov.w	r9, #1
    7712:	4608      	mov	r0, r1
    7714:	f00a f93f 	bl	11996 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    7718:	4605      	mov	r5, r0
    771a:	4650      	mov	r0, sl
    771c:	f00a f947 	bl	119ae <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    7720:	4607      	mov	r7, r0
    7722:	f010 0f01 	tst.w	r0, #1
    7726:	bf18      	it	ne
    7728:	2601      	movne	r6, #1
    772a:	d02b      	beq.n	7784 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
    772c:	f015 0f01 	tst.w	r5, #1
    7730:	bf18      	it	ne
    7732:	f04f 0b01 	movne.w	fp, #1
    7736:	d030      	beq.n	779a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
    7738:	ea56 000b 	orrs.w	r0, r6, fp
    773c:	bf08      	it	eq
    773e:	f04f 0900 	moveq.w	r9, #0
    7742:	f006 fcc3 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    7746:	4238      	tst	r0, r7
    7748:	bf08      	it	eq
    774a:	2600      	moveq	r6, #0
    774c:	f006 fcbe 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    7750:	4228      	tst	r0, r5
    7752:	bf08      	it	eq
    7754:	f04f 0b00 	moveq.w	fp, #0
    7758:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    775c:	42b0      	cmp	r0, r6
    775e:	bf0c      	ite	eq
    7760:	2000      	moveq	r0, #0
    7762:	4630      	movne	r0, r6
    7764:	f888 0000 	strb.w	r0, [r8]
    7768:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    776c:	4559      	cmp	r1, fp
    776e:	bf08      	it	eq
    7770:	f04f 0b00 	moveq.w	fp, #0
    7774:	f888 b001 	strb.w	fp, [r8, #1]
    7778:	2800      	cmp	r0, #0
    777a:	bf08      	it	eq
    777c:	f1bb 0f00 	cmpeq.w	fp, #0
    7780:	d128      	bne.n	77d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    7782:	e018      	b.n	77b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
    7784:	f010 0f02 	tst.w	r0, #2
    7788:	bf18      	it	ne
    778a:	2602      	movne	r6, #2
    778c:	d1ce      	bne.n	772c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    778e:	f017 0f04 	tst.w	r7, #4
    7792:	bf14      	ite	ne
    7794:	2608      	movne	r6, #8
    7796:	2600      	moveq	r6, #0
    7798:	e7c8      	b.n	772c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    779a:	f015 0f02 	tst.w	r5, #2
    779e:	bf18      	it	ne
    77a0:	f04f 0b02 	movne.w	fp, #2
    77a4:	d1c8      	bne.n	7738 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    77a6:	f015 0f04 	tst.w	r5, #4
    77aa:	bf14      	ite	ne
    77ac:	f04f 0b08 	movne.w	fp, #8
    77b0:	f04f 0b00 	moveq.w	fp, #0
    77b4:	e7c0      	b.n	7738 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    77b6:	4650      	mov	r0, sl
    77b8:	f00a f8f7 	bl	119aa <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    77bc:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    77c0:	1a40      	subs	r0, r0, r1
    77c2:	b200      	sxth	r0, r0
    77c4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    77c8:	4288      	cmp	r0, r1
    77ca:	dc01      	bgt.n	77d0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
    77cc:	2800      	cmp	r0, #0
    77ce:	dc01      	bgt.n	77d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    77d0:	f04f 0900 	mov.w	r9, #0
    77d4:	b116      	cbz	r6, 77dc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
    77d6:	2e08      	cmp	r6, #8
    77d8:	d010      	beq.n	77fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    77da:	e01f      	b.n	781c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    77dc:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    77e0:	2801      	cmp	r0, #1
    77e2:	bf18      	it	ne
    77e4:	2802      	cmpne	r0, #2
    77e6:	d019      	beq.n	781c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    77e8:	2804      	cmp	r0, #4
    77ea:	bf18      	it	ne
    77ec:	2808      	cmpne	r0, #8
    77ee:	d005      	beq.n	77fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    77f0:	f240 218f 	movw	r1, #655	; 0x28f
    77f4:	f04f 0006 	mov.w	r0, #6
    77f8:	f7fd fa1a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77fc:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7800:	2801      	cmp	r0, #1
    7802:	d10b      	bne.n	781c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    7804:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7808:	2801      	cmp	r0, #1
    780a:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    780e:	d008      	beq.n	7822 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
    7810:	2808      	cmp	r0, #8
    7812:	d003      	beq.n	781c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    7814:	f05f 0008 	movs.w	r0, #8
    7818:	f888 0000 	strb.w	r0, [r8]
    781c:	4648      	mov	r0, r9
    781e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7822:	2804      	cmp	r0, #4
    7824:	bf18      	it	ne
    7826:	2004      	movne	r0, #4
    7828:	d1f6      	bne.n	7818 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
    782a:	e7f3      	b.n	7814 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

0000782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    782c:	b430      	push	{r4, r5}
    782e:	2200      	movs	r2, #0
    7830:	f1a1 0c01 	sub.w	ip, r1, #1
    7834:	f1bc 0f00 	cmp.w	ip, #0
    7838:	dd12      	ble.n	7860 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    783a:	1e43      	subs	r3, r0, #1
    783c:	f011 0f01 	tst.w	r1, #1
    7840:	bf08      	it	eq
    7842:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    7846:	785c      	ldrb	r4, [r3, #1]
    7848:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    784c:	d008      	beq.n	7860 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    784e:	bf00      	nop
    7850:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    7854:	4322      	orrs	r2, r4
    7856:	785c      	ldrb	r4, [r3, #1]
    7858:	432a      	orrs	r2, r5
    785a:	f1bc 0c01 	subs.w	ip, ip, #1
    785e:	d1f7      	bne.n	7850 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    7860:	1e49      	subs	r1, r1, #1
    7862:	bf5c      	itt	pl
    7864:	5c40      	ldrbpl	r0, [r0, r1]
    7866:	4302      	orrpl	r2, r0
    7868:	2a00      	cmp	r2, #0
    786a:	bf0c      	ite	eq
    786c:	2001      	moveq	r0, #1
    786e:	2000      	movne	r0, #0
    7870:	bc30      	pop	{r4, r5}
    7872:	4770      	bx	lr
    7874:	b410      	push	{r4}
    7876:	f04f 0c00 	mov.w	ip, #0
    787a:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    787e:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    7882:	4c16      	ldr	r4, [pc, #88]	; (78dc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    7884:	fb0c fc01 	mul.w	ip, ip, r1
    7888:	fbbc fcf2 	udiv	ip, ip, r2
    788c:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    7890:	f242 7c10 	movw	ip, #10000	; 0x2710
    7894:	fb03 f30c 	mul.w	r3, r3, ip
    7898:	fbb3 f3f2 	udiv	r3, r3, r2
    789c:	1c5b      	adds	r3, r3, #1
    789e:	b29b      	uxth	r3, r3
    78a0:	fb03 fc02 	mul.w	ip, r3, r2
    78a4:	8603      	strh	r3, [r0, #48]	; 0x30
    78a6:	45a4      	cmp	ip, r4
    78a8:	bf84      	itt	hi
    78aa:	1e5b      	subhi	r3, r3, #1
    78ac:	8603      	strhhi	r3, [r0, #48]	; 0x30
    78ae:	4b0c      	ldr	r3, [pc, #48]	; (78e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    78b0:	f240 2c71 	movw	ip, #625	; 0x271
    78b4:	fbb3 f3f2 	udiv	r3, r3, r2
    78b8:	1c5b      	adds	r3, r3, #1
    78ba:	86c3      	strh	r3, [r0, #54]	; 0x36
    78bc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    78be:	fb03 f30c 	mul.w	r3, r3, ip
    78c2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    78c6:	1e5b      	subs	r3, r3, #1
    78c8:	fbb3 f3f2 	udiv	r3, r3, r2
    78cc:	6243      	str	r3, [r0, #36]	; 0x24
    78ce:	6a03      	ldr	r3, [r0, #32]
    78d0:	4359      	muls	r1, r3
    78d2:	fbb1 f1f2 	udiv	r1, r1, r2
    78d6:	6201      	str	r1, [r0, #32]
    78d8:	bc10      	pop	{r4}
    78da:	4770      	bx	lr
    78dc:	01e84800 	.word	0x01e84800
    78e0:	02625a00 	.word	0x02625a00
    78e4:	78c3      	ldrb	r3, [r0, #3]
    78e6:	4602      	mov	r2, r0
    78e8:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    78ec:	bf08      	it	eq
    78ee:	4770      	bxeq	lr
    78f0:	2005      	movs	r0, #5
    78f2:	7912      	ldrb	r2, [r2, #4]
    78f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    78f8:	f012 0f01 	tst.w	r2, #1
    78fc:	d037      	beq.n	796e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    78fe:	2900      	cmp	r1, #0
    7900:	bf14      	ite	ne
    7902:	200b      	movne	r0, #11
    7904:	4770      	bxeq	lr
    7906:	bf00      	nop
    7908:	f012 0f02 	tst.w	r2, #2
    790c:	d032      	beq.n	7974 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    790e:	2901      	cmp	r1, #1
    7910:	bf14      	ite	ne
    7912:	1d80      	addne	r0, r0, #6
    7914:	4770      	bxeq	lr
    7916:	bf00      	nop
    7918:	f012 0f04 	tst.w	r2, #4
    791c:	d02d      	beq.n	797a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    791e:	2902      	cmp	r1, #2
    7920:	bf14      	ite	ne
    7922:	1c40      	addne	r0, r0, #1
    7924:	4770      	bxeq	lr
    7926:	bf00      	nop
    7928:	f012 0f08 	tst.w	r2, #8
    792c:	d028      	beq.n	7980 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    792e:	2903      	cmp	r1, #3
    7930:	bf14      	ite	ne
    7932:	1c80      	addne	r0, r0, #2
    7934:	4770      	bxeq	lr
    7936:	bf00      	nop
    7938:	f012 0f10 	tst.w	r2, #16
    793c:	d023      	beq.n	7986 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    793e:	2904      	cmp	r1, #4
    7940:	bf14      	ite	ne
    7942:	1cc0      	addne	r0, r0, #3
    7944:	4770      	bxeq	lr
    7946:	bf00      	nop
    7948:	f012 0f20 	tst.w	r2, #32
    794c:	d01e      	beq.n	798c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    794e:	2905      	cmp	r1, #5
    7950:	bf1a      	itte	ne
    7952:	3012      	addne	r0, #18
    7954:	b2c0      	uxtbne	r0, r0
    7956:	4770      	bxeq	lr
    7958:	f012 0f40 	tst.w	r2, #64	; 0x40
    795c:	d019      	beq.n	7992 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    795e:	2906      	cmp	r1, #6
    7960:	bf1a      	itte	ne
    7962:	1c40      	addne	r0, r0, #1
    7964:	b2c0      	uxtbne	r0, r0
    7966:	4770      	bxeq	lr
    7968:	2907      	cmp	r1, #7
    796a:	d118      	bne.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    796c:	e014      	b.n	7998 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    796e:	2900      	cmp	r1, #0
    7970:	d1ca      	bne.n	7908 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    7972:	e014      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    7974:	2901      	cmp	r1, #1
    7976:	d1cf      	bne.n	7918 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    7978:	e011      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    797a:	2902      	cmp	r1, #2
    797c:	d1d4      	bne.n	7928 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    797e:	e00e      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    7980:	2903      	cmp	r1, #3
    7982:	d1d9      	bne.n	7938 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    7984:	e00b      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    7986:	2904      	cmp	r1, #4
    7988:	d1de      	bne.n	7948 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    798a:	e008      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    798c:	2905      	cmp	r1, #5
    798e:	d1e3      	bne.n	7958 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    7990:	e005      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    7992:	2906      	cmp	r1, #6
    7994:	d1e8      	bne.n	7968 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    7996:	e002      	b.n	799e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    7998:	4283      	cmp	r3, r0
    799a:	bf88      	it	hi
    799c:	4770      	bxhi	lr
    799e:	2000      	movs	r0, #0
    79a0:	4770      	bx	lr
	...

000079a4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    79a4:	7841      	ldrb	r1, [r0, #1]
    79a6:	b141      	cbz	r1, 79ba <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    79a8:	78c0      	ldrb	r0, [r0, #3]
    79aa:	2819      	cmp	r0, #25
    79ac:	d203      	bcs.n	79b6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    79ae:	4a04      	ldr	r2, [pc, #16]	; (79c0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    79b0:	5c10      	ldrb	r0, [r2, r0]
    79b2:	4288      	cmp	r0, r1
    79b4:	d101      	bne.n	79ba <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    79b6:	2001      	movs	r0, #1
    79b8:	4770      	bx	lr
    79ba:	2000      	movs	r0, #0
    79bc:	4770      	bx	lr
    79be:	0000      	.short	0x0000
    79c0:	000137c0 	.word	0x000137c0

000079c4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    79c4:	a20c      	add	r2, pc, #48	; (adr r2, 79f8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    79c6:	b082      	sub	sp, #8
    79c8:	e9d2 1200 	ldrd	r1, r2, [r2]
    79cc:	e9cd 1200 	strd	r1, r2, [sp]
    79d0:	7901      	ldrb	r1, [r0, #4]
    79d2:	7940      	ldrb	r0, [r0, #5]
    79d4:	f001 0207 	and.w	r2, r1, #7
    79d8:	4669      	mov	r1, sp
    79da:	f81d 2002 	ldrb.w	r2, [sp, r2]
    79de:	2a01      	cmp	r2, #1
    79e0:	d807      	bhi.n	79f2 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    79e2:	f000 0007 	and.w	r0, r0, #7
    79e6:	5c08      	ldrb	r0, [r1, r0]
    79e8:	2801      	cmp	r0, #1
    79ea:	bf9e      	ittt	ls
    79ec:	2001      	movls	r0, #1
    79ee:	b002      	addls	sp, #8
    79f0:	4770      	bxls	lr
    79f2:	2000      	movs	r0, #0
    79f4:	b002      	add	sp, #8
    79f6:	4770      	bx	lr
    79f8:	02010100 	.word	0x02010100
    79fc:	03020201 	.word	0x03020201

00007a00 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    7a00:	b510      	push	{r4, lr}
    7a02:	2201      	movs	r2, #1
    7a04:	70c1      	strb	r1, [r0, #3]
    7a06:	2919      	cmp	r1, #25
    7a08:	bf3c      	itt	cc
    7a0a:	4a06      	ldrcc	r2, [pc, #24]	; (7a24 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    7a0c:	5c52      	ldrbcc	r2, [r2, r1]
    7a0e:	d306      	bcc.n	7a1e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7a10:	29ff      	cmp	r1, #255	; 0xff
    7a12:	d004      	beq.n	7a1e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7a14:	f240 31b3 	movw	r1, #947	; 0x3b3
    7a18:	202a      	movs	r0, #42	; 0x2a
    7a1a:	f7fd f909 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a1e:	7042      	strb	r2, [r0, #1]
    7a20:	bd10      	pop	{r4, pc}
    7a22:	0000      	.short	0x0000
    7a24:	000137c0 	.word	0x000137c0

00007a28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    7a28:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a2c:	b084      	sub	sp, #16
    7a2e:	9804      	ldr	r0, [sp, #16]
    7a30:	b160      	cbz	r0, 7a4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    7a32:	f8df 8124 	ldr.w	r8, [pc, #292]	; 7b58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    7a36:	2102      	movs	r1, #2
    7a38:	f508 7014 	add.w	r0, r8, #592	; 0x250
    7a3c:	f00a f920 	bl	11c80 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7a40:	b148      	cbz	r0, 7a56 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    7a42:	f44f 7164 	mov.w	r1, #912	; 0x390
    7a46:	202b      	movs	r0, #43	; 0x2b
    7a48:	f7fd f8f2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a4c:	f240 318f 	movw	r1, #911	; 0x38f
    7a50:	202b      	movs	r0, #43	; 0x2b
    7a52:	f7fd f8ed 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a56:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    7a5a:	9000      	str	r0, [sp, #0]
    7a5c:	2000      	movs	r0, #0
    7a5e:	f7fd faf7 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7a62:	4604      	mov	r4, r0
    7a64:	2001      	movs	r0, #1
    7a66:	f7fd faf3 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7a6a:	4420      	add	r0, r4
    7a6c:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    7a70:	f10b 0001 	add.w	r0, fp, #1
    7a74:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    7a78:	f04f 0900 	mov.w	r9, #0
    7a7c:	4837      	ldr	r0, [pc, #220]	; (7b5c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    7a7e:	6801      	ldr	r1, [r0, #0]
    7a80:	b119      	cbz	r1, 7a8a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    7a82:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    7a86:	4550      	cmp	r0, sl
    7a88:	d006      	beq.n	7a98 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    7a8a:	4835      	ldr	r0, [pc, #212]	; (7b60 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    7a8c:	6801      	ldr	r1, [r0, #0]
    7a8e:	b131      	cbz	r1, 7a9e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    7a90:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    7a94:	4558      	cmp	r0, fp
    7a96:	d102      	bne.n	7a9e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    7a98:	9804      	ldr	r0, [sp, #16]
    7a9a:	4788      	blx	r1
    7a9c:	e006      	b.n	7aac <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    7a9e:	4831      	ldr	r0, [pc, #196]	; (7b64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    7aa0:	6802      	ldr	r2, [r0, #0]
    7aa2:	b12a      	cbz	r2, 7ab0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    7aa4:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    7aa8:	9904      	ldr	r1, [sp, #16]
    7aaa:	4790      	blx	r2
    7aac:	2800      	cmp	r0, #0
    7aae:	d13b      	bne.n	7b28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    7ab0:	f508 7414 	add.w	r4, r8, #592	; 0x250
    7ab4:	2502      	movs	r5, #2
    7ab6:	2000      	movs	r0, #0
    7ab8:	f7fd faca 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7abc:	4606      	mov	r6, r0
    7abe:	2001      	movs	r0, #1
    7ac0:	f7fd fac6 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7ac4:	4430      	add	r0, r6
    7ac6:	b2c7      	uxtb	r7, r0
    7ac8:	2600      	movs	r6, #0
    7aca:	f117 0f02 	cmn.w	r7, #2
    7ace:	bf18      	it	ne
    7ad0:	443d      	addne	r5, r7
    7ad2:	d014      	beq.n	7afe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    7ad4:	8820      	ldrh	r0, [r4, #0]
    7ad6:	1c40      	adds	r0, r0, #1
    7ad8:	b280      	uxth	r0, r0
    7ada:	8020      	strh	r0, [r4, #0]
    7adc:	42a8      	cmp	r0, r5
    7ade:	bf28      	it	cs
    7ae0:	f8a4 9000 	strhcs.w	r9, [r4]
    7ae4:	8820      	ldrh	r0, [r4, #0]
    7ae6:	42b8      	cmp	r0, r7
    7ae8:	d301      	bcc.n	7aee <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    7aea:	42a8      	cmp	r0, r5
    7aec:	d30b      	bcc.n	7b06 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    7aee:	a902      	add	r1, sp, #8
    7af0:	f009 fc72 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7af4:	b138      	cbz	r0, 7b06 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    7af6:	1c70      	adds	r0, r6, #1
    7af8:	b2c6      	uxtb	r6, r0
    7afa:	42b5      	cmp	r5, r6
    7afc:	d8ea      	bhi.n	7ad4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    7afe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7b02:	8020      	strh	r0, [r4, #0]
    7b04:	e004      	b.n	7b10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    7b06:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    7b0a:	9800      	ldr	r0, [sp, #0]
    7b0c:	4281      	cmp	r1, r0
    7b0e:	d1b5      	bne.n	7a7c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    7b10:	4815      	ldr	r0, [pc, #84]	; (7b68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    7b12:	6801      	ldr	r1, [r0, #0]
    7b14:	b111      	cbz	r1, 7b1c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    7b16:	9804      	ldr	r0, [sp, #16]
    7b18:	4788      	blx	r1
    7b1a:	b928      	cbnz	r0, 7b28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    7b1c:	4813      	ldr	r0, [pc, #76]	; (7b6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    7b1e:	6801      	ldr	r1, [r0, #0]
    7b20:	b131      	cbz	r1, 7b30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    7b22:	9804      	ldr	r0, [sp, #16]
    7b24:	4788      	blx	r1
    7b26:	b118      	cbz	r0, 7b30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    7b28:	b005      	add	sp, #20
    7b2a:	2001      	movs	r0, #1
    7b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b30:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    7b34:	2800      	cmp	r0, #0
    7b36:	bf04      	itt	eq
    7b38:	b005      	addeq	sp, #20
    7b3a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b3e:	9804      	ldr	r0, [sp, #16]
    7b40:	2121      	movs	r1, #33	; 0x21
    7b42:	f880 9001 	strb.w	r9, [r0, #1]
    7b46:	9804      	ldr	r0, [sp, #16]
    7b48:	7001      	strb	r1, [r0, #0]
    7b4a:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    7b4e:	b005      	add	sp, #20
    7b50:	2001      	movs	r0, #1
    7b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b56:	0000      	.short	0x0000
    7b58:	200011dc 	.word	0x200011dc
    7b5c:	20000358 	.word	0x20000358
    7b60:	20000368 	.word	0x20000368
    7b64:	20000360 	.word	0x20000360
    7b68:	20000370 	.word	0x20000370
    7b6c:	2000035c 	.word	0x2000035c

00007b70 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    7b70:	b510      	push	{r4, lr}
    7b72:	4604      	mov	r4, r0
    7b74:	4815      	ldr	r0, [pc, #84]	; (7bcc <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    7b76:	6801      	ldr	r1, [r0, #0]
    7b78:	b329      	cbz	r1, 7bc6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    7b7a:	4620      	mov	r0, r4
    7b7c:	4788      	blx	r1
    7b7e:	b310      	cbz	r0, 7bc6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    7b80:	7820      	ldrb	r0, [r4, #0]
    7b82:	2814      	cmp	r0, #20
    7b84:	d002      	beq.n	7b8c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    7b86:	2817      	cmp	r0, #23
    7b88:	d003      	beq.n	7b92 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    7b8a:	e01a      	b.n	7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7b8c:	7920      	ldrb	r0, [r4, #4]
    7b8e:	b928      	cbnz	r0, 7b9c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    7b90:	e017      	b.n	7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7b92:	7920      	ldrb	r0, [r4, #4]
    7b94:	b1a8      	cbz	r0, 7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7b96:	f000 fec9 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7b9a:	b990      	cbnz	r0, 7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7b9c:	88e4      	ldrh	r4, [r4, #6]
    7b9e:	2101      	movs	r1, #1
    7ba0:	4620      	mov	r0, r4
    7ba2:	f009 fb0d 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ba6:	b160      	cbz	r0, 7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7ba8:	8800      	ldrh	r0, [r0, #0]
    7baa:	f7fd ff21 	bl	59f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7bae:	2101      	movs	r1, #1
    7bb0:	4620      	mov	r0, r4
    7bb2:	f7fd fac5 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7bb6:	b120      	cbz	r0, 7bc2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    7bb8:	f240 1115 	movw	r1, #277	; 0x115
    7bbc:	202b      	movs	r0, #43	; 0x2b
    7bbe:	f7fd f837 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc2:	2001      	movs	r0, #1
    7bc4:	bd10      	pop	{r4, pc}
    7bc6:	2000      	movs	r0, #0
    7bc8:	bd10      	pop	{r4, pc}
    7bca:	0000      	.short	0x0000
    7bcc:	20000354 	.word	0x20000354

00007bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    7bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bd4:	b083      	sub	sp, #12
    7bd6:	460d      	mov	r5, r1
    7bd8:	4606      	mov	r6, r0
    7bda:	4669      	mov	r1, sp
    7bdc:	f009 fbfc 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7be0:	2800      	cmp	r0, #0
    7be2:	d17d      	bne.n	7ce0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    7be4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 7d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x188>
    7be8:	f8df a170 	ldr.w	sl, [pc, #368]	; 7d5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18c>
    7bec:	f05f 0700 	movs.w	r7, #0
    7bf0:	f89d 0000 	ldrb.w	r0, [sp]
    7bf4:	b180      	cbz	r0, 7c18 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    7bf6:	f000 fbc9 	bl	838c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    7bfa:	42b0      	cmp	r0, r6
    7bfc:	d070      	beq.n	7ce0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    7bfe:	f8da 2000 	ldr.w	r2, [sl]
    7c02:	b31a      	cbz	r2, 7c4c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    7c04:	4629      	mov	r1, r5
    7c06:	4630      	mov	r0, r6
    7c08:	4790      	blx	r2
    7c0a:	b1f8      	cbz	r0, 7c4c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    7c0c:	4628      	mov	r0, r5
    7c0e:	f000 f9dd 	bl	7fcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    7c12:	2800      	cmp	r0, #0
    7c14:	d1ec      	bne.n	7bf0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    7c16:	e092      	b.n	7d3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    7c18:	f005 f98e 	bl	cf38 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    7c1c:	42b0      	cmp	r0, r6
    7c1e:	d05f      	beq.n	7ce0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    7c20:	f8d9 2000 	ldr.w	r2, [r9]
    7c24:	b14a      	cbz	r2, 7c3a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    7c26:	4629      	mov	r1, r5
    7c28:	4630      	mov	r0, r6
    7c2a:	4790      	blx	r2
    7c2c:	b128      	cbz	r0, 7c3a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    7c2e:	4628      	mov	r0, r5
    7c30:	f000 f9cc 	bl	7fcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    7c34:	2800      	cmp	r0, #0
    7c36:	d1db      	bne.n	7bf0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    7c38:	e081      	b.n	7d3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    7c3a:	9801      	ldr	r0, [sp, #4]
    7c3c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    7c40:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    7c44:	b968      	cbnz	r0, 7c62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    7c46:	7f20      	ldrb	r0, [r4, #28]
    7c48:	b940      	cbnz	r0, 7c5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    7c4a:	e00a      	b.n	7c62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    7c4c:	9801      	ldr	r0, [sp, #4]
    7c4e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    7c52:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    7c56:	b920      	cbnz	r0, 7c62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    7c58:	7f20      	ldrb	r0, [r4, #28]
    7c5a:	b110      	cbz	r0, 7c62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    7c5c:	f04f 0b01 	mov.w	fp, #1
    7c60:	e001      	b.n	7c66 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    7c62:	f04f 0b00 	mov.w	fp, #0
    7c66:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    7c6a:	2800      	cmp	r0, #0
    7c6c:	bf1c      	itt	ne
    7c6e:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    7c72:	f010 0f02 	tstne.w	r0, #2
    7c76:	d017      	beq.n	7ca8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    7c78:	706f      	strb	r7, [r5, #1]
    7c7a:	f04f 0001 	mov.w	r0, #1
    7c7e:	7028      	strb	r0, [r5, #0]
    7c80:	712f      	strb	r7, [r5, #4]
    7c82:	f8a5 6005 	strh.w	r6, [r5, #5]
    7c86:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    7c8a:	71e8      	strb	r0, [r5, #7]
    7c8c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    7c90:	8128      	strh	r0, [r5, #8]
    7c92:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    7c96:	8168      	strh	r0, [r5, #10]
    7c98:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    7c9c:	4628      	mov	r0, r5
    7c9e:	f000 f995 	bl	7fcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    7ca2:	2800      	cmp	r0, #0
    7ca4:	d1a4      	bne.n	7bf0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    7ca6:	e04a      	b.n	7d3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    7ca8:	4630      	mov	r0, r6
    7caa:	f7fd fbeb 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7cae:	ea5f 0800 	movs.w	r8, r0
    7cb2:	d01b      	beq.n	7cec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    7cb4:	f009 f81d 	bl	10cf2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    7cb8:	b1e8      	cbz	r0, 7cf6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    7cba:	706f      	strb	r7, [r5, #1]
    7cbc:	210f      	movs	r1, #15
    7cbe:	7029      	strb	r1, [r5, #0]
    7cc0:	80ee      	strh	r6, [r5, #6]
    7cc2:	8128      	strh	r0, [r5, #8]
    7cc4:	2101      	movs	r1, #1
    7cc6:	1e40      	subs	r0, r0, #1
    7cc8:	7129      	strb	r1, [r5, #4]
    7cca:	b284      	uxth	r4, r0
    7ccc:	2200      	movs	r2, #0
    7cce:	4611      	mov	r1, r2
    7cd0:	4640      	mov	r0, r8
    7cd2:	f009 f97c 	bl	10fce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7cd6:	1e61      	subs	r1, r4, #1
    7cd8:	b28c      	uxth	r4, r1
    7cda:	d2f7      	bcs.n	7ccc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    7cdc:	4628      	mov	r0, r5
    7cde:	e000      	b.n	7ce2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    7ce0:	e036      	b.n	7d50 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    7ce2:	f000 f973 	bl	7fcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    7ce6:	2800      	cmp	r0, #0
    7ce8:	d182      	bne.n	7bf0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    7cea:	e028      	b.n	7d3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    7cec:	f240 2117 	movw	r1, #535	; 0x217
    7cf0:	202b      	movs	r0, #43	; 0x2b
    7cf2:	f7fc ff9d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cf6:	4630      	mov	r0, r6
    7cf8:	f7fd fbae 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7cfc:	b318      	cbz	r0, 7d46 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x176>
    7cfe:	f1bb 0f00 	cmp.w	fp, #0
    7d02:	d025      	beq.n	7d50 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    7d04:	f008 fed7 	bl	10ab6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7d08:	b310      	cbz	r0, 7d50 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    7d0a:	4630      	mov	r0, r6
    7d0c:	f7fd fe70 	bl	59f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7d10:	2100      	movs	r1, #0
    7d12:	4630      	mov	r0, r6
    7d14:	f7fd fa14 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7d18:	2101      	movs	r1, #1
    7d1a:	4630      	mov	r0, r6
    7d1c:	f7fd fa10 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7d20:	706f      	strb	r7, [r5, #1]
    7d22:	200c      	movs	r0, #12
    7d24:	7028      	strb	r0, [r5, #0]
    7d26:	712f      	strb	r7, [r5, #4]
    7d28:	f8a5 6005 	strh.w	r6, [r5, #5]
    7d2c:	7f60      	ldrb	r0, [r4, #29]
    7d2e:	71e8      	strb	r0, [r5, #7]
    7d30:	7727      	strb	r7, [r4, #28]
    7d32:	4628      	mov	r0, r5
    7d34:	f000 f94a 	bl	7fcc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    7d38:	2800      	cmp	r0, #0
    7d3a:	f47f af59 	bne.w	7bf0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    7d3e:	b003      	add	sp, #12
    7d40:	2001      	movs	r0, #1
    7d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d46:	f240 2135 	movw	r1, #565	; 0x235
    7d4a:	202b      	movs	r0, #43	; 0x2b
    7d4c:	f7fc ff70 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d50:	b003      	add	sp, #12
    7d52:	2000      	movs	r0, #0
    7d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d58:	20000364 	.word	0x20000364
    7d5c:	2000036c 	.word	0x2000036c

00007d60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d64:	f8df 815c 	ldr.w	r8, [pc, #348]	; 7ec4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    7d68:	4681      	mov	r9, r0
    7d6a:	b085      	sub	sp, #20
    7d6c:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    7d70:	468a      	mov	sl, r1
    7d72:	b130      	cbz	r0, 7d82 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7d74:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    7d78:	2800      	cmp	r0, #0
    7d7a:	bf04      	itt	eq
    7d7c:	b005      	addeq	sp, #20
    7d7e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d82:	2100      	movs	r1, #0
    7d84:	f208 204e 	addw	r0, r8, #590	; 0x24e
    7d88:	f009 ff7a 	bl	11c80 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7d8c:	2800      	cmp	r0, #0
    7d8e:	d17a      	bne.n	7e86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    7d90:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    7d94:	f04f 0b00 	mov.w	fp, #0
    7d98:	f8cd 0000 	str.w	r0, [sp]
    7d9c:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    7da0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    7da4:	39ff      	subs	r1, #255	; 0xff
    7da6:	d057      	beq.n	7e58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    7da8:	f8a9 0000 	strh.w	r0, [r9]
    7dac:	f889 b005 	strb.w	fp, [r9, #5]
    7db0:	f7fd fb52 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7db4:	4605      	mov	r5, r0
    7db6:	f008 ffca 	bl	10d4e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    7dba:	0004      	movs	r4, r0
    7dbc:	d04c      	beq.n	7e58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    7dbe:	4601      	mov	r1, r0
    7dc0:	aa01      	add	r2, sp, #4
    7dc2:	4628      	mov	r0, r5
    7dc4:	f008 ffe8 	bl	10d98 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    7dc8:	f8a9 0002 	strh.w	r0, [r9, #2]
    7dcc:	b128      	cbz	r0, 7dda <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    7dce:	28fb      	cmp	r0, #251	; 0xfb
    7dd0:	d907      	bls.n	7de2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    7dd2:	21c1      	movs	r1, #193	; 0xc1
    7dd4:	202b      	movs	r0, #43	; 0x2b
    7dd6:	f7fc ff2b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dda:	21c0      	movs	r1, #192	; 0xc0
    7ddc:	202b      	movs	r0, #43	; 0x2b
    7dde:	f7fc ff27 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de2:	9801      	ldr	r0, [sp, #4]
    7de4:	f009 fdd3 	bl	1198e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    7de8:	2101      	movs	r1, #1
    7dea:	2801      	cmp	r0, #1
    7dec:	bf08      	it	eq
    7dee:	f889 1004 	strbeq.w	r1, [r9, #4]
    7df2:	d008      	beq.n	7e06 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    7df4:	2802      	cmp	r0, #2
    7df6:	bf08      	it	eq
    7df8:	f889 0004 	strbeq.w	r0, [r9, #4]
    7dfc:	d003      	beq.n	7e06 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    7dfe:	21d0      	movs	r1, #208	; 0xd0
    7e00:	202b      	movs	r0, #43	; 0x2b
    7e02:	f7fc ff15 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e06:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    7e0a:	2003      	movs	r0, #3
    7e0c:	9000      	str	r0, [sp, #0]
    7e0e:	4652      	mov	r2, sl
    7e10:	4621      	mov	r1, r4
    7e12:	4628      	mov	r0, r5
    7e14:	f008 fde5 	bl	109e2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    7e18:	4628      	mov	r0, r5
    7e1a:	f8c9 a008 	str.w	sl, [r9, #8]
    7e1e:	f008 ff12 	bl	10c46 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    7e22:	b188      	cbz	r0, 7e48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    7e24:	2200      	movs	r2, #0
    7e26:	4611      	mov	r1, r2
    7e28:	4628      	mov	r0, r5
    7e2a:	f009 f8d0 	bl	10fce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7e2e:	b178      	cbz	r0, 7e50 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    7e30:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    7e34:	b120      	cbz	r0, 7e40 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    7e36:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    7e3a:	1e40      	subs	r0, r0, #1
    7e3c:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    7e40:	b005      	add	sp, #20
    7e42:	2001      	movs	r0, #1
    7e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e48:	21e0      	movs	r1, #224	; 0xe0
    7e4a:	202b      	movs	r0, #43	; 0x2b
    7e4c:	f7fc fef0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e50:	21e5      	movs	r1, #229	; 0xe5
    7e52:	202b      	movs	r0, #43	; 0x2b
    7e54:	f7fc feec 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e58:	2600      	movs	r6, #0
    7e5a:	f208 244e 	addw	r4, r8, #590	; 0x24e
    7e5e:	4630      	mov	r0, r6
    7e60:	f7fd f8f6 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7e64:	4605      	mov	r5, r0
    7e66:	2001      	movs	r0, #1
    7e68:	f7fd f8f2 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7e6c:	4428      	add	r0, r5
    7e6e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    7e72:	4637      	mov	r7, r6
    7e74:	bf18      	it	ne
    7e76:	442e      	addne	r6, r5
    7e78:	d016      	beq.n	7ea8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    7e7a:	8820      	ldrh	r0, [r4, #0]
    7e7c:	1c40      	adds	r0, r0, #1
    7e7e:	b280      	uxth	r0, r0
    7e80:	8020      	strh	r0, [r4, #0]
    7e82:	42b0      	cmp	r0, r6
    7e84:	e000      	b.n	7e88 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    7e86:	e019      	b.n	7ebc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    7e88:	bf28      	it	cs
    7e8a:	f8a4 b000 	strhcs.w	fp, [r4]
    7e8e:	8820      	ldrh	r0, [r4, #0]
    7e90:	42a8      	cmp	r0, r5
    7e92:	d301      	bcc.n	7e98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    7e94:	42b0      	cmp	r0, r6
    7e96:	d30b      	bcc.n	7eb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    7e98:	a902      	add	r1, sp, #8
    7e9a:	f009 fa9d 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7e9e:	b138      	cbz	r0, 7eb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    7ea0:	1c78      	adds	r0, r7, #1
    7ea2:	b2c7      	uxtb	r7, r0
    7ea4:	42be      	cmp	r6, r7
    7ea6:	d8e8      	bhi.n	7e7a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    7ea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7eac:	8020      	strh	r0, [r4, #0]
    7eae:	e005      	b.n	7ebc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    7eb0:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    7eb4:	9800      	ldr	r0, [sp, #0]
    7eb6:	4281      	cmp	r1, r0
    7eb8:	f47f af70 	bne.w	7d9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    7ebc:	b005      	add	sp, #20
    7ebe:	2000      	movs	r0, #0
    7ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec4:	200011dc 	.word	0x200011dc

00007ec8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    7ec8:	b510      	push	{r4, lr}
    7eca:	7901      	ldrb	r1, [r0, #4]
    7ecc:	b161      	cbz	r1, 7ee8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    7ece:	2901      	cmp	r1, #1
    7ed0:	bf1c      	itt	ne
    7ed2:	2000      	movne	r0, #0
    7ed4:	bd10      	popne	{r4, pc}
    7ed6:	8842      	ldrh	r2, [r0, #2]
    7ed8:	6883      	ldr	r3, [r0, #8]
    7eda:	8800      	ldrh	r0, [r0, #0]
    7edc:	f05f 0101 	movs.w	r1, #1
    7ee0:	f000 f80e 	bl	7f00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    7ee4:	b940      	cbnz	r0, 7ef8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    7ee6:	e004      	b.n	7ef2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    7ee8:	8842      	ldrh	r2, [r0, #2]
    7eea:	6883      	ldr	r3, [r0, #8]
    7eec:	8800      	ldrh	r0, [r0, #0]
    7eee:	2102      	movs	r1, #2
    7ef0:	e7f6      	b.n	7ee0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7ef2:	4902      	ldr	r1, [pc, #8]	; (7efc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    7ef4:	2001      	movs	r0, #1
    7ef6:	7008      	strb	r0, [r1, #0]
    7ef8:	2001      	movs	r0, #1
    7efa:	bd10      	pop	{r4, pc}
    7efc:	200011dc 	.word	0x200011dc
    7f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f04:	b084      	sub	sp, #16
    7f06:	4689      	mov	r9, r1
    7f08:	469a      	mov	sl, r3
    7f0a:	4615      	mov	r5, r2
    7f0c:	4606      	mov	r6, r0
    7f0e:	a902      	add	r1, sp, #8
    7f10:	f009 fa62 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7f14:	2800      	cmp	r0, #0
    7f16:	d14e      	bne.n	7fb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7f18:	9803      	ldr	r0, [sp, #12]
    7f1a:	2d00      	cmp	r5, #0
    7f1c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    7f20:	bf04      	itt	eq
    7f22:	2001      	moveq	r0, #1
    7f24:	74e0      	strbeq	r0, [r4, #19]
    7f26:	d046      	beq.n	7fb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7f28:	4630      	mov	r0, r6
    7f2a:	f7fd faab 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7f2e:	ea5f 0800 	movs.w	r8, r0
    7f32:	d00d      	beq.n	7f50 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    7f34:	4629      	mov	r1, r5
    7f36:	f008 ff3f 	bl	10db8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7f3a:	0007      	movs	r7, r0
    7f3c:	d004      	beq.n	7f48 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    7f3e:	4822      	ldr	r0, [pc, #136]	; (7fc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    7f40:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    7f44:	4285      	cmp	r5, r0
    7f46:	d907      	bls.n	7f58 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    7f48:	b004      	add	sp, #16
    7f4a:	2000      	movs	r0, #0
    7f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f50:	2181      	movs	r1, #129	; 0x81
    7f52:	202b      	movs	r0, #43	; 0x2b
    7f54:	f7fc fe6c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f58:	aa01      	add	r2, sp, #4
    7f5a:	4639      	mov	r1, r7
    7f5c:	4640      	mov	r0, r8
    7f5e:	f008 ff1b 	bl	10d98 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    7f62:	9801      	ldr	r0, [sp, #4]
    7f64:	2600      	movs	r6, #0
    7f66:	8006      	strh	r6, [r0, #0]
    7f68:	7086      	strb	r6, [r0, #2]
    7f6a:	7ce1      	ldrb	r1, [r4, #19]
    7f6c:	2900      	cmp	r1, #0
    7f6e:	bf18      	it	ne
    7f70:	f04f 0902 	movne.w	r9, #2
    7f74:	4649      	mov	r1, r9
    7f76:	f009 fd77 	bl	11a68 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7f7a:	2003      	movs	r0, #3
    7f7c:	9000      	str	r0, [sp, #0]
    7f7e:	462b      	mov	r3, r5
    7f80:	4652      	mov	r2, sl
    7f82:	4639      	mov	r1, r7
    7f84:	4640      	mov	r0, r8
    7f86:	f008 fd61 	bl	10a4c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    7f8a:	4629      	mov	r1, r5
    7f8c:	4640      	mov	r0, r8
    7f8e:	f008 fe83 	bl	10c98 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7f92:	b1a0      	cbz	r0, 7fbe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    7f94:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7f98:	b160      	cbz	r0, 7fb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7f9a:	9803      	ldr	r0, [sp, #12]
    7f9c:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    7fa0:	b128      	cbz	r0, 7fae <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    7fa2:	9803      	ldr	r0, [sp, #12]
    7fa4:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    7fa8:	9803      	ldr	r0, [sp, #12]
    7faa:	f00a fa31 	bl	12410 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    7fae:	9803      	ldr	r0, [sp, #12]
    7fb0:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    7fb4:	74e6      	strb	r6, [r4, #19]
    7fb6:	b004      	add	sp, #16
    7fb8:	2001      	movs	r0, #1
    7fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fbe:	2197      	movs	r1, #151	; 0x97
    7fc0:	202b      	movs	r0, #43	; 0x2b
    7fc2:	f7fc fe35 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc6:	0000      	.short	0x0000
    7fc8:	200011dc 	.word	0x200011dc
    7fcc:	b510      	push	{r4, lr}
    7fce:	4933      	ldr	r1, [pc, #204]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    7fd0:	b086      	sub	sp, #24
    7fd2:	f891 2256 	ldrb.w	r2, [r1, #598]	; 0x256
    7fd6:	7801      	ldrb	r1, [r0, #0]
    7fd8:	f012 0f01 	tst.w	r2, #1
    7fdc:	bf08      	it	eq
    7fde:	291d      	cmpeq	r1, #29
    7fe0:	d00a      	beq.n	7ff8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x130>
    7fe2:	291c      	cmp	r1, #28
    7fe4:	d029      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    7fe6:	2915      	cmp	r1, #21
    7fe8:	bf02      	ittt	eq
    7fea:	f012 0f04 	tsteq.w	r2, #4
    7fee:	7b80      	ldrbeq	r0, [r0, #14]
    7ff0:	f010 0f01 	tsteq.w	r0, #1
    7ff4:	d04e      	beq.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    7ff6:	e023      	b.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    7ff8:	8880      	ldrh	r0, [r0, #4]
    7ffa:	f8ad 0000 	strh.w	r0, [sp]
    7ffe:	a902      	add	r1, sp, #8
    8000:	f009 f9ea 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    8004:	b118      	cbz	r0, 800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    8006:	2151      	movs	r1, #81	; 0x51
    8008:	202b      	movs	r0, #43	; 0x2b
    800a:	f7fc fe11 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    800e:	9803      	ldr	r0, [sp, #12]
    8010:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    8014:	f88d 1002 	strb.w	r1, [sp, #2]
    8018:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    801c:	f88d 0003 	strb.w	r0, [sp, #3]
    8020:	2000      	movs	r0, #0
    8022:	f8ad 0004 	strh.w	r0, [sp, #4]
    8026:	2102      	movs	r1, #2
    8028:	4668      	mov	r0, sp
    802a:	f00a ff16 	bl	12e5a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    802e:	b388      	cbz	r0, 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    8030:	f240 112b 	movw	r1, #299	; 0x12b
    8034:	202b      	movs	r0, #43	; 0x2b
    8036:	f7fc fdfb 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    803a:	f012 0f02 	tst.w	r2, #2
    803e:	d003      	beq.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    8040:	b006      	add	sp, #24
    8042:	f04f 0000 	mov.w	r0, #0
    8046:	bd10      	pop	{r4, pc}
    8048:	8884      	ldrh	r4, [r0, #4]
    804a:	a903      	add	r1, sp, #12
    804c:	4620      	mov	r0, r4
    804e:	f00a fde7 	bl	12c20 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    8052:	b120      	cbz	r0, 805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    8054:	f44f 7199 	mov.w	r1, #306	; 0x132
    8058:	202b      	movs	r0, #43	; 0x2b
    805a:	f7fc fde9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    805e:	f8ad 4000 	strh.w	r4, [sp]
    8062:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    8066:	f8ad 0002 	strh.w	r0, [sp, #2]
    806a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    806e:	f8ad 0004 	strh.w	r0, [sp, #4]
    8072:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    8076:	f8ad 0006 	strh.w	r0, [sp, #6]
    807a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    807e:	f8ad 0008 	strh.w	r0, [sp, #8]
    8082:	4668      	mov	r0, sp
    8084:	f00a fe3d 	bl	12d02 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    8088:	b120      	cbz	r0, 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    808a:	f240 113b 	movw	r1, #315	; 0x13b
    808e:	202b      	movs	r0, #43	; 0x2b
    8090:	f7fc fdce 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8094:	b006      	add	sp, #24
    8096:	2001      	movs	r0, #1
    8098:	bd10      	pop	{r4, pc}
    809a:	0000      	.short	0x0000
    809c:	200011dc 	.word	0x200011dc

000080a0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    80a0:	b430      	push	{r4, r5}
    80a2:	f890 5066 	ldrb.w	r5, [r0, #102]	; 0x66
    80a6:	888c      	ldrh	r4, [r1, #4]
    80a8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    80ac:	f015 0f0c 	tst.w	r5, #12
    80b0:	d01b      	beq.n	80ea <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
    80b2:	bf00      	nop
    80b4:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
    80b8:	bf98      	it	ls
    80ba:	f44f 6429 	movls.w	r4, #2704	; 0xa90
    80be:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
    80c2:	f015 0f0c 	tst.w	r5, #12
    80c6:	d017      	beq.n	80f8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
    80c8:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
    80cc:	bf98      	it	ls
    80ce:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
    80d2:	884a      	ldrh	r2, [r1, #2]
    80d4:	88c9      	ldrh	r1, [r1, #6]
    80d6:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
    80da:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    80de:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    80e2:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
    80e6:	bc30      	pop	{r4, r5}
    80e8:	4770      	bx	lr
    80ea:	2b00      	cmp	r3, #0
    80ec:	bf1c      	itt	ne
    80ee:	7815      	ldrbne	r5, [r2, #0]
    80f0:	f015 0f0c 	tstne.w	r5, #12
    80f4:	d1de      	bne.n	80b4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
    80f6:	e7e2      	b.n	80be <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
    80f8:	2b00      	cmp	r3, #0
    80fa:	bf1c      	itt	ne
    80fc:	7852      	ldrbne	r2, [r2, #1]
    80fe:	f012 0f0c 	tstne.w	r2, #12
    8102:	d1e1      	bne.n	80c8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
    8104:	e7e5      	b.n	80d2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
    8106:	0000      	movs	r0, r0
    8108:	b430      	push	{r4, r5}
    810a:	6841      	ldr	r1, [r0, #4]
    810c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8110:	4291      	cmp	r1, r2
    8112:	bf34      	ite	cc
    8114:	f04f 0c4d 	movcc.w	ip, #77	; 0x4d
    8118:	f04f 0c96 	movcs.w	ip, #150	; 0x96
    811c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    8120:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    8124:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8126:	f012 0f0c 	tst.w	r2, #12
    812a:	f44f 7474 	mov.w	r4, #976	; 0x3d0
    812e:	bf1c      	itt	ne
    8130:	eb04 1383 	addne.w	r3, r4, r3, lsl #6
    8134:	b29b      	uxthne	r3, r3
    8136:	d006      	beq.n	8146 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xa6>
    8138:	f012 0f0c 	tst.w	r2, #12
    813c:	bf18      	it	ne
    813e:	f44f 6229 	movne.w	r2, #2704	; 0xa90
    8142:	d10f      	bne.n	8164 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xc4>
    8144:	e007      	b.n	8156 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xb6>
    8146:	2a02      	cmp	r2, #2
    8148:	bf07      	ittee	eq
    814a:	009b      	lsleq	r3, r3, #2
    814c:	333c      	addeq	r3, #60	; 0x3c
    814e:	00db      	lslne	r3, r3, #3
    8150:	3370      	addne	r3, #112	; 0x70
    8152:	b29b      	uxth	r3, r3
    8154:	e7f0      	b.n	8138 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x98>
    8156:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
    815a:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
    815e:	4295      	cmp	r5, r2
    8160:	bf38      	it	cc
    8162:	462a      	movcc	r2, r5
    8164:	429a      	cmp	r2, r3
    8166:	bf28      	it	cs
    8168:	461a      	movcs	r2, r3
    816a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    816c:	f011 0f0c 	tst.w	r1, #12
    8170:	bf1c      	itt	ne
    8172:	eb04 1383 	addne.w	r3, r4, r3, lsl #6
    8176:	b29b      	uxthne	r3, r3
    8178:	d007      	beq.n	818a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xea>
    817a:	bf00      	nop
    817c:	f011 0f0c 	tst.w	r1, #12
    8180:	bf18      	it	ne
    8182:	f44f 6129 	movne.w	r1, #2704	; 0xa90
    8186:	d10f      	bne.n	81a8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x108>
    8188:	e007      	b.n	819a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xfa>
    818a:	2902      	cmp	r1, #2
    818c:	bf07      	ittee	eq
    818e:	009b      	lsleq	r3, r3, #2
    8190:	333c      	addeq	r3, #60	; 0x3c
    8192:	00db      	lslne	r3, r3, #3
    8194:	3370      	addne	r3, #112	; 0x70
    8196:	b29b      	uxth	r3, r3
    8198:	e7f0      	b.n	817c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xdc>
    819a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    819e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    81a2:	4281      	cmp	r1, r0
    81a4:	bf28      	it	cs
    81a6:	4601      	movcs	r1, r0
    81a8:	4299      	cmp	r1, r3
    81aa:	bf28      	it	cs
    81ac:	4619      	movcs	r1, r3
    81ae:	1850      	adds	r0, r2, r1
    81b0:	4460      	add	r0, ip
    81b2:	bc30      	pop	{r4, r5}
    81b4:	1d80      	adds	r0, r0, #6
    81b6:	4770      	bx	lr

000081b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    81b8:	b570      	push	{r4, r5, r6, lr}
    81ba:	4c13      	ldr	r4, [pc, #76]	; (8208 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    81bc:	4605      	mov	r5, r0
    81be:	7ca1      	ldrb	r1, [r4, #18]
    81c0:	2902      	cmp	r1, #2
    81c2:	bf18      	it	ne
    81c4:	2903      	cmpne	r1, #3
    81c6:	d109      	bne.n	81dc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    81c8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    81cc:	f104 0144 	add.w	r1, r4, #68	; 0x44
    81d0:	f7fe fcf6 	bl	6bc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    81d4:	2808      	cmp	r0, #8
    81d6:	bf1c      	itt	ne
    81d8:	2001      	movne	r0, #1
    81da:	bd70      	popne	{r4, r5, r6, pc}
    81dc:	7ca0      	ldrb	r0, [r4, #18]
    81de:	b145      	cbz	r5, 81f2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    81e0:	2800      	cmp	r0, #0
    81e2:	bf16      	itet	ne
    81e4:	2802      	cmpne	r0, #2
    81e6:	2000      	moveq	r0, #0
    81e8:	2001      	movne	r0, #1
    81ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81ee:	f7fd bd09 	b.w	5c04 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    81f2:	2800      	cmp	r0, #0
    81f4:	bf1a      	itte	ne
    81f6:	2802      	cmpne	r0, #2
    81f8:	2101      	movne	r1, #1
    81fa:	2100      	moveq	r1, #0
    81fc:	7820      	ldrb	r0, [r4, #0]
    81fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8202:	f7fd bcb3 	b.w	5b6c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    8206:	0000      	.short	0x0000
    8208:	2000143c 	.word	0x2000143c

0000820c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8210:	4c5c      	ldr	r4, [pc, #368]	; (8384 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    8212:	4601      	mov	r1, r0
    8214:	7ca0      	ldrb	r0, [r4, #18]
    8216:	2800      	cmp	r0, #0
    8218:	bf16      	itet	ne
    821a:	2802      	cmpne	r0, #2
    821c:	2000      	moveq	r0, #0
    821e:	2001      	movne	r0, #1
    8220:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    8224:	b301      	cbz	r1, 8268 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    8226:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    822a:	f7fd fcb1 	bl	5b90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    822e:	7ca0      	ldrb	r0, [r4, #18]
    8230:	2802      	cmp	r0, #2
    8232:	bf16      	itet	ne
    8234:	2803      	cmpne	r0, #3
    8236:	2101      	moveq	r1, #1
    8238:	2100      	movne	r1, #0
    823a:	74e1      	strb	r1, [r4, #19]
    823c:	f04f 0008 	mov.w	r0, #8
    8240:	7520      	strb	r0, [r4, #20]
    8242:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8246:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    824a:	f04f 0501 	mov.w	r5, #1
    824e:	f04f 0600 	mov.w	r6, #0
    8252:	2801      	cmp	r0, #1
    8254:	bf04      	itt	eq
    8256:	7952      	ldrbeq	r2, [r2, #5]
    8258:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    825c:	d013      	beq.n	8286 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    825e:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    8262:	2801      	cmp	r0, #1
    8264:	d008      	beq.n	8278 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    8266:	e00c      	b.n	8282 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    8268:	7823      	ldrb	r3, [r4, #0]
    826a:	4601      	mov	r1, r0
    826c:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    8270:	4618      	mov	r0, r3
    8272:	f7fd fc5d 	bl	5b30 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    8276:	e7da      	b.n	822e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    8278:	7950      	ldrb	r0, [r2, #5]
    827a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    827e:	2840      	cmp	r0, #64	; 0x40
    8280:	d001      	beq.n	8286 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    8282:	2000      	movs	r0, #0
    8284:	e000      	b.n	8288 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    8286:	2001      	movs	r0, #1
    8288:	7560      	strb	r0, [r4, #21]
    828a:	2900      	cmp	r1, #0
    828c:	bf04      	itt	eq
    828e:	78a0      	ldrbeq	r0, [r4, #2]
    8290:	f010 0f04 	tsteq.w	r0, #4
    8294:	d006      	beq.n	82a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    8296:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    829a:	f104 0144 	add.w	r1, r4, #68	; 0x44
    829e:	f7fe fc8f 	bl	6bc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    82a2:	7520      	strb	r0, [r4, #20]
    82a4:	6366      	str	r6, [r4, #52]	; 0x34
    82a6:	f007 fd78 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    82aa:	63a0      	str	r0, [r4, #56]	; 0x38
    82ac:	2700      	movs	r7, #0
    82ae:	7d20      	ldrb	r0, [r4, #20]
    82b0:	f7fe fbca 	bl	6a48 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    82b4:	4680      	mov	r8, r0
    82b6:	7ce0      	ldrb	r0, [r4, #19]
    82b8:	2800      	cmp	r0, #0
    82ba:	bf18      	it	ne
    82bc:	f1b8 0f00 	cmpne.w	r8, #0
    82c0:	d003      	beq.n	82ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    82c2:	7d20      	ldrb	r0, [r4, #20]
    82c4:	f7fe fbb4 	bl	6a30 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    82c8:	b168      	cbz	r0, 82e6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    82ca:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    82ce:	2800      	cmp	r0, #0
    82d0:	bf1c      	itt	ne
    82d2:	7d60      	ldrbne	r0, [r4, #21]
    82d4:	2800      	cmpne	r0, #0
    82d6:	d01e      	beq.n	8316 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    82d8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    82dc:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    82e0:	2901      	cmp	r1, #1
    82e2:	d00e      	beq.n	8302 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    82e4:	e012      	b.n	830c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    82e6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    82ea:	463a      	mov	r2, r7
    82ec:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    82f0:	4640      	mov	r0, r8
    82f2:	f009 f823 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    82f6:	7d21      	ldrb	r1, [r4, #20]
    82f8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    82fc:	f7fe fbb0 	bl	6a60 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8300:	e009      	b.n	8316 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    8302:	7940      	ldrb	r0, [r0, #5]
    8304:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8308:	2840      	cmp	r0, #64	; 0x40
    830a:	d032      	beq.n	8372 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    830c:	4631      	mov	r1, r6
    830e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8312:	f009 f803 	bl	1131c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8316:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    831a:	78a0      	ldrb	r0, [r4, #2]
    831c:	f010 0f04 	tst.w	r0, #4
    8320:	bf1a      	itte	ne
    8322:	7ce0      	ldrbne	r0, [r4, #19]
    8324:	2800      	cmpne	r0, #0
    8326:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    832a:	f04f 0700 	mov.w	r7, #0
    832e:	7d20      	ldrb	r0, [r4, #20]
    8330:	f7fe fbe8 	bl	6b04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8334:	0006      	movs	r6, r0
    8336:	bf08      	it	eq
    8338:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    833c:	2110      	movs	r1, #16
    833e:	f7ff fa75 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8342:	2800      	cmp	r0, #0
    8344:	bf18      	it	ne
    8346:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    834a:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    834e:	463a      	mov	r2, r7
    8350:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    8354:	4630      	mov	r0, r6
    8356:	f008 fff1 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    835a:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    835e:	4c0a      	ldr	r4, [pc, #40]	; (8388 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    8360:	6820      	ldr	r0, [r4, #0]
    8362:	f009 fc5d 	bl	11c20 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8366:	6820      	ldr	r0, [r4, #0]
    8368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    836c:	2101      	movs	r1, #1
    836e:	f009 bc5e 	b.w	11c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8372:	f7fe fb59 	bl	6a28 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8376:	463a      	mov	r2, r7
    8378:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    837c:	f008 ffde 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8380:	e7c9      	b.n	8316 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    8382:	0000      	.short	0x0000
    8384:	2000143c 	.word	0x2000143c
    8388:	20000110 	.word	0x20000110

0000838c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    838c:	4804      	ldr	r0, [pc, #16]	; (83a0 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    838e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    8392:	2900      	cmp	r1, #0
    8394:	bf14      	ite	ne
    8396:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    839a:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    839e:	4770      	bx	lr
    83a0:	2000143c 	.word	0x2000143c

000083a4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    83a4:	480b      	ldr	r0, [pc, #44]	; (83d4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    83a6:	8840      	ldrh	r0, [r0, #2]
    83a8:	f3c0 1100 	ubfx	r1, r0, #4, #1
    83ac:	b131      	cbz	r1, 83bc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    83ae:	f3c0 0080 	ubfx	r0, r0, #2, #1
    83b2:	2800      	cmp	r0, #0
    83b4:	bf04      	itt	eq
    83b6:	201f      	moveq	r0, #31
    83b8:	4770      	bxeq	lr
    83ba:	e002      	b.n	83c2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    83bc:	f3c0 0140 	ubfx	r1, r0, #1, #1
    83c0:	b109      	cbz	r1, 83c6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    83c2:	2000      	movs	r0, #0
    83c4:	4770      	bx	lr
    83c6:	f010 0f01 	tst.w	r0, #1
    83ca:	bf14      	ite	ne
    83cc:	20ee      	movne	r0, #238	; 0xee
    83ce:	20ff      	moveq	r0, #255	; 0xff
    83d0:	4770      	bx	lr
    83d2:	0000      	.short	0x0000
    83d4:	2000143c 	.word	0x2000143c

000083d8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    83d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83dc:	4c41      	ldr	r4, [pc, #260]	; (84e4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    83de:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    83e2:	2500      	movs	r5, #0
    83e4:	b181      	cbz	r1, 8408 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    83e6:	7045      	strb	r5, [r0, #1]
    83e8:	211b      	movs	r1, #27
    83ea:	7001      	strb	r1, [r0, #0]
    83ec:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    83f0:	6041      	str	r1, [r0, #4]
    83f2:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    83f6:	6081      	str	r1, [r0, #8]
    83f8:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    83fc:	7301      	strb	r1, [r0, #12]
    83fe:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    8402:	2001      	movs	r0, #1
    8404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8408:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    840c:	b141      	cbz	r1, 8420 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    840e:	7045      	strb	r5, [r0, #1]
    8410:	2107      	movs	r1, #7
    8412:	7001      	strb	r1, [r0, #0]
    8414:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    8418:	6041      	str	r1, [r0, #4]
    841a:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    841e:	e05d      	b.n	84dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    8420:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    8424:	2114      	movs	r1, #20
    8426:	4f30      	ldr	r7, [pc, #192]	; (84e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    8428:	2601      	movs	r6, #1
    842a:	b30a      	cbz	r2, 8470 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    842c:	4680      	mov	r8, r0
    842e:	7045      	strb	r5, [r0, #1]
    8430:	f800 1b04 	strb.w	r1, [r0], #4
    8434:	2220      	movs	r2, #32
    8436:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    843a:	f7fc fa6d 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    843e:	f888 6008 	strb.w	r6, [r8, #8]
    8442:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    8446:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    844a:	2800      	cmp	r0, #0
    844c:	d146      	bne.n	84dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    844e:	bf00      	nop
    8450:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    8454:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    8458:	6878      	ldr	r0, [r7, #4]
    845a:	7c41      	ldrb	r1, [r0, #17]
    845c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    8460:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    8464:	8800      	ldrh	r0, [r0, #0]
    8466:	f7fc fff7 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    846a:	f008 fd5f 	bl	10f2c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    846e:	e035      	b.n	84dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    8470:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    8474:	b302      	cbz	r2, 84b8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    8476:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    847a:	b18a      	cbz	r2, 84a0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    847c:	4680      	mov	r8, r0
    847e:	7045      	strb	r5, [r0, #1]
    8480:	f800 1b04 	strb.w	r1, [r0], #4
    8484:	2220      	movs	r2, #32
    8486:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    848a:	f7fc fa45 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    848e:	f888 6008 	strb.w	r6, [r8, #8]
    8492:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    8496:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    849a:	2800      	cmp	r0, #0
    849c:	d0d8      	beq.n	8450 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    849e:	e01d      	b.n	84dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    84a0:	7045      	strb	r5, [r0, #1]
    84a2:	2117      	movs	r1, #23
    84a4:	7001      	strb	r1, [r0, #0]
    84a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    84aa:	6041      	str	r1, [r0, #4]
    84ac:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    84b0:	8101      	strh	r1, [r0, #8]
    84b2:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    84b6:	e011      	b.n	84dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    84b8:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    84bc:	2900      	cmp	r1, #0
    84be:	bf04      	itt	eq
    84c0:	2000      	moveq	r0, #0
    84c2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    84c6:	7045      	strb	r5, [r0, #1]
    84c8:	2120      	movs	r1, #32
    84ca:	f800 1b04 	strb.w	r1, [r0], #4
    84ce:	2222      	movs	r2, #34	; 0x22
    84d0:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    84d4:	f7fc fa20 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    84d8:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    84dc:	2001      	movs	r0, #1
    84de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84e2:	0000      	.short	0x0000
    84e4:	2000143c 	.word	0x2000143c
    84e8:	20000110 	.word	0x20000110

000084ec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    84ec:	4801      	ldr	r0, [pc, #4]	; (84f4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    84ee:	6880      	ldr	r0, [r0, #8]
    84f0:	4770      	bx	lr
    84f2:	0000      	.short	0x0000
    84f4:	2000143c 	.word	0x2000143c

000084f8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    84f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84fa:	4606      	mov	r6, r0
    84fc:	481d      	ldr	r0, [pc, #116]	; (8574 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x7c>)
    84fe:	8842      	ldrh	r2, [r0, #2]
    8500:	f3c2 1100 	ubfx	r1, r2, #4, #1
    8504:	2900      	cmp	r1, #0
    8506:	bf04      	itt	eq
    8508:	f3c2 01c0 	ubfxeq	r1, r2, #3, #1
    850c:	2900      	cmpeq	r1, #0
    850e:	d12a      	bne.n	8566 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6e>
    8510:	4b19      	ldr	r3, [pc, #100]	; (8578 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x80>)
    8512:	6887      	ldr	r7, [r0, #8]
    8514:	f012 0f18 	tst.w	r2, #24
    8518:	e9d3 1503 	ldrd	r1, r5, [r3, #12]
    851c:	699c      	ldr	r4, [r3, #24]
    851e:	7903      	ldrb	r3, [r0, #4]
    8520:	7940      	ldrb	r0, [r0, #5]
    8522:	f363 0407 	bfi	r4, r3, #0, #8
    8526:	f362 050f 	bfi	r5, r2, #0, #16
    852a:	f360 240f 	bfi	r4, r0, #8, #8
    852e:	d11a      	bne.n	8566 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6e>
    8530:	b1d9      	cbz	r1, 856a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x72>
    8532:	4608      	mov	r0, r1
    8534:	f009 feb5 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8538:	b2e1      	uxtb	r1, r4
    853a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    853e:	2904      	cmp	r1, #4
    8540:	bf08      	it	eq
    8542:	2108      	moveq	r1, #8
    8544:	2c04      	cmp	r4, #4
    8546:	bf08      	it	eq
    8548:	2408      	moveq	r4, #8
    854a:	f009 fe52 	bl	121f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    854e:	b2aa      	uxth	r2, r5
    8550:	9200      	str	r2, [sp, #0]
    8552:	4601      	mov	r1, r0
    8554:	2300      	movs	r3, #0
    8556:	4622      	mov	r2, r4
    8558:	4630      	mov	r0, r6
    855a:	f009 fcd5 	bl	11f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    855e:	4287      	cmp	r7, r0
    8560:	bf3c      	itt	cc
    8562:	2000      	movcc	r0, #0
    8564:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    8566:	2001      	movs	r0, #1
    8568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    856a:	f240 3183 	movw	r1, #899	; 0x383
    856e:	202d      	movs	r0, #45	; 0x2d
    8570:	f7fc fb5e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8574:	2000143c 	.word	0x2000143c
    8578:	00009804 	.word	0x00009804

0000857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    857c:	b538      	push	{r3, r4, r5, lr}
    857e:	4c10      	ldr	r4, [pc, #64]	; (85c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x44>)
    8580:	f104 0018 	add.w	r0, r4, #24
    8584:	f009 fe8d 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8588:	8861      	ldrh	r1, [r4, #2]
    858a:	f3c1 1200 	ubfx	r2, r1, #4, #1
    858e:	b122      	cbz	r2, 859a <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    8590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8594:	2228      	movs	r2, #40	; 0x28
    8596:	f001 b961 	b.w	985c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    859a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    859e:	2900      	cmp	r1, #0
    85a0:	bf14      	ite	ne
    85a2:	8e65      	ldrhne	r5, [r4, #50]	; 0x32
    85a4:	8e25      	ldrheq	r5, [r4, #48]	; 0x30
    85a6:	7921      	ldrb	r1, [r4, #4]
    85a8:	f009 fe23 	bl	121f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    85ac:	8862      	ldrh	r2, [r4, #2]
    85ae:	9200      	str	r2, [sp, #0]
    85b0:	4601      	mov	r1, r0
    85b2:	7962      	ldrb	r2, [r4, #5]
    85b4:	2301      	movs	r3, #1
    85b6:	4628      	mov	r0, r5
    85b8:	f009 fca6 	bl	11f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    85bc:	bd38      	pop	{r3, r4, r5, pc}
    85be:	0000      	.short	0x0000
    85c0:	2000143c 	.word	0x2000143c

000085c4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    85c4:	4904      	ldr	r1, [pc, #16]	; (85d8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    85c6:	2200      	movs	r2, #0
    85c8:	624a      	str	r2, [r1, #36]	; 0x24
    85ca:	884b      	ldrh	r3, [r1, #2]
    85cc:	2b1d      	cmp	r3, #29
    85ce:	bf0c      	ite	eq
    85d0:	734a      	strbeq	r2, [r1, #13]
    85d2:	7348      	strbne	r0, [r1, #13]
    85d4:	4770      	bx	lr
    85d6:	0000      	.short	0x0000
    85d8:	2000143c 	.word	0x2000143c

000085dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    85dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85e0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8830 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x254>
    85e4:	b085      	sub	sp, #20
    85e6:	4604      	mov	r4, r0
    85e8:	f8d8 7000 	ldr.w	r7, [r8]
    85ec:	f8d8 6004 	ldr.w	r6, [r8, #4]
    85f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
    85f4:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    85f8:	f8d8 9010 	ldr.w	r9, [r8, #16]
    85fc:	f8d8 0014 	ldr.w	r0, [r8, #20]
    8600:	9003      	str	r0, [sp, #12]
    8602:	a801      	add	r0, sp, #4
    8604:	f009 fec5 	bl	12392 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    8608:	7aa0      	ldrb	r0, [r4, #10]
    860a:	f360 4917 	bfi	r9, r0, #16, #8
    860e:	7820      	ldrb	r0, [r4, #0]
    8610:	f360 0707 	bfi	r7, r0, #0, #8
    8614:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    8618:	f8ad 0000 	strh.w	r0, [sp]
    861c:	f89d 0000 	ldrb.w	r0, [sp]
    8620:	f000 0101 	and.w	r1, r0, #1
    8624:	f3c0 0240 	ubfx	r2, r0, #1, #1
    8628:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    862c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    8630:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    8634:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    8638:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    863c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    8640:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    8644:	f3c0 1240 	ubfx	r2, r0, #5, #1
    8648:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    864c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8650:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
    8654:	7d20      	ldrb	r0, [r4, #20]
    8656:	f36b 471f 	bfi	r7, fp, #16, #16
    865a:	2801      	cmp	r0, #1
    865c:	bf18      	it	ne
    865e:	2802      	cmpne	r0, #2
    8660:	d003      	beq.n	866a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x8e>
    8662:	2803      	cmp	r0, #3
    8664:	bf08      	it	eq
    8666:	2008      	moveq	r0, #8
    8668:	d10e      	bne.n	8688 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xac>
    866a:	7861      	ldrb	r1, [r4, #1]
    866c:	f360 0607 	bfi	r6, r0, #0, #8
    8670:	f011 0f10 	tst.w	r1, #16
    8674:	d10f      	bne.n	8696 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xba>
    8676:	7da1      	ldrb	r1, [r4, #22]
    8678:	2901      	cmp	r1, #1
    867a:	bf18      	it	ne
    867c:	2902      	cmpne	r1, #2
    867e:	d008      	beq.n	8692 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb6>
    8680:	2903      	cmp	r1, #3
    8682:	bf08      	it	eq
    8684:	2108      	moveq	r1, #8
    8686:	d004      	beq.n	8692 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb6>
    8688:	f240 21a1 	movw	r1, #673	; 0x2a1
    868c:	2006      	movs	r0, #6
    868e:	f7fc facf 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8692:	f361 260f 	bfi	r6, r1, #8, #8
    8696:	f3ca 4107 	ubfx	r1, sl, #16, #8
    869a:	2901      	cmp	r1, #1
    869c:	d008      	beq.n	86b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xd4>
    869e:	7a61      	ldrb	r1, [r4, #9]
    86a0:	a801      	add	r0, sp, #4
    86a2:	f009 fe51 	bl	12348 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    86a6:	7d20      	ldrb	r0, [r4, #20]
    86a8:	2101      	movs	r1, #1
    86aa:	2802      	cmp	r0, #2
    86ac:	d10f      	bne.n	86ce <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
    86ae:	e00b      	b.n	86c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    86b0:	2104      	movs	r1, #4
    86b2:	2808      	cmp	r0, #8
    86b4:	bf08      	it	eq
    86b6:	f361 0607 	bfieq	r6, r1, #0, #8
    86ba:	f3c6 2007 	ubfx	r0, r6, #8, #8
    86be:	2808      	cmp	r0, #8
    86c0:	bf08      	it	eq
    86c2:	f361 260f 	bfieq	r6, r1, #8, #8
    86c6:	e7ea      	b.n	869e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc2>
    86c8:	7d60      	ldrb	r0, [r4, #21]
    86ca:	1c40      	adds	r0, r0, #1
    86cc:	b2c1      	uxtb	r1, r0
    86ce:	7ea0      	ldrb	r0, [r4, #26]
    86d0:	1c40      	adds	r0, r0, #1
    86d2:	b2c2      	uxtb	r2, r0
    86d4:	a801      	add	r0, sp, #4
    86d6:	f009 fdcd 	bl	12274 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    86da:	0c38      	lsrs	r0, r7, #16
    86dc:	f010 0f08 	tst.w	r0, #8
    86e0:	f04f 0500 	mov.w	r5, #0
    86e4:	d125      	bne.n	8732 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x156>
    86e6:	a801      	add	r0, sp, #4
    86e8:	f009 fddb 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    86ec:	7861      	ldrb	r1, [r4, #1]
    86ee:	f011 0f10 	tst.w	r1, #16
    86f2:	d046      	beq.n	8782 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1a6>
    86f4:	2228      	movs	r2, #40	; 0x28
    86f6:	4659      	mov	r1, fp
    86f8:	f001 f8b0 	bl	985c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    86fc:	f240 2171 	movw	r1, #625	; 0x271
    8700:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    8704:	fbb0 f0f1 	udiv	r0, r0, r1
    8708:	4341      	muls	r1, r0
    870a:	f8d4 0002 	ldr.w	r0, [r4, #2]
    870e:	f240 2271 	movw	r2, #625	; 0x271
    8712:	0a00      	lsrs	r0, r0, #8
    8714:	4350      	muls	r0, r2
    8716:	f8d4 2005 	ldr.w	r2, [r4, #5]
    871a:	f240 2371 	movw	r3, #625	; 0x271
    871e:	0a12      	lsrs	r2, r2, #8
    8720:	fb02 f503 	mul.w	r5, r2, r3
    8724:	4281      	cmp	r1, r0
    8726:	bf98      	it	ls
    8728:	4605      	movls	r5, r0
    872a:	d902      	bls.n	8732 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x156>
    872c:	42a9      	cmp	r1, r5
    872e:	bf98      	it	ls
    8730:	460d      	movls	r5, r1
    8732:	7ca0      	ldrb	r0, [r4, #18]
    8734:	f360 290f 	bfi	r9, r0, #8, #8
    8738:	7e20      	ldrb	r0, [r4, #24]
    873a:	2801      	cmp	r0, #1
    873c:	bf18      	it	ne
    873e:	2000      	movne	r0, #0
    8740:	f360 0a07 	bfi	sl, r0, #0, #8
    8744:	f898 0060 	ldrb.w	r0, [r8, #96]	; 0x60
    8748:	2800      	cmp	r0, #0
    874a:	bf18      	it	ne
    874c:	f8b8 0062 	ldrhne.w	r0, [r8, #98]	; 0x62
    8750:	4937      	ldr	r1, [pc, #220]	; (8830 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x254>)
    8752:	f891 1061 	ldrb.w	r1, [r1, #97]	; 0x61
    8756:	2900      	cmp	r1, #0
    8758:	bf1c      	itt	ne
    875a:	4935      	ldrne	r1, [pc, #212]	; (8830 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x254>)
    875c:	f8b1 1064 	ldrhne.w	r1, [r1, #100]	; 0x64
    8760:	4288      	cmp	r0, r1
    8762:	bf38      	it	cc
    8764:	4608      	movcc	r0, r1
    8766:	b3d0      	cbz	r0, 87de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x202>
    8768:	a901      	add	r1, sp, #4
    876a:	0c3a      	lsrs	r2, r7, #16
    876c:	0a33      	lsrs	r3, r6, #8
    876e:	f366 0807 	bfi	r8, r6, #0, #8
    8772:	f362 0b0f 	bfi	fp, r2, #0, #16
    8776:	f363 280f 	bfi	r8, r3, #8, #8
    877a:	f012 0f18 	tst.w	r2, #24
    877e:	d00d      	beq.n	879c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1c0>
    8780:	e02d      	b.n	87de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x202>
    8782:	b2f1      	uxtb	r1, r6
    8784:	f009 fd35 	bl	121f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    8788:	0c3a      	lsrs	r2, r7, #16
    878a:	9200      	str	r2, [sp, #0]
    878c:	4601      	mov	r1, r0
    878e:	f3c6 2207 	ubfx	r2, r6, #8, #8
    8792:	2301      	movs	r3, #1
    8794:	20fb      	movs	r0, #251	; 0xfb
    8796:	f009 fbb7 	bl	11f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    879a:	e7af      	b.n	86fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x120>
    879c:	9004      	str	r0, [sp, #16]
    879e:	4608      	mov	r0, r1
    87a0:	f009 fd7f 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    87a4:	f008 01ff 	and.w	r1, r8, #255	; 0xff
    87a8:	f3c8 2807 	ubfx	r8, r8, #8, #8
    87ac:	2904      	cmp	r1, #4
    87ae:	bf08      	it	eq
    87b0:	2108      	moveq	r1, #8
    87b2:	f1b8 0f04 	cmp.w	r8, #4
    87b6:	bf08      	it	eq
    87b8:	f04f 0808 	moveq.w	r8, #8
    87bc:	f009 fd19 	bl	121f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    87c0:	4601      	mov	r1, r0
    87c2:	fa1f f08b 	uxth.w	r0, fp
    87c6:	9000      	str	r0, [sp, #0]
    87c8:	2300      	movs	r3, #0
    87ca:	4642      	mov	r2, r8
    87cc:	9804      	ldr	r0, [sp, #16]
    87ce:	f009 fb9b 	bl	11f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    87d2:	4285      	cmp	r5, r0
    87d4:	bf3e      	ittt	cc
    87d6:	2045      	movcc	r0, #69	; 0x45
    87d8:	b005      	addcc	sp, #20
    87da:	e8bd 8ff0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87de:	4814      	ldr	r0, [pc, #80]	; (8830 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x254>)
    87e0:	6007      	str	r7, [r0, #0]
    87e2:	6046      	str	r6, [r0, #4]
    87e4:	6085      	str	r5, [r0, #8]
    87e6:	f8c0 a00c 	str.w	sl, [r0, #12]
    87ea:	9903      	ldr	r1, [sp, #12]
    87ec:	f8c0 9010 	str.w	r9, [r0, #16]
    87f0:	6141      	str	r1, [r0, #20]
    87f2:	9901      	ldr	r1, [sp, #4]
    87f4:	6181      	str	r1, [r0, #24]
    87f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    87fa:	8381      	strh	r1, [r0, #28]
    87fc:	7ae1      	ldrb	r1, [r4, #11]
    87fe:	2900      	cmp	r1, #0
    8800:	bf16      	itet	ne
    8802:	2902      	cmpne	r1, #2
    8804:	2100      	moveq	r1, #0
    8806:	2101      	movne	r1, #1
    8808:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
    880c:	68e1      	ldr	r1, [r4, #12]
    880e:	6441      	str	r1, [r0, #68]	; 0x44
    8810:	8a21      	ldrh	r1, [r4, #16]
    8812:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    8816:	7de1      	ldrb	r1, [r4, #23]
    8818:	f890 2020 	ldrb.w	r2, [r0, #32]
    881c:	f361 1207 	bfi	r2, r1, #4, #4
    8820:	f880 2020 	strb.w	r2, [r0, #32]
    8824:	b005      	add	sp, #20
    8826:	f04f 0000 	mov.w	r0, #0
    882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    882e:	0000      	.short	0x0000
    8830:	2000143c 	.word	0x2000143c

00008834 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    8834:	b570      	push	{r4, r5, r6, lr}
    8836:	491b      	ldr	r1, [pc, #108]	; (88a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    8838:	2400      	movs	r4, #0
    883a:	700c      	strb	r4, [r1, #0]
    883c:	4d1a      	ldr	r5, [pc, #104]	; (88a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    883e:	6028      	str	r0, [r5, #0]
    8840:	7808      	ldrb	r0, [r1, #0]
    8842:	b120      	cbz	r0, 884e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    8844:	f240 21dd 	movw	r1, #733	; 0x2dd
    8848:	202d      	movs	r0, #45	; 0x2d
    884a:	f7fc f9f1 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    884e:	22c8      	movs	r2, #200	; 0xc8
    8850:	2100      	movs	r1, #0
    8852:	4816      	ldr	r0, [pc, #88]	; (88ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    8854:	f007 fc14 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8858:	4814      	ldr	r0, [pc, #80]	; (88ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    885a:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    885e:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    8862:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    8866:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    886a:	21ff      	movs	r1, #255	; 0xff
    886c:	f800 1b21 	strb.w	r1, [r0], #33
    8870:	217f      	movs	r1, #127	; 0x7f
    8872:	f800 191f 	strb.w	r1, [r0], #-31
    8876:	2113      	movs	r1, #19
    8878:	f820 1b5e 	strh.w	r1, [r0], #94
    887c:	2101      	movs	r1, #1
    887e:	f800 1950 	strb.w	r1, [r0], #-80
    8882:	f800 4b08 	strb.w	r4, [r0], #8
    8886:	f009 fd84 	bl	12392 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    888a:	f005 fe3f 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    888e:	f005 fc43 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8892:	68a8      	ldr	r0, [r5, #8]
    8894:	2800      	cmp	r0, #0
    8896:	bf18      	it	ne
    8898:	bd70      	popne	{r4, r5, r6, pc}
    889a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
    889e:	202d      	movs	r0, #45	; 0x2d
    88a0:	f7fc f9c6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88a4:	20001504 	.word	0x20001504
    88a8:	20000110 	.word	0x20000110
    88ac:	2000143c 	.word	0x2000143c

000088b0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    88b0:	4907      	ldr	r1, [pc, #28]	; (88d0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    88b2:	8848      	ldrh	r0, [r1, #2]
    88b4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    88b8:	b93a      	cbnz	r2, 88ca <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    88ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    88be:	b120      	cbz	r0, 88ca <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    88c0:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    88c4:	2800      	cmp	r0, #0
    88c6:	bf08      	it	eq
    88c8:	4770      	bxeq	lr
    88ca:	2001      	movs	r0, #1
    88cc:	4770      	bx	lr
    88ce:	0000      	.short	0x0000
    88d0:	2000143c 	.word	0x2000143c

000088d4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    88d4:	4807      	ldr	r0, [pc, #28]	; (88f4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    88d6:	8840      	ldrh	r0, [r0, #2]
    88d8:	f3c0 1100 	ubfx	r1, r0, #4, #1
    88dc:	b119      	cbz	r1, 88e6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    88de:	f3c0 0080 	ubfx	r0, r0, #2, #1
    88e2:	b128      	cbz	r0, 88f0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    88e4:	e002      	b.n	88ec <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    88e6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    88ea:	b108      	cbz	r0, 88f0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    88ec:	2000      	movs	r0, #0
    88ee:	4770      	bx	lr
    88f0:	2001      	movs	r0, #1
    88f2:	4770      	bx	lr
    88f4:	2000143c 	.word	0x2000143c

000088f8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    88f8:	4802      	ldr	r0, [pc, #8]	; (8904 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    88fa:	7880      	ldrb	r0, [r0, #2]
    88fc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8900:	4770      	bx	lr
    8902:	0000      	.short	0x0000
    8904:	2000143c 	.word	0x2000143c

00008908 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    8908:	4802      	ldr	r0, [pc, #8]	; (8914 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    890a:	7880      	ldrb	r0, [r0, #2]
    890c:	f000 0001 	and.w	r0, r0, #1
    8910:	4770      	bx	lr
    8912:	0000      	.short	0x0000
    8914:	2000143c 	.word	0x2000143c

00008918 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    8918:	4803      	ldr	r0, [pc, #12]	; (8928 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    891a:	8840      	ldrh	r0, [r0, #2]
    891c:	2809      	cmp	r0, #9
    891e:	bf0c      	ite	eq
    8920:	2001      	moveq	r0, #1
    8922:	2000      	movne	r0, #0
    8924:	4770      	bx	lr
    8926:	0000      	.short	0x0000
    8928:	2000143c 	.word	0x2000143c

0000892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    892c:	4802      	ldr	r0, [pc, #8]	; (8938 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    892e:	7880      	ldrb	r0, [r0, #2]
    8930:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8934:	4770      	bx	lr
    8936:	0000      	.short	0x0000
    8938:	2000143c 	.word	0x2000143c

0000893c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    893c:	4802      	ldr	r0, [pc, #8]	; (8948 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    893e:	7880      	ldrb	r0, [r0, #2]
    8940:	f3c0 1000 	ubfx	r0, r0, #4, #1
    8944:	4770      	bx	lr
    8946:	0000      	.short	0x0000
    8948:	2000143c 	.word	0x2000143c

0000894c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    894c:	4802      	ldr	r0, [pc, #8]	; (8958 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    894e:	7880      	ldrb	r0, [r0, #2]
    8950:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8954:	4770      	bx	lr
    8956:	0000      	.short	0x0000
    8958:	2000143c 	.word	0x2000143c

0000895c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    895c:	4902      	ldr	r1, [pc, #8]	; (8968 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    895e:	4801      	ldr	r0, [pc, #4]	; (8964 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    8960:	6088      	str	r0, [r1, #8]
    8962:	4770      	bx	lr
    8964:	00009844 	.word	0x00009844
    8968:	20000110 	.word	0x20000110

0000896c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    896c:	4801      	ldr	r0, [pc, #4]	; (8974 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    896e:	f990 0010 	ldrsb.w	r0, [r0, #16]
    8972:	4770      	bx	lr
    8974:	2000143c 	.word	0x2000143c

00008978 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    8978:	4903      	ldr	r1, [pc, #12]	; (8988 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    897a:	7809      	ldrb	r1, [r1, #0]
    897c:	4281      	cmp	r1, r0
    897e:	bf0c      	ite	eq
    8980:	2001      	moveq	r0, #1
    8982:	2000      	movne	r0, #0
    8984:	4770      	bx	lr
    8986:	0000      	.short	0x0000
    8988:	2000143c 	.word	0x2000143c

0000898c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    898c:	4801      	ldr	r0, [pc, #4]	; (8994 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    898e:	6880      	ldr	r0, [r0, #8]
    8990:	6800      	ldr	r0, [r0, #0]
    8992:	4700      	bx	r0
    8994:	20000110 	.word	0x20000110

00008998 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    8998:	4816      	ldr	r0, [pc, #88]	; (89f4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    899a:	b510      	push	{r4, lr}
    899c:	7800      	ldrb	r0, [r0, #0]
    899e:	2800      	cmp	r0, #0
    89a0:	bf18      	it	ne
    89a2:	240c      	movne	r4, #12
    89a4:	d001      	beq.n	89aa <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    89a6:	4620      	mov	r0, r4
    89a8:	bd10      	pop	{r4, pc}
    89aa:	2400      	movs	r4, #0
    89ac:	22c8      	movs	r2, #200	; 0xc8
    89ae:	4621      	mov	r1, r4
    89b0:	4811      	ldr	r0, [pc, #68]	; (89f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    89b2:	f007 fb65 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    89b6:	4910      	ldr	r1, [pc, #64]	; (89f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    89b8:	2000      	movs	r0, #0
    89ba:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    89be:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    89c2:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    89c6:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    89ca:	22ff      	movs	r2, #255	; 0xff
    89cc:	700a      	strb	r2, [r1, #0]
    89ce:	227f      	movs	r2, #127	; 0x7f
    89d0:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    89d4:	2213      	movs	r2, #19
    89d6:	804a      	strh	r2, [r1, #2]
    89d8:	2201      	movs	r2, #1
    89da:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    89de:	7408      	strb	r0, [r1, #16]
    89e0:	f101 0018 	add.w	r0, r1, #24
    89e4:	f009 fcd5 	bl	12392 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    89e8:	f005 fd90 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    89ec:	f005 fb94 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    89f0:	e7d9      	b.n	89a6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    89f2:	0000      	.short	0x0000
    89f4:	20001504 	.word	0x20001504
    89f8:	2000143c 	.word	0x2000143c

000089fc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    89fc:	4801      	ldr	r0, [pc, #4]	; (8a04 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    89fe:	7b00      	ldrb	r0, [r0, #12]
    8a00:	4770      	bx	lr
    8a02:	0000      	.short	0x0000
    8a04:	2000143c 	.word	0x2000143c

00008a08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    8a08:	4801      	ldr	r0, [pc, #4]	; (8a10 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    8a0a:	7940      	ldrb	r0, [r0, #5]
    8a0c:	4770      	bx	lr
    8a0e:	0000      	.short	0x0000
    8a10:	2000143c 	.word	0x2000143c

00008a14 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    8a14:	4901      	ldr	r1, [pc, #4]	; (8a1c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    8a16:	6048      	str	r0, [r1, #4]
    8a18:	4770      	bx	lr
    8a1a:	0000      	.short	0x0000
    8a1c:	20000110 	.word	0x20000110

00008a20 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    8a20:	4a05      	ldr	r2, [pc, #20]	; (8a38 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    8a22:	2300      	movs	r3, #0
    8a24:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    8a28:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    8a2c:	2001      	movs	r0, #1
    8a2e:	6591      	str	r1, [r2, #88]	; 0x58
    8a30:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    8a34:	4770      	bx	lr
    8a36:	0000      	.short	0x0000
    8a38:	2000143c 	.word	0x2000143c

00008a3c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    8a3c:	4a05      	ldr	r2, [pc, #20]	; (8a54 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    8a3e:	2300      	movs	r3, #0
    8a40:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    8a44:	65d1      	str	r1, [r2, #92]	; 0x5c
    8a46:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    8a4a:	2001      	movs	r0, #1
    8a4c:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    8a50:	4770      	bx	lr
    8a52:	0000      	.short	0x0000
    8a54:	2000143c 	.word	0x2000143c

00008a58 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    8a58:	4805      	ldr	r0, [pc, #20]	; (8a70 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    8a5a:	b510      	push	{r4, lr}
    8a5c:	7800      	ldrb	r0, [r0, #0]
    8a5e:	2801      	cmp	r0, #1
    8a60:	bf1c      	itt	ne
    8a62:	2000      	movne	r0, #0
    8a64:	bd10      	popne	{r4, pc}
    8a66:	f000 fd19 	bl	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    8a6a:	2000      	movs	r0, #0
    8a6c:	bd10      	pop	{r4, pc}
    8a6e:	0000      	.short	0x0000
    8a70:	20001504 	.word	0x20001504

00008a74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    8a74:	4901      	ldr	r1, [pc, #4]	; (8a7c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    8a76:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    8a7a:	4770      	bx	lr
    8a7c:	2000143c 	.word	0x2000143c

00008a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    8a80:	4904      	ldr	r1, [pc, #16]	; (8a94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    8a82:	4803      	ldr	r0, [pc, #12]	; (8a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    8a84:	6008      	str	r0, [r1, #0]
    8a86:	4905      	ldr	r1, [pc, #20]	; (8a9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    8a88:	4803      	ldr	r0, [pc, #12]	; (8a98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    8a8a:	6008      	str	r0, [r1, #0]
    8a8c:	4770      	bx	lr
    8a8e:	0000      	.short	0x0000
    8a90:	000096e5 	.word	0x000096e5
    8a94:	20000120 	.word	0x20000120
    8a98:	00009611 	.word	0x00009611
    8a9c:	2000011c 	.word	0x2000011c

00008aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    8aa0:	b570      	push	{r4, r5, r6, lr}
    8aa2:	4c10      	ldr	r4, [pc, #64]	; (8ae4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    8aa4:	4e10      	ldr	r6, [pc, #64]	; (8ae8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    8aa6:	2501      	movs	r5, #1
    8aa8:	78a0      	ldrb	r0, [r4, #2]
    8aaa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8aae:	b130      	cbz	r0, 8abe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    8ab0:	223c      	movs	r2, #60	; 0x3c
    8ab2:	21ff      	movs	r1, #255	; 0xff
    8ab4:	6870      	ldr	r0, [r6, #4]
    8ab6:	f000 fd2f 	bl	9518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    8aba:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    8abe:	78a0      	ldrb	r0, [r4, #2]
    8ac0:	f010 0f01 	tst.w	r0, #1
    8ac4:	bf1c      	itt	ne
    8ac6:	6870      	ldrne	r0, [r6, #4]
    8ac8:	8801      	ldrhne	r1, [r0, #0]
    8aca:	f04f 023c 	mov.w	r2, #60	; 0x3c
    8ace:	bf12      	itee	ne
    8ad0:	2001      	movne	r0, #1
    8ad2:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    8ad6:	2000      	moveq	r0, #0
    8ad8:	f000 fc16 	bl	9308 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8adc:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    8ae0:	bd70      	pop	{r4, r5, r6, pc}
    8ae2:	0000      	.short	0x0000
    8ae4:	2000143c 	.word	0x2000143c
    8ae8:	20000110 	.word	0x20000110

00008aec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    8aec:	4802      	ldr	r0, [pc, #8]	; (8af8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    8aee:	7c40      	ldrb	r0, [r0, #17]
    8af0:	2800      	cmp	r0, #0
    8af2:	bf18      	it	ne
    8af4:	2001      	movne	r0, #1
    8af6:	4770      	bx	lr
    8af8:	2000143c 	.word	0x2000143c
    8afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b00:	4e68      	ldr	r6, [pc, #416]	; (8ca4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    8b02:	0007      	movs	r7, r0
    8b04:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    8b08:	d027      	beq.n	8b5a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    8b0a:	f104 0018 	add.w	r0, r4, #24
    8b0e:	f009 fc1d 	bl	1234c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8b12:	b9c0      	cbnz	r0, 8b46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    8b14:	78a0      	ldrb	r0, [r4, #2]
    8b16:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d039      	beq.n	8b92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    8b1e:	f104 0018 	add.w	r0, r4, #24
    8b22:	f009 fbbe 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8b26:	4605      	mov	r5, r0
    8b28:	f104 0018 	add.w	r0, r4, #24
    8b2c:	f009 fc0e 	bl	1234c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8b30:	1a28      	subs	r0, r5, r0
    8b32:	b2c0      	uxtb	r0, r0
    8b34:	f009 fc3a 	bl	123ac <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8b38:	6871      	ldr	r1, [r6, #4]
    8b3a:	4408      	add	r0, r1
    8b3c:	6070      	str	r0, [r6, #4]
    8b3e:	f104 0018 	add.w	r0, r4, #24
    8b42:	f009 fc2e 	bl	123a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8b46:	f104 0018 	add.w	r0, r4, #24
    8b4a:	f009 fbba 	bl	122c2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    8b4e:	f006 fc85 	bl	f45c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8b52:	7921      	ldrb	r1, [r4, #4]
    8b54:	2025      	movs	r0, #37	; 0x25
    8b56:	f006 fc5d 	bl	f414 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    8b5a:	4d53      	ldr	r5, [pc, #332]	; (8ca8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    8b5c:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    8b60:	2100      	movs	r1, #0
    8b62:	6828      	ldr	r0, [r5, #0]
    8b64:	8001      	strh	r1, [r0, #0]
    8b66:	7801      	ldrb	r1, [r0, #0]
    8b68:	f021 0120 	bic.w	r1, r1, #32
    8b6c:	7001      	strb	r1, [r0, #0]
    8b6e:	8861      	ldrh	r1, [r4, #2]
    8b70:	2913      	cmp	r1, #19
    8b72:	d02b      	beq.n	8bcc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    8b74:	dc11      	bgt.n	8b9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    8b76:	2910      	cmp	r1, #16
    8b78:	bf08      	it	eq
    8b7a:	2102      	moveq	r1, #2
    8b7c:	d039      	beq.n	8bf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    8b7e:	2912      	cmp	r1, #18
    8b80:	bf08      	it	eq
    8b82:	2106      	moveq	r1, #6
    8b84:	d035      	beq.n	8bf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    8b86:	bf00      	nop
    8b88:	f240 610e 	movw	r1, #1550	; 0x60e
    8b8c:	202d      	movs	r0, #45	; 0x2d
    8b8e:	f7fc f84f 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8b96:	f000 bc81 	b.w	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    8b9a:	2915      	cmp	r1, #21
    8b9c:	bf18      	it	ne
    8b9e:	291d      	cmpne	r1, #29
    8ba0:	d1f2      	bne.n	8b88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    8ba2:	f04f 0101 	mov.w	r1, #1
    8ba6:	f009 f819 	bl	11bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8baa:	6828      	ldr	r0, [r5, #0]
    8bac:	f1b8 0f00 	cmp.w	r8, #0
    8bb0:	7801      	ldrb	r1, [r0, #0]
    8bb2:	f041 0120 	orr.w	r1, r1, #32
    8bb6:	7001      	strb	r1, [r0, #0]
    8bb8:	d011      	beq.n	8bde <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    8bba:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    8bbe:	f009 f82f 	bl	11c20 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8bc2:	2101      	movs	r1, #1
    8bc4:	6828      	ldr	r0, [r5, #0]
    8bc6:	f009 f832 	bl	11c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8bca:	e014      	b.n	8bf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    8bcc:	2100      	movs	r1, #0
    8bce:	f009 f805 	bl	11bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8bd2:	6828      	ldr	r0, [r5, #0]
    8bd4:	7801      	ldrb	r1, [r0, #0]
    8bd6:	f041 0120 	orr.w	r1, r1, #32
    8bda:	7001      	strb	r1, [r0, #0]
    8bdc:	e00b      	b.n	8bf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    8bde:	f104 0144 	add.w	r1, r4, #68	; 0x44
    8be2:	f009 f81d 	bl	11c20 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8be6:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    8bea:	6828      	ldr	r0, [r5, #0]
    8bec:	f009 f81f 	bl	11c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8bf0:	e001      	b.n	8bf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    8bf2:	f008 fff3 	bl	11bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8bf6:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8bfa:	6828      	ldr	r0, [r5, #0]
    8bfc:	f009 f820 	bl	11c40 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8c00:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8c04:	6828      	ldr	r0, [r5, #0]
    8c06:	f009 f822 	bl	11c4e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8c0a:	8860      	ldrh	r0, [r4, #2]
    8c0c:	281d      	cmp	r0, #29
    8c0e:	bf18      	it	ne
    8c10:	2815      	cmpne	r0, #21
    8c12:	d004      	beq.n	8c1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    8c14:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    8c16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8c18:	6828      	ldr	r0, [r5, #0]
    8c1a:	f008 ff87 	bl	11b2c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    8c1e:	b1ef      	cbz	r7, 8c5c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    8c20:	f104 0018 	add.w	r0, r4, #24
    8c24:	68b7      	ldr	r7, [r6, #8]
    8c26:	f009 fb3c 	bl	122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8c2a:	4680      	mov	r8, r0
    8c2c:	f104 0018 	add.w	r0, r4, #24
    8c30:	f009 fb8c 	bl	1234c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8c34:	eba8 0000 	sub.w	r0, r8, r0
    8c38:	1e40      	subs	r0, r0, #1
    8c3a:	b2c0      	uxtb	r0, r0
    8c3c:	8861      	ldrh	r1, [r4, #2]
    8c3e:	2228      	movs	r2, #40	; 0x28
    8c40:	f000 fe32 	bl	98a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    8c44:	19c1      	adds	r1, r0, r7
    8c46:	78a0      	ldrb	r0, [r4, #2]
    8c48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8c4c:	2800      	cmp	r0, #0
    8c4e:	bf1c      	itt	ne
    8c50:	6870      	ldrne	r0, [r6, #4]
    8c52:	4401      	addne	r1, r0
    8c54:	7922      	ldrb	r2, [r4, #4]
    8c56:	2000      	movs	r0, #0
    8c58:	f006 f8d2 	bl	ee00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8c5c:	6828      	ldr	r0, [r5, #0]
    8c5e:	f006 f883 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8c62:	2004      	movs	r0, #4
    8c64:	7030      	strb	r0, [r6, #0]
    8c66:	8860      	ldrh	r0, [r4, #2]
    8c68:	2813      	cmp	r0, #19
    8c6a:	d010      	beq.n	8c8e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    8c6c:	dc0b      	bgt.n	8c86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    8c6e:	2810      	cmp	r0, #16
    8c70:	bf08      	it	eq
    8c72:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c76:	2812      	cmp	r0, #18
    8c78:	d009      	beq.n	8c8e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    8c7a:	bf00      	nop
    8c7c:	f640 417e 	movw	r1, #3198	; 0xc7e
    8c80:	202d      	movs	r0, #45	; 0x2d
    8c82:	f7fb ffd5 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c86:	2815      	cmp	r0, #21
    8c88:	bf18      	it	ne
    8c8a:	281d      	cmpne	r0, #29
    8c8c:	d1f6      	bne.n	8c7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    8c8e:	7923      	ldrb	r3, [r4, #4]
    8c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8c94:	f04f 0201 	mov.w	r2, #1
    8c98:	4611      	mov	r1, r2
    8c9a:	f04f 0000 	mov.w	r0, #0
    8c9e:	f006 ba73 	b.w	f188 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8ca2:	0000      	.short	0x0000
    8ca4:	20001504 	.word	0x20001504
    8ca8:	20000110 	.word	0x20000110
    8cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cb0:	4e3d      	ldr	r6, [pc, #244]	; (8da8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    8cb2:	4681      	mov	r9, r0
    8cb4:	7830      	ldrb	r0, [r6, #0]
    8cb6:	2802      	cmp	r0, #2
    8cb8:	bf1c      	itt	ne
    8cba:	7830      	ldrbne	r0, [r6, #0]
    8cbc:	2803      	cmpne	r0, #3
    8cbe:	d005      	beq.n	8ccc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    8cc0:	f640 4105 	movw	r1, #3077	; 0xc05
    8cc4:	f04f 002d 	mov.w	r0, #45	; 0x2d
    8cc8:	f7fb ffb2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ccc:	4d37      	ldr	r5, [pc, #220]	; (8dac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    8cce:	7b28      	ldrb	r0, [r5, #12]
    8cd0:	b150      	cbz	r0, 8ce8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    8cd2:	f105 0021 	add.w	r0, r5, #33	; 0x21
    8cd6:	f006 fb21 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8cda:	2800      	cmp	r0, #0
    8cdc:	bf04      	itt	eq
    8cde:	207f      	moveq	r0, #127	; 0x7f
    8ce0:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    8ce4:	f006 fafa 	bl	f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    8ce8:	4c31      	ldr	r4, [pc, #196]	; (8db0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    8cea:	6820      	ldr	r0, [r4, #0]
    8cec:	f008 fed4 	bl	11a98 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    8cf0:	4607      	mov	r7, r0
    8cf2:	6860      	ldr	r0, [r4, #4]
    8cf4:	f04f 0800 	mov.w	r8, #0
    8cf8:	2800      	cmp	r0, #0
    8cfa:	bf18      	it	ne
    8cfc:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    8d00:	f1b9 0f00 	cmp.w	r9, #0
    8d04:	d03e      	beq.n	8d84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    8d06:	f005 ff61 	bl	ebcc <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    8d0a:	2800      	cmp	r0, #0
    8d0c:	d03a      	beq.n	8d84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    8d0e:	2f05      	cmp	r7, #5
    8d10:	d11b      	bne.n	8d4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    8d12:	6820      	ldr	r0, [r4, #0]
    8d14:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8d18:	f000 001f 	and.w	r0, r0, #31
    8d1c:	2810      	cmp	r0, #16
    8d1e:	d914      	bls.n	8d4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    8d20:	7be8      	ldrb	r0, [r5, #15]
    8d22:	b190      	cbz	r0, 8d4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    8d24:	20ff      	movs	r0, #255	; 0xff
    8d26:	f88d 0000 	strb.w	r0, [sp]
    8d2a:	2701      	movs	r7, #1
    8d2c:	4669      	mov	r1, sp
    8d2e:	2005      	movs	r0, #5
    8d30:	f000 fb24 	bl	937c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    8d34:	b330      	cbz	r0, 8d84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    8d36:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    8d3a:	6820      	ldr	r0, [r4, #0]
    8d3c:	2222      	movs	r2, #34	; 0x22
    8d3e:	1cc1      	adds	r1, r0, #3
    8d40:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    8d44:	f7fb fde8 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d48:	e01c      	b.n	8d84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    8d4a:	4641      	mov	r1, r8
    8d4c:	6820      	ldr	r0, [r4, #0]
    8d4e:	f008 fea7 	bl	11aa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    8d52:	b1b8      	cbz	r0, 8d84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    8d54:	7831      	ldrb	r1, [r6, #0]
    8d56:	4638      	mov	r0, r7
    8d58:	2902      	cmp	r1, #2
    8d5a:	bf1c      	itt	ne
    8d5c:	7831      	ldrbne	r1, [r6, #0]
    8d5e:	2903      	cmpne	r1, #3
    8d60:	d005      	beq.n	8d6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    8d62:	f640 31de 	movw	r1, #3038	; 0xbde
    8d66:	f04f 002d 	mov.w	r0, #45	; 0x2d
    8d6a:	f7fb ff61 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d6e:	68a1      	ldr	r1, [r4, #8]
    8d70:	7832      	ldrb	r2, [r6, #0]
    8d72:	6949      	ldr	r1, [r1, #20]
    8d74:	f06f 0307 	mvn.w	r3, #7
    8d78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8d7c:	5889      	ldr	r1, [r1, r2]
    8d7e:	4788      	blx	r1
    8d80:	4605      	mov	r5, r0
    8d82:	e000      	b.n	8d86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    8d84:	2501      	movs	r5, #1
    8d86:	7bb0      	ldrb	r0, [r6, #14]
    8d88:	b118      	cbz	r0, 8d92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    8d8a:	f005 fbbf 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8d8e:	f005 f9c3 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8d92:	2d00      	cmp	r5, #0
    8d94:	bf08      	it	eq
    8d96:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d9a:	68a0      	ldr	r0, [r4, #8]
    8d9c:	6880      	ldr	r0, [r0, #8]
    8d9e:	b001      	add	sp, #4
    8da0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8da4:	4700      	bx	r0
    8da6:	0000      	.short	0x0000
    8da8:	20001504 	.word	0x20001504
    8dac:	2000143c 	.word	0x2000143c
    8db0:	20000110 	.word	0x20000110
    8db4:	b538      	push	{r3, r4, r5, lr}
    8db6:	2803      	cmp	r0, #3
    8db8:	d002      	beq.n	8dc0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    8dba:	2805      	cmp	r0, #5
    8dbc:	d067      	beq.n	8e8e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    8dbe:	e064      	b.n	8e8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    8dc0:	20ff      	movs	r0, #255	; 0xff
    8dc2:	f88d 0000 	strb.w	r0, [sp]
    8dc6:	4669      	mov	r1, sp
    8dc8:	2003      	movs	r0, #3
    8dca:	f000 fad7 	bl	937c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    8dce:	2800      	cmp	r0, #0
    8dd0:	d05b      	beq.n	8e8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    8dd2:	4c33      	ldr	r4, [pc, #204]	; (8ea0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    8dd4:	4d33      	ldr	r5, [pc, #204]	; (8ea4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    8dd6:	7b20      	ldrb	r0, [r4, #12]
    8dd8:	b3b0      	cbz	r0, 8e48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    8dda:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    8dde:	bb98      	cbnz	r0, 8e48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    8de0:	f89d 0000 	ldrb.w	r0, [sp]
    8de4:	2101      	movs	r1, #1
    8de6:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    8dea:	7821      	ldrb	r1, [r4, #0]
    8dec:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    8df0:	28ff      	cmp	r0, #255	; 0xff
    8df2:	d011      	beq.n	8e18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    8df4:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    8df8:	1e51      	subs	r1, r2, #1
    8dfa:	f7fd feb5 	bl	6b68 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8dfe:	b130      	cbz	r0, 8e0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    8e00:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    8e04:	f040 0002 	orr.w	r0, r0, #2
    8e08:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    8e0c:	e012      	b.n	8e34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    8e0e:	f640 618e 	movw	r1, #3726	; 0xe8e
    8e12:	202d      	movs	r0, #45	; 0x2d
    8e14:	f7fb ff0c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e18:	6828      	ldr	r0, [r5, #0]
    8e1a:	7801      	ldrb	r1, [r0, #0]
    8e1c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8e20:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    8e24:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8e28:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    8e2c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8e30:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    8e34:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    8e38:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    8e3c:	297f      	cmp	r1, #127	; 0x7f
    8e3e:	d01f      	beq.n	8e80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    8e40:	7001      	strb	r1, [r0, #0]
    8e42:	207f      	movs	r0, #127	; 0x7f
    8e44:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    8e48:	6828      	ldr	r0, [r5, #0]
    8e4a:	2100      	movs	r1, #0
    8e4c:	8001      	strh	r1, [r0, #0]
    8e4e:	2104      	movs	r1, #4
    8e50:	f008 fec4 	bl	11bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8e54:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8e58:	6828      	ldr	r0, [r5, #0]
    8e5a:	f008 fef1 	bl	11c40 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8e5e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8e62:	6828      	ldr	r0, [r5, #0]
    8e64:	f008 fef3 	bl	11c4e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8e68:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    8e6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8e6c:	6828      	ldr	r0, [r5, #0]
    8e6e:	f008 fef7 	bl	11c60 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8e72:	490d      	ldr	r1, [pc, #52]	; (8ea8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    8e74:	2005      	movs	r0, #5
    8e76:	7008      	strb	r0, [r1, #0]
    8e78:	6828      	ldr	r0, [r5, #0]
    8e7a:	f005 ff75 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8e7e:	e00c      	b.n	8e9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    8e80:	f44f 6153 	mov.w	r1, #3376	; 0xd30
    8e84:	202d      	movs	r0, #45	; 0x2d
    8e86:	f7fb fed3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e8a:	2001      	movs	r0, #1
    8e8c:	bd38      	pop	{r3, r4, r5, pc}
    8e8e:	4807      	ldr	r0, [pc, #28]	; (8eac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    8e90:	6800      	ldr	r0, [r0, #0]
    8e92:	b110      	cbz	r0, 8e9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    8e94:	4780      	blx	r0
    8e96:	2800      	cmp	r0, #0
    8e98:	d0f7      	beq.n	8e8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    8e9a:	2000      	movs	r0, #0
    8e9c:	bd38      	pop	{r3, r4, r5, pc}
    8e9e:	0000      	.short	0x0000
    8ea0:	2000143c 	.word	0x2000143c
    8ea4:	20000110 	.word	0x20000110
    8ea8:	20001504 	.word	0x20001504
    8eac:	20000120 	.word	0x20000120
    8eb0:	b510      	push	{r4, lr}
    8eb2:	b990      	cbnz	r0, 8eda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    8eb4:	2900      	cmp	r1, #0
    8eb6:	bf08      	it	eq
    8eb8:	bd10      	popeq	{r4, pc}
    8eba:	f000 fd27 	bl	990c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8ebe:	b160      	cbz	r0, 8eda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    8ec0:	4808      	ldr	r0, [pc, #32]	; (8ee4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    8ec2:	4909      	ldr	r1, [pc, #36]	; (8ee8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    8ec4:	6880      	ldr	r0, [r0, #8]
    8ec6:	7809      	ldrb	r1, [r1, #0]
    8ec8:	6900      	ldr	r0, [r0, #16]
    8eca:	f06f 020f 	mvn.w	r2, #15
    8ece:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8ed2:	5840      	ldr	r0, [r0, r1]
    8ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ed8:	4700      	bx	r0
    8eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ede:	f000 badd 	b.w	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    8ee2:	0000      	.short	0x0000
    8ee4:	20000110 	.word	0x20000110
    8ee8:	20001504 	.word	0x20001504
    8eec:	b570      	push	{r4, r5, r6, lr}
    8eee:	4c1a      	ldr	r4, [pc, #104]	; (8f58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    8ef0:	2500      	movs	r5, #0
    8ef2:	8860      	ldrh	r0, [r4, #2]
    8ef4:	2810      	cmp	r0, #16
    8ef6:	d011      	beq.n	8f1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    8ef8:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    8efc:	7bb0      	ldrb	r0, [r6, #14]
    8efe:	b120      	cbz	r0, 8f0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    8f00:	f005 f936 	bl	e170 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    8f04:	2040      	movs	r0, #64	; 0x40
    8f06:	f005 fb11 	bl	e52c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    8f0a:	4814      	ldr	r0, [pc, #80]	; (8f5c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    8f0c:	6800      	ldr	r0, [r0, #0]
    8f0e:	f005 ff2b 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8f12:	78a0      	ldrb	r0, [r4, #2]
    8f14:	f010 0f04 	tst.w	r0, #4
    8f18:	d005      	beq.n	8f26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    8f1a:	e011      	b.n	8f40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    8f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f20:	2001      	movs	r0, #1
    8f22:	f7ff bdeb 	b.w	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    8f26:	7c60      	ldrb	r0, [r4, #17]
    8f28:	2801      	cmp	r0, #1
    8f2a:	bf14      	ite	ne
    8f2c:	2803      	cmpne	r0, #3
    8f2e:	2510      	moveq	r5, #16
    8f30:	f045 020e 	orr.w	r2, r5, #14
    8f34:	f04f 0100 	mov.w	r1, #0
    8f38:	7923      	ldrb	r3, [r4, #4]
    8f3a:	4608      	mov	r0, r1
    8f3c:	f006 f924 	bl	f188 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8f40:	7b20      	ldrb	r0, [r4, #12]
    8f42:	2800      	cmp	r0, #0
    8f44:	bf18      	it	ne
    8f46:	f006 f9d5 	blne	f2f4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    8f4a:	2000      	movs	r0, #0
    8f4c:	f005 fd6a 	bl	ea24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    8f50:	2002      	movs	r0, #2
    8f52:	7030      	strb	r0, [r6, #0]
    8f54:	bd70      	pop	{r4, r5, r6, pc}
    8f56:	0000      	.short	0x0000
    8f58:	2000143c 	.word	0x2000143c
    8f5c:	20000110 	.word	0x20000110
    8f60:	b570      	push	{r4, r5, r6, lr}
    8f62:	4d1e      	ldr	r5, [pc, #120]	; (8fdc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f0>)
    8f64:	7b28      	ldrb	r0, [r5, #12]
    8f66:	b150      	cbz	r0, 8f7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    8f68:	f105 0021 	add.w	r0, r5, #33	; 0x21
    8f6c:	f006 f9d6 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8f70:	2800      	cmp	r0, #0
    8f72:	bf04      	itt	eq
    8f74:	207f      	moveq	r0, #127	; 0x7f
    8f76:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    8f7a:	f006 f9af 	bl	f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    8f7e:	4c18      	ldr	r4, [pc, #96]	; (8fe0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f4>)
    8f80:	7ba0      	ldrb	r0, [r4, #14]
    8f82:	b118      	cbz	r0, 8f8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    8f84:	f005 fac2 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8f88:	f005 f8c6 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8f8c:	f000 fcbe 	bl	990c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8f90:	b1a0      	cbz	r0, 8fbc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    8f92:	8868      	ldrh	r0, [r5, #2]
    8f94:	f3c0 1100 	ubfx	r1, r0, #4, #1
    8f98:	2900      	cmp	r1, #0
    8f9a:	bf04      	itt	eq
    8f9c:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    8fa0:	2800      	cmpeq	r0, #0
    8fa2:	d00b      	beq.n	8fbc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    8fa4:	7820      	ldrb	r0, [r4, #0]
    8fa6:	2802      	cmp	r0, #2
    8fa8:	bf1c      	itt	ne
    8faa:	7820      	ldrbne	r0, [r4, #0]
    8fac:	2803      	cmpne	r0, #3
    8fae:	d009      	beq.n	8fc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d8>
    8fb0:	f640 311a 	movw	r1, #2842	; 0xb1a
    8fb4:	f04f 002d 	mov.w	r0, #45	; 0x2d
    8fb8:	f7fb fe3a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fc0:	f000 ba6c 	b.w	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    8fc4:	4807      	ldr	r0, [pc, #28]	; (8fe4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f8>)
    8fc6:	7821      	ldrb	r1, [r4, #0]
    8fc8:	6880      	ldr	r0, [r0, #8]
    8fca:	68c0      	ldr	r0, [r0, #12]
    8fcc:	f06f 0207 	mvn.w	r2, #7
    8fd0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8fd4:	5840      	ldr	r0, [r0, r1]
    8fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fda:	4700      	bx	r0
    8fdc:	2000143c 	.word	0x2000143c
    8fe0:	20001504 	.word	0x20001504
    8fe4:	20000110 	.word	0x20000110

00008fe8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    8fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fec:	4ea1      	ldr	r6, [pc, #644]	; (9274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>)
    8fee:	b087      	sub	sp, #28
    8ff0:	7830      	ldrb	r0, [r6, #0]
    8ff2:	2800      	cmp	r0, #0
    8ff4:	d17d      	bne.n	90f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    8ff6:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    8ffa:	7820      	ldrb	r0, [r4, #0]
    8ffc:	28ff      	cmp	r0, #255	; 0xff
    8ffe:	d078      	beq.n	90f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    9000:	2500      	movs	r5, #0
    9002:	81b5      	strh	r5, [r6, #12]
    9004:	6075      	str	r5, [r6, #4]
    9006:	7075      	strb	r5, [r6, #1]
    9008:	70b5      	strb	r5, [r6, #2]
    900a:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    900e:	4628      	mov	r0, r5
    9010:	f005 fd9a 	bl	eb48 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    9014:	4898      	ldr	r0, [pc, #608]	; (9278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    9016:	af01      	add	r7, sp, #4
    9018:	f100 011c 	add.w	r1, r0, #28
    901c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 927c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>
    9020:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    9024:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    9028:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    902a:	9005      	str	r0, [sp, #20]
    902c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9030:	6840      	ldr	r0, [r0, #4]
    9032:	9004      	str	r0, [sp, #16]
    9034:	a801      	add	r0, sp, #4
    9036:	f005 fcb5 	bl	e9a4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    903a:	f005 fe03 	bl	ec44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    903e:	f005 fa65 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    9042:	f005 f869 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    9046:	488e      	ldr	r0, [pc, #568]	; (9280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    9048:	f006 f99e 	bl	f388 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    904c:	488d      	ldr	r0, [pc, #564]	; (9284 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    904e:	f006 f9a7 	bl	f3a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    9052:	2000      	movs	r0, #0
    9054:	f7fb fcb4 	bl	49c0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    9058:	f104 0018 	add.w	r0, r4, #24
    905c:	f009 f9a1 	bl	123a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    9060:	f104 0018 	add.w	r0, r4, #24
    9064:	f009 f92d 	bl	122c2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    9068:	f006 f9f8 	bl	f45c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    906c:	7921      	ldrb	r1, [r4, #4]
    906e:	2025      	movs	r0, #37	; 0x25
    9070:	f006 f9d0 	bl	f414 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    9074:	f994 0010 	ldrsb.w	r0, [r4, #16]
    9078:	f005 fe70 	bl	ed5c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    907c:	7921      	ldrb	r1, [r4, #4]
    907e:	2000      	movs	r0, #0
    9080:	f005 fafc 	bl	e67c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    9084:	2701      	movs	r7, #1
    9086:	60b0      	str	r0, [r6, #8]
    9088:	2800      	cmp	r0, #0
    908a:	bf08      	it	eq
    908c:	7037      	strbeq	r7, [r6, #0]
    908e:	f000 80ed 	beq.w	926c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    9092:	210f      	movs	r1, #15
    9094:	2005      	movs	r0, #5
    9096:	f005 fa77 	bl	e588 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    909a:	7d60      	ldrb	r0, [r4, #21]
    909c:	2800      	cmp	r0, #0
    909e:	bf01      	itttt	eq
    90a0:	7ce0      	ldrbeq	r0, [r4, #19]
    90a2:	2800      	cmpeq	r0, #0
    90a4:	78a0      	ldrbeq	r0, [r4, #2]
    90a6:	f010 0f04 	tsteq.w	r0, #4
    90aa:	d06b      	beq.n	9184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    90ac:	f006 fe75 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    90b0:	4681      	mov	r9, r0
    90b2:	4649      	mov	r1, r9
    90b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    90b6:	f7f9 f9d5 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    90ba:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 9288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    90be:	4682      	mov	sl, r0
    90c0:	fb90 f0fb 	sdiv	r0, r0, fp
    90c4:	fb0b a010 	mls	r0, fp, r0, sl
    90c8:	4241      	negs	r1, r0
    90ca:	4648      	mov	r0, r9
    90cc:	f7f9 f994 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    90d0:	63a0      	str	r0, [r4, #56]	; 0x38
    90d2:	fb9a f0fb 	sdiv	r0, sl, fp
    90d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    90d8:	4408      	add	r0, r1
    90da:	6360      	str	r0, [r4, #52]	; 0x34
    90dc:	f7fd feb2 	bl	6e44 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    90e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    90e2:	4288      	cmp	r0, r1
    90e4:	d86a      	bhi.n	91bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    90e6:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    90ea:	f04f 0901 	mov.w	r9, #1
    90ee:	7d20      	ldrb	r0, [r4, #20]
    90f0:	e000      	b.n	90f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    90f2:	e01a      	b.n	912a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    90f4:	f7fd fca8 	bl	6a48 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    90f8:	4682      	mov	sl, r0
    90fa:	7ce0      	ldrb	r0, [r4, #19]
    90fc:	2800      	cmp	r0, #0
    90fe:	bf18      	it	ne
    9100:	f1ba 0f00 	cmpne.w	sl, #0
    9104:	d003      	beq.n	910e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x126>
    9106:	7d20      	ldrb	r0, [r4, #20]
    9108:	f7fd fc92 	bl	6a30 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    910c:	b188      	cbz	r0, 9132 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14a>
    910e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    9112:	2800      	cmp	r0, #0
    9114:	bf1c      	itt	ne
    9116:	7d60      	ldrbne	r0, [r4, #21]
    9118:	2800      	cmpne	r0, #0
    911a:	d022      	beq.n	9162 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    911c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    9120:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    9124:	2801      	cmp	r0, #1
    9126:	d012      	beq.n	914e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    9128:	e016      	b.n	9158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    912a:	b007      	add	sp, #28
    912c:	200c      	movs	r0, #12
    912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9132:	463a      	mov	r2, r7
    9134:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    9138:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    913c:	4650      	mov	r0, sl
    913e:	f008 f8fd 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9142:	7d21      	ldrb	r1, [r4, #20]
    9144:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    9148:	f7fd fc8a 	bl	6a60 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    914c:	e009      	b.n	9162 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    914e:	7948      	ldrb	r0, [r1, #5]
    9150:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    9154:	2840      	cmp	r0, #64	; 0x40
    9156:	d016      	beq.n	9186 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    9158:	4649      	mov	r1, r9
    915a:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    915e:	f008 f8dd 	bl	1131c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    9162:	78a0      	ldrb	r0, [r4, #2]
    9164:	f010 0f04 	tst.w	r0, #4
    9168:	bf1c      	itt	ne
    916a:	7ce0      	ldrbne	r0, [r4, #19]
    916c:	2800      	cmpne	r0, #0
    916e:	d025      	beq.n	91bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    9170:	7d20      	ldrb	r0, [r4, #20]
    9172:	f7fd fcc7 	bl	6b04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    9176:	ea5f 0900 	movs.w	r9, r0
    917a:	d01f      	beq.n	91bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    917c:	2110      	movs	r1, #16
    917e:	f7fe fb55 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    9182:	b140      	cbz	r0, 9196 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    9184:	e01a      	b.n	91bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    9186:	f7fd fc4f 	bl	6a28 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    918a:	463a      	mov	r2, r7
    918c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    9190:	f008 f8d4 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9194:	e7e5      	b.n	9162 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    9196:	463a      	mov	r2, r7
    9198:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    919c:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    91a0:	4648      	mov	r0, r9
    91a2:	f008 f8cb 	bl	1133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    91a6:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    91aa:	f8d8 0000 	ldr.w	r0, [r8]
    91ae:	f008 fd37 	bl	11c20 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    91b2:	2101      	movs	r1, #1
    91b4:	f8d8 0000 	ldr.w	r0, [r8]
    91b8:	f008 fd39 	bl	11c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    91bc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    91c0:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    91c4:	f006 f8d4 	bl	f370 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    91c8:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    91cc:	b340      	cbz	r0, 9220 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    91ce:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    91d2:	8620      	strh	r0, [r4, #48]	; 0x30
    91d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91d6:	62a0      	str	r0, [r4, #40]	; 0x28
    91d8:	78a0      	ldrb	r0, [r4, #2]
    91da:	f3c0 1000 	ubfx	r0, r0, #4, #1
    91de:	b9e8      	cbnz	r0, 921c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x234>
    91e0:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    91e4:	2102      	movs	r1, #2
    91e6:	f3c0 070b 	ubfx	r7, r0, #0, #12
    91ea:	f8ad 7000 	strh.w	r7, [sp]
    91ee:	4668      	mov	r0, sp
    91f0:	f7fc fb74 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    91f4:	b128      	cbz	r0, 9202 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x21a>
    91f6:	f8bd 0000 	ldrh.w	r0, [sp]
    91fa:	f3c0 000b 	ubfx	r0, r0, #0, #12
    91fe:	42b8      	cmp	r0, r7
    9200:	d104      	bne.n	920c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x224>
    9202:	f8bd 0000 	ldrh.w	r0, [sp]
    9206:	1c40      	adds	r0, r0, #1
    9208:	f8ad 0000 	strh.w	r0, [sp]
    920c:	f8bd 0000 	ldrh.w	r0, [sp]
    9210:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    9214:	f360 010b 	bfi	r1, r0, #0, #12
    9218:	f8a4 101f 	strh.w	r1, [r4, #31]
    921c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9220:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    9224:	b130      	cbz	r0, 9234 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    9226:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    922a:	8660      	strh	r0, [r4, #50]	; 0x32
    922c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    922e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9230:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9234:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    9238:	6a61      	ldr	r1, [r4, #36]	; 0x24
    923a:	f3c0 000b 	ubfx	r0, r0, #0, #12
    923e:	fa50 f081 	uxtab	r0, r0, r1
    9242:	7fa1      	ldrb	r1, [r4, #30]
    9244:	4b11      	ldr	r3, [pc, #68]	; (928c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    9246:	4408      	add	r0, r1
    9248:	461a      	mov	r2, r3
    924a:	2100      	movs	r1, #0
    924c:	fbe0 2103 	umlal	r2, r1, r0, r3
    9250:	0909      	lsrs	r1, r1, #4
    9252:	f06f 0224 	mvn.w	r2, #36	; 0x24
    9256:	fb01 0002 	mla	r0, r1, r2, r0
    925a:	77a0      	strb	r0, [r4, #30]
    925c:	f7fd feb4 	bl	6fc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    9260:	2103      	movs	r1, #3
    9262:	f8d8 0000 	ldr.w	r0, [r8]
    9266:	f7fd fbcb 	bl	6a00 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    926a:	73b0      	strb	r0, [r6, #14]
    926c:	b007      	add	sp, #28
    926e:	2000      	movs	r0, #0
    9270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9274:	20001504 	.word	0x20001504
    9278:	00009804 	.word	0x00009804
    927c:	20000110 	.word	0x20000110
    9280:	0000980c 	.word	0x0000980c
    9284:	00009809 	.word	0x00009809
    9288:	000f4240 	.word	0x000f4240
    928c:	6eb3e453 	.word	0x6eb3e453
    9290:	b570      	push	{r4, r5, r6, lr}
    9292:	4d1b      	ldr	r5, [pc, #108]	; (9300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>)
    9294:	7828      	ldrb	r0, [r5, #0]
    9296:	2800      	cmp	r0, #0
    9298:	bf08      	it	eq
    929a:	bd70      	popeq	{r4, r5, r6, pc}
    929c:	7828      	ldrb	r0, [r5, #0]
    929e:	4c19      	ldr	r4, [pc, #100]	; (9304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>)
    92a0:	2802      	cmp	r0, #2
    92a2:	bf1c      	itt	ne
    92a4:	7828      	ldrbne	r0, [r5, #0]
    92a6:	2803      	cmpne	r0, #3
    92a8:	d112      	bne.n	92d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    92aa:	7b20      	ldrb	r0, [r4, #12]
    92ac:	b150      	cbz	r0, 92c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    92ae:	f104 0021 	add.w	r0, r4, #33	; 0x21
    92b2:	f006 f833 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    92b6:	2800      	cmp	r0, #0
    92b8:	bf04      	itt	eq
    92ba:	207f      	moveq	r0, #127	; 0x7f
    92bc:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    92c0:	f006 f80c 	bl	f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    92c4:	7ba8      	ldrb	r0, [r5, #14]
    92c6:	b118      	cbz	r0, 92d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    92c8:	f005 f920 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    92cc:	f004 ff24 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    92d0:	f7fb fb62 	bl	4998 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    92d4:	f000 fb1a 	bl	990c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    92d8:	b168      	cbz	r0, 92f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    92da:	78a0      	ldrb	r0, [r4, #2]
    92dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    92e0:	b920      	cbnz	r0, 92ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    92e2:	f104 0018 	add.w	r0, r4, #24
    92e6:	f009 f831 	bl	1234c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    92ea:	b120      	cbz	r0, 92f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    92ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92f0:	2001      	movs	r0, #1
    92f2:	f7ff bc03 	b.w	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    92f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92fa:	f000 b8cf 	b.w	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    92fe:	0000      	.short	0x0000
    9300:	20001504 	.word	0x20001504
    9304:	2000143c 	.word	0x2000143c
    9308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    930c:	4b19      	ldr	r3, [pc, #100]	; (9374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>)
    930e:	2600      	movs	r6, #0
    9310:	2701      	movs	r7, #1
    9312:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    9316:	781c      	ldrb	r4, [r3, #0]
    9318:	f893 c00d 	ldrb.w	ip, [r3, #13]
    931c:	b1b8      	cbz	r0, 934e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    931e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    9322:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    9326:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    932a:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    932e:	f1bc 0f00 	cmp.w	ip, #0
    9332:	bf0c      	ite	eq
    9334:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    9338:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    933c:	480e      	ldr	r0, [pc, #56]	; (9378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>)
    933e:	6840      	ldr	r0, [r0, #4]
    9340:	8800      	ldrh	r0, [r0, #0]
    9342:	f7fc f889 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    934a:	f007 bdf5 	b.w	10f38 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    934e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9352:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    9356:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    935a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    935e:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    9362:	f1bc 0f00 	cmp.w	ip, #0
    9366:	bf14      	ite	ne
    9368:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    936c:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    9370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9374:	2000143c 	.word	0x2000143c
    9378:	20000110 	.word	0x20000110
    937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9380:	4c43      	ldr	r4, [pc, #268]	; (9490 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>)
    9382:	4680      	mov	r8, r0
    9384:	460f      	mov	r7, r1
    9386:	8860      	ldrh	r0, [r4, #2]
    9388:	f1b8 0f03 	cmp.w	r8, #3
    938c:	bf08      	it	eq
    938e:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    9392:	d008      	beq.n	93a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    9394:	f000 0501 	and.w	r5, r0, #1
    9398:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    939c:	2800      	cmp	r0, #0
    939e:	bf18      	it	ne
    93a0:	f04f 0901 	movne.w	r9, #1
    93a4:	d101      	bne.n	93aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    93a6:	f04f 0900 	mov.w	r9, #0
    93aa:	f005 f8e7 	bl	e57c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    93ae:	4606      	mov	r6, r0
    93b0:	f1b8 0f03 	cmp.w	r8, #3
    93b4:	bf0c      	ite	eq
    93b6:	f04f 0802 	moveq.w	r8, #2
    93ba:	f04f 0801 	movne.w	r8, #1
    93be:	ea35 0009 	bics.w	r0, r5, r9
    93c2:	bf08      	it	eq
    93c4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    93c8:	4832      	ldr	r0, [pc, #200]	; (9494 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>)
    93ca:	7b80      	ldrb	r0, [r0, #14]
    93cc:	b138      	cbz	r0, 93de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    93ce:	f007 ffed 	bl	113ac <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    93d2:	7038      	strb	r0, [r7, #0]
    93d4:	28ff      	cmp	r0, #255	; 0xff
    93d6:	d002      	beq.n	93de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    93d8:	f7fd fbe0 	bl	6b9c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    93dc:	4306      	orrs	r6, r0
    93de:	4d2e      	ldr	r5, [pc, #184]	; (9498 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>)
    93e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    93e4:	6828      	ldr	r0, [r5, #0]
    93e6:	7801      	ldrb	r1, [r0, #0]
    93e8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    93ec:	4291      	cmp	r1, r2
    93ee:	d109      	bne.n	9404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    93f0:	2206      	movs	r2, #6
    93f2:	f104 0144 	add.w	r1, r4, #68	; 0x44
    93f6:	1cc0      	adds	r0, r0, #3
    93f8:	f006 fe32 	bl	10060 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    93fc:	2800      	cmp	r0, #0
    93fe:	bf08      	it	eq
    9400:	2001      	moveq	r0, #1
    9402:	d000      	beq.n	9406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41e>
    9404:	2000      	movs	r0, #0
    9406:	7839      	ldrb	r1, [r7, #0]
    9408:	29ff      	cmp	r1, #255	; 0xff
    940a:	d004      	beq.n	9416 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    940c:	b9b8      	cbnz	r0, 943e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    940e:	7d20      	ldrb	r0, [r4, #20]
    9410:	4288      	cmp	r0, r1
    9412:	d116      	bne.n	9442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    9414:	e013      	b.n	943e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    9416:	b1a0      	cbz	r0, 9442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    9418:	6829      	ldr	r1, [r5, #0]
    941a:	f811 0b03 	ldrb.w	r0, [r1], #3
    941e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9422:	f7fd fbcd 	bl	6bc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9426:	4607      	mov	r7, r0
    9428:	f7fd fd20 	bl	6e6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    942c:	b138      	cbz	r0, 943e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    942e:	4638      	mov	r0, r7
    9430:	f7fd fb68 	bl	6b04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    9434:	b118      	cbz	r0, 943e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    9436:	2110      	movs	r1, #16
    9438:	f7fe f9f8 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    943c:	b108      	cbz	r0, 9442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    943e:	2001      	movs	r0, #1
    9440:	e000      	b.n	9444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    9442:	2000      	movs	r0, #0
    9444:	78a1      	ldrb	r1, [r4, #2]
    9446:	f011 0f04 	tst.w	r1, #4
    944a:	d001      	beq.n	9450 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x468>
    944c:	b1e0      	cbz	r0, 9488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    944e:	e018      	b.n	9482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    9450:	b9be      	cbnz	r6, 9482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    9452:	7c60      	ldrb	r0, [r4, #17]
    9454:	2800      	cmp	r0, #0
    9456:	bf18      	it	ne
    9458:	4540      	cmpne	r0, r8
    945a:	d115      	bne.n	9488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    945c:	6829      	ldr	r1, [r5, #0]
    945e:	f811 0b03 	ldrb.w	r0, [r1], #3
    9462:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9466:	f7fd fbab 	bl	6bc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    946a:	4604      	mov	r4, r0
    946c:	f7fd fcfe 	bl	6e6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    9470:	b138      	cbz	r0, 9482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    9472:	4620      	mov	r0, r4
    9474:	f7fd fb46 	bl	6b04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    9478:	b118      	cbz	r0, 9482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    947a:	2110      	movs	r1, #16
    947c:	f7fe f9d6 	bl	782c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    9480:	b110      	cbz	r0, 9488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    9482:	2001      	movs	r0, #1
    9484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9488:	2000      	movs	r0, #0
    948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    948e:	0000      	.short	0x0000
    9490:	2000143c 	.word	0x2000143c
    9494:	20001504 	.word	0x20001504
    9498:	20000110 	.word	0x20000110
    949c:	b570      	push	{r4, r5, r6, lr}
    949e:	4c1c      	ldr	r4, [pc, #112]	; (9510 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x528>)
    94a0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    94a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    94a6:	1c40      	adds	r0, r0, #1
    94a8:	6260      	str	r0, [r4, #36]	; 0x24
    94aa:	7ba8      	ldrb	r0, [r5, #14]
    94ac:	2600      	movs	r6, #0
    94ae:	b120      	cbz	r0, 94ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    94b0:	f005 f82c 	bl	e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    94b4:	f004 fe30 	bl	e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    94b8:	73ae      	strb	r6, [r5, #14]
    94ba:	702e      	strb	r6, [r5, #0]
    94bc:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    94c0:	b120      	cbz	r0, 94cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e4>
    94c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94c6:	2001      	movs	r0, #1
    94c8:	f000 ba58 	b.w	997c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    94cc:	7b60      	ldrb	r0, [r4, #13]
    94ce:	b1d0      	cbz	r0, 9506 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    94d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    94d2:	4288      	cmp	r0, r1
    94d4:	d817      	bhi.n	9506 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    94d6:	2001      	movs	r0, #1
    94d8:	f000 fa50 	bl	997c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    94dc:	78a0      	ldrb	r0, [r4, #2]
    94de:	f010 0f01 	tst.w	r0, #1
    94e2:	d008      	beq.n	94f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    94e4:	480b      	ldr	r0, [pc, #44]	; (9514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>)
    94e6:	2243      	movs	r2, #67	; 0x43
    94e8:	6840      	ldr	r0, [r0, #4]
    94ea:	8801      	ldrh	r1, [r0, #0]
    94ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94f0:	2001      	movs	r0, #1
    94f2:	f7ff bf09 	b.w	9308 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    94f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94fa:	2243      	movs	r2, #67	; 0x43
    94fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9500:	2000      	movs	r0, #0
    9502:	f7ff bf01 	b.w	9308 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    9506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    950a:	2000      	movs	r0, #0
    950c:	f000 ba36 	b.w	997c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9510:	2000143c 	.word	0x2000143c
    9514:	20000110 	.word	0x20000110
    9518:	b570      	push	{r4, r5, r6, lr}
    951a:	4c3a      	ldr	r4, [pc, #232]	; (9604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>)
    951c:	4605      	mov	r5, r0
    951e:	460e      	mov	r6, r1
    9520:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    9524:	b120      	cbz	r0, 9530 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x548>
    9526:	f640 314e 	movw	r1, #2894	; 0xb4e
    952a:	202d      	movs	r0, #45	; 0x2d
    952c:	f7fb fb80 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9530:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    9534:	8828      	ldrh	r0, [r5, #0]
    9536:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    953a:	2a00      	cmp	r2, #0
    953c:	bf18      	it	ne
    953e:	bd70      	popne	{r4, r5, r6, pc}
    9540:	6868      	ldr	r0, [r5, #4]
    9542:	f007 ff6d 	bl	11420 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9546:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    954a:	8928      	ldrh	r0, [r5, #8]
    954c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    9550:	8968      	ldrh	r0, [r5, #10]
    9552:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    9556:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    955a:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    955e:	7ce0      	ldrb	r0, [r4, #19]
    9560:	2500      	movs	r5, #0
    9562:	b150      	cbz	r0, 957a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x592>
    9564:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    9568:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    956c:	2901      	cmp	r1, #1
    956e:	d104      	bne.n	957a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x592>
    9570:	7940      	ldrb	r0, [r0, #5]
    9572:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    9576:	2840      	cmp	r0, #64	; 0x40
    9578:	d02d      	beq.n	95d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ee>
    957a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    957e:	b148      	cbz	r0, 9594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ac>
    9580:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    9584:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    9588:	2901      	cmp	r1, #1
    958a:	bf04      	itt	eq
    958c:	7940      	ldrbeq	r0, [r0, #5]
    958e:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    9592:	d020      	beq.n	95d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ee>
    9594:	481c      	ldr	r0, [pc, #112]	; (9608 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>)
    9596:	f00a f90f 	bl	137b8 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    959a:	481c      	ldr	r0, [pc, #112]	; (960c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>)
    959c:	2eff      	cmp	r6, #255	; 0xff
    959e:	6800      	ldr	r0, [r0, #0]
    95a0:	7801      	ldrb	r1, [r0, #0]
    95a2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    95a6:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    95aa:	f8d0 1003 	ldr.w	r1, [r0, #3]
    95ae:	d020      	beq.n	95f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x60a>
    95b0:	67e1      	str	r1, [r4, #124]	; 0x7c
    95b2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    95b6:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    95ba:	f104 0270 	add.w	r2, r4, #112	; 0x70
    95be:	1e51      	subs	r1, r2, #1
    95c0:	4630      	mov	r0, r6
    95c2:	f7fd fad1 	bl	6b68 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    95c6:	b178      	cbz	r0, 95e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    95c8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    95cc:	f040 0002 	orr.w	r0, r0, #2
    95d0:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    95d4:	bd70      	pop	{r4, r5, r6, pc}
    95d6:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    95da:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    95de:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    95e2:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    95e6:	e7d8      	b.n	959a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b2>
    95e8:	f640 316f 	movw	r1, #2927	; 0xb6f
    95ec:	202d      	movs	r0, #45	; 0x2d
    95ee:	f7fb fb1f 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95f2:	6721      	str	r1, [r4, #112]	; 0x70
    95f4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    95f8:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    95fc:	67e5      	str	r5, [r4, #124]	; 0x7c
    95fe:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    9602:	bd70      	pop	{r4, r5, r6, pc}
    9604:	2000143c 	.word	0x2000143c
    9608:	200014b2 	.word	0x200014b2
    960c:	20000110 	.word	0x20000110
    9610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9614:	b083      	sub	sp, #12
    9616:	4c30      	ldr	r4, [pc, #192]	; (96d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>)
    9618:	20ff      	movs	r0, #255	; 0xff
    961a:	f88d 0000 	strb.w	r0, [sp]
    961e:	6820      	ldr	r0, [r4, #0]
    9620:	2701      	movs	r7, #1
    9622:	7801      	ldrb	r1, [r0, #0]
    9624:	f3c1 1680 	ubfx	r6, r1, #6, #1
    9628:	f8d0 1003 	ldr.w	r1, [r0, #3]
    962c:	9101      	str	r1, [sp, #4]
    962e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    9632:	f8ad 0008 	strh.w	r0, [sp, #8]
    9636:	4669      	mov	r1, sp
    9638:	2005      	movs	r0, #5
    963a:	f7ff fe9f 	bl	937c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    963e:	2800      	cmp	r0, #0
    9640:	d043      	beq.n	96ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e2>
    9642:	4d26      	ldr	r5, [pc, #152]	; (96dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f4>)
    9644:	6860      	ldr	r0, [r4, #4]
    9646:	7969      	ldrb	r1, [r5, #5]
    9648:	f000 f886 	bl	9758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x770>
    964c:	2200      	movs	r2, #0
    964e:	f89d 1000 	ldrb.w	r1, [sp]
    9652:	6860      	ldr	r0, [r4, #4]
    9654:	f7ff ff60 	bl	9518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    9658:	2106      	movs	r1, #6
    965a:	6860      	ldr	r0, [r4, #4]
    965c:	f000 fba2 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9660:	481f      	ldr	r0, [pc, #124]	; (96e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f8>)
    9662:	2100      	movs	r1, #0
    9664:	f10d 0804 	add.w	r8, sp, #4
    9668:	f8d0 9000 	ldr.w	r9, [r0]
    966c:	6820      	ldr	r0, [r4, #0]
    966e:	8001      	strh	r1, [r0, #0]
    9670:	2108      	movs	r1, #8
    9672:	f008 fab3 	bl	11bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    9676:	2100      	movs	r1, #0
    9678:	6820      	ldr	r0, [r4, #0]
    967a:	f008 fa4e 	bl	11b1a <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    967e:	4649      	mov	r1, r9
    9680:	6820      	ldr	r0, [r4, #0]
    9682:	f008 fa7d 	bl	11b80 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    9686:	2306      	movs	r3, #6
    9688:	2200      	movs	r2, #0
    968a:	f105 013d 	add.w	r1, r5, #61	; 0x3d
    968e:	6820      	ldr	r0, [r4, #0]
    9690:	f008 fa5c 	bl	11b4c <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    9694:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
    9698:	6820      	ldr	r0, [r4, #0]
    969a:	f008 fad8 	bl	11c4e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    969e:	4631      	mov	r1, r6
    96a0:	6820      	ldr	r0, [r4, #0]
    96a2:	f008 fac4 	bl	11c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    96a6:	2306      	movs	r3, #6
    96a8:	2201      	movs	r2, #1
    96aa:	4641      	mov	r1, r8
    96ac:	6820      	ldr	r0, [r4, #0]
    96ae:	f008 fa4d 	bl	11b4c <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    96b2:	7969      	ldrb	r1, [r5, #5]
    96b4:	20ff      	movs	r0, #255	; 0xff
    96b6:	f005 fead 	bl	f414 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    96ba:	6820      	ldr	r0, [r4, #0]
    96bc:	f005 fb54 	bl	ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    96c0:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
    96c4:	2009      	movs	r0, #9
    96c6:	7008      	strb	r0, [r1, #0]
    96c8:	e001      	b.n	96ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e6>
    96ca:	f7ff fee7 	bl	949c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    96ce:	b003      	add	sp, #12
    96d0:	4638      	mov	r0, r7
    96d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    96d6:	0000      	.short	0x0000
    96d8:	20000110 	.word	0x20000110
    96dc:	2000143c 	.word	0x2000143c
    96e0:	00009804 	.word	0x00009804
    96e4:	b538      	push	{r3, r4, r5, lr}
    96e6:	20ff      	movs	r0, #255	; 0xff
    96e8:	f88d 0000 	strb.w	r0, [sp]
    96ec:	2501      	movs	r5, #1
    96ee:	4669      	mov	r1, sp
    96f0:	2005      	movs	r0, #5
    96f2:	f7ff fe43 	bl	937c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    96f6:	2800      	cmp	r0, #0
    96f8:	bf08      	it	eq
    96fa:	2500      	moveq	r5, #0
    96fc:	d023      	beq.n	9746 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x75e>
    96fe:	4c13      	ldr	r4, [pc, #76]	; (974c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>)
    9700:	6822      	ldr	r2, [r4, #0]
    9702:	6860      	ldr	r0, [r4, #4]
    9704:	7812      	ldrb	r2, [r2, #0]
    9706:	7c41      	ldrb	r1, [r0, #17]
    9708:	f3c2 1240 	ubfx	r2, r2, #5, #1
    970c:	4011      	ands	r1, r2
    970e:	7441      	strb	r1, [r0, #17]
    9710:	2101      	movs	r1, #1
    9712:	f000 f821 	bl	9758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x770>
    9716:	2200      	movs	r2, #0
    9718:	f89d 1000 	ldrb.w	r1, [sp]
    971c:	6860      	ldr	r0, [r4, #4]
    971e:	f7ff fefb 	bl	9518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    9722:	480b      	ldr	r0, [pc, #44]	; (9750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    9724:	2101      	movs	r1, #1
    9726:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    972a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    972e:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    9732:	2001      	movs	r0, #1
    9734:	f7ff fde8 	bl	9308 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    9738:	4906      	ldr	r1, [pc, #24]	; (9754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    973a:	2000      	movs	r0, #0
    973c:	7008      	strb	r0, [r1, #0]
    973e:	2105      	movs	r1, #5
    9740:	6860      	ldr	r0, [r4, #4]
    9742:	f000 fb2f 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9746:	4628      	mov	r0, r5
    9748:	bd38      	pop	{r3, r4, r5, pc}
    974a:	0000      	.short	0x0000
    974c:	20000110 	.word	0x20000110
    9750:	2000143c 	.word	0x2000143c
    9754:	20001504 	.word	0x20001504
    9758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    975c:	4e27      	ldr	r6, [pc, #156]	; (97fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x814>)
    975e:	4604      	mov	r4, r0
    9760:	460d      	mov	r5, r1
    9762:	6830      	ldr	r0, [r6, #0]
    9764:	f8d0 100f 	ldr.w	r1, [r0, #15]
    9768:	f8c4 1012 	str.w	r1, [r4, #18]
    976c:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    9770:	82e1      	strh	r1, [r4, #22]
    9772:	7d41      	ldrb	r1, [r0, #21]
    9774:	7621      	strb	r1, [r4, #24]
    9776:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    977a:	f007 fe45 	bl	11408 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    977e:	4607      	mov	r7, r0
    9780:	6060      	str	r0, [r4, #4]
    9782:	6830      	ldr	r0, [r6, #0]
    9784:	4639      	mov	r1, r7
    9786:	7d80      	ldrb	r0, [r0, #22]
    9788:	f008 f862 	bl	11850 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    978c:	8360      	strh	r0, [r4, #26]
    978e:	6830      	ldr	r0, [r6, #0]
    9790:	4639      	mov	r1, r7
    9792:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    9796:	f008 f852 	bl	1183e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    979a:	61e0      	str	r0, [r4, #28]
    979c:	6830      	ldr	r0, [r6, #0]
    979e:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    97a2:	8121      	strh	r1, [r4, #8]
    97a4:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    97a8:	8161      	strh	r1, [r4, #10]
    97aa:	f100 011f 	add.w	r1, r0, #31
    97ae:	f104 000c 	add.w	r0, r4, #12
    97b2:	f009 fffc 	bl	137ae <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    97b6:	6830      	ldr	r0, [r6, #0]
    97b8:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    97bc:	f001 011f 	and.w	r1, r1, #31
    97c0:	f884 1020 	strb.w	r1, [r4, #32]
    97c4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    97c8:	0940      	lsrs	r0, r0, #5
    97ca:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    97ce:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    97d2:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    97d6:	2101      	movs	r1, #1
    97d8:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    97dc:	f015 0f0c 	tst.w	r5, #12
    97e0:	bf14      	ite	ne
    97e2:	2101      	movne	r1, #1
    97e4:	2100      	moveq	r1, #0
    97e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    97ea:	f008 fb39 	bl	11e60 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    97ee:	4804      	ldr	r0, [pc, #16]	; (9800 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x818>)
    97f0:	7c00      	ldrb	r0, [r0, #16]
    97f2:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    97f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97fa:	0000      	.short	0x0000
    97fc:	20000110 	.word	0x20000110
    9800:	2000143c 	.word	0x2000143c
    9804:	00000003 	.word	0x00000003
    9808:	55555501 	.word	0x55555501
    980c:	8e89bed6 	.word	0x8e89bed6
    9810:	20001454 	.word	0x20001454
	...
    9820:	00008f61 	.word	0x00008f61
    9824:	00008cad 	.word	0x00008cad
    9828:	00008eb1 	.word	0x00008eb1
    982c:	00000000 	.word	0x00000000
    9830:	00009cfd 	.word	0x00009cfd
    9834:	00008db5 	.word	0x00008db5
    9838:	00008eed 	.word	0x00008eed
    983c:	00011ee7 	.word	0x00011ee7
    9840:	00011eed 	.word	0x00011eed
    9844:	00011ef3 	.word	0x00011ef3
    9848:	00009291 	.word	0x00009291
    984c:	0001226f 	.word	0x0001226f
    9850:	00009840 	.word	0x00009840
    9854:	00009838 	.word	0x00009838
    9858:	00009834 	.word	0x00009834

0000985c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    985c:	b510      	push	{r4, lr}
    985e:	1e42      	subs	r2, r0, #1
    9860:	2a02      	cmp	r2, #2
    9862:	d903      	bls.n	986c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    9864:	21ca      	movs	r1, #202	; 0xca
    9866:	202f      	movs	r0, #47	; 0x2f
    9868:	f7fb f9e2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    986c:	1e40      	subs	r0, r0, #1
    986e:	2910      	cmp	r1, #16
    9870:	bf02      	ittt	eq
    9872:	490a      	ldreq	r1, [pc, #40]	; (989c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    9874:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    9878:	bd10      	popeq	{r4, pc}
    987a:	2912      	cmp	r1, #18
    987c:	bf14      	ite	ne
    987e:	2913      	cmpne	r1, #19
    9880:	4907      	ldreq	r1, [pc, #28]	; (98a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    9882:	d007      	beq.n	9894 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    9884:	2915      	cmp	r1, #21
    9886:	bf08      	it	eq
    9888:	4906      	ldreq	r1, [pc, #24]	; (98a4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    988a:	d003      	beq.n	9894 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    988c:	21d8      	movs	r1, #216	; 0xd8
    988e:	202f      	movs	r0, #47	; 0x2f
    9890:	f7fb f9ce 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9894:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    9898:	bd10      	pop	{r4, pc}
    989a:	0000      	.short	0x0000
    989c:	000123cc 	.word	0x000123cc
    98a0:	000123c6 	.word	0x000123c6
    98a4:	000123d2 	.word	0x000123d2

000098a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    98a8:	1e42      	subs	r2, r0, #1
    98aa:	b510      	push	{r4, lr}
    98ac:	b2d2      	uxtb	r2, r2
    98ae:	2a01      	cmp	r2, #1
    98b0:	d905      	bls.n	98be <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    98b2:	291d      	cmp	r1, #29
    98b4:	d01e      	beq.n	98f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    98b6:	21ee      	movs	r1, #238	; 0xee
    98b8:	202f      	movs	r0, #47	; 0x2f
    98ba:	f7fb f9b9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98be:	2913      	cmp	r1, #19
    98c0:	d014      	beq.n	98ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    98c2:	dc08      	bgt.n	98d6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    98c4:	2910      	cmp	r1, #16
    98c6:	bf02      	ittt	eq
    98c8:	480d      	ldreq	r0, [pc, #52]	; (9900 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    98ca:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    98ce:	bd10      	popeq	{r4, pc}
    98d0:	2912      	cmp	r1, #18
    98d2:	d00b      	beq.n	98ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    98d4:	e005      	b.n	98e2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    98d6:	2915      	cmp	r1, #21
    98d8:	bf08      	it	eq
    98da:	480a      	ldreq	r0, [pc, #40]	; (9904 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    98dc:	d007      	beq.n	98ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    98de:	291d      	cmp	r1, #29
    98e0:	d008      	beq.n	98f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    98e2:	f44f 7181 	mov.w	r1, #258	; 0x102
    98e6:	202f      	movs	r0, #47	; 0x2f
    98e8:	f7fb f9a2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ec:	4806      	ldr	r0, [pc, #24]	; (9908 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    98ee:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    98f2:	bd10      	pop	{r4, pc}
    98f4:	f240 315a 	movw	r1, #858	; 0x35a
    98f8:	fb10 f001 	smulbb	r0, r0, r1
    98fc:	bd10      	pop	{r4, pc}
    98fe:	0000      	.short	0x0000
    9900:	000123ba 	.word	0x000123ba
    9904:	000123c2 	.word	0x000123c2
    9908:	000123be 	.word	0x000123be

0000990c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    990c:	b570      	push	{r4, r5, r6, lr}
    990e:	4c1a      	ldr	r4, [pc, #104]	; (9978 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    9910:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    9914:	2800      	cmp	r0, #0
    9916:	bf1c      	itt	ne
    9918:	2000      	movne	r0, #0
    991a:	bd70      	popne	{r4, r5, r6, pc}
    991c:	7a20      	ldrb	r0, [r4, #8]
    991e:	b138      	cbz	r0, 9930 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    9920:	68e1      	ldr	r1, [r4, #12]
    9922:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9924:	4288      	cmp	r0, r1
    9926:	d903      	bls.n	9930 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    9928:	f7ff f8ba 	bl	8aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    992c:	2000      	movs	r0, #0
    992e:	bd70      	pop	{r4, r5, r6, pc}
    9930:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9932:	b1f8      	cbz	r0, 9974 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    9934:	f7fe fdda 	bl	84ec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9938:	4605      	mov	r5, r0
    993a:	f7fe fe1f 	bl	857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    993e:	f200 100d 	addw	r0, r0, #269	; 0x10d
    9942:	4428      	add	r0, r5
    9944:	f242 7110 	movw	r1, #10000	; 0x2710
    9948:	1846      	adds	r6, r0, r1
    994a:	f006 fa26 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    994e:	4605      	mov	r5, r0
    9950:	4629      	mov	r1, r5
    9952:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9954:	f7f8 fd86 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9958:	6325      	str	r5, [r4, #48]	; 0x30
    995a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    995c:	1982      	adds	r2, r0, r6
    995e:	4291      	cmp	r1, r2
    9960:	bf24      	itt	cs
    9962:	1a08      	subcs	r0, r1, r0
    9964:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    9966:	d205      	bcs.n	9974 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    9968:	2001      	movs	r0, #1
    996a:	62e0      	str	r0, [r4, #44]	; 0x2c
    996c:	f7ff f898 	bl	8aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9970:	2000      	movs	r0, #0
    9972:	bd70      	pop	{r4, r5, r6, pc}
    9974:	2001      	movs	r0, #1
    9976:	bd70      	pop	{r4, r5, r6, pc}
    9978:	20001514 	.word	0x20001514

0000997c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    997e:	4f25      	ldr	r7, [pc, #148]	; (9a14 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    9980:	4c25      	ldr	r4, [pc, #148]	; (9a18 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    9982:	2500      	movs	r5, #0
    9984:	b130      	cbz	r0, 9994 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    9986:	2801      	cmp	r0, #1
    9988:	d039      	beq.n	99fe <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    998a:	f240 7157 	movw	r1, #1879	; 0x757
    998e:	2030      	movs	r0, #48	; 0x30
    9990:	f7fb f94e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9994:	7860      	ldrb	r0, [r4, #1]
    9996:	2600      	movs	r6, #0
    9998:	b160      	cbz	r0, 99b4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    999a:	2101      	movs	r1, #1
    999c:	4668      	mov	r0, sp
    999e:	f7fb ff9d 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    99a2:	f89d 0000 	ldrb.w	r0, [sp]
    99a6:	f242 7110 	movw	r1, #10000	; 0x2710
    99aa:	0200      	lsls	r0, r0, #8
    99ac:	fbb0 f2f1 	udiv	r2, r0, r1
    99b0:	fb01 0612 	mls	r6, r1, r2, r0
    99b4:	f7fe fd9a 	bl	84ec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    99b8:	1981      	adds	r1, r0, r6
    99ba:	6a20      	ldr	r0, [r4, #32]
    99bc:	f7f8 fd1c 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    99c0:	6220      	str	r0, [r4, #32]
    99c2:	7525      	strb	r5, [r4, #20]
    99c4:	77e5      	strb	r5, [r4, #31]
    99c6:	2003      	movs	r0, #3
    99c8:	77a0      	strb	r0, [r4, #30]
    99ca:	2064      	movs	r0, #100	; 0x64
    99cc:	83a0      	strh	r0, [r4, #28]
    99ce:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    99d2:	b928      	cbnz	r0, 99e0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    99d4:	7820      	ldrb	r0, [r4, #0]
    99d6:	f104 0114 	add.w	r1, r4, #20
    99da:	f7f8 fe59 	bl	2690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    99de:	b148      	cbz	r0, 99f4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    99e0:	84a5      	strh	r5, [r4, #36]	; 0x24
    99e2:	f005 f8f9 	bl	ebd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    99e6:	f7f9 fcc1 	bl	336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    99ea:	7978      	ldrb	r0, [r7, #5]
    99ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    99f0:	f7fa bf0c 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    99f4:	f240 61c6 	movw	r1, #1734	; 0x6c6
    99f8:	2030      	movs	r0, #48	; 0x30
    99fa:	f7fb f919 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99fe:	7225      	strb	r5, [r4, #8]
    9a00:	f005 f8ea 	bl	ebd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9a04:	f7f9 fcb2 	bl	336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9a08:	7978      	ldrb	r0, [r7, #5]
    9a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9a0e:	f7fa befd 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a12:	0000      	.short	0x0000
    9a14:	20000124 	.word	0x20000124
    9a18:	20001514 	.word	0x20001514

00009a1c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    9a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a20:	4d48      	ldr	r5, [pc, #288]	; (9b44 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    9a22:	4606      	mov	r6, r0
    9a24:	460f      	mov	r7, r1
    9a26:	7c28      	ldrb	r0, [r5, #16]
    9a28:	2800      	cmp	r0, #0
    9a2a:	d150      	bne.n	9ace <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    9a2c:	4846      	ldr	r0, [pc, #280]	; (9b48 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    9a2e:	f7f9 fc79 	bl	3324 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    9a32:	2820      	cmp	r0, #32
    9a34:	d04b      	beq.n	9ace <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    9a36:	2400      	movs	r4, #0
    9a38:	602c      	str	r4, [r5, #0]
    9a3a:	606c      	str	r4, [r5, #4]
    9a3c:	60ac      	str	r4, [r5, #8]
    9a3e:	60ec      	str	r4, [r5, #12]
    9a40:	612c      	str	r4, [r5, #16]
    9a42:	616c      	str	r4, [r5, #20]
    9a44:	61ac      	str	r4, [r5, #24]
    9a46:	61ec      	str	r4, [r5, #28]
    9a48:	622c      	str	r4, [r5, #32]
    9a4a:	626c      	str	r4, [r5, #36]	; 0x24
    9a4c:	62ac      	str	r4, [r5, #40]	; 0x28
    9a4e:	62ec      	str	r4, [r5, #44]	; 0x2c
    9a50:	632c      	str	r4, [r5, #48]	; 0x30
    9a52:	636c      	str	r4, [r5, #52]	; 0x34
    9a54:	63ac      	str	r4, [r5, #56]	; 0x38
    9a56:	7028      	strb	r0, [r5, #0]
    9a58:	f04f 0803 	mov.w	r8, #3
    9a5c:	606e      	str	r6, [r5, #4]
    9a5e:	f885 8010 	strb.w	r8, [r5, #16]
    9a62:	b15e      	cbz	r6, 9a7c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    9a64:	2101      	movs	r1, #1
    9a66:	f506 7098 	add.w	r0, r6, #304	; 0x130
    9a6a:	f7fb ff51 	bl	5910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    9a6e:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    9a72:	f000 0007 	and.w	r0, r0, #7
    9a76:	1c40      	adds	r0, r0, #1
    9a78:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    9a7c:	2064      	movs	r0, #100	; 0x64
    9a7e:	83a8      	strh	r0, [r5, #28]
    9a80:	f885 801e 	strb.w	r8, [r5, #30]
    9a84:	77ec      	strb	r4, [r5, #31]
    9a86:	752c      	strb	r4, [r5, #20]
    9a88:	f7f8 fdf8 	bl	267c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9a8c:	8ba9      	ldrh	r1, [r5, #28]
    9a8e:	4288      	cmp	r0, r1
    9a90:	bf98      	it	ls
    9a92:	4608      	movls	r0, r1
    9a94:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    9a98:	b286      	uxth	r6, r0
    9a9a:	f7fe ff47 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9a9e:	f04f 0801 	mov.w	r8, #1
    9aa2:	b1f8      	cbz	r0, 9ae4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    9aa4:	61af      	str	r7, [r5, #24]
    9aa6:	f006 f978 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9aaa:	4631      	mov	r1, r6
    9aac:	f7f8 fca4 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9ab0:	6228      	str	r0, [r5, #32]
    9ab2:	706c      	strb	r4, [r5, #1]
    9ab4:	f885 8008 	strb.w	r8, [r5, #8]
    9ab8:	f7fe ff2e 	bl	8918 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    9abc:	b150      	cbz	r0, 9ad4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    9abe:	f7fe fd5d 	bl	857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9ac2:	f200 100d 	addw	r0, r0, #269	; 0x10d
    9ac6:	1a38      	subs	r0, r7, r0
    9ac8:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    9acc:	e007      	b.n	9ade <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    9ace:	200c      	movs	r0, #12
    9ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ad4:	f008 fc6e 	bl	123b4 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    9ad8:	1a38      	subs	r0, r7, r0
    9ada:	f2a0 100d 	subw	r0, r0, #269	; 0x10d
    9ade:	62ec      	str	r4, [r5, #44]	; 0x2c
    9ae0:	60e8      	str	r0, [r5, #12]
    9ae2:	e01d      	b.n	9b20 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    9ae4:	f7fe fd4a 	bl	857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9ae8:	f200 100d 	addw	r0, r0, #269	; 0x10d
    9aec:	61a8      	str	r0, [r5, #24]
    9aee:	f885 8001 	strb.w	r8, [r5, #1]
    9af2:	f006 f952 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9af6:	4680      	mov	r8, r0
    9af8:	2101      	movs	r1, #1
    9afa:	4668      	mov	r0, sp
    9afc:	f7fb fefc 	bl	58f8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    9b00:	f89d 0000 	ldrb.w	r0, [sp]
    9b04:	f242 7110 	movw	r1, #10000	; 0x2710
    9b08:	0200      	lsls	r0, r0, #8
    9b0a:	fbb0 f2f1 	udiv	r2, r0, r1
    9b0e:	fb01 0012 	mls	r0, r1, r2, r0
    9b12:	1981      	adds	r1, r0, r6
    9b14:	4640      	mov	r0, r8
    9b16:	f7f8 fc6f 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9b1a:	6228      	str	r0, [r5, #32]
    9b1c:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    9b20:	7828      	ldrb	r0, [r5, #0]
    9b22:	f105 0114 	add.w	r1, r5, #20
    9b26:	f7f8 fdb3 	bl	2690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9b2a:	b130      	cbz	r0, 9b3a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    9b2c:	84ac      	strh	r4, [r5, #36]	; 0x24
    9b2e:	2000      	movs	r0, #0
    9b30:	f7fe ffa0 	bl	8a74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    9b34:	2000      	movs	r0, #0
    9b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b3a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    9b3e:	2030      	movs	r0, #48	; 0x30
    9b40:	f7fb f876 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b44:	20001514 	.word	0x20001514
    9b48:	0000a6e1 	.word	0x0000a6e1

00009b4c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    9b4c:	b510      	push	{r4, lr}
    9b4e:	4c11      	ldr	r4, [pc, #68]	; (9b94 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    9b50:	7c20      	ldrb	r0, [r4, #16]
    9b52:	b158      	cbz	r0, 9b6c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    9b54:	2001      	movs	r0, #1
    9b56:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    9b5a:	f7fe ff8b 	bl	8a74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    9b5e:	7c20      	ldrb	r0, [r4, #16]
    9b60:	2803      	cmp	r0, #3
    9b62:	d005      	beq.n	9b70 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    9b64:	7c60      	ldrb	r0, [r4, #17]
    9b66:	2800      	cmp	r0, #0
    9b68:	bf08      	it	eq
    9b6a:	bd10      	popeq	{r4, pc}
    9b6c:	200c      	movs	r0, #12
    9b6e:	bd10      	pop	{r4, pc}
    9b70:	7820      	ldrb	r0, [r4, #0]
    9b72:	f7f9 f9a1 	bl	2eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    9b76:	7820      	ldrb	r0, [r4, #0]
    9b78:	f7f9 facc 	bl	3114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9b7c:	7820      	ldrb	r0, [r4, #0]
    9b7e:	f7f9 faa7 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9b82:	b110      	cbz	r0, 9b8a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    9b84:	2000      	movs	r0, #0
    9b86:	7420      	strb	r0, [r4, #16]
    9b88:	bd10      	pop	{r4, pc}
    9b8a:	f240 11f5 	movw	r1, #501	; 0x1f5
    9b8e:	2030      	movs	r0, #48	; 0x30
    9b90:	f7fb f84e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b94:	20001514 	.word	0x20001514

00009b98 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    9b98:	4801      	ldr	r0, [pc, #4]	; (9ba0 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    9b9a:	6840      	ldr	r0, [r0, #4]
    9b9c:	4770      	bx	lr
    9b9e:	0000      	.short	0x0000
    9ba0:	20001514 	.word	0x20001514

00009ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    9ba4:	4802      	ldr	r0, [pc, #8]	; (9bb0 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    9ba6:	7c00      	ldrb	r0, [r0, #16]
    9ba8:	2800      	cmp	r0, #0
    9baa:	bf18      	it	ne
    9bac:	2001      	movne	r0, #1
    9bae:	4770      	bx	lr
    9bb0:	20001514 	.word	0x20001514

00009bb4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    9bb4:	4906      	ldr	r1, [pc, #24]	; (9bd0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    9bb6:	7148      	strb	r0, [r1, #5]
    9bb8:	2000      	movs	r0, #0
    9bba:	7088      	strb	r0, [r1, #2]
    9bbc:	2201      	movs	r2, #1
    9bbe:	700a      	strb	r2, [r1, #0]
    9bc0:	7048      	strb	r0, [r1, #1]
    9bc2:	710a      	strb	r2, [r1, #4]
    9bc4:	70c8      	strb	r0, [r1, #3]
    9bc6:	4903      	ldr	r1, [pc, #12]	; (9bd4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    9bc8:	7408      	strb	r0, [r1, #16]
    9bca:	f000 b805 	b.w	9bd8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    9bce:	0000      	.short	0x0000
    9bd0:	20000124 	.word	0x20000124
    9bd4:	20001514 	.word	0x20001514

00009bd8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    9bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bdc:	4c3d      	ldr	r4, [pc, #244]	; (9cd4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    9bde:	b084      	sub	sp, #16
    9be0:	7c20      	ldrb	r0, [r4, #16]
    9be2:	2601      	movs	r6, #1
    9be4:	2500      	movs	r5, #0
    9be6:	b148      	cbz	r0, 9bfc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    9be8:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    9bec:	2001      	movs	r0, #1
    9bee:	f7fe ff41 	bl	8a74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    9bf2:	7c20      	ldrb	r0, [r4, #16]
    9bf4:	2803      	cmp	r0, #3
    9bf6:	bf18      	it	ne
    9bf8:	7c60      	ldrbne	r0, [r4, #17]
    9bfa:	d00b      	beq.n	9c14 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    9bfc:	4f36      	ldr	r7, [pc, #216]	; (9cd8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    9bfe:	70fe      	strb	r6, [r7, #3]
    9c00:	4669      	mov	r1, sp
    9c02:	2001      	movs	r0, #1
    9c04:	f007 fae6 	bl	111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    9c08:	2800      	cmp	r0, #0
    9c0a:	bf08      	it	eq
    9c0c:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    9c10:	d040      	beq.n	9c94 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    9c12:	e03a      	b.n	9c8a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    9c14:	7820      	ldrb	r0, [r4, #0]
    9c16:	f7f9 f94f 	bl	2eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    9c1a:	7820      	ldrb	r0, [r4, #0]
    9c1c:	f7f9 fa7a 	bl	3114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9c20:	7820      	ldrb	r0, [r4, #0]
    9c22:	f7f9 fa55 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9c26:	2800      	cmp	r0, #0
    9c28:	bf18      	it	ne
    9c2a:	7425      	strbne	r5, [r4, #16]
    9c2c:	d1e6      	bne.n	9bfc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    9c2e:	f240 11f5 	movw	r1, #501	; 0x1f5
    9c32:	2030      	movs	r0, #48	; 0x30
    9c34:	f7fa fffc 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c38:	9802      	ldr	r0, [sp, #8]
    9c3a:	2800      	cmp	r0, #0
    9c3c:	bf1c      	itt	ne
    9c3e:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    9c42:	2900      	cmpne	r1, #0
    9c44:	d026      	beq.n	9c94 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    9c46:	8800      	ldrh	r0, [r0, #0]
    9c48:	42b0      	cmp	r0, r6
    9c4a:	bf18      	it	ne
    9c4c:	f04f 0820 	movne.w	r8, #32
    9c50:	d03b      	beq.n	9cca <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    9c52:	2101      	movs	r1, #1
    9c54:	f007 fab4 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9c58:	0004      	movs	r4, r0
    9c5a:	d021      	beq.n	9ca0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    9c5c:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9c60:	f7f9 fa58 	bl	3114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9c64:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    9c68:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c70:	f7fd fd3a 	bl	76e8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9c74:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9c78:	f7f9 fa2a 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9c7c:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    9c80:	4669      	mov	r1, sp
    9c82:	2001      	movs	r0, #1
    9c84:	f007 faa6 	bl	111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    9c88:	b1d0      	cbz	r0, 9cc0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    9c8a:	f240 1123 	movw	r1, #291	; 0x123
    9c8e:	2030      	movs	r0, #48	; 0x30
    9c90:	f7fa ffce 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c94:	4668      	mov	r0, sp
    9c96:	f7fb fa2d 	bl	50f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9c9a:	2800      	cmp	r0, #0
    9c9c:	d0cc      	beq.n	9c38 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    9c9e:	e014      	b.n	9cca <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    9ca0:	f240 1143 	movw	r1, #323	; 0x143
    9ca4:	2030      	movs	r0, #48	; 0x30
    9ca6:	f7fa ffc3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9caa:	9802      	ldr	r0, [sp, #8]
    9cac:	2800      	cmp	r0, #0
    9cae:	bf1c      	itt	ne
    9cb0:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    9cb4:	2900      	cmpne	r1, #0
    9cb6:	d003      	beq.n	9cc0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    9cb8:	8800      	ldrh	r0, [r0, #0]
    9cba:	42b0      	cmp	r0, r6
    9cbc:	d1c9      	bne.n	9c52 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    9cbe:	e004      	b.n	9cca <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    9cc0:	4668      	mov	r0, sp
    9cc2:	f7fb fa17 	bl	50f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9cc6:	2800      	cmp	r0, #0
    9cc8:	d0ef      	beq.n	9caa <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    9cca:	70fd      	strb	r5, [r7, #3]
    9ccc:	b004      	add	sp, #16
    9cce:	2000      	movs	r0, #0
    9cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cd4:	20001514 	.word	0x20001514
    9cd8:	20000124 	.word	0x20000124

00009cdc <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    9cdc:	4806      	ldr	r0, [pc, #24]	; (9cf8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    9cde:	7c00      	ldrb	r0, [r0, #16]
    9ce0:	2800      	cmp	r0, #0
    9ce2:	bf1c      	itt	ne
    9ce4:	2000      	movne	r0, #0
    9ce6:	4770      	bxne	lr
    9ce8:	b510      	push	{r4, lr}
    9cea:	2001      	movs	r0, #1
    9cec:	f007 fa56 	bl	1119c <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    9cf0:	f080 0001 	eor.w	r0, r0, #1
    9cf4:	bd10      	pop	{r4, pc}
    9cf6:	0000      	.short	0x0000
    9cf8:	20001514 	.word	0x20001514

00009cfc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    9cfc:	4904      	ldr	r1, [pc, #16]	; (9d10 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    9cfe:	788a      	ldrb	r2, [r1, #2]
    9d00:	2a02      	cmp	r2, #2
    9d02:	bf07      	ittee	eq
    9d04:	6949      	ldreq	r1, [r1, #20]
    9d06:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    9d0a:	4902      	ldrne	r1, [pc, #8]	; (9d14 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    9d0c:	6288      	strne	r0, [r1, #40]	; 0x28
    9d0e:	4770      	bx	lr
    9d10:	20000124 	.word	0x20000124
    9d14:	20001514 	.word	0x20001514

00009d18 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    9d18:	4901      	ldr	r1, [pc, #4]	; (9d20 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    9d1a:	7008      	strb	r0, [r1, #0]
    9d1c:	4770      	bx	lr
    9d1e:	0000      	.short	0x0000
    9d20:	20000124 	.word	0x20000124

00009d24 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    9d24:	4901      	ldr	r1, [pc, #4]	; (9d2c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    9d26:	7048      	strb	r0, [r1, #1]
    9d28:	4770      	bx	lr
    9d2a:	0000      	.short	0x0000
    9d2c:	20000124 	.word	0x20000124

00009d30 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    9d30:	4905      	ldr	r1, [pc, #20]	; (9d48 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    9d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9d36:	fbb1 f1f2 	udiv	r1, r1, r2
    9d3a:	b510      	push	{r4, lr}
    9d3c:	f201 210d 	addw	r1, r1, #525	; 0x20d
    9d40:	f008 f8b2 	bl	11ea8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    9d44:	b280      	uxth	r0, r0
    9d46:	bd10      	pop	{r4, pc}
    9d48:	0001527d 	.word	0x0001527d

00009d4c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    9d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d50:	4c13      	ldr	r4, [pc, #76]	; (9da0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    9d52:	4606      	mov	r6, r0
    9d54:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    9d58:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    9d5c:	7860      	ldrb	r0, [r4, #1]
    9d5e:	b120      	cbz	r0, 9d6a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    9d60:	463a      	mov	r2, r7
    9d62:	4628      	mov	r0, r5
    9d64:	f007 fb6d 	bl	11442 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    9d68:	4605      	mov	r5, r0
    9d6a:	68a0      	ldr	r0, [r4, #8]
    9d6c:	4285      	cmp	r5, r0
    9d6e:	d005      	beq.n	9d7c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    9d70:	6921      	ldr	r1, [r4, #16]
    9d72:	1a28      	subs	r0, r5, r0
    9d74:	4408      	add	r0, r1
    9d76:	6120      	str	r0, [r4, #16]
    9d78:	f7f9 fb9a 	bl	34b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9d7c:	60a5      	str	r5, [r4, #8]
    9d7e:	42af      	cmp	r7, r5
    9d80:	d80a      	bhi.n	9d98 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    9d82:	6870      	ldr	r0, [r6, #4]
    9d84:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9d88:	4281      	cmp	r1, r0
    9d8a:	bf9c      	itt	ls
    9d8c:	78e0      	ldrbls	r0, [r4, #3]
    9d8e:	2800      	cmpls	r0, #0
    9d90:	bf04      	itt	eq
    9d92:	2001      	moveq	r0, #1
    9d94:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d98:	f04f 0000 	mov.w	r0, #0
    9d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9da0:	20000124 	.word	0x20000124

00009da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    9da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	4a6d      	ldr	r2, [pc, #436]	; (9f60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    9daa:	2304      	movs	r3, #4
    9dac:	4d6d      	ldr	r5, [pc, #436]	; (9f64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
    9dae:	2600      	movs	r6, #0
    9db0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    9db2:	2908      	cmp	r1, #8
    9db4:	f080 80ce 	bcs.w	9f54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    9db8:	e8df f001 	tbb	[pc, r1]
    9dbc:	1b042c08 	.word	0x1b042c08
    9dc0:	c5c1bb31 	.word	0xc5c1bb31
    9dc4:	4604      	mov	r4, r0
    9dc6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    9dca:	e006      	b.n	9dda <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36>
    9dcc:	4604      	mov	r4, r0
    9dce:	78e8      	ldrb	r0, [r5, #3]
    9dd0:	2800      	cmp	r0, #0
    9dd2:	bf18      	it	ne
    9dd4:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    9dd8:	d00d      	beq.n	9df6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    9dda:	f004 fefd 	bl	ebd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9dde:	f7f9 fac5 	bl	336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9de2:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    9de6:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    9dea:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9dee:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    9df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9df6:	9600      	str	r6, [sp, #0]
    9df8:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    9dfc:	2301      	movs	r3, #1
    9dfe:	2200      	movs	r2, #0
    9e00:	4620      	mov	r0, r4
    9e02:	f000 f903 	bl	a00c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    9e06:	2800      	cmp	r0, #0
    9e08:	d0e7      	beq.n	9dda <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36>
    9e0a:	f240 61a4 	movw	r1, #1700	; 0x6a4
    9e0e:	2030      	movs	r0, #48	; 0x30
    9e10:	f7fa ff0e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e14:	2103      	movs	r1, #3
    9e16:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    9e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e1e:	f004 fecf 	bl	ebc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    9e22:	696c      	ldr	r4, [r5, #20]
    9e24:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    9e28:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9e2c:	f009 fbf2 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9e30:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9e34:	1a08      	subs	r0, r1, r0
    9e36:	68a9      	ldr	r1, [r5, #8]
    9e38:	4401      	add	r1, r0
    9e3a:	60a9      	str	r1, [r5, #8]
    9e3c:	68e9      	ldr	r1, [r5, #12]
    9e3e:	4408      	add	r0, r1
    9e40:	60e8      	str	r0, [r5, #12]
    9e42:	696c      	ldr	r4, [r5, #20]
    9e44:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    9e48:	2800      	cmp	r0, #0
    9e4a:	bf08      	it	eq
    9e4c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e50:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9e54:	2803      	cmp	r0, #3
    9e56:	bf18      	it	ne
    9e58:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e5c:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    9e60:	7829      	ldrb	r1, [r5, #0]
    9e62:	290c      	cmp	r1, #12
    9e64:	d206      	bcs.n	9e74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd0>
    9e66:	4840      	ldr	r0, [pc, #256]	; (9f68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c4>)
    9e68:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    9e6c:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    9e70:	290c      	cmp	r1, #12
    9e72:	d304      	bcc.n	9e7e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xda>
    9e74:	f44f 7147 	mov.w	r1, #796	; 0x31c
    9e78:	2006      	movs	r0, #6
    9e7a:	f7fa fed9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e7e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    9e82:	1811      	adds	r1, r2, r0
    9e84:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    9e88:	fa1f f980 	uxth.w	r9, r0
    9e8c:	b28d      	uxth	r5, r1
    9e8e:	4638      	mov	r0, r7
    9e90:	f009 fbc0 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9e94:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9e98:	f017 0f0c 	tst.w	r7, #12
    9e9c:	eba1 0800 	sub.w	r8, r1, r0
    9ea0:	bf0a      	itet	eq
    9ea2:	4638      	moveq	r0, r7
    9ea4:	f64e 2060 	movwne	r0, #60000	; 0xea60
    9ea8:	f009 fbc8 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9eac:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    9eb0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9eb4:	fbb0 f0fa 	udiv	r0, r0, sl
    9eb8:	eba8 0800 	sub.w	r8, r8, r0
    9ebc:	4638      	mov	r0, r7
    9ebe:	f009 fba9 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9ec2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    9ec6:	f017 0f0c 	tst.w	r7, #12
    9eca:	eba1 0b00 	sub.w	fp, r1, r0
    9ece:	bf0a      	itet	eq
    9ed0:	4638      	moveq	r0, r7
    9ed2:	f64e 2060 	movwne	r0, #60000	; 0xea60
    9ed6:	f009 fbb1 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9eda:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9ede:	4408      	add	r0, r1
    9ee0:	fbb0 f0fa 	udiv	r0, r0, sl
    9ee4:	ebab 0000 	sub.w	r0, fp, r0
    9ee8:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    9eec:	4369      	muls	r1, r5
    9eee:	fbb1 f1f9 	udiv	r1, r1, r9
    9ef2:	2229      	movs	r2, #41	; 0x29
    9ef4:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    9ef8:	3160      	adds	r1, #96	; 0x60
    9efa:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    9efe:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    9f02:	4542      	cmp	r2, r8
    9f04:	d801      	bhi.n	9f0a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    9f06:	4540      	cmp	r0, r8
    9f08:	d201      	bcs.n	9f0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x16a>
    9f0a:	f7fa fad9 	bl	44c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    9f0e:	4629      	mov	r1, r5
    9f10:	6860      	ldr	r0, [r4, #4]
    9f12:	f005 ff76 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9f16:	6861      	ldr	r1, [r4, #4]
    9f18:	f641 524c 	movw	r2, #7500	; 0x1d4c
    9f1c:	4291      	cmp	r1, r2
    9f1e:	bf34      	ite	cc
    9f20:	2102      	movcc	r1, #2
    9f22:	2100      	movcs	r1, #0
    9f24:	4408      	add	r0, r1
    9f26:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9f2a:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    9f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f36:	2100      	movs	r1, #0
    9f38:	4610      	mov	r0, r2
    9f3a:	f000 b817 	b.w	9f6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c8>
    9f3e:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    9f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f46:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    9f4a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f4e:	2101      	movs	r1, #1
    9f50:	f000 b80c 	b.w	9f6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c8>
    9f54:	f240 7145 	movw	r1, #1861	; 0x745
    9f58:	2030      	movs	r0, #48	; 0x30
    9f5a:	f7fa fe69 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f5e:	0000      	.short	0x0000
    9f60:	20001514 	.word	0x20001514
    9f64:	20000124 	.word	0x20000124
    9f68:	000124de 	.word	0x000124de
    9f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f70:	4c24      	ldr	r4, [pc, #144]	; (a004 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x260>)
    9f72:	2500      	movs	r5, #0
    9f74:	4680      	mov	r8, r0
    9f76:	7225      	strb	r5, [r4, #8]
    9f78:	6a26      	ldr	r6, [r4, #32]
    9f7a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    9f7e:	7425      	strb	r5, [r4, #16]
    9f80:	2701      	movs	r7, #1
    9f82:	7467      	strb	r7, [r4, #17]
    9f84:	4639      	mov	r1, r7
    9f86:	6860      	ldr	r0, [r4, #4]
    9f88:	f7fd faaa 	bl	74e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9f8c:	6861      	ldr	r1, [r4, #4]
    9f8e:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    9f92:	7820      	ldrb	r0, [r4, #0]
    9f94:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    9f98:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    9f9c:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    9fa0:	8809      	ldrh	r1, [r1, #0]
    9fa2:	f7fd fba1 	bl	76e8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9fa6:	6864      	ldr	r4, [r4, #4]
    9fa8:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    9fac:	2300      	movs	r3, #0
    9fae:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    9fb2:	461a      	mov	r2, r3
    9fb4:	4619      	mov	r1, r3
    9fb6:	4620      	mov	r0, r4
    9fb8:	9500      	str	r5, [sp, #0]
    9fba:	f000 f827 	bl	a00c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    9fbe:	b120      	cbz	r0, 9fca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x226>
    9fc0:	f44f 7105 	mov.w	r1, #532	; 0x214
    9fc4:	2030      	movs	r0, #48	; 0x30
    9fc6:	f7fa fe33 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fca:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    9fce:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    9fd2:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    9fd6:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    9fda:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    9fde:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    9fe2:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    9fe6:	1e40      	subs	r0, r0, #1
    9fe8:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    9fec:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    9ff0:	f004 fdf2 	bl	ebd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9ff4:	f7f9 f9ba 	bl	336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9ff8:	4803      	ldr	r0, [pc, #12]	; (a008 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x264>)
    9ffa:	7940      	ldrb	r0, [r0, #5]
    9ffc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a000:	f7fa bc04 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a004:	20001514 	.word	0x20001514
    a008:	20000124 	.word	0x20000124
    a00c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a010:	b08f      	sub	sp, #60	; 0x3c
    a012:	4604      	mov	r4, r0
    a014:	2000      	movs	r0, #0
    a016:	9000      	str	r0, [sp, #0]
    a018:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    a01c:	469b      	mov	fp, r3
    a01e:	4689      	mov	r9, r1
    a020:	930b      	str	r3, [sp, #44]	; 0x2c
    a022:	9007      	str	r0, [sp, #28]
    a024:	48fe      	ldr	r0, [pc, #1016]	; (a420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    a026:	7800      	ldrb	r0, [r0, #0]
    a028:	280c      	cmp	r0, #12
    a02a:	d279      	bcs.n	a120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x37c>
    a02c:	49fd      	ldr	r1, [pc, #1012]	; (a424 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x680>)
    a02e:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    a032:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    a036:	280c      	cmp	r0, #12
    a038:	d272      	bcs.n	a120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x37c>
    a03a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    a03e:	4410      	add	r0, r2
    a040:	b285      	uxth	r5, r0
    a042:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    a046:	280d      	cmp	r0, #13
    a048:	bf0c      	ite	eq
    a04a:	2001      	moveq	r0, #1
    a04c:	2000      	movne	r0, #0
    a04e:	900a      	str	r0, [sp, #40]	; 0x28
    a050:	9811      	ldr	r0, [sp, #68]	; 0x44
    a052:	2800      	cmp	r0, #0
    a054:	bf04      	itt	eq
    a056:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    a05a:	2803      	cmpeq	r0, #3
    a05c:	d128      	bne.n	a0b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    a05e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a060:	b330      	cbz	r0, a0b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    a062:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    a066:	4548      	cmp	r0, r9
    a068:	d122      	bne.n	a0b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    a06a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    a06e:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    a072:	6860      	ldr	r0, [r4, #4]
    a074:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    a078:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    a07c:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    a080:	4408      	add	r0, r1
    a082:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    a086:	4620      	mov	r0, r4
    a088:	f000 fd68 	bl	ab5c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    a08c:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    a090:	61e0      	str	r0, [r4, #28]
    a092:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    a096:	8360      	strh	r0, [r4, #26]
    a098:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    a09c:	6060      	str	r0, [r4, #4]
    a09e:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    a0a2:	8120      	strh	r0, [r4, #8]
    a0a4:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    a0a8:	8160      	strh	r0, [r4, #10]
    a0aa:	2002      	movs	r0, #2
    a0ac:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    a0b0:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    a0b4:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    a0b8:	eba9 0000 	sub.w	r0, r9, r0
    a0bc:	fa0f f880 	sxth.w	r8, r0
    a0c0:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    a0c4:	eba9 0000 	sub.w	r0, r9, r0
    a0c8:	b207      	sxth	r7, r0
    a0ca:	2f00      	cmp	r7, #0
    a0cc:	da09      	bge.n	a0e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33e>
    a0ce:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    a0d2:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    a0d6:	2001      	movs	r0, #1
    a0d8:	900b      	str	r0, [sp, #44]	; 0x2c
    a0da:	2000      	movs	r0, #0
    a0dc:	4647      	mov	r7, r8
    a0de:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    a0e2:	48cf      	ldr	r0, [pc, #828]	; (a420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    a0e4:	f04f 0a00 	mov.w	sl, #0
    a0e8:	7900      	ldrb	r0, [r0, #4]
    a0ea:	2800      	cmp	r0, #0
    a0ec:	d07e      	beq.n	a1ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x448>
    a0ee:	f7fa fa05 	bl	44fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    a0f2:	2800      	cmp	r0, #0
    a0f4:	d07a      	beq.n	a1ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x448>
    a0f6:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    a0fa:	2802      	cmp	r0, #2
    a0fc:	d37f      	bcc.n	a1fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    a0fe:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    a102:	2802      	cmp	r0, #2
    a104:	d07b      	beq.n	a1fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    a106:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    a10a:	2800      	cmp	r0, #0
    a10c:	d177      	bne.n	a1fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    a10e:	6860      	ldr	r0, [r4, #4]
    a110:	f641 514c 	movw	r1, #7500	; 0x1d4c
    a114:	4288      	cmp	r0, r1
    a116:	d372      	bcc.n	a1fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    a118:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    a11c:	290c      	cmp	r1, #12
    a11e:	d304      	bcc.n	a12a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x386>
    a120:	f44f 7147 	mov.w	r1, #796	; 0x31c
    a124:	2006      	movs	r0, #6
    a126:	f7fa fd83 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a12a:	4abe      	ldr	r2, [pc, #760]	; (a424 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x680>)
    a12c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    a130:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    a134:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    a138:	b289      	uxth	r1, r1
    a13a:	460d      	mov	r5, r1
    a13c:	2a01      	cmp	r2, #1
    a13e:	d017      	beq.n	a170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3cc>
    a140:	f005 fe5f 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a144:	4601      	mov	r1, r0
    a146:	6862      	ldr	r2, [r4, #4]
    a148:	f641 504c 	movw	r0, #7500	; 0x1d4c
    a14c:	4282      	cmp	r2, r0
    a14e:	bf2c      	ite	cs
    a150:	2000      	movcs	r0, #0
    a152:	2002      	movcc	r0, #2
    a154:	4408      	add	r0, r1
    a156:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    a15a:	b280      	uxth	r0, r0
    a15c:	4442      	add	r2, r8
    a15e:	1bd1      	subs	r1, r2, r7
    a160:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    a164:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    a168:	1a82      	subs	r2, r0, r2
    a16a:	fb01 aa02 	mla	sl, r1, r2, sl
    a16e:	e043      	b.n	a1f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>
    a170:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    a174:	2803      	cmp	r0, #3
    a176:	d056      	beq.n	a226 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x482>
    a178:	48ab      	ldr	r0, [pc, #684]	; (a428 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x684>)
    a17a:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    a17e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    a182:	f007 fa37 	bl	115f4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    a186:	69e1      	ldr	r1, [r4, #28]
    a188:	4408      	add	r0, r1
    a18a:	9004      	str	r0, [sp, #16]
    a18c:	4629      	mov	r1, r5
    a18e:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    a192:	f005 fe36 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a196:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    a19a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    a19e:	1a82      	subs	r2, r0, r2
    a1a0:	fb01 aa02 	mla	sl, r1, r2, sl
    a1a4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    a1a8:	4629      	mov	r1, r5
    a1aa:	9804      	ldr	r0, [sp, #16]
    a1ac:	f005 fe29 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a1b0:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    a1b4:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    a1b8:	1a41      	subs	r1, r0, r1
    a1ba:	448a      	add	sl, r1
    a1bc:	4629      	mov	r1, r5
    a1be:	6860      	ldr	r0, [r4, #4]
    a1c0:	f005 fe1f 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a1c4:	4601      	mov	r1, r0
    a1c6:	6862      	ldr	r2, [r4, #4]
    a1c8:	f641 504c 	movw	r0, #7500	; 0x1d4c
    a1cc:	4282      	cmp	r2, r0
    a1ce:	bf34      	ite	cc
    a1d0:	2002      	movcc	r0, #2
    a1d2:	2000      	movcs	r0, #0
    a1d4:	4408      	add	r0, r1
    a1d6:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    a1da:	4442      	add	r2, r8
    a1dc:	1bd1      	subs	r1, r2, r7
    a1de:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    a1e2:	1a89      	subs	r1, r1, r2
    a1e4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    a1e8:	1a82      	subs	r2, r0, r2
    a1ea:	e000      	b.n	a1ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44a>
    a1ec:	e007      	b.n	a1fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    a1ee:	1e49      	subs	r1, r1, #1
    a1f0:	fb01 aa02 	mla	sl, r1, r2, sl
    a1f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    a1f8:	2001      	movs	r0, #1
    a1fa:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    a1fe:	f8cd a010 	str.w	sl, [sp, #16]
    a202:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    a206:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    a20a:	b190      	cbz	r0, a232 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48e>
    a20c:	2801      	cmp	r0, #1
    a20e:	f000 811c 	beq.w	a44a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a6>
    a212:	2802      	cmp	r0, #2
    a214:	d07e      	beq.n	a314 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x570>
    a216:	2803      	cmp	r0, #3
    a218:	f000 8148 	beq.w	a4ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    a21c:	f240 512a 	movw	r1, #1322	; 0x52a
    a220:	2030      	movs	r0, #48	; 0x30
    a222:	f7fa fd05 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a226:	69e1      	ldr	r1, [r4, #28]
    a228:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    a22c:	4408      	add	r0, r1
    a22e:	9004      	str	r0, [sp, #16]
    a230:	e7ac      	b.n	a18c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e8>
    a232:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    a236:	2800      	cmp	r0, #0
    a238:	d07f      	beq.n	a33a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x596>
    a23a:	487b      	ldr	r0, [pc, #492]	; (a428 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x684>)
    a23c:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    a240:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    a244:	f007 f9d6 	bl	115f4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    a248:	4607      	mov	r7, r0
    a24a:	69e0      	ldr	r0, [r4, #28]
    a24c:	4629      	mov	r1, r5
    a24e:	4438      	add	r0, r7
    a250:	f005 fdd7 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a254:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    a258:	4629      	mov	r1, r5
    a25a:	6860      	ldr	r0, [r4, #4]
    a25c:	f005 fdd1 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a260:	6862      	ldr	r2, [r4, #4]
    a262:	f641 514c 	movw	r1, #7500	; 0x1d4c
    a266:	428a      	cmp	r2, r1
    a268:	bf2c      	ite	cs
    a26a:	2100      	movcs	r1, #0
    a26c:	2102      	movcc	r1, #2
    a26e:	4408      	add	r0, r1
    a270:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    a274:	a905      	add	r1, sp, #20
    a276:	a802      	add	r0, sp, #8
    a278:	f004 fb8c 	bl	e994 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    a27c:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    a280:	9a05      	ldr	r2, [sp, #20]
    a282:	9902      	ldr	r1, [sp, #8]
    a284:	f7f9 f9e6 	bl	3654 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    a288:	9001      	str	r0, [sp, #4]
    a28a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a28e:	4628      	mov	r0, r5
    a290:	f009 f9d4 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a294:	f64d 7141 	movw	r1, #57153	; 0xdf41
    a298:	4408      	add	r0, r1
    a29a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    a29e:	fbb0 f0f8 	udiv	r0, r0, r8
    a2a2:	f015 010c 	ands.w	r1, r5, #12
    a2a6:	bf18      	it	ne
    a2a8:	2128      	movne	r1, #40	; 0x28
    a2aa:	4408      	add	r0, r1
    a2ac:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    a2b0:	f44f 71a8 	mov.w	r1, #336	; 0x150
    a2b4:	4620      	mov	r0, r4
    a2b6:	f007 fdc1 	bl	11e3c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    a2ba:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    a2be:	9000      	str	r0, [sp, #0]
    a2c0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    a2c4:	f009 f9ba 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a2c8:	4450      	add	r0, sl
    a2ca:	fbb0 f0f8 	udiv	r0, r0, r8
    a2ce:	69e1      	ldr	r1, [r4, #28]
    a2d0:	9a00      	ldr	r2, [sp, #0]
    a2d2:	4439      	add	r1, r7
    a2d4:	1a08      	subs	r0, r1, r0
    a2d6:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    a2da:	1a40      	subs	r0, r0, r1
    a2dc:	4410      	add	r0, r2
    a2de:	9a01      	ldr	r2, [sp, #4]
    a2e0:	3820      	subs	r0, #32
    a2e2:	1a80      	subs	r0, r0, r2
    a2e4:	9000      	str	r0, [sp, #0]
    a2e6:	0048      	lsls	r0, r1, #1
    a2e8:	8b61      	ldrh	r1, [r4, #26]
    a2ea:	3060      	adds	r0, #96	; 0x60
    a2ec:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a2f0:	1847      	adds	r7, r0, r1
    a2f2:	f015 0f0c 	tst.w	r5, #12
    a2f6:	bf0a      	itet	eq
    a2f8:	4628      	moveq	r0, r5
    a2fa:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a2fe:	f009 f99d 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a302:	4450      	add	r0, sl
    a304:	fbb0 f8f8 	udiv	r8, r0, r8
    a308:	4628      	mov	r0, r5
    a30a:	f009 f983 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a30e:	4440      	add	r0, r8
    a310:	4438      	add	r0, r7
    a312:	e001      	b.n	a318 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    a314:	e016      	b.n	a344 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5a0>
    a316:	e010      	b.n	a33a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x596>
    a318:	f100 0124 	add.w	r1, r0, #36	; 0x24
    a31c:	4840      	ldr	r0, [pc, #256]	; (a420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    a31e:	6181      	str	r1, [r0, #24]
    a320:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    a324:	9900      	ldr	r1, [sp, #0]
    a326:	1a08      	subs	r0, r1, r0
    a328:	f5b0 7ff6 	cmp.w	r0, #492	; 0x1ec
    a32c:	f080 813d 	bcs.w	a5aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    a330:	f240 41c3 	movw	r1, #1219	; 0x4c3
    a334:	2030      	movs	r0, #48	; 0x30
    a336:	f7fa fc7b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a33a:	f240 41a1 	movw	r1, #1185	; 0x4a1
    a33e:	2030      	movs	r0, #48	; 0x30
    a340:	f7fa fc76 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a344:	69e1      	ldr	r1, [r4, #28]
    a346:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    a34a:	4408      	add	r0, r1
    a34c:	4629      	mov	r1, r5
    a34e:	f005 fd58 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a352:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    a356:	4629      	mov	r1, r5
    a358:	6860      	ldr	r0, [r4, #4]
    a35a:	f005 fd52 	bl	fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a35e:	6862      	ldr	r2, [r4, #4]
    a360:	f641 514c 	movw	r1, #7500	; 0x1d4c
    a364:	428a      	cmp	r2, r1
    a366:	bf34      	ite	cc
    a368:	2102      	movcc	r1, #2
    a36a:	2100      	movcs	r1, #0
    a36c:	4408      	add	r0, r1
    a36e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    a372:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a376:	4628      	mov	r0, r5
    a378:	f009 f960 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a37c:	f64d 7141 	movw	r1, #57153	; 0xdf41
    a380:	4401      	add	r1, r0
    a382:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    a386:	fbb1 f0f8 	udiv	r0, r1, r8
    a38a:	f015 010c 	ands.w	r1, r5, #12
    a38e:	bf18      	it	ne
    a390:	2128      	movne	r1, #40	; 0x28
    a392:	4408      	add	r0, r1
    a394:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    a398:	f44f 71a8 	mov.w	r1, #336	; 0x150
    a39c:	4620      	mov	r0, r4
    a39e:	f007 fd4d 	bl	11e3c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    a3a2:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    a3a6:	b9e0      	cbnz	r0, a3e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x63e>
    a3a8:	f1bb 0f00 	cmp.w	fp, #0
    a3ac:	d019      	beq.n	a3e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x63e>
    a3ae:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a3b2:	4628      	mov	r0, r5
    a3b4:	f009 f942 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a3b8:	eb00 010a 	add.w	r1, r0, sl
    a3bc:	fbb1 f0f8 	udiv	r0, r1, r8
    a3c0:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    a3c4:	69e2      	ldr	r2, [r4, #28]
    a3c6:	4408      	add	r0, r1
    a3c8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    a3cc:	4411      	add	r1, r2
    a3ce:	1a0f      	subs	r7, r1, r0
    a3d0:	4628      	mov	r0, r5
    a3d2:	f009 f91f 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a3d6:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    a3da:	1a08      	subs	r0, r1, r0
    a3dc:	4438      	add	r0, r7
    a3de:	3820      	subs	r0, #32
    a3e0:	e006      	b.n	a3f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    a3e2:	69e1      	ldr	r1, [r4, #28]
    a3e4:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    a3e8:	4408      	add	r0, r1
    a3ea:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    a3ee:	1a40      	subs	r0, r0, r1
    a3f0:	9000      	str	r0, [sp, #0]
    a3f2:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    a3f6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    a3fa:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    a3fe:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a402:	fb01 0002 	mla	r0, r1, r2, r0
    a406:	0040      	lsls	r0, r0, #1
    a408:	8b61      	ldrh	r1, [r4, #26]
    a40a:	3060      	adds	r0, #96	; 0x60
    a40c:	1847      	adds	r7, r0, r1
    a40e:	f015 0f0c 	tst.w	r5, #12
    a412:	bf0a      	itet	eq
    a414:	4628      	moveq	r0, r5
    a416:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a41a:	f009 f90f 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a41e:	e005      	b.n	a42c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x688>
    a420:	20000124 	.word	0x20000124
    a424:	000124de 	.word	0x000124de
    a428:	20001514 	.word	0x20001514
    a42c:	eb00 010a 	add.w	r1, r0, sl
    a430:	fbb1 f8f8 	udiv	r8, r1, r8
    a434:	4628      	mov	r0, r5
    a436:	f009 f8ed 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a43a:	49a7      	ldr	r1, [pc, #668]	; (a6d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    a43c:	4440      	add	r0, r8
    a43e:	4438      	add	r0, r7
    a440:	6188      	str	r0, [r1, #24]
    a442:	2001      	movs	r0, #1
    a444:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    a448:	e0af      	b.n	a5aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    a44a:	6861      	ldr	r1, [r4, #4]
    a44c:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    a450:	1a09      	subs	r1, r1, r0
    a452:	4379      	muls	r1, r7
    a454:	9100      	str	r1, [sp, #0]
    a456:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    a45a:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    a45e:	4441      	add	r1, r8
    a460:	1a89      	subs	r1, r1, r2
    a462:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    a466:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    a46a:	1e49      	subs	r1, r1, #1
    a46c:	fb0c 3202 	mla	r2, ip, r2, r3
    a470:	fb01 2000 	mla	r0, r1, r0, r2
    a474:	0040      	lsls	r0, r0, #1
    a476:	8b61      	ldrh	r1, [r4, #26]
    a478:	3060      	adds	r0, #96	; 0x60
    a47a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    a47e:	1847      	adds	r7, r0, r1
    a480:	f015 0f0c 	tst.w	r5, #12
    a484:	bf0a      	itet	eq
    a486:	4628      	moveq	r0, r5
    a488:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a48c:	f009 f8d6 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a490:	eb00 010a 	add.w	r1, r0, sl
    a494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a498:	fbb1 f8f0 	udiv	r8, r1, r0
    a49c:	4628      	mov	r0, r5
    a49e:	f009 f8b9 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a4a2:	498d      	ldr	r1, [pc, #564]	; (a6d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    a4a4:	4440      	add	r0, r8
    a4a6:	4438      	add	r0, r7
    a4a8:	6188      	str	r0, [r1, #24]
    a4aa:	e07e      	b.n	a5aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    a4ac:	6860      	ldr	r0, [r4, #4]
    a4ae:	4378      	muls	r0, r7
    a4b0:	9000      	str	r0, [sp, #0]
    a4b2:	f1bb 0f00 	cmp.w	fp, #0
    a4b6:	d007      	beq.n	a4c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x724>
    a4b8:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    a4bc:	2900      	cmp	r1, #0
    a4be:	bf04      	itt	eq
    a4c0:	2100      	moveq	r1, #0
    a4c2:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    a4c6:	d003      	beq.n	a4d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72c>
    a4c8:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    a4cc:	2900      	cmp	r1, #0
    a4ce:	d16c      	bne.n	a5aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    a4d0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    a4d4:	fb07 0011 	mls	r0, r7, r1, r0
    a4d8:	9000      	str	r0, [sp, #0]
    a4da:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    a4de:	2824      	cmp	r0, #36	; 0x24
    a4e0:	bf1c      	itt	ne
    a4e2:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    a4e6:	2824      	cmpne	r0, #36	; 0x24
    a4e8:	d10b      	bne.n	a502 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x75e>
    a4ea:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    a4ee:	eba9 0000 	sub.w	r0, r9, r0
    a4f2:	b200      	sxth	r0, r0
    a4f4:	2800      	cmp	r0, #0
    a4f6:	db04      	blt.n	a502 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x75e>
    a4f8:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    a4fc:	2800      	cmp	r0, #0
    a4fe:	bf18      	it	ne
    a500:	9007      	strne	r0, [sp, #28]
    a502:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a504:	b328      	cbz	r0, a552 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ae>
    a506:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    a50a:	bb10      	cbnz	r0, a552 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ae>
    a50c:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    a510:	2800      	cmp	r0, #0
    a512:	bf1c      	itt	ne
    a514:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    a518:	2800      	cmpne	r0, #0
    a51a:	d07b      	beq.n	a614 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    a51c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    a520:	f010 0f0c 	tst.w	r0, #12
    a524:	bf14      	ite	ne
    a526:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a52a:	f009 f887 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a52e:	eb00 010a 	add.w	r1, r0, sl
    a532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a536:	fbb1 f0f0 	udiv	r0, r1, r0
    a53a:	9900      	ldr	r1, [sp, #0]
    a53c:	1a0d      	subs	r5, r1, r0
    a53e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    a542:	f009 f867 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a546:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    a54a:	1a08      	subs	r0, r1, r0
    a54c:	4428      	add	r0, r5
    a54e:	3820      	subs	r0, #32
    a550:	9000      	str	r0, [sp, #0]
    a552:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    a556:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    a55a:	4440      	add	r0, r8
    a55c:	4348      	muls	r0, r1
    a55e:	0040      	lsls	r0, r0, #1
    a560:	9d07      	ldr	r5, [sp, #28]
    a562:	f100 0760 	add.w	r7, r0, #96	; 0x60
    a566:	f015 0f0c 	tst.w	r5, #12
    a56a:	bf0a      	itet	eq
    a56c:	4628      	moveq	r0, r5
    a56e:	f64e 2060 	movwne	r0, #60000	; 0xea60
    a572:	f009 f863 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a576:	eb00 010a 	add.w	r1, r0, sl
    a57a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a57e:	fbb1 f8f0 	udiv	r8, r1, r0
    a582:	4628      	mov	r0, r5
    a584:	f009 f846 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    a588:	eb08 0100 	add.w	r1, r8, r0
    a58c:	19c8      	adds	r0, r1, r7
    a58e:	4952      	ldr	r1, [pc, #328]	; (a6d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    a590:	6188      	str	r0, [r1, #24]
    a592:	6860      	ldr	r0, [r4, #4]
    a594:	f641 514c 	movw	r1, #7500	; 0x1d4c
    a598:	4288      	cmp	r0, r1
    a59a:	d206      	bcs.n	a5aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    a59c:	466b      	mov	r3, sp
    a59e:	4a4f      	ldr	r2, [pc, #316]	; (a6dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x938>)
    a5a0:	4639      	mov	r1, r7
    a5a2:	f007 f93b 	bl	1181c <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    a5a6:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    a5aa:	9900      	ldr	r1, [sp, #0]
    a5ac:	9804      	ldr	r0, [sp, #16]
    a5ae:	4a4a      	ldr	r2, [pc, #296]	; (a6d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    a5b0:	1a08      	subs	r0, r1, r0
    a5b2:	9000      	str	r0, [sp, #0]
    a5b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    a5b8:	6860      	ldr	r0, [r4, #4]
    a5ba:	6991      	ldr	r1, [r2, #24]
    a5bc:	1ac0      	subs	r0, r0, r3
    a5be:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    a5c2:	61d0      	str	r0, [r2, #28]
    a5c4:	4281      	cmp	r1, r0
    a5c6:	bf98      	it	ls
    a5c8:	4608      	movls	r0, r1
    a5ca:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    a5ce:	2000      	movs	r0, #0
    a5d0:	7030      	strb	r0, [r6, #0]
    a5d2:	2064      	movs	r0, #100	; 0x64
    a5d4:	8130      	strh	r0, [r6, #8]
    a5d6:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    a5da:	9900      	ldr	r1, [sp, #0]
    a5dc:	f7f7 ff0c 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    a5e0:	60f0      	str	r0, [r6, #12]
    a5e2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    a5e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a5e8:	4408      	add	r0, r1
    a5ea:	6070      	str	r0, [r6, #4]
    a5ec:	68f0      	ldr	r0, [r6, #12]
    a5ee:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    a5f2:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    a5f6:	f000 fae5 	bl	abc4 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    a5fa:	b110      	cbz	r0, a602 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85e>
    a5fc:	6870      	ldr	r0, [r6, #4]
    a5fe:	301e      	adds	r0, #30
    a600:	6070      	str	r0, [r6, #4]
    a602:	2001      	movs	r0, #1
    a604:	72b0      	strb	r0, [r6, #10]
    a606:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    a60a:	eba1 0109 	sub.w	r1, r1, r9
    a60e:	b209      	sxth	r1, r1
    a610:	2900      	cmp	r1, #0
    a612:	e000      	b.n	a616 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x872>
    a614:	e03d      	b.n	a692 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ee>
    a616:	bfc4      	itt	gt
    a618:	2103      	movgt	r1, #3
    a61a:	72b1      	strbgt	r1, [r6, #10]
    a61c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a61e:	b3b9      	cbz	r1, a690 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    a620:	f1bb 0f00 	cmp.w	fp, #0
    a624:	d025      	beq.n	a672 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    a626:	bf00      	nop
    a628:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    a62c:	2a00      	cmp	r2, #0
    a62e:	bf0c      	ite	eq
    a630:	2100      	moveq	r1, #0
    a632:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    a636:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    a63a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    a63e:	1c49      	adds	r1, r1, #1
    a640:	4359      	muls	r1, r3
    a642:	4291      	cmp	r1, r2
    a644:	d215      	bcs.n	a672 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    a646:	7ab1      	ldrb	r1, [r6, #10]
    a648:	1e49      	subs	r1, r1, #1
    a64a:	2900      	cmp	r1, #0
    a64c:	dd11      	ble.n	a672 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    a64e:	72b0      	strb	r0, [r6, #10]
    a650:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    a654:	2101      	movs	r1, #1
    a656:	1c40      	adds	r0, r0, #1
    a658:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    a65c:	f504 7098 	add.w	r0, r4, #304	; 0x130
    a660:	f7fb f93c 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a664:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    a668:	f000 0007 	and.w	r0, r0, #7
    a66c:	1c40      	adds	r0, r0, #1
    a66e:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    a672:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    a676:	4631      	mov	r1, r6
    a678:	f7f8 f80a 	bl	2690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    a67c:	b338      	cbz	r0, a6ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    a67e:	9811      	ldr	r0, [sp, #68]	; 0x44
    a680:	f080 0001 	eor.w	r0, r0, #1
    a684:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    a688:	b013      	add	sp, #76	; 0x4c
    a68a:	2000      	movs	r0, #0
    a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a690:	e004      	b.n	a69c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8f8>
    a692:	f240 5115 	movw	r1, #1301	; 0x515
    a696:	2030      	movs	r0, #48	; 0x30
    a698:	f7fa faca 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a69c:	f1bb 0f00 	cmp.w	fp, #0
    a6a0:	d1c2      	bne.n	a628 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x884>
    a6a2:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d0e3      	beq.n	a672 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    a6aa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    a6ae:	6860      	ldr	r0, [r4, #4]
    a6b0:	1a41      	subs	r1, r0, r1
    a6b2:	4630      	mov	r0, r6
    a6b4:	f007 f854 	bl	11760 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    a6b8:	0400      	lsls	r0, r0, #16
    a6ba:	0c00      	lsrs	r0, r0, #16
    a6bc:	d0d9      	beq.n	a672 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    a6be:	991c      	ldr	r1, [sp, #112]	; 0x70
    a6c0:	2900      	cmp	r1, #0
    a6c2:	bf18      	it	ne
    a6c4:	8008      	strhne	r0, [r1, #0]
    a6c6:	2001      	movs	r0, #1
    a6c8:	b013      	add	sp, #76	; 0x4c
    a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6ce:	f240 5175 	movw	r1, #1397	; 0x575
    a6d2:	2030      	movs	r0, #48	; 0x30
    a6d4:	f7fa faac 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6d8:	20000124 	.word	0x20000124
    a6dc:	2000013c 	.word	0x2000013c
    a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6e4:	4cfa      	ldr	r4, [pc, #1000]	; (aad0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2c>)
    a6e6:	460f      	mov	r7, r1
    a6e8:	b083      	sub	sp, #12
    a6ea:	7c21      	ldrb	r1, [r4, #16]
    a6ec:	4df9      	ldr	r5, [pc, #996]	; (aad4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd30>)
    a6ee:	2600      	movs	r6, #0
    a6f0:	f04f 0a02 	mov.w	sl, #2
    a6f4:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    a6f8:	f04f 0801 	mov.w	r8, #1
    a6fc:	2903      	cmp	r1, #3
    a6fe:	bf04      	itt	eq
    a700:	7821      	ldrbeq	r1, [r4, #0]
    a702:	4281      	cmpeq	r1, r0
    a704:	f040 80e6 	bne.w	a8d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb30>
    a708:	6860      	ldr	r0, [r4, #4]
    a70a:	6168      	str	r0, [r5, #20]
    a70c:	7c20      	ldrb	r0, [r4, #16]
    a70e:	2803      	cmp	r0, #3
    a710:	d003      	beq.n	a71a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x976>
    a712:	21d5      	movs	r1, #213	; 0xd5
    a714:	2030      	movs	r0, #48	; 0x30
    a716:	f7fa fa8b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a71a:	f04f 0903 	mov.w	r9, #3
    a71e:	2f09      	cmp	r7, #9
    a720:	f080 80d4 	bcs.w	a8cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb28>
    a724:	e8df f007 	tbb	[pc, r7]
    a728:	3a3a1705 	.word	0x3a3a1705
    a72c:	c7bed2f3 	.word	0xc7bed2f3
    a730:	00ce      	.short	0x00ce
    a732:	62a6      	str	r6, [r4, #40]	; 0x28
    a734:	f7fe f92a 	bl	898c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    a738:	b120      	cbz	r0, a744 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9a0>
    a73a:	f240 216d 	movw	r1, #621	; 0x26d
    a73e:	2030      	movs	r0, #48	; 0x30
    a740:	f7fa fa76 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a744:	69a0      	ldr	r0, [r4, #24]
    a746:	38fa      	subs	r0, #250	; 0xfa
    a748:	f7f8 feb2 	bl	34b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    a74c:	f885 9002 	strb.w	r9, [r5, #2]
    a750:	b003      	add	sp, #12
    a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a756:	f7fe f8e9 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a75a:	b998      	cbnz	r0, a784 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9e0>
    a75c:	f7fd ff0e 	bl	857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a760:	f200 150d 	addw	r5, r0, #269	; 0x10d
    a764:	69a0      	ldr	r0, [r4, #24]
    a766:	42a8      	cmp	r0, r5
    a768:	d20b      	bcs.n	a782 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9de>
    a76a:	1a28      	subs	r0, r5, r0
    a76c:	2104      	movs	r1, #4
    a76e:	f7f7 fd51 	bl	2214 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a772:	b130      	cbz	r0, a782 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9de>
    a774:	61a5      	str	r5, [r4, #24]
    a776:	b003      	add	sp, #12
    a778:	2000      	movs	r0, #0
    a77a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a77e:	f7ff b8fd 	b.w	997c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    a782:	61a5      	str	r5, [r4, #24]
    a784:	f7fe f968 	bl	8a58 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    a788:	2800      	cmp	r0, #0
    a78a:	bf04      	itt	eq
    a78c:	b003      	addeq	sp, #12
    a78e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a792:	f240 21a1 	movw	r1, #673	; 0x2a1
    a796:	2030      	movs	r0, #48	; 0x30
    a798:	f7fa fa4a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a79c:	2701      	movs	r7, #1
    a79e:	2064      	movs	r0, #100	; 0x64
    a7a0:	83a0      	strh	r0, [r4, #28]
    a7a2:	7526      	strb	r6, [r4, #20]
    a7a4:	77e6      	strb	r6, [r4, #31]
    a7a6:	7a20      	ldrb	r0, [r4, #8]
    a7a8:	f242 7b10 	movw	fp, #10000	; 0x2710
    a7ac:	b158      	cbz	r0, a7c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa22>
    a7ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a7b2:	6a20      	ldr	r0, [r4, #32]
    a7b4:	f7f7 fe20 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    a7b8:	6220      	str	r0, [r4, #32]
    a7ba:	2100      	movs	r1, #0
    a7bc:	f104 0014 	add.w	r0, r4, #20
    a7c0:	f006 ffce 	bl	11760 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    a7c4:	e018      	b.n	a7f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa54>
    a7c6:	2101      	movs	r1, #1
    a7c8:	4668      	mov	r0, sp
    a7ca:	f7fb f895 	bl	58f8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    a7ce:	f89d 0000 	ldrb.w	r0, [sp]
    a7d2:	0200      	lsls	r0, r0, #8
    a7d4:	fbb0 f1fb 	udiv	r1, r0, fp
    a7d8:	fb0b 0711 	mls	r7, fp, r1, r0
    a7dc:	f7fd fe86 	bl	84ec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    a7e0:	4407      	add	r7, r0
    a7e2:	4639      	mov	r1, r7
    a7e4:	6a20      	ldr	r0, [r4, #32]
    a7e6:	f7f7 fe07 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    a7ea:	6220      	str	r0, [r4, #32]
    a7ec:	4639      	mov	r1, r7
    a7ee:	f104 0014 	add.w	r0, r4, #20
    a7f2:	f006 ffb5 	bl	11760 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    a7f6:	1c47      	adds	r7, r0, #1
    a7f8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    a7fa:	1c41      	adds	r1, r0, #1
    a7fc:	290a      	cmp	r1, #10
    a7fe:	bf3c      	itt	cc
    a800:	4438      	addcc	r0, r7
    a802:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    a804:	6860      	ldr	r0, [r4, #4]
    a806:	b130      	cbz	r0, a816 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa72>
    a808:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    a80a:	1c40      	adds	r0, r0, #1
    a80c:	280a      	cmp	r0, #10
    a80e:	bf28      	it	cs
    a810:	f884 a01e 	strbcs.w	sl, [r4, #30]
    a814:	d201      	bcs.n	a81a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa76>
    a816:	f884 901e 	strb.w	r9, [r4, #30]
    a81a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    a81e:	bb40      	cbnz	r0, a872 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xace>
    a820:	7a20      	ldrb	r0, [r4, #8]
    a822:	b130      	cbz	r0, a832 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa8e>
    a824:	68e1      	ldr	r1, [r4, #12]
    a826:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a828:	4288      	cmp	r0, r1
    a82a:	d902      	bls.n	a832 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa8e>
    a82c:	f7fe f938 	bl	8aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    a830:	e01f      	b.n	a872 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xace>
    a832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a834:	b338      	cbz	r0, a886 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae2>
    a836:	f7fd fe59 	bl	84ec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    a83a:	4607      	mov	r7, r0
    a83c:	f7fd fe9e 	bl	857c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a840:	f200 100d 	addw	r0, r0, #269	; 0x10d
    a844:	4438      	add	r0, r7
    a846:	eb00 090b 	add.w	r9, r0, fp
    a84a:	f005 faa6 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    a84e:	4607      	mov	r7, r0
    a850:	4639      	mov	r1, r7
    a852:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a854:	f7f7 fe06 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    a858:	6327      	str	r7, [r4, #48]	; 0x30
    a85a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a85c:	eb00 0209 	add.w	r2, r0, r9
    a860:	4291      	cmp	r1, r2
    a862:	bf24      	itt	cs
    a864:	1a08      	subcs	r0, r1, r0
    a866:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    a868:	d20d      	bcs.n	a886 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae2>
    a86a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    a86e:	f7fe f917 	bl	8aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    a872:	7820      	ldrb	r0, [r4, #0]
    a874:	f7f8 fc2c 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a878:	7426      	strb	r6, [r4, #16]
    a87a:	7968      	ldrb	r0, [r5, #5]
    a87c:	b003      	add	sp, #12
    a87e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a882:	f7f9 bfc3 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a886:	f814 0b14 	ldrb.w	r0, [r4], #20
    a88a:	4621      	mov	r1, r4
    a88c:	f7f7 ff00 	bl	2690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    a890:	2800      	cmp	r0, #0
    a892:	bf1c      	itt	ne
    a894:	b003      	addne	sp, #12
    a896:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a89a:	f240 617a 	movw	r1, #1658	; 0x67a
    a89e:	2030      	movs	r0, #48	; 0x30
    a8a0:	f7fa f9c6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a4:	f004 fc4c 	bl	f140 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    a8a8:	f004 fdde 	bl	f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    a8ac:	f8cb a280 	str.w	sl, [fp, #640]	; 0x280
    a8b0:	b003      	add	sp, #12
    a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b6:	4608      	mov	r0, r1
    a8b8:	f7f8 fc0a 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a8bc:	7426      	strb	r6, [r4, #16]
    a8be:	b003      	add	sp, #12
    a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c4:	21f7      	movs	r1, #247	; 0xf7
    a8c6:	2030      	movs	r0, #48	; 0x30
    a8c8:	f7fa f9b2 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8cc:	21fb      	movs	r1, #251	; 0xfb
    a8ce:	2030      	movs	r0, #48	; 0x30
    a8d0:	f7fa f9ae 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8d4:	4681      	mov	r9, r0
    a8d6:	f7fc fef9 	bl	76cc <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    a8da:	2101      	movs	r1, #1
    a8dc:	f006 fc70 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a8e0:	0004      	movs	r4, r0
    a8e2:	d009      	beq.n	a8f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb54>
    a8e4:	4648      	mov	r0, r9
    a8e6:	f7fc fef1 	bl	76cc <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    a8ea:	8821      	ldrh	r1, [r4, #0]
    a8ec:	4288      	cmp	r0, r1
    a8ee:	d007      	beq.n	a900 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb5c>
    a8f0:	2199      	movs	r1, #153	; 0x99
    a8f2:	2030      	movs	r0, #48	; 0x30
    a8f4:	f7fa f99c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8f8:	2198      	movs	r1, #152	; 0x98
    a8fa:	2030      	movs	r0, #48	; 0x30
    a8fc:	f7fa f998 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a900:	f04f 0920 	mov.w	r9, #32
    a904:	616c      	str	r4, [r5, #20]
    a906:	2f09      	cmp	r7, #9
    a908:	f080 8124 	bcs.w	ab54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xdb0>
    a90c:	e000      	b.n	a910 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb6c>
    a90e:	e066      	b.n	a9de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc3a>
    a910:	e8df f007 	tbb	[pc, r7]
    a914:	6a6a6006 	.word	0x6a6a6006
    a918:	fb05fc65 	.word	0xfb05fc65
    a91c:	00dd      	.short	0x00dd
    a91e:	e7c1      	b.n	a8a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb00>
    a920:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    a924:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    a928:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    a92c:	4620      	mov	r0, r4
    a92e:	b191      	cbz	r1, a956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbb2>
    a930:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    a934:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    a938:	428a      	cmp	r2, r1
    a93a:	d107      	bne.n	a94c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba8>
    a93c:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    a940:	1a51      	subs	r1, r2, r1
    a942:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a946:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    a94a:	e00f      	b.n	a96c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc8>
    a94c:	1a51      	subs	r1, r2, r1
    a94e:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a952:	b291      	uxth	r1, r2
    a954:	e008      	b.n	a968 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc4>
    a956:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    a95a:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    a95e:	1a89      	subs	r1, r1, r2
    a960:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a964:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    a968:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    a96c:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    a970:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    a974:	f000 f9d2 	bl	ad1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    a978:	f7f7 fe80 	bl	267c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    a97c:	2864      	cmp	r0, #100	; 0x64
    a97e:	bf98      	it	ls
    a980:	2064      	movls	r0, #100	; 0x64
    a982:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    a986:	f001 010c 	and.w	r1, r1, #12
    a98a:	2900      	cmp	r1, #0
    a98c:	bf18      	it	ne
    a98e:	2128      	movne	r1, #40	; 0x28
    a990:	4408      	add	r0, r1
    a992:	f200 17b9 	addw	r7, r0, #441	; 0x1b9
    a996:	4620      	mov	r0, r4
    a998:	bf14      	ite	ne
    a99a:	2128      	movne	r1, #40	; 0x28
    a99c:	2100      	moveq	r1, #0
    a99e:	f201 221d 	addw	r2, r1, #541	; 0x21d
    a9a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a9a4:	f007 f9dd 	bl	11d62 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    a9a8:	4606      	mov	r6, r0
    a9aa:	463a      	mov	r2, r7
    a9ac:	4620      	mov	r0, r4
    a9ae:	6861      	ldr	r1, [r4, #4]
    a9b0:	f007 f9d7 	bl	11d62 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    a9b4:	60e8      	str	r0, [r5, #12]
    a9b6:	4286      	cmp	r6, r0
    a9b8:	bf38      	it	cc
    a9ba:	4630      	movcc	r0, r6
    a9bc:	60a8      	str	r0, [r5, #8]
    a9be:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    a9c2:	38bd      	subs	r0, #189	; 0xbd
    a9c4:	6128      	str	r0, [r5, #16]
    a9c6:	f7f8 fd73 	bl	34b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    a9ca:	f885 a002 	strb.w	sl, [r5, #2]
    a9ce:	b003      	add	sp, #12
    a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9d4:	b003      	add	sp, #12
    a9d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9da:	f000 bb55 	b.w	b088 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    a9de:	b003      	add	sp, #12
    a9e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9e4:	f004 bd40 	b.w	f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    a9e8:	f005 f9d7 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    a9ec:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    a9f0:	4601      	mov	r1, r0
    a9f2:	4610      	mov	r0, r2
    a9f4:	f7f7 fd36 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    a9f8:	6861      	ldr	r1, [r4, #4]
    a9fa:	2900      	cmp	r1, #0
    a9fc:	bf14      	ite	ne
    a9fe:	fbb0 f0f1 	udivne	r0, r0, r1
    aa02:	4630      	moveq	r0, r6
    aa04:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    aa08:	290d      	cmp	r1, #13
    aa0a:	d011      	beq.n	aa30 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc8c>
    aa0c:	f8b4 2078 	ldrh.w	r2, [r4, #120]	; 0x78
    aa10:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    aa14:	1813      	adds	r3, r2, r0
    aa16:	1acb      	subs	r3, r1, r3
    aa18:	b21b      	sxth	r3, r3
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	bfae      	itee	ge
    aa1e:	1c48      	addge	r0, r1, #1
    aa20:	1c40      	addlt	r0, r0, #1
    aa22:	4410      	addlt	r0, r2
    aa24:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    aa28:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    aa2c:	b978      	cbnz	r0, aa4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcaa>
    aa2e:	e005      	b.n	aa3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc98>
    aa30:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    aa34:	1c40      	adds	r0, r0, #1
    aa36:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    aa3a:	e008      	b.n	aa4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcaa>
    aa3c:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    aa40:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    aa44:	4288      	cmp	r0, r1
    aa46:	bf04      	itt	eq
    aa48:	1c40      	addeq	r0, r0, #1
    aa4a:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    aa4e:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    aa52:	f10d 0a04 	add.w	sl, sp, #4
    aa56:	1c40      	adds	r0, r0, #1
    aa58:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    aa5c:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    aa60:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    aa64:	1a40      	subs	r0, r0, r1
    aa66:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    aa6a:	1e40      	subs	r0, r0, #1
    aa6c:	4408      	add	r0, r1
    aa6e:	b287      	uxth	r7, r0
    aa70:	e039      	b.n	aae6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd42>
    aa72:	2300      	movs	r3, #0
    aa74:	461a      	mov	r2, r3
    aa76:	4620      	mov	r0, r4
    aa78:	f8cd a000 	str.w	sl, [sp]
    aa7c:	f7ff fac6 	bl	a00c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    aa80:	b130      	cbz	r0, aa90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcec>
    aa82:	2801      	cmp	r0, #1
    aa84:	d028      	beq.n	aad8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd34>
    aa86:	f240 6124 	movw	r1, #1572	; 0x624
    aa8a:	2030      	movs	r0, #48	; 0x30
    aa8c:	f7fa f8d0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa90:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    aa92:	2800      	cmp	r0, #0
    aa94:	bf04      	itt	eq
    aa96:	b003      	addeq	sp, #12
    aa98:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9c:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    aaa0:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    aaa4:	1a80      	subs	r0, r0, r2
    aaa6:	b201      	sxth	r1, r0
    aaa8:	2900      	cmp	r1, #0
    aaaa:	bfdc      	itt	le
    aaac:	b003      	addle	sp, #12
    aaae:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aab2:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    aab6:	4401      	add	r1, r0
    aab8:	1e49      	subs	r1, r1, #1
    aaba:	fb91 f1f0 	sdiv	r1, r1, r0
    aabe:	b289      	uxth	r1, r1
    aac0:	fb01 2000 	mla	r0, r1, r0, r2
    aac4:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    aac8:	b003      	add	sp, #12
    aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aace:	e03d      	b.n	ab4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xda8>
    aad0:	20001514 	.word	0x20001514
    aad4:	20000124 	.word	0x20000124
    aad8:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    aadc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aae0:	4408      	add	r0, r1
    aae2:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    aae6:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    aaea:	1a78      	subs	r0, r7, r1
    aaec:	b200      	sxth	r0, r0
    aaee:	2800      	cmp	r0, #0
    aaf0:	dabf      	bge.n	aa72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcce>
    aaf2:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    aaf6:	2800      	cmp	r0, #0
    aaf8:	bf0c      	ite	eq
    aafa:	203e      	moveq	r0, #62	; 0x3e
    aafc:	2008      	movne	r0, #8
    aafe:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    ab02:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    ab06:	4620      	mov	r0, r4
    ab08:	e001      	b.n	ab0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6a>
    ab0a:	e003      	b.n	ab14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd70>
    ab0c:	e022      	b.n	ab54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xdb0>
    ab0e:	f007 fdfa 	bl	12706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ab12:	e007      	b.n	ab24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd80>
    ab14:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    ab18:	2804      	cmp	r0, #4
    ab1a:	d003      	beq.n	ab24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd80>
    ab1c:	21bd      	movs	r1, #189	; 0xbd
    ab1e:	2030      	movs	r0, #48	; 0x30
    ab20:	f7fa f886 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab24:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    ab28:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    ab2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab30:	f7fc fdda 	bl	76e8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    ab34:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    ab38:	f7f8 faca 	bl	30d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ab3c:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    ab40:	7968      	ldrb	r0, [r5, #5]
    ab42:	b003      	add	sp, #12
    ab44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab48:	f7f9 be60 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ab4c:	21c6      	movs	r1, #198	; 0xc6
    ab4e:	2030      	movs	r0, #48	; 0x30
    ab50:	f7fa f86e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab54:	21ca      	movs	r1, #202	; 0xca
    ab56:	2030      	movs	r0, #48	; 0x30
    ab58:	f7fa f86a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ab5c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    ab5c:	b510      	push	{r4, lr}
    ab5e:	4604      	mov	r4, r0
    ab60:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    ab64:	6861      	ldr	r1, [r4, #4]
    ab66:	4288      	cmp	r0, r1
    ab68:	d109      	bne.n	ab7e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ab6a:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    ab6e:	8922      	ldrh	r2, [r4, #8]
    ab70:	4291      	cmp	r1, r2
    ab72:	d104      	bne.n	ab7e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ab74:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    ab78:	8962      	ldrh	r2, [r4, #10]
    ab7a:	4291      	cmp	r1, r2
    ab7c:	d015      	beq.n	abaa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    ab7e:	8821      	ldrh	r1, [r4, #0]
    ab80:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    ab84:	f006 fc4c 	bl	11420 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ab88:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    ab8c:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    ab90:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    ab94:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    ab98:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    ab9c:	2001      	movs	r0, #1
    ab9e:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    aba2:	4807      	ldr	r0, [pc, #28]	; (abc0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    aba4:	7940      	ldrb	r0, [r0, #5]
    aba6:	f7f9 fe31 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    abaa:	2102      	movs	r1, #2
    abac:	4620      	mov	r0, r4
    abae:	f7fc fc97 	bl	74e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    abb2:	2000      	movs	r0, #0
    abb4:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    abb8:	2003      	movs	r0, #3
    abba:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    abbe:	bd10      	pop	{r4, pc}
    abc0:	20000144 	.word	0x20000144

0000abc4 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    abc4:	4802      	ldr	r0, [pc, #8]	; (abd0 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    abc6:	6980      	ldr	r0, [r0, #24]
    abc8:	2800      	cmp	r0, #0
    abca:	bf18      	it	ne
    abcc:	2001      	movne	r0, #1
    abce:	4770      	bx	lr
    abd0:	20000144 	.word	0x20000144

0000abd4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    abd4:	4806      	ldr	r0, [pc, #24]	; (abf0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    abd6:	4905      	ldr	r1, [pc, #20]	; (abec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    abd8:	6501      	str	r1, [r0, #80]	; 0x50
    abda:	4906      	ldr	r1, [pc, #24]	; (abf4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    abdc:	6541      	str	r1, [r0, #84]	; 0x54
    abde:	4807      	ldr	r0, [pc, #28]	; (abfc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    abe0:	4905      	ldr	r1, [pc, #20]	; (abf8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    abe2:	6501      	str	r1, [r0, #80]	; 0x50
    abe4:	4906      	ldr	r1, [pc, #24]	; (ac00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    abe6:	6541      	str	r1, [r0, #84]	; 0x54
    abe8:	4770      	bx	lr
    abea:	0000      	.short	0x0000
    abec:	0000c315 	.word	0x0000c315
    abf0:	20000164 	.word	0x20000164
    abf4:	0000c3ed 	.word	0x0000c3ed
    abf8:	0000cc0d 	.word	0x0000cc0d
    abfc:	200001c8 	.word	0x200001c8
    ac00:	0000cc3d 	.word	0x0000cc3d

0000ac04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    ac04:	491d      	ldr	r1, [pc, #116]	; (ac7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    ac06:	2200      	movs	r2, #0
    ac08:	618a      	str	r2, [r1, #24]
    ac0a:	61ca      	str	r2, [r1, #28]
    ac0c:	7148      	strb	r0, [r1, #5]
    ac0e:	481d      	ldr	r0, [pc, #116]	; (ac84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    ac10:	491b      	ldr	r1, [pc, #108]	; (ac80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    ac12:	6081      	str	r1, [r0, #8]
    ac14:	491c      	ldr	r1, [pc, #112]	; (ac88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    ac16:	6041      	str	r1, [r0, #4]
    ac18:	491c      	ldr	r1, [pc, #112]	; (ac8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    ac1a:	6001      	str	r1, [r0, #0]
    ac1c:	491c      	ldr	r1, [pc, #112]	; (ac90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    ac1e:	6281      	str	r1, [r0, #40]	; 0x28
    ac20:	491c      	ldr	r1, [pc, #112]	; (ac94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    ac22:	62c1      	str	r1, [r0, #44]	; 0x2c
    ac24:	491c      	ldr	r1, [pc, #112]	; (ac98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    ac26:	60c1      	str	r1, [r0, #12]
    ac28:	491c      	ldr	r1, [pc, #112]	; (ac9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    ac2a:	6181      	str	r1, [r0, #24]
    ac2c:	491c      	ldr	r1, [pc, #112]	; (aca0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    ac2e:	6301      	str	r1, [r0, #48]	; 0x30
    ac30:	491c      	ldr	r1, [pc, #112]	; (aca4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    ac32:	6201      	str	r1, [r0, #32]
    ac34:	491c      	ldr	r1, [pc, #112]	; (aca8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    ac36:	64c1      	str	r1, [r0, #76]	; 0x4c
    ac38:	491c      	ldr	r1, [pc, #112]	; (acac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    ac3a:	6481      	str	r1, [r0, #72]	; 0x48
    ac3c:	491c      	ldr	r1, [pc, #112]	; (acb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    ac3e:	6441      	str	r1, [r0, #68]	; 0x44
    ac40:	491c      	ldr	r1, [pc, #112]	; (acb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    ac42:	6341      	str	r1, [r0, #52]	; 0x34
    ac44:	491c      	ldr	r1, [pc, #112]	; (acb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    ac46:	61c1      	str	r1, [r0, #28]
    ac48:	481d      	ldr	r0, [pc, #116]	; (acc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    ac4a:	491c      	ldr	r1, [pc, #112]	; (acbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    ac4c:	6081      	str	r1, [r0, #8]
    ac4e:	491d      	ldr	r1, [pc, #116]	; (acc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    ac50:	61c1      	str	r1, [r0, #28]
    ac52:	491d      	ldr	r1, [pc, #116]	; (acc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    ac54:	6241      	str	r1, [r0, #36]	; 0x24
    ac56:	491d      	ldr	r1, [pc, #116]	; (accc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    ac58:	62c1      	str	r1, [r0, #44]	; 0x2c
    ac5a:	491d      	ldr	r1, [pc, #116]	; (acd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    ac5c:	6101      	str	r1, [r0, #16]
    ac5e:	491d      	ldr	r1, [pc, #116]	; (acd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    ac60:	6141      	str	r1, [r0, #20]
    ac62:	491d      	ldr	r1, [pc, #116]	; (acd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    ac64:	6441      	str	r1, [r0, #68]	; 0x44
    ac66:	6341      	str	r1, [r0, #52]	; 0x34
    ac68:	491c      	ldr	r1, [pc, #112]	; (acdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    ac6a:	6181      	str	r1, [r0, #24]
    ac6c:	491c      	ldr	r1, [pc, #112]	; (ace0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    ac6e:	6301      	str	r1, [r0, #48]	; 0x30
    ac70:	491c      	ldr	r1, [pc, #112]	; (ace4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    ac72:	6481      	str	r1, [r0, #72]	; 0x48
    ac74:	491c      	ldr	r1, [pc, #112]	; (ace8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    ac76:	64c1      	str	r1, [r0, #76]	; 0x4c
    ac78:	4770      	bx	lr
    ac7a:	0000      	.short	0x0000
    ac7c:	20000144 	.word	0x20000144
    ac80:	0000c959 	.word	0x0000c959
    ac84:	20000164 	.word	0x20000164
    ac88:	0000c0a1 	.word	0x0000c0a1
    ac8c:	0000c105 	.word	0x0000c105
    ac90:	0000c4e1 	.word	0x0000c4e1
    ac94:	0000c531 	.word	0x0000c531
    ac98:	0000c1c1 	.word	0x0000c1c1
    ac9c:	0000c91d 	.word	0x0000c91d
    aca0:	0000cac9 	.word	0x0000cac9
    aca4:	0000c26d 	.word	0x0000c26d
    aca8:	0000c4b1 	.word	0x0000c4b1
    acac:	0000c47d 	.word	0x0000c47d
    acb0:	0000c865 	.word	0x0000c865
    acb4:	0000c8cd 	.word	0x0000c8cd
    acb8:	0000c991 	.word	0x0000c991
    acbc:	0000ce29 	.word	0x0000ce29
    acc0:	200001c8 	.word	0x200001c8
    acc4:	0000ce51 	.word	0x0000ce51
    acc8:	0000cbc9 	.word	0x0000cbc9
    accc:	0000cce5 	.word	0x0000cce5
    acd0:	0000cb9d 	.word	0x0000cb9d
    acd4:	0000cd8d 	.word	0x0000cd8d
    acd8:	0000cd69 	.word	0x0000cd69
    acdc:	0000cdb1 	.word	0x0000cdb1
    ace0:	0000cec5 	.word	0x0000cec5
    ace4:	0000cc81 	.word	0x0000cc81
    ace8:	0000ccb1 	.word	0x0000ccb1

0000acec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    acec:	4806      	ldr	r0, [pc, #24]	; (ad08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    acee:	4905      	ldr	r1, [pc, #20]	; (ad04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    acf0:	6581      	str	r1, [r0, #88]	; 0x58
    acf2:	4906      	ldr	r1, [pc, #24]	; (ad0c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    acf4:	6601      	str	r1, [r0, #96]	; 0x60
    acf6:	4807      	ldr	r0, [pc, #28]	; (ad14 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    acf8:	4905      	ldr	r1, [pc, #20]	; (ad10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    acfa:	6581      	str	r1, [r0, #88]	; 0x58
    acfc:	4906      	ldr	r1, [pc, #24]	; (ad18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    acfe:	65c1      	str	r1, [r0, #92]	; 0x5c
    ad00:	4770      	bx	lr
    ad02:	0000      	.short	0x0000
    ad04:	0000c551 	.word	0x0000c551
    ad08:	20000164 	.word	0x20000164
    ad0c:	0000c631 	.word	0x0000c631
    ad10:	0000cd11 	.word	0x0000cd11
    ad14:	200001c8 	.word	0x200001c8
    ad18:	0000cd41 	.word	0x0000cd41

0000ad1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    ad1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad20:	2701      	movs	r7, #1
    ad22:	4cd1      	ldr	r4, [pc, #836]	; (b068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    ad24:	2500      	movs	r5, #0
    ad26:	f367 0907 	bfi	r9, r7, #0, #8
    ad2a:	80e5      	strh	r5, [r4, #6]
    ad2c:	70e5      	strb	r5, [r4, #3]
    ad2e:	7125      	strb	r5, [r4, #4]
    ad30:	7025      	strb	r5, [r4, #0]
    ad32:	60e0      	str	r0, [r4, #12]
    ad34:	4606      	mov	r6, r0
    ad36:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    ad3a:	8800      	ldrh	r0, [r0, #0]
    ad3c:	f7fa fba2 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    ad40:	ea5f 0a00 	movs.w	sl, r0
    ad44:	d010      	beq.n	ad68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    ad46:	68e0      	ldr	r0, [r4, #12]
    ad48:	8800      	ldrh	r0, [r0, #0]
    ad4a:	f7fa fecb 	bl	5ae4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    ad4e:	68e0      	ldr	r0, [r4, #12]
    ad50:	8800      	ldrh	r0, [r0, #0]
    ad52:	f7fa fe6d 	bl	5a30 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    ad56:	68e0      	ldr	r0, [r4, #12]
    ad58:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    ad5c:	b1a1      	cbz	r1, ad88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    ad5e:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    ad62:	29fe      	cmp	r1, #254	; 0xfe
    ad64:	d005      	beq.n	ad72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    ad66:	e014      	b.n	ad92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    ad68:	f640 31a8 	movw	r1, #2984	; 0xba8
    ad6c:	2031      	movs	r0, #49	; 0x31
    ad6e:	f7f9 ff5f 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad72:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    ad76:	b189      	cbz	r1, ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    ad78:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ad7c:	2301      	movs	r3, #1
    ad7e:	4619      	mov	r1, r3
    ad80:	3078      	adds	r0, #120	; 0x78
    ad82:	f006 fb74 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad86:	b188      	cbz	r0, adac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    ad88:	68e0      	ldr	r0, [r4, #12]
    ad8a:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    ad8e:	28fe      	cmp	r0, #254	; 0xfe
    ad90:	d004      	beq.n	ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    ad92:	68e0      	ldr	r0, [r4, #12]
    ad94:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    ad98:	f000 fc14 	bl	b5c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x53c>
    ad9c:	68e0      	ldr	r0, [r4, #12]
    ad9e:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    ada2:	2900      	cmp	r1, #0
    ada4:	bf18      	it	ne
    ada6:	8125      	strhne	r5, [r4, #8]
    ada8:	d11b      	bne.n	ade2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    adaa:	e00f      	b.n	adcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    adac:	68e0      	ldr	r0, [r4, #12]
    adae:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    adb2:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    adb6:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    adba:	2100      	movs	r1, #0
    adbc:	2002      	movs	r0, #2
    adbe:	f001 f8c1 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    adc2:	68e0      	ldr	r0, [r4, #12]
    adc4:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    adc8:	2002      	movs	r0, #2
    adca:	e7e5      	b.n	ad98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    adcc:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    add0:	b929      	cbnz	r1, adde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    add2:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    add4:	8902      	ldrh	r2, [r0, #8]
    add6:	4291      	cmp	r1, r2
    add8:	bf88      	it	hi
    adda:	8121      	strhhi	r1, [r4, #8]
    addc:	d801      	bhi.n	ade2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    adde:	8901      	ldrh	r1, [r0, #8]
    ade0:	8121      	strh	r1, [r4, #8]
    ade2:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    ade6:	1e49      	subs	r1, r1, #1
    ade8:	fa1f f881 	uxth.w	r8, r1
    adec:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    adf0:	4441      	add	r1, r8
    adf2:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    adf6:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    adfa:	2900      	cmp	r1, #0
    adfc:	bf1c      	itt	ne
    adfe:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    ae02:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    ae06:	d104      	bne.n	ae12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    ae08:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    ae0c:	4441      	add	r1, r8
    ae0e:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    ae12:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    ae16:	4441      	add	r1, r8
    ae18:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    ae1c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    ae20:	b939      	cbnz	r1, ae32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    ae22:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae26:	2301      	movs	r3, #1
    ae28:	2106      	movs	r1, #6
    ae2a:	3078      	adds	r0, #120	; 0x78
    ae2c:	f006 fb1f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae30:	b128      	cbz	r0, ae3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    ae32:	68e0      	ldr	r0, [r4, #12]
    ae34:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    ae38:	4441      	add	r1, r8
    ae3a:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    ae3e:	68e0      	ldr	r0, [r4, #12]
    ae40:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    ae44:	2901      	cmp	r1, #1
    ae46:	bf9c      	itt	ls
    ae48:	1c49      	addls	r1, r1, #1
    ae4a:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    ae4e:	f1b8 0f00 	cmp.w	r8, #0
    ae52:	bf18      	it	ne
    ae54:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    ae58:	4650      	mov	r0, sl
    ae5a:	f005 fe2c 	bl	10ab6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    ae5e:	4680      	mov	r8, r0
    ae60:	68e0      	ldr	r0, [r4, #12]
    ae62:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    ae66:	b199      	cbz	r1, ae90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    ae68:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    ae6c:	8922      	ldrh	r2, [r4, #8]
    ae6e:	4291      	cmp	r1, r2
    ae70:	d20e      	bcs.n	ae90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    ae72:	f1b8 0f00 	cmp.w	r8, #0
    ae76:	bf1c      	itt	ne
    ae78:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    ae7c:	2900      	cmpne	r1, #0
    ae7e:	d007      	beq.n	ae90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    ae80:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    ae84:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    ae88:	4281      	cmp	r1, r0
    ae8a:	bf28      	it	cs
    ae8c:	f7fa feca 	blcs	5c24 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    ae90:	68e2      	ldr	r2, [r4, #12]
    ae92:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    ae96:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    ae9a:	280b      	cmp	r0, #11
    ae9c:	bf18      	it	ne
    ae9e:	280c      	cmpne	r0, #12
    aea0:	d118      	bne.n	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    aea2:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    aea6:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    aeaa:	eba1 0103 	sub.w	r1, r1, r3
    aeae:	b209      	sxth	r1, r1
    aeb0:	2900      	cmp	r1, #0
    aeb2:	db0f      	blt.n	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    aeb4:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    aeb8:	f102 000c 	add.w	r0, r2, #12
    aebc:	f008 fc77 	bl	137ae <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    aec0:	2103      	movs	r1, #3
    aec2:	68e0      	ldr	r0, [r4, #12]
    aec4:	f7fc fb0c 	bl	74e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    aec8:	68e0      	ldr	r0, [r4, #12]
    aeca:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aece:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    aed2:	e093      	b.n	affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    aed4:	2824      	cmp	r0, #36	; 0x24
    aed6:	d146      	bne.n	af66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    aed8:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    aedc:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    aee0:	1a40      	subs	r0, r0, r1
    aee2:	b200      	sxth	r0, r0
    aee4:	2800      	cmp	r0, #0
    aee6:	db3e      	blt.n	af66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    aee8:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    aeec:	2800      	cmp	r0, #0
    aeee:	bf14      	ite	ne
    aef0:	f04f 0a01 	movne.w	sl, #1
    aef4:	f04f 0a00 	moveq.w	sl, #0
    aef8:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    aefc:	2900      	cmp	r1, #0
    aefe:	bf14      	ite	ne
    af00:	f04f 0c01 	movne.w	ip, #1
    af04:	f04f 0c00 	moveq.w	ip, #0
    af08:	f1ba 0f00 	cmp.w	sl, #0
    af0c:	bf08      	it	eq
    af0e:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    af12:	f1bc 0f00 	cmp.w	ip, #0
    af16:	bf08      	it	eq
    af18:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    af1c:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    af20:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    af24:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    af28:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    af2c:	2801      	cmp	r0, #1
    af2e:	d005      	beq.n	af3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    af30:	f1ba 0f00 	cmp.w	sl, #0
    af34:	bf08      	it	eq
    af36:	f1bc 0f00 	cmpeq.w	ip, #0
    af3a:	d003      	beq.n	af44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    af3c:	f04f 0000 	mov.w	r0, #0
    af40:	f001 f876 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    af44:	68e0      	ldr	r0, [r4, #12]
    af46:	f006 ff1f 	bl	11d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    af4a:	b130      	cbz	r0, af5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    af4c:	68e1      	ldr	r1, [r4, #12]
    af4e:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    af52:	8808      	ldrh	r0, [r1, #0]
    af54:	3128      	adds	r1, #40	; 0x28
    af56:	f006 fedc 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    af5a:	68e0      	ldr	r0, [r4, #12]
    af5c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    af60:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    af64:	e04a      	b.n	affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    af66:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    af6a:	2824      	cmp	r0, #36	; 0x24
    af6c:	bf18      	it	ne
    af6e:	2825      	cmpne	r0, #37	; 0x25
    af70:	d144      	bne.n	affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    af72:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    af76:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    af7a:	eba0 0001 	sub.w	r0, r0, r1
    af7e:	b200      	sxth	r0, r0
    af80:	2800      	cmp	r0, #0
    af82:	db3b      	blt.n	affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    af84:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    af88:	2800      	cmp	r0, #0
    af8a:	bf14      	ite	ne
    af8c:	f04f 0a01 	movne.w	sl, #1
    af90:	f04f 0a00 	moveq.w	sl, #0
    af94:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    af98:	2900      	cmp	r1, #0
    af9a:	bf14      	ite	ne
    af9c:	f04f 0c01 	movne.w	ip, #1
    afa0:	f04f 0c00 	moveq.w	ip, #0
    afa4:	f1ba 0f00 	cmp.w	sl, #0
    afa8:	bf08      	it	eq
    afaa:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    afae:	f1bc 0f00 	cmp.w	ip, #0
    afb2:	bf08      	it	eq
    afb4:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    afb8:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    afbc:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    afc0:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    afc4:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    afc8:	2801      	cmp	r0, #1
    afca:	d005      	beq.n	afd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    afcc:	f1ba 0f00 	cmp.w	sl, #0
    afd0:	bf08      	it	eq
    afd2:	f1bc 0f00 	cmpeq.w	ip, #0
    afd6:	d003      	beq.n	afe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    afd8:	f04f 0000 	mov.w	r0, #0
    afdc:	f001 f828 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    afe0:	68e0      	ldr	r0, [r4, #12]
    afe2:	f006 fed1 	bl	11d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    afe6:	b130      	cbz	r0, aff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    afe8:	68e1      	ldr	r1, [r4, #12]
    afea:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    afee:	8808      	ldrh	r0, [r1, #0]
    aff0:	3128      	adds	r1, #40	; 0x28
    aff2:	f006 fe8e 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    aff6:	68e0      	ldr	r0, [r4, #12]
    aff8:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    affc:	68e1      	ldr	r1, [r4, #12]
    affe:	f101 0078 	add.w	r0, r1, #120	; 0x78
    b002:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    b006:	f7fc f97b 	bl	7300 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    b00a:	68e0      	ldr	r0, [r4, #12]
    b00c:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    b010:	2900      	cmp	r1, #0
    b012:	bf18      	it	ne
    b014:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    b018:	f1b8 0f00 	cmp.w	r8, #0
    b01c:	bf17      	itett	ne
    b01e:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    b022:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    b026:	2800      	cmpne	r0, #0
    b028:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b02c:	480f      	ldr	r0, [pc, #60]	; (b06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    b02e:	9000      	str	r0, [sp, #0]
    b030:	4b0f      	ldr	r3, [pc, #60]	; (b070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    b032:	4a10      	ldr	r2, [pc, #64]	; (b074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    b034:	4631      	mov	r1, r6
    b036:	4648      	mov	r0, r9
    b038:	f7fa fe52 	bl	5ce0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    b03c:	69e1      	ldr	r1, [r4, #28]
    b03e:	2900      	cmp	r1, #0
    b040:	bf1c      	itt	ne
    b042:	7860      	ldrbne	r0, [r4, #1]
    b044:	f003 fa80 	blne	e548 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    b048:	68e0      	ldr	r0, [r4, #12]
    b04a:	2301      	movs	r3, #1
    b04c:	2105      	movs	r1, #5
    b04e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b052:	3078      	adds	r0, #120	; 0x78
    b054:	f006 fa0b 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b058:	2800      	cmp	r0, #0
    b05a:	bf08      	it	eq
    b05c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b060:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b064:	f7fa be36 	b.w	5cd4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    b068:	20000144 	.word	0x20000144
    b06c:	0000b789 	.word	0x0000b789
    b070:	0000b0a5 	.word	0x0000b0a5
    b074:	0000bf7d 	.word	0x0000bf7d

0000b078 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    b078:	4802      	ldr	r0, [pc, #8]	; (b084 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    b07a:	2100      	movs	r1, #0
    b07c:	6181      	str	r1, [r0, #24]
    b07e:	61c1      	str	r1, [r0, #28]
    b080:	4608      	mov	r0, r1
    b082:	4770      	bx	lr
    b084:	20000144 	.word	0x20000144

0000b088 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    b088:	4805      	ldr	r0, [pc, #20]	; (b0a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    b08a:	68c0      	ldr	r0, [r0, #12]
    b08c:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    b090:	b118      	cbz	r0, b09a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    b092:	2100      	movs	r1, #0
    b094:	4608      	mov	r0, r1
    b096:	f000 bb77 	b.w	b788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x700>
    b09a:	f7fa bfdd 	b.w	6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    b09e:	0000      	.short	0x0000
    b0a0:	20000144 	.word	0x20000144
    b0a4:	490d      	ldr	r1, [pc, #52]	; (b0dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    b0a6:	4602      	mov	r2, r0
    b0a8:	78c8      	ldrb	r0, [r1, #3]
    b0aa:	790b      	ldrb	r3, [r1, #4]
    b0ac:	4318      	orrs	r0, r3
    b0ae:	d113      	bne.n	b0d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    b0b0:	4608      	mov	r0, r1
    b0b2:	68c0      	ldr	r0, [r0, #12]
    b0b4:	b14a      	cbz	r2, b0ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    b0b6:	7989      	ldrb	r1, [r1, #6]
    b0b8:	f011 0f08 	tst.w	r1, #8
    b0bc:	d003      	beq.n	b0c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    b0be:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    b0c2:	2808      	cmp	r0, #8
    b0c4:	d008      	beq.n	b0d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    b0c6:	2001      	movs	r0, #1
    b0c8:	4770      	bx	lr
    b0ca:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    b0ce:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    b0d0:	428a      	cmp	r2, r1
    b0d2:	d801      	bhi.n	b0d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    b0d4:	f7fe be3a 	b.w	9d4c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    b0d8:	2000      	movs	r0, #0
    b0da:	4770      	bx	lr
    b0dc:	20000144 	.word	0x20000144
    b0e0:	b570      	push	{r4, r5, r6, lr}
    b0e2:	4cfd      	ldr	r4, [pc, #1012]	; (b4d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x450>)
    b0e4:	68e0      	ldr	r0, [r4, #12]
    b0e6:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    b0ea:	29fe      	cmp	r1, #254	; 0xfe
    b0ec:	bf06      	itte	eq
    b0ee:	78e1      	ldrbeq	r1, [r4, #3]
    b0f0:	2900      	cmpeq	r1, #0
    b0f2:	bd70      	popne	{r4, r5, r6, pc}
    b0f4:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b0f8:	f04f 0301 	mov.w	r3, #1
    b0fc:	4619      	mov	r1, r3
    b0fe:	f100 0078 	add.w	r0, r0, #120	; 0x78
    b102:	f006 f9b4 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b106:	2800      	cmp	r0, #0
    b108:	bf18      	it	ne
    b10a:	bd70      	popne	{r4, r5, r6, pc}
    b10c:	68e0      	ldr	r0, [r4, #12]
    b10e:	2500      	movs	r5, #0
    b110:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    b114:	b159      	cbz	r1, b12e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    b116:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    b11a:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    b11e:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    b122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b126:	2100      	movs	r1, #0
    b128:	2002      	movs	r0, #2
    b12a:	f000 bf0b 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b12e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b132:	2301      	movs	r3, #1
    b134:	2104      	movs	r1, #4
    b136:	3078      	adds	r0, #120	; 0x78
    b138:	f006 f999 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b13c:	0006      	movs	r6, r0
    b13e:	68e0      	ldr	r0, [r4, #12]
    b140:	d00c      	beq.n	b15c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4>
    b142:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b146:	2910      	cmp	r1, #16
    b148:	d07e      	beq.n	b248 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    b14a:	2914      	cmp	r1, #20
    b14c:	d07d      	beq.n	b24a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    b14e:	2915      	cmp	r1, #21
    b150:	d07c      	beq.n	b24c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    b152:	291b      	cmp	r1, #27
    b154:	f000 80fe 	beq.w	b354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2cc>
    b158:	f000 b912 	b.w	b380 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f8>
    b15c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b160:	f011 0f01 	tst.w	r1, #1
    b164:	d005      	beq.n	b172 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea>
    b166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b16a:	2101      	movs	r1, #1
    b16c:	2009      	movs	r0, #9
    b16e:	f000 bee9 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b172:	f011 0f02 	tst.w	r1, #2
    b176:	d00b      	beq.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108>
    b178:	2101      	movs	r1, #1
    b17a:	200c      	movs	r0, #12
    b17c:	f000 fee2 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b180:	68e0      	ldr	r0, [r4, #12]
    b182:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    b186:	f041 0101 	orr.w	r1, r1, #1
    b18a:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b18e:	bd70      	pop	{r4, r5, r6, pc}
    b190:	f011 0f04 	tst.w	r1, #4
    b194:	d005      	beq.n	b1a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a>
    b196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b19a:	2101      	movs	r1, #1
    b19c:	2013      	movs	r0, #19
    b19e:	f000 bed1 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b1a2:	f011 0f08 	tst.w	r1, #8
    b1a6:	d009      	beq.n	b1bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134>
    b1a8:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    b1ac:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    b1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b1b4:	2101      	movs	r1, #1
    b1b6:	2007      	movs	r0, #7
    b1b8:	f000 bec4 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b1bc:	f011 0f30 	tst.w	r1, #48	; 0x30
    b1c0:	d07e      	beq.n	b2c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    b1c2:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    b1c6:	2900      	cmp	r1, #0
    b1c8:	d17a      	bne.n	b2c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    b1ca:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    b1ce:	b1c9      	cbz	r1, b204 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c>
    b1d0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b1d4:	2924      	cmp	r1, #36	; 0x24
    b1d6:	bf1b      	ittet	ne
    b1d8:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    b1dc:	2924      	cmpne	r1, #36	; 0x24
    b1de:	2301      	moveq	r3, #1
    b1e0:	2300      	movne	r3, #0
    b1e2:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    b1e6:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    b1ea:	f7fc ff59 	bl	80a0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    b1ee:	68e0      	ldr	r0, [r4, #12]
    b1f0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b1f4:	f021 0120 	bic.w	r1, r1, #32
    b1f8:	f041 0110 	orr.w	r1, r1, #16
    b1fc:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b200:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    b204:	68e0      	ldr	r0, [r4, #12]
    b206:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b20a:	f011 0f10 	tst.w	r1, #16
    b20e:	d057      	beq.n	b2c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    b210:	f006 fdba 	bl	11d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b214:	68e1      	ldr	r1, [r4, #12]
    b216:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b21a:	2801      	cmp	r0, #1
    b21c:	bf04      	itt	eq
    b21e:	2002      	moveq	r0, #2
    b220:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b224:	d008      	beq.n	b238 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0>
    b226:	8808      	ldrh	r0, [r1, #0]
    b228:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b22c:	3128      	adds	r1, #40	; 0x28
    b22e:	f006 fd70 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b232:	7960      	ldrb	r0, [r4, #5]
    b234:	f7f9 faea 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b238:	68e0      	ldr	r0, [r4, #12]
    b23a:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    b23e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    b242:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    b246:	e002      	b.n	b24e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    b248:	e009      	b.n	b25e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    b24a:	e00e      	b.n	b26a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    b24c:	e04e      	b.n	b2ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x264>
    b24e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    b252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b256:	2101      	movs	r1, #1
    b258:	2015      	movs	r0, #21
    b25a:	f000 be73 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b25e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b262:	2101      	movs	r1, #1
    b264:	200b      	movs	r0, #11
    b266:	f000 be6d 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b26a:	f890 10fa 	ldrb.w	r1, [r0, #250]	; 0xfa
    b26e:	2908      	cmp	r1, #8
    b270:	d20f      	bcs.n	b292 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20a>
    b272:	f101 0208 	add.w	r2, r1, #8
    b276:	f1c1 0108 	rsb	r1, r1, #8
    b27a:	4410      	add	r0, r2
    b27c:	b2c9      	uxtb	r1, r1
    b27e:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    b282:	f7fa fb2b 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    b286:	68e1      	ldr	r1, [r4, #12]
    b288:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
    b28c:	4410      	add	r0, r2
    b28e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    b292:	68e3      	ldr	r3, [r4, #12]
    b294:	f893 00fa 	ldrb.w	r0, [r3, #250]	; 0xfa
    b298:	f1a0 0108 	sub.w	r1, r0, #8
    b29c:	2904      	cmp	r1, #4
    b29e:	d20e      	bcs.n	b2be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    b2a0:	1f02      	subs	r2, r0, #4
    b2a2:	3808      	subs	r0, #8
    b2a4:	f1c0 0004 	rsb	r0, r0, #4
    b2a8:	b2c1      	uxtb	r1, r0
    b2aa:	1898      	adds	r0, r3, r2
    b2ac:	30e8      	adds	r0, #232	; 0xe8
    b2ae:	f7fa fb15 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    b2b2:	68e1      	ldr	r1, [r4, #12]
    b2b4:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
    b2b8:	4410      	add	r0, r2
    b2ba:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    b2be:	e000      	b.n	b2c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x23a>
    b2c0:	e04e      	b.n	b360 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2d8>
    b2c2:	68e0      	ldr	r0, [r4, #12]
    b2c4:	f890 10fa 	ldrb.w	r1, [r0, #250]	; 0xfa
    b2c8:	290c      	cmp	r1, #12
    b2ca:	bf38      	it	cc
    b2cc:	bd70      	popcc	{r4, r5, r6, pc}
    b2ce:	d005      	beq.n	b2dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x254>
    b2d0:	f240 71ac 	movw	r1, #1964	; 0x7ac
    b2d4:	f04f 0031 	mov.w	r0, #49	; 0x31
    b2d8:	f7f9 fcaa 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2dc:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    b2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b2e4:	2101      	movs	r1, #1
    b2e6:	2004      	movs	r0, #4
    b2e8:	f000 be2c 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b2ec:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    b2f0:	2901      	cmp	r1, #1
    b2f2:	d00b      	beq.n	b30c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x284>
    b2f4:	2902      	cmp	r1, #2
    b2f6:	bf18      	it	ne
    b2f8:	bd70      	popne	{r4, r5, r6, pc}
    b2fa:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    b2fe:	b1d9      	cbz	r1, b338 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b0>
    b300:	2106      	movs	r1, #6
    b302:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    b306:	2101      	movs	r1, #1
    b308:	2002      	movs	r0, #2
    b30a:	e01d      	b.n	b348 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2c0>
    b30c:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    b310:	2900      	cmp	r1, #0
    b312:	bf18      	it	ne
    b314:	bd70      	popne	{r4, r5, r6, pc}
    b316:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    b31a:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b31e:	2200      	movs	r2, #0
    b320:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    b324:	f7fb ffaa 	bl	727c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    b328:	2101      	movs	r1, #1
    b32a:	2005      	movs	r0, #5
    b32c:	f000 fe0a 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b330:	68e0      	ldr	r0, [r4, #12]
    b332:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    b336:	bd70      	pop	{r4, r5, r6, pc}
    b338:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    b33c:	f010 0f04 	tst.w	r0, #4
    b340:	bf14      	ite	ne
    b342:	2011      	movne	r0, #17
    b344:	200d      	moveq	r0, #13
    b346:	2101      	movs	r1, #1
    b348:	f000 fdfc 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b34c:	68e0      	ldr	r0, [r4, #12]
    b34e:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    b352:	bd70      	pop	{r4, r5, r6, pc}
    b354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b358:	2101      	movs	r1, #1
    b35a:	2006      	movs	r0, #6
    b35c:	f000 bdf2 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b360:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b364:	2921      	cmp	r1, #33	; 0x21
    b366:	d10b      	bne.n	b380 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f8>
    b368:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b36c:	2902      	cmp	r1, #2
    b36e:	d01d      	beq.n	b3ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x324>
    b370:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b374:	2901      	cmp	r1, #1
    b376:	bf04      	itt	eq
    b378:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    b37c:	2800      	cmpeq	r0, #0
    b37e:	d015      	beq.n	b3ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x324>
    b380:	68e0      	ldr	r0, [r4, #12]
    b382:	f04f 0301 	mov.w	r3, #1
    b386:	f04f 0100 	mov.w	r1, #0
    b38a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b38e:	f100 0078 	add.w	r0, r0, #120	; 0x78
    b392:	f006 f86c 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b396:	b1c8      	cbz	r0, b3cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    b398:	68e0      	ldr	r0, [r4, #12]
    b39a:	2301      	movs	r3, #1
    b39c:	2104      	movs	r1, #4
    b39e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b3a2:	3078      	adds	r0, #120	; 0x78
    b3a4:	f006 f863 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3a8:	b130      	cbz	r0, b3b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x330>
    b3aa:	e00f      	b.n	b3cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    b3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3b0:	2101      	movs	r1, #1
    b3b2:	2017      	movs	r0, #23
    b3b4:	f000 bdc6 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b3b8:	68e0      	ldr	r0, [r4, #12]
    b3ba:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    b3be:	b128      	cbz	r0, b3cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    b3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3c4:	2100      	movs	r1, #0
    b3c6:	2012      	movs	r0, #18
    b3c8:	f000 bdbc 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b3cc:	68e0      	ldr	r0, [r4, #12]
    b3ce:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b3d2:	2a0a      	cmp	r2, #10
    b3d4:	d015      	beq.n	b402 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x37a>
    b3d6:	2e00      	cmp	r6, #0
    b3d8:	bf18      	it	ne
    b3da:	bd70      	popne	{r4, r5, r6, pc}
    b3dc:	2301      	movs	r3, #1
    b3de:	2100      	movs	r1, #0
    b3e0:	3078      	adds	r0, #120	; 0x78
    b3e2:	f006 f844 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3e6:	2800      	cmp	r0, #0
    b3e8:	d078      	beq.n	b4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    b3ea:	68e0      	ldr	r0, [r4, #12]
    b3ec:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    b3f0:	b189      	cbz	r1, b416 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x38e>
    b3f2:	2100      	movs	r1, #0
    b3f4:	200e      	movs	r0, #14
    b3f6:	f000 fda5 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b3fa:	68e0      	ldr	r0, [r4, #12]
    b3fc:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    b400:	bd70      	pop	{r4, r5, r6, pc}
    b402:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    b406:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    b40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b40e:	2100      	movs	r1, #0
    b410:	2007      	movs	r0, #7
    b412:	f000 bd97 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b416:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    b41a:	b121      	cbz	r1, b426 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x39e>
    b41c:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    b420:	f011 0f03 	tst.w	r1, #3
    b424:	d00e      	beq.n	b444 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3bc>
    b426:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    b42a:	b111      	cbz	r1, b432 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3aa>
    b42c:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    b430:	b1c1      	cbz	r1, b464 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3dc>
    b432:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b436:	2901      	cmp	r1, #1
    b438:	bf04      	itt	eq
    b43a:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    b43e:	2900      	cmpeq	r1, #0
    b440:	d14c      	bne.n	b4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    b442:	e02f      	b.n	b4a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    b444:	f04f 0100 	mov.w	r1, #0
    b448:	f04f 000c 	mov.w	r0, #12
    b44c:	f000 fd7a 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b450:	68e0      	ldr	r0, [r4, #12]
    b452:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    b456:	f041 0101 	orr.w	r1, r1, #1
    b45a:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b45e:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    b462:	bd70      	pop	{r4, r5, r6, pc}
    b464:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b468:	2924      	cmp	r1, #36	; 0x24
    b46a:	bf1d      	ittte	ne
    b46c:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    b470:	2924      	cmpne	r1, #36	; 0x24
    b472:	2300      	movne	r3, #0
    b474:	2301      	moveq	r3, #1
    b476:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    b47a:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    b47e:	f7fc fe0f 	bl	80a0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    b482:	68e0      	ldr	r0, [r4, #12]
    b484:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    b488:	2100      	movs	r1, #0
    b48a:	2014      	movs	r0, #20
    b48c:	f000 fd5a 	bl	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b490:	68e0      	ldr	r0, [r4, #12]
    b492:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    b496:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    b49a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    b49e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    b4a2:	bd70      	pop	{r4, r5, r6, pc}
    b4a4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b4a8:	2301      	movs	r3, #1
    b4aa:	210b      	movs	r1, #11
    b4ac:	3078      	adds	r0, #120	; 0x78
    b4ae:	f005 ffde 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b4b2:	b998      	cbnz	r0, b4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    b4b4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b4b8:	f89c 1066 	ldrb.w	r1, [ip, #102]	; 0x66
    b4bc:	2901      	cmp	r1, #1
    b4be:	bf08      	it	eq
    b4c0:	2201      	moveq	r2, #1
    b4c2:	d012      	beq.n	b4ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    b4c4:	2902      	cmp	r1, #2
    b4c6:	bf08      	it	eq
    b4c8:	2202      	moveq	r2, #2
    b4ca:	d00e      	beq.n	b4ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    b4cc:	2904      	cmp	r1, #4
    b4ce:	bf14      	ite	ne
    b4d0:	2908      	cmpne	r1, #8
    b4d2:	2203      	moveq	r2, #3
    b4d4:	d009      	beq.n	b4ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    b4d6:	e002      	b.n	b4de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    b4d8:	20000144 	.word	0x20000144
    b4dc:	e055      	b.n	b58a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    b4de:	f240 218f 	movw	r1, #655	; 0x28f
    b4e2:	f04f 0006 	mov.w	r0, #6
    b4e6:	f7f9 fba3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4ea:	f89c 0067 	ldrb.w	r0, [ip, #103]	; 0x67
    b4ee:	2801      	cmp	r0, #1
    b4f0:	bf18      	it	ne
    b4f2:	2802      	cmpne	r0, #2
    b4f4:	d004      	beq.n	b500 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x478>
    b4f6:	2804      	cmp	r0, #4
    b4f8:	bf14      	ite	ne
    b4fa:	2808      	cmpne	r0, #8
    b4fc:	2003      	moveq	r0, #3
    b4fe:	d1ea      	bne.n	b4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x44e>
    b500:	f89c 31c0 	ldrb.w	r3, [ip, #448]	; 0x1c0
    b504:	2a01      	cmp	r2, #1
    b506:	d006      	beq.n	b516 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x48e>
    b508:	2a02      	cmp	r2, #2
    b50a:	d007      	beq.n	b51c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x494>
    b50c:	2a03      	cmp	r2, #3
    b50e:	bf08      	it	eq
    b510:	2b04      	cmpeq	r3, #4
    b512:	d005      	beq.n	b520 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x498>
    b514:	e014      	b.n	b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    b516:	2b01      	cmp	r3, #1
    b518:	d112      	bne.n	b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    b51a:	e001      	b.n	b520 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x498>
    b51c:	2b02      	cmp	r3, #2
    b51e:	d10f      	bne.n	b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    b520:	f89c 21c1 	ldrb.w	r2, [ip, #449]	; 0x1c1
    b524:	2801      	cmp	r0, #1
    b526:	d006      	beq.n	b536 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ae>
    b528:	2802      	cmp	r0, #2
    b52a:	d007      	beq.n	b53c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b4>
    b52c:	2803      	cmp	r0, #3
    b52e:	bf08      	it	eq
    b530:	2a04      	cmpeq	r2, #4
    b532:	d00f      	beq.n	b554 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    b534:	e004      	b.n	b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    b536:	2a01      	cmp	r2, #1
    b538:	d102      	bne.n	b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    b53a:	e00b      	b.n	b554 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    b53c:	2a02      	cmp	r2, #2
    b53e:	d009      	beq.n	b554 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    b540:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b544:	2301      	movs	r3, #1
    b546:	2103      	movs	r1, #3
    b548:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b54c:	f005 ff8f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b550:	b9d8      	cbnz	r0, b58a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    b552:	e011      	b.n	b578 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f0>
    b554:	f8bc 3078 	ldrh.w	r3, [ip, #120]	; 0x78
    b558:	f8bc 01c2 	ldrh.w	r0, [ip, #450]	; 0x1c2
    b55c:	f50c 72d2 	add.w	r2, ip, #420	; 0x1a4
    b560:	f006 f8e3 	bl	1172a <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    b564:	b120      	cbz	r0, b570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4e8>
    b566:	68e1      	ldr	r1, [r4, #12]
    b568:	2025      	movs	r0, #37	; 0x25
    b56a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b56e:	bd70      	pop	{r4, r5, r6, pc}
    b570:	2000      	movs	r0, #0
    b572:	f000 fd5d 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b576:	e008      	b.n	b58a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    b578:	68e0      	ldr	r0, [r4, #12]
    b57a:	2301      	movs	r3, #1
    b57c:	2102      	movs	r1, #2
    b57e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b582:	3078      	adds	r0, #120	; 0x78
    b584:	f005 ff73 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b588:	b1b0      	cbz	r0, b5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    b58a:	68e0      	ldr	r0, [r4, #12]
    b58c:	2301      	movs	r3, #1
    b58e:	2100      	movs	r1, #0
    b590:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b594:	3078      	adds	r0, #120	; 0x78
    b596:	f005 ff6a 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b59a:	2800      	cmp	r0, #0
    b59c:	bf08      	it	eq
    b59e:	bd70      	popeq	{r4, r5, r6, pc}
    b5a0:	68e0      	ldr	r0, [r4, #12]
    b5a2:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    b5a6:	2800      	cmp	r0, #0
    b5a8:	bf08      	it	eq
    b5aa:	bd70      	popeq	{r4, r5, r6, pc}
    b5ac:	2100      	movs	r1, #0
    b5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b5b2:	20ff      	movs	r0, #255	; 0xff
    b5b4:	f000 bcc6 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b5bc:	2100      	movs	r1, #0
    b5be:	2016      	movs	r0, #22
    b5c0:	f000 bcc0 	b.w	bf44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    b5c4:	b570      	push	{r4, r5, r6, lr}
    b5c6:	b084      	sub	sp, #16
    b5c8:	4605      	mov	r5, r0
    b5ca:	4668      	mov	r0, sp
    b5cc:	f7fa fa74 	bl	5ab8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    b5d0:	b318      	cbz	r0, b61a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x592>
    b5d2:	2222      	movs	r2, #34	; 0x22
    b5d4:	2100      	movs	r1, #0
    b5d6:	9800      	ldr	r0, [sp, #0]
    b5d8:	f004 fd52 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b5dc:	2103      	movs	r1, #3
    b5de:	9800      	ldr	r0, [sp, #0]
    b5e0:	f006 fa42 	bl	11a68 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    b5e4:	9800      	ldr	r0, [sp, #0]
    b5e6:	7801      	ldrb	r1, [r0, #0]
    b5e8:	f021 0110 	bic.w	r1, r1, #16
    b5ec:	7001      	strb	r1, [r0, #0]
    b5ee:	4629      	mov	r1, r5
    b5f0:	f7fc fa06 	bl	7a00 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    b5f4:	2200      	movs	r2, #0
    b5f6:	4c63      	ldr	r4, [pc, #396]	; (b784 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fc>)
    b5f8:	f644 162f 	movw	r6, #18735	; 0x492f
    b5fc:	2d0e      	cmp	r5, #14
    b5fe:	d06e      	beq.n	b6de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    b600:	dc10      	bgt.n	b624 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59c>
    b602:	f1a5 0002 	sub.w	r0, r5, #2
    b606:	280c      	cmp	r0, #12
    b608:	d21e      	bcs.n	b648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c0>
    b60a:	e8df f000 	tbb	[pc, r0]
    b60e:	1d22      	.short	0x1d22
    b610:	22b0b048 	.word	0x22b0b048
    b614:	b01d551d 	.word	0xb01d551d
    b618:	3b27      	.short	0x3b27
    b61a:	f640 116e 	movw	r1, #2414	; 0x96e
    b61e:	2031      	movs	r0, #49	; 0x31
    b620:	f7f9 fb06 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b624:	2d15      	cmp	r5, #21
    b626:	d05b      	beq.n	b6e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x658>
    b628:	dc08      	bgt.n	b63c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5b4>
    b62a:	2d11      	cmp	r5, #17
    b62c:	d021      	beq.n	b672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5ea>
    b62e:	2d12      	cmp	r5, #18
    b630:	bf18      	it	ne
    b632:	2d13      	cmpne	r5, #19
    b634:	d03f      	beq.n	b6b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x62e>
    b636:	2d14      	cmp	r5, #20
    b638:	d052      	beq.n	b6e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x658>
    b63a:	e005      	b.n	b648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c0>
    b63c:	2d16      	cmp	r5, #22
    b63e:	d025      	beq.n	b68c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x604>
    b640:	2d17      	cmp	r5, #23
    b642:	d066      	beq.n	b712 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x68a>
    b644:	2dff      	cmp	r5, #255	; 0xff
    b646:	d076      	beq.n	b736 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ae>
    b648:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
    b64c:	2031      	movs	r0, #49	; 0x31
    b64e:	f7f9 faef 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b652:	68e1      	ldr	r1, [r4, #12]
    b654:	9800      	ldr	r0, [sp, #0]
    b656:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    b65a:	e015      	b.n	b688 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x600>
    b65c:	9800      	ldr	r0, [sp, #0]
    b65e:	210b      	movs	r1, #11
    b660:	7101      	strb	r1, [r0, #4]
    b662:	2159      	movs	r1, #89	; 0x59
    b664:	7141      	strb	r1, [r0, #5]
    b666:	7182      	strb	r2, [r0, #6]
    b668:	2190      	movs	r1, #144	; 0x90
    b66a:	71c1      	strb	r1, [r0, #7]
    b66c:	2111      	movs	r1, #17
    b66e:	7201      	strb	r1, [r0, #8]
    b670:	e07d      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b672:	2103      	movs	r1, #3
    b674:	9800      	ldr	r0, [sp, #0]
    b676:	f006 f9d3 	bl	11a20 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    b67a:	2106      	movs	r1, #6
    b67c:	9800      	ldr	r0, [sp, #0]
    b67e:	f006 f9d1 	bl	11a24 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    b682:	e074      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b684:	9800      	ldr	r0, [sp, #0]
    b686:	2106      	movs	r1, #6
    b688:	7101      	strb	r1, [r0, #4]
    b68a:	e070      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b68c:	68e1      	ldr	r1, [r4, #12]
    b68e:	9800      	ldr	r0, [sp, #0]
    b690:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    b694:	7102      	strb	r2, [r0, #4]
    b696:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    b69a:	7141      	strb	r1, [r0, #5]
    b69c:	e067      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b69e:	68e0      	ldr	r0, [r4, #12]
    b6a0:	f500 7192 	add.w	r1, r0, #292	; 0x124
    b6a4:	9800      	ldr	r0, [sp, #0]
    b6a6:	f006 f9d0 	bl	11a4a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    b6aa:	68e0      	ldr	r0, [r4, #12]
    b6ac:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    b6b0:	9800      	ldr	r0, [sp, #0]
    b6b2:	f006 f9c7 	bl	11a44 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    b6b6:	e05a      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b6b8:	9202      	str	r2, [sp, #8]
    b6ba:	9203      	str	r2, [sp, #12]
    b6bc:	f002 fd00 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b6c0:	68e1      	ldr	r1, [r4, #12]
    b6c2:	4030      	ands	r0, r6
    b6c4:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    b6c8:	4001      	ands	r1, r0
    b6ca:	f88d 1008 	strb.w	r1, [sp, #8]
    b6ce:	0a00      	lsrs	r0, r0, #8
    b6d0:	f88d 0009 	strb.w	r0, [sp, #9]
    b6d4:	a902      	add	r1, sp, #8
    b6d6:	9800      	ldr	r0, [sp, #0]
    b6d8:	f006 f9c1 	bl	11a5e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    b6dc:	e047      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b6de:	e02b      	b.n	b738 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b0>
    b6e0:	68e0      	ldr	r0, [r4, #12]
    b6e2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    b6e6:	9800      	ldr	r0, [sp, #0]
    b6e8:	f006 f9c6 	bl	11a78 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    b6ec:	68e0      	ldr	r0, [r4, #12]
    b6ee:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    b6f2:	9800      	ldr	r0, [sp, #0]
    b6f4:	f006 f9c4 	bl	11a80 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    b6f8:	68e0      	ldr	r0, [r4, #12]
    b6fa:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    b6fe:	9800      	ldr	r0, [sp, #0]
    b700:	f006 f9c2 	bl	11a88 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    b704:	68e0      	ldr	r0, [r4, #12]
    b706:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    b70a:	9800      	ldr	r0, [sp, #0]
    b70c:	f006 f9c0 	bl	11a90 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    b710:	e02d      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b712:	68e0      	ldr	r0, [r4, #12]
    b714:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b718:	2901      	cmp	r1, #1
    b71a:	9900      	ldr	r1, [sp, #0]
    b71c:	bf14      	ite	ne
    b71e:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    b722:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    b726:	710a      	strb	r2, [r1, #4]
    b728:	bf14      	ite	ne
    b72a:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    b72e:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    b732:	7148      	strb	r0, [r1, #5]
    b734:	e01b      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b736:	e012      	b.n	b75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    b738:	9202      	str	r2, [sp, #8]
    b73a:	9203      	str	r2, [sp, #12]
    b73c:	f002 fcc0 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b740:	68e1      	ldr	r1, [r4, #12]
    b742:	4030      	ands	r0, r6
    b744:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    b748:	4001      	ands	r1, r0
    b74a:	f88d 1008 	strb.w	r1, [sp, #8]
    b74e:	0a00      	lsrs	r0, r0, #8
    b750:	f88d 0009 	strb.w	r0, [sp, #9]
    b754:	a902      	add	r1, sp, #8
    b756:	9800      	ldr	r0, [sp, #0]
    b758:	f006 f97c 	bl	11a54 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    b75c:	e007      	b.n	b76e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    b75e:	68e0      	ldr	r0, [r4, #12]
    b760:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    b764:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    b768:	9800      	ldr	r0, [sp, #0]
    b76a:	f006 f95d 	bl	11a28 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    b76e:	f7fa f97b 	bl	5a68 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    b772:	2800      	cmp	r0, #0
    b774:	bf1c      	itt	ne
    b776:	b004      	addne	sp, #16
    b778:	bd70      	popne	{r4, r5, r6, pc}
    b77a:	f640 11e4 	movw	r1, #2532	; 0x9e4
    b77e:	2031      	movs	r0, #49	; 0x31
    b780:	f7f9 fa56 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b784:	20000144 	.word	0x20000144
    b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b78c:	4cff      	ldr	r4, [pc, #1020]	; (bb8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb04>)
    b78e:	4682      	mov	sl, r0
    b790:	b087      	sub	sp, #28
    b792:	68e0      	ldr	r0, [r4, #12]
    b794:	460d      	mov	r5, r1
    b796:	8800      	ldrh	r0, [r0, #0]
    b798:	f7f9 fe74 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    b79c:	9005      	str	r0, [sp, #20]
    b79e:	b178      	cbz	r0, b7c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x738>
    b7a0:	78e0      	ldrb	r0, [r4, #3]
    b7a2:	4328      	orrs	r0, r5
    b7a4:	70e0      	strb	r0, [r4, #3]
    b7a6:	88e0      	ldrh	r0, [r4, #6]
    b7a8:	f04f 0500 	mov.w	r5, #0
    b7ac:	f410 7f80 	tst.w	r0, #256	; 0x100
    b7b0:	68e0      	ldr	r0, [r4, #12]
    b7b2:	bf1c      	itt	ne
    b7b4:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    b7b8:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    b7bc:	d005      	beq.n	b7ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    b7be:	e009      	b.n	b7d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74c>
    b7c0:	f640 5176 	movw	r1, #3446	; 0xd76
    b7c4:	2031      	movs	r0, #49	; 0x31
    b7c6:	f7f9 fa33 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ca:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    b7ce:	1c49      	adds	r1, r1, #1
    b7d0:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    b7d4:	68e0      	ldr	r0, [r4, #12]
    b7d6:	2701      	movs	r7, #1
    b7d8:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b7dc:	b939      	cbnz	r1, b7ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x766>
    b7de:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b7e2:	2301      	movs	r3, #1
    b7e4:	2106      	movs	r1, #6
    b7e6:	3078      	adds	r0, #120	; 0x78
    b7e8:	f005 fe41 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b7ec:	b340      	cbz	r0, b840 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    b7ee:	88e0      	ldrh	r0, [r4, #6]
    b7f0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    b7f4:	d007      	beq.n	b806 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x77e>
    b7f6:	68e0      	ldr	r0, [r4, #12]
    b7f8:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b7fc:	2900      	cmp	r1, #0
    b7fe:	bf18      	it	ne
    b800:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    b804:	d11c      	bne.n	b840 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    b806:	68e0      	ldr	r0, [r4, #12]
    b808:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    b80c:	1c49      	adds	r1, r1, #1
    b80e:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    b812:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    b816:	428a      	cmp	r2, r1
    b818:	bf2c      	ite	cs
    b81a:	1a53      	subcs	r3, r2, r1
    b81c:	2300      	movcc	r3, #0
    b81e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    b822:	f10c 0c05 	add.w	ip, ip, #5
    b826:	4563      	cmp	r3, ip
    b828:	bf98      	it	ls
    b82a:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    b82e:	4291      	cmp	r1, r2
    b830:	d306      	bcc.n	b840 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    b832:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    b836:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    b83a:	7960      	ldrb	r0, [r4, #5]
    b83c:	f7f8 ffe6 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b840:	88e0      	ldrh	r0, [r4, #6]
    b842:	f04f 0602 	mov.w	r6, #2
    b846:	f410 7f40 	tst.w	r0, #768	; 0x300
    b84a:	d011      	beq.n	b870 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    b84c:	68e0      	ldr	r0, [r4, #12]
    b84e:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b852:	b111      	cbz	r1, b85a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d2>
    b854:	2903      	cmp	r1, #3
    b856:	d006      	beq.n	b866 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7de>
    b858:	e00a      	b.n	b870 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    b85a:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    b85e:	2101      	movs	r1, #1
    b860:	f7fe faa0 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b864:	e004      	b.n	b870 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    b866:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    b86a:	2101      	movs	r1, #1
    b86c:	f7fe fa9a 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b870:	68e0      	ldr	r0, [r4, #12]
    b872:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b876:	2901      	cmp	r1, #1
    b878:	d105      	bne.n	b886 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7fe>
    b87a:	88e1      	ldrh	r1, [r4, #6]
    b87c:	f411 6f80 	tst.w	r1, #1024	; 0x400
    b880:	bf18      	it	ne
    b882:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    b886:	f04f 0808 	mov.w	r8, #8
    b88a:	f1ba 0f00 	cmp.w	sl, #0
    b88e:	f040 8295 	bne.w	bdbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    b892:	88e1      	ldrh	r1, [r4, #6]
    b894:	f011 0f40 	tst.w	r1, #64	; 0x40
    b898:	bf18      	it	ne
    b89a:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    b89e:	d104      	bne.n	b8aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x822>
    b8a0:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    b8a4:	1c52      	adds	r2, r2, #1
    b8a6:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    b8aa:	78e2      	ldrb	r2, [r4, #3]
    b8ac:	2a00      	cmp	r2, #0
    b8ae:	d178      	bne.n	b9a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91a>
    b8b0:	f011 0f08 	tst.w	r1, #8
    b8b4:	f04f 0b20 	mov.w	fp, #32
    b8b8:	d045      	beq.n	b946 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8be>
    b8ba:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    b8be:	29fe      	cmp	r1, #254	; 0xfe
    b8c0:	d00d      	beq.n	b8de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x856>
    b8c2:	21fe      	movs	r1, #254	; 0xfe
    b8c4:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    b8c8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b8cc:	2919      	cmp	r1, #25
    b8ce:	d00b      	beq.n	b8e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x860>
    b8d0:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8d4:	291f      	cmp	r1, #31
    b8d6:	d019      	beq.n	b90c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x884>
    b8d8:	2927      	cmp	r1, #39	; 0x27
    b8da:	d026      	beq.n	b92a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8a2>
    b8dc:	e02b      	b.n	b936 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ae>
    b8de:	f240 7144 	movw	r1, #1860	; 0x744
    b8e2:	2031      	movs	r0, #49	; 0x31
    b8e4:	f7f9 f9a4 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8e8:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    b8ec:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b8f0:	1e49      	subs	r1, r1, #1
    b8f2:	b249      	sxtb	r1, r1
    b8f4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b8f8:	2900      	cmp	r1, #0
    b8fa:	bfa8      	it	ge
    b8fc:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    b900:	dae6      	bge.n	b8d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x848>
    b902:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b906:	2031      	movs	r0, #49	; 0x31
    b908:	f7f9 f992 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b90c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    b910:	f005 fe19 	bl	11546 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    b914:	2800      	cmp	r0, #0
    b916:	bf1d      	ittte	ne
    b918:	2026      	movne	r0, #38	; 0x26
    b91a:	68e1      	ldrne	r1, [r4, #12]
    b91c:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    b920:	68e0      	ldreq	r0, [r4, #12]
    b922:	bf08      	it	eq
    b924:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    b928:	e005      	b.n	b936 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ae>
    b92a:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    b92e:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b932:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b936:	68e0      	ldr	r0, [r4, #12]
    b938:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    b93c:	2908      	cmp	r1, #8
    b93e:	bf04      	itt	eq
    b940:	7026      	strbeq	r6, [r4, #0]
    b942:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    b946:	2000      	movs	r0, #0
    b948:	79a1      	ldrb	r1, [r4, #6]
    b94a:	f011 0f01 	tst.w	r1, #1
    b94e:	d060      	beq.n	ba12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98a>
    b950:	6960      	ldr	r0, [r4, #20]
    b952:	2301      	movs	r3, #1
    b954:	2105      	movs	r1, #5
    b956:	f890 9003 	ldrb.w	r9, [r0, #3]
    b95a:	68e0      	ldr	r0, [r4, #12]
    b95c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b960:	3078      	adds	r0, #120	; 0x78
    b962:	f005 fd84 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b966:	b160      	cbz	r0, b982 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    b968:	f1a9 0002 	sub.w	r0, r9, #2
    b96c:	280a      	cmp	r0, #10
    b96e:	d206      	bcs.n	b97e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8f6>
    b970:	e8df f000 	tbb	[pc, r0]
    b974:	05050707 	.word	0x05050707
    b978:	05050707 	.word	0x05050707
    b97c:	0707      	.short	0x0707
    b97e:	4646      	mov	r6, r8
    b980:	e048      	b.n	ba14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    b982:	6960      	ldr	r0, [r4, #20]
    b984:	f7fc f80e 	bl	79a4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    b988:	b160      	cbz	r0, b9a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>
    b98a:	6960      	ldr	r0, [r4, #20]
    b98c:	f890 9003 	ldrb.w	r9, [r0, #3]
    b990:	f1b9 0f00 	cmp.w	r9, #0
    b994:	bf1c      	itt	ne
    b996:	f1b9 0f01 	cmpne.w	r9, #1
    b99a:	f1b9 0f16 	cmpne.w	r9, #22
    b99e:	d005      	beq.n	b9ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x924>
    b9a0:	e01a      	b.n	b9d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    b9a2:	e069      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    b9a4:	f000 fc98 	bl	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    b9a8:	4606      	mov	r6, r0
    b9aa:	e033      	b.n	ba14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    b9ac:	68e0      	ldr	r0, [r4, #12]
    b9ae:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b9b2:	f005 fdc8 	bl	11546 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    b9b6:	b178      	cbz	r0, b9d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    b9b8:	68e1      	ldr	r1, [r4, #12]
    b9ba:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b9be:	281f      	cmp	r0, #31
    b9c0:	d00a      	beq.n	b9d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    b9c2:	2820      	cmp	r0, #32
    b9c4:	bf04      	itt	eq
    b9c6:	2026      	moveq	r0, #38	; 0x26
    b9c8:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    b9cc:	d004      	beq.n	b9d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    b9ce:	f1b9 0f16 	cmp.w	r9, #22
    b9d2:	bf08      	it	eq
    b9d4:	465e      	moveq	r6, fp
    b9d6:	e01d      	b.n	ba14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    b9d8:	f1b9 0f19 	cmp.w	r9, #25
    b9dc:	d205      	bcs.n	b9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x962>
    b9de:	486c      	ldr	r0, [pc, #432]	; (bb90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb08>)
    b9e0:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    b9e4:	b108      	cbz	r0, b9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x962>
    b9e6:	4780      	blx	r0
    b9e8:	e00b      	b.n	ba02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x97a>
    b9ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    b9ee:	d106      	bne.n	b9fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x976>
    b9f0:	69a0      	ldr	r0, [r4, #24]
    b9f2:	b120      	cbz	r0, b9fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x976>
    b9f4:	68e0      	ldr	r0, [r4, #12]
    b9f6:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    b9fa:	2000      	movs	r0, #0
    b9fc:	e001      	b.n	ba02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x97a>
    b9fe:	f000 fc6b 	bl	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    ba02:	68e1      	ldr	r1, [r4, #12]
    ba04:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    ba08:	1c52      	adds	r2, r2, #1
    ba0a:	f143 0300 	adc.w	r3, r3, #0
    ba0e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ba12:	4606      	mov	r6, r0
    ba14:	70e6      	strb	r6, [r4, #3]
    ba16:	bb7e      	cbnz	r6, ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    ba18:	88e0      	ldrh	r0, [r4, #6]
    ba1a:	f010 0f04 	tst.w	r0, #4
    ba1e:	d005      	beq.n	ba2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9a4>
    ba20:	68e1      	ldr	r1, [r4, #12]
    ba22:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    ba26:	2907      	cmp	r1, #7
    ba28:	bf08      	it	eq
    ba2a:	7027      	strbeq	r7, [r4, #0]
    ba2c:	f010 0f02 	tst.w	r0, #2
    ba30:	d016      	beq.n	ba60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
    ba32:	6920      	ldr	r0, [r4, #16]
    ba34:	78c1      	ldrb	r1, [r0, #3]
    ba36:	2919      	cmp	r1, #25
    ba38:	d205      	bcs.n	ba46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9be>
    ba3a:	4856      	ldr	r0, [pc, #344]	; (bb94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb0c>)
    ba3c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    ba40:	b108      	cbz	r0, ba46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9be>
    ba42:	4780      	blx	r0
    ba44:	e00c      	b.n	ba60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
    ba46:	29ff      	cmp	r1, #255	; 0xff
    ba48:	d004      	beq.n	ba54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9cc>
    ba4a:	f240 713a 	movw	r1, #1850	; 0x73a
    ba4e:	2031      	movs	r0, #49	; 0x31
    ba50:	f7f9 f8ee 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba54:	68e0      	ldr	r0, [r4, #12]
    ba56:	2127      	movs	r1, #39	; 0x27
    ba58:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    ba5c:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    ba60:	79a0      	ldrb	r0, [r4, #6]
    ba62:	f010 0f10 	tst.w	r0, #16
    ba66:	d007      	beq.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    ba68:	68e0      	ldr	r0, [r4, #12]
    ba6a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ba6e:	290b      	cmp	r1, #11
    ba70:	bf04      	itt	eq
    ba72:	210c      	moveq	r1, #12
    ba74:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    ba78:	7920      	ldrb	r0, [r4, #4]
    ba7a:	f010 0f08 	tst.w	r0, #8
    ba7e:	d011      	beq.n	baa4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1c>
    ba80:	68e0      	ldr	r0, [r4, #12]
    ba82:	2301      	movs	r3, #1
    ba84:	2105      	movs	r1, #5
    ba86:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ba8a:	3078      	adds	r0, #120	; 0x78
    ba8c:	f005 fcef 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ba90:	b128      	cbz	r0, ba9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa16>
    ba92:	f884 8003 	strb.w	r8, [r4, #3]
    ba96:	68e0      	ldr	r0, [r4, #12]
    ba98:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    ba9c:	e002      	b.n	baa4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1c>
    ba9e:	2000      	movs	r0, #0
    baa0:	f7fa fa36 	bl	5f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    baa4:	69a0      	ldr	r0, [r4, #24]
    baa6:	b3e8      	cbz	r0, bb24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9c>
    baa8:	9500      	str	r5, [sp, #0]
    baaa:	9501      	str	r5, [sp, #4]
    baac:	9502      	str	r5, [sp, #8]
    baae:	9503      	str	r5, [sp, #12]
    bab0:	9504      	str	r5, [sp, #16]
    bab2:	68e0      	ldr	r0, [r4, #12]
    bab4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    bab8:	f007 fdc0 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    babc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bac0:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    bac4:	fbb0 f6f1 	udiv	r6, r0, r1
    bac8:	68e0      	ldr	r0, [r4, #12]
    baca:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    bace:	f007 fda1 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    bad2:	4430      	add	r0, r6
    bad4:	f8ad 0006 	strh.w	r0, [sp, #6]
    bad8:	68e0      	ldr	r0, [r4, #12]
    bada:	8801      	ldrh	r1, [r0, #0]
    badc:	f8ad 1000 	strh.w	r1, [sp]
    bae0:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    bae4:	f8ad 1004 	strh.w	r1, [sp, #4]
    bae8:	6840      	ldr	r0, [r0, #4]
    baea:	f005 fc99 	bl	11420 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    baee:	f8ad 0002 	strh.w	r0, [sp, #2]
    baf2:	68e0      	ldr	r0, [r4, #12]
    baf4:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    baf8:	b130      	cbz	r0, bb08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    bafa:	6960      	ldr	r0, [r4, #20]
    bafc:	1cc1      	adds	r1, r0, #3
    bafe:	9103      	str	r1, [sp, #12]
    bb00:	f005 ff43 	bl	1198a <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    bb04:	f88d 0010 	strb.w	r0, [sp, #16]
    bb08:	68e0      	ldr	r0, [r4, #12]
    bb0a:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    bb0e:	f88d 0008 	strb.w	r0, [sp, #8]
    bb12:	69a1      	ldr	r1, [r4, #24]
    bb14:	4668      	mov	r0, sp
    bb16:	4788      	blx	r1
    bb18:	68e0      	ldr	r0, [r4, #12]
    bb1a:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    bb1e:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    bb22:	e000      	b.n	bb26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    bb24:	e021      	b.n	bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb26:	9903      	ldr	r1, [sp, #12]
    bb28:	b1f9      	cbz	r1, bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb2a:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    bb2e:	b9e1      	cbnz	r1, bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb30:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bb34:	2927      	cmp	r1, #39	; 0x27
    bb36:	d018      	beq.n	bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb38:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bb3c:	9a03      	ldr	r2, [sp, #12]
    bb3e:	b1a1      	cbz	r1, bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb40:	7813      	ldrb	r3, [r2, #0]
    bb42:	2bff      	cmp	r3, #255	; 0xff
    bb44:	d006      	beq.n	bb54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xacc>
    bb46:	2b07      	cmp	r3, #7
    bb48:	bf02      	ittt	eq
    bb4a:	2902      	cmpeq	r1, #2
    bb4c:	7851      	ldrbeq	r1, [r2, #1]
    bb4e:	29ff      	cmpeq	r1, #255	; 0xff
    bb50:	d002      	beq.n	bb58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad0>
    bb52:	e00a      	b.n	bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb54:	291b      	cmp	r1, #27
    bb56:	d808      	bhi.n	bb6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    bb58:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    bb5c:	9903      	ldr	r1, [sp, #12]
    bb5e:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    bb62:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bb66:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    bb6a:	f7ff fab9 	bl	b0e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    bb6e:	f7fa f86b 	bl	5c48 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    bb72:	b138      	cbz	r0, bb84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xafc>
    bb74:	68e0      	ldr	r0, [r4, #12]
    bb76:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    bb7a:	2900      	cmp	r1, #0
    bb7c:	bf08      	it	eq
    bb7e:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    bb82:	d00c      	beq.n	bb9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb16>
    bb84:	68e0      	ldr	r0, [r4, #12]
    bb86:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    bb8a:	e005      	b.n	bb98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb10>
    bb8c:	20000144 	.word	0x20000144
    bb90:	20000164 	.word	0x20000164
    bb94:	200001c8 	.word	0x200001c8
    bb98:	1c49      	adds	r1, r1, #1
    bb9a:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    bb9e:	f7fa f84d 	bl	5c3c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    bba2:	b140      	cbz	r0, bbb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb2e>
    bba4:	68e1      	ldr	r1, [r4, #12]
    bba6:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    bbaa:	2802      	cmp	r0, #2
    bbac:	bf9c      	itt	ls
    bbae:	1c40      	addls	r0, r0, #1
    bbb0:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    bbb4:	d804      	bhi.n	bbc0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb38>
    bbb6:	68e0      	ldr	r0, [r4, #12]
    bbb8:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    bbbc:	2802      	cmp	r0, #2
    bbbe:	d906      	bls.n	bbce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb46>
    bbc0:	68e0      	ldr	r0, [r4, #12]
    bbc2:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    bbc6:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    bbca:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    bbce:	68e0      	ldr	r0, [r4, #12]
    bbd0:	2301      	movs	r3, #1
    bbd2:	2100      	movs	r1, #0
    bbd4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    bbd8:	3078      	adds	r0, #120	; 0x78
    bbda:	f005 fc48 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bbde:	b920      	cbnz	r0, bbea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb62>
    bbe0:	68e0      	ldr	r0, [r4, #12]
    bbe2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    bbe6:	280c      	cmp	r0, #12
    bbe8:	d168      	bne.n	bcbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    bbea:	68e0      	ldr	r0, [r4, #12]
    bbec:	2301      	movs	r3, #1
    bbee:	2100      	movs	r1, #0
    bbf0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bbf4:	3078      	adds	r0, #120	; 0x78
    bbf6:	f005 fc3a 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bbfa:	b3e0      	cbz	r0, bc76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    bbfc:	68e0      	ldr	r0, [r4, #12]
    bbfe:	2301      	movs	r3, #1
    bc00:	2100      	movs	r1, #0
    bc02:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bc06:	3078      	adds	r0, #120	; 0x78
    bc08:	f005 fc31 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc0c:	b398      	cbz	r0, bc76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    bc0e:	68e0      	ldr	r0, [r4, #12]
    bc10:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    bc14:	2902      	cmp	r1, #2
    bc16:	bf04      	itt	eq
    bc18:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    bc1c:	2800      	cmpeq	r0, #0
    bc1e:	d14d      	bne.n	bcbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    bc20:	9805      	ldr	r0, [sp, #20]
    bc22:	f004 ff48 	bl	10ab6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    bc26:	b330      	cbz	r0, bc76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    bc28:	68e1      	ldr	r1, [r4, #12]
    bc2a:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    bc2e:	28fe      	cmp	r0, #254	; 0xfe
    bc30:	d144      	bne.n	bcbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    bc32:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    bc36:	2801      	cmp	r0, #1
    bc38:	d940      	bls.n	bcbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    bc3a:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    bc3e:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    bc42:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    bc46:	1e83      	subs	r3, r0, #2
    bc48:	429a      	cmp	r2, r3
    bc4a:	bfaf      	iteee	ge
    bc4c:	2001      	movge	r0, #1
    bc4e:	1a80      	sublt	r0, r0, r2
    bc50:	1e40      	sublt	r0, r0, #1
    bc52:	b280      	uxthlt	r0, r0
    bc54:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    bc58:	8923      	ldrh	r3, [r4, #8]
    bc5a:	429a      	cmp	r2, r3
    bc5c:	bf2f      	iteee	cs
    bc5e:	2201      	movcs	r2, #1
    bc60:	1a9a      	subcc	r2, r3, r2
    bc62:	1c52      	addcc	r2, r2, #1
    bc64:	b292      	uxthcc	r2, r2
    bc66:	4290      	cmp	r0, r2
    bc68:	bf88      	it	hi
    bc6a:	4610      	movhi	r0, r2
    bc6c:	2801      	cmp	r0, #1
    bc6e:	bf08      	it	eq
    bc70:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    bc74:	e000      	b.n	bc78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf0>
    bc76:	e021      	b.n	bcbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    bc78:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    bc7c:	b96a      	cbnz	r2, bc9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    bc7e:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    bc80:	b15a      	cbz	r2, bc9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    bc82:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    bc86:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    bc8a:	1ad2      	subs	r2, r2, r3
    bc8c:	b212      	sxth	r2, r2
    bc8e:	2a00      	cmp	r2, #0
    bc90:	dd03      	ble.n	bc9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    bc92:	4282      	cmp	r2, r0
    bc94:	bfd8      	it	le
    bc96:	4610      	movle	r0, r2
    bc98:	b280      	uxth	r0, r0
    bc9a:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    bc9e:	b18a      	cbz	r2, bcc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc3c>
    bca0:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    bca4:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    bca8:	428a      	cmp	r2, r1
    bcaa:	bf2f      	iteee	cs
    bcac:	2101      	movcs	r1, #1
    bcae:	1a89      	subcc	r1, r1, r2
    bcb0:	1c49      	addcc	r1, r1, #1
    bcb2:	b289      	uxthcc	r1, r1
    bcb4:	4288      	cmp	r0, r1
    bcb6:	bf88      	it	hi
    bcb8:	4608      	movhi	r0, r1
    bcba:	e003      	b.n	bcc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc3c>
    bcbc:	68e1      	ldr	r1, [r4, #12]
    bcbe:	2001      	movs	r0, #1
    bcc0:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    bcc4:	78a1      	ldrb	r1, [r4, #2]
    bcc6:	2900      	cmp	r1, #0
    bcc8:	bf18      	it	ne
    bcca:	2801      	cmpne	r0, #1
    bccc:	bf9c      	itt	ls
    bcce:	68e1      	ldrls	r1, [r4, #12]
    bcd0:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    bcd4:	d903      	bls.n	bcde <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc56>
    bcd6:	68e0      	ldr	r0, [r4, #12]
    bcd8:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    bcdc:	2001      	movs	r0, #1
    bcde:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bce2:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    bce6:	4408      	add	r0, r1
    bce8:	b280      	uxth	r0, r0
    bcea:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    bcee:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    bcf2:	2a00      	cmp	r2, #0
    bcf4:	bf18      	it	ne
    bcf6:	2a01      	cmpne	r2, #1
    bcf8:	d009      	beq.n	bd0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc86>
    bcfa:	2a02      	cmp	r2, #2
    bcfc:	bf18      	it	ne
    bcfe:	2a03      	cmpne	r2, #3
    bd00:	d008      	beq.n	bd14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8c>
    bd02:	f640 2162 	movw	r1, #2658	; 0xa62
    bd06:	f04f 0031 	mov.w	r0, #49	; 0x31
    bd0a:	f7f8 ff91 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd0e:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    bd12:	e053      	b.n	bdbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    bd14:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    bd18:	2a08      	cmp	r2, #8
    bd1a:	d022      	beq.n	bd62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcda>
    bd1c:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    bd20:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    bd24:	2600      	movs	r6, #0
    bd26:	1c82      	adds	r2, r0, #2
    bd28:	4291      	cmp	r1, r2
    bd2a:	d306      	bcc.n	bd3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcb2>
    bd2c:	1a08      	subs	r0, r1, r0
    bd2e:	1e80      	subs	r0, r0, #2
    bd30:	0406      	lsls	r6, r0, #16
    bd32:	0c36      	lsrs	r6, r6, #16
    bd34:	bf1c      	itt	ne
    bd36:	1e70      	subne	r0, r6, #1
    bd38:	b286      	uxthne	r6, r0
    bd3a:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    bd3e:	b158      	cbz	r0, bd58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcd0>
    bd40:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    bd44:	2301      	movs	r3, #1
    bd46:	2109      	movs	r1, #9
    bd48:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    bd4c:	f005 fb8f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd50:	2800      	cmp	r0, #0
    bd52:	bf08      	it	eq
    bd54:	2600      	moveq	r6, #0
    bd56:	d02b      	beq.n	bdb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd28>
    bd58:	68e0      	ldr	r0, [r4, #12]
    bd5a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    bd5e:	b999      	cbnz	r1, bd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd00>
    bd60:	e00a      	b.n	bd78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcf0>
    bd62:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    bd66:	2a03      	cmp	r2, #3
    bd68:	d3d1      	bcc.n	bd0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc86>
    bd6a:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    bd6e:	4408      	add	r0, r1
    bd70:	1c40      	adds	r0, r0, #1
    bd72:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    bd76:	e021      	b.n	bdbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    bd78:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    bd7c:	2301      	movs	r3, #1
    bd7e:	2106      	movs	r1, #6
    bd80:	3078      	adds	r0, #120	; 0x78
    bd82:	f005 fb74 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd86:	b178      	cbz	r0, bda8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd20>
    bd88:	68e1      	ldr	r1, [r4, #12]
    bd8a:	2000      	movs	r0, #0
    bd8c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    bd90:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    bd94:	1c8b      	adds	r3, r1, #2
    bd96:	429a      	cmp	r2, r3
    bd98:	d303      	bcc.n	bda2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd1a>
    bd9a:	1a50      	subs	r0, r2, r1
    bd9c:	1e80      	subs	r0, r0, #2
    bd9e:	bf18      	it	ne
    bda0:	1e40      	subne	r0, r0, #1
    bda2:	42b0      	cmp	r0, r6
    bda4:	bf38      	it	cc
    bda6:	b286      	uxthcc	r6, r0
    bda8:	2e00      	cmp	r6, #0
    bdaa:	bf1c      	itt	ne
    bdac:	1e70      	subne	r0, r6, #1
    bdae:	b286      	uxthne	r6, r0
    bdb0:	68e0      	ldr	r0, [r4, #12]
    bdb2:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    bdb6:	4431      	add	r1, r6
    bdb8:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    bdbc:	79a0      	ldrb	r0, [r4, #6]
    bdbe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    bdc2:	2800      	cmp	r0, #0
    bdc4:	68e0      	ldr	r0, [r4, #12]
    bdc6:	bf18      	it	ne
    bdc8:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    bdcc:	d106      	bne.n	bddc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd54>
    bdce:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    bdd2:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    bdd6:	4411      	add	r1, r2
    bdd8:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    bddc:	68e0      	ldr	r0, [r4, #12]
    bdde:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    bde2:	b939      	cbnz	r1, bdf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd6c>
    bde4:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bde8:	2301      	movs	r3, #1
    bdea:	4619      	mov	r1, r3
    bdec:	3078      	adds	r0, #120	; 0x78
    bdee:	f005 fb3e 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bdf2:	b138      	cbz	r0, be04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd7c>
    bdf4:	68e0      	ldr	r0, [r4, #12]
    bdf6:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    bdfa:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    bdfe:	4411      	add	r1, r2
    be00:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    be04:	68e0      	ldr	r0, [r4, #12]
    be06:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    be0a:	b132      	cbz	r2, be1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd92>
    be0c:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    be10:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    be14:	4419      	add	r1, r3
    be16:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    be1a:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    be1e:	2b00      	cmp	r3, #0
    be20:	dd06      	ble.n	be30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda8>
    be22:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    be26:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    be2a:	4461      	add	r1, ip
    be2c:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    be30:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    be34:	f1ba 0f00 	cmp.w	sl, #0
    be38:	bf18      	it	ne
    be3a:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    be3e:	d14c      	bne.n	beda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    be40:	7821      	ldrb	r1, [r4, #0]
    be42:	2902      	cmp	r1, #2
    be44:	d011      	beq.n	be6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xde2>
    be46:	2901      	cmp	r1, #1
    be48:	bf08      	it	eq
    be4a:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    be4e:	d042      	beq.n	bed6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
    be50:	78e1      	ldrb	r1, [r4, #3]
    be52:	b339      	cbz	r1, bea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    be54:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    be58:	f011 0f14 	tst.w	r1, #20
    be5c:	bf18      	it	ne
    be5e:	211e      	movne	r1, #30
    be60:	d009      	beq.n	be76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdee>
    be62:	bf00      	nop
    be64:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    be68:	e052      	b.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    be6a:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    be6e:	2906      	cmp	r1, #6
    be70:	bf18      	it	ne
    be72:	2116      	movne	r1, #22
    be74:	e02f      	b.n	bed6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
    be76:	f011 0f08 	tst.w	r1, #8
    be7a:	bf18      	it	ne
    be7c:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    be80:	d146      	bne.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    be82:	f011 0f20 	tst.w	r1, #32
    be86:	bf18      	it	ne
    be88:	2123      	movne	r1, #35	; 0x23
    be8a:	d1eb      	bne.n	be64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
    be8c:	f011 0f03 	tst.w	r1, #3
    be90:	bf1c      	itt	ne
    be92:	212a      	movne	r1, #42	; 0x2a
    be94:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    be98:	d13a      	bne.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    be9a:	f640 41b5 	movw	r1, #3253	; 0xcb5
    be9e:	2031      	movs	r0, #49	; 0x31
    bea0:	f7f8 fec6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bea4:	b12a      	cbz	r2, beb2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2a>
    bea6:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    beaa:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    beae:	4291      	cmp	r1, r2
    beb0:	d210      	bcs.n	bed4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4c>
    beb2:	2b00      	cmp	r3, #0
    beb4:	dd05      	ble.n	bec2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe3a>
    beb6:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    beba:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    bebe:	4291      	cmp	r1, r2
    bec0:	d208      	bcs.n	bed4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4c>
    bec2:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    bec6:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    beca:	428a      	cmp	r2, r1
    becc:	d308      	bcc.n	bee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe58>
    bece:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    bed2:	b12a      	cbz	r2, bee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe58>
    bed4:	2122      	movs	r1, #34	; 0x22
    bed6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    beda:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    bede:	e017      	b.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    bee0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    bee4:	b13a      	cbz	r2, bef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6e>
    bee6:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    beea:	428a      	cmp	r2, r1
    beec:	bf28      	it	cs
    beee:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    bef2:	d2f2      	bcs.n	beda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    bef4:	e009      	b.n	bf0a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe82>
    bef6:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    befa:	2906      	cmp	r1, #6
    befc:	d305      	bcc.n	bf0a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe82>
    befe:	213e      	movs	r1, #62	; 0x3e
    bf00:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    bf04:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    bf08:	e002      	b.n	bf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    bf0a:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    bf0e:	b171      	cbz	r1, bf2e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    bf10:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bf14:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    bf18:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    bf1c:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    bf20:	2900      	cmp	r1, #0
    bf22:	bf14      	ite	ne
    bf24:	2102      	movne	r1, #2
    bf26:	2103      	moveq	r1, #3
    bf28:	f7fd ff3c 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    bf2c:	e002      	b.n	bf34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xeac>
    bf2e:	2100      	movs	r1, #0
    bf30:	f7fd ff38 	bl	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    bf34:	68e0      	ldr	r0, [r4, #12]
    bf36:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    bf3a:	b007      	add	sp, #28
    bf3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf40:	f7f9 bd7c 	b.w	5a3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    bf44:	4a0c      	ldr	r2, [pc, #48]	; (bf78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef0>)
    bf46:	b510      	push	{r4, lr}
    bf48:	68d2      	ldr	r2, [r2, #12]
    bf4a:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    bf4e:	2bfe      	cmp	r3, #254	; 0xfe
    bf50:	d004      	beq.n	bf5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed4>
    bf52:	f640 11f7 	movw	r1, #2551	; 0x9f7
    bf56:	2031      	movs	r0, #49	; 0x31
    bf58:	f7f8 fe6a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf5c:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    bf60:	2000      	movs	r0, #0
    bf62:	2900      	cmp	r1, #0
    bf64:	bf1c      	itt	ne
    bf66:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    bf6a:	bd10      	popne	{r4, pc}
    bf6c:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    bf70:	2001      	movs	r0, #1
    bf72:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    bf76:	bd10      	pop	{r4, pc}
    bf78:	20000144 	.word	0x20000144
    bf7c:	b570      	push	{r4, r5, r6, lr}
    bf7e:	4a2b      	ldr	r2, [pc, #172]	; (c02c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa4>)
    bf80:	4603      	mov	r3, r0
    bf82:	88d0      	ldrh	r0, [r2, #6]
    bf84:	4318      	orrs	r0, r3
    bf86:	80d0      	strh	r0, [r2, #6]
    bf88:	4610      	mov	r0, r2
    bf8a:	2b40      	cmp	r3, #64	; 0x40
    bf8c:	68c0      	ldr	r0, [r0, #12]
    bf8e:	d011      	beq.n	bfb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf2c>
    bf90:	f013 0f02 	tst.w	r3, #2
    bf94:	f04f 0400 	mov.w	r4, #0
    bf98:	f04f 0c01 	mov.w	ip, #1
    bf9c:	f003 0501 	and.w	r5, r3, #1
    bfa0:	d00d      	beq.n	bfbe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf36>
    bfa2:	2d00      	cmp	r5, #0
    bfa4:	bf08      	it	eq
    bfa6:	6111      	streq	r1, [r2, #16]
    bfa8:	d026      	beq.n	bff8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>
    bfaa:	f640 5108 	movw	r1, #3336	; 0xd08
    bfae:	2031      	movs	r0, #49	; 0x31
    bfb0:	f7f8 fe3e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bfb8:	2104      	movs	r1, #4
    bfba:	f7fd bef3 	b.w	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    bfbe:	b1b5      	cbz	r5, bfee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    bfc0:	6151      	str	r1, [r2, #20]
    bfc2:	78c9      	ldrb	r1, [r1, #3]
    bfc4:	2906      	cmp	r1, #6
    bfc6:	d009      	beq.n	bfdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf54>
    bfc8:	290b      	cmp	r1, #11
    bfca:	bf01      	itttt	eq
    bfcc:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    bfd0:	2911      	cmpeq	r1, #17
    bfd2:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    bfd6:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    bfda:	e008      	b.n	bfee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    bfdc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bfe0:	2917      	cmp	r1, #23
    bfe2:	d104      	bne.n	bfee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    bfe4:	2100      	movs	r1, #0
    bfe6:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    bfea:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    bfee:	f013 0f02 	tst.w	r3, #2
    bff2:	bf18      	it	ne
    bff4:	6911      	ldrne	r1, [r2, #16]
    bff6:	d013      	beq.n	c020 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    bff8:	78c9      	ldrb	r1, [r1, #3]
    bffa:	2905      	cmp	r1, #5
    bffc:	d007      	beq.n	c00e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf86>
    bffe:	290b      	cmp	r1, #11
    c000:	bf02      	ittt	eq
    c002:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    c006:	2910      	cmpeq	r1, #16
    c008:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    c00c:	e008      	b.n	c020 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    c00e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    c012:	2915      	cmp	r1, #21
    c014:	d104      	bne.n	c020 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    c016:	2100      	movs	r1, #0
    c018:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    c01c:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    c020:	f013 0f20 	tst.w	r3, #32
    c024:	bf1c      	itt	ne
    c026:	2008      	movne	r0, #8
    c028:	7110      	strbne	r0, [r2, #4]
    c02a:	bd70      	pop	{r4, r5, r6, pc}
    c02c:	20000144 	.word	0x20000144
    c030:	4a1a      	ldr	r2, [pc, #104]	; (c09c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1014>)
    c032:	b510      	push	{r4, lr}
    c034:	68d1      	ldr	r1, [r2, #12]
    c036:	880b      	ldrh	r3, [r1, #0]
    c038:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    c03c:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    c040:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    c044:	2801      	cmp	r0, #1
    c046:	bf18      	it	ne
    c048:	2802      	cmpne	r0, #2
    c04a:	d00b      	beq.n	c064 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfdc>
    c04c:	2804      	cmp	r0, #4
    c04e:	bf14      	ite	ne
    c050:	2808      	cmpne	r0, #8
    c052:	2003      	moveq	r0, #3
    c054:	d006      	beq.n	c064 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfdc>
    c056:	bf00      	nop
    c058:	f240 218f 	movw	r1, #655	; 0x28f
    c05c:	f04f 0006 	mov.w	r0, #6
    c060:	f7f8 fde6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c064:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    c068:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    c06c:	2801      	cmp	r0, #1
    c06e:	bf18      	it	ne
    c070:	2802      	cmpne	r0, #2
    c072:	d004      	beq.n	c07e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xff6>
    c074:	2804      	cmp	r0, #4
    c076:	bf14      	ite	ne
    c078:	2808      	cmpne	r0, #8
    c07a:	2003      	moveq	r0, #3
    c07c:	d1ec      	bne.n	c058 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    c07e:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    c082:	f04f 0001 	mov.w	r0, #1
    c086:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    c08a:	f04f 0000 	mov.w	r0, #0
    c08e:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    c092:	7950      	ldrb	r0, [r2, #5]
    c094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c098:	f7f8 bbb8 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c09c:	20000144 	.word	0x20000144
    c0a0:	b510      	push	{r4, lr}
    c0a2:	4c17      	ldr	r4, [pc, #92]	; (c100 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>)
    c0a4:	2301      	movs	r3, #1
    c0a6:	2100      	movs	r1, #0
    c0a8:	68e0      	ldr	r0, [r4, #12]
    c0aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c0ae:	3078      	adds	r0, #120	; 0x78
    c0b0:	f005 f9dd 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c0b4:	2800      	cmp	r0, #0
    c0b6:	bf04      	itt	eq
    c0b8:	2001      	moveq	r0, #1
    c0ba:	bd10      	popeq	{r4, pc}
    c0bc:	6960      	ldr	r0, [r4, #20]
    c0be:	f005 fc40 	bl	11942 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    c0c2:	68e1      	ldr	r1, [r4, #12]
    c0c4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    c0c8:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    c0cc:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    c0d0:	1a80      	subs	r0, r0, r2
    c0d2:	b200      	sxth	r0, r0
    c0d4:	2201      	movs	r2, #1
    c0d6:	4283      	cmp	r3, r0
    c0d8:	bfa8      	it	ge
    c0da:	2800      	cmpge	r0, #0
    c0dc:	dd09      	ble.n	c0f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106a>
    c0de:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    c0e2:	6960      	ldr	r0, [r4, #20]
    c0e4:	f005 fc28 	bl	11938 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    c0e8:	68e1      	ldr	r1, [r4, #12]
    c0ea:	200b      	movs	r0, #11
    c0ec:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c0f0:	e004      	b.n	c0fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1074>
    c0f2:	2028      	movs	r0, #40	; 0x28
    c0f4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    c0f8:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    c0fc:	2000      	movs	r0, #0
    c0fe:	bd10      	pop	{r4, pc}
    c100:	20000144 	.word	0x20000144
    c104:	b570      	push	{r4, r5, r6, lr}
    c106:	4c2d      	ldr	r4, [pc, #180]	; (c1bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1134>)
    c108:	2301      	movs	r3, #1
    c10a:	2100      	movs	r1, #0
    c10c:	68e0      	ldr	r0, [r4, #12]
    c10e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c112:	3078      	adds	r0, #120	; 0x78
    c114:	f005 f9ab 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c118:	2800      	cmp	r0, #0
    c11a:	bf04      	itt	eq
    c11c:	2001      	moveq	r0, #1
    c11e:	bd70      	popeq	{r4, r5, r6, pc}
    c120:	68e0      	ldr	r0, [r4, #12]
    c122:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    c126:	6960      	ldr	r0, [r4, #20]
    c128:	f005 fbdb 	bl	118e2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    c12c:	2800      	cmp	r0, #0
    c12e:	d039      	beq.n	c1a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x111c>
    c130:	6960      	ldr	r0, [r4, #20]
    c132:	68e1      	ldr	r1, [r4, #12]
    c134:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    c138:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    c13c:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    c140:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    c144:	1ad2      	subs	r2, r2, r3
    c146:	b212      	sxth	r2, r2
    c148:	2301      	movs	r3, #1
    c14a:	4594      	cmp	ip, r2
    c14c:	bfa8      	it	ge
    c14e:	2a00      	cmpge	r2, #0
    c150:	dd2c      	ble.n	c1ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1124>
    c152:	f005 fbf9 	bl	11948 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    c156:	f005 f957 	bl	11408 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    c15a:	4605      	mov	r5, r0
    c15c:	68e0      	ldr	r0, [r4, #12]
    c15e:	4629      	mov	r1, r5
    c160:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    c164:	6960      	ldr	r0, [r4, #20]
    c166:	7900      	ldrb	r0, [r0, #4]
    c168:	f005 fb72 	bl	11850 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    c16c:	68e1      	ldr	r1, [r4, #12]
    c16e:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    c172:	6960      	ldr	r0, [r4, #20]
    c174:	4629      	mov	r1, r5
    c176:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    c17a:	f005 fb60 	bl	1183e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    c17e:	68e1      	ldr	r1, [r4, #12]
    c180:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    c184:	6960      	ldr	r0, [r4, #20]
    c186:	f005 fbe2 	bl	1194e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    c18a:	68e1      	ldr	r1, [r4, #12]
    c18c:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    c190:	6960      	ldr	r0, [r4, #20]
    c192:	f005 fbdf 	bl	11954 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    c196:	68e1      	ldr	r1, [r4, #12]
    c198:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    c19c:	200d      	movs	r0, #13
    c19e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c1a2:	e008      	b.n	c1b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x112e>
    c1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c1a8:	f000 b896 	b.w	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    c1ac:	2028      	movs	r0, #40	; 0x28
    c1ae:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    c1b2:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    c1b6:	2000      	movs	r0, #0
    c1b8:	bd70      	pop	{r4, r5, r6, pc}
    c1ba:	0000      	.short	0x0000
    c1bc:	20000144 	.word	0x20000144
    c1c0:	b510      	push	{r4, lr}
    c1c2:	4c29      	ldr	r4, [pc, #164]	; (c268 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e0>)
    c1c4:	2301      	movs	r3, #1
    c1c6:	2100      	movs	r1, #0
    c1c8:	68e0      	ldr	r0, [r4, #12]
    c1ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c1ce:	3078      	adds	r0, #120	; 0x78
    c1d0:	f005 f94d 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1d4:	b970      	cbnz	r0, c1f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x116c>
    c1d6:	68e0      	ldr	r0, [r4, #12]
    c1d8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c1dc:	2a12      	cmp	r2, #18
    c1de:	d009      	beq.n	c1f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x116c>
    c1e0:	2301      	movs	r3, #1
    c1e2:	2105      	movs	r1, #5
    c1e4:	3078      	adds	r0, #120	; 0x78
    c1e6:	f005 f942 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c1ea:	2800      	cmp	r0, #0
    c1ec:	bf0c      	ite	eq
    c1ee:	2001      	moveq	r0, #1
    c1f0:	2008      	movne	r0, #8
    c1f2:	bd10      	pop	{r4, pc}
    c1f4:	68e0      	ldr	r0, [r4, #12]
    c1f6:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    c1fa:	b939      	cbnz	r1, c20c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1184>
    c1fc:	2100      	movs	r1, #0
    c1fe:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c202:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c206:	1c49      	adds	r1, r1, #1
    c208:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c20c:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    c210:	6960      	ldr	r0, [r4, #20]
    c212:	f005 fbae 	bl	11972 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    c216:	68e0      	ldr	r0, [r4, #12]
    c218:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    c21c:	6960      	ldr	r0, [r4, #20]
    c21e:	f005 fb9f 	bl	11960 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    c222:	68e0      	ldr	r0, [r4, #12]
    c224:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    c228:	b121      	cbz	r1, c234 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    c22a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    c22e:	2031      	movs	r0, #49	; 0x31
    c230:	f7f8 fcfe 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c234:	8801      	ldrh	r1, [r0, #0]
    c236:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    c23a:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    c23e:	6960      	ldr	r0, [r4, #20]
    c240:	f005 fb92 	bl	11968 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    c244:	68e0      	ldr	r0, [r4, #12]
    c246:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    c24a:	6960      	ldr	r0, [r4, #20]
    c24c:	f005 fb85 	bl	1195a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    c250:	68e0      	ldr	r0, [r4, #12]
    c252:	2101      	movs	r1, #1
    c254:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    c258:	2114      	movs	r1, #20
    c25a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c25e:	7960      	ldrb	r0, [r4, #5]
    c260:	f7f8 fad4 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c264:	2000      	movs	r0, #0
    c266:	bd10      	pop	{r4, pc}
    c268:	20000144 	.word	0x20000144
    c26c:	b510      	push	{r4, lr}
    c26e:	4c19      	ldr	r4, [pc, #100]	; (c2d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x124c>)
    c270:	b082      	sub	sp, #8
    c272:	68e0      	ldr	r0, [r4, #12]
    c274:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    c278:	f010 0f01 	tst.w	r0, #1
    c27c:	bf1e      	ittt	ne
    c27e:	2001      	movne	r0, #1
    c280:	b002      	addne	sp, #8
    c282:	bd10      	popne	{r4, pc}
    c284:	4669      	mov	r1, sp
    c286:	6960      	ldr	r0, [r4, #20]
    c288:	f005 fb7a 	bl	11980 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    c28c:	f001 ff18 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c290:	f644 112f 	movw	r1, #18735	; 0x492f
    c294:	4001      	ands	r1, r0
    c296:	f89d 0000 	ldrb.w	r0, [sp]
    c29a:	ea00 0201 	and.w	r2, r0, r1
    c29e:	68e0      	ldr	r0, [r4, #12]
    c2a0:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    c2a4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    c2a8:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    c2ac:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    c2b0:	2100      	movs	r1, #0
    c2b2:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c2b6:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c2ba:	1c49      	adds	r1, r1, #1
    c2bc:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c2c0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c2c4:	f041 0101 	orr.w	r1, r1, #1
    c2c8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c2cc:	b002      	add	sp, #8
    c2ce:	2000      	movs	r0, #0
    c2d0:	bd10      	pop	{r4, pc}
    c2d2:	0000      	.short	0x0000
    c2d4:	20000144 	.word	0x20000144
    c2d8:	4a0d      	ldr	r2, [pc, #52]	; (c310 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>)
    c2da:	68d0      	ldr	r0, [r2, #12]
    c2dc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c2e0:	f011 0f08 	tst.w	r1, #8
    c2e4:	bf1c      	itt	ne
    c2e6:	2001      	movne	r0, #1
    c2e8:	4770      	bxne	lr
    c2ea:	f041 0108 	orr.w	r1, r1, #8
    c2ee:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c2f2:	6951      	ldr	r1, [r2, #20]
    c2f4:	78c9      	ldrb	r1, [r1, #3]
    c2f6:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    c2fa:	2100      	movs	r1, #0
    c2fc:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c300:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c304:	1c49      	adds	r1, r1, #1
    c306:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c30a:	2000      	movs	r0, #0
    c30c:	4770      	bx	lr
    c30e:	0000      	.short	0x0000
    c310:	20000144 	.word	0x20000144
    c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c316:	4c34      	ldr	r4, [pc, #208]	; (c3e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1360>)
    c318:	68e0      	ldr	r0, [r4, #12]
    c31a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    c31e:	f010 0f30 	tst.w	r0, #48	; 0x30
    c322:	bf1c      	itt	ne
    c324:	2001      	movne	r0, #1
    c326:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    c328:	6960      	ldr	r0, [r4, #20]
    c32a:	f005 fb46 	bl	119ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c32e:	2800      	cmp	r0, #0
    c330:	d030      	beq.n	c394 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x130c>
    c332:	6960      	ldr	r0, [r4, #20]
    c334:	f005 fb33 	bl	1199e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c338:	4605      	mov	r5, r0
    c33a:	6960      	ldr	r0, [r4, #20]
    c33c:	f005 fb33 	bl	119a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c340:	4606      	mov	r6, r0
    c342:	6960      	ldr	r0, [r4, #20]
    c344:	f005 fb29 	bl	1199a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c348:	4607      	mov	r7, r0
    c34a:	6960      	ldr	r0, [r4, #20]
    c34c:	f005 fb29 	bl	119a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c350:	4601      	mov	r1, r0
    c352:	9500      	str	r5, [sp, #0]
    c354:	68e0      	ldr	r0, [r4, #12]
    c356:	4633      	mov	r3, r6
    c358:	463a      	mov	r2, r7
    c35a:	3028      	adds	r0, #40	; 0x28
    c35c:	f005 fdaf 	bl	11ebe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c360:	79a0      	ldrb	r0, [r4, #6]
    c362:	f010 0f02 	tst.w	r0, #2
    c366:	d003      	beq.n	c370 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12e8>
    c368:	6920      	ldr	r0, [r4, #16]
    c36a:	78c0      	ldrb	r0, [r0, #3]
    c36c:	2814      	cmp	r0, #20
    c36e:	d015      	beq.n	c39c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1314>
    c370:	68e1      	ldr	r1, [r4, #12]
    c372:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    c376:	281c      	cmp	r0, #28
    c378:	d010      	beq.n	c39c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1314>
    c37a:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    c37e:	2801      	cmp	r0, #1
    c380:	d010      	beq.n	c3a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x131c>
    c382:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    c386:	2800      	cmp	r0, #0
    c388:	bf04      	itt	eq
    c38a:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    c38e:	2800      	cmpeq	r0, #0
    c390:	d010      	beq.n	c3b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132c>
    c392:	e007      	b.n	c3a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x131c>
    c394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c398:	f7ff bf9e 	b.w	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    c39c:	68e1      	ldr	r1, [r4, #12]
    c39e:	2001      	movs	r0, #1
    c3a0:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    c3a4:	68e0      	ldr	r0, [r4, #12]
    c3a6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c3aa:	f041 0110 	orr.w	r1, r1, #16
    c3ae:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c3b2:	e00e      	b.n	c3d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134a>
    c3b4:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    c3b8:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    c3bc:	f040 0020 	orr.w	r0, r0, #32
    c3c0:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    c3c4:	f831 0b28 	ldrh.w	r0, [r1], #40
    c3c8:	f005 fd81 	bl	11ece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    c3cc:	7960      	ldrb	r0, [r4, #5]
    c3ce:	f7f8 fa1d 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c3d2:	68e0      	ldr	r0, [r4, #12]
    c3d4:	2100      	movs	r1, #0
    c3d6:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c3da:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c3de:	1c49      	adds	r1, r1, #1
    c3e0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c3e4:	2000      	movs	r0, #0
    c3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3e8:	20000144 	.word	0x20000144
    c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ee:	4c22      	ldr	r4, [pc, #136]	; (c478 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13f0>)
    c3f0:	2301      	movs	r3, #1
    c3f2:	210a      	movs	r1, #10
    c3f4:	68e0      	ldr	r0, [r4, #12]
    c3f6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c3fa:	3078      	adds	r0, #120	; 0x78
    c3fc:	f005 f837 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c400:	2800      	cmp	r0, #0
    c402:	bf04      	itt	eq
    c404:	2001      	moveq	r0, #1
    c406:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c408:	6960      	ldr	r0, [r4, #20]
    c40a:	f005 fad6 	bl	119ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c40e:	b1c8      	cbz	r0, c444 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13bc>
    c410:	6960      	ldr	r0, [r4, #20]
    c412:	f005 fac4 	bl	1199e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c416:	4605      	mov	r5, r0
    c418:	6960      	ldr	r0, [r4, #20]
    c41a:	f005 fac4 	bl	119a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c41e:	4606      	mov	r6, r0
    c420:	6960      	ldr	r0, [r4, #20]
    c422:	f005 faba 	bl	1199a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c426:	4607      	mov	r7, r0
    c428:	6960      	ldr	r0, [r4, #20]
    c42a:	f005 faba 	bl	119a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c42e:	4601      	mov	r1, r0
    c430:	9500      	str	r5, [sp, #0]
    c432:	68e0      	ldr	r0, [r4, #12]
    c434:	4633      	mov	r3, r6
    c436:	463a      	mov	r2, r7
    c438:	3028      	adds	r0, #40	; 0x28
    c43a:	f005 fd40 	bl	11ebe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c43e:	68e0      	ldr	r0, [r4, #12]
    c440:	f005 fca2 	bl	11d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    c444:	68e1      	ldr	r1, [r4, #12]
    c446:	2000      	movs	r0, #0
    c448:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c44c:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c450:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    c454:	2801      	cmp	r0, #1
    c456:	bf04      	itt	eq
    c458:	2002      	moveq	r0, #2
    c45a:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    c45e:	d008      	beq.n	c472 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13ea>
    c460:	8808      	ldrh	r0, [r1, #0]
    c462:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    c466:	3128      	adds	r1, #40	; 0x28
    c468:	f005 fc53 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    c46c:	7960      	ldrb	r0, [r4, #5]
    c46e:	f7f8 f9cd 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c472:	2000      	movs	r0, #0
    c474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c476:	0000      	.short	0x0000
    c478:	20000144 	.word	0x20000144
    c47c:	480b      	ldr	r0, [pc, #44]	; (c4ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1424>)
    c47e:	68c0      	ldr	r0, [r0, #12]
    c480:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c484:	f011 0f04 	tst.w	r1, #4
    c488:	bf1c      	itt	ne
    c48a:	2001      	movne	r0, #1
    c48c:	4770      	bxne	lr
    c48e:	2200      	movs	r2, #0
    c490:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    c494:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    c498:	f041 0104 	orr.w	r1, r1, #4
    c49c:	1c52      	adds	r2, r2, #1
    c49e:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    c4a2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c4a6:	2000      	movs	r0, #0
    c4a8:	4770      	bx	lr
    c4aa:	0000      	.short	0x0000
    c4ac:	20000144 	.word	0x20000144
    c4b0:	b510      	push	{r4, lr}
    c4b2:	4c0a      	ldr	r4, [pc, #40]	; (c4dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1454>)
    c4b4:	2301      	movs	r3, #1
    c4b6:	2109      	movs	r1, #9
    c4b8:	68e0      	ldr	r0, [r4, #12]
    c4ba:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c4be:	3078      	adds	r0, #120	; 0x78
    c4c0:	f004 ffd5 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4c4:	2800      	cmp	r0, #0
    c4c6:	bf08      	it	eq
    c4c8:	bd10      	popeq	{r4, pc}
    c4ca:	2000      	movs	r0, #0
    c4cc:	68e1      	ldr	r1, [r4, #12]
    c4ce:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    c4d2:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c4d6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c4da:	bd10      	pop	{r4, pc}
    c4dc:	20000144 	.word	0x20000144
    c4e0:	b510      	push	{r4, lr}
    c4e2:	4c12      	ldr	r4, [pc, #72]	; (c52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14a4>)
    c4e4:	2301      	movs	r3, #1
    c4e6:	2100      	movs	r1, #0
    c4e8:	68e0      	ldr	r0, [r4, #12]
    c4ea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c4ee:	3078      	adds	r0, #120	; 0x78
    c4f0:	f004 ffbd 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4f4:	b168      	cbz	r0, c512 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x148a>
    c4f6:	68e0      	ldr	r0, [r4, #12]
    c4f8:	2100      	movs	r1, #0
    c4fa:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c4fe:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c502:	1c49      	adds	r1, r1, #1
    c504:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c508:	2110      	movs	r1, #16
    c50a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c50e:	2000      	movs	r0, #0
    c510:	bd10      	pop	{r4, pc}
    c512:	68e0      	ldr	r0, [r4, #12]
    c514:	2301      	movs	r3, #1
    c516:	2105      	movs	r1, #5
    c518:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c51c:	3078      	adds	r0, #120	; 0x78
    c51e:	f004 ffa6 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c522:	2800      	cmp	r0, #0
    c524:	bf14      	ite	ne
    c526:	2008      	movne	r0, #8
    c528:	2001      	moveq	r0, #1
    c52a:	bd10      	pop	{r4, pc}
    c52c:	20000144 	.word	0x20000144
    c530:	4806      	ldr	r0, [pc, #24]	; (c54c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14c4>)
    c532:	68c0      	ldr	r0, [r0, #12]
    c534:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    c538:	2911      	cmp	r1, #17
    c53a:	bf1c      	itt	ne
    c53c:	2002      	movne	r0, #2
    c53e:	4770      	bxne	lr
    c540:	2112      	movs	r1, #18
    c542:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c546:	2000      	movs	r0, #0
    c548:	4770      	bx	lr
    c54a:	0000      	.short	0x0000
    c54c:	20000144 	.word	0x20000144
    c550:	b570      	push	{r4, r5, r6, lr}
    c552:	4c36      	ldr	r4, [pc, #216]	; (c62c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a4>)
    c554:	2301      	movs	r3, #1
    c556:	210b      	movs	r1, #11
    c558:	68e0      	ldr	r0, [r4, #12]
    c55a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c55e:	3078      	adds	r0, #120	; 0x78
    c560:	f004 ff85 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c564:	bb58      	cbnz	r0, c5be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1536>
    c566:	68e0      	ldr	r0, [r4, #12]
    c568:	2301      	movs	r3, #1
    c56a:	2100      	movs	r1, #0
    c56c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c570:	3078      	adds	r0, #120	; 0x78
    c572:	f004 ff7c 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c576:	2800      	cmp	r0, #0
    c578:	bf04      	itt	eq
    c57a:	2001      	moveq	r0, #1
    c57c:	bd70      	popeq	{r4, r5, r6, pc}
    c57e:	68e0      	ldr	r0, [r4, #12]
    c580:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c584:	2824      	cmp	r0, #36	; 0x24
    c586:	d01a      	beq.n	c5be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1536>
    c588:	6960      	ldr	r0, [r4, #20]
    c58a:	f005 fa31 	bl	119f0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c58e:	b1c0      	cbz	r0, c5c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x153a>
    c590:	68e0      	ldr	r0, [r4, #12]
    c592:	2500      	movs	r5, #0
    c594:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    c598:	f041 0104 	orr.w	r1, r1, #4
    c59c:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    c5a0:	6961      	ldr	r1, [r4, #20]
    c5a2:	794a      	ldrb	r2, [r1, #5]
    c5a4:	f002 0207 	and.w	r2, r2, #7
    c5a8:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    c5ac:	7909      	ldrb	r1, [r1, #4]
    c5ae:	f001 0107 	and.w	r1, r1, #7
    c5b2:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    c5b6:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    c5ba:	b133      	cbz	r3, c5ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1542>
    c5bc:	e029      	b.n	c612 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    c5be:	2020      	movs	r0, #32
    c5c0:	bd70      	pop	{r4, r5, r6, pc}
    c5c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c5c6:	f7ff be87 	b.w	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    c5ca:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    c5ce:	2b01      	cmp	r3, #1
    c5d0:	d01f      	beq.n	c612 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    c5d2:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    c5d6:	f100 0366 	add.w	r3, r0, #102	; 0x66
    c5da:	f04f 0c01 	mov.w	ip, #1
    c5de:	428e      	cmp	r6, r1
    c5e0:	bf01      	itttt	eq
    c5e2:	7819      	ldrbeq	r1, [r3, #0]
    c5e4:	4291      	cmpeq	r1, r2
    c5e6:	2102      	moveq	r1, #2
    c5e8:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    c5ec:	d011      	beq.n	c612 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    c5ee:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    c5f2:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    c5f6:	8802      	ldrh	r2, [r0, #0]
    c5f8:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    c5fc:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    c600:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    c604:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    c608:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    c60c:	7960      	ldrb	r0, [r4, #5]
    c60e:	f7f8 f8fd 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c612:	68e0      	ldr	r0, [r4, #12]
    c614:	2121      	movs	r1, #33	; 0x21
    c616:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c61a:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    c61e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c622:	1c49      	adds	r1, r1, #1
    c624:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c628:	2000      	movs	r0, #0
    c62a:	bd70      	pop	{r4, r5, r6, pc}
    c62c:	20000144 	.word	0x20000144
    c630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c634:	4c8a      	ldr	r4, [pc, #552]	; (c860 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d8>)
    c636:	68e0      	ldr	r0, [r4, #12]
    c638:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    c63c:	2920      	cmp	r1, #32
    c63e:	bf0c      	ite	eq
    c640:	2501      	moveq	r5, #1
    c642:	2500      	movne	r5, #0
    c644:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    c648:	2922      	cmp	r1, #34	; 0x22
    c64a:	bf08      	it	eq
    c64c:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    c650:	d006      	beq.n	c660 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    c652:	2d00      	cmp	r5, #0
    c654:	bf12      	itee	ne
    c656:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    c65a:	2002      	moveq	r0, #2
    c65c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c660:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    c664:	f041 0104 	orr.w	r1, r1, #4
    c668:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    c66c:	6960      	ldr	r0, [r4, #20]
    c66e:	f7fb f9a9 	bl	79c4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    c672:	f04f 0a01 	mov.w	sl, #1
    c676:	f04f 0800 	mov.w	r8, #0
    c67a:	2800      	cmp	r0, #0
    c67c:	d052      	beq.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c67e:	6967      	ldr	r7, [r4, #20]
    c680:	4638      	mov	r0, r7
    c682:	f005 f988 	bl	11996 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    c686:	4681      	mov	r9, r0
    c688:	4638      	mov	r0, r7
    c68a:	f005 f990 	bl	119ae <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    c68e:	4607      	mov	r7, r0
    c690:	f004 ffa1 	bl	115d6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    c694:	b1e8      	cbz	r0, c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    c696:	68e2      	ldr	r2, [r4, #12]
    c698:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    c69c:	4281      	cmp	r1, r0
    c69e:	d018      	beq.n	c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    c6a0:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    c6a4:	2b01      	cmp	r3, #1
    c6a6:	d028      	beq.n	c6fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1672>
    c6a8:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    c6ac:	423b      	tst	r3, r7
    c6ae:	d039      	beq.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c6b0:	2d00      	cmp	r5, #0
    c6b2:	bf04      	itt	eq
    c6b4:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    c6b8:	423a      	tsteq	r2, r7
    c6ba:	d10a      	bne.n	c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    c6bc:	b311      	cbz	r1, c704 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x167c>
    c6be:	2904      	cmp	r1, #4
    c6c0:	bf18      	it	ne
    c6c2:	2804      	cmpne	r0, #4
    c6c4:	d023      	beq.n	c70e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1686>
    c6c6:	2908      	cmp	r1, #8
    c6c8:	bf18      	it	ne
    c6ca:	2808      	cmpne	r0, #8
    c6cc:	d022      	beq.n	c714 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168c>
    c6ce:	4281      	cmp	r1, r0
    c6d0:	d828      	bhi.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c6d2:	4648      	mov	r0, r9
    c6d4:	f004 ff7f 	bl	115d6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    c6d8:	0001      	movs	r1, r0
    c6da:	d040      	beq.n	c75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    c6dc:	68e0      	ldr	r0, [r4, #12]
    c6de:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    c6e2:	428a      	cmp	r2, r1
    c6e4:	d03b      	beq.n	c75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    c6e6:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    c6ea:	2901      	cmp	r1, #1
    c6ec:	d015      	beq.n	c71a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1692>
    c6ee:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    c6f2:	ea10 0f09 	tst.w	r0, r9
    c6f6:	d015      	beq.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c6f8:	e031      	b.n	c75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    c6fa:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    c6fe:	423b      	tst	r3, r7
    c700:	d1d6      	bne.n	c6b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1628>
    c702:	e00f      	b.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c704:	f240 1181 	movw	r1, #385	; 0x181
    c708:	2006      	movs	r0, #6
    c70a:	f7f8 fa91 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c70e:	4281      	cmp	r1, r0
    c710:	d308      	bcc.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c712:	e7de      	b.n	c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    c714:	4281      	cmp	r1, r0
    c716:	d305      	bcc.n	c724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    c718:	e7db      	b.n	c6d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    c71a:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    c71e:	ea10 0f09 	tst.w	r0, r9
    c722:	d11c      	bne.n	c75e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    c724:	68e0      	ldr	r0, [r4, #12]
    c726:	2700      	movs	r7, #0
    c728:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    c72c:	2901      	cmp	r1, #1
    c72e:	bf0a      	itet	eq
    c730:	201e      	moveq	r0, #30
    c732:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    c736:	f7ff fc7b 	bleq	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c73a:	b38d      	cbz	r5, c7a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1718>
    c73c:	6960      	ldr	r0, [r4, #20]
    c73e:	78c1      	ldrb	r1, [r0, #3]
    c740:	68e0      	ldr	r0, [r4, #12]
    c742:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    c746:	fa0a f101 	lsl.w	r1, sl, r1
    c74a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    c74e:	d028      	beq.n	c7a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x171a>
    c750:	210a      	movs	r1, #10
    c752:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    c756:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    c75a:	b338      	cbz	r0, c7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1724>
    c75c:	e039      	b.n	c7d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    c75e:	466a      	mov	r2, sp
    c760:	6961      	ldr	r1, [r4, #20]
    c762:	68e0      	ldr	r0, [r4, #12]
    c764:	f7fa ffce 	bl	7704 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    c768:	b3b0      	cbz	r0, c7d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1750>
    c76a:	6960      	ldr	r0, [r4, #20]
    c76c:	f005 f91d 	bl	119aa <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    c770:	68e1      	ldr	r1, [r4, #12]
    c772:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    c776:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    c77a:	1a80      	subs	r0, r0, r2
    c77c:	b200      	sxth	r0, r0
    c77e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    c782:	4282      	cmp	r2, r0
    c784:	bfa8      	it	ge
    c786:	2800      	cmpge	r0, #0
    c788:	dd4d      	ble.n	c826 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x179e>
    c78a:	f89d 0000 	ldrb.w	r0, [sp]
    c78e:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    c792:	f89d 0001 	ldrb.w	r0, [sp, #1]
    c796:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    c79a:	2024      	movs	r0, #36	; 0x24
    c79c:	7030      	strb	r0, [r6, #0]
    c79e:	e047      	b.n	c830 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a8>
    c7a0:	e009      	b.n	c7b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x172e>
    c7a2:	f240 31c7 	movw	r1, #967	; 0x3c7
    c7a6:	2031      	movs	r0, #49	; 0x31
    c7a8:	f7f8 fa42 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7ac:	f240 31cf 	movw	r1, #975	; 0x3cf
    c7b0:	2031      	movs	r0, #49	; 0x31
    c7b2:	f7f8 fa3d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7b6:	f886 8000 	strb.w	r8, [r6]
    c7ba:	68e1      	ldr	r1, [r4, #12]
    c7bc:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    c7c0:	1e40      	subs	r0, r0, #1
    c7c2:	b240      	sxtb	r0, r0
    c7c4:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c7c8:	2800      	cmp	r0, #0
    c7ca:	db41      	blt.n	c850 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c8>
    c7cc:	f7ff fd84 	bl	c2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    c7d0:	4607      	mov	r7, r0
    c7d2:	4638      	mov	r0, r7
    c7d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7d8:	e7ff      	b.n	c7da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1752>
    c7da:	68e2      	ldr	r2, [r4, #12]
    c7dc:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    c7e0:	2801      	cmp	r0, #1
    c7e2:	bf18      	it	ne
    c7e4:	f882 81be 	strbne.w	r8, [r2, #446]	; 0x1be
    c7e8:	d007      	beq.n	c7fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1772>
    c7ea:	68e0      	ldr	r0, [r4, #12]
    c7ec:	f100 0185 	add.w	r1, r0, #133	; 0x85
    c7f0:	428e      	cmp	r6, r1
    c7f2:	bf08      	it	eq
    c7f4:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    c7f8:	e01a      	b.n	c830 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a8>
    c7fa:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
    c7fe:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    c802:	f8b2 01c2 	ldrh.w	r0, [r2, #450]	; 0x1c2
    c806:	f502 72d2 	add.w	r2, r2, #420	; 0x1a4
    c80a:	f004 ff8e 	bl	1172a <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    c80e:	b120      	cbz	r0, c81a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1792>
    c810:	68e1      	ldr	r1, [r4, #12]
    c812:	2025      	movs	r0, #37	; 0x25
    c814:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c818:	e7e7      	b.n	c7ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1762>
    c81a:	2000      	movs	r0, #0
    c81c:	f7ff fc08 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c820:	f886 8000 	strb.w	r8, [r6]
    c824:	e7e1      	b.n	c7ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1762>
    c826:	2028      	movs	r0, #40	; 0x28
    c828:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    c82c:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    c830:	68e0      	ldr	r0, [r4, #12]
    c832:	f100 0185 	add.w	r1, r0, #133	; 0x85
    c836:	428e      	cmp	r6, r1
    c838:	bf18      	it	ne
    c83a:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    c83e:	d10c      	bne.n	c85a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d2>
    c840:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c844:	1e49      	subs	r1, r1, #1
    c846:	b249      	sxtb	r1, r1
    c848:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c84c:	2900      	cmp	r1, #0
    c84e:	da04      	bge.n	c85a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d2>
    c850:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c854:	2031      	movs	r0, #49	; 0x31
    c856:	f7f8 f9eb 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c85a:	2000      	movs	r0, #0
    c85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c860:	20000144 	.word	0x20000144
    c864:	b510      	push	{r4, lr}
    c866:	4c18      	ldr	r4, [pc, #96]	; (c8c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    c868:	68e0      	ldr	r0, [r4, #12]
    c86a:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    c86e:	f041 0104 	orr.w	r1, r1, #4
    c872:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    c876:	6960      	ldr	r0, [r4, #20]
    c878:	f005 f8ce 	bl	11a18 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    c87c:	2816      	cmp	r0, #22
    c87e:	d10a      	bne.n	c896 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x180e>
    c880:	6960      	ldr	r0, [r4, #20]
    c882:	f005 f8cb 	bl	11a1c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    c886:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    c88a:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    c88e:	2920      	cmp	r1, #32
    c890:	d003      	beq.n	c89a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1812>
    c892:	2926      	cmp	r1, #38	; 0x26
    c894:	d004      	beq.n	c8a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1818>
    c896:	2000      	movs	r0, #0
    c898:	bd10      	pop	{r4, pc}
    c89a:	f7ff fbc9 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c89e:	e00c      	b.n	c8ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1832>
    c8a0:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    c8a4:	2301      	movs	r3, #1
    c8a6:	210b      	movs	r1, #11
    c8a8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c8ac:	f004 fddf 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c8b0:	2800      	cmp	r0, #0
    c8b2:	bf04      	itt	eq
    c8b4:	202a      	moveq	r0, #42	; 0x2a
    c8b6:	f7ff fbbb 	bleq	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c8ba:	2000      	movs	r0, #0
    c8bc:	68e1      	ldr	r1, [r4, #12]
    c8be:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c8c2:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c8c6:	bd10      	pop	{r4, pc}
    c8c8:	20000144 	.word	0x20000144
    c8cc:	b510      	push	{r4, lr}
    c8ce:	4c12      	ldr	r4, [pc, #72]	; (c918 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1890>)
    c8d0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    c8d4:	6960      	ldr	r0, [r4, #20]
    c8d6:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    c8da:	7900      	ldrb	r0, [r0, #4]
    c8dc:	2920      	cmp	r1, #32
    c8de:	d017      	beq.n	c910 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1888>
    c8e0:	2926      	cmp	r1, #38	; 0x26
    c8e2:	bf1c      	itt	ne
    c8e4:	2000      	movne	r0, #0
    c8e6:	bd10      	popne	{r4, pc}
    c8e8:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    c8ec:	2301      	movs	r3, #1
    c8ee:	210b      	movs	r1, #11
    c8f0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c8f4:	f004 fdbb 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c8f8:	2800      	cmp	r0, #0
    c8fa:	bf04      	itt	eq
    c8fc:	202a      	moveq	r0, #42	; 0x2a
    c8fe:	f7ff fb97 	bleq	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c902:	2000      	movs	r0, #0
    c904:	68e1      	ldr	r1, [r4, #12]
    c906:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c90a:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c90e:	bd10      	pop	{r4, pc}
    c910:	f7ff fb8e 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    c914:	e7f5      	b.n	c902 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x187a>
    c916:	0000      	.short	0x0000
    c918:	20000144 	.word	0x20000144
    c91c:	480d      	ldr	r0, [pc, #52]	; (c954 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18cc>)
    c91e:	b510      	push	{r4, lr}
    c920:	68c0      	ldr	r0, [r0, #12]
    c922:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    c926:	2917      	cmp	r1, #23
    c928:	bf1c      	itt	ne
    c92a:	2002      	movne	r0, #2
    c92c:	bd10      	popne	{r4, pc}
    c92e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c932:	1e49      	subs	r1, r1, #1
    c934:	b249      	sxtb	r1, r1
    c936:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c93a:	2900      	cmp	r1, #0
    c93c:	da04      	bge.n	c948 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    c93e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c942:	2031      	movs	r0, #49	; 0x31
    c944:	f7f8 f974 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c948:	211b      	movs	r1, #27
    c94a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c94e:	2000      	movs	r0, #0
    c950:	bd10      	pop	{r4, pc}
    c952:	0000      	.short	0x0000
    c954:	20000144 	.word	0x20000144
    c958:	b510      	push	{r4, lr}
    c95a:	4c0c      	ldr	r4, [pc, #48]	; (c98c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1904>)
    c95c:	2301      	movs	r3, #1
    c95e:	4619      	mov	r1, r3
    c960:	68e0      	ldr	r0, [r4, #12]
    c962:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    c966:	3078      	adds	r0, #120	; 0x78
    c968:	f004 fd81 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c96c:	2800      	cmp	r0, #0
    c96e:	bf1c      	itt	ne
    c970:	2000      	movne	r0, #0
    c972:	bd10      	popne	{r4, pc}
    c974:	6960      	ldr	r0, [r4, #20]
    c976:	f005 f81c 	bl	119b2 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    c97a:	68e1      	ldr	r1, [r4, #12]
    c97c:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    c980:	2007      	movs	r0, #7
    c982:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    c986:	2000      	movs	r0, #0
    c988:	bd10      	pop	{r4, pc}
    c98a:	0000      	.short	0x0000
    c98c:	20000144 	.word	0x20000144
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	4c4c      	ldr	r4, [pc, #304]	; (cac4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a3c>)
    c994:	2600      	movs	r6, #0
    c996:	4621      	mov	r1, r4
    c998:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    c99c:	6949      	ldr	r1, [r1, #20]
    c99e:	2001      	movs	r0, #1
    c9a0:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    c9a4:	7909      	ldrb	r1, [r1, #4]
    c9a6:	4635      	mov	r5, r6
    c9a8:	2a0e      	cmp	r2, #14
    c9aa:	bf08      	it	eq
    c9ac:	2912      	cmpeq	r1, #18
    c9ae:	d01d      	beq.n	c9ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1964>
    c9b0:	2a1c      	cmp	r2, #28
    c9b2:	bf08      	it	eq
    c9b4:	2914      	cmpeq	r1, #20
    c9b6:	d029      	beq.n	ca0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1984>
    c9b8:	2a04      	cmp	r2, #4
    c9ba:	bf08      	it	eq
    c9bc:	290e      	cmpeq	r1, #14
    c9be:	d043      	beq.n	ca48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19c0>
    c9c0:	2a20      	cmp	r2, #32
    c9c2:	bf08      	it	eq
    c9c4:	2916      	cmpeq	r1, #22
    c9c6:	d050      	beq.n	ca6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e2>
    c9c8:	2a26      	cmp	r2, #38	; 0x26
    c9ca:	bf08      	it	eq
    c9cc:	2916      	cmpeq	r1, #22
    c9ce:	d04c      	beq.n	ca6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e2>
    c9d0:	2917      	cmp	r1, #23
    c9d2:	bf04      	itt	eq
    c9d4:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    c9d8:	2a22      	cmpeq	r2, #34	; 0x22
    c9da:	d059      	beq.n	ca90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a08>
    c9dc:	69a2      	ldr	r2, [r4, #24]
    c9de:	2a00      	cmp	r2, #0
    c9e0:	d054      	beq.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    c9e2:	29ff      	cmp	r1, #255	; 0xff
    c9e4:	bf08      	it	eq
    c9e6:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    c9ea:	e04f      	b.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    c9ec:	2301      	movs	r3, #1
    c9ee:	2109      	movs	r1, #9
    c9f0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c9f4:	f004 fd3b 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d047      	beq.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    c9fc:	68e0      	ldr	r0, [r4, #12]
    c9fe:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    ca02:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    ca06:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    ca0a:	e03f      	b.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ca0c:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    ca10:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ca14:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    ca18:	f021 0120 	bic.w	r1, r1, #32
    ca1c:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    ca20:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    ca24:	2801      	cmp	r0, #1
    ca26:	bf04      	itt	eq
    ca28:	2002      	moveq	r0, #2
    ca2a:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    ca2e:	d02d      	beq.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ca30:	f8bc 0000 	ldrh.w	r0, [ip]
    ca34:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    ca38:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    ca3c:	f005 f969 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    ca40:	7960      	ldrb	r0, [r4, #5]
    ca42:	f7f7 fee3 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ca46:	e021      	b.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ca48:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    ca4c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ca50:	f8bc 1000 	ldrh.w	r1, [ip]
    ca54:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    ca58:	211a      	movs	r1, #26
    ca5a:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    ca5e:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    ca62:	7960      	ldrb	r0, [r4, #5]
    ca64:	f7f7 fed2 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ca68:	e010      	b.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ca6a:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    ca6e:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ca72:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    ca76:	2821      	cmp	r0, #33	; 0x21
    ca78:	d008      	beq.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ca7a:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    ca7e:	f020 0009 	bic.w	r0, r0, #9
    ca82:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    ca86:	201a      	movs	r0, #26
    ca88:	f7ff fad2 	bl	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    ca8c:	4630      	mov	r0, r6
    ca8e:	bd70      	pop	{r4, r5, r6, pc}
    ca90:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    ca94:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    ca98:	1e40      	subs	r0, r0, #1
    ca9a:	b240      	sxtb	r0, r0
    ca9c:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    caa0:	2800      	cmp	r0, #0
    caa2:	da04      	bge.n	caae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a26>
    caa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    caa8:	2031      	movs	r0, #49	; 0x31
    caaa:	f7f8 f8c1 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caae:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    cab2:	2801      	cmp	r0, #1
    cab4:	bf04      	itt	eq
    cab6:	2000      	moveq	r0, #0
    cab8:	f7ff faba 	bleq	c030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    cabc:	68e0      	ldr	r0, [r4, #12]
    cabe:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    cac2:	e7e3      	b.n	ca8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    cac4:	20000144 	.word	0x20000144
    cac8:	b570      	push	{r4, r5, r6, lr}
    caca:	4c33      	ldr	r4, [pc, #204]	; (cb98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b10>)
    cacc:	68e0      	ldr	r0, [r4, #12]
    cace:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cad2:	f011 0f02 	tst.w	r1, #2
    cad6:	d00a      	beq.n	caee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a66>
    cad8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    cadc:	2301      	movs	r3, #1
    cade:	2108      	movs	r1, #8
    cae0:	3078      	adds	r0, #120	; 0x78
    cae2:	f004 fcc4 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cae6:	2800      	cmp	r0, #0
    cae8:	bf04      	itt	eq
    caea:	2001      	moveq	r0, #1
    caec:	bd70      	popeq	{r4, r5, r6, pc}
    caee:	68e0      	ldr	r0, [r4, #12]
    caf0:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    caf4:	f010 0f02 	tst.w	r0, #2
    caf8:	d114      	bne.n	cb24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a9c>
    cafa:	6960      	ldr	r0, [r4, #20]
    cafc:	f004 ff5b 	bl	119b6 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    cb00:	68e1      	ldr	r1, [r4, #12]
    cb02:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    cb06:	6960      	ldr	r0, [r4, #20]
    cb08:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    cb0c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    cb10:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    cb14:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    cb18:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    cb1c:	f040 0002 	orr.w	r0, r0, #2
    cb20:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    cb24:	68e0      	ldr	r0, [r4, #12]
    cb26:	f04f 0500 	mov.w	r5, #0
    cb2a:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    cb2e:	f011 0f01 	tst.w	r1, #1
    cb32:	d114      	bne.n	cb5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ad6>
    cb34:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cb38:	f011 0f02 	tst.w	r1, #2
    cb3c:	d004      	beq.n	cb48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ac0>
    cb3e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    cb42:	2031      	movs	r0, #49	; 0x31
    cb44:	f7f8 f874 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb48:	f041 0102 	orr.w	r1, r1, #2
    cb4c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    cb50:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    cb54:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    cb58:	1c49      	adds	r1, r1, #1
    cb5a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    cb5e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    cb62:	2906      	cmp	r1, #6
    cb64:	d106      	bne.n	cb74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>
    cb66:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    cb6a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    cb6e:	7960      	ldrb	r0, [r4, #5]
    cb70:	f7f7 fe4c 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    cb74:	68e0      	ldr	r0, [r4, #12]
    cb76:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    cb7a:	b159      	cbz	r1, cb94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    cb7c:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    cb80:	7960      	ldrb	r0, [r4, #5]
    cb82:	f7f7 fe43 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    cb86:	68e0      	ldr	r0, [r4, #12]
    cb88:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    cb8c:	2900      	cmp	r1, #0
    cb8e:	bf08      	it	eq
    cb90:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    cb94:	2000      	movs	r0, #0
    cb96:	bd70      	pop	{r4, r5, r6, pc}
    cb98:	20000144 	.word	0x20000144
    cb9c:	4809      	ldr	r0, [pc, #36]	; (cbc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b3c>)
    cb9e:	b510      	push	{r4, lr}
    cba0:	68c0      	ldr	r0, [r0, #12]
    cba2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    cba6:	2914      	cmp	r1, #20
    cba8:	d004      	beq.n	cbb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b2c>
    cbaa:	f240 6187 	movw	r1, #1671	; 0x687
    cbae:	2031      	movs	r0, #49	; 0x31
    cbb0:	f7f8 f83e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbb4:	2101      	movs	r1, #1
    cbb6:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    cbba:	2115      	movs	r1, #21
    cbbc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    cbc0:	bd10      	pop	{r4, pc}
    cbc2:	0000      	.short	0x0000
    cbc4:	20000144 	.word	0x20000144
    cbc8:	480f      	ldr	r0, [pc, #60]	; (cc08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b80>)
    cbca:	b510      	push	{r4, lr}
    cbcc:	68c0      	ldr	r0, [r0, #12]
    cbce:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cbd2:	f011 0f01 	tst.w	r1, #1
    cbd6:	d011      	beq.n	cbfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b74>
    cbd8:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    cbdc:	1e52      	subs	r2, r2, #1
    cbde:	b252      	sxtb	r2, r2
    cbe0:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    cbe4:	2a00      	cmp	r2, #0
    cbe6:	bfa2      	ittt	ge
    cbe8:	f021 0101 	bicge.w	r1, r1, #1
    cbec:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    cbf0:	bd10      	popge	{r4, pc}
    cbf2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    cbf6:	2031      	movs	r0, #49	; 0x31
    cbf8:	f7f8 f81a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbfc:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    cc00:	2031      	movs	r0, #49	; 0x31
    cc02:	f7f8 f815 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc06:	0000      	.short	0x0000
    cc08:	20000144 	.word	0x20000144
    cc0c:	b510      	push	{r4, lr}
    cc0e:	4c0a      	ldr	r4, [pc, #40]	; (cc38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>)
    cc10:	2301      	movs	r3, #1
    cc12:	2100      	movs	r1, #0
    cc14:	68e0      	ldr	r0, [r4, #12]
    cc16:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    cc1a:	3078      	adds	r0, #120	; 0x78
    cc1c:	f004 fc27 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cc20:	b120      	cbz	r0, cc2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ba4>
    cc22:	68e1      	ldr	r1, [r4, #12]
    cc24:	201c      	movs	r0, #28
    cc26:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    cc2a:	bd10      	pop	{r4, pc}
    cc2c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    cc30:	2031      	movs	r0, #49	; 0x31
    cc32:	f7f7 fffd 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc36:	0000      	.short	0x0000
    cc38:	20000144 	.word	0x20000144
    cc3c:	480f      	ldr	r0, [pc, #60]	; (cc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf4>)
    cc3e:	b510      	push	{r4, lr}
    cc40:	68c0      	ldr	r0, [r0, #12]
    cc42:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cc46:	f001 0230 	and.w	r2, r1, #48	; 0x30
    cc4a:	2a10      	cmp	r2, #16
    cc4c:	d004      	beq.n	cc58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bd0>
    cc4e:	f240 61fc 	movw	r1, #1788	; 0x6fc
    cc52:	2031      	movs	r0, #49	; 0x31
    cc54:	f7f7 ffec 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc58:	f021 0110 	bic.w	r1, r1, #16
    cc5c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    cc60:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    cc64:	1e49      	subs	r1, r1, #1
    cc66:	b249      	sxtb	r1, r1
    cc68:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    cc6c:	2900      	cmp	r1, #0
    cc6e:	bfa8      	it	ge
    cc70:	bd10      	popge	{r4, pc}
    cc72:	f44f 71c8 	mov.w	r1, #400	; 0x190
    cc76:	2031      	movs	r0, #49	; 0x31
    cc78:	f7f7 ffda 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc7c:	20000144 	.word	0x20000144
    cc80:	b510      	push	{r4, lr}
    cc82:	4c0a      	ldr	r4, [pc, #40]	; (ccac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c24>)
    cc84:	2301      	movs	r3, #1
    cc86:	2100      	movs	r1, #0
    cc88:	68e0      	ldr	r0, [r4, #12]
    cc8a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    cc8e:	3078      	adds	r0, #120	; 0x78
    cc90:	f004 fbed 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cc94:	b120      	cbz	r0, cca0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>
    cc96:	68e1      	ldr	r1, [r4, #12]
    cc98:	200e      	movs	r0, #14
    cc9a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    cc9e:	bd10      	pop	{r4, pc}
    cca0:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    cca4:	2031      	movs	r0, #49	; 0x31
    cca6:	f7f7 ffc3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccaa:	0000      	.short	0x0000
    ccac:	20000144 	.word	0x20000144
    ccb0:	480b      	ldr	r0, [pc, #44]	; (cce0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c58>)
    ccb2:	68c0      	ldr	r0, [r0, #12]
    ccb4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ccb8:	f021 0104 	bic.w	r1, r1, #4
    ccbc:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ccc0:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ccc4:	1e49      	subs	r1, r1, #1
    ccc6:	b249      	sxtb	r1, r1
    ccc8:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    cccc:	2900      	cmp	r1, #0
    ccce:	bfa8      	it	ge
    ccd0:	4770      	bxge	lr
    ccd2:	b510      	push	{r4, lr}
    ccd4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ccd8:	2031      	movs	r0, #49	; 0x31
    ccda:	f7f7 ffa9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccde:	0000      	.short	0x0000
    cce0:	20000144 	.word	0x20000144
    cce4:	4809      	ldr	r0, [pc, #36]	; (cd0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c84>)
    cce6:	b510      	push	{r4, lr}
    cce8:	68c0      	ldr	r0, [r0, #12]
    ccea:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ccee:	2910      	cmp	r1, #16
    ccf0:	d004      	beq.n	ccfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c74>
    ccf2:	f240 617f 	movw	r1, #1663	; 0x67f
    ccf6:	2031      	movs	r0, #49	; 0x31
    ccf8:	f7f7 ff9a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccfc:	2101      	movs	r1, #1
    ccfe:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    cd02:	2111      	movs	r1, #17
    cd04:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    cd08:	bd10      	pop	{r4, pc}
    cd0a:	0000      	.short	0x0000
    cd0c:	20000144 	.word	0x20000144
    cd10:	b510      	push	{r4, lr}
    cd12:	4c0a      	ldr	r4, [pc, #40]	; (cd3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cb4>)
    cd14:	2301      	movs	r3, #1
    cd16:	2100      	movs	r1, #0
    cd18:	68e0      	ldr	r0, [r4, #12]
    cd1a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    cd1e:	3078      	adds	r0, #120	; 0x78
    cd20:	f004 fba5 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cd24:	b120      	cbz	r0, cd30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ca8>
    cd26:	68e1      	ldr	r1, [r4, #12]
    cd28:	201f      	movs	r0, #31
    cd2a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    cd2e:	bd10      	pop	{r4, pc}
    cd30:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    cd34:	2031      	movs	r0, #49	; 0x31
    cd36:	f7f7 ff7b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd3a:	0000      	.short	0x0000
    cd3c:	20000144 	.word	0x20000144
    cd40:	4808      	ldr	r0, [pc, #32]	; (cd64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cdc>)
    cd42:	b510      	push	{r4, lr}
    cd44:	68c0      	ldr	r0, [r0, #12]
    cd46:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    cd4a:	2921      	cmp	r1, #33	; 0x21
    cd4c:	bf11      	iteee	ne
    cd4e:	2900      	cmpne	r1, #0
    cd50:	2122      	moveq	r1, #34	; 0x22
    cd52:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    cd56:	bd10      	popeq	{r4, pc}
    cd58:	f240 710f 	movw	r1, #1807	; 0x70f
    cd5c:	f04f 0031 	mov.w	r0, #49	; 0x31
    cd60:	f7f7 ff66 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd64:	20000144 	.word	0x20000144
    cd68:	4807      	ldr	r0, [pc, #28]	; (cd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    cd6a:	b510      	push	{r4, lr}
    cd6c:	68c0      	ldr	r0, [r0, #12]
    cd6e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    cd72:	2915      	cmp	r1, #21
    cd74:	bf02      	ittt	eq
    cd76:	2119      	moveq	r1, #25
    cd78:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    cd7c:	bd10      	popeq	{r4, pc}
    cd7e:	f240 6194 	movw	r1, #1684	; 0x694
    cd82:	2031      	movs	r0, #49	; 0x31
    cd84:	f7f7 ff54 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd88:	20000144 	.word	0x20000144
    cd8c:	4807      	ldr	r0, [pc, #28]	; (cdac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d24>)
    cd8e:	b510      	push	{r4, lr}
    cd90:	68c0      	ldr	r0, [r0, #12]
    cd92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    cd96:	2915      	cmp	r1, #21
    cd98:	bf02      	ittt	eq
    cd9a:	2117      	moveq	r1, #23
    cd9c:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    cda0:	bd10      	popeq	{r4, pc}
    cda2:	f240 618e 	movw	r1, #1678	; 0x68e
    cda6:	2031      	movs	r0, #49	; 0x31
    cda8:	f7f7 ff42 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdac:	20000144 	.word	0x20000144
    cdb0:	b570      	push	{r4, r5, r6, lr}
    cdb2:	4d1c      	ldr	r5, [pc, #112]	; (ce24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d9c>)
    cdb4:	68e8      	ldr	r0, [r5, #12]
    cdb6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    cdba:	291b      	cmp	r1, #27
    cdbc:	d004      	beq.n	cdc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d40>
    cdbe:	f240 61ae 	movw	r1, #1710	; 0x6ae
    cdc2:	2031      	movs	r0, #49	; 0x31
    cdc4:	f7f7 ff34 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdc8:	2400      	movs	r4, #0
    cdca:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    cdce:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    cdd2:	b121      	cbz	r1, cdde <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d56>
    cdd4:	f240 61b2 	movw	r1, #1714	; 0x6b2
    cdd8:	2031      	movs	r0, #49	; 0x31
    cdda:	f7f7 ff29 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdde:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    cde2:	b141      	cbz	r1, cdf6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6e>
    cde4:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    cde8:	8801      	ldrh	r1, [r0, #0]
    cdea:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    cdee:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    cdf2:	210e      	movs	r1, #14
    cdf4:	e008      	b.n	ce08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d80>
    cdf6:	8801      	ldrh	r1, [r0, #0]
    cdf8:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    cdfc:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    ce00:	2101      	movs	r1, #1
    ce02:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    ce06:	210d      	movs	r1, #13
    ce08:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    ce0c:	8800      	ldrh	r0, [r0, #0]
    ce0e:	f7f8 fb23 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ce12:	f004 f891 	bl	10f38 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    ce16:	7968      	ldrb	r0, [r5, #5]
    ce18:	f7f7 fcf8 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ce1c:	68e8      	ldr	r0, [r5, #12]
    ce1e:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ce22:	bd70      	pop	{r4, r5, r6, pc}
    ce24:	20000144 	.word	0x20000144
    ce28:	b510      	push	{r4, lr}
    ce2a:	4c08      	ldr	r4, [pc, #32]	; (ce4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>)
    ce2c:	2301      	movs	r3, #1
    ce2e:	4619      	mov	r1, r3
    ce30:	68e0      	ldr	r0, [r4, #12]
    ce32:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ce36:	3078      	adds	r0, #120	; 0x78
    ce38:	f004 fb19 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ce3c:	2800      	cmp	r0, #0
    ce3e:	bf18      	it	ne
    ce40:	bd10      	popne	{r4, pc}
    ce42:	2008      	movs	r0, #8
    ce44:	68e1      	ldr	r1, [r4, #12]
    ce46:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    ce4a:	bd10      	pop	{r4, pc}
    ce4c:	20000144 	.word	0x20000144
    ce50:	481b      	ldr	r0, [pc, #108]	; (cec0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e38>)
    ce52:	b510      	push	{r4, lr}
    ce54:	6901      	ldr	r1, [r0, #16]
    ce56:	68c0      	ldr	r0, [r0, #12]
    ce58:	2200      	movs	r2, #0
    ce5a:	7909      	ldrb	r1, [r1, #4]
    ce5c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    ce60:	2b0a      	cmp	r3, #10
    ce62:	bf01      	itttt	eq
    ce64:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    ce68:	428b      	cmpeq	r3, r1
    ce6a:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    ce6e:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    ce72:	bf08      	it	eq
    ce74:	bd10      	popeq	{r4, pc}
    ce76:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    ce7a:	f013 0f08 	tst.w	r3, #8
    ce7e:	d012      	beq.n	cea6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e1e>
    ce80:	f023 0108 	bic.w	r1, r3, #8
    ce84:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ce88:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ce8c:	f1a1 0101 	sub.w	r1, r1, #1
    ce90:	b249      	sxtb	r1, r1
    ce92:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ce96:	2900      	cmp	r1, #0
    ce98:	bfa8      	it	ge
    ce9a:	bd10      	popge	{r4, pc}
    ce9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
    cea0:	2031      	movs	r0, #49	; 0x31
    cea2:	f7f7 fec5 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cea6:	29ff      	cmp	r1, #255	; 0xff
    cea8:	d004      	beq.n	ceb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2c>
    ceaa:	f240 616a 	movw	r1, #1642	; 0x66a
    ceae:	2031      	movs	r0, #49	; 0x31
    ceb0:	f7f7 febe 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceb4:	2127      	movs	r1, #39	; 0x27
    ceb6:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    ceba:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    cebe:	bd10      	pop	{r4, pc}
    cec0:	20000144 	.word	0x20000144
    cec4:	b510      	push	{r4, lr}
    cec6:	4c1b      	ldr	r4, [pc, #108]	; (cf34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eac>)
    cec8:	68e0      	ldr	r0, [r4, #12]
    ceca:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    cece:	f011 0f02 	tst.w	r1, #2
    ced2:	d01d      	beq.n	cf10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e88>
    ced4:	2100      	movs	r1, #0
    ced6:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    ceda:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    cede:	68e0      	ldr	r0, [r4, #12]
    cee0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    cee4:	f011 0f02 	tst.w	r1, #2
    cee8:	bf08      	it	eq
    ceea:	bd10      	popeq	{r4, pc}
    ceec:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    cef0:	1e52      	subs	r2, r2, #1
    cef2:	b252      	sxtb	r2, r2
    cef4:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    cef8:	2a00      	cmp	r2, #0
    cefa:	bfa2      	ittt	ge
    cefc:	f021 0102 	bicge.w	r1, r1, #2
    cf00:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    cf04:	bd10      	popge	{r4, pc}
    cf06:	f44f 71c8 	mov.w	r1, #400	; 0x190
    cf0a:	2031      	movs	r0, #49	; 0x31
    cf0c:	f7f7 fe90 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf10:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    cf14:	2301      	movs	r3, #1
    cf16:	2100      	movs	r1, #0
    cf18:	3078      	adds	r0, #120	; 0x78
    cf1a:	f004 faa8 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    cf1e:	b120      	cbz	r0, cf2a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ea2>
    cf20:	68e1      	ldr	r1, [r4, #12]
    cf22:	2006      	movs	r0, #6
    cf24:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    cf28:	e7d9      	b.n	cede <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e56>
    cf2a:	f240 61d4 	movw	r1, #1748	; 0x6d4
    cf2e:	2031      	movs	r0, #49	; 0x31
    cf30:	f7f7 fe7e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf34:	20000144 	.word	0x20000144

0000cf38 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    cf38:	4804      	ldr	r0, [pc, #16]	; (cf4c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    cf3a:	6840      	ldr	r0, [r0, #4]
    cf3c:	7801      	ldrb	r1, [r0, #0]
    cf3e:	2900      	cmp	r1, #0
    cf40:	bf14      	ite	ne
    cf42:	8880      	ldrhne	r0, [r0, #4]
    cf44:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    cf48:	4770      	bx	lr
    cf4a:	0000      	.short	0x0000
    cf4c:	2000022c 	.word	0x2000022c

0000cf50 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    cf50:	4902      	ldr	r1, [pc, #8]	; (cf5c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    cf52:	6849      	ldr	r1, [r1, #4]
    cf54:	f881 009b 	strb.w	r0, [r1, #155]	; 0x9b
    cf58:	4770      	bx	lr
    cf5a:	0000      	.short	0x0000
    cf5c:	2000022c 	.word	0x2000022c

0000cf60 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    cf60:	4802      	ldr	r0, [pc, #8]	; (cf6c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    cf62:	6840      	ldr	r0, [r0, #4]
    cf64:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    cf68:	4770      	bx	lr
    cf6a:	0000      	.short	0x0000
    cf6c:	2000022c 	.word	0x2000022c

0000cf70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    cf70:	480c      	ldr	r0, [pc, #48]	; (cfa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    cf72:	6841      	ldr	r1, [r0, #4]
    cf74:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    cf78:	2803      	cmp	r0, #3
    cf7a:	d004      	beq.n	cf86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    cf7c:	2801      	cmp	r0, #1
    cf7e:	bf18      	it	ne
    cf80:	2802      	cmpne	r0, #2
    cf82:	d007      	beq.n	cf94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    cf84:	e004      	b.n	cf90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    cf86:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    cf8a:	2801      	cmp	r0, #1
    cf8c:	bf08      	it	eq
    cf8e:	4770      	bxeq	lr
    cf90:	2000      	movs	r0, #0
    cf92:	4770      	bx	lr
    cf94:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    cf98:	2801      	cmp	r0, #1
    cf9a:	bf14      	ite	ne
    cf9c:	2803      	cmpne	r0, #3
    cf9e:	2001      	moveq	r0, #1
    cfa0:	d1f6      	bne.n	cf90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    cfa2:	4770      	bx	lr
    cfa4:	2000022c 	.word	0x2000022c

0000cfa8 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    cfa8:	4806      	ldr	r0, [pc, #24]	; (cfc4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    cfaa:	7800      	ldrb	r0, [r0, #0]
    cfac:	2800      	cmp	r0, #0
    cfae:	bf1c      	itt	ne
    cfb0:	2000      	movne	r0, #0
    cfb2:	4770      	bxne	lr
    cfb4:	b510      	push	{r4, lr}
    cfb6:	2000      	movs	r0, #0
    cfb8:	f004 f8f0 	bl	1119c <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    cfbc:	f080 0001 	eor.w	r0, r0, #1
    cfc0:	bd10      	pop	{r4, pc}
    cfc2:	0000      	.short	0x0000
    cfc4:	20001600 	.word	0x20001600

0000cfc8 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    cfc8:	4901      	ldr	r1, [pc, #4]	; (cfd0 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    cfca:	6048      	str	r0, [r1, #4]
    cfcc:	4770      	bx	lr
    cfce:	0000      	.short	0x0000
    cfd0:	200015ec 	.word	0x200015ec

0000cfd4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    cfd4:	4901      	ldr	r1, [pc, #4]	; (cfdc <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    cfd6:	7048      	strb	r0, [r1, #1]
    cfd8:	4770      	bx	lr
    cfda:	0000      	.short	0x0000
    cfdc:	200015ec 	.word	0x200015ec

0000cfe0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    cfe0:	4905      	ldr	r1, [pc, #20]	; (cff8 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    cfe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfe6:	fbb1 f1f2 	udiv	r1, r1, r2
    cfea:	b510      	push	{r4, lr}
    cfec:	f201 11df 	addw	r1, r1, #479	; 0x1df
    cff0:	f004 ff5a 	bl	11ea8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    cff4:	b280      	uxth	r0, r0
    cff6:	bd10      	pop	{r4, pc}
    cff8:	000122f9 	.word	0x000122f9

0000cffc <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    cffc:	4801      	ldr	r0, [pc, #4]	; (d004 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    cffe:	7800      	ldrb	r0, [r0, #0]
    d000:	4770      	bx	lr
    d002:	0000      	.short	0x0000
    d004:	20001600 	.word	0x20001600

0000d008 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    d008:	4a01      	ldr	r2, [pc, #4]	; (d010 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    d00a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    d00e:	4770      	bx	lr
    d010:	2000023c 	.word	0x2000023c

0000d014 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    d014:	4806      	ldr	r0, [pc, #24]	; (d030 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    d016:	4905      	ldr	r1, [pc, #20]	; (d02c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    d018:	6501      	str	r1, [r0, #80]	; 0x50
    d01a:	4906      	ldr	r1, [pc, #24]	; (d034 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    d01c:	6541      	str	r1, [r0, #84]	; 0x54
    d01e:	4807      	ldr	r0, [pc, #28]	; (d03c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    d020:	4905      	ldr	r1, [pc, #20]	; (d038 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    d022:	6501      	str	r1, [r0, #80]	; 0x50
    d024:	4906      	ldr	r1, [pc, #24]	; (d040 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    d026:	6541      	str	r1, [r0, #84]	; 0x54
    d028:	4770      	bx	lr
    d02a:	0000      	.short	0x0000
    d02c:	0000d15d 	.word	0x0000d15d
    d030:	20000258 	.word	0x20000258
    d034:	0000d21d 	.word	0x0000d21d
    d038:	0000d461 	.word	0x0000d461
    d03c:	200002bc 	.word	0x200002bc
    d040:	0000d491 	.word	0x0000d491

0000d044 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    d044:	4806      	ldr	r0, [pc, #24]	; (d060 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    d046:	4905      	ldr	r1, [pc, #20]	; (d05c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    d048:	6581      	str	r1, [r0, #88]	; 0x58
    d04a:	4906      	ldr	r1, [pc, #24]	; (d064 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    d04c:	65c1      	str	r1, [r0, #92]	; 0x5c
    d04e:	4807      	ldr	r0, [pc, #28]	; (d06c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    d050:	4905      	ldr	r1, [pc, #20]	; (d068 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    d052:	6581      	str	r1, [r0, #88]	; 0x58
    d054:	4906      	ldr	r1, [pc, #24]	; (d070 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    d056:	6601      	str	r1, [r0, #96]	; 0x60
    d058:	4770      	bx	lr
    d05a:	0000      	.short	0x0000
    d05c:	0000d2ad 	.word	0x0000d2ad
    d060:	20000258 	.word	0x20000258
    d064:	0000d3c1 	.word	0x0000d3c1
    d068:	0000d4c1 	.word	0x0000d4c1
    d06c:	200002bc 	.word	0x200002bc
    d070:	0000d4f1 	.word	0x0000d4f1
    d074:	4a1a      	ldr	r2, [pc, #104]	; (d0e0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x9c>)
    d076:	b510      	push	{r4, lr}
    d078:	6891      	ldr	r1, [r2, #8]
    d07a:	880b      	ldrh	r3, [r1, #0]
    d07c:	f8a1 31b4 	strh.w	r3, [r1, #436]	; 0x1b4
    d080:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    d084:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    d088:	2801      	cmp	r0, #1
    d08a:	bf18      	it	ne
    d08c:	2802      	cmpne	r0, #2
    d08e:	d00b      	beq.n	d0a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    d090:	2804      	cmp	r0, #4
    d092:	bf14      	ite	ne
    d094:	2808      	cmpne	r0, #8
    d096:	2003      	moveq	r0, #3
    d098:	d006      	beq.n	d0a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    d09a:	bf00      	nop
    d09c:	f240 218f 	movw	r1, #655	; 0x28f
    d0a0:	f04f 0006 	mov.w	r0, #6
    d0a4:	f7f7 fdc4 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0a8:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    d0ac:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    d0b0:	2801      	cmp	r0, #1
    d0b2:	bf18      	it	ne
    d0b4:	2802      	cmpne	r0, #2
    d0b6:	d004      	beq.n	d0c2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x7e>
    d0b8:	2804      	cmp	r0, #4
    d0ba:	bf14      	ite	ne
    d0bc:	2808      	cmpne	r0, #8
    d0be:	2003      	moveq	r0, #3
    d0c0:	d1ec      	bne.n	d09c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    d0c2:	f881 01b7 	strb.w	r0, [r1, #439]	; 0x1b7
    d0c6:	f04f 0001 	mov.w	r0, #1
    d0ca:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    d0ce:	f04f 0000 	mov.w	r0, #0
    d0d2:	f881 013e 	strb.w	r0, [r1, #318]	; 0x13e
    d0d6:	78d0      	ldrb	r0, [r2, #3]
    d0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0dc:	f7f7 bb96 	b.w	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    d0e0:	2000023c 	.word	0x2000023c
    d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0e8:	4c1b      	ldr	r4, [pc, #108]	; (d158 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x114>)
    d0ea:	2600      	movs	r6, #0
    d0ec:	2703      	movs	r7, #3
    d0ee:	f8d4 c008 	ldr.w	ip, [r4, #8]
    d0f2:	2501      	movs	r5, #1
    d0f4:	b1a0      	cbz	r0, d120 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xdc>
    d0f6:	6920      	ldr	r0, [r4, #16]
    d0f8:	78c0      	ldrb	r0, [r0, #3]
    d0fa:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    d0fe:	fa05 f000 	lsl.w	r0, r5, r0
    d102:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    d106:	d006      	beq.n	d116 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xd2>
    d108:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    d10c:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    d110:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    d114:	e01c      	b.n	d150 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x10c>
    d116:	f240 512f 	movw	r1, #1327	; 0x52f
    d11a:	2036      	movs	r0, #54	; 0x36
    d11c:	f7f7 fd88 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d120:	2300      	movs	r3, #0
    d122:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    d126:	4619      	mov	r1, r3
    d128:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    d12c:	f004 f99f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d130:	2800      	cmp	r0, #0
    d132:	bf04      	itt	eq
    d134:	2001      	moveq	r0, #1
    d136:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    d13a:	6920      	ldr	r0, [r4, #16]
    d13c:	78c1      	ldrb	r1, [r0, #3]
    d13e:	68a0      	ldr	r0, [r4, #8]
    d140:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    d144:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    d148:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    d14c:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    d150:	2000      	movs	r0, #0
    d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d156:	0000      	.short	0x0000
    d158:	2000023c 	.word	0x2000023c
    d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d15e:	4c2e      	ldr	r4, [pc, #184]	; (d218 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1d4>)
    d160:	2300      	movs	r3, #0
    d162:	4619      	mov	r1, r3
    d164:	68a0      	ldr	r0, [r4, #8]
    d166:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    d16a:	3078      	adds	r0, #120	; 0x78
    d16c:	f004 f97f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d170:	2800      	cmp	r0, #0
    d172:	bf04      	itt	eq
    d174:	2001      	moveq	r0, #1
    d176:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    d178:	6920      	ldr	r0, [r4, #16]
    d17a:	f004 fc1e 	bl	119ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    d17e:	2800      	cmp	r0, #0
    d180:	d02f      	beq.n	d1e2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x19e>
    d182:	6920      	ldr	r0, [r4, #16]
    d184:	f004 fc0b 	bl	1199e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    d188:	4605      	mov	r5, r0
    d18a:	6920      	ldr	r0, [r4, #16]
    d18c:	f004 fc0b 	bl	119a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    d190:	4606      	mov	r6, r0
    d192:	6920      	ldr	r0, [r4, #16]
    d194:	f004 fc01 	bl	1199a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    d198:	4607      	mov	r7, r0
    d19a:	6920      	ldr	r0, [r4, #16]
    d19c:	f004 fc01 	bl	119a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    d1a0:	4601      	mov	r1, r0
    d1a2:	9500      	str	r5, [sp, #0]
    d1a4:	68a0      	ldr	r0, [r4, #8]
    d1a6:	4633      	mov	r3, r6
    d1a8:	463a      	mov	r2, r7
    d1aa:	3028      	adds	r0, #40	; 0x28
    d1ac:	f004 fe87 	bl	11ebe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    d1b0:	68a1      	ldr	r1, [r4, #8]
    d1b2:	2501      	movs	r5, #1
    d1b4:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    d1b8:	281c      	cmp	r0, #28
    d1ba:	bf16      	itet	ne
    d1bc:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    d1c0:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    d1c4:	2801      	cmpne	r0, #1
    d1c6:	d007      	beq.n	d1d8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x194>
    d1c8:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    d1cc:	2800      	cmp	r0, #0
    d1ce:	bf04      	itt	eq
    d1d0:	f891 0134 	ldrbeq.w	r0, [r1, #308]	; 0x134
    d1d4:	2800      	cmpeq	r0, #0
    d1d6:	d00a      	beq.n	d1ee <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1aa>
    d1d8:	f04f 001e 	mov.w	r0, #30
    d1dc:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    d1e0:	e011      	b.n	d206 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c2>
    d1e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1e6:	f04f 0000 	mov.w	r0, #0
    d1ea:	f7ff bf7b 	b.w	d0e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    d1ee:	201d      	movs	r0, #29
    d1f0:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    d1f4:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    d1f8:	f831 0b28 	ldrh.w	r0, [r1], #40
    d1fc:	f004 fe67 	bl	11ece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    d200:	78e0      	ldrb	r0, [r4, #3]
    d202:	f7f7 fb03 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    d206:	68a0      	ldr	r0, [r4, #8]
    d208:	2100      	movs	r1, #0
    d20a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    d20e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    d212:	4608      	mov	r0, r1
    d214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d216:	0000      	.short	0x0000
    d218:	2000023c 	.word	0x2000023c
    d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d21e:	4c22      	ldr	r4, [pc, #136]	; (d2a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x264>)
    d220:	2300      	movs	r3, #0
    d222:	210a      	movs	r1, #10
    d224:	68a0      	ldr	r0, [r4, #8]
    d226:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    d22a:	3078      	adds	r0, #120	; 0x78
    d22c:	f004 f91f 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d230:	2800      	cmp	r0, #0
    d232:	bf04      	itt	eq
    d234:	2001      	moveq	r0, #1
    d236:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    d238:	6920      	ldr	r0, [r4, #16]
    d23a:	f004 fbbe 	bl	119ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    d23e:	b1c8      	cbz	r0, d274 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x230>
    d240:	6920      	ldr	r0, [r4, #16]
    d242:	f004 fbac 	bl	1199e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    d246:	4605      	mov	r5, r0
    d248:	6920      	ldr	r0, [r4, #16]
    d24a:	f004 fbac 	bl	119a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    d24e:	4606      	mov	r6, r0
    d250:	6920      	ldr	r0, [r4, #16]
    d252:	f004 fba2 	bl	1199a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    d256:	4607      	mov	r7, r0
    d258:	6920      	ldr	r0, [r4, #16]
    d25a:	f004 fba2 	bl	119a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    d25e:	4601      	mov	r1, r0
    d260:	9500      	str	r5, [sp, #0]
    d262:	68a0      	ldr	r0, [r4, #8]
    d264:	4633      	mov	r3, r6
    d266:	463a      	mov	r2, r7
    d268:	3028      	adds	r0, #40	; 0x28
    d26a:	f004 fe28 	bl	11ebe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    d26e:	68a0      	ldr	r0, [r4, #8]
    d270:	f004 fd8a 	bl	11d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    d274:	68a1      	ldr	r1, [r4, #8]
    d276:	2000      	movs	r0, #0
    d278:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    d27c:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    d280:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    d284:	2801      	cmp	r0, #1
    d286:	bf04      	itt	eq
    d288:	2002      	moveq	r0, #2
    d28a:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    d28e:	d008      	beq.n	d2a2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x25e>
    d290:	8808      	ldrh	r0, [r1, #0]
    d292:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    d296:	3128      	adds	r1, #40	; 0x28
    d298:	f004 fd3b 	bl	11d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    d29c:	78e0      	ldrb	r0, [r4, #3]
    d29e:	f7f7 fab5 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    d2a2:	2000      	movs	r0, #0
    d2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2a6:	0000      	.short	0x0000
    d2a8:	2000023c 	.word	0x2000023c
    d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ae:	4c43      	ldr	r4, [pc, #268]	; (d3bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x378>)
    d2b0:	2500      	movs	r5, #0
    d2b2:	b087      	sub	sp, #28
    d2b4:	68a0      	ldr	r0, [r4, #8]
    d2b6:	462b      	mov	r3, r5
    d2b8:	4629      	mov	r1, r5
    d2ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    d2be:	3078      	adds	r0, #120	; 0x78
    d2c0:	f004 f8d5 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d2c4:	2800      	cmp	r0, #0
    d2c6:	bf02      	ittt	eq
    d2c8:	2001      	moveq	r0, #1
    d2ca:	b007      	addeq	sp, #28
    d2cc:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    d2ce:	68a0      	ldr	r0, [r4, #8]
    d2d0:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    d2d4:	2823      	cmp	r0, #35	; 0x23
    d2d6:	bf11      	iteee	ne
    d2d8:	2824      	cmpne	r0, #36	; 0x24
    d2da:	2020      	moveq	r0, #32
    d2dc:	b007      	addeq	sp, #28
    d2de:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    d2e0:	4668      	mov	r0, sp
    d2e2:	f7f8 fbd5 	bl	5a90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    d2e6:	2800      	cmp	r0, #0
    d2e8:	bf08      	it	eq
    d2ea:	2100      	moveq	r1, #0
    d2ec:	d004      	beq.n	d2f8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2b4>
    d2ee:	9800      	ldr	r0, [sp, #0]
    d2f0:	a901      	add	r1, sp, #4
    d2f2:	78c0      	ldrb	r0, [r0, #3]
    d2f4:	f88d 0004 	strb.w	r0, [sp, #4]
    d2f8:	68a0      	ldr	r0, [r4, #8]
    d2fa:	ab04      	add	r3, sp, #16
    d2fc:	2216      	movs	r2, #22
    d2fe:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    d302:	f004 f990 	bl	11626 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    d306:	2700      	movs	r7, #0
    d308:	2601      	movs	r6, #1
    d30a:	b188      	cbz	r0, d330 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2ec>
    d30c:	68a0      	ldr	r0, [r4, #8]
    d30e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    d312:	2116      	movs	r1, #22
    d314:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    d318:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    d31c:	2119      	movs	r1, #25
    d31e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    d322:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    d326:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    d32a:	b007      	add	sp, #28
    d32c:	2000      	movs	r0, #0
    d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d330:	6920      	ldr	r0, [r4, #16]
    d332:	f004 fb5d 	bl	119f0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    d336:	b178      	cbz	r0, d358 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x314>
    d338:	6922      	ldr	r2, [r4, #16]
    d33a:	68a1      	ldr	r1, [r4, #8]
    d33c:	7910      	ldrb	r0, [r2, #4]
    d33e:	f000 0007 	and.w	r0, r0, #7
    d342:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    d346:	7952      	ldrb	r2, [r2, #5]
    d348:	f002 0307 	and.w	r3, r2, #7
    d34c:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    d350:	f891 213f 	ldrb.w	r2, [r1, #319]	; 0x13f
    d354:	b12a      	cbz	r2, d362 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x31e>
    d356:	e026      	b.n	d3a6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    d358:	2000      	movs	r0, #0
    d35a:	f7ff fec3 	bl	d0e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    d35e:	4605      	mov	r5, r0
    d360:	e029      	b.n	d3b6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x372>
    d362:	f891 213e 	ldrb.w	r2, [r1, #318]	; 0x13e
    d366:	2a01      	cmp	r2, #1
    d368:	d01d      	beq.n	d3a6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    d36a:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    d36e:	f101 0266 	add.w	r2, r1, #102	; 0x66
    d372:	4584      	cmp	ip, r0
    d374:	bf01      	itttt	eq
    d376:	7810      	ldrbeq	r0, [r2, #0]
    d378:	4298      	cmpeq	r0, r3
    d37a:	2002      	moveq	r0, #2
    d37c:	f881 013e 	strbeq.w	r0, [r1, #318]	; 0x13e
    d380:	d011      	beq.n	d3a6 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    d382:	880a      	ldrh	r2, [r1, #0]
    d384:	f8a1 21ac 	strh.w	r2, [r1, #428]	; 0x1ac
    d388:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    d38c:	f501 70c4 	add.w	r0, r1, #392	; 0x188
    d390:	f881 21ae 	strb.w	r2, [r1, #430]	; 0x1ae
    d394:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    d398:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    d39c:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    d3a0:	78e0      	ldrb	r0, [r4, #3]
    d3a2:	f7f7 fa33 	bl	480c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    d3a6:	68a0      	ldr	r0, [r4, #8]
    d3a8:	2121      	movs	r1, #33	; 0x21
    d3aa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    d3ae:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    d3b2:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    d3b6:	b007      	add	sp, #28
    d3b8:	4628      	mov	r0, r5
    d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3bc:	2000023c 	.word	0x2000023c
    d3c0:	b538      	push	{r3, r4, r5, lr}
    d3c2:	4c26      	ldr	r4, [pc, #152]	; (d45c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x418>)
    d3c4:	68a0      	ldr	r0, [r4, #8]
    d3c6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    d3ca:	281f      	cmp	r0, #31
    d3cc:	bf1c      	itt	ne
    d3ce:	2001      	movne	r0, #1
    d3d0:	bd38      	popne	{r3, r4, r5, pc}
    d3d2:	6920      	ldr	r0, [r4, #16]
    d3d4:	f004 fb16 	bl	11a04 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    d3d8:	2800      	cmp	r0, #0
    d3da:	d036      	beq.n	d44a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x406>
    d3dc:	6920      	ldr	r0, [r4, #16]
    d3de:	68a2      	ldr	r2, [r4, #8]
    d3e0:	7901      	ldrb	r1, [r0, #4]
    d3e2:	7940      	ldrb	r0, [r0, #5]
    d3e4:	f001 0107 	and.w	r1, r1, #7
    d3e8:	f361 0507 	bfi	r5, r1, #0, #8
    d3ec:	4629      	mov	r1, r5
    d3ee:	f000 0007 	and.w	r0, r0, #7
    d3f2:	f360 210f 	bfi	r1, r0, #8, #8
    d3f6:	2001      	movs	r0, #1
    d3f8:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    d3fc:	2500      	movs	r5, #0
    d3fe:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    d402:	2023      	movs	r0, #35	; 0x23
    d404:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    d408:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    d40c:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    d410:	f8ad 2000 	strh.w	r2, [sp]
    d414:	f004 f923 	bl	1165e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    d418:	f89d 2000 	ldrb.w	r2, [sp]
    d41c:	b2c1      	uxtb	r1, r0
    d41e:	428a      	cmp	r2, r1
    d420:	bf07      	ittee	eq
    d422:	68a1      	ldreq	r1, [r4, #8]
    d424:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    d428:	68a2      	ldrne	r2, [r4, #8]
    d42a:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    d42e:	f89d 1001 	ldrb.w	r1, [sp, #1]
    d432:	f3c0 2007 	ubfx	r0, r0, #8, #8
    d436:	4281      	cmp	r1, r0
    d438:	bf19      	ittee	ne
    d43a:	68a1      	ldrne	r1, [r4, #8]
    d43c:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    d440:	68a0      	ldreq	r0, [r4, #8]
    d442:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    d446:	2000      	movs	r0, #0
    d448:	bd38      	pop	{r3, r4, r5, pc}
    d44a:	2001      	movs	r0, #1
    d44c:	f7ff fe4a 	bl	d0e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    d450:	4604      	mov	r4, r0
    d452:	201e      	movs	r0, #30
    d454:	f7ff fe0e 	bl	d074 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    d458:	4620      	mov	r0, r4
    d45a:	bd38      	pop	{r3, r4, r5, pc}
    d45c:	2000023c 	.word	0x2000023c
    d460:	b510      	push	{r4, lr}
    d462:	4c0a      	ldr	r4, [pc, #40]	; (d48c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x448>)
    d464:	2300      	movs	r3, #0
    d466:	4619      	mov	r1, r3
    d468:	68a0      	ldr	r0, [r4, #8]
    d46a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    d46e:	3078      	adds	r0, #120	; 0x78
    d470:	f003 fffd 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d474:	b120      	cbz	r0, d480 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x43c>
    d476:	68a1      	ldr	r1, [r4, #8]
    d478:	201c      	movs	r0, #28
    d47a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    d47e:	bd10      	pop	{r4, pc}
    d480:	f44f 61c7 	mov.w	r1, #1592	; 0x638
    d484:	2036      	movs	r0, #54	; 0x36
    d486:	f7f7 fbd3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d48a:	0000      	.short	0x0000
    d48c:	2000023c 	.word	0x2000023c
    d490:	b510      	push	{r4, lr}
    d492:	4c0a      	ldr	r4, [pc, #40]	; (d4bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x478>)
    d494:	2300      	movs	r3, #0
    d496:	4619      	mov	r1, r3
    d498:	68a0      	ldr	r0, [r4, #8]
    d49a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    d49e:	3078      	adds	r0, #120	; 0x78
    d4a0:	f003 ffe5 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d4a4:	b120      	cbz	r0, d4b0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x46c>
    d4a6:	68a1      	ldr	r1, [r4, #8]
    d4a8:	2000      	movs	r0, #0
    d4aa:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    d4ae:	bd10      	pop	{r4, pc}
    d4b0:	f240 613f 	movw	r1, #1599	; 0x63f
    d4b4:	2036      	movs	r0, #54	; 0x36
    d4b6:	f7f7 fbbb 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ba:	0000      	.short	0x0000
    d4bc:	2000023c 	.word	0x2000023c
    d4c0:	b510      	push	{r4, lr}
    d4c2:	4c0a      	ldr	r4, [pc, #40]	; (d4ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4a8>)
    d4c4:	2300      	movs	r3, #0
    d4c6:	4619      	mov	r1, r3
    d4c8:	68a0      	ldr	r0, [r4, #8]
    d4ca:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    d4ce:	3078      	adds	r0, #120	; 0x78
    d4d0:	f003 ffcd 	bl	1146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d4d4:	b120      	cbz	r0, d4e0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x49c>
    d4d6:	68a1      	ldr	r1, [r4, #8]
    d4d8:	201f      	movs	r0, #31
    d4da:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    d4de:	bd10      	pop	{r4, pc}
    d4e0:	f44f 61c9 	mov.w	r1, #1608	; 0x648
    d4e4:	2036      	movs	r0, #54	; 0x36
    d4e6:	f7f7 fba3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ea:	0000      	.short	0x0000
    d4ec:	2000023c 	.word	0x2000023c
    d4f0:	b570      	push	{r4, r5, r6, lr}
    d4f2:	4c1f      	ldr	r4, [pc, #124]	; (d570 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x52c>)
    d4f4:	68a0      	ldr	r0, [r4, #8]
    d4f6:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    d4fa:	2900      	cmp	r1, #0
    d4fc:	bf05      	ittet	eq
    d4fe:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    d502:	2900      	cmpeq	r1, #0
    d504:	2100      	movne	r1, #0
    d506:	2101      	moveq	r1, #1
    d508:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    d50c:	f04f 0224 	mov.w	r2, #36	; 0x24
    d510:	f04f 0500 	mov.w	r5, #0
    d514:	2b21      	cmp	r3, #33	; 0x21
    d516:	d008      	beq.n	d52a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4e6>
    d518:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    d51c:	2b23      	cmp	r3, #35	; 0x23
    d51e:	d019      	beq.n	d554 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    d520:	f240 6174 	movw	r1, #1652	; 0x674
    d524:	2036      	movs	r0, #54	; 0x36
    d526:	f7f7 fb83 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d52a:	2900      	cmp	r1, #0
    d52c:	bf08      	it	eq
    d52e:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    d532:	d00b      	beq.n	d54c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x508>
    d534:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    d538:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    d53c:	2801      	cmp	r0, #1
    d53e:	bf04      	itt	eq
    d540:	2000      	moveq	r0, #0
    d542:	f7ff fd97 	bleq	d074 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    d546:	68a0      	ldr	r0, [r4, #8]
    d548:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    d54c:	68a0      	ldr	r0, [r4, #8]
    d54e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    d552:	bd70      	pop	{r4, r5, r6, pc}
    d554:	2900      	cmp	r1, #0
    d556:	bf08      	it	eq
    d558:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    d55c:	d004      	beq.n	d568 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x524>
    d55e:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    d562:	2000      	movs	r0, #0
    d564:	f7ff fd86 	bl	d074 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    d568:	68a0      	ldr	r0, [r4, #8]
    d56a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    d56e:	bd70      	pop	{r4, r5, r6, pc}
    d570:	2000023c 	.word	0x2000023c

0000d574 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    d574:	b510      	push	{r4, lr}
    d576:	4905      	ldr	r1, [pc, #20]	; (d58c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    d578:	4604      	mov	r4, r0
    d57a:	2001      	movs	r0, #1
    d57c:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    d580:	f7fb f9f4 	bl	896c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    d584:	7020      	strb	r0, [r4, #0]
    d586:	2000      	movs	r0, #0
    d588:	bd10      	pop	{r4, pc}
    d58a:	0000      	.short	0x0000
    d58c:	200011dc 	.word	0x200011dc

0000d590 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    d590:	4904      	ldr	r1, [pc, #16]	; (d5a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    d592:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    d596:	8002      	strh	r2, [r0, #0]
    d598:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    d59c:	7081      	strb	r1, [r0, #2]
    d59e:	2000      	movs	r0, #0
    d5a0:	4770      	bx	lr
    d5a2:	0000      	.short	0x0000
    d5a4:	200011dc 	.word	0x200011dc

0000d5a8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    d5a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d5ac:	460d      	mov	r5, r1
    d5ae:	4606      	mov	r6, r0
    d5b0:	f005 fea9 	bl	13306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    d5b4:	b1e0      	cbz	r0, d5f0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    d5b6:	8830      	ldrh	r0, [r6, #0]
    d5b8:	4669      	mov	r1, sp
    d5ba:	f003 ff0d 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d5be:	2800      	cmp	r0, #0
    d5c0:	d114      	bne.n	d5ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x44>
    d5c2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    d5c6:	2700      	movs	r7, #0
    d5c8:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    d5cc:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    d5d0:	f005 fd0b 	bl	12fea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72>
    d5d4:	70a8      	strb	r0, [r5, #2]
    d5d6:	7860      	ldrb	r0, [r4, #1]
    d5d8:	f005 fd07 	bl	12fea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72>
    d5dc:	70e8      	strb	r0, [r5, #3]
    d5de:	78a0      	ldrb	r0, [r4, #2]
    d5e0:	3c66      	subs	r4, #102	; 0x66
    d5e2:	2800      	cmp	r0, #0
    d5e4:	d1f0      	bne.n	d5c8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    d5e6:	8830      	ldrh	r0, [r6, #0]
    d5e8:	8028      	strh	r0, [r5, #0]
    d5ea:	2000      	movs	r0, #0
    d5ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d5f0:	2001      	movs	r0, #1
    d5f2:	e7fb      	b.n	d5ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x44>

0000d5f4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    d5f4:	b51c      	push	{r2, r3, r4, lr}
    d5f6:	8800      	ldrh	r0, [r0, #0]
    d5f8:	4669      	mov	r1, sp
    d5fa:	f003 feed 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d5fe:	2800      	cmp	r0, #0
    d600:	d10f      	bne.n	d622 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    d602:	f89d 0000 	ldrb.w	r0, [sp]
    d606:	2401      	movs	r4, #1
    d608:	b160      	cbz	r0, d624 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    d60a:	4811      	ldr	r0, [pc, #68]	; (d650 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    d60c:	7800      	ldrb	r0, [r0, #0]
    d60e:	b1e8      	cbz	r0, d64c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    d610:	9801      	ldr	r0, [sp, #4]
    d612:	f005 fe6c 	bl	132ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x376>
    d616:	b190      	cbz	r0, d63e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    d618:	9801      	ldr	r0, [sp, #4]
    d61a:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    d61e:	b180      	cbz	r0, d642 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    d620:	203a      	movs	r0, #58	; 0x3a
    d622:	bd1c      	pop	{r2, r3, r4, pc}
    d624:	9801      	ldr	r0, [sp, #4]
    d626:	f005 fe56 	bl	132d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d62a:	b140      	cbz	r0, d63e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    d62c:	9801      	ldr	r0, [sp, #4]
    d62e:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    d632:	2800      	cmp	r0, #0
    d634:	d1f4      	bne.n	d620 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    d636:	9801      	ldr	r0, [sp, #4]
    d638:	f880 4159 	strb.w	r4, [r0, #345]	; 0x159
    d63c:	e004      	b.n	d648 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    d63e:	2002      	movs	r0, #2
    d640:	bd1c      	pop	{r2, r3, r4, pc}
    d642:	9801      	ldr	r0, [sp, #4]
    d644:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    d648:	2000      	movs	r0, #0
    d64a:	bd1c      	pop	{r2, r3, r4, pc}
    d64c:	2011      	movs	r0, #17
    d64e:	bd1c      	pop	{r2, r3, r4, pc}
    d650:	20000320 	.word	0x20000320

0000d654 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    d654:	b510      	push	{r4, lr}
    d656:	4604      	mov	r4, r0
    d658:	f005 fe30 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    d65c:	b130      	cbz	r0, d66c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    d65e:	4804      	ldr	r0, [pc, #16]	; (d670 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    d660:	8941      	ldrh	r1, [r0, #10]
    d662:	8021      	strh	r1, [r4, #0]
    d664:	8980      	ldrh	r0, [r0, #12]
    d666:	8060      	strh	r0, [r4, #2]
    d668:	2000      	movs	r0, #0
    d66a:	bd10      	pop	{r4, pc}
    d66c:	2001      	movs	r0, #1
    d66e:	bd10      	pop	{r4, pc}
    d670:	20001660 	.word	0x20001660

0000d674 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    d674:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    d676:	4915      	ldr	r1, [pc, #84]	; (d6cc <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    d678:	4605      	mov	r5, r0
    d67a:	2001      	movs	r0, #1
    d67c:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    d680:	4813      	ldr	r0, [pc, #76]	; (d6d0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    d682:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    d686:	6020      	str	r0, [r4, #0]
    d688:	301f      	adds	r0, #31
    d68a:	60a0      	str	r0, [r4, #8]
    d68c:	f000 fc2c 	bl	dee8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    d690:	f894 0020 	ldrb.w	r0, [r4, #32]
    d694:	7829      	ldrb	r1, [r5, #0]
    d696:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    d69a:	221f      	movs	r2, #31
    d69c:	1c68      	adds	r0, r5, #1
    d69e:	f005 fcb9 	bl	13014 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
    d6a2:	b120      	cbz	r0, d6ae <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    d6a4:	f241 4105 	movw	r1, #5125	; 0x1405
    d6a8:	2039      	movs	r0, #57	; 0x39
    d6aa:	f7f7 fac1 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6ae:	f894 0020 	ldrb.w	r0, [r4, #32]
    d6b2:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    d6b6:	9001      	str	r0, [sp, #4]
    d6b8:	7828      	ldrb	r0, [r5, #0]
    d6ba:	f8ad 0002 	strh.w	r0, [sp, #2]
    d6be:	2000      	movs	r0, #0
    d6c0:	f88d 0000 	strb.w	r0, [sp]
    d6c4:	4668      	mov	r0, sp
    d6c6:	f000 f921 	bl	d90c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    d6ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    d6cc:	200011dc 	.word	0x200011dc
    d6d0:	20001692 	.word	0x20001692

0000d6d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    d6d4:	b51c      	push	{r2, r3, r4, lr}
    d6d6:	4a0d      	ldr	r2, [pc, #52]	; (d70c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    d6d8:	2101      	movs	r1, #1
    d6da:	2400      	movs	r4, #0
    d6dc:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    d6e0:	7800      	ldrb	r0, [r0, #0]
    d6e2:	f88d 0000 	strb.w	r0, [sp]
    d6e6:	f88d 1001 	strb.w	r1, [sp, #1]
    d6ea:	f88d 4002 	strb.w	r4, [sp, #2]
    d6ee:	f7fb f91d 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    d6f2:	b118      	cbz	r0, d6fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    d6f4:	2080      	movs	r0, #128	; 0x80
    d6f6:	f8ad 0003 	strh.w	r0, [sp, #3]
    d6fa:	e001      	b.n	d700 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    d6fc:	f8ad 4003 	strh.w	r4, [sp, #3]
    d700:	f88d 4005 	strb.w	r4, [sp, #5]
    d704:	4668      	mov	r0, sp
    d706:	f000 fb0f 	bl	dd28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    d70a:	bd1c      	pop	{r2, r3, r4, pc}
    d70c:	200011dc 	.word	0x200011dc

0000d710 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    d710:	b510      	push	{r4, lr}
    d712:	4a39      	ldr	r2, [pc, #228]	; (d7f8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    d714:	b08a      	sub	sp, #40	; 0x28
    d716:	2101      	movs	r1, #1
    d718:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    d71c:	8841      	ldrh	r1, [r0, #2]
    d71e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    d722:	d902      	bls.n	d72a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    d724:	2012      	movs	r0, #18
    d726:	b00a      	add	sp, #40	; 0x28
    d728:	bd10      	pop	{r4, pc}
    d72a:	2400      	movs	r4, #0
    d72c:	f88d 4004 	strb.w	r4, [sp, #4]
    d730:	7902      	ldrb	r2, [r0, #4]
    d732:	9400      	str	r4, [sp, #0]
    d734:	f89d 1000 	ldrb.w	r1, [sp]
    d738:	2a05      	cmp	r2, #5
    d73a:	f041 0110 	orr.w	r1, r1, #16
    d73e:	f88d 1000 	strb.w	r1, [sp]
    d742:	d253      	bcs.n	d7ec <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    d744:	e8df f002 	tbb	[pc, r2]
    d748:	11050803 	.word	0x11050803
    d74c:	000b      	.short	0x000b
    d74e:	f041 0101 	orr.w	r1, r1, #1
    d752:	f041 0102 	orr.w	r1, r1, #2
    d756:	e006      	b.n	d766 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    d758:	f041 0109 	orr.w	r1, r1, #9
    d75c:	e001      	b.n	d762 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    d75e:	f041 0101 	orr.w	r1, r1, #1
    d762:	f041 0104 	orr.w	r1, r1, #4
    d766:	f88d 1000 	strb.w	r1, [sp]
    d76a:	f8bd 1000 	ldrh.w	r1, [sp]
    d76e:	9100      	str	r1, [sp, #0]
    d770:	f8bd 1000 	ldrh.w	r1, [sp]
    d774:	f8ad 1005 	strh.w	r1, [sp, #5]
    d778:	8802      	ldrh	r2, [r0, #0]
    d77a:	f8dd 1006 	ldr.w	r1, [sp, #6]
    d77e:	f362 211f 	bfi	r1, r2, #8, #24
    d782:	f8cd 1006 	str.w	r1, [sp, #6]
    d786:	8842      	ldrh	r2, [r0, #2]
    d788:	f8dd 1009 	ldr.w	r1, [sp, #9]
    d78c:	f362 211f 	bfi	r1, r2, #8, #24
    d790:	f8cd 1009 	str.w	r1, [sp, #9]
    d794:	7b41      	ldrb	r1, [r0, #13]
    d796:	f88d 100d 	strb.w	r1, [sp, #13]
    d79a:	7941      	ldrb	r1, [r0, #5]
    d79c:	f88d 100e 	strb.w	r1, [sp, #14]
    d7a0:	7981      	ldrb	r1, [r0, #6]
    d7a2:	f88d 100f 	strb.w	r1, [sp, #15]
    d7a6:	f8d0 1007 	ldr.w	r1, [r0, #7]
    d7aa:	9104      	str	r1, [sp, #16]
    d7ac:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    d7b0:	f8ad 1014 	strh.w	r1, [sp, #20]
    d7b4:	7b80      	ldrb	r0, [r0, #14]
    d7b6:	f88d 0016 	strb.w	r0, [sp, #22]
    d7ba:	207f      	movs	r0, #127	; 0x7f
    d7bc:	f88d 0017 	strb.w	r0, [sp, #23]
    d7c0:	2001      	movs	r0, #1
    d7c2:	f88d 0018 	strb.w	r0, [sp, #24]
    d7c6:	f88d 4019 	strb.w	r4, [sp, #25]
    d7ca:	f88d 001a 	strb.w	r0, [sp, #26]
    d7ce:	f88d 401b 	strb.w	r4, [sp, #27]
    d7d2:	f7fb f913 	bl	89fc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    d7d6:	f88d 001c 	strb.w	r0, [sp, #28]
    d7da:	f88d 401d 	strb.w	r4, [sp, #29]
    d7de:	f88d 401e 	strb.w	r4, [sp, #30]
    d7e2:	a908      	add	r1, sp, #32
    d7e4:	a801      	add	r0, sp, #4
    d7e6:	f005 fa35 	bl	12c54 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    d7ea:	e79c      	b.n	d726 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    d7ec:	f241 0159 	movw	r1, #4185	; 0x1059
    d7f0:	2039      	movs	r0, #57	; 0x39
    d7f2:	f7f7 fa1d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7f6:	0000      	.short	0x0000
    d7f8:	200011dc 	.word	0x200011dc

0000d7fc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    d7fc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d7fe:	4604      	mov	r4, r0
    d800:	f005 fd81 	bl	13306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    d804:	b318      	cbz	r0, d84e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    d806:	2000      	movs	r0, #0
    d808:	f88d 0004 	strb.w	r0, [sp, #4]
    d80c:	f88d 0008 	strb.w	r0, [sp, #8]
    d810:	a802      	add	r0, sp, #8
    d812:	9000      	str	r0, [sp, #0]
    d814:	78a2      	ldrb	r2, [r4, #2]
    d816:	7861      	ldrb	r1, [r4, #1]
    d818:	7820      	ldrb	r0, [r4, #0]
    d81a:	ab01      	add	r3, sp, #4
    d81c:	f005 fe22 	bl	13464 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ec>
    d820:	2800      	cmp	r0, #0
    d822:	d113      	bne.n	d84c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    d824:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d828:	f005 fcc2 	bl	131b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    d82c:	b188      	cbz	r0, d852 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    d82e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    d832:	f005 fcbd 	bl	131b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    d836:	b160      	cbz	r0, d852 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    d838:	4807      	ldr	r0, [pc, #28]	; (d858 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    d83a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    d83e:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    d842:	f89d 1008 	ldrb.w	r1, [sp, #8]
    d846:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    d84a:	2000      	movs	r0, #0
    d84c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d84e:	2001      	movs	r0, #1
    d850:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d852:	2011      	movs	r0, #17
    d854:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d856:	0000      	.short	0x0000
    d858:	200011dc 	.word	0x200011dc

0000d85c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    d85c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    d85e:	4916      	ldr	r1, [pc, #88]	; (d8b8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    d860:	4605      	mov	r5, r0
    d862:	2001      	movs	r0, #1
    d864:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    d868:	4814      	ldr	r0, [pc, #80]	; (d8bc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    d86a:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    d86e:	6120      	str	r0, [r4, #16]
    d870:	301f      	adds	r0, #31
    d872:	61a0      	str	r0, [r4, #24]
    d874:	f000 fb48 	bl	df08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    d878:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    d87c:	7829      	ldrb	r1, [r5, #0]
    d87e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    d882:	221f      	movs	r2, #31
    d884:	1c68      	adds	r0, r5, #1
    d886:	3310      	adds	r3, #16
    d888:	f005 fbc4 	bl	13014 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
    d88c:	b120      	cbz	r0, d898 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    d88e:	f241 2188 	movw	r1, #4744	; 0x1288
    d892:	2039      	movs	r0, #57	; 0x39
    d894:	f7f7 f9cc 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d898:	2000      	movs	r0, #0
    d89a:	f88d 0000 	strb.w	r0, [sp]
    d89e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    d8a2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    d8a6:	6900      	ldr	r0, [r0, #16]
    d8a8:	9001      	str	r0, [sp, #4]
    d8aa:	7828      	ldrb	r0, [r5, #0]
    d8ac:	f8ad 0002 	strh.w	r0, [sp, #2]
    d8b0:	4668      	mov	r0, sp
    d8b2:	f000 f857 	bl	d964 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    d8b6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    d8b8:	200011dc 	.word	0x200011dc
    d8bc:	200016d0 	.word	0x200016d0

0000d8c0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    d8c0:	7801      	ldrb	r1, [r0, #0]
    d8c2:	b181      	cbz	r1, d8e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    d8c4:	7841      	ldrb	r1, [r0, #1]
    d8c6:	b171      	cbz	r1, d8e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    d8c8:	8841      	ldrh	r1, [r0, #2]
    d8ca:	291b      	cmp	r1, #27
    d8cc:	d30b      	bcc.n	d8e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    d8ce:	8881      	ldrh	r1, [r0, #4]
    d8d0:	291b      	cmp	r1, #27
    d8d2:	d308      	bcc.n	d8e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    d8d4:	4905      	ldr	r1, [pc, #20]	; (d8ec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    d8d6:	6802      	ldr	r2, [r0, #0]
    d8d8:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    d8dc:	8880      	ldrh	r0, [r0, #4]
    d8de:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    d8e2:	2000      	movs	r0, #0
    d8e4:	4770      	bx	lr
    d8e6:	2012      	movs	r0, #18
    d8e8:	4770      	bx	lr
    d8ea:	0000      	.short	0x0000
    d8ec:	200011dc 	.word	0x200011dc

0000d8f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    d8f0:	6800      	ldr	r0, [r0, #0]
    d8f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d8f6:	d304      	bcc.n	d902 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    d8f8:	4903      	ldr	r1, [pc, #12]	; (d908 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    d8fa:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    d8fe:	2000      	movs	r0, #0
    d900:	4770      	bx	lr
    d902:	2012      	movs	r0, #18
    d904:	4770      	bx	lr
    d906:	0000      	.short	0x0000
    d908:	200011dc 	.word	0x200011dc

0000d90c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    d90c:	b570      	push	{r4, r5, r6, lr}
    d90e:	4d14      	ldr	r5, [pc, #80]	; (d960 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    d910:	4604      	mov	r4, r0
    d912:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    d916:	b920      	cbnz	r0, d922 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    d918:	8860      	ldrh	r0, [r4, #2]
    d91a:	b110      	cbz	r0, d922 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    d91c:	f7fa ffda 	bl	88d4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    d920:	b198      	cbz	r0, d94a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    d922:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    d926:	8861      	ldrh	r1, [r4, #2]
    d928:	7820      	ldrb	r0, [r4, #0]
    d92a:	f005 fb88 	bl	1303e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc6>
    d92e:	2800      	cmp	r0, #0
    d930:	d10c      	bne.n	d94c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    d932:	f7fa fd37 	bl	83a4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    d936:	4601      	mov	r1, r0
    d938:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    d93c:	2800      	cmp	r0, #0
    d93e:	8860      	ldrh	r0, [r4, #2]
    d940:	d005      	beq.n	d94e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    d942:	4288      	cmp	r0, r1
    d944:	d907      	bls.n	d956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    d946:	4608      	mov	r0, r1
    d948:	e005      	b.n	d956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    d94a:	2012      	movs	r0, #18
    d94c:	bd70      	pop	{r4, r5, r6, pc}
    d94e:	4288      	cmp	r0, r1
    d950:	d901      	bls.n	d956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    d952:	2007      	movs	r0, #7
    d954:	bd70      	pop	{r4, r5, r6, pc}
    d956:	6861      	ldr	r1, [r4, #4]
    d958:	f7fb f862 	bl	8a20 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    d95c:	2000      	movs	r0, #0
    d95e:	bd70      	pop	{r4, r5, r6, pc}
    d960:	200011dc 	.word	0x200011dc

0000d964 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    d964:	b570      	push	{r4, r5, r6, lr}
    d966:	4d11      	ldr	r5, [pc, #68]	; (d9ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    d968:	4604      	mov	r4, r0
    d96a:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    d96e:	b920      	cbnz	r0, d97a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    d970:	8860      	ldrh	r0, [r4, #2]
    d972:	b110      	cbz	r0, d97a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    d974:	f7fa ffea 	bl	894c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    d978:	b178      	cbz	r0, d99a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    d97a:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    d97e:	8861      	ldrh	r1, [r4, #2]
    d980:	7820      	ldrb	r0, [r4, #0]
    d982:	f005 fb5c 	bl	1303e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc6>
    d986:	2800      	cmp	r0, #0
    d988:	d108      	bne.n	d99c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    d98a:	8866      	ldrh	r6, [r4, #2]
    d98c:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    d990:	b130      	cbz	r0, d9a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    d992:	f7fa ffdb 	bl	894c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    d996:	b110      	cbz	r0, d99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    d998:	e002      	b.n	d9a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    d99a:	2012      	movs	r0, #18
    d99c:	bd70      	pop	{r4, r5, r6, pc}
    d99e:	2600      	movs	r6, #0
    d9a0:	4630      	mov	r0, r6
    d9a2:	6861      	ldr	r1, [r4, #4]
    d9a4:	f7fb f84a 	bl	8a3c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    d9a8:	2000      	movs	r0, #0
    d9aa:	bd70      	pop	{r4, r5, r6, pc}
    d9ac:	200011dc 	.word	0x200011dc

0000d9b0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    d9b0:	b510      	push	{r4, lr}
    d9b2:	4604      	mov	r4, r0
    d9b4:	7800      	ldrb	r0, [r0, #0]
    d9b6:	07c0      	lsls	r0, r0, #31
    d9b8:	d004      	beq.n	d9c4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    d9ba:	f001 f8cb 	bl	eb54 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    d9be:	b108      	cbz	r0, d9c4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    d9c0:	200c      	movs	r0, #12
    d9c2:	bd10      	pop	{r4, pc}
    d9c4:	7820      	ldrb	r0, [r4, #0]
    d9c6:	4903      	ldr	r1, [pc, #12]	; (d9d4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    d9c8:	f000 0001 	and.w	r0, r0, #1
    d9cc:	7388      	strb	r0, [r1, #14]
    d9ce:	2000      	movs	r0, #0
    d9d0:	bd10      	pop	{r4, pc}
    d9d2:	0000      	.short	0x0000
    d9d4:	20001660 	.word	0x20001660

0000d9d8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    d9d8:	4a03      	ldr	r2, [pc, #12]	; (d9e8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    d9da:	e9d2 1200 	ldrd	r1, r2, [r2]
    d9de:	6001      	str	r1, [r0, #0]
    d9e0:	6042      	str	r2, [r0, #4]
    d9e2:	2000      	movs	r0, #0
    d9e4:	4770      	bx	lr
    d9e6:	0000      	.short	0x0000
    d9e8:	0000df60 	.word	0x0000df60

0000d9ec <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    d9ec:	b510      	push	{r4, lr}
    d9ee:	2005      	movs	r0, #5
    d9f0:	f000 fb5c 	bl	e0ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    d9f4:	f7ff fb0e 	bl	d014 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    d9f8:	f7fd f8ec 	bl	abd4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    d9fc:	4902      	ldr	r1, [pc, #8]	; (da08 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    d9fe:	4801      	ldr	r0, [pc, #4]	; (da04 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    da00:	6048      	str	r0, [r1, #4]
    da02:	bd10      	pop	{r4, pc}
    da04:	0000db55 	.word	0x0000db55
    da08:	20000320 	.word	0x20000320

0000da0c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    da0c:	4901      	ldr	r1, [pc, #4]	; (da14 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    da0e:	7048      	strb	r0, [r1, #1]
    da10:	f000 b802 	b.w	da18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    da14:	20000320 	.word	0x20000320

0000da18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	f7f8 f8d5 	bl	5bc8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    da1e:	f7f9 f87d 	bl	6b1c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    da22:	4c1d      	ldr	r4, [pc, #116]	; (da98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>)
    da24:	f64f 70ff 	movw	r0, #65535	; 0xffff
    da28:	2500      	movs	r5, #0
    da2a:	f8a4 024e 	strh.w	r0, [r4, #590]	; 0x24e
    da2e:	f8a4 0250 	strh.w	r0, [r4, #592]	; 0x250
    da32:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    da36:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    da3a:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    da3e:	f204 243e 	addw	r4, r4, #574	; 0x23e
    da42:	f000 fa51 	bl	dee8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    da46:	f000 fa5f 	bl	df08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    da4a:	a014      	add	r0, pc, #80	; (adr r0, da9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    da4c:	7665      	strb	r5, [r4, #25]
    da4e:	4e15      	ldr	r6, [pc, #84]	; (daa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>)
    da50:	6801      	ldr	r1, [r0, #0]
    da52:	7900      	ldrb	r0, [r0, #4]
    da54:	7035      	strb	r5, [r6, #0]
    da56:	f8c6 1001 	str.w	r1, [r6, #1]
    da5a:	7170      	strb	r0, [r6, #5]
    da5c:	1c71      	adds	r1, r6, #1
    da5e:	4630      	mov	r0, r6
    da60:	f7ff fad2 	bl	d008 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    da64:	201b      	movs	r0, #27
    da66:	80f0      	strh	r0, [r6, #6]
    da68:	f44f 71a4 	mov.w	r1, #328	; 0x148
    da6c:	8131      	strh	r1, [r6, #8]
    da6e:	8170      	strh	r0, [r6, #10]
    da70:	81b1      	strh	r1, [r6, #12]
    da72:	7525      	strb	r5, [r4, #20]
    da74:	7565      	strb	r5, [r4, #21]
    da76:	73f5      	strb	r5, [r6, #15]
    da78:	2103      	movs	r1, #3
    da7a:	70a1      	strb	r1, [r4, #2]
    da7c:	70e1      	strb	r1, [r4, #3]
    da7e:	80a0      	strh	r0, [r4, #4]
    da80:	80e0      	strh	r0, [r4, #6]
    da82:	f640 60a6 	movw	r0, #3750	; 0xea6
    da86:	f8c4 000a 	str.w	r0, [r4, #10]
    da8a:	4807      	ldr	r0, [pc, #28]	; (daa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>)
    da8c:	73b5      	strb	r5, [r6, #14]
    da8e:	7005      	strb	r5, [r0, #0]
    da90:	7625      	strb	r5, [r4, #24]
    da92:	73a5      	strb	r5, [r4, #14]
    da94:	bd70      	pop	{r4, r5, r6, pc}
    da96:	0000      	.short	0x0000
    da98:	200011dc 	.word	0x200011dc
    da9c:	ffffffff 	.word	0xffffffff
    daa0:	0000001f 	.word	0x0000001f
    daa4:	20001660 	.word	0x20001660
    daa8:	20000328 	.word	0x20000328

0000daac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    daac:	b570      	push	{r4, r5, r6, lr}
    daae:	b150      	cbz	r0, dac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    dab0:	4d16      	ldr	r5, [pc, #88]	; (db0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    dab2:	2400      	movs	r4, #0
    dab4:	7829      	ldrb	r1, [r5, #0]
    dab6:	b159      	cbz	r1, dad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    dab8:	7044      	strb	r4, [r0, #1]
    daba:	2103      	movs	r1, #3
    dabc:	7001      	strb	r1, [r0, #0]
    dabe:	2101      	movs	r1, #1
    dac0:	7101      	strb	r1, [r0, #4]
    dac2:	702c      	strb	r4, [r5, #0]
    dac4:	e01c      	b.n	db00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    dac6:	f241 6192 	movw	r1, #5778	; 0x1692
    daca:	2039      	movs	r0, #57	; 0x39
    dacc:	f7f7 f8b0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad0:	78ab      	ldrb	r3, [r5, #2]
    dad2:	2105      	movs	r1, #5
    dad4:	f44f 728e 	mov.w	r2, #284	; 0x11c
    dad8:	b13b      	cbz	r3, daea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    dada:	7044      	strb	r4, [r0, #1]
    dadc:	f800 1b04 	strb.w	r1, [r0], #4
    dae0:	1d29      	adds	r1, r5, #4
    dae2:	f7f6 ff19 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dae6:	70ac      	strb	r4, [r5, #2]
    dae8:	e00a      	b.n	db00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    daea:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    daee:	b14b      	cbz	r3, db04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    daf0:	7044      	strb	r4, [r0, #1]
    daf2:	f800 1b04 	strb.w	r1, [r0], #4
    daf6:	4906      	ldr	r1, [pc, #24]	; (db10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    daf8:	f7f6 ff0e 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dafc:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    db00:	2001      	movs	r0, #1
    db02:	bd70      	pop	{r4, r5, r6, pc}
    db04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    db08:	f7f9 bf8e 	b.w	7a28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    db0c:	200011dc 	.word	0x200011dc
    db10:	200012fe 	.word	0x200012fe
    db14:	b570      	push	{r4, r5, r6, lr}
    db16:	4604      	mov	r4, r0
    db18:	480d      	ldr	r0, [pc, #52]	; (db50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    db1a:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    db1e:	f7fc f841 	bl	9ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    db22:	b148      	cbz	r0, db38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    db24:	b11d      	cbz	r5, db2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    db26:	f7fa ff11 	bl	894c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    db2a:	b110      	cbz	r0, db32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    db2c:	e00b      	b.n	db46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    db2e:	b154      	cbz	r4, db46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    db30:	e002      	b.n	db38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    db32:	f7fa fee9 	bl	8908 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    db36:	b930      	cbnz	r0, db46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    db38:	f005 fbf2 	bl	13320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    db3c:	b128      	cbz	r0, db4a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    db3e:	f7ff fa0f 	bl	cf60 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    db42:	2801      	cmp	r0, #1
    db44:	d001      	beq.n	db4a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    db46:	2000      	movs	r0, #0
    db48:	bd70      	pop	{r4, r5, r6, pc}
    db4a:	2001      	movs	r0, #1
    db4c:	bd70      	pop	{r4, r5, r6, pc}
    db4e:	0000      	.short	0x0000
    db50:	200011dc 	.word	0x200011dc
    db54:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db58:	4692      	mov	sl, r2
    db5a:	460f      	mov	r7, r1
    db5c:	4681      	mov	r9, r0
    db5e:	f005 fbad 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    db62:	2800      	cmp	r0, #0
    db64:	d066      	beq.n	dc34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    db66:	4834      	ldr	r0, [pc, #208]	; (dc38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>)
    db68:	f8b9 1050 	ldrh.w	r1, [r9, #80]	; 0x50
    db6c:	f8b9 504e 	ldrh.w	r5, [r9, #78]	; 0x4e
    db70:	88c6      	ldrh	r6, [r0, #6]
    db72:	428e      	cmp	r6, r1
    db74:	d300      	bcc.n	db78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    db76:	460e      	mov	r6, r1
    db78:	8941      	ldrh	r1, [r0, #10]
    db7a:	42a9      	cmp	r1, r5
    db7c:	d200      	bcs.n	db80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd4>
    db7e:	460d      	mov	r5, r1
    db80:	8904      	ldrh	r4, [r0, #8]
    db82:	f44f 6229 	mov.w	r2, #2704	; 0xa90
    db86:	4294      	cmp	r4, r2
    db88:	d300      	bcc.n	db8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe0>
    db8a:	4614      	mov	r4, r2
    db8c:	8980      	ldrh	r0, [r0, #12]
    db8e:	f640 0148 	movw	r1, #2120	; 0x848
    db92:	4290      	cmp	r0, r2
    db94:	d201      	bcs.n	db9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    db96:	4288      	cmp	r0, r1
    db98:	d300      	bcc.n	db9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    db9a:	4608      	mov	r0, r1
    db9c:	4680      	mov	r8, r0
    db9e:	428c      	cmp	r4, r1
    dba0:	d300      	bcc.n	dba4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf8>
    dba2:	460c      	mov	r4, r1
    dba4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dba8:	2d1b      	cmp	r5, #27
    dbaa:	d001      	beq.n	dbb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    dbac:	4588      	cmp	r8, r1
    dbae:	d103      	bne.n	dbb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10c>
    dbb0:	2e1b      	cmp	r6, #27
    dbb2:	d03f      	beq.n	dc34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    dbb4:	428c      	cmp	r4, r1
    dbb6:	d03d      	beq.n	dc34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    dbb8:	466a      	mov	r2, sp
    dbba:	4651      	mov	r1, sl
    dbbc:	4648      	mov	r0, r9
    dbbe:	f005 fb19 	bl	131f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
    dbc2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    dbc6:	42b0      	cmp	r0, r6
    dbc8:	d800      	bhi.n	dbcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x120>
    dbca:	4606      	mov	r6, r0
    dbcc:	80fe      	strh	r6, [r7, #6]
    dbce:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    dbd2:	42a0      	cmp	r0, r4
    dbd4:	d800      	bhi.n	dbd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>
    dbd6:	4604      	mov	r4, r0
    dbd8:	813c      	strh	r4, [r7, #8]
    dbda:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    dbde:	42a8      	cmp	r0, r5
    dbe0:	d800      	bhi.n	dbe4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    dbe2:	4605      	mov	r5, r0
    dbe4:	807d      	strh	r5, [r7, #2]
    dbe6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dbea:	4641      	mov	r1, r8
    dbec:	4540      	cmp	r0, r8
    dbee:	d900      	bls.n	dbf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x146>
    dbf0:	4608      	mov	r0, r1
    dbf2:	80b8      	strh	r0, [r7, #4]
    dbf4:	2101      	movs	r1, #1
    dbf6:	7039      	strb	r1, [r7, #0]
    dbf8:	3e1b      	subs	r6, #27
    dbfa:	2ee0      	cmp	r6, #224	; 0xe0
    dbfc:	d902      	bls.n	dc04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    dbfe:	f640 4155 	movw	r1, #3157	; 0xc55
    dc02:	e014      	b.n	dc2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    dc04:	3d1b      	subs	r5, #27
    dc06:	2de0      	cmp	r5, #224	; 0xe0
    dc08:	d902      	bls.n	dc10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    dc0a:	f640 4157 	movw	r1, #3159	; 0xc57
    dc0e:	e00e      	b.n	dc2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    dc10:	f640 1148 	movw	r1, #2376	; 0x948
    dc14:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    dc18:	428c      	cmp	r4, r1
    dc1a:	d902      	bls.n	dc22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x176>
    dc1c:	f640 4159 	movw	r1, #3161	; 0xc59
    dc20:	e005      	b.n	dc2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    dc22:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
    dc26:	4288      	cmp	r0, r1
    dc28:	d904      	bls.n	dc34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    dc2a:	f640 415b 	movw	r1, #3163	; 0xc5b
    dc2e:	2039      	movs	r0, #57	; 0x39
    dc30:	f7f6 fffe 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc34:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc38:	20001660 	.word	0x20001660
    dc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc40:	461d      	mov	r5, r3
    dc42:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    dc46:	f1a1 0c06 	sub.w	ip, r1, #6
    dc4a:	f640 437a 	movw	r3, #3194	; 0xc7a
    dc4e:	9e08      	ldr	r6, [sp, #32]
    dc50:	459c      	cmp	ip, r3
    dc52:	d805      	bhi.n	dc60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    dc54:	f1a2 0c06 	sub.w	ip, r2, #6
    dc58:	459c      	cmp	ip, r3
    dc5a:	d801      	bhi.n	dc60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    dc5c:	2301      	movs	r3, #1
    dc5e:	e000      	b.n	dc62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    dc60:	2300      	movs	r3, #0
    dc62:	b120      	cbz	r0, dc6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c2>
    dc64:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    dc68:	b168      	cbz	r0, dc86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1da>
    dc6a:	b96b      	cbnz	r3, dc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1dc>
    dc6c:	e002      	b.n	dc74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    dc6e:	4815      	ldr	r0, [pc, #84]	; (dcc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>)
    dc70:	7b80      	ldrb	r0, [r0, #14]
    dc72:	e7f9      	b.n	dc68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    dc74:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    dc78:	2806      	cmp	r0, #6
    dc7a:	d821      	bhi.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc7c:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    dc80:	2806      	cmp	r0, #6
    dc82:	d901      	bls.n	dc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1dc>
    dc84:	e01c      	b.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc86:	b1db      	cbz	r3, dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc88:	4291      	cmp	r1, r2
    dc8a:	d819      	bhi.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc8c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    dc90:	d216      	bcs.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc92:	f1a4 000a 	sub.w	r0, r4, #10
    dc96:	f640 4176 	movw	r1, #3190	; 0xc76
    dc9a:	4288      	cmp	r0, r1
    dc9c:	d810      	bhi.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dc9e:	4610      	mov	r0, r2
    dca0:	f003 fbb2 	bl	11408 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    dca4:	1c6d      	adds	r5, r5, #1
    dca6:	4368      	muls	r0, r5
    dca8:	f240 2171 	movw	r1, #625	; 0x271
    dcac:	0040      	lsls	r0, r0, #1
    dcae:	434c      	muls	r4, r1
    dcb0:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    dcb4:	d204      	bcs.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dcb6:	42b7      	cmp	r7, r6
    dcb8:	d802      	bhi.n	dcc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    dcba:	2001      	movs	r0, #1
    dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcc0:	2000      	movs	r0, #0
    dcc2:	e7fb      	b.n	dcbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    dcc4:	20001660 	.word	0x20001660
    dcc8:	b530      	push	{r4, r5, lr}
    dcca:	b087      	sub	sp, #28
    dccc:	4605      	mov	r5, r0
    dcce:	2000      	movs	r0, #0
    dcd0:	9005      	str	r0, [sp, #20]
    dcd2:	9001      	str	r0, [sp, #4]
    dcd4:	9002      	str	r0, [sp, #8]
    dcd6:	8808      	ldrh	r0, [r1, #0]
    dcd8:	f8ad 0004 	strh.w	r0, [sp, #4]
    dcdc:	4811      	ldr	r0, [pc, #68]	; (dd24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x278>)
    dcde:	460c      	mov	r4, r1
    dce0:	ab03      	add	r3, sp, #12
    dce2:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    dce6:	f88d 1006 	strb.w	r1, [sp, #6]
    dcea:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    dcee:	f88d 0007 	strb.w	r0, [sp, #7]
    dcf2:	a804      	add	r0, sp, #16
    dcf4:	9000      	str	r0, [sp, #0]
    dcf6:	aa01      	add	r2, sp, #4
    dcf8:	4621      	mov	r1, r4
    dcfa:	4628      	mov	r0, r5
    dcfc:	f005 fabe 	bl	1327c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    dd00:	0005      	movs	r5, r0
    dd02:	d10c      	bne.n	dd1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x272>
    dd04:	f89d 000c 	ldrb.w	r0, [sp, #12]
    dd08:	f88d 0014 	strb.w	r0, [sp, #20]
    dd0c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    dd10:	f88d 0015 	strb.w	r0, [sp, #21]
    dd14:	a905      	add	r1, sp, #20
    dd16:	4620      	mov	r0, r4
    dd18:	f003 fc59 	bl	115ce <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    dd1c:	4628      	mov	r0, r5
    dd1e:	b007      	add	sp, #28
    dd20:	bd30      	pop	{r4, r5, pc}
    dd22:	0000      	.short	0x0000
    dd24:	200011dc 	.word	0x200011dc

0000dd28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    dd28:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dd2c:	4604      	mov	r4, r0
    dd2e:	7840      	ldrb	r0, [r0, #1]
    dd30:	2542      	movs	r5, #66	; 0x42
    dd32:	2801      	cmp	r0, #1
    dd34:	d808      	bhi.n	dd48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    dd36:	78a0      	ldrb	r0, [r4, #2]
    dd38:	f7fa fe1e 	bl	8978 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    dd3c:	b120      	cbz	r0, dd48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    dd3e:	7820      	ldrb	r0, [r4, #0]
    dd40:	2512      	movs	r5, #18
    dd42:	2801      	cmp	r0, #1
    dd44:	d003      	beq.n	dd4e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    dd46:	b1a0      	cbz	r0, dd72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    dd48:	4628      	mov	r0, r5
    dd4a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dd4e:	f7fa fded 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    dd52:	b128      	cbz	r0, dd60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    dd54:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    dd58:	2800      	cmp	r0, #0
    dd5a:	d0f5      	beq.n	dd48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    dd5c:	2880      	cmp	r0, #128	; 0x80
    dd5e:	d8f3      	bhi.n	dd48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    dd60:	7860      	ldrb	r0, [r4, #1]
    dd62:	2800      	cmp	r0, #0
    dd64:	d0f0      	beq.n	dd48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    dd66:	f7fa fda3 	bl	88b0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    dd6a:	b148      	cbz	r0, dd80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    dd6c:	7820      	ldrb	r0, [r4, #0]
    dd6e:	2801      	cmp	r0, #1
    dd70:	d008      	beq.n	dd84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    dd72:	f7fb ff11 	bl	9b98 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    dd76:	4604      	mov	r4, r0
    dd78:	f7fb fee8 	bl	9b4c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    dd7c:	2800      	cmp	r0, #0
    dd7e:	d079      	beq.n	de74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    dd80:	200c      	movs	r0, #12
    dd82:	e7e2      	b.n	dd4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    dd84:	4d55      	ldr	r5, [pc, #340]	; (dedc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    dd86:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    dd8a:	f7fa fa15 	bl	81b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    dd8e:	b910      	cbnz	r0, dd96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    dd90:	f7fa fdb2 	bl	88f8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    dd94:	b3f0      	cbz	r0, de14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    dd96:	f7fb ff05 	bl	9ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    dd9a:	2800      	cmp	r0, #0
    dd9c:	d1f0      	bne.n	dd80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    dd9e:	f7fa faf5 	bl	838c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    dda2:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    dda6:	39ff      	subs	r1, #255	; 0xff
    dda8:	d1ea      	bne.n	dd80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    ddaa:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    ddae:	f7fa fa2d 	bl	820c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ddb2:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    ddb6:	f242 7010 	movw	r0, #10000	; 0x2710
    ddba:	4346      	muls	r6, r0
    ddbc:	7960      	ldrb	r0, [r4, #5]
    ddbe:	f7fa fc01 	bl	85c4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ddc2:	f7fa fda1 	bl	8908 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ddc6:	b138      	cbz	r0, ddd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    ddc8:	f7fa fdb0 	bl	892c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ddcc:	4f44      	ldr	r7, [pc, #272]	; (dee0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    ddce:	b170      	cbz	r0, ddee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    ddd0:	f7fa fdb4 	bl	893c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ddd4:	b148      	cbz	r0, ddea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    ddd6:	e00a      	b.n	ddee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    ddd8:	4631      	mov	r1, r6
    ddda:	2000      	movs	r0, #0
    dddc:	f7fb fe1e 	bl	9a1c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    dde0:	2800      	cmp	r0, #0
    dde2:	d0b2      	beq.n	dd4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    dde4:	f241 3150 	movw	r1, #4944	; 0x1350
    dde8:	e073      	b.n	ded2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    ddea:	7bb8      	ldrb	r0, [r7, #14]
    ddec:	b190      	cbz	r0, de14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    ddee:	2200      	movs	r2, #0
    ddf0:	2101      	movs	r1, #1
    ddf2:	a801      	add	r0, sp, #4
    ddf4:	f7f7 f8f6 	bl	4fe4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    ddf8:	0004      	movs	r4, r0
    ddfa:	d03c      	beq.n	de76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    ddfc:	2100      	movs	r1, #0
    ddfe:	f7f9 fb6f 	bl	74e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    de02:	4620      	mov	r0, r4
    de04:	f7fa fe06 	bl	8a14 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    de08:	f005 fa58 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    de0c:	b148      	cbz	r0, de22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    de0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    de12:	e000      	b.n	de16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    de14:	e016      	b.n	de44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    de16:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    de1a:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    de1e:	84c1      	strh	r1, [r0, #38]	; 0x26
    de20:	8502      	strh	r2, [r0, #40]	; 0x28
    de22:	7bb8      	ldrb	r0, [r7, #14]
    de24:	b100      	cbz	r0, de28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    de26:	2001      	movs	r0, #1
    de28:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    de2c:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    de30:	62a0      	str	r0, [r4, #40]	; 0x28
    de32:	4620      	mov	r0, r4
    de34:	f004 fad0 	bl	123d8 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    de38:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    de3c:	b120      	cbz	r0, de48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    de3e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    de42:	e003      	b.n	de4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    de44:	2012      	movs	r0, #18
    de46:	e780      	b.n	dd4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    de48:	f641 574c 	movw	r7, #7500	; 0x1d4c
    de4c:	f7fa fd76 	bl	893c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    de50:	b908      	cbnz	r0, de56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    de52:	f7fa fdd9 	bl	8a08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    de56:	4621      	mov	r1, r4
    de58:	2001      	movs	r0, #1
    de5a:	6067      	str	r7, [r4, #4]
    de5c:	f7ff ff34 	bl	dcc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x21c>
    de60:	b158      	cbz	r0, de7a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    de62:	2101      	movs	r1, #1
    de64:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    de68:	f7f7 f96a 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    de6c:	b118      	cbz	r0, de76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    de6e:	f241 319e 	movw	r1, #5022	; 0x139e
    de72:	e02e      	b.n	ded2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    de74:	e022      	b.n	debc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    de76:	2009      	movs	r0, #9
    de78:	e767      	b.n	dd4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    de7a:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    de7e:	9000      	str	r0, [sp, #0]
    de80:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    de84:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    de88:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    de8c:	8820      	ldrh	r0, [r4, #0]
    de8e:	f7f7 fa1d 	bl	52cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    de92:	b110      	cbz	r0, de9a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    de94:	f241 31a9 	movw	r1, #5033	; 0x13a9
    de98:	e01b      	b.n	ded2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    de9a:	4631      	mov	r1, r6
    de9c:	4620      	mov	r0, r4
    de9e:	f7fb fdbd 	bl	9a1c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    dea2:	b110      	cbz	r0, deaa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    dea4:	f241 31ab 	movw	r1, #5035	; 0x13ab
    dea8:	e013      	b.n	ded2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    deaa:	480e      	ldr	r0, [pc, #56]	; (dee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    deac:	6843      	ldr	r3, [r0, #4]
    deae:	b19b      	cbz	r3, ded8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    deb0:	2200      	movs	r2, #0
    deb2:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    deb6:	4620      	mov	r0, r4
    deb8:	4798      	blx	r3
    deba:	e00d      	b.n	ded8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    debc:	b164      	cbz	r4, ded8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    debe:	8820      	ldrh	r0, [r4, #0]
    dec0:	f7f7 fd96 	bl	59f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    dec4:	8820      	ldrh	r0, [r4, #0]
    dec6:	2101      	movs	r1, #1
    dec8:	f7f7 f93a 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    decc:	b120      	cbz	r0, ded8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    dece:	f241 31c3 	movw	r1, #5059	; 0x13c3
    ded2:	2039      	movs	r0, #57	; 0x39
    ded4:	f7f6 feac 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ded8:	2000      	movs	r0, #0
    deda:	e736      	b.n	dd4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    dedc:	200011dc 	.word	0x200011dc
    dee0:	20001660 	.word	0x20001660
    dee4:	20000320 	.word	0x20000320
    dee8:	4806      	ldr	r0, [pc, #24]	; (df04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    deea:	2100      	movs	r1, #0
    deec:	f890 2020 	ldrb.w	r2, [r0, #32]
    def0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    def4:	8091      	strh	r1, [r2, #4]
    def6:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    defa:	1c49      	adds	r1, r1, #1
    defc:	f001 0101 	and.w	r1, r1, #1
    df00:	7001      	strb	r1, [r0, #0]
    df02:	4770      	bx	lr
    df04:	20001670 	.word	0x20001670
    df08:	4806      	ldr	r0, [pc, #24]	; (df24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    df0a:	2100      	movs	r1, #0
    df0c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    df10:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    df14:	8291      	strh	r1, [r2, #20]
    df16:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    df1a:	1c49      	adds	r1, r1, #1
    df1c:	f001 0101 	and.w	r1, r1, #1
    df20:	7001      	strb	r1, [r0, #0]
    df22:	4770      	bx	lr
    df24:	20001670 	.word	0x20001670
    df28:	b510      	push	{r4, lr}
    df2a:	4604      	mov	r4, r0
    df2c:	88c1      	ldrh	r1, [r0, #6]
    df2e:	8880      	ldrh	r0, [r0, #4]
    df30:	f005 f952 	bl	131d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
    df34:	2800      	cmp	r0, #0
    df36:	d10f      	bne.n	df58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    df38:	8861      	ldrh	r1, [r4, #2]
    df3a:	8820      	ldrh	r0, [r4, #0]
    df3c:	f005 f94c 	bl	131d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
    df40:	2800      	cmp	r0, #0
    df42:	d109      	bne.n	df58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    df44:	4805      	ldr	r0, [pc, #20]	; (df5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    df46:	88a1      	ldrh	r1, [r4, #4]
    df48:	8141      	strh	r1, [r0, #10]
    df4a:	8821      	ldrh	r1, [r4, #0]
    df4c:	80c1      	strh	r1, [r0, #6]
    df4e:	88e1      	ldrh	r1, [r4, #6]
    df50:	8181      	strh	r1, [r0, #12]
    df52:	8861      	ldrh	r1, [r4, #2]
    df54:	8101      	strh	r1, [r0, #8]
    df56:	2000      	movs	r0, #0
    df58:	bd10      	pop	{r4, pc}
    df5a:	0000      	.short	0x0000
    df5c:	20001660 	.word	0x20001660
    df60:	0b11900b 	.word	0x0b11900b
    df64:	11900059 	.word	0x11900059

0000df68 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    df68:	b510      	push	{r4, lr}
    df6a:	4a06      	ldr	r2, [pc, #24]	; (df84 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    df6c:	4604      	mov	r4, r0
    df6e:	7010      	strb	r0, [r2, #0]
    df70:	6051      	str	r1, [r2, #4]
    df72:	6890      	ldr	r0, [r2, #8]
    df74:	f005 fb1c 	bl	135b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    df78:	4620      	mov	r0, r4
    df7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df7e:	f7ff bd45 	b.w	da0c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    df82:	0000      	.short	0x0000
    df84:	20000330 	.word	0x20000330

0000df88 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    df88:	b510      	push	{r4, lr}
    df8a:	4c07      	ldr	r4, [pc, #28]	; (dfa8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    df8c:	68e0      	ldr	r0, [r4, #12]
    df8e:	f005 fb0f 	bl	135b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    df92:	6920      	ldr	r0, [r4, #16]
    df94:	f005 fb0c 	bl	135b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    df98:	f7f7 fe16 	bl	5bc8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    df9c:	f7f8 fdbe 	bl	6b1c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    dfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfa4:	f7ff bd38 	b.w	da18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    dfa8:	20000330 	.word	0x20000330

0000dfac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    dfac:	b500      	push	{lr}
    dfae:	4905      	ldr	r1, [pc, #20]	; (dfc4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    dfb0:	4805      	ldr	r0, [pc, #20]	; (dfc8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    dfb2:	f005 faae 	bl	13512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dfb6:	4804      	ldr	r0, [pc, #16]	; (dfc8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    dfb8:	4904      	ldr	r1, [pc, #16]	; (dfcc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    dfba:	1d00      	adds	r0, r0, #4
    dfbc:	f85d eb04 	ldr.w	lr, [sp], #4
    dfc0:	f005 baa7 	b.w	13512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dfc4:	20000344 	.word	0x20000344
    dfc8:	20000338 	.word	0x20000338
    dfcc:	2000034c 	.word	0x2000034c

0000dfd0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    dfd0:	b500      	push	{lr}
    dfd2:	4908      	ldr	r1, [pc, #32]	; (dff4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    dfd4:	4808      	ldr	r0, [pc, #32]	; (dff8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    dfd6:	f005 fa9c 	bl	13512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dfda:	4807      	ldr	r0, [pc, #28]	; (dff8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    dfdc:	4907      	ldr	r1, [pc, #28]	; (dffc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    dfde:	1d00      	adds	r0, r0, #4
    dfe0:	f005 fa97 	bl	13512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dfe4:	4804      	ldr	r0, [pc, #16]	; (dff8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    dfe6:	4906      	ldr	r1, [pc, #24]	; (e000 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    dfe8:	3008      	adds	r0, #8
    dfea:	f85d eb04 	ldr.w	lr, [sp], #4
    dfee:	f005 ba90 	b.w	13512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    dff2:	0000      	.short	0x0000
    dff4:	2000037c 	.word	0x2000037c
    dff8:	20000338 	.word	0x20000338
    dffc:	20000384 	.word	0x20000384
    e000:	20000374 	.word	0x20000374

0000e004 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    e004:	4801      	ldr	r0, [pc, #4]	; (e00c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    e006:	7840      	ldrb	r0, [r0, #1]
    e008:	4770      	bx	lr
    e00a:	0000      	.short	0x0000
    e00c:	20000330 	.word	0x20000330
    e010:	4807      	ldr	r0, [pc, #28]	; (e030 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    e012:	b510      	push	{r4, lr}
    e014:	7800      	ldrb	r0, [r0, #0]
    e016:	f7fb fdcd 	bl	9bb4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    e01a:	4806      	ldr	r0, [pc, #24]	; (e034 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    e01c:	f7fa fc0a 	bl	8834 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    e020:	4906      	ldr	r1, [pc, #24]	; (e03c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    e022:	4805      	ldr	r0, [pc, #20]	; (e038 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    e024:	6008      	str	r0, [r1, #0]
    e026:	4907      	ldr	r1, [pc, #28]	; (e044 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    e028:	4805      	ldr	r0, [pc, #20]	; (e040 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    e02a:	6008      	str	r0, [r1, #0]
    e02c:	bd10      	pop	{r4, pc}
    e02e:	0000      	.short	0x0000
    e030:	20000330 	.word	0x20000330
    e034:	20001c0c 	.word	0x20001c0c
    e038:	000083d9 	.word	0x000083d9
    e03c:	20000354 	.word	0x20000354
    e040:	00007b71 	.word	0x00007b71
    e044:	20000358 	.word	0x20000358
    e048:	b510      	push	{r4, lr}
    e04a:	f7f7 fd51 	bl	5af0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    e04e:	4806      	ldr	r0, [pc, #24]	; (e068 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    e050:	4904      	ldr	r1, [pc, #16]	; (e064 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    e052:	7800      	ldrb	r0, [r0, #0]
    e054:	f7f7 fe24 	bl	5ca0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    e058:	f005 fa7e 	bl	13558 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x46>
    e05c:	4904      	ldr	r1, [pc, #16]	; (e070 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    e05e:	4803      	ldr	r0, [pc, #12]	; (e06c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    e060:	6008      	str	r0, [r1, #0]
    e062:	bd10      	pop	{r4, pc}
    e064:	20001c0c 	.word	0x20001c0c
    e068:	20000330 	.word	0x20000330
    e06c:	00005c55 	.word	0x00005c55
    e070:	20000370 	.word	0x20000370
    e074:	b510      	push	{r4, lr}
    e076:	4c08      	ldr	r4, [pc, #32]	; (e098 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    e078:	2001      	movs	r0, #1
    e07a:	7060      	strb	r0, [r4, #1]
    e07c:	f7fa fd00 	bl	8a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    e080:	7820      	ldrb	r0, [r4, #0]
    e082:	f7fc fdbf 	bl	ac04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    e086:	f7ff ffdf 	bl	e048 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    e08a:	4905      	ldr	r1, [pc, #20]	; (e0a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    e08c:	4803      	ldr	r0, [pc, #12]	; (e09c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    e08e:	6008      	str	r0, [r1, #0]
    e090:	4905      	ldr	r1, [pc, #20]	; (e0a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    e092:	4804      	ldr	r0, [pc, #16]	; (e0a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    e094:	6008      	str	r0, [r1, #0]
    e096:	bd10      	pop	{r4, pc}
    e098:	20000330 	.word	0x20000330
    e09c:	00012511 	.word	0x00012511
    e0a0:	2000036c 	.word	0x2000036c
    e0a4:	00007bd1 	.word	0x00007bd1
    e0a8:	20000360 	.word	0x20000360

0000e0ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    e0ac:	2101      	movs	r1, #1
    e0ae:	4081      	lsls	r1, r0
    e0b0:	4802      	ldr	r0, [pc, #8]	; (e0bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    e0b2:	6802      	ldr	r2, [r0, #0]
    e0b4:	4311      	orrs	r1, r2
    e0b6:	6001      	str	r1, [r0, #0]
    e0b8:	4770      	bx	lr
    e0ba:	0000      	.short	0x0000
    e0bc:	2000038c 	.word	0x2000038c

0000e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    e0c0:	4801      	ldr	r0, [pc, #4]	; (e0c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    e0c2:	6800      	ldr	r0, [r0, #0]
    e0c4:	4770      	bx	lr
    e0c6:	0000      	.short	0x0000
    e0c8:	2000038c 	.word	0x2000038c

0000e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    e0cc:	4805      	ldr	r0, [pc, #20]	; (e0e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x18>)
    e0ce:	2201      	movs	r2, #1
    e0d0:	8800      	ldrh	r0, [r0, #0]
    e0d2:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    e0d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    e0da:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e0de:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    e0e2:	4770      	bx	lr
    e0e4:	2000038c 	.word	0x2000038c

0000e0e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    e0e8:	b570      	push	{r4, r5, r6, lr}
    e0ea:	4605      	mov	r5, r0
    e0ec:	4616      	mov	r6, r2
    e0ee:	460c      	mov	r4, r1
    e0f0:	2002      	movs	r0, #2
    e0f2:	f000 f9db 	bl	e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e0f6:	4905      	ldr	r1, [pc, #20]	; (e10c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    e0f8:	2001      	movs	r0, #1
    e0fa:	7008      	strb	r0, [r1, #0]
    e0fc:	4904      	ldr	r1, [pc, #16]	; (e110 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    e0fe:	1ef0      	subs	r0, r6, #3
    e100:	6008      	str	r0, [r1, #0]
    e102:	4804      	ldr	r0, [pc, #16]	; (e114 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    e104:	6005      	str	r5, [r0, #0]
    e106:	1f00      	subs	r0, r0, #4
    e108:	6004      	str	r4, [r0, #0]
    e10a:	bd70      	pop	{r4, r5, r6, pc}
    e10c:	200003c3 	.word	0x200003c3
    e110:	4000f510 	.word	0x4000f510
    e114:	4000f508 	.word	0x4000f508

0000e118 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    e118:	4811      	ldr	r0, [pc, #68]	; (e160 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    e11a:	7801      	ldrb	r1, [r0, #0]
    e11c:	b1d9      	cbz	r1, e156 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    e11e:	4a11      	ldr	r2, [pc, #68]	; (e164 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    e120:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e124:	6011      	str	r1, [r2, #0]
    e126:	4910      	ldr	r1, [pc, #64]	; (e168 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    e128:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    e12c:	2200      	movs	r2, #0
    e12e:	2b00      	cmp	r3, #0
    e130:	bf1c      	itt	ne
    e132:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    e136:	2b00      	cmpne	r3, #0
    e138:	d002      	beq.n	e140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    e13a:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    e13e:	b119      	cbz	r1, e148 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    e140:	7042      	strb	r2, [r0, #1]
    e142:	f04f 0110 	mov.w	r1, #16
    e146:	e004      	b.n	e152 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    e148:	f04f 0101 	mov.w	r1, #1
    e14c:	7041      	strb	r1, [r0, #1]
    e14e:	4907      	ldr	r1, [pc, #28]	; (e16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    e150:	6809      	ldr	r1, [r1, #0]
    e152:	7081      	strb	r1, [r0, #2]
    e154:	7002      	strb	r2, [r0, #0]
    e156:	f04f 0000 	mov.w	r0, #0
    e15a:	f000 b9a7 	b.w	e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e15e:	0000      	.short	0x0000
    e160:	200003c3 	.word	0x200003c3
    e164:	4001f508 	.word	0x4001f508
    e168:	4000f000 	.word	0x4000f000
    e16c:	4000f400 	.word	0x4000f400

0000e170 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    e170:	b510      	push	{r4, lr}
    e172:	2002      	movs	r0, #2
    e174:	f000 f99a 	bl	e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e178:	4907      	ldr	r1, [pc, #28]	; (e198 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    e17a:	2001      	movs	r0, #1
    e17c:	7008      	strb	r0, [r1, #0]
    e17e:	4907      	ldr	r1, [pc, #28]	; (e19c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    e180:	2000      	movs	r0, #0
    e182:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    e186:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    e18a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    e18e:	4904      	ldr	r1, [pc, #16]	; (e1a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    e190:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    e194:	6008      	str	r0, [r1, #0]
    e196:	bd10      	pop	{r4, pc}
    e198:	200003c3 	.word	0x200003c3
    e19c:	4000f000 	.word	0x4000f000
    e1a0:	4001f504 	.word	0x4001f504

0000e1a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    e1a4:	4803      	ldr	r0, [pc, #12]	; (e1b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    e1a6:	2100      	movs	r1, #0
    e1a8:	7001      	strb	r1, [r0, #0]
    e1aa:	7041      	strb	r1, [r0, #1]
    e1ac:	2110      	movs	r1, #16
    e1ae:	7081      	strb	r1, [r0, #2]
    e1b0:	4770      	bx	lr
    e1b2:	0000      	.short	0x0000
    e1b4:	200003c3 	.word	0x200003c3

0000e1b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    e1b8:	480c      	ldr	r0, [pc, #48]	; (e1ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    e1ba:	7801      	ldrb	r1, [r0, #0]
    e1bc:	2900      	cmp	r1, #0
    e1be:	bf04      	itt	eq
    e1c0:	7880      	ldrbeq	r0, [r0, #2]
    e1c2:	4770      	bxeq	lr
    e1c4:	480a      	ldr	r0, [pc, #40]	; (e1f0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    e1c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e1ca:	2900      	cmp	r1, #0
    e1cc:	bf1c      	itt	ne
    e1ce:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    e1d2:	2900      	cmpne	r1, #0
    e1d4:	d002      	beq.n	e1dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    e1d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    e1da:	b110      	cbz	r0, e1e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    e1dc:	f04f 0010 	mov.w	r0, #16
    e1e0:	4770      	bx	lr
    e1e2:	4804      	ldr	r0, [pc, #16]	; (e1f4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    e1e4:	6800      	ldr	r0, [r0, #0]
    e1e6:	b2c0      	uxtb	r0, r0
    e1e8:	4770      	bx	lr
    e1ea:	0000      	.short	0x0000
    e1ec:	200003c3 	.word	0x200003c3
    e1f0:	4000f000 	.word	0x4000f000
    e1f4:	4000f400 	.word	0x4000f400

0000e1f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    e1f8:	480e      	ldr	r0, [pc, #56]	; (e234 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    e1fa:	7801      	ldrb	r1, [r0, #0]
    e1fc:	2900      	cmp	r1, #0
    e1fe:	bf04      	itt	eq
    e200:	7840      	ldrbeq	r0, [r0, #1]
    e202:	4770      	bxeq	lr
    e204:	480c      	ldr	r0, [pc, #48]	; (e238 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    e206:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e20a:	2900      	cmp	r1, #0
    e20c:	bf04      	itt	eq
    e20e:	2002      	moveq	r0, #2
    e210:	4770      	bxeq	lr
    e212:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e216:	2900      	cmp	r1, #0
    e218:	bf1c      	itt	ne
    e21a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    e21e:	2900      	cmpne	r1, #0
    e220:	d005      	beq.n	e22e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    e222:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    e226:	2800      	cmp	r0, #0
    e228:	bf04      	itt	eq
    e22a:	2001      	moveq	r0, #1
    e22c:	4770      	bxeq	lr
    e22e:	2000      	movs	r0, #0
    e230:	4770      	bx	lr
    e232:	0000      	.short	0x0000
    e234:	200003c3 	.word	0x200003c3
    e238:	4000f000 	.word	0x4000f000

0000e23c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    e23c:	4813      	ldr	r0, [pc, #76]	; (e28c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    e23e:	b510      	push	{r4, lr}
    e240:	7802      	ldrb	r2, [r0, #0]
    e242:	4b13      	ldr	r3, [pc, #76]	; (e290 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    e244:	7840      	ldrb	r0, [r0, #1]
    e246:	21c8      	movs	r1, #200	; 0xc8
    e248:	1e49      	subs	r1, r1, #1
    e24a:	b2c9      	uxtb	r1, r1
    e24c:	b182      	cbz	r2, e270 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    e24e:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    e252:	f1bc 0f00 	cmp.w	ip, #0
    e256:	d011      	beq.n	e27c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    e258:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    e25c:	2800      	cmp	r0, #0
    e25e:	bf1c      	itt	ne
    e260:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    e264:	2800      	cmpne	r0, #0
    e266:	d007      	beq.n	e278 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    e268:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    e26c:	b160      	cbz	r0, e288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    e26e:	e003      	b.n	e278 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    e270:	2802      	cmp	r0, #2
    e272:	d003      	beq.n	e27c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    e274:	2801      	cmp	r0, #1
    e276:	d007      	beq.n	e288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    e278:	2000      	movs	r0, #0
    e27a:	bd10      	pop	{r4, pc}
    e27c:	2900      	cmp	r1, #0
    e27e:	d1e3      	bne.n	e248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    e280:	218e      	movs	r1, #142	; 0x8e
    e282:	203b      	movs	r0, #59	; 0x3b
    e284:	f7f6 fcd4 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e288:	2001      	movs	r0, #1
    e28a:	bd10      	pop	{r4, pc}
    e28c:	200003c3 	.word	0x200003c3
    e290:	4000f000 	.word	0x4000f000

0000e294 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    e294:	b570      	push	{r4, r5, r6, lr}
    e296:	4606      	mov	r6, r0
    e298:	4614      	mov	r4, r2
    e29a:	460d      	mov	r5, r1
    e29c:	2001      	movs	r0, #1
    e29e:	f000 f905 	bl	e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e2a2:	4803      	ldr	r0, [pc, #12]	; (e2b0 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    e2a4:	6006      	str	r6, [r0, #0]
    e2a6:	1d00      	adds	r0, r0, #4
    e2a8:	6004      	str	r4, [r0, #0]
    e2aa:	1d00      	adds	r0, r0, #4
    e2ac:	6005      	str	r5, [r0, #0]
    e2ae:	bd70      	pop	{r4, r5, r6, pc}
    e2b0:	4000f508 	.word	0x4000f508

0000e2b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    e2b4:	480a      	ldr	r0, [pc, #40]	; (e2e0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    e2b6:	7801      	ldrb	r1, [r0, #0]
    e2b8:	b171      	cbz	r1, e2d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    e2ba:	4a0b      	ldr	r2, [pc, #44]	; (e2e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    e2bc:	4909      	ldr	r1, [pc, #36]	; (e2e4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    e2be:	6011      	str	r1, [r2, #0]
    e2c0:	490a      	ldr	r1, [pc, #40]	; (e2ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    e2c2:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    e2c6:	2100      	movs	r1, #0
    e2c8:	2a00      	cmp	r2, #0
    e2ca:	bf08      	it	eq
    e2cc:	7041      	strbeq	r1, [r0, #1]
    e2ce:	d002      	beq.n	e2d6 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    e2d0:	4a07      	ldr	r2, [pc, #28]	; (e2f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x3c>)
    e2d2:	6812      	ldr	r2, [r2, #0]
    e2d4:	7042      	strb	r2, [r0, #1]
    e2d6:	7001      	strb	r1, [r0, #0]
    e2d8:	2000      	movs	r0, #0
    e2da:	f000 b8e7 	b.w	e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    e2de:	0000      	.short	0x0000
    e2e0:	200003c6 	.word	0x200003c6
    e2e4:	02020000 	.word	0x02020000
    e2e8:	4001f508 	.word	0x4001f508
    e2ec:	4000f000 	.word	0x4000f000
    e2f0:	4000f400 	.word	0x4000f400

0000e2f4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f8:	4606      	mov	r6, r0
    e2fa:	4821      	ldr	r0, [pc, #132]	; (e380 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x8c>)
    e2fc:	460f      	mov	r7, r1
    e2fe:	2401      	movs	r4, #1
    e300:	4615      	mov	r5, r2
    e302:	7004      	strb	r4, [r0, #0]
    e304:	491f      	ldr	r1, [pc, #124]	; (e384 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x90>)
    e306:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
    e30a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    e30e:	6008      	str	r0, [r1, #0]
    e310:	f001 fe66 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    e314:	b928      	cbnz	r0, e322 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2e>
    e316:	481c      	ldr	r0, [pc, #112]	; (e388 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x94>)
    e318:	6801      	ldr	r1, [r0, #0]
    e31a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    e31e:	4339      	orrs	r1, r7
    e320:	6001      	str	r1, [r0, #0]
    e322:	491a      	ldr	r1, [pc, #104]	; (e38c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x98>)
    e324:	f04f 0c00 	mov.w	ip, #0
    e328:	f8c1 c104 	str.w	ip, [r1, #260]	; 0x104
    e32c:	4819      	ldr	r0, [pc, #100]	; (e394 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa0>)
    e32e:	4b18      	ldr	r3, [pc, #96]	; (e390 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x9c>)
    e330:	6003      	str	r3, [r0, #0]
    e332:	2e00      	cmp	r6, #0
    e334:	bf02      	ittt	eq
    e336:	f8c1 4200 	streq.w	r4, [r1, #512]	; 0x200
    e33a:	600c      	streq	r4, [r1, #0]
    e33c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    e340:	2e01      	cmp	r6, #1
    e342:	d003      	beq.n	e34c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x58>
    e344:	2183      	movs	r1, #131	; 0x83
    e346:	203c      	movs	r0, #60	; 0x3c
    e348:	f7f6 fc72 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e34c:	f8c1 c200 	str.w	ip, [r1, #512]	; 0x200
    e350:	600c      	str	r4, [r1, #0]
    e352:	2d02      	cmp	r5, #2
    e354:	bf18      	it	ne
    e356:	2d03      	cmpne	r5, #3
    e358:	d10d      	bne.n	e376 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x82>
    e35a:	4810      	ldr	r0, [pc, #64]	; (e39c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa8>)
    e35c:	490e      	ldr	r1, [pc, #56]	; (e398 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa4>)
    e35e:	f8c0 c150 	str.w	ip, [r0, #336]	; 0x150
    e362:	4a0f      	ldr	r2, [pc, #60]	; (e3a0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xac>)
    e364:	f04f 0003 	mov.w	r0, #3
    e368:	6010      	str	r0, [r2, #0]
    e36a:	480e      	ldr	r0, [pc, #56]	; (e3a4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb0>)
    e36c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    e370:	490d      	ldr	r1, [pc, #52]	; (e3a8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb4>)
    e372:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    e376:	480d      	ldr	r0, [pc, #52]	; (e3ac <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb8>)
    e378:	6003      	str	r3, [r0, #0]
    e37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e37e:	0000      	.short	0x0000
    e380:	200003c6 	.word	0x200003c6
    e384:	4000f504 	.word	0x4000f504
    e388:	4000f518 	.word	0x4000f518
    e38c:	4000f000 	.word	0x4000f000
    e390:	02020000 	.word	0x02020000
    e394:	4001f508 	.word	0x4001f508
    e398:	40001150 	.word	0x40001150
    e39c:	40001000 	.word	0x40001000
    e3a0:	4000f51c 	.word	0x4000f51c
    e3a4:	4001f088 	.word	0x4001f088
    e3a8:	4000f00c 	.word	0x4000f00c
    e3ac:	4001f504 	.word	0x4001f504

0000e3b0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    e3b0:	4802      	ldr	r0, [pc, #8]	; (e3bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    e3b2:	2100      	movs	r1, #0
    e3b4:	7001      	strb	r1, [r0, #0]
    e3b6:	7041      	strb	r1, [r0, #1]
    e3b8:	4770      	bx	lr
    e3ba:	0000      	.short	0x0000
    e3bc:	200003c6 	.word	0x200003c6

0000e3c0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    e3c0:	4807      	ldr	r0, [pc, #28]	; (e3e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    e3c2:	7801      	ldrb	r1, [r0, #0]
    e3c4:	2900      	cmp	r1, #0
    e3c6:	bf04      	itt	eq
    e3c8:	7840      	ldrbeq	r0, [r0, #1]
    e3ca:	4770      	bxeq	lr
    e3cc:	4805      	ldr	r0, [pc, #20]	; (e3e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    e3ce:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    e3d2:	2800      	cmp	r0, #0
    e3d4:	bf08      	it	eq
    e3d6:	4770      	bxeq	lr
    e3d8:	4803      	ldr	r0, [pc, #12]	; (e3e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    e3da:	6800      	ldr	r0, [r0, #0]
    e3dc:	b2c0      	uxtb	r0, r0
    e3de:	4770      	bx	lr
    e3e0:	200003c6 	.word	0x200003c6
    e3e4:	4000f000 	.word	0x4000f000
    e3e8:	4000f400 	.word	0x4000f400

0000e3ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    e3ec:	4901      	ldr	r1, [pc, #4]	; (e3f4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    e3ee:	2001      	movs	r0, #1
    e3f0:	6088      	str	r0, [r1, #8]
    e3f2:	4770      	bx	lr
    e3f4:	4000f000 	.word	0x4000f000

0000e3f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    e3f8:	2800      	cmp	r0, #0
    e3fa:	bf08      	it	eq
    e3fc:	4770      	bxeq	lr
    e3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e402:	481b      	ldr	r0, [pc, #108]	; (e470 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    e404:	7800      	ldrb	r0, [r0, #0]
    e406:	b1e0      	cbz	r0, e442 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    e408:	4c1a      	ldr	r4, [pc, #104]	; (e474 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    e40a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e40e:	2800      	cmp	r0, #0
    e410:	bf18      	it	ne
    e412:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e416:	f04f 0902 	mov.w	r9, #2
    e41a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    e41e:	4f16      	ldr	r7, [pc, #88]	; (e478 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    e420:	6838      	ldr	r0, [r7, #0]
    e422:	f3c0 1800 	ubfx	r8, r0, #4, #1
    e426:	6838      	ldr	r0, [r7, #0]
    e428:	f040 0010 	orr.w	r0, r0, #16
    e42c:	6038      	str	r0, [r7, #0]
    e42e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e432:	2800      	cmp	r0, #0
    e434:	bf04      	itt	eq
    e436:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    e43a:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    e43e:	d10c      	bne.n	e45a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    e440:	e003      	b.n	e44a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    e442:	21ed      	movs	r1, #237	; 0xed
    e444:	203c      	movs	r0, #60	; 0x3c
    e446:	f7f6 fbf3 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e44a:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    e44e:	f7f6 fa33 	bl	48b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    e452:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e456:	2800      	cmp	r0, #0
    e458:	d0f7      	beq.n	e44a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    e45a:	f1b8 0f00 	cmp.w	r8, #0
    e45e:	d103      	bne.n	e468 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    e460:	6838      	ldr	r0, [r7, #0]
    e462:	f020 0010 	bic.w	r0, r0, #16
    e466:	6038      	str	r0, [r7, #0]
    e468:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    e46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e470:	200003c6 	.word	0x200003c6
    e474:	4000f000 	.word	0x4000f000
    e478:	e000ed10 	.word	0xe000ed10

0000e47c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    e47c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e484:	2000      	movs	r0, #0
    e486:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    e48a:	f3bf 8f4f 	dsb	sy
    e48e:	f3bf 8f6f 	isb	sy
    e492:	4904      	ldr	r1, [pc, #16]	; (e4a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    e494:	6008      	str	r0, [r1, #0]
    e496:	6008      	str	r0, [r1, #0]
    e498:	4903      	ldr	r1, [pc, #12]	; (e4a8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    e49a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    e49e:	6008      	str	r0, [r1, #0]
    e4a0:	4770      	bx	lr
    e4a2:	0000      	.short	0x0000
    e4a4:	4000f500 	.word	0x4000f500
    e4a8:	4001f508 	.word	0x4001f508

0000e4ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    e4ac:	4912      	ldr	r1, [pc, #72]	; (e4f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    e4ae:	b510      	push	{r4, lr}
    e4b0:	2200      	movs	r2, #0
    e4b2:	600a      	str	r2, [r1, #0]
    e4b4:	600a      	str	r2, [r1, #0]
    e4b6:	4b11      	ldr	r3, [pc, #68]	; (e4fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    e4b8:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    e4bc:	601a      	str	r2, [r3, #0]
    e4be:	2800      	cmp	r0, #0
    e4c0:	bf08      	it	eq
    e4c2:	bd10      	popeq	{r4, pc}
    e4c4:	4a0e      	ldr	r2, [pc, #56]	; (e500 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    e4c6:	4b0f      	ldr	r3, [pc, #60]	; (e504 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    e4c8:	f8df c03c 	ldr.w	ip, [pc, #60]	; e508 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    e4cc:	2801      	cmp	r0, #1
    e4ce:	d005      	beq.n	e4dc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    e4d0:	2802      	cmp	r0, #2
    e4d2:	d008      	beq.n	e4e6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    e4d4:	217d      	movs	r1, #125	; 0x7d
    e4d6:	203d      	movs	r0, #61	; 0x3d
    e4d8:	f7f6 fbaa 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4dc:	2002      	movs	r0, #2
    e4de:	6008      	str	r0, [r1, #0]
    e4e0:	601a      	str	r2, [r3, #0]
    e4e2:	0600      	lsls	r0, r0, #24
    e4e4:	e004      	b.n	e4f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    e4e6:	2003      	movs	r0, #3
    e4e8:	6008      	str	r0, [r1, #0]
    e4ea:	601a      	str	r2, [r3, #0]
    e4ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    e4f0:	f8cc 0000 	str.w	r0, [ip]
    e4f4:	bd10      	pop	{r4, pc}
    e4f6:	0000      	.short	0x0000
    e4f8:	4000f500 	.word	0x4000f500
    e4fc:	4001f508 	.word	0x4001f508
    e500:	20001d0e 	.word	0x20001d0e
    e504:	4000f514 	.word	0x4000f514
    e508:	4001f504 	.word	0x4001f504

0000e50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    e50c:	4805      	ldr	r0, [pc, #20]	; (e524 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    e50e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e512:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    e516:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e51a:	4903      	ldr	r1, [pc, #12]	; (e528 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    e51c:	2000      	movs	r0, #0
    e51e:	6008      	str	r0, [r1, #0]
    e520:	4770      	bx	lr
    e522:	0000      	.short	0x0000
    e524:	40001000 	.word	0x40001000
    e528:	40001560 	.word	0x40001560

0000e52c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    e52c:	4904      	ldr	r1, [pc, #16]	; (e540 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    e52e:	6008      	str	r0, [r1, #0]
    e530:	4804      	ldr	r0, [pc, #16]	; (e544 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    e532:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e536:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    e53a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e53e:	4770      	bx	lr
    e540:	40001560 	.word	0x40001560
    e544:	40001000 	.word	0x40001000

0000e548 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    e548:	00c2      	lsls	r2, r0, #3
    e54a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e54e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    e552:	4b07      	ldr	r3, [pc, #28]	; (e570 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    e554:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    e558:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    e55c:	2101      	movs	r1, #1
    e55e:	fa01 f000 	lsl.w	r0, r1, r0
    e562:	4904      	ldr	r1, [pc, #16]	; (e574 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    e564:	6008      	str	r0, [r1, #0]
    e566:	4904      	ldr	r1, [pc, #16]	; (e578 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    e568:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    e56a:	4310      	orrs	r0, r2
    e56c:	6388      	str	r0, [r1, #56]	; 0x38
    e56e:	4770      	bx	lr
    e570:	40001104 	.word	0x40001104
    e574:	4001f504 	.word	0x4001f504
    e578:	200018a4 	.word	0x200018a4

0000e57c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    e57c:	4801      	ldr	r0, [pc, #4]	; (e584 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    e57e:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    e582:	4770      	bx	lr
    e584:	200018a4 	.word	0x200018a4

0000e588 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    e588:	4a01      	ldr	r2, [pc, #4]	; (e590 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    e58a:	7051      	strb	r1, [r2, #1]
    e58c:	7010      	strb	r0, [r2, #0]
    e58e:	4770      	bx	lr
    e590:	200018a4 	.word	0x200018a4

0000e594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    e594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e598:	f7f6 f9fe 	bl	4998 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    e59c:	f7f6 fa60 	bl	4a60 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    e5a0:	4d31      	ldr	r5, [pc, #196]	; (e668 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    e5a2:	4680      	mov	r8, r0
    e5a4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    e5a8:	f04f 0a10 	mov.w	sl, #16
    e5ac:	f3c0 1900 	ubfx	r9, r0, #4, #1
    e5b0:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    e5b4:	2002      	movs	r0, #2
    e5b6:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    e5ba:	4c2c      	ldr	r4, [pc, #176]	; (e66c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    e5bc:	492d      	ldr	r1, [pc, #180]	; (e674 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    e5be:	2600      	movs	r6, #0
    e5c0:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e5c4:	482a      	ldr	r0, [pc, #168]	; (e670 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    e5c6:	6008      	str	r0, [r1, #0]
    e5c8:	7ae0      	ldrb	r0, [r4, #11]
    e5ca:	2701      	movs	r7, #1
    e5cc:	2801      	cmp	r0, #1
    e5ce:	d002      	beq.n	e5d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x42>
    e5d0:	2802      	cmp	r0, #2
    e5d2:	d003      	beq.n	e5dc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x48>
    e5d4:	e015      	b.n	e602 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    e5d6:	7e20      	ldrb	r0, [r4, #24]
    e5d8:	b910      	cbnz	r0, e5e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    e5da:	e012      	b.n	e602 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    e5dc:	7e60      	ldrb	r0, [r4, #25]
    e5de:	b180      	cbz	r0, e602 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    e5e0:	7fa0      	ldrb	r0, [r4, #30]
    e5e2:	7fe2      	ldrb	r2, [r4, #31]
    e5e4:	fa07 f000 	lsl.w	r0, r7, r0
    e5e8:	fa07 f202 	lsl.w	r2, r7, r2
    e5ec:	4310      	orrs	r0, r2
    e5ee:	6008      	str	r0, [r1, #0]
    e5f0:	f894 0020 	ldrb.w	r0, [r4, #32]
    e5f4:	0080      	lsls	r0, r0, #2
    e5f6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    e5fa:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    e5fe:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    e602:	481d      	ldr	r0, [pc, #116]	; (e678 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe4>)
    e604:	6800      	ldr	r0, [r0, #0]
    e606:	b1b0      	cbz	r0, e636 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    e608:	20ff      	movs	r0, #255	; 0xff
    e60a:	f88d 0000 	strb.w	r0, [sp]
    e60e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    e612:	612f      	str	r7, [r5, #16]
    e614:	e005      	b.n	e622 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    e616:	bf00      	nop
    e618:	f89d 0000 	ldrb.w	r0, [sp]
    e61c:	1e40      	subs	r0, r0, #1
    e61e:	f88d 0000 	strb.w	r0, [sp]
    e622:	f89d 1000 	ldrb.w	r1, [sp]
    e626:	b119      	cbz	r1, e630 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    e628:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    e62c:	2800      	cmp	r0, #0
    e62e:	d0f3      	beq.n	e618 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    e630:	f89d 0000 	ldrb.w	r0, [sp]
    e634:	b198      	cbz	r0, e65e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xca>
    e636:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    e63a:	2000      	movs	r0, #0
    e63c:	f001 fa9c 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e640:	7266      	strb	r6, [r4, #9]
    e642:	72a6      	strb	r6, [r4, #10]
    e644:	72e6      	strb	r6, [r4, #11]
    e646:	7327      	strb	r7, [r4, #12]
    e648:	f1b9 0f00 	cmp.w	r9, #0
    e64c:	bf18      	it	ne
    e64e:	f8c5 a304 	strne.w	sl, [r5, #772]	; 0x304
    e652:	f1b8 0f00 	cmp.w	r8, #0
    e656:	bf18      	it	ne
    e658:	612f      	strne	r7, [r5, #16]
    e65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e65e:	f240 7172 	movw	r1, #1906	; 0x772
    e662:	203e      	movs	r0, #62	; 0x3e
    e664:	f7f6 fae4 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e668:	40001000 	.word	0x40001000
    e66c:	200018a4 	.word	0x200018a4
    e670:	0c0e0000 	.word	0x0c0e0000
    e674:	4001f508 	.word	0x4001f508
    e678:	40001550 	.word	0x40001550

0000e67c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e680:	f8df a2d8 	ldr.w	sl, [pc, #728]	; e95c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e0>
    e684:	4607      	mov	r7, r0
    e686:	b087      	sub	sp, #28
    e688:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    e68c:	460d      	mov	r5, r1
    e68e:	f8ca 0000 	str.w	r0, [sl]
    e692:	4cb3      	ldr	r4, [pc, #716]	; (e960 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e4>)
    e694:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    e698:	f040 0002 	orr.w	r0, r0, #2
    e69c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    e6a0:	4608      	mov	r0, r1
    e6a2:	f001 fb47 	bl	fd34 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    e6a6:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    e6aa:	2825      	cmp	r0, #37	; 0x25
    e6ac:	bf08      	it	eq
    e6ae:	2102      	moveq	r1, #2
    e6b0:	d00f      	beq.n	e6d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    e6b2:	2826      	cmp	r0, #38	; 0x26
    e6b4:	bf08      	it	eq
    e6b6:	211a      	moveq	r1, #26
    e6b8:	d00b      	beq.n	e6d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    e6ba:	2827      	cmp	r0, #39	; 0x27
    e6bc:	bf08      	it	eq
    e6be:	2150      	moveq	r1, #80	; 0x50
    e6c0:	d007      	beq.n	e6d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    e6c2:	280a      	cmp	r0, #10
    e6c4:	4601      	mov	r1, r0
    e6c6:	bf94      	ite	ls
    e6c8:	2204      	movls	r2, #4
    e6ca:	2206      	movhi	r2, #6
    e6cc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e6d0:	b2c9      	uxtb	r1, r1
    e6d2:	4aa4      	ldr	r2, [pc, #656]	; (e964 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e8>)
    e6d4:	6011      	str	r1, [r2, #0]
    e6d6:	49a4      	ldr	r1, [pc, #656]	; (e968 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ec>)
    e6d8:	6008      	str	r0, [r1, #0]
    e6da:	4628      	mov	r0, r5
    e6dc:	f001 fb0a 	bl	fcf4 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    e6e0:	4ea2      	ldr	r6, [pc, #648]	; (e96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f0>)
    e6e2:	f04f 0900 	mov.w	r9, #0
    e6e6:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    e6ea:	f04f 0801 	mov.w	r8, #1
    e6ee:	b117      	cbz	r7, e6f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    e6f0:	2f01      	cmp	r7, #1
    e6f2:	d054      	beq.n	e79e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x122>
    e6f4:	e0b2      	b.n	e85c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    e6f6:	2d01      	cmp	r5, #1
    e6f8:	bf08      	it	eq
    e6fa:	2000      	moveq	r0, #0
    e6fc:	d00b      	beq.n	e716 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    e6fe:	2d02      	cmp	r5, #2
    e700:	bf08      	it	eq
    e702:	2001      	moveq	r0, #1
    e704:	d007      	beq.n	e716 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    e706:	2d04      	cmp	r5, #4
    e708:	bf08      	it	eq
    e70a:	2003      	moveq	r0, #3
    e70c:	d003      	beq.n	e716 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    e70e:	2d08      	cmp	r5, #8
    e710:	bf08      	it	eq
    e712:	2002      	moveq	r0, #2
    e714:	d157      	bne.n	e7c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    e716:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e71a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e71e:	ab05      	add	r3, sp, #20
    e720:	f7f2 fe68 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e724:	2800      	cmp	r0, #0
    e726:	d15b      	bne.n	e7e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x164>
    e728:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e72c:	f001 fafc 	bl	fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e730:	7a60      	ldrb	r0, [r4, #9]
    e732:	2801      	cmp	r0, #1
    e734:	d105      	bne.n	e742 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
    e736:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e73a:	f040 0008 	orr.w	r0, r0, #8
    e73e:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e742:	f001 fc69 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e746:	b178      	cbz	r0, e768 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xec>
    e748:	4989      	ldr	r1, [pc, #548]	; (e970 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f4>)
    e74a:	680a      	ldr	r2, [r1, #0]
    e74c:	0648      	lsls	r0, r1, #25
    e74e:	2d02      	cmp	r5, #2
    e750:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    e754:	bf0c      	ite	eq
    e756:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    e75a:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    e75e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    e762:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    e766:	6008      	str	r0, [r1, #0]
    e768:	f884 800b 	strb.w	r8, [r4, #11]
    e76c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e76e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    e772:	63a0      	str	r0, [r4, #56]	; 0x38
    e774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    e778:	f8ca 0000 	str.w	r0, [sl]
    e77c:	2d02      	cmp	r5, #2
    e77e:	bf08      	it	eq
    e780:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e784:	d005      	beq.n	e792 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x116>
    e786:	2d01      	cmp	r5, #1
    e788:	bf0c      	ite	eq
    e78a:	f640 0034 	movweq	r0, #2100	; 0x834
    e78e:	f640 2028 	movwne	r0, #2600	; 0xa28
    e792:	f649 71ec 	movw	r1, #40940	; 0x9fec
    e796:	4408      	add	r0, r1
    e798:	fbb0 f9fb 	udiv	r9, r0, fp
    e79c:	e05e      	b.n	e85c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    e79e:	7aa0      	ldrb	r0, [r4, #10]
    e7a0:	2801      	cmp	r0, #1
    e7a2:	d126      	bne.n	e7f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x176>
    e7a4:	7b60      	ldrb	r0, [r4, #13]
    e7a6:	2801      	cmp	r0, #1
    e7a8:	bf08      	it	eq
    e7aa:	2000      	moveq	r0, #0
    e7ac:	d010      	beq.n	e7d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    e7ae:	2802      	cmp	r0, #2
    e7b0:	bf08      	it	eq
    e7b2:	2001      	moveq	r0, #1
    e7b4:	d00c      	beq.n	e7d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    e7b6:	2804      	cmp	r0, #4
    e7b8:	bf08      	it	eq
    e7ba:	2003      	moveq	r0, #3
    e7bc:	d008      	beq.n	e7d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    e7be:	2808      	cmp	r0, #8
    e7c0:	bf08      	it	eq
    e7c2:	2002      	moveq	r0, #2
    e7c4:	d004      	beq.n	e7d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    e7c6:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e7ca:	2006      	movs	r0, #6
    e7cc:	f7f6 fa30 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7d0:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e7d4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e7d8:	ab05      	add	r3, sp, #20
    e7da:	f7f2 fe0b 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e7de:	b120      	cbz	r0, e7ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    e7e0:	f240 41a1 	movw	r1, #1185	; 0x4a1
    e7e4:	203e      	movs	r0, #62	; 0x3e
    e7e6:	f7f6 fa23 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7ea:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e7ee:	f001 fa9b 	bl	fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e7f2:	7a60      	ldrb	r0, [r4, #9]
    e7f4:	2801      	cmp	r0, #1
    e7f6:	d105      	bne.n	e804 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x188>
    e7f8:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e7fc:	f040 0004 	orr.w	r0, r0, #4
    e800:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e804:	2002      	movs	r0, #2
    e806:	72e0      	strb	r0, [r4, #11]
    e808:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e80a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    e80e:	63a0      	str	r0, [r4, #56]	; 0x38
    e810:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    e814:	f8ca 0000 	str.w	r0, [sl]
    e818:	4856      	ldr	r0, [pc, #344]	; (e974 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f8>)
    e81a:	f04f 0929 	mov.w	r9, #41	; 0x29
    e81e:	6800      	ldr	r0, [r0, #0]
    e820:	b970      	cbnz	r0, e840 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1c4>
    e822:	f015 0f0c 	tst.w	r5, #12
    e826:	d00b      	beq.n	e840 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1c4>
    e828:	f8c6 8304 	str.w	r8, [r6, #772]	; 0x304
    e82c:	2001      	movs	r0, #1
    e82e:	f001 f9a3 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e832:	f8c6 803c 	str.w	r8, [r6, #60]	; 0x3c
    e836:	f8c6 8040 	str.w	r8, [r6, #64]	; 0x40
    e83a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    e83e:	e002      	b.n	e846 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ca>
    e840:	2000      	movs	r0, #0
    e842:	f001 f999 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e846:	f001 fbe7 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e84a:	b938      	cbnz	r0, e85c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    e84c:	f001 fbd4 	bl	fff8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e850:	b920      	cbnz	r0, e85c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    e852:	4849      	ldr	r0, [pc, #292]	; (e978 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2fc>)
    e854:	6801      	ldr	r1, [r0, #0]
    e856:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    e85a:	6001      	str	r1, [r0, #0]
    e85c:	7a60      	ldrb	r0, [r4, #9]
    e85e:	2800      	cmp	r0, #0
    e860:	bf04      	itt	eq
    e862:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e866:	f040 0002 	orreq.w	r0, r0, #2
    e86a:	d006      	beq.n	e87a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1fe>
    e86c:	2801      	cmp	r0, #1
    e86e:	bf04      	itt	eq
    e870:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e874:	f040 0004 	orreq.w	r0, r0, #4
    e878:	d101      	bne.n	e87e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    e87a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    e87e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    e882:	f010 0f01 	tst.w	r0, #1
    e886:	d027      	beq.n	e8d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    e888:	f010 0f02 	tst.w	r0, #2
    e88c:	d018      	beq.n	e8c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x244>
    e88e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    e892:	f040 0001 	orr.w	r0, r0, #1
    e896:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e89a:	4838      	ldr	r0, [pc, #224]	; (e97c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x300>)
    e89c:	6801      	ldr	r1, [r0, #0]
    e89e:	290b      	cmp	r1, #11
    e8a0:	bf1c      	itt	ne
    e8a2:	6801      	ldrne	r1, [r0, #0]
    e8a4:	290a      	cmpne	r1, #10
    e8a6:	d005      	beq.n	e8b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x238>
    e8a8:	6801      	ldr	r1, [r0, #0]
    e8aa:	2903      	cmp	r1, #3
    e8ac:	bf1c      	itt	ne
    e8ae:	6800      	ldrne	r0, [r0, #0]
    e8b0:	2802      	cmpne	r0, #2
    e8b2:	d111      	bne.n	e8d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    e8b4:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    e8b8:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e8bc:	f7f6 f9b8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8c0:	f010 0f04 	tst.w	r0, #4
    e8c4:	d008      	beq.n	e8d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    e8c6:	492f      	ldr	r1, [pc, #188]	; (e984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x308>)
    e8c8:	482d      	ldr	r0, [pc, #180]	; (e980 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x304>)
    e8ca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    e8ce:	482e      	ldr	r0, [pc, #184]	; (e988 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x30c>)
    e8d0:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    e8d4:	2801      	cmp	r0, #1
    e8d6:	d036      	beq.n	e946 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ca>
    e8d8:	f001 fa5c 	bl	fd94 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    e8dc:	6800      	ldr	r0, [r0, #0]
    e8de:	2801      	cmp	r0, #1
    e8e0:	d036      	beq.n	e950 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2d4>
    e8e2:	2f01      	cmp	r7, #1
    e8e4:	bf08      	it	eq
    e8e6:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    e8ea:	d00d      	beq.n	e908 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28c>
    e8ec:	2d02      	cmp	r5, #2
    e8ee:	bf08      	it	eq
    e8f0:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e8f4:	d005      	beq.n	e902 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    e8f6:	2d01      	cmp	r5, #1
    e8f8:	bf0c      	ite	eq
    e8fa:	f640 0034 	movweq	r0, #2100	; 0x834
    e8fe:	f640 2028 	movwne	r0, #2600	; 0xa28
    e902:	f24a 0150 	movw	r1, #41040	; 0xa050
    e906:	4408      	add	r0, r1
    e908:	fbb0 f0fb 	udiv	r0, r0, fp
    e90c:	491f      	ldr	r1, [pc, #124]	; (e98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x310>)
    e90e:	6809      	ldr	r1, [r1, #0]
    e910:	4a1f      	ldr	r2, [pc, #124]	; (e990 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x314>)
    e912:	2f01      	cmp	r7, #1
    e914:	f102 0314 	add.w	r3, r2, #20
    e918:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    e91c:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    e920:	6a52      	ldr	r2, [r2, #36]	; 0x24
    e922:	9204      	str	r2, [sp, #16]
    e924:	bf14      	ite	ne
    e926:	2201      	movne	r2, #1
    e928:	2200      	moveq	r2, #0
    e92a:	f88d 2001 	strb.w	r2, [sp, #1]
    e92e:	e9cd 1003 	strd	r1, r0, [sp, #12]
    e932:	4668      	mov	r0, sp
    e934:	f7f6 f87e 	bl	4a34 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e938:	2000      	movs	r0, #0
    e93a:	f001 f947 	bl	fbcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb8>
    e93e:	b007      	add	sp, #28
    e940:	4648      	mov	r0, r9
    e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e946:	f240 511f 	movw	r1, #1311	; 0x51f
    e94a:	203e      	movs	r0, #62	; 0x3e
    e94c:	f7f6 f970 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e950:	f7ff fe20 	bl	e594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e954:	b007      	add	sp, #28
    e956:	2000      	movs	r0, #0
    e958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e95c:	4001f504 	.word	0x4001f504
    e960:	200018a4 	.word	0x200018a4
    e964:	40001508 	.word	0x40001508
    e968:	40001554 	.word	0x40001554
    e96c:	40001000 	.word	0x40001000
    e970:	40001588 	.word	0x40001588
    e974:	40001788 	.word	0x40001788
    e978:	40001568 	.word	0x40001568
    e97c:	40001550 	.word	0x40001550
    e980:	40001008 	.word	0x40001008
    e984:	4001f098 	.word	0x4001f098
    e988:	40008000 	.word	0x40008000
    e98c:	40008540 	.word	0x40008540
    e990:	0000fca4 	.word	0x0000fca4

0000e994 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    e994:	4a02      	ldr	r2, [pc, #8]	; (e9a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    e996:	6c53      	ldr	r3, [r2, #68]	; 0x44
    e998:	6003      	str	r3, [r0, #0]
    e99a:	6c90      	ldr	r0, [r2, #72]	; 0x48
    e99c:	6008      	str	r0, [r1, #0]
    e99e:	4770      	bx	lr
    e9a0:	200018a4 	.word	0x200018a4

0000e9a4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    e9a4:	b410      	push	{r4}
    e9a6:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    e9aa:	4903      	ldr	r1, [pc, #12]	; (e9b8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    e9ac:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    e9b0:	6900      	ldr	r0, [r0, #16]
    e9b2:	6108      	str	r0, [r1, #16]
    e9b4:	bc10      	pop	{r4}
    e9b6:	4770      	bx	lr
    e9b8:	20001890 	.word	0x20001890

0000e9bc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    e9bc:	4914      	ldr	r1, [pc, #80]	; (ea10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    e9be:	b510      	push	{r4, lr}
    e9c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    e9c2:	4282      	cmp	r2, r0
    e9c4:	d304      	bcc.n	e9d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    e9c6:	f240 71db 	movw	r1, #2011	; 0x7db
    e9ca:	203e      	movs	r0, #62	; 0x3e
    e9cc:	f7f6 f930 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9d0:	2201      	movs	r2, #1
    e9d2:	f8df c040 	ldr.w	ip, [pc, #64]	; ea14 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    e9d6:	740a      	strb	r2, [r1, #16]
    e9d8:	6148      	str	r0, [r1, #20]
    e9da:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    e9de:	4b0e      	ldr	r3, [pc, #56]	; (ea18 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    e9e0:	681c      	ldr	r4, [r3, #0]
    e9e2:	1d64      	adds	r4, r4, #5
    e9e4:	4284      	cmp	r4, r0
    e9e6:	d306      	bcc.n	e9f6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    e9e8:	480c      	ldr	r0, [pc, #48]	; (ea1c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    e9ea:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    e9ee:	2900      	cmp	r1, #0
    e9f0:	bf08      	it	eq
    e9f2:	6102      	streq	r2, [r0, #16]
    e9f4:	bd10      	pop	{r4, pc}
    e9f6:	2200      	movs	r2, #0
    e9f8:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    e9fc:	6018      	str	r0, [r3, #0]
    e9fe:	6b88      	ldr	r0, [r1, #56]	; 0x38
    ea00:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    ea04:	6388      	str	r0, [r1, #56]	; 0x38
    ea06:	4906      	ldr	r1, [pc, #24]	; (ea20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    ea08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ea0c:	6008      	str	r0, [r1, #0]
    ea0e:	bd10      	pop	{r4, pc}
    ea10:	200018a4 	.word	0x200018a4
    ea14:	40008000 	.word	0x40008000
    ea18:	40008544 	.word	0x40008544
    ea1c:	40001000 	.word	0x40001000
    ea20:	4001f504 	.word	0x4001f504

0000ea24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ea24:	b570      	push	{r4, r5, r6, lr}
    ea26:	4c11      	ldr	r4, [pc, #68]	; (ea6c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea28:	4606      	mov	r6, r0
    ea2a:	2002      	movs	r0, #2
    ea2c:	7420      	strb	r0, [r4, #16]
    ea2e:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    ea32:	f000 f899 	bl	eb68 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    ea36:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    ea3a:	2901      	cmp	r1, #1
    ea3c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    ea40:	d00e      	beq.n	ea60 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
    ea42:	4602      	mov	r2, r0
    ea44:	4628      	mov	r0, r5
    ea46:	f004 fe13 	bl	13670 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ea4a:	4909      	ldr	r1, [pc, #36]	; (ea70 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>)
    ea4c:	6160      	str	r0, [r4, #20]
    ea4e:	2000      	movs	r0, #0
    ea50:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ea54:	6961      	ldr	r1, [r4, #20]
    ea56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ea58:	4408      	add	r0, r1
    ea5a:	4906      	ldr	r1, [pc, #24]	; (ea74 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>)
    ea5c:	6008      	str	r0, [r1, #0]
    ea5e:	bd70      	pop	{r4, r5, r6, pc}
    ea60:	4602      	mov	r2, r0
    ea62:	4633      	mov	r3, r6
    ea64:	4628      	mov	r0, r5
    ea66:	f004 fe24 	bl	136b2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ea6a:	e7ee      	b.n	ea4a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x26>
    ea6c:	200018a4 	.word	0x200018a4
    ea70:	40008000 	.word	0x40008000
    ea74:	40008544 	.word	0x40008544

0000ea78 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ea78:	b510      	push	{r4, lr}
    ea7a:	f001 facd 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ea7e:	2800      	cmp	r0, #0
    ea80:	bf08      	it	eq
    ea82:	bd10      	popeq	{r4, pc}
    ea84:	4803      	ldr	r0, [pc, #12]	; (ea94 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ea86:	6801      	ldr	r1, [r0, #0]
    ea88:	f021 0101 	bic.w	r1, r1, #1
    ea8c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ea90:	6001      	str	r1, [r0, #0]
    ea92:	bd10      	pop	{r4, pc}
    ea94:	40001774 	.word	0x40001774

0000ea98 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    ea98:	b510      	push	{r4, lr}
    ea9a:	2896      	cmp	r0, #150	; 0x96
    ea9c:	bf9e      	ittt	ls
    ea9e:	4904      	ldrls	r1, [pc, #16]	; (eab0 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    eaa0:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    eaa4:	bd10      	popls	{r4, pc}
    eaa6:	f240 11ad 	movw	r1, #429	; 0x1ad
    eaaa:	203e      	movs	r0, #62	; 0x3e
    eaac:	f7f6 f8c0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eab0:	200018a4 	.word	0x200018a4

0000eab4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eab8:	224c      	movs	r2, #76	; 0x4c
    eaba:	2100      	movs	r1, #0
    eabc:	481e      	ldr	r0, [pc, #120]	; (eb38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    eabe:	f001 fadf 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eac2:	481d      	ldr	r0, [pc, #116]	; (eb38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    eac4:	2400      	movs	r4, #0
    eac6:	2101      	movs	r1, #1
    eac8:	7244      	strb	r4, [r0, #9]
    eaca:	7284      	strb	r4, [r0, #10]
    eacc:	72c4      	strb	r4, [r0, #11]
    eace:	7301      	strb	r1, [r0, #12]
    ead0:	21ff      	movs	r1, #255	; 0xff
    ead2:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
    ead6:	215f      	movs	r1, #95	; 0x5f
    ead8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    eadc:	f001 fa55 	bl	ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    eae0:	4f16      	ldr	r7, [pc, #88]	; (eb3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    eae2:	4d17      	ldr	r5, [pc, #92]	; (eb40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    eae4:	4e17      	ldr	r6, [pc, #92]	; (eb44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    eae6:	b928      	cbnz	r0, eaf4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    eae8:	f001 fa66 	bl	ffb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    eaec:	b910      	cbnz	r0, eaf4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    eaee:	f001 fa6d 	bl	ffcc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    eaf2:	b140      	cbz	r0, eb06 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    eaf4:	2224      	movs	r2, #36	; 0x24
    eaf6:	21ff      	movs	r1, #255	; 0xff
    eaf8:	4638      	mov	r0, r7
    eafa:	f001 fac1 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eafe:	602c      	str	r4, [r5, #0]
    eb00:	6034      	str	r4, [r6, #0]
    eb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb06:	f001 faa1 	bl	1004c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    eb0a:	b910      	cbnz	r0, eb12 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    eb0c:	f001 fa94 	bl	10038 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    eb10:	b140      	cbz	r0, eb24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x70>
    eb12:	2240      	movs	r2, #64	; 0x40
    eb14:	21ff      	movs	r1, #255	; 0xff
    eb16:	4638      	mov	r0, r7
    eb18:	f001 fab2 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb1c:	602c      	str	r4, [r5, #0]
    eb1e:	6034      	str	r4, [r6, #0]
    eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb24:	2238      	movs	r2, #56	; 0x38
    eb26:	21ff      	movs	r1, #255	; 0xff
    eb28:	4638      	mov	r0, r7
    eb2a:	f001 faa9 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb2e:	602c      	str	r4, [r5, #0]
    eb30:	6034      	str	r4, [r6, #0]
    eb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb36:	0000      	.short	0x0000
    eb38:	200018a4 	.word	0x200018a4
    eb3c:	40000e00 	.word	0x40000e00
    eb40:	40000e08 	.word	0x40000e08
    eb44:	40000e10 	.word	0x40000e10

0000eb48 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    eb48:	4901      	ldr	r1, [pc, #4]	; (eb50 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    eb4a:	7008      	strb	r0, [r1, #0]
    eb4c:	4770      	bx	lr
    eb4e:	0000      	.short	0x0000
    eb50:	20000390 	.word	0x20000390

0000eb54 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    eb54:	4803      	ldr	r0, [pc, #12]	; (eb64 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    eb56:	7e01      	ldrb	r1, [r0, #24]
    eb58:	2900      	cmp	r1, #0
    eb5a:	bf06      	itte	eq
    eb5c:	7e40      	ldrbeq	r0, [r0, #25]
    eb5e:	2800      	cmpeq	r0, #0
    eb60:	2001      	movne	r0, #1
    eb62:	4770      	bx	lr
    eb64:	200018a4 	.word	0x200018a4

0000eb68 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>:
    eb68:	4814      	ldr	r0, [pc, #80]	; (ebbc <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x54>)
    eb6a:	4913      	ldr	r1, [pc, #76]	; (ebb8 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x50>)
    eb6c:	6802      	ldr	r2, [r0, #0]
    eb6e:	f002 020f 	and.w	r2, r2, #15
    eb72:	2a03      	cmp	r2, #3
    eb74:	bf04      	itt	eq
    eb76:	2001      	moveq	r0, #1
    eb78:	4770      	bxeq	lr
    eb7a:	6802      	ldr	r2, [r0, #0]
    eb7c:	f002 020f 	and.w	r2, r2, #15
    eb80:	2a04      	cmp	r2, #4
    eb82:	bf04      	itt	eq
    eb84:	2002      	moveq	r0, #2
    eb86:	4770      	bxeq	lr
    eb88:	6802      	ldr	r2, [r0, #0]
    eb8a:	f002 020f 	and.w	r2, r2, #15
    eb8e:	2a05      	cmp	r2, #5
    eb90:	d004      	beq.n	eb9c <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x34>
    eb92:	6800      	ldr	r0, [r0, #0]
    eb94:	f000 000f 	and.w	r0, r0, #15
    eb98:	2806      	cmp	r0, #6
    eb9a:	d106      	bne.n	ebaa <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x42>
    eb9c:	6808      	ldr	r0, [r1, #0]
    eb9e:	f010 0f06 	tst.w	r0, #6
    eba2:	bf0c      	ite	eq
    eba4:	2008      	moveq	r0, #8
    eba6:	2004      	movne	r0, #4
    eba8:	4770      	bx	lr
    ebaa:	b510      	push	{r4, lr}
    ebac:	f240 11ef 	movw	r1, #495	; 0x1ef
    ebb0:	203e      	movs	r0, #62	; 0x3e
    ebb2:	f7f6 f83d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebb6:	0000      	.short	0x0000
    ebb8:	40001414 	.word	0x40001414
    ebbc:	40001510 	.word	0x40001510

0000ebc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ebc0:	4801      	ldr	r0, [pc, #4]	; (ebc8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ebc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    ebc4:	4770      	bx	lr
    ebc6:	0000      	.short	0x0000
    ebc8:	200018a4 	.word	0x200018a4

0000ebcc <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    ebcc:	4801      	ldr	r0, [pc, #4]	; (ebd4 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    ebce:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    ebd2:	4770      	bx	lr
    ebd4:	200018a4 	.word	0x200018a4

0000ebd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ebd8:	4915      	ldr	r1, [pc, #84]	; (ec30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    ebda:	b510      	push	{r4, lr}
    ebdc:	6b88      	ldr	r0, [r1, #56]	; 0x38
    ebde:	4a15      	ldr	r2, [pc, #84]	; (ec34 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ebe0:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    ebe4:	6010      	str	r0, [r2, #0]
    ebe6:	2000      	movs	r0, #0
    ebe8:	6388      	str	r0, [r1, #56]	; 0x38
    ebea:	7408      	strb	r0, [r1, #16]
    ebec:	62c8      	str	r0, [r1, #44]	; 0x2c
    ebee:	6288      	str	r0, [r1, #40]	; 0x28
    ebf0:	4911      	ldr	r1, [pc, #68]	; (ec38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    ebf2:	6008      	str	r0, [r1, #0]
    ebf4:	1f09      	subs	r1, r1, #4
    ebf6:	6008      	str	r0, [r1, #0]
    ebf8:	1f09      	subs	r1, r1, #4
    ebfa:	6008      	str	r0, [r1, #0]
    ebfc:	490f      	ldr	r1, [pc, #60]	; (ec3c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ebfe:	6008      	str	r0, [r1, #0]
    ec00:	490f      	ldr	r1, [pc, #60]	; (ec40 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x68>)
    ec02:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    ec06:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ec0a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    ec0e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    ec12:	f7ff fcbf 	bl	e594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ec16:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ec1a:	2002      	movs	r0, #2
    ec1c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ec20:	f3bf 8f4f 	dsb	sy
    ec24:	f3bf 8f6f 	isb	sy
    ec28:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    ec2c:	bd10      	pop	{r4, pc}
    ec2e:	0000      	.short	0x0000
    ec30:	200018a4 	.word	0x200018a4
    ec34:	4001f508 	.word	0x4001f508
    ec38:	40008548 	.word	0x40008548
    ec3c:	4000854c 	.word	0x4000854c
    ec40:	40008000 	.word	0x40008000

0000ec44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec48:	2601      	movs	r6, #1
    ec4a:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ec4e:	2402      	movs	r4, #2
    ec50:	f04f 0800 	mov.w	r8, #0
    ec54:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    ec58:	f3bf 8f4f 	dsb	sy
    ec5c:	f3bf 8f6f 	isb	sy
    ec60:	4830      	ldr	r0, [pc, #192]	; (ed24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe0>)
    ec62:	f8c0 8000 	str.w	r8, [r0]
    ec66:	6006      	str	r6, [r0, #0]
    ec68:	f001 f9c6 	bl	fff8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ec6c:	4f2e      	ldr	r7, [pc, #184]	; (ed28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>)
    ec6e:	b118      	cbz	r0, ec78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    ec70:	6838      	ldr	r0, [r7, #0]
    ec72:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ec76:	6038      	str	r0, [r7, #0]
    ec78:	f001 f9b2 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ec7c:	b138      	cbz	r0, ec8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    ec7e:	6838      	ldr	r0, [r7, #0]
    ec80:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ec84:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    ec88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    ec8c:	6038      	str	r0, [r7, #0]
    ec8e:	f001 f9c3 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ec92:	b130      	cbz	r0, eca2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    ec94:	4825      	ldr	r0, [pc, #148]	; (ed2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ec96:	6801      	ldr	r1, [r0, #0]
    ec98:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ec9c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    eca0:	6001      	str	r1, [r0, #0]
    eca2:	4924      	ldr	r1, [pc, #144]	; (ed34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    eca4:	4822      	ldr	r0, [pc, #136]	; (ed30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    eca6:	6008      	str	r0, [r1, #0]
    eca8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ecac:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ecae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ecb2:	d004      	beq.n	ecbe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    ecb4:	4920      	ldr	r1, [pc, #128]	; (ed38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ecb6:	680a      	ldr	r2, [r1, #0]
    ecb8:	f360 4217 	bfi	r2, r0, #16, #8
    ecbc:	600a      	str	r2, [r1, #0]
    ecbe:	491f      	ldr	r1, [pc, #124]	; (ed3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ecc0:	f240 605b 	movw	r0, #1627	; 0x65b
    ecc4:	6008      	str	r0, [r1, #0]
    ecc6:	1f09      	subs	r1, r1, #4
    ecc8:	f240 1003 	movw	r0, #259	; 0x103
    eccc:	6008      	str	r0, [r1, #0]
    ecce:	1f08      	subs	r0, r1, #4
    ecd0:	6006      	str	r6, [r0, #0]
    ecd2:	491b      	ldr	r1, [pc, #108]	; (ed40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ecd4:	2003      	movs	r0, #3
    ecd6:	6008      	str	r0, [r1, #0]
    ecd8:	491a      	ldr	r1, [pc, #104]	; (ed44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ecda:	f240 1001 	movw	r0, #257	; 0x101
    ecde:	6008      	str	r0, [r1, #0]
    ece0:	4919      	ldr	r1, [pc, #100]	; (ed48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ece2:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    ece6:	4a1a      	ldr	r2, [pc, #104]	; (ed50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ece8:	4818      	ldr	r0, [pc, #96]	; (ed4c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ecea:	6010      	str	r0, [r2, #0]
    ecec:	4819      	ldr	r0, [pc, #100]	; (ed54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    ecee:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    ecf2:	3014      	adds	r0, #20
    ecf4:	2296      	movs	r2, #150	; 0x96
    ecf6:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    ecfa:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    ecfe:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    ed02:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    ed06:	2010      	movs	r0, #16
    ed08:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    ed0c:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    ed10:	4811      	ldr	r0, [pc, #68]	; (ed58 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    ed12:	6840      	ldr	r0, [r0, #4]
    ed14:	2800      	cmp	r0, #0
    ed16:	bf08      	it	eq
    ed18:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed20:	4700      	bx	r0
    ed22:	0000      	.short	0x0000
    ed24:	40001ffc 	.word	0x40001ffc
    ed28:	4000173c 	.word	0x4000173c
    ed2c:	40001740 	.word	0x40001740
    ed30:	8900002c 	.word	0x8900002c
    ed34:	40001778 	.word	0x40001778
    ed38:	4000158c 	.word	0x4000158c
    ed3c:	40001538 	.word	0x40001538
    ed40:	40001510 	.word	0x40001510
    ed44:	40001650 	.word	0x40001650
    ed48:	40001000 	.word	0x40001000
    ed4c:	0c0e0000 	.word	0x0c0e0000
    ed50:	4001f508 	.word	0x4001f508
    ed54:	20001890 	.word	0x20001890
    ed58:	20000390 	.word	0x20000390

0000ed5c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ed5c:	4901      	ldr	r1, [pc, #4]	; (ed64 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ed5e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    ed62:	4770      	bx	lr
    ed64:	200018a4 	.word	0x200018a4

0000ed68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ed68:	491e      	ldr	r1, [pc, #120]	; (ede4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    ed6a:	b510      	push	{r4, lr}
    ed6c:	6008      	str	r0, [r1, #0]
    ed6e:	491e      	ldr	r1, [pc, #120]	; (ede8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    ed70:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    ed74:	f040 0001 	orr.w	r0, r0, #1
    ed78:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    ed7c:	f010 0f01 	tst.w	r0, #1
    ed80:	bf08      	it	eq
    ed82:	bd10      	popeq	{r4, pc}
    ed84:	f010 0f02 	tst.w	r0, #2
    ed88:	d019      	beq.n	edbe <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    ed8a:	4818      	ldr	r0, [pc, #96]	; (edec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    ed8c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ed90:	f041 0101 	orr.w	r1, r1, #1
    ed94:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ed98:	4815      	ldr	r0, [pc, #84]	; (edf0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    ed9a:	6801      	ldr	r1, [r0, #0]
    ed9c:	290b      	cmp	r1, #11
    ed9e:	bf1c      	itt	ne
    eda0:	6801      	ldrne	r1, [r0, #0]
    eda2:	290a      	cmpne	r1, #10
    eda4:	d005      	beq.n	edb2 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    eda6:	6801      	ldr	r1, [r0, #0]
    eda8:	2903      	cmp	r1, #3
    edaa:	bf1e      	ittt	ne
    edac:	6800      	ldrne	r0, [r0, #0]
    edae:	2802      	cmpne	r0, #2
    edb0:	bd10      	popne	{r4, pc}
    edb2:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    edb6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    edba:	f7f5 ff39 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edbe:	f010 0f04 	tst.w	r0, #4
    edc2:	bf08      	it	eq
    edc4:	bd10      	popeq	{r4, pc}
    edc6:	480b      	ldr	r0, [pc, #44]	; (edf4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    edc8:	490b      	ldr	r1, [pc, #44]	; (edf8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    edca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    edce:	480b      	ldr	r0, [pc, #44]	; (edfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    edd0:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    edd4:	2801      	cmp	r0, #1
    edd6:	bf18      	it	ne
    edd8:	bd10      	popne	{r4, pc}
    edda:	f240 511f 	movw	r1, #1311	; 0x51f
    edde:	203e      	movs	r0, #62	; 0x3e
    ede0:	f7f5 ff26 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede4:	40001504 	.word	0x40001504
    ede8:	200018a4 	.word	0x200018a4
    edec:	40001000 	.word	0x40001000
    edf0:	40001550 	.word	0x40001550
    edf4:	40001008 	.word	0x40001008
    edf8:	4001f098 	.word	0x4001f098
    edfc:	40008000 	.word	0x40008000

0000ee00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee04:	460e      	mov	r6, r1
    ee06:	49bd      	ldr	r1, [pc, #756]	; (f0fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2fc>)
    ee08:	4680      	mov	r8, r0
    ee0a:	b087      	sub	sp, #28
    ee0c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ee10:	4614      	mov	r4, r2
    ee12:	6008      	str	r0, [r1, #0]
    ee14:	4dba      	ldr	r5, [pc, #744]	; (f100 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x300>)
    ee16:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
    ee1a:	42a0      	cmp	r0, r4
    ee1c:	bf1c      	itt	ne
    ee1e:	4610      	movne	r0, r2
    ee20:	f000 ff88 	blne	fd34 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ee24:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    ee28:	2925      	cmp	r1, #37	; 0x25
    ee2a:	bf08      	it	eq
    ee2c:	2002      	moveq	r0, #2
    ee2e:	d00f      	beq.n	ee50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    ee30:	2926      	cmp	r1, #38	; 0x26
    ee32:	bf08      	it	eq
    ee34:	201a      	moveq	r0, #26
    ee36:	d00b      	beq.n	ee50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    ee38:	2927      	cmp	r1, #39	; 0x27
    ee3a:	bf08      	it	eq
    ee3c:	2050      	moveq	r0, #80	; 0x50
    ee3e:	d007      	beq.n	ee50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    ee40:	290a      	cmp	r1, #10
    ee42:	4608      	mov	r0, r1
    ee44:	bf94      	ite	ls
    ee46:	2204      	movls	r2, #4
    ee48:	2206      	movhi	r2, #6
    ee4a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    ee4e:	b2c0      	uxtb	r0, r0
    ee50:	4aac      	ldr	r2, [pc, #688]	; (f104 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x304>)
    ee52:	6010      	str	r0, [r2, #0]
    ee54:	48ac      	ldr	r0, [pc, #688]	; (f108 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x308>)
    ee56:	6001      	str	r1, [r0, #0]
    ee58:	f8df b2b0 	ldr.w	fp, [pc, #688]	; f10c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>
    ee5c:	4fac      	ldr	r7, [pc, #688]	; (f110 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x310>)
    ee5e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ee62:	f04f 0901 	mov.w	r9, #1
    ee66:	f1b8 0f00 	cmp.w	r8, #0
    ee6a:	d007      	beq.n	ee7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    ee6c:	f1b8 0f01 	cmp.w	r8, #1
    ee70:	d066      	beq.n	ef40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x140>
    ee72:	f240 61f2 	movw	r1, #1778	; 0x6f2
    ee76:	203e      	movs	r0, #62	; 0x3e
    ee78:	f7f5 feda 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee7c:	2c01      	cmp	r4, #1
    ee7e:	bf08      	it	eq
    ee80:	2000      	moveq	r0, #0
    ee82:	d00b      	beq.n	ee9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    ee84:	2c02      	cmp	r4, #2
    ee86:	bf08      	it	eq
    ee88:	2001      	moveq	r0, #1
    ee8a:	d007      	beq.n	ee9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    ee8c:	2c04      	cmp	r4, #4
    ee8e:	bf08      	it	eq
    ee90:	2003      	moveq	r0, #3
    ee92:	d003      	beq.n	ee9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    ee94:	2c08      	cmp	r4, #8
    ee96:	bf08      	it	eq
    ee98:	2002      	moveq	r0, #2
    ee9a:	d165      	bne.n	ef68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x168>
    ee9c:	f995 2021 	ldrsb.w	r2, [r5, #33]	; 0x21
    eea0:	ab05      	add	r3, sp, #20
    eea2:	f7f2 faa7 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    eea6:	2800      	cmp	r0, #0
    eea8:	d169      	bne.n	ef7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17e>
    eeaa:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    eeae:	f000 ff3b 	bl	fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    eeb2:	f001 f8b1 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    eeb6:	b178      	cbz	r0, eed8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>
    eeb8:	4996      	ldr	r1, [pc, #600]	; (f114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x314>)
    eeba:	680a      	ldr	r2, [r1, #0]
    eebc:	0648      	lsls	r0, r1, #25
    eebe:	2c02      	cmp	r4, #2
    eec0:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    eec4:	bf0c      	ite	eq
    eec6:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    eeca:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    eece:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    eed2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    eed6:	6008      	str	r0, [r1, #0]
    eed8:	2c02      	cmp	r4, #2
    eeda:	bf08      	it	eq
    eedc:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    eee0:	d005      	beq.n	eeee <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xee>
    eee2:	2c01      	cmp	r4, #1
    eee4:	bf0c      	ite	eq
    eee6:	f640 0034 	movweq	r0, #2100	; 0x834
    eeea:	f640 2028 	movwne	r0, #2600	; 0xa28
    eeee:	f649 51f8 	movw	r1, #40440	; 0x9df8
    eef2:	4401      	add	r1, r0
    eef4:	7a68      	ldrb	r0, [r5, #9]
    eef6:	2801      	cmp	r0, #1
    eef8:	d004      	beq.n	ef04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x104>
    eefa:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    eefe:	fbb1 f1fa 	udiv	r1, r1, sl
    ef02:	1a76      	subs	r6, r6, r1
    ef04:	2800      	cmp	r0, #0
    ef06:	bf04      	itt	eq
    ef08:	4638      	moveq	r0, r7
    ef0a:	f8cb 7514 	streq.w	r7, [fp, #1300]	; 0x514
    ef0e:	f885 900b 	strb.w	r9, [r5, #11]
    ef12:	4881      	ldr	r0, [pc, #516]	; (f118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x318>)
    ef14:	6006      	str	r6, [r0, #0]
    ef16:	497d      	ldr	r1, [pc, #500]	; (f10c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>)
    ef18:	4880      	ldr	r0, [pc, #512]	; (f11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x31c>)
    ef1a:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ef1e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    ef20:	f8df b1d8 	ldr.w	fp, [pc, #472]	; f0fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2fc>
    ef24:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ef28:	63a8      	str	r0, [r5, #56]	; 0x38
    ef2a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ef2e:	f8cb 0000 	str.w	r0, [fp]
    ef32:	2010      	movs	r0, #16
    ef34:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    ef38:	f1b8 0f01 	cmp.w	r8, #1
    ef3c:	d046      	beq.n	efcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    ef3e:	e05a      	b.n	eff6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f6>
    ef40:	7aa8      	ldrb	r0, [r5, #10]
    ef42:	2801      	cmp	r0, #1
    ef44:	d124      	bne.n	ef90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    ef46:	7b68      	ldrb	r0, [r5, #13]
    ef48:	2801      	cmp	r0, #1
    ef4a:	bf08      	it	eq
    ef4c:	2000      	moveq	r0, #0
    ef4e:	d010      	beq.n	ef72 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    ef50:	2802      	cmp	r0, #2
    ef52:	bf08      	it	eq
    ef54:	2001      	moveq	r0, #1
    ef56:	d00c      	beq.n	ef72 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    ef58:	2804      	cmp	r0, #4
    ef5a:	bf08      	it	eq
    ef5c:	2003      	moveq	r0, #3
    ef5e:	d008      	beq.n	ef72 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    ef60:	2808      	cmp	r0, #8
    ef62:	bf08      	it	eq
    ef64:	2002      	moveq	r0, #2
    ef66:	d004      	beq.n	ef72 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    ef68:	f240 31f3 	movw	r1, #1011	; 0x3f3
    ef6c:	2006      	movs	r0, #6
    ef6e:	f7f5 fe5f 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef72:	f995 2021 	ldrsb.w	r2, [r5, #33]	; 0x21
    ef76:	ab05      	add	r3, sp, #20
    ef78:	f7f2 fa3c 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    ef7c:	b120      	cbz	r0, ef88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x188>
    ef7e:	f240 41a1 	movw	r1, #1185	; 0x4a1
    ef82:	203e      	movs	r0, #62	; 0x3e
    ef84:	f7f5 fe54 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef88:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    ef8c:	f000 fecc 	bl	fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    ef90:	4620      	mov	r0, r4
    ef92:	f000 feaf 	bl	fcf4 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    ef96:	f001 f83f 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ef9a:	b938      	cbnz	r0, efac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ac>
    ef9c:	f001 f82c 	bl	fff8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    efa0:	b920      	cbnz	r0, efac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ac>
    efa2:	485f      	ldr	r0, [pc, #380]	; (f120 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x320>)
    efa4:	6801      	ldr	r1, [r0, #0]
    efa6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    efaa:	6001      	str	r1, [r0, #0]
    efac:	7a69      	ldrb	r1, [r5, #9]
    efae:	2901      	cmp	r1, #1
    efb0:	d004      	beq.n	efbc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1bc>
    efb2:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    efb6:	fbb0 f0fa 	udiv	r0, r0, sl
    efba:	1a36      	subs	r6, r6, r0
    efbc:	4859      	ldr	r0, [pc, #356]	; (f124 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x324>)
    efbe:	2900      	cmp	r1, #0
    efc0:	bf08      	it	eq
    efc2:	f8cb 0514 	streq.w	r0, [fp, #1300]	; 0x514
    efc6:	2002      	movs	r0, #2
    efc8:	72e8      	strb	r0, [r5, #11]
    efca:	e7a2      	b.n	ef12 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x112>
    efcc:	4856      	ldr	r0, [pc, #344]	; (f128 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x328>)
    efce:	6800      	ldr	r0, [r0, #0]
    efd0:	b970      	cbnz	r0, eff0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
    efd2:	f014 0f0c 	tst.w	r4, #12
    efd6:	d00b      	beq.n	eff0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
    efd8:	f8c7 9304 	str.w	r9, [r7, #772]	; 0x304
    efdc:	2001      	movs	r0, #1
    efde:	f000 fdcb 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    efe2:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
    efe6:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    efea:	f885 903d 	strb.w	r9, [r5, #61]	; 0x3d
    efee:	e002      	b.n	eff6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f6>
    eff0:	2000      	movs	r0, #0
    eff2:	f000 fdc1 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    eff6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    effa:	f8cb 0000 	str.w	r0, [fp]
    effe:	7a68      	ldrb	r0, [r5, #9]
    f000:	2800      	cmp	r0, #0
    f002:	bf04      	itt	eq
    f004:	f895 003c 	ldrbeq.w	r0, [r5, #60]	; 0x3c
    f008:	f040 0002 	orreq.w	r0, r0, #2
    f00c:	d006      	beq.n	f01c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21c>
    f00e:	2801      	cmp	r0, #1
    f010:	bf04      	itt	eq
    f012:	f895 003c 	ldrbeq.w	r0, [r5, #60]	; 0x3c
    f016:	f040 0004 	orreq.w	r0, r0, #4
    f01a:	d101      	bne.n	f020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x220>
    f01c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    f020:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
    f024:	4941      	ldr	r1, [pc, #260]	; (f12c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32c>)
    f026:	f010 0f01 	tst.w	r0, #1
    f02a:	d026      	beq.n	f07a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    f02c:	f010 0f02 	tst.w	r0, #2
    f030:	d018      	beq.n	f064 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    f032:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    f036:	f040 0001 	orr.w	r0, r0, #1
    f03a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    f03e:	483c      	ldr	r0, [pc, #240]	; (f130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x330>)
    f040:	6802      	ldr	r2, [r0, #0]
    f042:	2a0b      	cmp	r2, #11
    f044:	bf1c      	itt	ne
    f046:	6802      	ldrne	r2, [r0, #0]
    f048:	2a0a      	cmpne	r2, #10
    f04a:	d005      	beq.n	f058 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x258>
    f04c:	6802      	ldr	r2, [r0, #0]
    f04e:	2a03      	cmp	r2, #3
    f050:	bf1c      	itt	ne
    f052:	6800      	ldrne	r0, [r0, #0]
    f054:	2802      	cmpne	r0, #2
    f056:	d110      	bne.n	f07a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    f058:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    f05c:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f060:	f7f5 fde6 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f064:	f010 0f04 	tst.w	r0, #4
    f068:	d007      	beq.n	f07a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    f06a:	4a28      	ldr	r2, [pc, #160]	; (f10c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>)
    f06c:	4831      	ldr	r0, [pc, #196]	; (f134 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x334>)
    f06e:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    f072:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
    f076:	2801      	cmp	r0, #1
    f078:	d00a      	beq.n	f090 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x290>
    f07a:	f8c1 904c 	str.w	r9, [r1, #76]	; 0x4c
    f07e:	482e      	ldr	r0, [pc, #184]	; (f138 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x338>)
    f080:	6800      	ldr	r0, [r0, #0]
    f082:	42b0      	cmp	r0, r6
    f084:	d309      	bcc.n	f09a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29a>
    f086:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    f08a:	203e      	movs	r0, #62	; 0x3e
    f08c:	f7f5 fdd0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f090:	f240 511f 	movw	r1, #1311	; 0x51f
    f094:	203e      	movs	r0, #62	; 0x3e
    f096:	f7f5 fdcb 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f09a:	f1b8 0f01 	cmp.w	r8, #1
    f09e:	bf08      	it	eq
    f0a0:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    f0a4:	d00d      	beq.n	f0c2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c2>
    f0a6:	2c02      	cmp	r4, #2
    f0a8:	bf08      	it	eq
    f0aa:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    f0ae:	d005      	beq.n	f0bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>
    f0b0:	2c01      	cmp	r4, #1
    f0b2:	bf0c      	ite	eq
    f0b4:	f640 0034 	movweq	r0, #2100	; 0x834
    f0b8:	f640 2028 	movwne	r0, #2600	; 0xa28
    f0bc:	f24a 0150 	movw	r1, #41040	; 0xa050
    f0c0:	4408      	add	r0, r1
    f0c2:	491e      	ldr	r1, [pc, #120]	; (f13c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x33c>)
    f0c4:	fbb0 f0fa 	udiv	r0, r0, sl
    f0c8:	f101 0228 	add.w	r2, r1, #40	; 0x28
    f0cc:	f1b8 0f01 	cmp.w	r8, #1
    f0d0:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    f0d4:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    f0d8:	6b89      	ldr	r1, [r1, #56]	; 0x38
    f0da:	9104      	str	r1, [sp, #16]
    f0dc:	bf14      	ite	ne
    f0de:	2101      	movne	r1, #1
    f0e0:	2100      	moveq	r1, #0
    f0e2:	f88d 1001 	strb.w	r1, [sp, #1]
    f0e6:	e9cd 6003 	strd	r6, r0, [sp, #12]
    f0ea:	4668      	mov	r0, sp
    f0ec:	f7f5 fca2 	bl	4a34 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f0f0:	4630      	mov	r0, r6
    f0f2:	f000 fd6b 	bl	fbcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb8>
    f0f6:	b007      	add	sp, #28
    f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0fc:	4001f504 	.word	0x4001f504
    f100:	200018a4 	.word	0x200018a4
    f104:	40001508 	.word	0x40001508
    f108:	40001554 	.word	0x40001554
    f10c:	4001f098 	.word	0x4001f098
    f110:	40001000 	.word	0x40001000
    f114:	40001588 	.word	0x40001588
    f118:	40008540 	.word	0x40008540
    f11c:	40008140 	.word	0x40008140
    f120:	40001568 	.word	0x40001568
    f124:	40001004 	.word	0x40001004
    f128:	40001788 	.word	0x40001788
    f12c:	40008000 	.word	0x40008000
    f130:	40001550 	.word	0x40001550
    f134:	40001008 	.word	0x40001008
    f138:	4000854c 	.word	0x4000854c
    f13c:	0000fca4 	.word	0x0000fca4

0000f140 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    f140:	b508      	push	{r3, lr}
    f142:	20ff      	movs	r0, #255	; 0xff
    f144:	f88d 0000 	strb.w	r0, [sp]
    f148:	480e      	ldr	r0, [pc, #56]	; (f184 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    f14a:	2100      	movs	r1, #0
    f14c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    f150:	2101      	movs	r1, #1
    f152:	6101      	str	r1, [r0, #16]
    f154:	e005      	b.n	f162 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    f156:	bf00      	nop
    f158:	f89d 1000 	ldrb.w	r1, [sp]
    f15c:	1e49      	subs	r1, r1, #1
    f15e:	f88d 1000 	strb.w	r1, [sp]
    f162:	f89d 1000 	ldrb.w	r1, [sp]
    f166:	b119      	cbz	r1, f170 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    f168:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    f16c:	2900      	cmp	r1, #0
    f16e:	d0f3      	beq.n	f158 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    f170:	f89d 0000 	ldrb.w	r0, [sp]
    f174:	2800      	cmp	r0, #0
    f176:	bf18      	it	ne
    f178:	bd08      	popne	{r3, pc}
    f17a:	f240 7172 	movw	r1, #1906	; 0x772
    f17e:	203e      	movs	r0, #62	; 0x3e
    f180:	f7f5 fd56 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f184:	40001000 	.word	0x40001000

0000f188 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    f188:	b530      	push	{r4, r5, lr}
    f18a:	b087      	sub	sp, #28
    f18c:	460d      	mov	r5, r1
    f18e:	b16a      	cbz	r2, f1ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    f190:	4c4d      	ldr	r4, [pc, #308]	; (f2c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    f192:	f012 0f01 	tst.w	r2, #1
    f196:	7260      	strb	r0, [r4, #9]
    f198:	7363      	strb	r3, [r4, #13]
    f19a:	bf18      	it	ne
    f19c:	2a01      	cmpne	r2, #1
    f19e:	d00a      	beq.n	f1b6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    f1a0:	f640 01d9 	movw	r1, #2265	; 0x8d9
    f1a4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f1a8:	f7f5 fd42 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ac:	f640 01d2 	movw	r1, #2258	; 0x8d2
    f1b0:	203e      	movs	r0, #62	; 0x3e
    f1b2:	f7f5 fd3d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1b6:	2d00      	cmp	r5, #0
    f1b8:	bf0c      	ite	eq
    f1ba:	2001      	moveq	r0, #1
    f1bc:	2002      	movne	r0, #2
    f1be:	72a0      	strb	r0, [r4, #10]
    f1c0:	7322      	strb	r2, [r4, #12]
    f1c2:	2801      	cmp	r0, #1
    f1c4:	d006      	beq.n	f1d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    f1c6:	2802      	cmp	r0, #2
    f1c8:	d02d      	beq.n	f226 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    f1ca:	f640 01ef 	movw	r1, #2287	; 0x8ef
    f1ce:	203e      	movs	r0, #62	; 0x3e
    f1d0:	f7f5 fd2e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1d4:	7ae0      	ldrb	r0, [r4, #11]
    f1d6:	2802      	cmp	r0, #2
    f1d8:	d125      	bne.n	f226 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    f1da:	2b01      	cmp	r3, #1
    f1dc:	bf08      	it	eq
    f1de:	2000      	moveq	r0, #0
    f1e0:	d010      	beq.n	f204 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    f1e2:	2b02      	cmp	r3, #2
    f1e4:	bf08      	it	eq
    f1e6:	2001      	moveq	r0, #1
    f1e8:	d00c      	beq.n	f204 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    f1ea:	2b04      	cmp	r3, #4
    f1ec:	bf08      	it	eq
    f1ee:	2003      	moveq	r0, #3
    f1f0:	d008      	beq.n	f204 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    f1f2:	2b08      	cmp	r3, #8
    f1f4:	bf08      	it	eq
    f1f6:	2002      	moveq	r0, #2
    f1f8:	d004      	beq.n	f204 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    f1fa:	f240 31f3 	movw	r1, #1011	; 0x3f3
    f1fe:	2006      	movs	r0, #6
    f200:	f7f5 fd16 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f204:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    f208:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    f20c:	ab05      	add	r3, sp, #20
    f20e:	f7f2 f8f1 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    f212:	b120      	cbz	r0, f21e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    f214:	f240 41a1 	movw	r1, #1185	; 0x4a1
    f218:	203e      	movs	r0, #62	; 0x3e
    f21a:	f7f5 fd09 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f21e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    f222:	f000 fd81 	bl	fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    f226:	f7ff fc9f 	bl	eb68 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    f22a:	7ae2      	ldrb	r2, [r4, #11]
    f22c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f230:	2a02      	cmp	r2, #2
    f232:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    f236:	d028      	beq.n	f28a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x102>
    f238:	2802      	cmp	r0, #2
    f23a:	bf08      	it	eq
    f23c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    f240:	d009      	beq.n	f256 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xce>
    f242:	2801      	cmp	r0, #1
    f244:	bf08      	it	eq
    f246:	f240 50dc 	movweq	r0, #1500	; 0x5dc
    f24a:	d004      	beq.n	f256 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xce>
    f24c:	2804      	cmp	r0, #4
    f24e:	bf0c      	ite	eq
    f250:	2000      	moveq	r0, #0
    f252:	f241 7070 	movwne	r0, #6000	; 0x1770
    f256:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f25a:	fbb0 f0f1 	udiv	r0, r0, r1
    f25e:	4410      	add	r0, r2
    f260:	491a      	ldr	r1, [pc, #104]	; (f2cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    f262:	2d01      	cmp	r5, #1
    f264:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    f268:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    f26c:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    f270:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    f272:	9104      	str	r1, [sp, #16]
    f274:	bf14      	ite	ne
    f276:	2101      	movne	r1, #1
    f278:	2100      	moveq	r1, #0
    f27a:	f88d 1001 	strb.w	r1, [sp, #1]
    f27e:	9001      	str	r0, [sp, #4]
    f280:	4668      	mov	r0, sp
    f282:	f7f5 fbd7 	bl	4a34 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    f286:	b007      	add	sp, #28
    f288:	bd30      	pop	{r4, r5, pc}
    f28a:	2801      	cmp	r0, #1
    f28c:	bf08      	it	eq
    f28e:	f641 6014 	movweq	r0, #7700	; 0x1e14
    f292:	d013      	beq.n	f2bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    f294:	2802      	cmp	r0, #2
    f296:	bf08      	it	eq
    f298:	f241 1030 	movweq	r0, #4400	; 0x1130
    f29c:	d00e      	beq.n	f2bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    f29e:	2804      	cmp	r0, #4
    f2a0:	bf08      	it	eq
    f2a2:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
    f2a6:	d009      	beq.n	f2bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    f2a8:	2808      	cmp	r0, #8
    f2aa:	bf08      	it	eq
    f2ac:	f247 303c 	movweq	r0, #29500	; 0x733c
    f2b0:	d004      	beq.n	f2bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    f2b2:	f640 318c 	movw	r1, #2956	; 0xb8c
    f2b6:	203e      	movs	r0, #62	; 0x3e
    f2b8:	f7f5 fcba 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2bc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f2c0:	fbb0 f0f1 	udiv	r0, r0, r1
    f2c4:	1a10      	subs	r0, r2, r0
    f2c6:	e7cb      	b.n	f260 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd8>
    f2c8:	200018a4 	.word	0x200018a4
    f2cc:	0000fca4 	.word	0x0000fca4

0000f2d0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    f2d0:	4901      	ldr	r1, [pc, #4]	; (f2d8 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    f2d2:	7248      	strb	r0, [r1, #9]
    f2d4:	4770      	bx	lr
    f2d6:	0000      	.short	0x0000
    f2d8:	200018a4 	.word	0x200018a4

0000f2dc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    f2dc:	4804      	ldr	r0, [pc, #16]	; (f2f0 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    f2de:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    f2e2:	f021 0110 	bic.w	r1, r1, #16
    f2e6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f2ea:	2101      	movs	r1, #1
    f2ec:	6181      	str	r1, [r0, #24]
    f2ee:	4770      	bx	lr
    f2f0:	40001000 	.word	0x40001000

0000f2f4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    f2f4:	4907      	ldr	r1, [pc, #28]	; (f314 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x20>)
    f2f6:	20ff      	movs	r0, #255	; 0xff
    f2f8:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
    f2fc:	4806      	ldr	r0, [pc, #24]	; (f318 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x24>)
    f2fe:	2100      	movs	r1, #0
    f300:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    f304:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    f308:	f041 0110 	orr.w	r1, r1, #16
    f30c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f310:	4770      	bx	lr
    f312:	0000      	.short	0x0000
    f314:	200018a4 	.word	0x200018a4
    f318:	40001000 	.word	0x40001000

0000f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    f31c:	4910      	ldr	r1, [pc, #64]	; (f360 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x44>)
    f31e:	b081      	sub	sp, #4
    f320:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    f324:	2a01      	cmp	r2, #1
    f326:	d00d      	beq.n	f344 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x28>
    f328:	490e      	ldr	r1, [pc, #56]	; (f364 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x48>)
    f32a:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
    f32e:	29ff      	cmp	r1, #255	; 0xff
    f330:	bf0d      	iteet	eq
    f332:	2000      	moveq	r0, #0
    f334:	4249      	negne	r1, r1
    f336:	7001      	strbne	r1, [r0, #0]
    f338:	b001      	addeq	sp, #4
    f33a:	bf08      	it	eq
    f33c:	4770      	bxeq	lr
    f33e:	2001      	movs	r0, #1
    f340:	b001      	add	sp, #4
    f342:	4770      	bx	lr
    f344:	4a08      	ldr	r2, [pc, #32]	; (f368 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x4c>)
    f346:	6812      	ldr	r2, [r2, #0]
    f348:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f34c:	4252      	negs	r2, r2
    f34e:	7002      	strb	r2, [r0, #0]
    f350:	2000      	movs	r0, #0
    f352:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    f356:	4805      	ldr	r0, [pc, #20]	; (f36c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x50>)
    f358:	6800      	ldr	r0, [r0, #0]
    f35a:	9000      	str	r0, [sp, #0]
    f35c:	e7ef      	b.n	f33e <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x22>
    f35e:	0000      	.short	0x0000
    f360:	40001000 	.word	0x40001000
    f364:	200018a4 	.word	0x200018a4
    f368:	40001548 	.word	0x40001548
    f36c:	4000111c 	.word	0x4000111c

0000f370 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    f370:	4a04      	ldr	r2, [pc, #16]	; (f384 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    f372:	6803      	ldr	r3, [r0, #0]
    f374:	f8c2 3016 	str.w	r3, [r2, #22]
    f378:	8880      	ldrh	r0, [r0, #4]
    f37a:	8350      	strh	r0, [r2, #26]
    f37c:	f102 0014 	add.w	r0, r2, #20
    f380:	7201      	strb	r1, [r0, #8]
    f382:	4770      	bx	lr
    f384:	20001890 	.word	0x20001890

0000f388 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    f388:	4a03      	ldr	r2, [pc, #12]	; (f398 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    f38a:	78c1      	ldrb	r1, [r0, #3]
    f38c:	6011      	str	r1, [r2, #0]
    f38e:	6800      	ldr	r0, [r0, #0]
    f390:	4902      	ldr	r1, [pc, #8]	; (f39c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    f392:	0200      	lsls	r0, r0, #8
    f394:	6008      	str	r0, [r1, #0]
    f396:	4770      	bx	lr
    f398:	40001524 	.word	0x40001524
    f39c:	4000151c 	.word	0x4000151c

0000f3a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    f3a0:	6800      	ldr	r0, [r0, #0]
    f3a2:	4902      	ldr	r1, [pc, #8]	; (f3ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    f3a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f3a8:	6008      	str	r0, [r1, #0]
    f3aa:	4770      	bx	lr
    f3ac:	4000153c 	.word	0x4000153c

0000f3b0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    f3b0:	b510      	push	{r4, lr}
    f3b2:	2200      	movs	r2, #0
    f3b4:	2901      	cmp	r1, #1
    f3b6:	d010      	beq.n	f3da <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f3b8:	2902      	cmp	r1, #2
    f3ba:	bf08      	it	eq
    f3bc:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    f3c0:	d00b      	beq.n	f3da <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f3c2:	2904      	cmp	r1, #4
    f3c4:	bf14      	ite	ne
    f3c6:	2908      	cmpne	r1, #8
    f3c8:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    f3cc:	d005      	beq.n	f3da <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    f3ce:	f44f 7115 	mov.w	r1, #596	; 0x254
    f3d2:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f3d6:	f7f5 fc2b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3da:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    f3de:	4a0b      	ldr	r2, [pc, #44]	; (f40c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x5c>)
    f3e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f3e4:	6011      	str	r1, [r2, #0]
    f3e6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    f3ea:	1d11      	adds	r1, r2, #4
    f3ec:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    f3f0:	6008      	str	r0, [r1, #0]
    f3f2:	4807      	ldr	r0, [pc, #28]	; (f410 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x60>)
    f3f4:	6801      	ldr	r1, [r0, #0]
    f3f6:	2903      	cmp	r1, #3
    f3f8:	bf1e      	ittt	ne
    f3fa:	6800      	ldrne	r0, [r0, #0]
    f3fc:	280b      	cmpne	r0, #11
    f3fe:	bd10      	popne	{r4, pc}
    f400:	f44f 711d 	mov.w	r1, #628	; 0x274
    f404:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f408:	f7f5 fc12 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f40c:	40001514 	.word	0x40001514
    f410:	40001550 	.word	0x40001550

0000f414 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f414:	b510      	push	{r4, lr}
    f416:	2200      	movs	r2, #0
    f418:	2901      	cmp	r1, #1
    f41a:	d010      	beq.n	f43e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f41c:	2902      	cmp	r1, #2
    f41e:	bf08      	it	eq
    f420:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    f424:	d00b      	beq.n	f43e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f426:	2904      	cmp	r1, #4
    f428:	bf14      	ite	ne
    f42a:	2908      	cmpne	r1, #8
    f42c:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    f430:	d005      	beq.n	f43e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    f432:	f44f 7115 	mov.w	r1, #596	; 0x254
    f436:	f04f 003e 	mov.w	r0, #62	; 0x3e
    f43a:	f7f5 fbf9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f43e:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    f442:	4a05      	ldr	r2, [pc, #20]	; (f458 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x44>)
    f444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f448:	6011      	str	r1, [r2, #0]
    f44a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    f44e:	1d11      	adds	r1, r2, #4
    f450:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    f454:	6008      	str	r0, [r1, #0]
    f456:	bd10      	pop	{r4, pc}
    f458:	40001514 	.word	0x40001514

0000f45c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    f45c:	4901      	ldr	r1, [pc, #4]	; (f464 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    f45e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    f462:	4770      	bx	lr
    f464:	200018a4 	.word	0x200018a4

0000f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f46c:	f8df 8404 	ldr.w	r8, [pc, #1028]	; f874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>
    f470:	b083      	sub	sp, #12
    f472:	2601      	movs	r6, #1
    f474:	f8c8 604c 	str.w	r6, [r8, #76]	; 0x4c
    f478:	f8d8 b14c 	ldr.w	fp, [r8, #332]	; 0x14c
    f47c:	48fe      	ldr	r0, [pc, #1016]	; (f878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    f47e:	f8d0 a000 	ldr.w	sl, [r0]
    f482:	48fe      	ldr	r0, [pc, #1016]	; (f87c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    f484:	6800      	ldr	r0, [r0, #0]
    f486:	4dfe      	ldr	r5, [pc, #1016]	; (f880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f488:	49fe      	ldr	r1, [pc, #1016]	; (f884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    f48a:	e9c5 0a11 	strd	r0, sl, [r5, #68]	; 0x44
    f48e:	7808      	ldrb	r0, [r1, #0]
    f490:	2804      	cmp	r0, #4
    f492:	d304      	bcc.n	f49e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36>
    f494:	f640 216c 	movw	r1, #2668	; 0xa6c
    f498:	203e      	movs	r0, #62	; 0x3e
    f49a:	f7f5 fbc9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f49e:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    f4a2:	4cf9      	ldr	r4, [pc, #996]	; (f888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    f4a4:	4bf9      	ldr	r3, [pc, #996]	; (f88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    f4a6:	2700      	movs	r7, #0
    f4a8:	b1f2      	cbz	r2, f4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x80>
    f4aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    f4ae:	f112 0900 	adds.w	r9, r2, #0
    f4b2:	bf18      	it	ne
    f4b4:	f04f 0901 	movne.w	r9, #1
    f4b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f4bc:	2a00      	cmp	r2, #0
    f4be:	bf18      	it	ne
    f4c0:	2201      	movne	r2, #1
    f4c2:	ea52 0c09 	orrs.w	ip, r2, r9
    f4c6:	d015      	beq.n	f4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    f4c8:	f04f 0c80 	mov.w	ip, #128	; 0x80
    f4cc:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
    f4d0:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    f4d4:	f8c4 c000 	str.w	ip, [r4]
    f4d8:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
    f4dc:	f092 0f01 	teq	r2, #1
    f4e0:	bf1c      	itt	ne
    f4e2:	b003      	addne	sp, #12
    f4e4:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4e8:	7aea      	ldrb	r2, [r5, #11]
    f4ea:	2a01      	cmp	r2, #1
    f4ec:	d07e      	beq.n	f5ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x184>
    f4ee:	2a02      	cmp	r2, #2
    f4f0:	d07d      	beq.n	f5ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x186>
    f4f2:	e0c1      	b.n	f678 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    f4f4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    f4f8:	469a      	mov	sl, r3
    f4fa:	49e1      	ldr	r1, [pc, #900]	; (f880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    f4fc:	4ae4      	ldr	r2, [pc, #912]	; (f890 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    f4fe:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    f502:	b350      	cbz	r0, f55a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    f504:	f8ca 7100 	str.w	r7, [sl, #256]	; 0x100
    f508:	f8ca 6014 	str.w	r6, [sl, #20]
    f50c:	20ff      	movs	r0, #255	; 0xff
    f50e:	9000      	str	r0, [sp, #0]
    f510:	e002      	b.n	f518 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    f512:	1e40      	subs	r0, r0, #1
    f514:	9000      	str	r0, [sp, #0]
    f516:	d01b      	beq.n	f550 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    f518:	f8da 011c 	ldr.w	r0, [sl, #284]	; 0x11c
    f51c:	2800      	cmp	r0, #0
    f51e:	9800      	ldr	r0, [sp, #0]
    f520:	d0f7      	beq.n	f512 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    f522:	b1a8      	cbz	r0, f550 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    f524:	6810      	ldr	r0, [r2, #0]
    f526:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    f52a:	4559      	cmp	r1, fp
    f52c:	bf3c      	itt	cc
    f52e:	2000      	movcc	r0, #0
    f530:	f000 fb22 	blcc	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    f534:	f885 b03f 	strb.w	fp, [r5, #63]	; 0x3f
    f538:	f8ca 711c 	str.w	r7, [sl, #284]	; 0x11c
    f53c:	f8ca 6308 	str.w	r6, [sl, #776]	; 0x308
    f540:	48d4      	ldr	r0, [pc, #848]	; (f894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    f542:	6800      	ldr	r0, [r0, #0]
    f544:	9000      	str	r0, [sp, #0]
    f546:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    f54a:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    f54e:	e007      	b.n	f560 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    f550:	f640 210f 	movw	r1, #2575	; 0xa0f
    f554:	203e      	movs	r0, #62	; 0x3e
    f556:	f7f5 fb6b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55a:	f1b9 0f00 	cmp.w	r9, #0
    f55e:	d003      	beq.n	f568 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    f560:	f1b9 0f00 	cmp.w	r9, #0
    f564:	d02b      	beq.n	f5be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    f566:	e05e      	b.n	f626 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    f568:	6810      	ldr	r0, [r2, #0]
    f56a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    f56e:	f885 003f 	strb.w	r0, [r5, #63]	; 0x3f
    f572:	f8ca 711c 	str.w	r7, [sl, #284]	; 0x11c
    f576:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
    f57a:	b14a      	cbz	r2, f590 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    f57c:	4281      	cmp	r1, r0
    f57e:	d21b      	bcs.n	f5b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    f580:	2000      	movs	r0, #0
    f582:	f000 faf9 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    f586:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    f58a:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    f58e:	e013      	b.n	f5b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    f590:	4ac1      	ldr	r2, [pc, #772]	; (f898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    f592:	6812      	ldr	r2, [r2, #0]
    f594:	b293      	uxth	r3, r2
    f596:	0c12      	lsrs	r2, r2, #16
    f598:	4288      	cmp	r0, r1
    f59a:	d303      	bcc.n	f5a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    f59c:	2b0f      	cmp	r3, #15
    f59e:	d907      	bls.n	f5b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    f5a0:	2a02      	cmp	r2, #2
    f5a2:	d205      	bcs.n	f5b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    f5a4:	2001      	movs	r0, #1
    f5a6:	f000 fae7 	bl	fb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    f5aa:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    f5ae:	e003      	b.n	f5b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    f5b0:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    f5b4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    f5b8:	48b6      	ldr	r0, [pc, #728]	; (f894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    f5ba:	6800      	ldr	r0, [r0, #0]
    f5bc:	9000      	str	r0, [sp, #0]
    f5be:	2180      	movs	r1, #128	; 0x80
    f5c0:	f8ca 1304 	str.w	r1, [sl, #772]	; 0x304
    f5c4:	f8c8 6040 	str.w	r6, [r8, #64]	; 0x40
    f5c8:	48b4      	ldr	r0, [pc, #720]	; (f89c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    f5ca:	6803      	ldr	r3, [r0, #0]
    f5cc:	1d02      	adds	r2, r0, #4
    f5ce:	6812      	ldr	r2, [r2, #0]
    f5d0:	f643 2c98 	movw	ip, #15000	; 0x3a98
    f5d4:	4463      	add	r3, ip
    f5d6:	4293      	cmp	r3, r2
    f5d8:	d21b      	bcs.n	f612 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1aa>
    f5da:	6801      	ldr	r1, [r0, #0]
    f5dc:	f242 7210 	movw	r2, #10000	; 0x2710
    f5e0:	4411      	add	r1, r2
    f5e2:	6001      	str	r1, [r0, #0]
    f5e4:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    f5e8:	49ad      	ldr	r1, [pc, #692]	; (f8a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    f5ea:	e001      	b.n	f5f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x188>
    f5ec:	e023      	b.n	f636 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ce>
    f5ee:	e028      	b.n	f642 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    f5f0:	48ac      	ldr	r0, [pc, #688]	; (f8a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    f5f2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    f5f6:	49ac      	ldr	r1, [pc, #688]	; (f8a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    f5f8:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    f5fc:	49ab      	ldr	r1, [pc, #684]	; (f8ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    f5fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    f602:	6008      	str	r0, [r1, #0]
    f604:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f606:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    f60a:	63a8      	str	r0, [r5, #56]	; 0x38
    f60c:	b003      	add	sp, #12
    f60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f612:	6007      	str	r7, [r0, #0]
    f614:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    f618:	f8ca 1308 	str.w	r1, [sl, #776]	; 0x308
    f61c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    f620:	6020      	str	r0, [r4, #0]
    f622:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    f626:	2080      	movs	r0, #128	; 0x80
    f628:	f8ca 0308 	str.w	r0, [sl, #776]	; 0x308
    f62c:	0300      	lsls	r0, r0, #12
    f62e:	6020      	str	r0, [r4, #0]
    f630:	b003      	add	sp, #12
    f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f636:	f895 c018 	ldrb.w	ip, [r5, #24]
    f63a:	f1bc 0f00 	cmp.w	ip, #0
    f63e:	d105      	bne.n	f64c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    f640:	e01a      	b.n	f678 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    f642:	f895 c019 	ldrb.w	ip, [r5, #25]
    f646:	f1bc 0f00 	cmp.w	ip, #0
    f64a:	d015      	beq.n	f678 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    f64c:	f895 c01e 	ldrb.w	ip, [r5, #30]
    f650:	f895 901f 	ldrb.w	r9, [r5, #31]
    f654:	fa06 fc0c 	lsl.w	ip, r6, ip
    f658:	fa06 f909 	lsl.w	r9, r6, r9
    f65c:	ea4c 0c09 	orr.w	ip, ip, r9
    f660:	f8c4 c000 	str.w	ip, [r4]
    f664:	f895 c020 	ldrb.w	ip, [r5, #32]
    f668:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    f66c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    f670:	f50c 4cc0 	add.w	ip, ip, #24576	; 0x6000
    f674:	f8cc 7510 	str.w	r7, [ip, #1296]	; 0x510
    f678:	4c83      	ldr	r4, [pc, #524]	; (f888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    f67a:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
    f67e:	f8c4 c000 	str.w	ip, [r4]
    f682:	461c      	mov	r4, r3
    f684:	63af      	str	r7, [r5, #56]	; 0x38
    f686:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    f68a:	f023 030d 	bic.w	r3, r3, #13
    f68e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    f692:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
    f696:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    f69a:	2b00      	cmp	r3, #0
    f69c:	bf08      	it	eq
    f69e:	f8c8 6048 	streq.w	r6, [r8, #72]	; 0x48
    f6a2:	f04f 0900 	mov.w	r9, #0
    f6a6:	7c2b      	ldrb	r3, [r5, #16]
    f6a8:	b11b      	cbz	r3, f6b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24a>
    f6aa:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
    f6ae:	2b01      	cmp	r3, #1
    f6b0:	d000      	beq.n	f6b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24c>
    f6b2:	2300      	movs	r3, #0
    f6b4:	2a01      	cmp	r2, #1
    f6b6:	d009      	beq.n	f6cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x264>
    f6b8:	2a02      	cmp	r2, #2
    f6ba:	d010      	beq.n	f6de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    f6bc:	f019 0f0b 	tst.w	r9, #11
    f6c0:	d023      	beq.n	f70a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    f6c2:	bf00      	nop
    f6c4:	f010 0f01 	tst.w	r0, #1
    f6c8:	d028      	beq.n	f71c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>
    f6ca:	e049      	b.n	f760 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
    f6cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f6d0:	2a01      	cmp	r2, #1
    f6d2:	bf14      	ite	ne
    f6d4:	f04f 0900 	movne.w	r9, #0
    f6d8:	f04f 0908 	moveq.w	r9, #8
    f6dc:	e7ee      	b.n	f6bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x254>
    f6de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f6e2:	2a01      	cmp	r2, #1
    f6e4:	bf14      	ite	ne
    f6e6:	2200      	movne	r2, #0
    f6e8:	2202      	moveq	r2, #2
    f6ea:	f8df c1c4 	ldr.w	ip, [pc, #452]	; f8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    f6ee:	f8dc c000 	ldr.w	ip, [ip]
    f6f2:	f1bc 0f01 	cmp.w	ip, #1
    f6f6:	bf14      	ite	ne
    f6f8:	f04f 0c04 	movne.w	ip, #4
    f6fc:	f04f 0c00 	moveq.w	ip, #0
    f700:	ea4c 0202 	orr.w	r2, ip, r2
    f704:	ea42 0903 	orr.w	r9, r2, r3
    f708:	e7d8      	b.n	f6bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x254>
    f70a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f70e:	2a01      	cmp	r2, #1
    f710:	bf14      	ite	ne
    f712:	2200      	movne	r2, #0
    f714:	2210      	moveq	r2, #16
    f716:	ea42 0909 	orr.w	r9, r2, r9
    f71a:	e7d3      	b.n	f6c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x25c>
    f71c:	4865      	ldr	r0, [pc, #404]	; (f8b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    f71e:	6801      	ldr	r1, [r0, #0]
    f720:	f011 0fff 	tst.w	r1, #255	; 0xff
    f724:	d003      	beq.n	f72e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c6>
    f726:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    f72a:	2901      	cmp	r1, #1
    f72c:	d000      	beq.n	f730 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c8>
    f72e:	2100      	movs	r1, #0
    f730:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    f734:	6800      	ldr	r0, [r0, #0]
    f736:	f010 0fff 	tst.w	r0, #255	; 0xff
    f73a:	d003      	beq.n	f744 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    f73c:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    f740:	2801      	cmp	r0, #1
    f742:	d000      	beq.n	f746 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2de>
    f744:	2000      	movs	r0, #0
    f746:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    f74a:	485b      	ldr	r0, [pc, #364]	; (f8b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>)
    f74c:	6800      	ldr	r0, [r0, #0]
    f74e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    f752:	f7fe fd51 	bl	e1f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f756:	2801      	cmp	r0, #1
    f758:	bf18      	it	ne
    f75a:	2000      	movne	r0, #0
    f75c:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    f760:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    f764:	2800      	cmp	r0, #0
    f766:	bf18      	it	ne
    f768:	2001      	movne	r0, #1
    f76a:	f88d 0000 	strb.w	r0, [sp]
    f76e:	4847      	ldr	r0, [pc, #284]	; (f88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    f770:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
    f774:	f8c0 710c 	str.w	r7, [r0, #268]	; 0x10c
    f778:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    f77c:	f8c0 7104 	str.w	r7, [r0, #260]	; 0x104
    f780:	f8c0 7114 	str.w	r7, [r0, #276]	; 0x114
    f784:	f8c0 7118 	str.w	r7, [r0, #280]	; 0x118
    f788:	484c      	ldr	r0, [pc, #304]	; (f8bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>)
    f78a:	6800      	ldr	r0, [r0, #0]
    f78c:	9001      	str	r0, [sp, #4]
    f78e:	4668      	mov	r0, sp
    f790:	f7f5 f942 	bl	4a18 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    f794:	2800      	cmp	r0, #0
    f796:	bf18      	it	ne
    f798:	2010      	movne	r0, #16
    f79a:	ea40 0409 	orr.w	r4, r0, r9
    f79e:	f8c8 7144 	str.w	r7, [r8, #324]	; 0x144
    f7a2:	f014 0f10 	tst.w	r4, #16
    f7a6:	d006      	beq.n	f7b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
    f7a8:	f014 0f08 	tst.w	r4, #8
    f7ac:	bf02      	ittt	eq
    f7ae:	7ae8      	ldrbeq	r0, [r5, #11]
    f7b0:	2801      	cmpeq	r0, #1
    f7b2:	f044 0420 	orreq.w	r4, r4, #32
    f7b6:	4842      	ldr	r0, [pc, #264]	; (f8c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    f7b8:	6800      	ldr	r0, [r0, #0]
    f7ba:	9001      	str	r0, [sp, #4]
    f7bc:	4841      	ldr	r0, [pc, #260]	; (f8c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    f7be:	6800      	ldr	r0, [r0, #0]
    f7c0:	62e8      	str	r0, [r5, #44]	; 0x2c
    f7c2:	f7ff f9d1 	bl	eb68 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    f7c6:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    f7ca:	7ae8      	ldrb	r0, [r5, #11]
    f7cc:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    f7d0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    f7d4:	62af      	str	r7, [r5, #40]	; 0x28
    f7d6:	2802      	cmp	r0, #2
    f7d8:	d10c      	bne.n	f7f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x38c>
    f7da:	7868      	ldrb	r0, [r5, #1]
    f7dc:	b150      	cbz	r0, f7f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x38c>
    f7de:	f8d8 1000 	ldr.w	r1, [r8]
    f7e2:	7809      	ldrb	r1, [r1, #0]
    f7e4:	4008      	ands	r0, r1
    f7e6:	7829      	ldrb	r1, [r5, #0]
    f7e8:	ea31 0000 	bics.w	r0, r1, r0
    f7ec:	bf08      	it	eq
    f7ee:	f885 6024 	strbeq.w	r6, [r5, #36]	; 0x24
    f7f2:	d001      	beq.n	f7f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x390>
    f7f4:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
    f7f8:	f014 0f02 	tst.w	r4, #2
    f7fc:	d002      	beq.n	f804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39c>
    f7fe:	4833      	ldr	r0, [pc, #204]	; (f8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>)
    f800:	6800      	ldr	r0, [r0, #0]
    f802:	62a8      	str	r0, [r5, #40]	; 0x28
    f804:	f014 0f08 	tst.w	r4, #8
    f808:	d002      	beq.n	f810 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    f80a:	4830      	ldr	r0, [pc, #192]	; (f8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>)
    f80c:	6800      	ldr	r0, [r0, #0]
    f80e:	62a8      	str	r0, [r5, #40]	; 0x28
    f810:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f8d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x468>
    f814:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    f816:	f8d9 1010 	ldr.w	r1, [r9, #16]
    f81a:	4788      	blx	r1
    f81c:	4819      	ldr	r0, [pc, #100]	; (f884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    f81e:	7800      	ldrb	r0, [r0, #0]
    f820:	f010 0f01 	tst.w	r0, #1
    f824:	d11e      	bne.n	f864 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    f826:	f8d8 0000 	ldr.w	r0, [r8]
    f82a:	7800      	ldrb	r0, [r0, #0]
    f82c:	f000 000f 	and.w	r0, r0, #15
    f830:	2807      	cmp	r0, #7
    f832:	bf28      	it	cs
    f834:	f885 7025 	strbcs.w	r7, [r5, #37]	; 0x25
    f838:	d214      	bcs.n	f864 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    f83a:	f8d8 0000 	ldr.w	r0, [r8]
    f83e:	2206      	movs	r2, #6
    f840:	f100 0109 	add.w	r1, r0, #9
    f844:	1ca8      	adds	r0, r5, #2
    f846:	f000 fc0b 	bl	10060 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    f84a:	b940      	cbnz	r0, f85e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f6>
    f84c:	7a28      	ldrb	r0, [r5, #8]
    f84e:	f8d8 1000 	ldr.w	r1, [r8]
    f852:	7809      	ldrb	r1, [r1, #0]
    f854:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    f858:	bf08      	it	eq
    f85a:	2001      	moveq	r0, #1
    f85c:	d000      	beq.n	f860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    f85e:	2000      	movs	r0, #0
    f860:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    f864:	2000      	movs	r0, #0
    f866:	9000      	str	r0, [sp, #0]
    f868:	7aa9      	ldrb	r1, [r5, #10]
    f86a:	b399      	cbz	r1, f8d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46c>
    f86c:	7b28      	ldrb	r0, [r5, #12]
    f86e:	f010 0f02 	tst.w	r0, #2
    f872:	e030      	b.n	f8d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46e>
    f874:	40008000 	.word	0x40008000
    f878:	4000854c 	.word	0x4000854c
    f87c:	4000b504 	.word	0x4000b504
    f880:	200018a4 	.word	0x200018a4
    f884:	20000390 	.word	0x20000390
    f888:	4001f508 	.word	0x4001f508
    f88c:	40001000 	.word	0x40001000
    f890:	40001548 	.word	0x40001548
    f894:	4000111c 	.word	0x4000111c
    f898:	40001574 	.word	0x40001574
    f89c:	40008540 	.word	0x40008540
    f8a0:	40008140 	.word	0x40008140
    f8a4:	4001f098 	.word	0x4001f098
    f8a8:	40001014 	.word	0x40001014
    f8ac:	4001f504 	.word	0x4001f504
    f8b0:	40001400 	.word	0x40001400
    f8b4:	40001640 	.word	0x40001640
    f8b8:	40001410 	.word	0x40001410
    f8bc:	40001118 	.word	0x40001118
    f8c0:	40008144 	.word	0x40008144
    f8c4:	40008548 	.word	0x40008548
    f8c8:	40001504 	.word	0x40001504
    f8cc:	40008544 	.word	0x40008544
    f8d0:	20001890 	.word	0x20001890
    f8d4:	e006      	b.n	f8e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47c>
    f8d6:	bf1c      	itt	ne
    f8d8:	f014 0f02 	tstne.w	r4, #2
    f8dc:	f014 0f04 	tstne.w	r4, #4
    f8e0:	d00a      	beq.n	f8f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x490>
    f8e2:	e023      	b.n	f92c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    f8e4:	4984      	ldr	r1, [pc, #528]	; (faf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x690>)
    f8e6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    f8ea:	6008      	str	r0, [r1, #0]
    f8ec:	726f      	strb	r7, [r5, #9]
    f8ee:	72af      	strb	r7, [r5, #10]
    f8f0:	72ef      	strb	r7, [r5, #11]
    f8f2:	732e      	strb	r6, [r5, #12]
    f8f4:	742f      	strb	r7, [r5, #16]
    f8f6:	e068      	b.n	f9ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    f8f8:	f010 0f10 	tst.w	r0, #16
    f8fc:	bf1c      	itt	ne
    f8fe:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    f902:	2a00      	cmpne	r2, #0
    f904:	d002      	beq.n	f90c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    f906:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    f90a:	b17a      	cbz	r2, f92c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    f90c:	f010 0f08 	tst.w	r0, #8
    f910:	bf1c      	itt	ne
    f912:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    f916:	2a00      	cmpne	r2, #0
    f918:	d108      	bne.n	f92c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    f91a:	f010 0f04 	tst.w	r0, #4
    f91e:	d002      	beq.n	f926 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4be>
    f920:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    f924:	b110      	cbz	r0, f92c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    f926:	f014 0f11 	tst.w	r4, #17
    f92a:	d002      	beq.n	f932 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ca>
    f92c:	f7fe fe32 	bl	e594 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f930:	e04b      	b.n	f9ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    f932:	2901      	cmp	r1, #1
    f934:	bf14      	ite	ne
    f936:	f04f 0801 	movne.w	r8, #1
    f93a:	f04f 0800 	moveq.w	r8, #0
    f93e:	7a68      	ldrb	r0, [r5, #9]
    f940:	2801      	cmp	r0, #1
    f942:	bf18      	it	ne
    f944:	2000      	movne	r0, #0
    f946:	9001      	str	r0, [sp, #4]
    f948:	726f      	strb	r7, [r5, #9]
    f94a:	72af      	strb	r7, [r5, #10]
    f94c:	72ef      	strb	r7, [r5, #11]
    f94e:	732e      	strb	r6, [r5, #12]
    f950:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    f954:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    f958:	2100      	movs	r1, #0
    f95a:	b1d2      	cbz	r2, f992 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    f95c:	f1b8 0f00 	cmp.w	r8, #0
    f960:	d01c      	beq.n	f99c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x534>
    f962:	f1b8 0f00 	cmp.w	r8, #0
    f966:	d007      	beq.n	f978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    f968:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    f96c:	2a01      	cmp	r2, #1
    f96e:	d023      	beq.n	f9b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
    f970:	f003 fed1 	bl	13716 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    f974:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f976:	4401      	add	r1, r0
    f978:	9801      	ldr	r0, [sp, #4]
    f97a:	b310      	cbz	r0, f9c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x55a>
    f97c:	f10a 003b 	add.w	r0, sl, #59	; 0x3b
    f980:	4288      	cmp	r0, r1
    f982:	bf98      	it	ls
    f984:	726e      	strbls	r6, [r5, #9]
    f986:	d91c      	bls.n	f9c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x55a>
    f988:	485c      	ldr	r0, [pc, #368]	; (fafc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x694>)
    f98a:	6106      	str	r6, [r0, #16]
    f98c:	2001      	movs	r0, #1
    f98e:	9000      	str	r0, [sp, #0]
    f990:	e01b      	b.n	f9ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    f992:	f240 7135 	movw	r1, #1845	; 0x735
    f996:	203e      	movs	r0, #62	; 0x3e
    f998:	f7f5 f94a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f99c:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    f9a0:	2a01      	cmp	r2, #1
    f9a2:	d004      	beq.n	f9ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x546>
    f9a4:	f003 fec5 	bl	13732 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    f9a8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f9aa:	4401      	add	r1, r0
    f9ac:	e7e4      	b.n	f978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    f9ae:	f003 fee3 	bl	13778 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    f9b2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f9b4:	4401      	add	r1, r0
    f9b6:	e7df      	b.n	f978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    f9b8:	f003 fec6 	bl	13748 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    f9bc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f9be:	4401      	add	r1, r0
    f9c0:	e7da      	b.n	f978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    f9c2:	7b6a      	ldrb	r2, [r5, #13]
    f9c4:	4640      	mov	r0, r8
    f9c6:	f7ff fa1b 	bl	ee00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    f9ca:	f014 0f01 	tst.w	r4, #1
    f9ce:	d003      	beq.n	f9d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    f9d0:	f8d9 0000 	ldr.w	r0, [r9]
    f9d4:	4780      	blx	r0
    f9d6:	e048      	b.n	fa6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x602>
    f9d8:	f014 0f02 	tst.w	r4, #2
    f9dc:	d034      	beq.n	fa48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5e0>
    f9de:	7e68      	ldrb	r0, [r5, #25]
    f9e0:	b110      	cbz	r0, f9e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x580>
    f9e2:	f1bb 0f00 	cmp.w	fp, #0
    f9e6:	d003      	beq.n	f9f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x588>
    f9e8:	f014 0f04 	tst.w	r4, #4
    f9ec:	d126      	bne.n	fa3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    f9ee:	e004      	b.n	f9fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x592>
    f9f0:	f640 21c6 	movw	r1, #2758	; 0xac6
    f9f4:	203e      	movs	r0, #62	; 0x3e
    f9f6:	f7f5 f91b 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9fa:	f000 fb0d 	bl	10018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    f9fe:	b9e8      	cbnz	r0, fa3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    fa00:	f000 fafa 	bl	fff8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    fa04:	b9d0      	cbnz	r0, fa3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    fa06:	483e      	ldr	r0, [pc, #248]	; (fb00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x698>)
    fa08:	6800      	ldr	r0, [r0, #0]
    fa0a:	f3c0 5342 	ubfx	r3, r0, #21, #3
    fa0e:	f3c0 6200 	ubfx	r2, r0, #24, #1
    fa12:	f000 010f 	and.w	r1, r0, #15
    fa16:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    fa1a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    fa1e:	b16a      	cbz	r2, fa3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    fa20:	2900      	cmp	r1, #0
    fa22:	bf1c      	itt	ne
    fa24:	f1bc 0f00 	cmpne.w	ip, #0
    fa28:	2800      	cmpne	r0, #0
    fa2a:	d107      	bne.n	fa3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    fa2c:	4835      	ldr	r0, [pc, #212]	; (fb04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x69c>)
    fa2e:	6800      	ldr	r0, [r0, #0]
    fa30:	2800      	cmp	r0, #0
    fa32:	bf18      	it	ne
    fa34:	2b03      	cmpne	r3, #3
    fa36:	bf38      	it	cc
    fa38:	f044 0404 	orrcc.w	r4, r4, #4
    fa3c:	ea26 0094 	bic.w	r0, r6, r4, lsr #2
    fa40:	f8d9 2004 	ldr.w	r2, [r9, #4]
    fa44:	9900      	ldr	r1, [sp, #0]
    fa46:	e00f      	b.n	fa68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x600>
    fa48:	f014 0f28 	tst.w	r4, #40	; 0x28
    fa4c:	d00d      	beq.n	fa6a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x602>
    fa4e:	f014 0f20 	tst.w	r4, #32
    fa52:	d104      	bne.n	fa5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5f6>
    fa54:	7e28      	ldrb	r0, [r5, #24]
    fa56:	b110      	cbz	r0, fa5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5f6>
    fa58:	f1bb 0f00 	cmp.w	fp, #0
    fa5c:	d00f      	beq.n	fa7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x616>
    fa5e:	f8d9 2008 	ldr.w	r2, [r9, #8]
    fa62:	ea26 1154 	bic.w	r1, r6, r4, lsr #5
    fa66:	9800      	ldr	r0, [sp, #0]
    fa68:	4790      	blx	r2
    fa6a:	f014 0f10 	tst.w	r4, #16
    fa6e:	bf1c      	itt	ne
    fa70:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    fa74:	4780      	blxne	r0
    fa76:	7ae8      	ldrb	r0, [r5, #11]
    fa78:	2802      	cmp	r0, #2
    fa7a:	d11d      	bne.n	fab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x650>
    fa7c:	e004      	b.n	fa88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x620>
    fa7e:	f640 21f6 	movw	r1, #2806	; 0xaf6
    fa82:	203e      	movs	r0, #62	; 0x3e
    fa84:	f7f5 f8d4 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa88:	7c28      	ldrb	r0, [r5, #16]
    fa8a:	b1a8      	cbz	r0, fab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x650>
    fa8c:	2802      	cmp	r0, #2
    fa8e:	d006      	beq.n	fa9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x636>
    fa90:	2801      	cmp	r0, #1
    fa92:	d025      	beq.n	fae0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x678>
    fa94:	f640 311a 	movw	r1, #2842	; 0xb1a
    fa98:	203e      	movs	r0, #62	; 0x3e
    fa9a:	f7f5 f8c9 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa9e:	6969      	ldr	r1, [r5, #20]
    faa0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    faa2:	4401      	add	r1, r0
    faa4:	4818      	ldr	r0, [pc, #96]	; (fb08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6a0>)
    faa6:	6001      	str	r1, [r0, #0]
    faa8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    faaa:	4918      	ldr	r1, [pc, #96]	; (fb0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6a4>)
    faac:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    fab0:	63a8      	str	r0, [r5, #56]	; 0x38
    fab2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    fab6:	6008      	str	r0, [r1, #0]
    fab8:	f014 0f10 	tst.w	r4, #16
    fabc:	bf04      	itt	eq
    fabe:	b003      	addeq	sp, #12
    fac0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fac4:	480d      	ldr	r0, [pc, #52]	; (fafc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x694>)
    fac6:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    faca:	4811      	ldr	r0, [pc, #68]	; (fb10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6a8>)
    facc:	6800      	ldr	r0, [r0, #0]
    face:	9000      	str	r0, [sp, #0]
    fad0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fad4:	2002      	movs	r0, #2
    fad6:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    fada:	b003      	add	sp, #12
    fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fae0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    fae2:	6968      	ldr	r0, [r5, #20]
    fae4:	4288      	cmp	r0, r1
    fae6:	bf84      	itt	hi
    fae8:	4907      	ldrhi	r1, [pc, #28]	; (fb08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6a0>)
    faea:	6008      	strhi	r0, [r1, #0]
    faec:	d8dc      	bhi.n	faa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x640>
    faee:	f640 311b 	movw	r1, #2843	; 0xb1b
    faf2:	203e      	movs	r0, #62	; 0x3e
    faf4:	f7f5 f89c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faf8:	4001f508 	.word	0x4001f508
    fafc:	40001000 	.word	0x40001000
    fb00:	40001450 	.word	0x40001450
    fb04:	40001454 	.word	0x40001454
    fb08:	40008544 	.word	0x40008544
    fb0c:	4001f504 	.word	0x4001f504
    fb10:	40001110 	.word	0x40001110

0000fb14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    fb14:	0083      	lsls	r3, r0, #2
    fb16:	b510      	push	{r4, lr}
    fb18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fb1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    fb20:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    fb24:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    fb28:	f891 c000 	ldrb.w	ip, [r1]
    fb2c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    fb30:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    fb34:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    fb38:	f100 0108 	add.w	r1, r0, #8
    fb3c:	f04f 0c01 	mov.w	ip, #1
    fb40:	fa0c f301 	lsl.w	r3, ip, r1
    fb44:	490b      	ldr	r1, [pc, #44]	; (fb74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x60>)
    fb46:	2a00      	cmp	r2, #0
    fb48:	bf04      	itt	eq
    fb4a:	680a      	ldreq	r2, [r1, #0]
    fb4c:	439a      	biceq	r2, r3
    fb4e:	d009      	beq.n	fb64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    fb50:	2a01      	cmp	r2, #1
    fb52:	bf04      	itt	eq
    fb54:	680a      	ldreq	r2, [r1, #0]
    fb56:	431a      	orreq	r2, r3
    fb58:	d004      	beq.n	fb64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    fb5a:	f240 4172 	movw	r1, #1138	; 0x472
    fb5e:	203e      	movs	r0, #62	; 0x3e
    fb60:	f7f5 f866 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb64:	600a      	str	r2, [r1, #0]
    fb66:	680a      	ldr	r2, [r1, #0]
    fb68:	fa0c f000 	lsl.w	r0, ip, r0
    fb6c:	4310      	orrs	r0, r2
    fb6e:	6008      	str	r0, [r1, #0]
    fb70:	bd10      	pop	{r4, pc}
    fb72:	0000      	.short	0x0000
    fb74:	40001640 	.word	0x40001640
    fb78:	4910      	ldr	r1, [pc, #64]	; (fbbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>)
    fb7a:	6809      	ldr	r1, [r1, #0]
    fb7c:	b9c9      	cbnz	r1, fbb2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x9e>
    fb7e:	4a10      	ldr	r2, [pc, #64]	; (fbc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>)
    fb80:	4910      	ldr	r1, [pc, #64]	; (fbc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb0>)
    fb82:	6813      	ldr	r3, [r2, #0]
    fb84:	b170      	cbz	r0, fba4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x90>
    fb86:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    fb8a:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    fb8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fb92:	6013      	str	r3, [r2, #0]
    fb94:	680a      	ldr	r2, [r1, #0]
    fb96:	f022 0210 	bic.w	r2, r2, #16
    fb9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    fb9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    fba2:	e005      	b.n	fbb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x9c>
    fba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fba8:	6013      	str	r3, [r2, #0]
    fbaa:	680a      	ldr	r2, [r1, #0]
    fbac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    fbb0:	600a      	str	r2, [r1, #0]
    fbb2:	4905      	ldr	r1, [pc, #20]	; (fbc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>)
    fbb4:	f881 003e 	strb.w	r0, [r1, #62]	; 0x3e
    fbb8:	4770      	bx	lr
    fbba:	0000      	.short	0x0000
    fbbc:	40001788 	.word	0x40001788
    fbc0:	4000173c 	.word	0x4000173c
    fbc4:	4000177c 	.word	0x4000177c
    fbc8:	200018a4 	.word	0x200018a4
    fbcc:	492e      	ldr	r1, [pc, #184]	; (fc88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    fbce:	7aca      	ldrb	r2, [r1, #11]
    fbd0:	2a01      	cmp	r2, #1
    fbd2:	d04a      	beq.n	fc6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x156>
    fbd4:	2a02      	cmp	r2, #2
    fbd6:	bf18      	it	ne
    fbd8:	4770      	bxne	lr
    fbda:	7e4b      	ldrb	r3, [r1, #25]
    fbdc:	2b00      	cmp	r3, #0
    fbde:	bf08      	it	eq
    fbe0:	4770      	bxeq	lr
    fbe2:	2a01      	cmp	r2, #1
    fbe4:	d045      	beq.n	fc72 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x15e>
    fbe6:	7ecb      	ldrb	r3, [r1, #27]
    fbe8:	7f4a      	ldrb	r2, [r1, #29]
    fbea:	f113 0c00 	adds.w	ip, r3, #0
    fbee:	bf18      	it	ne
    fbf0:	f04f 0c01 	movne.w	ip, #1
    fbf4:	2324      	movs	r3, #36	; 0x24
    fbf6:	4418      	add	r0, r3
    fbf8:	4b24      	ldr	r3, [pc, #144]	; (fc8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>)
    fbfa:	6018      	str	r0, [r3, #0]
    fbfc:	0210      	lsls	r0, r2, #8
    fbfe:	f08c 0201 	eor.w	r2, ip, #1
    fc02:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    fc06:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    fc0a:	f891 0020 	ldrb.w	r0, [r1, #32]
    fc0e:	0083      	lsls	r3, r0, #2
    fc10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc14:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    fc18:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    fc1c:	4b1c      	ldr	r3, [pc, #112]	; (fc90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x17c>)
    fc1e:	7f8a      	ldrb	r2, [r1, #30]
    fc20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    fc24:	00d3      	lsls	r3, r2, #3
    fc26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc2a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    fc2e:	f8df c064 	ldr.w	ip, [pc, #100]	; fc94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x180>
    fc32:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    fc36:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    fc3a:	7fc9      	ldrb	r1, [r1, #31]
    fc3c:	f8df c058 	ldr.w	ip, [pc, #88]	; fc98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x184>
    fc40:	00cb      	lsls	r3, r1, #3
    fc42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc46:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    fc4a:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    fc4e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    fc52:	2001      	movs	r0, #1
    fc54:	fa00 f202 	lsl.w	r2, r0, r2
    fc58:	4088      	lsls	r0, r1
    fc5a:	4910      	ldr	r1, [pc, #64]	; (fc9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x188>)
    fc5c:	4310      	orrs	r0, r2
    fc5e:	6008      	str	r0, [r1, #0]
    fc60:	490f      	ldr	r1, [pc, #60]	; (fca0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>)
    fc62:	2000      	movs	r0, #0
    fc64:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    fc68:	4770      	bx	lr
    fc6a:	7e0b      	ldrb	r3, [r1, #24]
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d1b8      	bne.n	fbe2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xce>
    fc70:	4770      	bx	lr
    fc72:	7e8b      	ldrb	r3, [r1, #26]
    fc74:	7f0a      	ldrb	r2, [r1, #28]
    fc76:	2b00      	cmp	r3, #0
    fc78:	bf14      	ite	ne
    fc7a:	f04f 0c01 	movne.w	ip, #1
    fc7e:	f04f 0c00 	moveq.w	ip, #0
    fc82:	2311      	movs	r3, #17
    fc84:	e7b7      	b.n	fbf6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe2>
    fc86:	0000      	.short	0x0000
    fc88:	200018a4 	.word	0x200018a4
    fc8c:	4000854c 	.word	0x4000854c
    fc90:	40006000 	.word	0x40006000
    fc94:	4000814c 	.word	0x4000814c
    fc98:	40001110 	.word	0x40001110
    fc9c:	4001f504 	.word	0x4001f504
    fca0:	40008000 	.word	0x40008000
    fca4:	00000002 	.word	0x00000002
	...
    fcbc:	40008000 	.word	0x40008000
	...
    fcd0:	40008000 	.word	0x40008000
	...
    fce0:	00000001 	.word	0x00000001
	...

0000fcf4 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    fcf4:	b510      	push	{r4, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	f000 f9a8 	bl	1004c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fcfc:	2800      	cmp	r0, #0
    fcfe:	bf08      	it	eq
    fd00:	bd10      	popeq	{r4, pc}
    fd02:	4908      	ldr	r1, [pc, #32]	; (fd24 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    fd04:	2c08      	cmp	r4, #8
    fd06:	bf18      	it	ne
    fd08:	2c04      	cmpne	r4, #4
    fd0a:	6808      	ldr	r0, [r1, #0]
    fd0c:	bf03      	ittte	eq
    fd0e:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    fd12:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    fd16:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    fd1a:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    fd1e:	6008      	str	r0, [r1, #0]
    fd20:	bd10      	pop	{r4, pc}
    fd22:	0000      	.short	0x0000
    fd24:	40001740 	.word	0x40001740

0000fd28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    fd28:	4901      	ldr	r1, [pc, #4]	; (fd30 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    fd2a:	b2c0      	uxtb	r0, r0
    fd2c:	6008      	str	r0, [r1, #0]
    fd2e:	4770      	bx	lr
    fd30:	4000150c 	.word	0x4000150c

0000fd34 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    fd34:	b510      	push	{r4, lr}
    fd36:	490b      	ldr	r1, [pc, #44]	; (fd64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30>)
    fd38:	2801      	cmp	r0, #1
    fd3a:	bf08      	it	eq
    fd3c:	2003      	moveq	r0, #3
    fd3e:	d00f      	beq.n	fd60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fd40:	2802      	cmp	r0, #2
    fd42:	bf08      	it	eq
    fd44:	2004      	moveq	r0, #4
    fd46:	d00b      	beq.n	fd60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fd48:	2804      	cmp	r0, #4
    fd4a:	bf08      	it	eq
    fd4c:	2006      	moveq	r0, #6
    fd4e:	d007      	beq.n	fd60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fd50:	2808      	cmp	r0, #8
    fd52:	bf08      	it	eq
    fd54:	2005      	moveq	r0, #5
    fd56:	d003      	beq.n	fd60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    fd58:	2164      	movs	r1, #100	; 0x64
    fd5a:	203f      	movs	r0, #63	; 0x3f
    fd5c:	f7f4 ff68 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd60:	6008      	str	r0, [r1, #0]
    fd62:	bd10      	pop	{r4, pc}
    fd64:	40001510 	.word	0x40001510

0000fd68 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    fd68:	4770      	bx	lr
    fd6a:	2100      	movs	r1, #0
    fd6c:	7081      	strb	r1, [r0, #2]
    fd6e:	7001      	strb	r1, [r0, #0]
    fd70:	7041      	strb	r1, [r0, #1]
    fd72:	4770      	bx	lr

0000fd74 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    fd74:	b570      	push	{r4, r5, r6, lr}
    fd76:	f7f1 fb57 	bl	1428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    fd7a:	4605      	mov	r5, r0
    fd7c:	2400      	movs	r4, #0
    fd7e:	e006      	b.n	fd8e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    fd80:	4620      	mov	r0, r4
    fd82:	f7f1 fb57 	bl	1434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    fd86:	f7ff fff0 	bl	fd6a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    fd8a:	1c64      	adds	r4, r4, #1
    fd8c:	b2e4      	uxtb	r4, r4
    fd8e:	42ac      	cmp	r4, r5
    fd90:	d3f6      	bcc.n	fd80 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    fd92:	bd70      	pop	{r4, r5, r6, pc}

0000fd94 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    fd94:	2000      	movs	r0, #0
    fd96:	f7f4 b885 	b.w	3ea4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    fd9a:	b510      	push	{r4, lr}
    fd9c:	f7f3 fd7a 	bl	3894 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    fda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fda4:	f000 b800 	b.w	fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000fda8 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    fda8:	0a41      	lsrs	r1, r0, #9
    fdaa:	f643 5209 	movw	r2, #15625	; 0x3d09
    fdae:	4351      	muls	r1, r2
    fdb0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fdb4:	fb10 f002 	smulbb	r0, r0, r2
    fdb8:	f500 7080 	add.w	r0, r0, #256	; 0x100
    fdbc:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    fdc0:	4770      	bx	lr

0000fdc2 <MPSL_IRQ_RADIO_Handler>:
    fdc2:	f7f2 bb73 	b.w	24ac <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    fdc6:	2800      	cmp	r0, #0
    fdc8:	db09      	blt.n	fdde <MPSL_IRQ_RADIO_Handler+0x1c>
    fdca:	f000 021f 	and.w	r2, r0, #31
    fdce:	2101      	movs	r1, #1
    fdd0:	4091      	lsls	r1, r2
    fdd2:	0940      	lsrs	r0, r0, #5
    fdd4:	0080      	lsls	r0, r0, #2
    fdd6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fdda:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fdde:	4770      	bx	lr
    fde0:	2800      	cmp	r0, #0
    fde2:	db0d      	blt.n	fe00 <MPSL_IRQ_RADIO_Handler+0x3e>
    fde4:	f000 021f 	and.w	r2, r0, #31
    fde8:	2101      	movs	r1, #1
    fdea:	4091      	lsls	r1, r2
    fdec:	0940      	lsrs	r0, r0, #5
    fdee:	0080      	lsls	r0, r0, #2
    fdf0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fdf4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fdf8:	f3bf 8f4f 	dsb	sy
    fdfc:	f3bf 8f6f 	isb	sy
    fe00:	4770      	bx	lr

0000fe02 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    fe02:	b570      	push	{r4, r5, r6, lr}
    fe04:	4602      	mov	r2, r0
    fe06:	2000      	movs	r0, #0
    fe08:	2900      	cmp	r1, #0
    fe0a:	d01d      	beq.n	fe48 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    fe0c:	fba2 0101 	umull	r0, r1, r2, r1
    fe10:	0a40      	lsrs	r0, r0, #9
    fe12:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    fe16:	0a49      	lsrs	r1, r1, #9
    fe18:	1c40      	adds	r0, r0, #1
    fe1a:	f141 0100 	adc.w	r1, r1, #0
    fe1e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    fe22:	1883      	adds	r3, r0, r2
    fe24:	f141 0100 	adc.w	r1, r1, #0
    fe28:	1c5b      	adds	r3, r3, #1
    fe2a:	f141 0400 	adc.w	r4, r1, #0
    fe2e:	2100      	movs	r1, #0
    fe30:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    fe34:	41a1      	sbcs	r1, r4
    fe36:	d203      	bcs.n	fe40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    fe38:	2170      	movs	r1, #112	; 0x70
    fe3a:	206d      	movs	r0, #109	; 0x6d
    fe3c:	f7f4 fc16 	bl	466c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fe40:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    fe44:	fbb0 f0f2 	udiv	r0, r0, r2
    fe48:	bd70      	pop	{r4, r5, r6, pc}
    fe4a:	5840      	ldr	r0, [r0, r1]
    fe4c:	2800      	cmp	r0, #0
    fe4e:	d000      	beq.n	fe52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    fe50:	2001      	movs	r0, #1
    fe52:	4770      	bx	lr
    fe54:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    fe58:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    fe5c:	f002 0201 	and.w	r2, r2, #1
    fe60:	03c0      	lsls	r0, r0, #15
    fe62:	d503      	bpl.n	fe6c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    fe64:	428a      	cmp	r2, r1
    fe66:	d101      	bne.n	fe6c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    fe68:	2001      	movs	r0, #1
    fe6a:	4770      	bx	lr
    fe6c:	2000      	movs	r0, #0
    fe6e:	4770      	bx	lr

0000fe70 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    fe70:	b510      	push	{r4, lr}
    fe72:	2101      	movs	r1, #1
    fe74:	0788      	lsls	r0, r1, #30
    fe76:	f7f4 fbb7 	bl	45e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    fe7a:	2800      	cmp	r0, #0
    fe7c:	d000      	beq.n	fe80 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    fe7e:	2001      	movs	r0, #1
    fe80:	bd10      	pop	{r4, pc}

0000fe82 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    fe82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    fe86:	2101      	movs	r1, #1
    fe88:	6001      	str	r1, [r0, #0]
    fe8a:	4770      	bx	lr

0000fe8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    fe8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fe90:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    fe94:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    fe98:	f002 0203 	and.w	r2, r2, #3
    fe9c:	03c9      	lsls	r1, r1, #15
    fe9e:	d503      	bpl.n	fea8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    fea0:	4282      	cmp	r2, r0
    fea2:	d101      	bne.n	fea8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    fea4:	2001      	movs	r0, #1
    fea6:	4770      	bx	lr
    fea8:	2000      	movs	r0, #0
    feaa:	4770      	bx	lr

0000feac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    feac:	b510      	push	{r4, lr}
    feae:	2100      	movs	r1, #0
    feb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    feb4:	f7f4 fb98 	bl	45e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    feb8:	2800      	cmp	r0, #0
    feba:	d000      	beq.n	febe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    febc:	2001      	movs	r0, #1
    febe:	bd10      	pop	{r4, pc}
    fec0:	2800      	cmp	r0, #0
    fec2:	db09      	blt.n	fed8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    fec4:	f000 021f 	and.w	r2, r0, #31
    fec8:	2101      	movs	r1, #1
    feca:	4091      	lsls	r1, r2
    fecc:	0940      	lsrs	r0, r0, #5
    fece:	0080      	lsls	r0, r0, #2
    fed0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fed4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fed8:	4770      	bx	lr
    feda:	2800      	cmp	r0, #0
    fedc:	db0d      	blt.n	fefa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    fede:	f000 021f 	and.w	r2, r0, #31
    fee2:	2101      	movs	r1, #1
    fee4:	4091      	lsls	r1, r2
    fee6:	0940      	lsrs	r0, r0, #5
    fee8:	0080      	lsls	r0, r0, #2
    feea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    feee:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fef2:	f3bf 8f4f 	dsb	sy
    fef6:	f3bf 8f6f 	isb	sy
    fefa:	4770      	bx	lr
    fefc:	00021000 	.word	0x00021000
    ff00:	000000fa 	.word	0x000000fa
    ff04:	e421772b 	.word	0xe421772b
    ff08:	62501dd0 	.word	0x62501dd0
    ff0c:	85856e1f 	.word	0x85856e1f
    ff10:	a3b3baba 	.word	0xa3b3baba
    ff14:	6e9a3c31 	.word	0x6e9a3c31
    ff18:	2800      	cmp	r0, #0
    ff1a:	db09      	blt.n	ff30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    ff1c:	f000 021f 	and.w	r2, r0, #31
    ff20:	2101      	movs	r1, #1
    ff22:	4091      	lsls	r1, r2
    ff24:	0940      	lsrs	r0, r0, #5
    ff26:	0080      	lsls	r0, r0, #2
    ff28:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ff2c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ff30:	4770      	bx	lr

0000ff32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ff32:	f3ef 8110 	mrs	r1, PRIMASK
    ff36:	b672      	cpsid	i
    ff38:	7802      	ldrb	r2, [r0, #0]
    ff3a:	2a01      	cmp	r2, #1
    ff3c:	d001      	beq.n	ff42 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ff3e:	2201      	movs	r2, #1
    ff40:	e000      	b.n	ff44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ff42:	2200      	movs	r2, #0
    ff44:	2301      	movs	r3, #1
    ff46:	7003      	strb	r3, [r0, #0]
    ff48:	b901      	cbnz	r1, ff4c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ff4a:	b662      	cpsie	i
    ff4c:	b10a      	cbz	r2, ff52 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ff4e:	2000      	movs	r0, #0
    ff50:	4770      	bx	lr
    ff52:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ff56:	4770      	bx	lr

0000ff58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ff58:	2100      	movs	r1, #0
    ff5a:	7001      	strb	r1, [r0, #0]
    ff5c:	4608      	mov	r0, r1
    ff5e:	4770      	bx	lr

0000ff60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ff60:	f3ef 8110 	mrs	r1, PRIMASK
    ff64:	b672      	cpsid	i
    ff66:	2200      	movs	r2, #0
    ff68:	7002      	strb	r2, [r0, #0]
    ff6a:	b901      	cbnz	r1, ff6e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ff6c:	b662      	cpsie	i
    ff6e:	2000      	movs	r0, #0
    ff70:	4770      	bx	lr

0000ff72 <mpsl_low_priority_process>:
    ff72:	f7f4 bc67 	b.w	4844 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ff76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ff76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ff7a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ff7e:	280f      	cmp	r0, #15
    ff80:	d001      	beq.n	ff86 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ff82:	2000      	movs	r0, #0
    ff84:	4770      	bx	lr
    ff86:	2001      	movs	r0, #1
    ff88:	4770      	bx	lr

0000ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ff8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ff8e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ff92:	280a      	cmp	r0, #10
    ff94:	d001      	beq.n	ff9a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ff96:	2000      	movs	r0, #0
    ff98:	4770      	bx	lr
    ff9a:	2001      	movs	r0, #1
    ff9c:	4770      	bx	lr

0000ff9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    ff9e:	b500      	push	{lr}
    ffa0:	f7ff fff3 	bl	ff8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ffa4:	b120      	cbz	r0, ffb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ffa6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ffaa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ffae:	b108      	cbz	r0, ffb4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    ffb0:	2000      	movs	r0, #0
    ffb2:	bd00      	pop	{pc}
    ffb4:	2001      	movs	r0, #1
    ffb6:	bd00      	pop	{pc}

0000ffb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ffb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ffbc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ffc0:	280e      	cmp	r0, #14
    ffc2:	d001      	beq.n	ffc8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ffc4:	2000      	movs	r0, #0
    ffc6:	4770      	bx	lr
    ffc8:	2001      	movs	r0, #1
    ffca:	4770      	bx	lr

0000ffcc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ffcc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ffd0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ffd4:	2810      	cmp	r0, #16
    ffd6:	d001      	beq.n	ffdc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ffd8:	2000      	movs	r0, #0
    ffda:	4770      	bx	lr
    ffdc:	2001      	movs	r0, #1
    ffde:	4770      	bx	lr

0000ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ffe0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ffe4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ffe8:	2806      	cmp	r0, #6
    ffea:	d003      	beq.n	fff4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ffec:	1c40      	adds	r0, r0, #1
    ffee:	d001      	beq.n	fff4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    fff0:	2000      	movs	r0, #0
    fff2:	4770      	bx	lr
    fff4:	2001      	movs	r0, #1
    fff6:	4770      	bx	lr

0000fff8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    fff8:	b500      	push	{lr}
    fffa:	f7ff fff1 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fffe:	b148      	cbz	r0, 10014 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10000:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10004:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10008:	2806      	cmp	r0, #6
   1000a:	d303      	bcc.n	10014 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1000c:	1c40      	adds	r0, r0, #1
   1000e:	d001      	beq.n	10014 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10010:	2001      	movs	r0, #1
   10012:	bd00      	pop	{pc}
   10014:	2000      	movs	r0, #0
   10016:	bd00      	pop	{pc}

00010018 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10018:	b500      	push	{lr}
   1001a:	f7ff ffe1 	bl	ffe0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1001e:	b138      	cbz	r0, 10030 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10020:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10024:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10028:	2806      	cmp	r0, #6
   1002a:	d303      	bcc.n	10034 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1002c:	1c40      	adds	r0, r0, #1
   1002e:	d001      	beq.n	10034 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10030:	2000      	movs	r0, #0
   10032:	bd00      	pop	{pc}
   10034:	2001      	movs	r0, #1
   10036:	bd00      	pop	{pc}

00010038 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10038:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1003c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10040:	280d      	cmp	r0, #13
   10042:	d001      	beq.n	10048 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10044:	2000      	movs	r0, #0
   10046:	4770      	bx	lr
   10048:	2001      	movs	r0, #1
   1004a:	4770      	bx	lr

0001004c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   1004c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10050:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10054:	2808      	cmp	r0, #8
   10056:	d001      	beq.n	1005c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10058:	2000      	movs	r0, #0
   1005a:	4770      	bx	lr
   1005c:	2001      	movs	r0, #1
   1005e:	4770      	bx	lr

00010060 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   10060:	b510      	push	{r4, lr}
   10062:	b91a      	cbnz	r2, 1006c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
   10064:	2000      	movs	r0, #0
   10066:	bd10      	pop	{r4, pc}
   10068:	1c40      	adds	r0, r0, #1
   1006a:	1c49      	adds	r1, r1, #1
   1006c:	1e52      	subs	r2, r2, #1
   1006e:	d003      	beq.n	10078 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
   10070:	7803      	ldrb	r3, [r0, #0]
   10072:	780c      	ldrb	r4, [r1, #0]
   10074:	42a3      	cmp	r3, r4
   10076:	d0f7      	beq.n	10068 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10078:	7800      	ldrb	r0, [r0, #0]
   1007a:	7809      	ldrb	r1, [r1, #0]
   1007c:	1a40      	subs	r0, r0, r1
   1007e:	bd10      	pop	{r4, pc}

00010080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10080:	b530      	push	{r4, r5, lr}
   10082:	4603      	mov	r3, r0
   10084:	b2cc      	uxtb	r4, r1
   10086:	e004      	b.n	10092 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
   10088:	2a00      	cmp	r2, #0
   1008a:	d014      	beq.n	100b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
   1008c:	f803 4b01 	strb.w	r4, [r3], #1
   10090:	1e52      	subs	r2, r2, #1
   10092:	079d      	lsls	r5, r3, #30
   10094:	d1f8      	bne.n	10088 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
   10096:	b2c9      	uxtb	r1, r1
   10098:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1009c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   100a0:	e001      	b.n	100a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
   100a2:	c302      	stmia	r3!, {r1}
   100a4:	1f12      	subs	r2, r2, #4
   100a6:	2a04      	cmp	r2, #4
   100a8:	d2fb      	bcs.n	100a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   100aa:	e002      	b.n	100b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
   100ac:	f803 4b01 	strb.w	r4, [r3], #1
   100b0:	1e52      	subs	r2, r2, #1
   100b2:	2a00      	cmp	r2, #0
   100b4:	d1fa      	bne.n	100ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
   100b6:	bd30      	pop	{r4, r5, pc}
   100b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100ba:	4604      	mov	r4, r0
   100bc:	f100 0003 	add.w	r0, r0, #3
   100c0:	f020 0003 	bic.w	r0, r0, #3
   100c4:	9000      	str	r0, [sp, #0]
   100c6:	460e      	mov	r6, r1
   100c8:	780b      	ldrb	r3, [r1, #0]
   100ca:	7849      	ldrb	r1, [r1, #1]
   100cc:	0015      	movs	r5, r2
   100ce:	d000      	beq.n	100d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x52>
   100d0:	2000      	movs	r0, #0
   100d2:	2200      	movs	r2, #0
   100d4:	f7f4 ffca 	bl	506c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   100d8:	9900      	ldr	r1, [sp, #0]
   100da:	462a      	mov	r2, r5
   100dc:	4408      	add	r0, r1
   100de:	9000      	str	r0, [sp, #0]
   100e0:	4631      	mov	r1, r6
   100e2:	4668      	mov	r0, sp
   100e4:	f000 f807 	bl	100f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x76>
   100e8:	9800      	ldr	r0, [sp, #0]
   100ea:	1dc0      	adds	r0, r0, #7
   100ec:	f020 0007 	bic.w	r0, r0, #7
   100f0:	9000      	str	r0, [sp, #0]
   100f2:	1b00      	subs	r0, r0, r4
   100f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100fa:	4606      	mov	r6, r0
   100fc:	460c      	mov	r4, r1
   100fe:	7808      	ldrb	r0, [r1, #0]
   10100:	7849      	ldrb	r1, [r1, #1]
   10102:	2700      	movs	r7, #0
   10104:	4408      	add	r0, r1
   10106:	4691      	mov	r9, r2
   10108:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   1010c:	463d      	mov	r5, r7
   1010e:	e00e      	b.n	1012e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xae>
   10110:	7963      	ldrb	r3, [r4, #5]
   10112:	2b03      	cmp	r3, #3
   10114:	d200      	bcs.n	10118 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x98>
   10116:	2303      	movs	r3, #3
   10118:	7922      	ldrb	r2, [r4, #4]
   1011a:	2a03      	cmp	r2, #3
   1011c:	d200      	bcs.n	10120 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa0>
   1011e:	2203      	movs	r2, #3
   10120:	78e1      	ldrb	r1, [r4, #3]
   10122:	78a0      	ldrb	r0, [r4, #2]
   10124:	f001 f871 	bl	1120a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   10128:	1c6d      	adds	r5, r5, #1
   1012a:	4407      	add	r7, r0
   1012c:	b2ed      	uxtb	r5, r5
   1012e:	4545      	cmp	r5, r8
   10130:	d3ee      	bcc.n	10110 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x90>
   10132:	6830      	ldr	r0, [r6, #0]
   10134:	1cc0      	adds	r0, r0, #3
   10136:	f020 0003 	bic.w	r0, r0, #3
   1013a:	6030      	str	r0, [r6, #0]
   1013c:	f1b9 0f00 	cmp.w	r9, #0
   10140:	d000      	beq.n	10144 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
   10142:	2000      	movs	r0, #0
   10144:	463a      	mov	r2, r7
   10146:	4641      	mov	r1, r8
   10148:	f7f5 f93e 	bl	53c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   1014c:	6831      	ldr	r1, [r6, #0]
   1014e:	4408      	add	r0, r1
   10150:	6030      	str	r0, [r6, #0]
   10152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010156 <sdc_RNG_IRQHandler>:
   10156:	f7f5 bb19 	b.w	578c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0001015a <sdc_soc_rand_vector_get>:
   1015a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1015e:	460c      	mov	r4, r1
   10160:	4605      	mov	r5, r0
   10162:	f001 f8d4 	bl	1130e <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
   10166:	4607      	mov	r7, r0
   10168:	e00c      	b.n	10184 <sdc_soc_rand_vector_get+0x2a>
   1016a:	42bc      	cmp	r4, r7
   1016c:	d201      	bcs.n	10172 <sdc_soc_rand_vector_get+0x18>
   1016e:	4620      	mov	r0, r4
   10170:	e000      	b.n	10174 <sdc_soc_rand_vector_get+0x1a>
   10172:	4638      	mov	r0, r7
   10174:	b2c6      	uxtb	r6, r0
   10176:	4631      	mov	r1, r6
   10178:	4628      	mov	r0, r5
   1017a:	f7f5 fbc9 	bl	5910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   1017e:	1ba0      	subs	r0, r4, r6
   10180:	4435      	add	r5, r6
   10182:	b284      	uxth	r4, r0
   10184:	2c00      	cmp	r4, #0
   10186:	d1f0      	bne.n	1016a <sdc_soc_rand_vector_get+0x10>
   10188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001018c <sdc_soc_rand_vector_poll>:
   1018c:	b570      	push	{r4, r5, r6, lr}
   1018e:	460c      	mov	r4, r1
   10190:	4605      	mov	r5, r0
   10192:	f7f5 fbab 	bl	58ec <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
   10196:	42a0      	cmp	r0, r4
   10198:	d300      	bcc.n	1019c <sdc_soc_rand_vector_poll+0x10>
   1019a:	4620      	mov	r0, r4
   1019c:	b2c4      	uxtb	r4, r0
   1019e:	4621      	mov	r1, r4
   101a0:	4628      	mov	r0, r5
   101a2:	f7f5 fba9 	bl	58f8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
   101a6:	2800      	cmp	r0, #0
   101a8:	d000      	beq.n	101ac <sdc_soc_rand_vector_poll+0x20>
   101aa:	4620      	mov	r0, r4
   101ac:	bd70      	pop	{r4, r5, r6, pc}

000101ae <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
   101ae:	2000      	movs	r0, #0
   101b0:	4770      	bx	lr

000101b2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
   101b2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   101b4:	4604      	mov	r4, r0
   101b6:	1d01      	adds	r1, r0, #4
   101b8:	4668      	mov	r0, sp
   101ba:	f7f7 fdd1 	bl	7d60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
   101be:	2800      	cmp	r0, #0
   101c0:	d004      	beq.n	101cc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
   101c2:	4669      	mov	r1, sp
   101c4:	4620      	mov	r0, r4
   101c6:	f000 f825 	bl	10214 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   101ca:	2001      	movs	r0, #1
   101cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000101ce <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   101ce:	b50e      	push	{r1, r2, r3, lr}
   101d0:	4601      	mov	r1, r0
   101d2:	4668      	mov	r0, sp
   101d4:	f000 f804 	bl	101e0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   101d8:	4668      	mov	r0, sp
   101da:	f7f7 fe75 	bl	7ec8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   101de:	bd0e      	pop	{r1, r2, r3, pc}

000101e0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   101e0:	880a      	ldrh	r2, [r1, #0]
   101e2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   101e6:	8002      	strh	r2, [r0, #0]
   101e8:	884a      	ldrh	r2, [r1, #2]
   101ea:	8042      	strh	r2, [r0, #2]
   101ec:	784a      	ldrb	r2, [r1, #1]
   101ee:	0993      	lsrs	r3, r2, #6
   101f0:	2200      	movs	r2, #0
   101f2:	7142      	strb	r2, [r0, #5]
   101f4:	784b      	ldrb	r3, [r1, #1]
   101f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   101fa:	b11b      	cbz	r3, 10204 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   101fc:	2b01      	cmp	r3, #1
   101fe:	d005      	beq.n	1020c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   10200:	2b02      	cmp	r3, #2
   10202:	d005      	beq.n	10210 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   10204:	7102      	strb	r2, [r0, #4]
   10206:	1d09      	adds	r1, r1, #4
   10208:	6081      	str	r1, [r0, #8]
   1020a:	4770      	bx	lr
   1020c:	2201      	movs	r2, #1
   1020e:	e7f9      	b.n	10204 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   10210:	2202      	movs	r2, #2
   10212:	e7f7      	b.n	10204 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

00010214 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   10214:	b510      	push	{r4, lr}
   10216:	460c      	mov	r4, r1
   10218:	7809      	ldrb	r1, [r1, #0]
   1021a:	7001      	strb	r1, [r0, #0]
   1021c:	7841      	ldrb	r1, [r0, #1]
   1021e:	f021 010f 	bic.w	r1, r1, #15
   10222:	7041      	strb	r1, [r0, #1]
   10224:	8822      	ldrh	r2, [r4, #0]
   10226:	f3c2 2203 	ubfx	r2, r2, #8, #4
   1022a:	4311      	orrs	r1, r2
   1022c:	7041      	strb	r1, [r0, #1]
   1022e:	78a2      	ldrb	r2, [r4, #2]
   10230:	7082      	strb	r2, [r0, #2]
   10232:	8862      	ldrh	r2, [r4, #2]
   10234:	f021 0130 	bic.w	r1, r1, #48	; 0x30
   10238:	0a12      	lsrs	r2, r2, #8
   1023a:	70c2      	strb	r2, [r0, #3]
   1023c:	7041      	strb	r1, [r0, #1]
   1023e:	7922      	ldrb	r2, [r4, #4]
   10240:	f002 0203 	and.w	r2, r2, #3
   10244:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   10248:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   1024c:	7041      	strb	r1, [r0, #1]
   1024e:	7962      	ldrb	r2, [r4, #5]
   10250:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   10254:	7041      	strb	r1, [r0, #1]
   10256:	68a1      	ldr	r1, [r4, #8]
   10258:	1d02      	adds	r2, r0, #4
   1025a:	4291      	cmp	r1, r2
   1025c:	d006      	beq.n	1026c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
   1025e:	8862      	ldrh	r2, [r4, #2]
   10260:	2afb      	cmp	r2, #251	; 0xfb
   10262:	d300      	bcc.n	10266 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
   10264:	22fb      	movs	r2, #251	; 0xfb
   10266:	1d00      	adds	r0, r0, #4
   10268:	f7f4 fb56 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1026c:	78a0      	ldrb	r0, [r4, #2]
   1026e:	1d00      	adds	r0, r0, #4
   10270:	b2c0      	uxtb	r0, r0
   10272:	bd10      	pop	{r4, pc}

00010274 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   10274:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   10278:	4604      	mov	r4, r0
   1027a:	f891 c000 	ldrb.w	ip, [r1]
   1027e:	2000      	movs	r0, #0
   10280:	260c      	movs	r6, #12
   10282:	223e      	movs	r2, #62	; 0x3e
   10284:	2512      	movs	r5, #18
   10286:	23ff      	movs	r3, #255	; 0xff
   10288:	f04f 0b14 	mov.w	fp, #20
   1028c:	f04f 0e13 	mov.w	lr, #19
   10290:	f04f 0a05 	mov.w	sl, #5
   10294:	f104 070d 	add.w	r7, r4, #13
   10298:	f04f 0911 	mov.w	r9, #17
   1029c:	f1bc 0f20 	cmp.w	ip, #32
   102a0:	d272      	bcs.n	10388 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
   102a2:	e8df f00c 	tbb	[pc, ip]
   102a6:	1071      	.short	0x1071
   102a8:	fc2e2927 	.word	0xfc2e2927
   102ac:	c0aea46d 	.word	0xc0aea46d
   102b0:	f9fafbda 	.word	0xf9fafbda
   102b4:	71f6f7f8 	.word	0x71f6f7f8
   102b8:	f5725071 	.word	0xf5725071
   102bc:	f1f2f3f4 	.word	0xf1f2f3f4
   102c0:	edeeeff0 	.word	0xedeeeff0
   102c4:	ec71      	.short	0xec71
   102c6:	7026      	strb	r6, [r4, #0]
   102c8:	7908      	ldrb	r0, [r1, #4]
   102ca:	70a0      	strb	r0, [r4, #2]
   102cc:	7948      	ldrb	r0, [r1, #5]
   102ce:	70e0      	strb	r0, [r4, #3]
   102d0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   102d4:	0a00      	lsrs	r0, r0, #8
   102d6:	7120      	strb	r0, [r4, #4]
   102d8:	79c8      	ldrb	r0, [r1, #7]
   102da:	7160      	strb	r0, [r4, #5]
   102dc:	7a08      	ldrb	r0, [r1, #8]
   102de:	71a0      	strb	r0, [r4, #6]
   102e0:	8908      	ldrh	r0, [r1, #8]
   102e2:	0a00      	lsrs	r0, r0, #8
   102e4:	71e0      	strb	r0, [r4, #7]
   102e6:	7a88      	ldrb	r0, [r1, #10]
   102e8:	7220      	strb	r0, [r4, #8]
   102ea:	8948      	ldrh	r0, [r1, #10]
   102ec:	0a00      	lsrs	r0, r0, #8
   102ee:	7260      	strb	r0, [r4, #9]
   102f0:	2008      	movs	r0, #8
   102f2:	e153      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   102f4:	2010      	movs	r0, #16
   102f6:	e000      	b.n	102fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
   102f8:	201a      	movs	r0, #26
   102fa:	7020      	strb	r0, [r4, #0]
   102fc:	7908      	ldrb	r0, [r1, #4]
   102fe:	70a0      	strb	r0, [r4, #2]
   10300:	e154      	b.n	105ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
   10302:	7022      	strb	r2, [r4, #0]
   10304:	2002      	movs	r0, #2
   10306:	70a0      	strb	r0, [r4, #2]
   10308:	7908      	ldrb	r0, [r1, #4]
   1030a:	70e0      	strb	r0, [r4, #3]
   1030c:	7b88      	ldrb	r0, [r1, #14]
   1030e:	7120      	strb	r0, [r4, #4]
   10310:	7948      	ldrb	r0, [r1, #5]
   10312:	7160      	strb	r0, [r4, #5]
   10314:	f8d1 0006 	ldr.w	r0, [r1, #6]
   10318:	f8c4 0006 	str.w	r0, [r4, #6]
   1031c:	8948      	ldrh	r0, [r1, #10]
   1031e:	8160      	strh	r0, [r4, #10]
   10320:	7b08      	ldrb	r0, [r1, #12]
   10322:	7320      	strb	r0, [r4, #12]
   10324:	7b0e      	ldrb	r6, [r1, #12]
   10326:	1d0d      	adds	r5, r1, #4
   10328:	2e1f      	cmp	r6, #31
   1032a:	d300      	bcc.n	1032e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
   1032c:	261f      	movs	r6, #31
   1032e:	4638      	mov	r0, r7
   10330:	4632      	mov	r2, r6
   10332:	f105 010b 	add.w	r1, r5, #11
   10336:	f7f4 faef 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1033a:	360d      	adds	r6, #13
   1033c:	7a69      	ldrb	r1, [r5, #9]
   1033e:	55a1      	strb	r1, [r4, r6]
   10340:	1e76      	subs	r6, r6, #1
   10342:	b2f0      	uxtb	r0, r6
   10344:	e128      	b.n	10598 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
   10346:	7022      	strb	r2, [r4, #0]
   10348:	200b      	movs	r0, #11
   1034a:	70a0      	strb	r0, [r4, #2]
   1034c:	7908      	ldrb	r0, [r1, #4]
   1034e:	70e0      	strb	r0, [r4, #3]
   10350:	7948      	ldrb	r0, [r1, #5]
   10352:	7120      	strb	r0, [r4, #4]
   10354:	7988      	ldrb	r0, [r1, #6]
   10356:	7160      	strb	r0, [r4, #5]
   10358:	f8d1 0007 	ldr.w	r0, [r1, #7]
   1035c:	f8c4 0006 	str.w	r0, [r4, #6]
   10360:	f8b1 000b 	ldrh.w	r0, [r1, #11]
   10364:	8160      	strh	r0, [r4, #10]
   10366:	7b48      	ldrb	r0, [r1, #13]
   10368:	7320      	strb	r0, [r4, #12]
   1036a:	f8d1 000e 	ldr.w	r0, [r1, #14]
   1036e:	f8c4 000d 	str.w	r0, [r4, #13]
   10372:	8a48      	ldrh	r0, [r1, #18]
   10374:	f8a4 0011 	strh.w	r0, [r4, #17]
   10378:	7d08      	ldrb	r0, [r1, #20]
   1037a:	74e0      	strb	r0, [r4, #19]
   1037c:	4628      	mov	r0, r5
   1037e:	e10d      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   10380:	4620      	mov	r0, r4
   10382:	f000 f98d 	bl	106a0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
   10386:	e107      	b.n	10598 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
   10388:	e10b      	b.n	105a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
   1038a:	7022      	strb	r2, [r4, #0]
   1038c:	200a      	movs	r0, #10
   1038e:	70a0      	strb	r0, [r4, #2]
   10390:	f811 0f04 	ldrb.w	r0, [r1, #4]!
   10394:	70e0      	strb	r0, [r4, #3]
   10396:	7888      	ldrb	r0, [r1, #2]
   10398:	7120      	strb	r0, [r4, #4]
   1039a:	8848      	ldrh	r0, [r1, #2]
   1039c:	0a00      	lsrs	r0, r0, #8
   1039e:	7160      	strb	r0, [r4, #5]
   103a0:	7908      	ldrb	r0, [r1, #4]
   103a2:	71a0      	strb	r0, [r4, #6]
   103a4:	7948      	ldrb	r0, [r1, #5]
   103a6:	71e0      	strb	r0, [r4, #7]
   103a8:	f8d1 0006 	ldr.w	r0, [r1, #6]
   103ac:	60a0      	str	r0, [r4, #8]
   103ae:	8948      	ldrh	r0, [r1, #10]
   103b0:	81a0      	strh	r0, [r4, #12]
   103b2:	68c8      	ldr	r0, [r1, #12]
   103b4:	f8c4 000e 	str.w	r0, [r4, #14]
   103b8:	8a08      	ldrh	r0, [r1, #16]
   103ba:	8260      	strh	r0, [r4, #18]
   103bc:	f8d1 0012 	ldr.w	r0, [r1, #18]
   103c0:	6160      	str	r0, [r4, #20]
   103c2:	8ac8      	ldrh	r0, [r1, #22]
   103c4:	8320      	strh	r0, [r4, #24]
   103c6:	7e08      	ldrb	r0, [r1, #24]
   103c8:	76a0      	strb	r0, [r4, #26]
   103ca:	8b08      	ldrh	r0, [r1, #24]
   103cc:	0a00      	lsrs	r0, r0, #8
   103ce:	76e0      	strb	r0, [r4, #27]
   103d0:	7e88      	ldrb	r0, [r1, #26]
   103d2:	7720      	strb	r0, [r4, #28]
   103d4:	8b48      	ldrh	r0, [r1, #26]
   103d6:	0a00      	lsrs	r0, r0, #8
   103d8:	7760      	strb	r0, [r4, #29]
   103da:	7f08      	ldrb	r0, [r1, #28]
   103dc:	77a0      	strb	r0, [r4, #30]
   103de:	8b88      	ldrh	r0, [r1, #28]
   103e0:	0a00      	lsrs	r0, r0, #8
   103e2:	77e0      	strb	r0, [r4, #31]
   103e4:	7f88      	ldrb	r0, [r1, #30]
   103e6:	f884 0020 	strb.w	r0, [r4, #32]
   103ea:	201f      	movs	r0, #31
   103ec:	e0d6      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   103ee:	7022      	strb	r2, [r4, #0]
   103f0:	f884 b002 	strb.w	fp, [r4, #2]
   103f4:	7908      	ldrb	r0, [r1, #4]
   103f6:	70e0      	strb	r0, [r4, #3]
   103f8:	8888      	ldrh	r0, [r1, #4]
   103fa:	0a00      	lsrs	r0, r0, #8
   103fc:	7120      	strb	r0, [r4, #4]
   103fe:	7988      	ldrb	r0, [r1, #6]
   10400:	e0ed      	b.n	105de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   10402:	7022      	strb	r2, [r4, #0]
   10404:	2004      	movs	r0, #4
   10406:	70a0      	strb	r0, [r4, #2]
   10408:	7908      	ldrb	r0, [r1, #4]
   1040a:	70e0      	strb	r0, [r4, #3]
   1040c:	7988      	ldrb	r0, [r1, #6]
   1040e:	7120      	strb	r0, [r4, #4]
   10410:	88c8      	ldrh	r0, [r1, #6]
   10412:	0a00      	lsrs	r0, r0, #8
   10414:	7160      	strb	r0, [r4, #5]
   10416:	6888      	ldr	r0, [r1, #8]
   10418:	f8c4 0006 	str.w	r0, [r4, #6]
   1041c:	68c8      	ldr	r0, [r1, #12]
   1041e:	f8c4 000a 	str.w	r0, [r4, #10]
   10422:	200c      	movs	r0, #12
   10424:	e0ba      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   10426:	7022      	strb	r2, [r4, #0]
   10428:	2003      	movs	r0, #3
   1042a:	70a0      	strb	r0, [r4, #2]
   1042c:	7908      	ldrb	r0, [r1, #4]
   1042e:	70e0      	strb	r0, [r4, #3]
   10430:	7988      	ldrb	r0, [r1, #6]
   10432:	7120      	strb	r0, [r4, #4]
   10434:	88c8      	ldrh	r0, [r1, #6]
   10436:	0a00      	lsrs	r0, r0, #8
   10438:	7160      	strb	r0, [r4, #5]
   1043a:	7a08      	ldrb	r0, [r1, #8]
   1043c:	71a0      	strb	r0, [r4, #6]
   1043e:	8908      	ldrh	r0, [r1, #8]
   10440:	0a00      	lsrs	r0, r0, #8
   10442:	71e0      	strb	r0, [r4, #7]
   10444:	7a88      	ldrb	r0, [r1, #10]
   10446:	7220      	strb	r0, [r4, #8]
   10448:	8948      	ldrh	r0, [r1, #10]
   1044a:	0a00      	lsrs	r0, r0, #8
   1044c:	7260      	strb	r0, [r4, #9]
   1044e:	7b08      	ldrb	r0, [r1, #12]
   10450:	72a0      	strb	r0, [r4, #10]
   10452:	8988      	ldrh	r0, [r1, #12]
   10454:	0a00      	lsrs	r0, r0, #8
   10456:	72e0      	strb	r0, [r4, #11]
   10458:	e120      	b.n	1069c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
   1045a:	7022      	strb	r2, [r4, #0]
   1045c:	f884 a002 	strb.w	sl, [r4, #2]
   10460:	7908      	ldrb	r0, [r1, #4]
   10462:	70e0      	strb	r0, [r4, #3]
   10464:	8888      	ldrh	r0, [r1, #4]
   10466:	0a00      	lsrs	r0, r0, #8
   10468:	7120      	strb	r0, [r4, #4]
   1046a:	f8d1 0006 	ldr.w	r0, [r1, #6]
   1046e:	f8c4 0005 	str.w	r0, [r4, #5]
   10472:	f8d1 000a 	ldr.w	r0, [r1, #10]
   10476:	f8c4 0009 	str.w	r0, [r4, #9]
   1047a:	89c8      	ldrh	r0, [r1, #14]
   1047c:	e010      	b.n	104a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
   1047e:	e0fa      	b.n	10676 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
   10480:	e0ce      	b.n	10620 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
   10482:	e0af      	b.n	105e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
   10484:	e0da      	b.n	1063c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
   10486:	e0e8      	b.n	1065a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
   10488:	e0a1      	b.n	105ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
   1048a:	e08c      	b.n	105a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
   1048c:	e090      	b.n	105b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
   1048e:	e033      	b.n	104f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
   10490:	e02f      	b.n	104f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
   10492:	e043      	b.n	1051c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
   10494:	e03d      	b.n	10512 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
   10496:	e021      	b.n	104dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
   10498:	e015      	b.n	104c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
   1049a:	e008      	b.n	104ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
   1049c:	e004      	b.n	104a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   1049e:	e046      	b.n	1052e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
   104a0:	f8a4 000d 	strh.w	r0, [r4, #13]
   104a4:	200d      	movs	r0, #13
   104a6:	e079      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   104a8:	f884 9000 	strb.w	r9, [r4]
   104ac:	e038      	b.n	10520 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
   104ae:	f884 a000 	strb.w	sl, [r4]
   104b2:	7908      	ldrb	r0, [r1, #4]
   104b4:	70a0      	strb	r0, [r4, #2]
   104b6:	7948      	ldrb	r0, [r1, #5]
   104b8:	70e0      	strb	r0, [r4, #3]
   104ba:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   104be:	0a00      	lsrs	r0, r0, #8
   104c0:	7120      	strb	r0, [r4, #4]
   104c2:	79c8      	ldrb	r0, [r1, #7]
   104c4:	e08b      	b.n	105de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   104c6:	2008      	movs	r0, #8
   104c8:	7020      	strb	r0, [r4, #0]
   104ca:	7908      	ldrb	r0, [r1, #4]
   104cc:	70a0      	strb	r0, [r4, #2]
   104ce:	7988      	ldrb	r0, [r1, #6]
   104d0:	70e0      	strb	r0, [r4, #3]
   104d2:	88c8      	ldrh	r0, [r1, #6]
   104d4:	0a00      	lsrs	r0, r0, #8
   104d6:	7120      	strb	r0, [r4, #4]
   104d8:	7a08      	ldrb	r0, [r1, #8]
   104da:	e080      	b.n	105de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   104dc:	2030      	movs	r0, #48	; 0x30
   104de:	7020      	strb	r0, [r4, #0]
   104e0:	7908      	ldrb	r0, [r1, #4]
   104e2:	70a0      	strb	r0, [r4, #2]
   104e4:	7988      	ldrb	r0, [r1, #6]
   104e6:	70e0      	strb	r0, [r4, #3]
   104e8:	88c8      	ldrh	r0, [r1, #6]
   104ea:	0a00      	lsrs	r0, r0, #8
   104ec:	7120      	strb	r0, [r4, #4]
   104ee:	2003      	movs	r0, #3
   104f0:	e054      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   104f2:	7022      	strb	r2, [r4, #0]
   104f4:	2007      	movs	r0, #7
   104f6:	e077      	b.n	105e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
   104f8:	7022      	strb	r2, [r4, #0]
   104fa:	70a6      	strb	r6, [r4, #2]
   104fc:	7908      	ldrb	r0, [r1, #4]
   104fe:	70e0      	strb	r0, [r4, #3]
   10500:	7988      	ldrb	r0, [r1, #6]
   10502:	7120      	strb	r0, [r4, #4]
   10504:	88c8      	ldrh	r0, [r1, #6]
   10506:	0a00      	lsrs	r0, r0, #8
   10508:	7160      	strb	r0, [r4, #5]
   1050a:	7a08      	ldrb	r0, [r1, #8]
   1050c:	71a0      	strb	r0, [r4, #6]
   1050e:	7a48      	ldrb	r0, [r1, #9]
   10510:	e05a      	b.n	105c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
   10512:	4620      	mov	r0, r4
   10514:	1d09      	adds	r1, r1, #4
   10516:	f7f4 fcbd 	bl	4e94 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
   1051a:	e03d      	b.n	10598 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
   1051c:	2057      	movs	r0, #87	; 0x57
   1051e:	7020      	strb	r0, [r4, #0]
   10520:	7908      	ldrb	r0, [r1, #4]
   10522:	70a0      	strb	r0, [r4, #2]
   10524:	8888      	ldrh	r0, [r1, #4]
   10526:	0a00      	lsrs	r0, r0, #8
   10528:	70e0      	strb	r0, [r4, #3]
   1052a:	2002      	movs	r0, #2
   1052c:	e036      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   1052e:	7022      	strb	r2, [r4, #0]
   10530:	220d      	movs	r2, #13
   10532:	70a2      	strb	r2, [r4, #2]
   10534:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   10538:	70e2      	strb	r2, [r4, #3]
   1053a:	894a      	ldrh	r2, [r1, #10]
   1053c:	80a2      	strh	r2, [r4, #4]
   1053e:	784a      	ldrb	r2, [r1, #1]
   10540:	71a2      	strb	r2, [r4, #6]
   10542:	f8d1 2002 	ldr.w	r2, [r1, #2]
   10546:	f8c4 2007 	str.w	r2, [r4, #7]
   1054a:	88ca      	ldrh	r2, [r1, #6]
   1054c:	f8a4 200b 	strh.w	r2, [r4, #11]
   10550:	7b0a      	ldrb	r2, [r1, #12]
   10552:	4620      	mov	r0, r4
   10554:	7362      	strb	r2, [r4, #13]
   10556:	7b4a      	ldrb	r2, [r1, #13]
   10558:	7382      	strb	r2, [r0, #14]
   1055a:	7b8a      	ldrb	r2, [r1, #14]
   1055c:	73c2      	strb	r2, [r0, #15]
   1055e:	7eca      	ldrb	r2, [r1, #27]
   10560:	7402      	strb	r2, [r0, #16]
   10562:	7a4a      	ldrb	r2, [r1, #9]
   10564:	7442      	strb	r2, [r0, #17]
   10566:	8a4a      	ldrh	r2, [r1, #18]
   10568:	8242      	strh	r2, [r0, #18]
   1056a:	7d0a      	ldrb	r2, [r1, #20]
   1056c:	7502      	strb	r2, [r0, #20]
   1056e:	f8d1 2015 	ldr.w	r2, [r1, #21]
   10572:	f8c0 2015 	str.w	r2, [r0, #21]
   10576:	f8b1 2019 	ldrh.w	r2, [r1, #25]
   1057a:	f8a0 2019 	strh.w	r2, [r0, #25]
   1057e:	7a0a      	ldrb	r2, [r1, #8]
   10580:	76c2      	strb	r2, [r0, #27]
   10582:	7a0d      	ldrb	r5, [r1, #8]
   10584:	2de5      	cmp	r5, #229	; 0xe5
   10586:	d300      	bcc.n	1058a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
   10588:	25e5      	movs	r5, #229	; 0xe5
   1058a:	462a      	mov	r2, r5
   1058c:	301c      	adds	r0, #28
   1058e:	311d      	adds	r1, #29
   10590:	f7f4 f9c2 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10594:	351a      	adds	r5, #26
   10596:	b2e8      	uxtb	r0, r5
   10598:	2800      	cmp	r0, #0
   1059a:	d002      	beq.n	105a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
   1059c:	7060      	strb	r0, [r4, #1]
   1059e:	1c80      	adds	r0, r0, #2
   105a0:	b2c0      	uxtb	r0, r0
   105a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   105a6:	7022      	strb	r2, [r4, #0]
   105a8:	f884 9002 	strb.w	r9, [r4, #2]
   105ac:	2001      	movs	r0, #1
   105ae:	e7f5      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   105b0:	7022      	strb	r2, [r4, #0]
   105b2:	70a5      	strb	r5, [r4, #2]
   105b4:	7908      	ldrb	r0, [r1, #4]
   105b6:	70e0      	strb	r0, [r4, #3]
   105b8:	7948      	ldrb	r0, [r1, #5]
   105ba:	7120      	strb	r0, [r4, #4]
   105bc:	7988      	ldrb	r0, [r1, #6]
   105be:	7160      	strb	r0, [r4, #5]
   105c0:	88c8      	ldrh	r0, [r1, #6]
   105c2:	0a00      	lsrs	r0, r0, #8
   105c4:	71a0      	strb	r0, [r4, #6]
   105c6:	7a08      	ldrb	r0, [r1, #8]
   105c8:	71e0      	strb	r0, [r4, #7]
   105ca:	2006      	movs	r0, #6
   105cc:	e7e6      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   105ce:	7023      	strb	r3, [r4, #0]
   105d0:	20a1      	movs	r0, #161	; 0xa1
   105d2:	70a0      	strb	r0, [r4, #2]
   105d4:	7908      	ldrb	r0, [r1, #4]
   105d6:	70e0      	strb	r0, [r4, #3]
   105d8:	7948      	ldrb	r0, [r1, #5]
   105da:	7120      	strb	r0, [r4, #4]
   105dc:	2000      	movs	r0, #0
   105de:	7160      	strb	r0, [r4, #5]
   105e0:	2004      	movs	r0, #4
   105e2:	e7db      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   105e4:	7023      	strb	r3, [r4, #0]
   105e6:	20a2      	movs	r0, #162	; 0xa2
   105e8:	70a0      	strb	r0, [r4, #2]
   105ea:	7908      	ldrb	r0, [r1, #4]
   105ec:	70e0      	strb	r0, [r4, #3]
   105ee:	8888      	ldrh	r0, [r1, #4]
   105f0:	0a00      	lsrs	r0, r0, #8
   105f2:	7120      	strb	r0, [r4, #4]
   105f4:	7988      	ldrb	r0, [r1, #6]
   105f6:	7160      	strb	r0, [r4, #5]
   105f8:	88c8      	ldrh	r0, [r1, #6]
   105fa:	0a00      	lsrs	r0, r0, #8
   105fc:	71a0      	strb	r0, [r4, #6]
   105fe:	7a08      	ldrb	r0, [r1, #8]
   10600:	71e0      	strb	r0, [r4, #7]
   10602:	8908      	ldrh	r0, [r1, #8]
   10604:	0a00      	lsrs	r0, r0, #8
   10606:	7220      	strb	r0, [r4, #8]
   10608:	7a88      	ldrb	r0, [r1, #10]
   1060a:	7260      	strb	r0, [r4, #9]
   1060c:	8948      	ldrh	r0, [r1, #10]
   1060e:	0a00      	lsrs	r0, r0, #8
   10610:	72a0      	strb	r0, [r4, #10]
   10612:	7b08      	ldrb	r0, [r1, #12]
   10614:	72e0      	strb	r0, [r4, #11]
   10616:	8988      	ldrh	r0, [r1, #12]
   10618:	0a00      	lsrs	r0, r0, #8
   1061a:	7320      	strb	r0, [r4, #12]
   1061c:	200b      	movs	r0, #11
   1061e:	e7bd      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   10620:	7023      	strb	r3, [r4, #0]
   10622:	20a3      	movs	r0, #163	; 0xa3
   10624:	70a0      	strb	r0, [r4, #2]
   10626:	7908      	ldrb	r0, [r1, #4]
   10628:	70e0      	strb	r0, [r4, #3]
   1062a:	8888      	ldrh	r0, [r1, #4]
   1062c:	0a00      	lsrs	r0, r0, #8
   1062e:	7120      	strb	r0, [r4, #4]
   10630:	7988      	ldrb	r0, [r1, #6]
   10632:	7160      	strb	r0, [r4, #5]
   10634:	79c8      	ldrb	r0, [r1, #7]
   10636:	71a0      	strb	r0, [r4, #6]
   10638:	2005      	movs	r0, #5
   1063a:	e7af      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   1063c:	7022      	strb	r2, [r4, #0]
   1063e:	f884 e002 	strb.w	lr, [r4, #2]
   10642:	7908      	ldrb	r0, [r1, #4]
   10644:	70e0      	strb	r0, [r4, #3]
   10646:	7948      	ldrb	r0, [r1, #5]
   10648:	7120      	strb	r0, [r4, #4]
   1064a:	f8d1 0006 	ldr.w	r0, [r1, #6]
   1064e:	f8c4 0005 	str.w	r0, [r4, #5]
   10652:	8948      	ldrh	r0, [r1, #10]
   10654:	f8a4 0009 	strh.w	r0, [r4, #9]
   10658:	e020      	b.n	1069c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
   1065a:	7023      	strb	r3, [r4, #0]
   1065c:	20a4      	movs	r0, #164	; 0xa4
   1065e:	70a0      	strb	r0, [r4, #2]
   10660:	7908      	ldrb	r0, [r1, #4]
   10662:	70e0      	strb	r0, [r4, #3]
   10664:	8888      	ldrh	r0, [r1, #4]
   10666:	0a00      	lsrs	r0, r0, #8
   10668:	7120      	strb	r0, [r4, #4]
   1066a:	7988      	ldrb	r0, [r1, #6]
   1066c:	7160      	strb	r0, [r4, #5]
   1066e:	79c8      	ldrb	r0, [r1, #7]
   10670:	71a0      	strb	r0, [r4, #6]
   10672:	2007      	movs	r0, #7
   10674:	e792      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
   10676:	7023      	strb	r3, [r4, #0]
   10678:	2080      	movs	r0, #128	; 0x80
   1067a:	70a0      	strb	r0, [r4, #2]
   1067c:	888a      	ldrh	r2, [r1, #4]
   1067e:	f8a4 2003 	strh.w	r2, [r4, #3]
   10682:	88ca      	ldrh	r2, [r1, #6]
   10684:	f8a4 2005 	strh.w	r2, [r4, #5]
   10688:	7a0a      	ldrb	r2, [r1, #8]
   1068a:	71e2      	strb	r2, [r4, #7]
   1068c:	7a4a      	ldrb	r2, [r1, #9]
   1068e:	8122      	strh	r2, [r4, #8]
   10690:	7a8a      	ldrb	r2, [r1, #10]
   10692:	72a2      	strb	r2, [r4, #10]
   10694:	7ac9      	ldrb	r1, [r1, #11]
   10696:	f001 0101 	and.w	r1, r1, #1
   1069a:	72e1      	strb	r1, [r4, #11]
   1069c:	200a      	movs	r0, #10
   1069e:	e77d      	b.n	1059c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

000106a0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
   106a0:	223e      	movs	r2, #62	; 0x3e
   106a2:	7002      	strb	r2, [r0, #0]
   106a4:	2201      	movs	r2, #1
   106a6:	7082      	strb	r2, [r0, #2]
   106a8:	790a      	ldrb	r2, [r1, #4]
   106aa:	70c2      	strb	r2, [r0, #3]
   106ac:	798a      	ldrb	r2, [r1, #6]
   106ae:	7102      	strb	r2, [r0, #4]
   106b0:	88ca      	ldrh	r2, [r1, #6]
   106b2:	0a12      	lsrs	r2, r2, #8
   106b4:	7142      	strb	r2, [r0, #5]
   106b6:	7a0a      	ldrb	r2, [r1, #8]
   106b8:	7182      	strb	r2, [r0, #6]
   106ba:	7a4a      	ldrb	r2, [r1, #9]
   106bc:	71c2      	strb	r2, [r0, #7]
   106be:	f8d1 200a 	ldr.w	r2, [r1, #10]
   106c2:	6082      	str	r2, [r0, #8]
   106c4:	89ca      	ldrh	r2, [r1, #14]
   106c6:	8182      	strh	r2, [r0, #12]
   106c8:	7c0a      	ldrb	r2, [r1, #16]
   106ca:	7382      	strb	r2, [r0, #14]
   106cc:	8a0a      	ldrh	r2, [r1, #16]
   106ce:	0a12      	lsrs	r2, r2, #8
   106d0:	73c2      	strb	r2, [r0, #15]
   106d2:	7c8a      	ldrb	r2, [r1, #18]
   106d4:	7402      	strb	r2, [r0, #16]
   106d6:	8a4a      	ldrh	r2, [r1, #18]
   106d8:	0a12      	lsrs	r2, r2, #8
   106da:	7442      	strb	r2, [r0, #17]
   106dc:	7d0a      	ldrb	r2, [r1, #20]
   106de:	7482      	strb	r2, [r0, #18]
   106e0:	8a8a      	ldrh	r2, [r1, #20]
   106e2:	0a12      	lsrs	r2, r2, #8
   106e4:	74c2      	strb	r2, [r0, #19]
   106e6:	7d89      	ldrb	r1, [r1, #22]
   106e8:	7501      	strb	r1, [r0, #20]
   106ea:	2013      	movs	r0, #19
   106ec:	4770      	bx	lr

000106ee <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   106ee:	223e      	movs	r2, #62	; 0x3e
   106f0:	7002      	strb	r2, [r0, #0]
   106f2:	2201      	movs	r2, #1
   106f4:	7082      	strb	r2, [r0, #2]
   106f6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   106fa:	70c2      	strb	r2, [r0, #3]
   106fc:	788a      	ldrb	r2, [r1, #2]
   106fe:	7102      	strb	r2, [r0, #4]
   10700:	884a      	ldrh	r2, [r1, #2]
   10702:	0a12      	lsrs	r2, r2, #8
   10704:	7142      	strb	r2, [r0, #5]
   10706:	790a      	ldrb	r2, [r1, #4]
   10708:	7182      	strb	r2, [r0, #6]
   1070a:	794a      	ldrb	r2, [r1, #5]
   1070c:	71c2      	strb	r2, [r0, #7]
   1070e:	f8d1 2006 	ldr.w	r2, [r1, #6]
   10712:	6082      	str	r2, [r0, #8]
   10714:	894a      	ldrh	r2, [r1, #10]
   10716:	8182      	strh	r2, [r0, #12]
   10718:	7e0a      	ldrb	r2, [r1, #24]
   1071a:	7382      	strb	r2, [r0, #14]
   1071c:	8b0a      	ldrh	r2, [r1, #24]
   1071e:	0a12      	lsrs	r2, r2, #8
   10720:	73c2      	strb	r2, [r0, #15]
   10722:	7e8a      	ldrb	r2, [r1, #26]
   10724:	7402      	strb	r2, [r0, #16]
   10726:	8b4a      	ldrh	r2, [r1, #26]
   10728:	0a12      	lsrs	r2, r2, #8
   1072a:	7442      	strb	r2, [r0, #17]
   1072c:	7f0a      	ldrb	r2, [r1, #28]
   1072e:	7482      	strb	r2, [r0, #18]
   10730:	8b8a      	ldrh	r2, [r1, #28]
   10732:	0a12      	lsrs	r2, r2, #8
   10734:	74c2      	strb	r2, [r0, #19]
   10736:	7f89      	ldrb	r1, [r1, #30]
   10738:	7501      	strb	r1, [r0, #20]
   1073a:	2113      	movs	r1, #19
   1073c:	7041      	strb	r1, [r0, #1]
   1073e:	4608      	mov	r0, r1
   10740:	4770      	bx	lr

00010742 <sdc_hci_data_get>:
   10742:	b510      	push	{r4, lr}
   10744:	b120      	cbz	r0, 10750 <sdc_hci_data_get+0xe>
   10746:	f7ff fd34 	bl	101b2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
   1074a:	b120      	cbz	r0, 10756 <sdc_hci_data_get+0x14>
   1074c:	2000      	movs	r0, #0
   1074e:	bd10      	pop	{r4, pc}
   10750:	f06f 0015 	mvn.w	r0, #21
   10754:	bd10      	pop	{r4, pc}
   10756:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1075a:	bd10      	pop	{r4, pc}

0001075c <sdc_hci_data_put>:
   1075c:	b510      	push	{r4, lr}
   1075e:	f06f 0415 	mvn.w	r4, #21
   10762:	b120      	cbz	r0, 1076e <sdc_hci_data_put+0x12>
   10764:	f7ff fd33 	bl	101ce <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   10768:	b108      	cbz	r0, 1076e <sdc_hci_data_put+0x12>
   1076a:	2000      	movs	r0, #0
   1076c:	bd10      	pop	{r4, pc}
   1076e:	4620      	mov	r0, r4
   10770:	bd10      	pop	{r4, pc}

00010772 <sdc_hci_evt_get>:
   10772:	b510      	push	{r4, lr}
   10774:	b120      	cbz	r0, 10780 <sdc_hci_evt_get+0xe>
   10776:	f7f4 fb21 	bl	4dbc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   1077a:	b120      	cbz	r0, 10786 <sdc_hci_evt_get+0x14>
   1077c:	2000      	movs	r0, #0
   1077e:	bd10      	pop	{r4, pc}
   10780:	f06f 0015 	mvn.w	r0, #21
   10784:	bd10      	pop	{r4, pc}
   10786:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1078a:	bd10      	pop	{r4, pc}

0001078c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   1078c:	f002 badf 	b.w	12d4e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

00010790 <sdc_hci_cmd_cb_read_transmit_power_level>:
   10790:	f002 bb29 	b.w	12de6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

00010794 <sdc_hci_cmd_cb_set_event_mask>:
   10794:	b510      	push	{r4, lr}
   10796:	f7f4 fbdb 	bl	4f50 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   1079a:	2000      	movs	r0, #0
   1079c:	bd10      	pop	{r4, pc}

0001079e <sdc_hci_cmd_cb_set_event_mask_page_2>:
   1079e:	b510      	push	{r4, lr}
   107a0:	f7f4 fbe4 	bl	4f6c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   107a4:	2000      	movs	r0, #0
   107a6:	bd10      	pop	{r4, pc}

000107a8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   107a8:	f002 bb38 	b.w	12e1c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

000107ac <sdc_hci_cmd_vs_conn_event_extend>:
   107ac:	b508      	push	{r3, lr}
   107ae:	7800      	ldrb	r0, [r0, #0]
   107b0:	f88d 0000 	strb.w	r0, [sp]
   107b4:	4668      	mov	r0, sp
   107b6:	f002 fa96 	bl	12ce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   107ba:	bd08      	pop	{r3, pc}

000107bc <sdc_hci_cmd_vs_conn_update>:
   107bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   107be:	2100      	movs	r1, #0
   107c0:	9100      	str	r1, [sp, #0]
   107c2:	9101      	str	r1, [sp, #4]
   107c4:	9102      	str	r1, [sp, #8]
   107c6:	9103      	str	r1, [sp, #12]
   107c8:	f8d0 1002 	ldr.w	r1, [r0, #2]
   107cc:	f641 524c 	movw	r2, #7500	; 0x1d4c
   107d0:	4291      	cmp	r1, r2
   107d2:	d304      	bcc.n	107de <sdc_hci_cmd_vs_conn_update+0x22>
   107d4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   107d8:	fbb1 f1f2 	udiv	r1, r1, r2
   107dc:	e005      	b.n	107ea <sdc_hci_cmd_vs_conn_update+0x2e>
   107de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107e2:	fbb1 f1f2 	udiv	r1, r1, r2
   107e6:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   107ea:	8802      	ldrh	r2, [r0, #0]
   107ec:	b289      	uxth	r1, r1
   107ee:	f8ad 2000 	strh.w	r2, [sp]
   107f2:	f8ad 1002 	strh.w	r1, [sp, #2]
   107f6:	f8ad 1004 	strh.w	r1, [sp, #4]
   107fa:	88c1      	ldrh	r1, [r0, #6]
   107fc:	f8ad 1006 	strh.w	r1, [sp, #6]
   10800:	8900      	ldrh	r0, [r0, #8]
   10802:	f8ad 0008 	strh.w	r0, [sp, #8]
   10806:	4668      	mov	r0, sp
   10808:	f002 f865 	bl	128d6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   1080c:	b004      	add	sp, #16
   1080e:	bd10      	pop	{r4, pc}

00010810 <sdc_hci_cmd_vs_event_length_set>:
   10810:	f7fd b86e 	b.w	d8f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00010814 <sdc_hci_cmd_vs_llpm_mode_set>:
   10814:	b508      	push	{r3, lr}
   10816:	7800      	ldrb	r0, [r0, #0]
   10818:	f88d 0000 	strb.w	r0, [sp]
   1081c:	4668      	mov	r0, sp
   1081e:	f7fd f8c7 	bl	d9b0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
   10822:	bd08      	pop	{r3, pc}

00010824 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   10824:	7800      	ldrb	r0, [r0, #0]
   10826:	b100      	cbz	r0, 1082a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   10828:	2001      	movs	r0, #1
   1082a:	f002 b9f4 	b.w	12c16 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001082e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   1082e:	b510      	push	{r4, lr}
   10830:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   10834:	4604      	mov	r4, r0
   10836:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
   1083a:	1c40      	adds	r0, r0, #1
   1083c:	d105      	bne.n	1084a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   1083e:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
   10842:	43c0      	mvns	r0, r0
   10844:	0400      	lsls	r0, r0, #16
   10846:	0c00      	lsrs	r0, r0, #16
   10848:	d036      	beq.n	108b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
   1084a:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
   1084e:	07c0      	lsls	r0, r0, #31
   10850:	d032      	beq.n	108b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
   10852:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
   10856:	f8c4 0001 	str.w	r0, [r4, #1]
   1085a:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
   1085e:	f8a4 0005 	strh.w	r0, [r4, #5]
   10862:	79a0      	ldrb	r0, [r4, #6]
   10864:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   10868:	71a0      	strb	r0, [r4, #6]
   1086a:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
   1086e:	1c40      	adds	r0, r0, #1
   10870:	d019      	beq.n	108a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
   10872:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   10876:	1c40      	adds	r0, r0, #1
   10878:	d015      	beq.n	108a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
   1087a:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
   1087e:	1c40      	adds	r0, r0, #1
   10880:	d011      	beq.n	108a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
   10882:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
   10886:	1c40      	adds	r0, r0, #1
   10888:	d00d      	beq.n	108a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
   1088a:	f851 0f90 	ldr.w	r0, [r1, #144]!
   1088e:	f8c4 0007 	str.w	r0, [r4, #7]
   10892:	6848      	ldr	r0, [r1, #4]
   10894:	f8c4 000b 	str.w	r0, [r4, #11]
   10898:	6888      	ldr	r0, [r1, #8]
   1089a:	f8c4 000f 	str.w	r0, [r4, #15]
   1089e:	68c8      	ldr	r0, [r1, #12]
   108a0:	f8c4 0013 	str.w	r0, [r4, #19]
   108a4:	e004      	b.n	108b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
   108a6:	2210      	movs	r2, #16
   108a8:	2100      	movs	r1, #0
   108aa:	1de0      	adds	r0, r4, #7
   108ac:	f7ff fbe8 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   108b0:	2001      	movs	r0, #1
   108b2:	7020      	strb	r0, [r4, #0]
   108b4:	2000      	movs	r0, #0
   108b6:	bd10      	pop	{r4, pc}
   108b8:	2000      	movs	r0, #0
   108ba:	e7fa      	b.n	108b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

000108bc <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   108bc:	f002 b9f3 	b.w	12ca6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

000108c0 <sdc_hci_cmd_ip_read_bd_addr>:
   108c0:	f002 ba56 	b.w	12d70 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

000108c4 <sdc_hci_cmd_ip_read_local_version_information>:
   108c4:	f7fd b888 	b.w	d9d8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

000108c8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
   108c8:	f001 bfb6 	b.w	12838 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

000108cc <sdc_hci_cmd_le_add_device_to_white_list>:
   108cc:	f001 bfcf 	b.w	1286e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

000108d0 <sdc_hci_cmd_le_clear_resolving_list>:
   108d0:	f001 bfea 	b.w	128a8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

000108d4 <sdc_hci_cmd_le_clear_white_list>:
   108d4:	f001 bff5 	b.w	128c2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

000108d8 <sdc_hci_cmd_le_encrypt>:
   108d8:	f002 b846 	b.w	12968 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

000108dc <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   108dc:	8802      	ldrh	r2, [r0, #0]
   108de:	800a      	strh	r2, [r1, #0]
   108e0:	f002 b84b 	b.w	1297a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

000108e4 <sdc_hci_cmd_le_long_term_key_request_reply>:
   108e4:	8802      	ldrh	r2, [r0, #0]
   108e6:	800a      	strh	r2, [r1, #0]
   108e8:	f002 b860 	b.w	129ac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

000108ec <sdc_hci_cmd_le_rand>:
   108ec:	f002 b882 	b.w	129f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

000108f0 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   108f0:	f7fc be40 	b.w	d574 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

000108f4 <sdc_hci_cmd_le_read_buffer_size>:
   108f4:	f7fc be4c 	b.w	d590 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

000108f8 <sdc_hci_cmd_le_read_channel_map>:
   108f8:	f002 b882 	b.w	12a00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

000108fc <sdc_hci_cmd_le_read_max_data_length>:
   108fc:	f002 b8a1 	b.w	12a42 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

00010900 <sdc_hci_cmd_le_read_phy>:
   10900:	f7fc be52 	b.w	d5a8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

00010904 <sdc_hci_cmd_le_read_remote_features>:
   10904:	f7fc be76 	b.w	d5f4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

00010908 <sdc_hci_cmd_le_read_resolving_list_size>:
   10908:	f002 b8ab 	b.w	12a62 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0001090c <sdc_hci_cmd_le_read_suggested_default_data_length>:
   1090c:	f7fc bea2 	b.w	d654 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

00010910 <sdc_hci_cmd_le_read_transmit_power>:
   10910:	f002 b8ab 	b.w	12a6a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00010914 <sdc_hci_cmd_le_read_white_list_size>:
   10914:	f002 b8af 	b.w	12a76 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00010918 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
   10918:	f002 b8b1 	b.w	12a7e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0001091c <sdc_hci_cmd_le_remove_device_from_white_list>:
   1091c:	f002 b8c8 	b.w	12ab0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00010920 <sdc_hci_cmd_le_set_address_resolution_enable>:
   10920:	f002 b8e2 	b.w	12ae8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

00010924 <sdc_hci_cmd_le_set_adv_data>:
   10924:	f7fc bea6 	b.w	d674 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00010928 <sdc_hci_cmd_le_set_adv_enable>:
   10928:	f7fc bed4 	b.w	d6d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0001092c <sdc_hci_cmd_le_set_adv_params>:
   1092c:	f7fc bef0 	b.w	d710 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00010930 <sdc_hci_cmd_le_set_data_length>:
   10930:	f002 b8e8 	b.w	12b04 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

00010934 <sdc_hci_cmd_le_set_default_phy>:
   10934:	f7fc bf62 	b.w	d7fc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

00010938 <sdc_hci_cmd_le_set_event_mask>:
   10938:	b510      	push	{r4, lr}
   1093a:	f7f4 fb03 	bl	4f44 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   1093e:	2000      	movs	r0, #0
   10940:	bd10      	pop	{r4, pc}

00010942 <sdc_hci_cmd_le_set_phy>:
   10942:	f002 b906 	b.w	12b52 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

00010946 <sdc_hci_cmd_le_set_privacy_mode>:
   10946:	f002 b922 	b.w	12b8e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0001094a <sdc_hci_cmd_le_set_random_address>:
   1094a:	f002 b936 	b.w	12bba <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0001094e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
   1094e:	f002 b942 	b.w	12bd6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

00010952 <sdc_hci_cmd_le_set_scan_response_data>:
   10952:	f7fc bf83 	b.w	d85c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

00010956 <sdc_hci_cmd_le_write_suggested_default_data_length>:
   10956:	f002 b947 	b.w	12be8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0001095a <sdc_hci_cmd_lc_disconnect>:
   1095a:	f001 bf0d 	b.w	12778 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0001095e <sdc_hci_cmd_lc_read_remote_version_information>:
   1095e:	f002 ba13 	b.w	12d88 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   10962:	b530      	push	{r4, r5, lr}
   10964:	8804      	ldrh	r4, [r0, #0]
   10966:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
   1096a:	4429      	add	r1, r5
   1096c:	b289      	uxth	r1, r1
   1096e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   10972:	4291      	cmp	r1, r2
   10974:	d20b      	bcs.n	1098e <sdc_hci_cmd_lc_read_remote_version_information+0x30>
   10976:	1a52      	subs	r2, r2, r1
   10978:	b292      	uxth	r2, r2
   1097a:	331b      	adds	r3, #27
   1097c:	429a      	cmp	r2, r3
   1097e:	d201      	bcs.n	10984 <sdc_hci_cmd_lc_read_remote_version_information+0x26>
   10980:	43a5      	bics	r5, r4
   10982:	e002      	b.n	1098a <sdc_hci_cmd_lc_read_remote_version_information+0x2c>
   10984:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
   10988:	430d      	orrs	r5, r1
   1098a:	8005      	strh	r5, [r0, #0]
   1098c:	bd30      	pop	{r4, r5, pc}
   1098e:	1a89      	subs	r1, r1, r2
   10990:	b289      	uxth	r1, r1
   10992:	43a5      	bics	r5, r4
   10994:	e7f8      	b.n	10988 <sdc_hci_cmd_lc_read_remote_version_information+0x2a>
   10996:	b510      	push	{r4, lr}
   10998:	8802      	ldrh	r2, [r0, #0]
   1099a:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   1099e:	428b      	cmp	r3, r1
   109a0:	d203      	bcs.n	109aa <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
   109a2:	21b6      	movs	r1, #182	; 0xb6
   109a4:	2014      	movs	r0, #20
   109a6:	f7f4 f943 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   109ae:	4393      	bics	r3, r2
   109b0:	430b      	orrs	r3, r1
   109b2:	8003      	strh	r3, [r0, #0]
   109b4:	bd10      	pop	{r4, pc}
   109b6:	4288      	cmp	r0, r1
   109b8:	d101      	bne.n	109be <sdc_hci_cmd_lc_read_remote_version_information+0x60>
   109ba:	2001      	movs	r0, #1
   109bc:	4770      	bx	lr
   109be:	2000      	movs	r0, #0
   109c0:	4770      	bx	lr
   109c2:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   109c6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   109ca:	429a      	cmp	r2, r3
   109cc:	d107      	bne.n	109de <sdc_hci_cmd_lc_read_remote_version_information+0x80>
   109ce:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   109d2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   109d6:	4288      	cmp	r0, r1
   109d8:	d001      	beq.n	109de <sdc_hci_cmd_lc_read_remote_version_information+0x80>
   109da:	2001      	movs	r0, #1
   109dc:	4770      	bx	lr
   109de:	2000      	movs	r0, #0
   109e0:	4770      	bx	lr

000109e2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
   109e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109e6:	f100 0628 	add.w	r6, r0, #40	; 0x28
   109ea:	7f40      	ldrb	r0, [r0, #29]
   109ec:	461d      	mov	r5, r3
   109ee:	3008      	adds	r0, #8
   109f0:	4690      	mov	r8, r2
   109f2:	1843      	adds	r3, r0, r1
   109f4:	2400      	movs	r4, #0
   109f6:	8808      	ldrh	r0, [r1, #0]
   109f8:	884f      	ldrh	r7, [r1, #2]
   109fa:	9a06      	ldr	r2, [sp, #24]
   109fc:	1edb      	subs	r3, r3, #3
   109fe:	b190      	cbz	r0, 10a26 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
   10a00:	1cc0      	adds	r0, r0, #3
   10a02:	b280      	uxth	r0, r0
   10a04:	4290      	cmp	r0, r2
   10a06:	d912      	bls.n	10a2e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
   10a08:	1a80      	subs	r0, r0, r2
   10a0a:	42a8      	cmp	r0, r5
   10a0c:	db00      	blt.n	10a10 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
   10a0e:	4628      	mov	r0, r5
   10a10:	b284      	uxth	r4, r0
   10a12:	1899      	adds	r1, r3, r2
   10a14:	4622      	mov	r2, r4
   10a16:	4640      	mov	r0, r8
   10a18:	f7f3 ff7e 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10a1c:	1b28      	subs	r0, r5, r4
   10a1e:	b285      	uxth	r5, r0
   10a20:	44a0      	add	r8, r4
   10a22:	2000      	movs	r0, #0
   10a24:	e005      	b.n	10a32 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
   10a26:	1cff      	adds	r7, r7, #3
   10a28:	b2bf      	uxth	r7, r7
   10a2a:	1ef6      	subs	r6, r6, #3
   10a2c:	e7ea      	b.n	10a04 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
   10a2e:	1a10      	subs	r0, r2, r0
   10a30:	b280      	uxth	r0, r0
   10a32:	1941      	adds	r1, r0, r5
   10a34:	42b9      	cmp	r1, r7
   10a36:	d806      	bhi.n	10a46 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
   10a38:	1831      	adds	r1, r6, r0
   10a3a:	462a      	mov	r2, r5
   10a3c:	4640      	mov	r0, r8
   10a3e:	f7f3 ff6b 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10a42:	1960      	adds	r0, r4, r5
   10a44:	b284      	uxth	r4, r0
   10a46:	4620      	mov	r0, r4
   10a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010a4c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
   10a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a50:	f100 0628 	add.w	r6, r0, #40	; 0x28
   10a54:	7f40      	ldrb	r0, [r0, #29]
   10a56:	461d      	mov	r5, r3
   10a58:	3008      	adds	r0, #8
   10a5a:	4690      	mov	r8, r2
   10a5c:	1843      	adds	r3, r0, r1
   10a5e:	2400      	movs	r4, #0
   10a60:	8808      	ldrh	r0, [r1, #0]
   10a62:	884f      	ldrh	r7, [r1, #2]
   10a64:	9a06      	ldr	r2, [sp, #24]
   10a66:	1edb      	subs	r3, r3, #3
   10a68:	b190      	cbz	r0, 10a90 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
   10a6a:	1cc0      	adds	r0, r0, #3
   10a6c:	b280      	uxth	r0, r0
   10a6e:	4290      	cmp	r0, r2
   10a70:	d912      	bls.n	10a98 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
   10a72:	1a80      	subs	r0, r0, r2
   10a74:	42a8      	cmp	r0, r5
   10a76:	db00      	blt.n	10a7a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
   10a78:	4628      	mov	r0, r5
   10a7a:	b284      	uxth	r4, r0
   10a7c:	1898      	adds	r0, r3, r2
   10a7e:	4622      	mov	r2, r4
   10a80:	4641      	mov	r1, r8
   10a82:	f7f3 ff49 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10a86:	1b28      	subs	r0, r5, r4
   10a88:	b285      	uxth	r5, r0
   10a8a:	44a0      	add	r8, r4
   10a8c:	2000      	movs	r0, #0
   10a8e:	e005      	b.n	10a9c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
   10a90:	1cff      	adds	r7, r7, #3
   10a92:	b2bf      	uxth	r7, r7
   10a94:	1ef6      	subs	r6, r6, #3
   10a96:	e7ea      	b.n	10a6e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
   10a98:	1a10      	subs	r0, r2, r0
   10a9a:	b280      	uxth	r0, r0
   10a9c:	1941      	adds	r1, r0, r5
   10a9e:	42b9      	cmp	r1, r7
   10aa0:	d806      	bhi.n	10ab0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
   10aa2:	4430      	add	r0, r6
   10aa4:	462a      	mov	r2, r5
   10aa6:	4641      	mov	r1, r8
   10aa8:	f7f3 ff36 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10aac:	1960      	adds	r0, r4, r5
   10aae:	b284      	uxth	r4, r0
   10ab0:	4620      	mov	r0, r4
   10ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010ab6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   10ab6:	88c1      	ldrh	r1, [r0, #6]
   10ab8:	8880      	ldrh	r0, [r0, #4]
   10aba:	f7ff bf7c 	b.w	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

00010abe <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   10abe:	8881      	ldrh	r1, [r0, #4]
   10ac0:	8900      	ldrh	r0, [r0, #8]
   10ac2:	f7ff bf78 	b.w	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

00010ac6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   10ac6:	b570      	push	{r4, r5, r6, lr}
   10ac8:	4604      	mov	r4, r0
   10aca:	f100 0128 	add.w	r1, r0, #40	; 0x28
   10ace:	8880      	ldrh	r0, [r0, #4]
   10ad0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   10ad4:	1842      	adds	r2, r0, r1
   10ad6:	8a20      	ldrh	r0, [r4, #16]
   10ad8:	2800      	cmp	r0, #0
   10ada:	d027      	beq.n	10b2c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
   10adc:	89a1      	ldrh	r1, [r4, #12]
   10ade:	2500      	movs	r5, #0
   10ae0:	4408      	add	r0, r1
   10ae2:	b280      	uxth	r0, r0
   10ae4:	81a0      	strh	r0, [r4, #12]
   10ae6:	8811      	ldrh	r1, [r2, #0]
   10ae8:	8853      	ldrh	r3, [r2, #2]
   10aea:	4419      	add	r1, r3
   10aec:	4281      	cmp	r1, r0
   10aee:	d205      	bcs.n	10afc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
   10af0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   10af4:	f04f 0014 	mov.w	r0, #20
   10af8:	f7f4 f89a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10afc:	d114      	bne.n	10b28 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
   10afe:	69a0      	ldr	r0, [r4, #24]
   10b00:	b108      	cbz	r0, 10b06 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
   10b02:	7f80      	ldrb	r0, [r0, #30]
   10b04:	7110      	strb	r0, [r2, #4]
   10b06:	8851      	ldrh	r1, [r2, #2]
   10b08:	b121      	cbz	r1, 10b14 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
   10b0a:	f104 0004 	add.w	r0, r4, #4
   10b0e:	f7ff ff42 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   10b12:	e008      	b.n	10b26 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
   10b14:	7f63      	ldrb	r3, [r4, #29]
   10b16:	8810      	ldrh	r0, [r2, #0]
   10b18:	3308      	adds	r3, #8
   10b1a:	4418      	add	r0, r3
   10b1c:	b281      	uxth	r1, r0
   10b1e:	8862      	ldrh	r2, [r4, #2]
   10b20:	1d20      	adds	r0, r4, #4
   10b22:	f7ff ff1e 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   10b26:	81a5      	strh	r5, [r4, #12]
   10b28:	8225      	strh	r5, [r4, #16]
   10b2a:	2001      	movs	r0, #1
   10b2c:	bd70      	pop	{r4, r5, r6, pc}

00010b2e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   10b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b32:	4604      	mov	r4, r0
   10b34:	f100 0328 	add.w	r3, r0, #40	; 0x28
   10b38:	88c0      	ldrh	r0, [r0, #6]
   10b3a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   10b3e:	8a60      	ldrh	r0, [r4, #18]
   10b40:	19dd      	adds	r5, r3, r7
   10b42:	b108      	cbz	r0, 10b48 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   10b44:	4288      	cmp	r0, r1
   10b46:	d202      	bcs.n	10b4e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
   10b48:	2000      	movs	r0, #0
   10b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b4e:	89e6      	ldrh	r6, [r4, #14]
   10b50:	b15e      	cbz	r6, 10b6a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
   10b52:	8828      	ldrh	r0, [r5, #0]
   10b54:	f8b5 c002 	ldrh.w	ip, [r5, #2]
   10b58:	eb00 080c 	add.w	r8, r0, ip
   10b5c:	4546      	cmp	r6, r8
   10b5e:	d008      	beq.n	10b72 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
   10b60:	f240 3112 	movw	r1, #786	; 0x312
   10b64:	2014      	movs	r0, #20
   10b66:	f7f4 f863 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b6a:	2000      	movs	r0, #0
   10b6c:	7fa6      	ldrb	r6, [r4, #30]
   10b6e:	4684      	mov	ip, r0
   10b70:	712e      	strb	r6, [r5, #4]
   10b72:	f894 801c 	ldrb.w	r8, [r4, #28]
   10b76:	f04f 0600 	mov.w	r6, #0
   10b7a:	46c1      	mov	r9, r8
   10b7c:	ea58 080c 	orrs.w	r8, r8, ip
   10b80:	d003      	beq.n	10b8a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   10b82:	ea5f 0709 	movs.w	r7, r9
   10b86:	d02d      	beq.n	10be4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
   10b88:	e037      	b.n	10bfa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
   10b8a:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   10b8e:	f1bc 0f00 	cmp.w	ip, #0
   10b92:	d00e      	beq.n	10bb2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
   10b94:	f894 801d 	ldrb.w	r8, [r4, #29]
   10b98:	449c      	add	ip, r3
   10b9a:	f108 0808 	add.w	r8, r8, #8
   10b9e:	44b8      	add	r8, r7
   10ba0:	44c4      	add	ip, r8
   10ba2:	f8b4 801f 	ldrh.w	r8, [r4, #31]
   10ba6:	f82c 8c03 	strh.w	r8, [ip, #-3]
   10baa:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
   10bae:	f80c 8c01 	strb.w	r8, [ip, #-1]
   10bb2:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   10bb6:	4408      	add	r0, r1
   10bb8:	4461      	add	r1, ip
   10bba:	81e1      	strh	r1, [r4, #14]
   10bbc:	8028      	strh	r0, [r5, #0]
   10bbe:	806e      	strh	r6, [r5, #2]
   10bc0:	b14a      	cbz	r2, 10bd6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
   10bc2:	7f63      	ldrb	r3, [r4, #29]
   10bc4:	8828      	ldrh	r0, [r5, #0]
   10bc6:	3308      	adds	r3, #8
   10bc8:	4418      	add	r0, r3
   10bca:	b281      	uxth	r1, r0
   10bcc:	8862      	ldrh	r2, [r4, #2]
   10bce:	1da0      	adds	r0, r4, #6
   10bd0:	f7ff fec7 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   10bd4:	e01f      	b.n	10c16 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
   10bd6:	7f60      	ldrb	r0, [r4, #29]
   10bd8:	89e1      	ldrh	r1, [r4, #14]
   10bda:	3008      	adds	r0, #8
   10bdc:	4438      	add	r0, r7
   10bde:	4419      	add	r1, r3
   10be0:	4408      	add	r0, r1
   10be2:	e028      	b.n	10c36 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
   10be4:	89e7      	ldrh	r7, [r4, #14]
   10be6:	f8b4 801f 	ldrh.w	r8, [r4, #31]
   10bea:	441f      	add	r7, r3
   10bec:	1a3f      	subs	r7, r7, r0
   10bee:	f827 8c03 	strh.w	r8, [r7, #-3]
   10bf2:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
   10bf6:	f807 8c01 	strb.w	r8, [r7, #-1]
   10bfa:	eb0c 0701 	add.w	r7, ip, r1
   10bfe:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   10c02:	b2bf      	uxth	r7, r7
   10c04:	4461      	add	r1, ip
   10c06:	81e1      	strh	r1, [r4, #14]
   10c08:	8028      	strh	r0, [r5, #0]
   10c0a:	806f      	strh	r7, [r5, #2]
   10c0c:	b182      	cbz	r2, 10c30 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
   10c0e:	4639      	mov	r1, r7
   10c10:	1da0      	adds	r0, r4, #6
   10c12:	f7ff fec0 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   10c16:	81e6      	strh	r6, [r4, #14]
   10c18:	7fa0      	ldrb	r0, [r4, #30]
   10c1a:	1c40      	adds	r0, r0, #1
   10c1c:	77a0      	strb	r0, [r4, #30]
   10c1e:	7da0      	ldrb	r0, [r4, #22]
   10c20:	b108      	cbz	r0, 10c26 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
   10c22:	88e0      	ldrh	r0, [r4, #6]
   10c24:	82a0      	strh	r0, [r4, #20]
   10c26:	75a6      	strb	r6, [r4, #22]
   10c28:	8266      	strh	r6, [r4, #18]
   10c2a:	75e6      	strb	r6, [r4, #23]
   10c2c:	2001      	movs	r0, #1
   10c2e:	e78c      	b.n	10b4a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
   10c30:	89e1      	ldrh	r1, [r4, #14]
   10c32:	4419      	add	r1, r3
   10c34:	1a08      	subs	r0, r1, r0
   10c36:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   10c3a:	f8a4 101f 	strh.w	r1, [r4, #31]
   10c3e:	7880      	ldrb	r0, [r0, #2]
   10c40:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   10c44:	e7f0      	b.n	10c28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

00010c46 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   10c46:	b570      	push	{r4, r5, r6, lr}
   10c48:	4604      	mov	r4, r0
   10c4a:	f100 0228 	add.w	r2, r0, #40	; 0x28
   10c4e:	88c1      	ldrh	r1, [r0, #6]
   10c50:	8880      	ldrh	r0, [r0, #4]
   10c52:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
   10c56:	18d5      	adds	r5, r2, r3
   10c58:	f7ff fead 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10c5c:	b938      	cbnz	r0, 10c6e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
   10c5e:	89a0      	ldrh	r0, [r4, #12]
   10c60:	b928      	cbnz	r0, 10c6e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
   10c62:	8a20      	ldrh	r0, [r4, #16]
   10c64:	b918      	cbnz	r0, 10c6e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
   10c66:	88a0      	ldrh	r0, [r4, #4]
   10c68:	8aa1      	ldrh	r1, [r4, #20]
   10c6a:	4288      	cmp	r0, r1
   10c6c:	d101      	bne.n	10c72 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
   10c6e:	2000      	movs	r0, #0
   10c70:	bd70      	pop	{r4, r5, r6, pc}
   10c72:	8828      	ldrh	r0, [r5, #0]
   10c74:	8869      	ldrh	r1, [r5, #2]
   10c76:	b131      	cbz	r1, 10c86 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
   10c78:	1d20      	adds	r0, r4, #4
   10c7a:	f7ff fe8c 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   10c7e:	2000      	movs	r0, #0
   10c80:	8220      	strh	r0, [r4, #16]
   10c82:	2001      	movs	r0, #1
   10c84:	bd70      	pop	{r4, r5, r6, pc}
   10c86:	7f63      	ldrb	r3, [r4, #29]
   10c88:	8862      	ldrh	r2, [r4, #2]
   10c8a:	3308      	adds	r3, #8
   10c8c:	4418      	add	r0, r3
   10c8e:	b281      	uxth	r1, r0
   10c90:	1d20      	adds	r0, r4, #4
   10c92:	f7ff fe66 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   10c96:	e7f2      	b.n	10c7e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

00010c98 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   10c98:	b570      	push	{r4, r5, r6, lr}
   10c9a:	4604      	mov	r4, r0
   10c9c:	f100 0228 	add.w	r2, r0, #40	; 0x28
   10ca0:	88c0      	ldrh	r0, [r0, #6]
   10ca2:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
   10ca6:	7de0      	ldrb	r0, [r4, #23]
   10ca8:	2800      	cmp	r0, #0
   10caa:	d006      	beq.n	10cba <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
   10cac:	18d0      	adds	r0, r2, r3
   10cae:	8802      	ldrh	r2, [r0, #0]
   10cb0:	8843      	ldrh	r3, [r0, #2]
   10cb2:	4413      	add	r3, r2
   10cb4:	428b      	cmp	r3, r1
   10cb6:	d201      	bcs.n	10cbc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
   10cb8:	2000      	movs	r0, #0
   10cba:	bd70      	pop	{r4, r5, r6, pc}
   10cbc:	2500      	movs	r5, #0
   10cbe:	428a      	cmp	r2, r1
   10cc0:	d302      	bcc.n	10cc8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
   10cc2:	8001      	strh	r1, [r0, #0]
   10cc4:	8045      	strh	r5, [r0, #2]
   10cc6:	e008      	b.n	10cda <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
   10cc8:	1a89      	subs	r1, r1, r2
   10cca:	0409      	lsls	r1, r1, #16
   10ccc:	0c09      	lsrs	r1, r1, #16
   10cce:	8041      	strh	r1, [r0, #2]
   10cd0:	d003      	beq.n	10cda <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
   10cd2:	1da0      	adds	r0, r4, #6
   10cd4:	f7ff fe5f 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   10cd8:	e008      	b.n	10cec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
   10cda:	7f63      	ldrb	r3, [r4, #29]
   10cdc:	8800      	ldrh	r0, [r0, #0]
   10cde:	3308      	adds	r3, #8
   10ce0:	4418      	add	r0, r3
   10ce2:	b281      	uxth	r1, r0
   10ce4:	8862      	ldrh	r2, [r4, #2]
   10ce6:	1da0      	adds	r0, r4, #6
   10ce8:	f7ff fe3b 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   10cec:	75e5      	strb	r5, [r4, #23]
   10cee:	2001      	movs	r0, #1
   10cf0:	bd70      	pop	{r4, r5, r6, pc}

00010cf2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
   10cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cf6:	4604      	mov	r4, r0
   10cf8:	f100 0628 	add.w	r6, r0, #40	; 0x28
   10cfc:	8947      	ldrh	r7, [r0, #10]
   10cfe:	8880      	ldrh	r0, [r0, #4]
   10d00:	2500      	movs	r5, #0
   10d02:	4681      	mov	r9, r0
   10d04:	4601      	mov	r1, r0
   10d06:	4638      	mov	r0, r7
   10d08:	f7ff fe55 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10d0c:	b9e0      	cbnz	r0, 10d48 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
   10d0e:	f104 080a 	add.w	r8, r4, #10
   10d12:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
   10d16:	4430      	add	r0, r6
   10d18:	8841      	ldrh	r1, [r0, #2]
   10d1a:	b119      	cbz	r1, 10d24 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
   10d1c:	4640      	mov	r0, r8
   10d1e:	f7ff fe3a 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   10d22:	e008      	b.n	10d36 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
   10d24:	7f63      	ldrb	r3, [r4, #29]
   10d26:	8800      	ldrh	r0, [r0, #0]
   10d28:	3308      	adds	r3, #8
   10d2a:	4418      	add	r0, r3
   10d2c:	b281      	uxth	r1, r0
   10d2e:	8862      	ldrh	r2, [r4, #2]
   10d30:	4640      	mov	r0, r8
   10d32:	f7ff fe16 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   10d36:	8967      	ldrh	r7, [r4, #10]
   10d38:	1c6d      	adds	r5, r5, #1
   10d3a:	b2ad      	uxth	r5, r5
   10d3c:	4649      	mov	r1, r9
   10d3e:	4638      	mov	r0, r7
   10d40:	f7ff fe39 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10d44:	2800      	cmp	r0, #0
   10d46:	d0e4      	beq.n	10d12 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
   10d48:	4628      	mov	r0, r5
   10d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010d4e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   10d4e:	b570      	push	{r4, r5, r6, lr}
   10d50:	4604      	mov	r4, r0
   10d52:	f100 0228 	add.w	r2, r0, #40	; 0x28
   10d56:	88c1      	ldrh	r1, [r0, #6]
   10d58:	8880      	ldrh	r0, [r0, #4]
   10d5a:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
   10d5e:	18d5      	adds	r5, r2, r3
   10d60:	88a2      	ldrh	r2, [r4, #4]
   10d62:	8aa3      	ldrh	r3, [r4, #20]
   10d64:	429a      	cmp	r2, r3
   10d66:	d013      	beq.n	10d90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10d68:	f7ff fe25 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10d6c:	b980      	cbnz	r0, 10d90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10d6e:	89a0      	ldrh	r0, [r4, #12]
   10d70:	b970      	cbnz	r0, 10d90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   10d72:	69a4      	ldr	r4, [r4, #24]
   10d74:	b174      	cbz	r4, 10d94 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10d76:	4620      	mov	r0, r4
   10d78:	f7ff fea1 	bl	10abe <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   10d7c:	b950      	cbnz	r0, 10d94 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10d7e:	8920      	ldrh	r0, [r4, #8]
   10d80:	3428      	adds	r4, #40	; 0x28
   10d82:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   10d86:	4420      	add	r0, r4
   10d88:	7929      	ldrb	r1, [r5, #4]
   10d8a:	7900      	ldrb	r0, [r0, #4]
   10d8c:	4288      	cmp	r0, r1
   10d8e:	d101      	bne.n	10d94 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
   10d90:	2000      	movs	r0, #0
   10d92:	bd70      	pop	{r4, r5, r6, pc}
   10d94:	4628      	mov	r0, r5
   10d96:	bd70      	pop	{r4, r5, r6, pc}

00010d98 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   10d98:	f100 0328 	add.w	r3, r0, #40	; 0x28
   10d9c:	7f40      	ldrb	r0, [r0, #29]
   10d9e:	3008      	adds	r0, #8
   10da0:	4408      	add	r0, r1
   10da2:	1ec0      	subs	r0, r0, #3
   10da4:	6010      	str	r0, [r2, #0]
   10da6:	8808      	ldrh	r0, [r1, #0]
   10da8:	b908      	cbnz	r0, 10dae <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
   10daa:	1edb      	subs	r3, r3, #3
   10dac:	6013      	str	r3, [r2, #0]
   10dae:	8808      	ldrh	r0, [r1, #0]
   10db0:	8849      	ldrh	r1, [r1, #2]
   10db2:	4408      	add	r0, r1
   10db4:	b280      	uxth	r0, r0
   10db6:	4770      	bx	lr

00010db8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   10db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dbc:	460e      	mov	r6, r1
   10dbe:	88c1      	ldrh	r1, [r0, #6]
   10dc0:	4604      	mov	r4, r0
   10dc2:	f100 0828 	add.w	r8, r0, #40	; 0x28
   10dc6:	8900      	ldrh	r0, [r0, #8]
   10dc8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   10dcc:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   10dd0:	f7ff fdf7 	bl	109c2 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
   10dd4:	b110      	cbz	r0, 10ddc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
   10dd6:	2000      	movs	r0, #0
   10dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ddc:	2200      	movs	r2, #0
   10dde:	2301      	movs	r3, #1
   10de0:	7f60      	ldrb	r0, [r4, #29]
   10de2:	42af      	cmp	r7, r5
   10de4:	d90b      	bls.n	10dfe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
   10de6:	1b79      	subs	r1, r7, r5
   10de8:	3008      	adds	r0, #8
   10dea:	1a08      	subs	r0, r1, r0
   10dec:	4286      	cmp	r6, r0
   10dee:	dc1d      	bgt.n	10e2c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
   10df0:	eb08 0005 	add.w	r0, r8, r5
   10df4:	2100      	movs	r1, #0
   10df6:	8006      	strh	r6, [r0, #0]
   10df8:	8041      	strh	r1, [r0, #2]
   10dfa:	75e3      	strb	r3, [r4, #23]
   10dfc:	e7ec      	b.n	10dd8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   10dfe:	8861      	ldrh	r1, [r4, #2]
   10e00:	3008      	adds	r0, #8
   10e02:	1b49      	subs	r1, r1, r5
   10e04:	1a08      	subs	r0, r1, r0
   10e06:	d411      	bmi.n	10e2c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
   10e08:	281b      	cmp	r0, #27
   10e0a:	da04      	bge.n	10e16 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
   10e0c:	f240 111d 	movw	r1, #285	; 0x11d
   10e10:	2014      	movs	r0, #20
   10e12:	f7f3 ff0d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e16:	4286      	cmp	r6, r0
   10e18:	dc01      	bgt.n	10e1e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
   10e1a:	4630      	mov	r0, r6
   10e1c:	e000      	b.n	10e20 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
   10e1e:	b280      	uxth	r0, r0
   10e20:	1a31      	subs	r1, r6, r0
   10e22:	0409      	lsls	r1, r1, #16
   10e24:	0c09      	lsrs	r1, r1, #16
   10e26:	d003      	beq.n	10e30 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
   10e28:	42b9      	cmp	r1, r7
   10e2a:	dd01      	ble.n	10e30 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
   10e2c:	75e2      	strb	r2, [r4, #23]
   10e2e:	e7d2      	b.n	10dd6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
   10e30:	eb08 0205 	add.w	r2, r8, r5
   10e34:	8010      	strh	r0, [r2, #0]
   10e36:	8051      	strh	r1, [r2, #2]
   10e38:	75e3      	strb	r3, [r4, #23]
   10e3a:	4610      	mov	r0, r2
   10e3c:	e7cc      	b.n	10dd8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

00010e3e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   10e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e42:	4604      	mov	r4, r0
   10e44:	f100 0228 	add.w	r2, r0, #40	; 0x28
   10e48:	88c1      	ldrh	r1, [r0, #6]
   10e4a:	8880      	ldrh	r0, [r0, #4]
   10e4c:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   10e50:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   10e54:	19d6      	adds	r6, r2, r7
   10e56:	f7ff fdae 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10e5a:	b9e8      	cbnz	r0, 10e98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
   10e5c:	89a0      	ldrh	r0, [r4, #12]
   10e5e:	8a21      	ldrh	r1, [r4, #16]
   10e60:	8832      	ldrh	r2, [r6, #0]
   10e62:	4401      	add	r1, r0
   10e64:	8870      	ldrh	r0, [r6, #2]
   10e66:	1813      	adds	r3, r2, r0
   10e68:	4299      	cmp	r1, r3
   10e6a:	d312      	bcc.n	10e92 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
   10e6c:	b110      	cbz	r0, 10e74 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   10e6e:	42a8      	cmp	r0, r5
   10e70:	d30f      	bcc.n	10e92 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
   10e72:	e011      	b.n	10e98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
   10e74:	7f61      	ldrb	r1, [r4, #29]
   10e76:	3108      	adds	r1, #8
   10e78:	19c8      	adds	r0, r1, r7
   10e7a:	4410      	add	r0, r2
   10e7c:	8862      	ldrh	r2, [r4, #2]
   10e7e:	b280      	uxth	r0, r0
   10e80:	1a12      	subs	r2, r2, r0
   10e82:	b292      	uxth	r2, r2
   10e84:	311b      	adds	r1, #27
   10e86:	4291      	cmp	r1, r2
   10e88:	d901      	bls.n	10e8e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
   10e8a:	b915      	cbnz	r5, 10e92 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
   10e8c:	e004      	b.n	10e98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
   10e8e:	42a8      	cmp	r0, r5
   10e90:	d002      	beq.n	10e98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
   10e92:	2001      	movs	r0, #1
   10e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e98:	2000      	movs	r0, #0
   10e9a:	e7fb      	b.n	10e94 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

00010e9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   10e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ea0:	460f      	mov	r7, r1
   10ea2:	4604      	mov	r4, r0
   10ea4:	f100 0528 	add.w	r5, r0, #40	; 0x28
   10ea8:	88c1      	ldrh	r1, [r0, #6]
   10eaa:	8880      	ldrh	r0, [r0, #4]
   10eac:	4690      	mov	r8, r2
   10eae:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   10eb2:	18ae      	adds	r6, r5, r2
   10eb4:	f7ff fd7f 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10eb8:	b118      	cbz	r0, 10ec2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
   10eba:	2000      	movs	r0, #0
   10ebc:	8220      	strh	r0, [r4, #16]
   10ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ec2:	89a0      	ldrh	r0, [r4, #12]
   10ec4:	8831      	ldrh	r1, [r6, #0]
   10ec6:	4288      	cmp	r0, r1
   10ec8:	d306      	bcc.n	10ed8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
   10eca:	1a40      	subs	r0, r0, r1
   10ecc:	8871      	ldrh	r1, [r6, #2]
   10ece:	1a09      	subs	r1, r1, r0
   10ed0:	4428      	add	r0, r5
   10ed2:	b289      	uxth	r1, r1
   10ed4:	1ec0      	subs	r0, r0, #3
   10ed6:	e005      	b.n	10ee4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
   10ed8:	1a09      	subs	r1, r1, r0
   10eda:	7f62      	ldrb	r2, [r4, #29]
   10edc:	b289      	uxth	r1, r1
   10ede:	4410      	add	r0, r2
   10ee0:	4430      	add	r0, r6
   10ee2:	1d40      	adds	r0, r0, #5
   10ee4:	883a      	ldrh	r2, [r7, #0]
   10ee6:	428a      	cmp	r2, r1
   10ee8:	d900      	bls.n	10eec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
   10eea:	8039      	strh	r1, [r7, #0]
   10eec:	89a1      	ldrh	r1, [r4, #12]
   10eee:	b129      	cbz	r1, 10efc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
   10ef0:	2100      	movs	r1, #0
   10ef2:	f888 1000 	strb.w	r1, [r8]
   10ef6:	8839      	ldrh	r1, [r7, #0]
   10ef8:	8221      	strh	r1, [r4, #16]
   10efa:	e7e0      	b.n	10ebe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
   10efc:	2101      	movs	r1, #1
   10efe:	e7f8      	b.n	10ef2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

00010f00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
   10f00:	b510      	push	{r4, lr}
   10f02:	8a81      	ldrh	r1, [r0, #20]
   10f04:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   10f08:	3aff      	subs	r2, #255	; 0xff
   10f0a:	d002      	beq.n	10f12 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
   10f0c:	7d82      	ldrb	r2, [r0, #22]
   10f0e:	b95a      	cbnz	r2, 10f28 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   10f10:	e004      	b.n	10f1c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
   10f12:	f240 41ea 	movw	r1, #1258	; 0x4ea
   10f16:	2014      	movs	r0, #20
   10f18:	f7f3 fe8a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f1c:	8880      	ldrh	r0, [r0, #4]
   10f1e:	f7ff fd4a 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10f22:	b108      	cbz	r0, 10f28 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   10f24:	2000      	movs	r0, #0
   10f26:	bd10      	pop	{r4, pc}
   10f28:	2001      	movs	r0, #1
   10f2a:	bd10      	pop	{r4, pc}

00010f2c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   10f2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10f30:	8281      	strh	r1, [r0, #20]
   10f32:	2100      	movs	r1, #0
   10f34:	7581      	strb	r1, [r0, #22]
   10f36:	4770      	bx	lr

00010f38 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   10f38:	b510      	push	{r4, lr}
   10f3a:	8a81      	ldrh	r1, [r0, #20]
   10f3c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   10f40:	3aff      	subs	r2, #255	; 0xff
   10f42:	d004      	beq.n	10f4e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   10f44:	f240 41cd 	movw	r1, #1229	; 0x4cd
   10f48:	2014      	movs	r0, #20
   10f4a:	f7f3 fe71 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f4e:	88c1      	ldrh	r1, [r0, #6]
   10f50:	8281      	strh	r1, [r0, #20]
   10f52:	89c1      	ldrh	r1, [r0, #14]
   10f54:	b101      	cbz	r1, 10f58 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
   10f56:	2101      	movs	r1, #1
   10f58:	7581      	strb	r1, [r0, #22]
   10f5a:	bd10      	pop	{r4, pc}

00010f5c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   10f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f60:	461e      	mov	r6, r3
   10f62:	4613      	mov	r3, r2
   10f64:	460f      	mov	r7, r1
   10f66:	4604      	mov	r4, r0
   10f68:	4631      	mov	r1, r6
   10f6a:	4618      	mov	r0, r3
   10f6c:	9a06      	ldr	r2, [sp, #24]
   10f6e:	f000 f864 	bl	1103a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10f72:	4605      	mov	r5, r0
   10f74:	42af      	cmp	r7, r5
   10f76:	d201      	bcs.n	10f7c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
   10f78:	21ca      	movs	r1, #202	; 0xca
   10f7a:	e016      	b.n	10faa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
   10f7c:	2228      	movs	r2, #40	; 0x28
   10f7e:	2100      	movs	r1, #0
   10f80:	4620      	mov	r0, r4
   10f82:	f7ff f87d 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10f86:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10f8a:	82a0      	strh	r0, [r4, #20]
   10f8c:	3d28      	subs	r5, #40	; 0x28
   10f8e:	b2a8      	uxth	r0, r5
   10f90:	7766      	strb	r6, [r4, #29]
   10f92:	8060      	strh	r0, [r4, #2]
   10f94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   10f98:	d901      	bls.n	10f9e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
   10f9a:	21d0      	movs	r1, #208	; 0xd0
   10f9c:	e005      	b.n	10faa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
   10f9e:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   10fa2:	3608      	adds	r6, #8
   10fa4:	4281      	cmp	r1, r0
   10fa6:	d903      	bls.n	10fb0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
   10fa8:	21d2      	movs	r1, #210	; 0xd2
   10faa:	2014      	movs	r0, #20
   10fac:	f7f3 fe40 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10fb0:	1b80      	subs	r0, r0, r6
   10fb2:	3834      	subs	r0, #52	; 0x34
   10fb4:	b280      	uxth	r0, r0
   10fb6:	8020      	strh	r0, [r4, #0]
   10fb8:	281b      	cmp	r0, #27
   10fba:	d200      	bcs.n	10fbe <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
   10fbc:	201b      	movs	r0, #27
   10fbe:	8020      	strh	r0, [r4, #0]
   10fc0:	2000      	movs	r0, #0
   10fc2:	77a0      	strb	r0, [r4, #30]
   10fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010fc8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   10fc8:	6181      	str	r1, [r0, #24]
   10fca:	6188      	str	r0, [r1, #24]
   10fcc:	4770      	bx	lr

00010fce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   10fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fd2:	4604      	mov	r4, r0
   10fd4:	4689      	mov	r9, r1
   10fd6:	8927      	ldrh	r7, [r4, #8]
   10fd8:	f8b4 800a 	ldrh.w	r8, [r4, #10]
   10fdc:	88a1      	ldrh	r1, [r4, #4]
   10fde:	4616      	mov	r6, r2
   10fe0:	3028      	adds	r0, #40	; 0x28
   10fe2:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
   10fe6:	1885      	adds	r5, r0, r2
   10fe8:	4638      	mov	r0, r7
   10fea:	f7ff fce4 	bl	109b6 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   10fee:	b110      	cbz	r0, 10ff6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
   10ff0:	2000      	movs	r0, #0
   10ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ff6:	b10e      	cbz	r6, 10ffc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
   10ff8:	1d68      	adds	r0, r5, #5
   10ffa:	6030      	str	r0, [r6, #0]
   10ffc:	f1b9 0f00 	cmp.w	r9, #0
   11000:	d004      	beq.n	1100c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
   11002:	7f62      	ldrb	r2, [r4, #29]
   11004:	1d69      	adds	r1, r5, #5
   11006:	4648      	mov	r0, r9
   11008:	f7f3 fc86 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1100c:	882e      	ldrh	r6, [r5, #0]
   1100e:	8869      	ldrh	r1, [r5, #2]
   11010:	f104 0008 	add.w	r0, r4, #8
   11014:	b121      	cbz	r1, 11020 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
   11016:	198a      	adds	r2, r1, r6
   11018:	b296      	uxth	r6, r2
   1101a:	f7ff fcbc 	bl	10996 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
   1101e:	e006      	b.n	1102e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
   11020:	7f63      	ldrb	r3, [r4, #29]
   11022:	8862      	ldrh	r2, [r4, #2]
   11024:	3308      	adds	r3, #8
   11026:	1999      	adds	r1, r3, r6
   11028:	b289      	uxth	r1, r1
   1102a:	f7ff fc9a 	bl	10962 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1102e:	4547      	cmp	r7, r8
   11030:	d101      	bne.n	11036 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
   11032:	8920      	ldrh	r0, [r4, #8]
   11034:	8160      	strh	r0, [r4, #10]
   11036:	4630      	mov	r0, r6
   11038:	e7db      	b.n	10ff2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0001103a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   1103a:	f101 0308 	add.w	r3, r1, #8
   1103e:	4418      	add	r0, r3
   11040:	4350      	muls	r0, r2
   11042:	314a      	adds	r1, #74	; 0x4a
   11044:	4408      	add	r0, r1
   11046:	b280      	uxth	r0, r0
   11048:	4770      	bx	lr

0001104a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1104a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1104e:	4688      	mov	r8, r1
   11050:	88c1      	ldrh	r1, [r0, #6]
   11052:	4604      	mov	r4, r0
   11054:	8900      	ldrh	r0, [r0, #8]
   11056:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   1105a:	f104 0628 	add.w	r6, r4, #40	; 0x28
   1105e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   11062:	eb06 0905 	add.w	r9, r6, r5
   11066:	f7ff fcac 	bl	109c2 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
   1106a:	2300      	movs	r3, #0
   1106c:	bb80      	cbnz	r0, 110d0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x86>
   1106e:	7f60      	ldrb	r0, [r4, #29]
   11070:	42af      	cmp	r7, r5
   11072:	d904      	bls.n	1107e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
   11074:	1b79      	subs	r1, r7, r5
   11076:	3008      	adds	r0, #8
   11078:	1a09      	subs	r1, r1, r0
   1107a:	2700      	movs	r7, #0
   1107c:	e003      	b.n	11086 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
   1107e:	8861      	ldrh	r1, [r4, #2]
   11080:	3008      	adds	r0, #8
   11082:	1b49      	subs	r1, r1, r5
   11084:	1a09      	subs	r1, r1, r0
   11086:	2900      	cmp	r1, #0
   11088:	db23      	blt.n	110d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   1108a:	89e0      	ldrh	r0, [r4, #14]
   1108c:	b160      	cbz	r0, 110a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
   1108e:	f8b9 0000 	ldrh.w	r0, [r9]
   11092:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   11096:	b13a      	cbz	r2, 110a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
   11098:	1ab9      	subs	r1, r7, r2
   1109a:	7723      	strb	r3, [r4, #28]
   1109c:	4541      	cmp	r1, r8
   1109e:	db18      	blt.n	110d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   110a0:	89e1      	ldrh	r1, [r4, #14]
   110a2:	4431      	add	r1, r6
   110a4:	1a08      	subs	r0, r1, r0
   110a6:	e009      	b.n	110bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
   110a8:	1a09      	subs	r1, r1, r0
   110aa:	7723      	strb	r3, [r4, #28]
   110ac:	4541      	cmp	r1, r8
   110ae:	db0a      	blt.n	110c6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x7c>
   110b0:	7f60      	ldrb	r0, [r4, #29]
   110b2:	89e1      	ldrh	r1, [r4, #14]
   110b4:	3008      	adds	r0, #8
   110b6:	4428      	add	r0, r5
   110b8:	4431      	add	r1, r6
   110ba:	4408      	add	r0, r1
   110bc:	1ec0      	subs	r0, r0, #3
   110be:	f8a4 8012 	strh.w	r8, [r4, #18]
   110c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   110c6:	4547      	cmp	r7, r8
   110c8:	db03      	blt.n	110d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   110ca:	2101      	movs	r1, #1
   110cc:	7721      	strb	r1, [r4, #28]
   110ce:	e7e7      	b.n	110a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
   110d0:	e7ff      	b.n	110d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   110d2:	8263      	strh	r3, [r4, #18]
   110d4:	2000      	movs	r0, #0
   110d6:	e7f4      	b.n	110c2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

000110d8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   110d8:	2100      	movs	r1, #0
   110da:	81c1      	strh	r1, [r0, #14]
   110dc:	7701      	strb	r1, [r0, #28]
   110de:	8241      	strh	r1, [r0, #18]
   110e0:	75c1      	strb	r1, [r0, #23]
   110e2:	7581      	strb	r1, [r0, #22]
   110e4:	4770      	bx	lr

000110e6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   110e6:	b570      	push	{r4, r5, r6, lr}
   110e8:	2300      	movs	r3, #0
   110ea:	2908      	cmp	r1, #8
   110ec:	d204      	bcs.n	110f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   110ee:	f240 11cb 	movw	r1, #459	; 0x1cb
   110f2:	2015      	movs	r0, #21
   110f4:	f7f3 fd9c 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110f8:	6802      	ldr	r2, [r0, #0]
   110fa:	b90a      	cbnz	r2, 11100 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   110fc:	e01e      	b.n	1113c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   110fe:	4610      	mov	r0, r2
   11100:	6802      	ldr	r2, [r0, #0]
   11102:	8893      	ldrh	r3, [r2, #4]
   11104:	428b      	cmp	r3, r1
   11106:	d002      	beq.n	1110e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   11108:	6813      	ldr	r3, [r2, #0]
   1110a:	2b00      	cmp	r3, #0
   1110c:	d1f7      	bne.n	110fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   1110e:	8894      	ldrh	r4, [r2, #4]
   11110:	4613      	mov	r3, r2
   11112:	428c      	cmp	r4, r1
   11114:	d101      	bne.n	1111a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   11116:	6811      	ldr	r1, [r2, #0]
   11118:	e00d      	b.n	11136 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   1111a:	f101 0508 	add.w	r5, r1, #8
   1111e:	b2ad      	uxth	r5, r5
   11120:	42ac      	cmp	r4, r5
   11122:	d30a      	bcc.n	1113a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   11124:	1a64      	subs	r4, r4, r1
   11126:	4411      	add	r1, r2
   11128:	2200      	movs	r2, #0
   1112a:	600a      	str	r2, [r1, #0]
   1112c:	808c      	strh	r4, [r1, #4]
   1112e:	6802      	ldr	r2, [r0, #0]
   11130:	6812      	ldr	r2, [r2, #0]
   11132:	6002      	str	r2, [r0, #0]
   11134:	600a      	str	r2, [r1, #0]
   11136:	6001      	str	r1, [r0, #0]
   11138:	e000      	b.n	1113c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   1113a:	2300      	movs	r3, #0
   1113c:	4618      	mov	r0, r3
   1113e:	bd70      	pop	{r4, r5, r6, pc}

00011140 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   11140:	b510      	push	{r4, lr}
   11142:	000c      	movs	r4, r1
   11144:	d006      	beq.n	11154 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   11146:	2c08      	cmp	r4, #8
   11148:	d209      	bcs.n	1115e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   1114a:	f240 1195 	movw	r1, #405	; 0x195
   1114e:	2015      	movs	r0, #21
   11150:	f7f3 fd6e 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11154:	b108      	cbz	r0, 1115a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   11156:	2100      	movs	r1, #0
   11158:	6001      	str	r1, [r0, #0]
   1115a:	2000      	movs	r0, #0
   1115c:	bd10      	pop	{r4, pc}
   1115e:	b118      	cbz	r0, 11168 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   11160:	b2a1      	uxth	r1, r4
   11162:	6800      	ldr	r0, [r0, #0]
   11164:	f000 f814 	bl	11190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   11168:	1d20      	adds	r0, r4, #4
   1116a:	bd10      	pop	{r4, pc}

0001116c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   1116c:	2100      	movs	r1, #0
   1116e:	6802      	ldr	r2, [r0, #0]
   11170:	e003      	b.n	1117a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   11172:	8893      	ldrh	r3, [r2, #4]
   11174:	6812      	ldr	r2, [r2, #0]
   11176:	4419      	add	r1, r3
   11178:	b289      	uxth	r1, r1
   1117a:	2a00      	cmp	r2, #0
   1117c:	d1f9      	bne.n	11172 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1117e:	f000 b807 	b.w	11190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00011182 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   11182:	2300      	movs	r3, #0
   11184:	600b      	str	r3, [r1, #0]
   11186:	808a      	strh	r2, [r1, #4]
   11188:	6802      	ldr	r2, [r0, #0]
   1118a:	600a      	str	r2, [r1, #0]
   1118c:	6001      	str	r1, [r0, #0]
   1118e:	4770      	bx	lr
   11190:	2300      	movs	r3, #0
   11192:	6043      	str	r3, [r0, #4]
   11194:	1d02      	adds	r2, r0, #4
   11196:	8101      	strh	r1, [r0, #8]
   11198:	6002      	str	r2, [r0, #0]
   1119a:	4770      	bx	lr

0001119c <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
   1119c:	b50e      	push	{r1, r2, r3, lr}
   1119e:	4669      	mov	r1, sp
   111a0:	f000 f818 	bl	111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   111a4:	b120      	cbz	r0, 111b0 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
   111a6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   111aa:	2017      	movs	r0, #23
   111ac:	f7f3 fd40 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111b0:	4668      	mov	r0, sp
   111b2:	f7f3 ff9f 	bl	50f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   111b6:	b108      	cbz	r0, 111bc <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
   111b8:	2000      	movs	r0, #0
   111ba:	bd0e      	pop	{r1, r2, r3, pc}
   111bc:	2001      	movs	r0, #1
   111be:	bd0e      	pop	{r1, r2, r3, pc}

000111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   111c0:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   111c4:	3aff      	subs	r2, #255	; 0xff
   111c6:	d001      	beq.n	111cc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   111c8:	2902      	cmp	r1, #2
   111ca:	d301      	bcc.n	111d0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   111cc:	2000      	movs	r0, #0
   111ce:	4770      	bx	lr
   111d0:	f7f4 b826 	b.w	5220 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

000111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   111d4:	b570      	push	{r4, r5, r6, lr}
   111d6:	4605      	mov	r5, r0
   111d8:	460c      	mov	r4, r1
   111da:	4608      	mov	r0, r1
   111dc:	f000 f899 	bl	11312 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   111e0:	b108      	cbz	r0, 111e6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   111e2:	2010      	movs	r0, #16
   111e4:	bd70      	pop	{r4, r5, r6, pc}
   111e6:	2d02      	cmp	r5, #2
   111e8:	d301      	bcc.n	111ee <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   111ea:	2007      	movs	r0, #7
   111ec:	bd70      	pop	{r4, r5, r6, pc}
   111ee:	7025      	strb	r5, [r4, #0]
   111f0:	2000      	movs	r0, #0
   111f2:	8060      	strh	r0, [r4, #2]
   111f4:	bd70      	pop	{r4, r5, r6, pc}
   111f6:	b510      	push	{r4, lr}
   111f8:	4604      	mov	r4, r0
   111fa:	f7f3 ffd3 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   111fe:	42a0      	cmp	r0, r4
   11200:	d901      	bls.n	11206 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   11202:	2001      	movs	r0, #1
   11204:	bd10      	pop	{r4, pc}
   11206:	2000      	movs	r0, #0
   11208:	bd10      	pop	{r4, pc}

0001120a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   1120a:	b570      	push	{r4, r5, r6, lr}
   1120c:	460e      	mov	r6, r1
   1120e:	461d      	mov	r5, r3
   11210:	4611      	mov	r1, r2
   11212:	f000 f811 	bl	11238 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   11216:	4604      	mov	r4, r0
   11218:	4629      	mov	r1, r5
   1121a:	4630      	mov	r0, r6
   1121c:	f000 f803 	bl	11226 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   11220:	4420      	add	r0, r4
   11222:	1d00      	adds	r0, r0, #4
   11224:	bd70      	pop	{r4, r5, r6, pc}
   11226:	b510      	push	{r4, lr}
   11228:	460a      	mov	r2, r1
   1122a:	2101      	movs	r1, #1
   1122c:	f7ff ff05 	bl	1103a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   11230:	1cc0      	adds	r0, r0, #3
   11232:	f020 0003 	bic.w	r0, r0, #3
   11236:	bd10      	pop	{r4, pc}
   11238:	b510      	push	{r4, lr}
   1123a:	460a      	mov	r2, r1
   1123c:	2101      	movs	r1, #1
   1123e:	f7ff fefc 	bl	1103a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   11242:	1cc0      	adds	r0, r0, #3
   11244:	f020 0003 	bic.w	r0, r0, #3
   11248:	bd10      	pop	{r4, pc}
   1124a:	2800      	cmp	r0, #0
   1124c:	db09      	blt.n	11262 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
   1124e:	f000 021f 	and.w	r2, r0, #31
   11252:	2101      	movs	r1, #1
   11254:	4091      	lsls	r1, r2
   11256:	0940      	lsrs	r0, r0, #5
   11258:	0080      	lsls	r0, r0, #2
   1125a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1125e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11262:	4770      	bx	lr

00011264 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   11264:	f7f4 b9cc 	b.w	5600 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   11268:	2800      	cmp	r0, #0
   1126a:	db09      	blt.n	11280 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1c>
   1126c:	f000 021f 	and.w	r2, r0, #31
   11270:	2101      	movs	r1, #1
   11272:	4091      	lsls	r1, r2
   11274:	0940      	lsrs	r0, r0, #5
   11276:	0080      	lsls	r0, r0, #2
   11278:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1127c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11280:	4770      	bx	lr
   11282:	2800      	cmp	r0, #0
   11284:	db0d      	blt.n	112a2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x3e>
   11286:	f000 021f 	and.w	r2, r0, #31
   1128a:	2101      	movs	r1, #1
   1128c:	4091      	lsls	r1, r2
   1128e:	0940      	lsrs	r0, r0, #5
   11290:	0080      	lsls	r0, r0, #2
   11292:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11296:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1129a:	f3bf 8f4f 	dsb	sy
   1129e:	f3bf 8f6f 	isb	sy
   112a2:	4770      	bx	lr

000112a4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   112a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   112a8:	2000      	movs	r0, #0
   112aa:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   112ae:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   112b2:	2001      	movs	r0, #1
   112b4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   112b8:	4770      	bx	lr
   112ba:	2800      	cmp	r0, #0
   112bc:	db04      	blt.n	112c8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
   112be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   112c2:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
   112c6:	e005      	b.n	112d4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
   112c8:	f000 000f 	and.w	r0, r0, #15
   112cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   112d0:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
   112d4:	0940      	lsrs	r0, r0, #5
   112d6:	4770      	bx	lr
   112d8:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   112dc:	7840      	ldrb	r0, [r0, #1]
   112de:	4281      	cmp	r1, r0
   112e0:	d301      	bcc.n	112e6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
   112e2:	1a08      	subs	r0, r1, r0
   112e4:	e002      	b.n	112ec <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
   112e6:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
   112ea:	4408      	add	r0, r1
   112ec:	b2c0      	uxtb	r0, r0
   112ee:	4770      	bx	lr
   112f0:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   112f4:	2241      	movs	r2, #65	; 0x41
   112f6:	1c49      	adds	r1, r1, #1
   112f8:	fbb1 f3f2 	udiv	r3, r1, r2
   112fc:	fb02 1113 	mls	r1, r2, r3, r1
   11300:	7840      	ldrb	r0, [r0, #1]
   11302:	4281      	cmp	r1, r0
   11304:	d101      	bne.n	1130a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
   11306:	2001      	movs	r0, #1
   11308:	4770      	bx	lr
   1130a:	2000      	movs	r0, #0
   1130c:	4770      	bx	lr

0001130e <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
   1130e:	2040      	movs	r0, #64	; 0x40
   11310:	4770      	bx	lr

00011312 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   11312:	b108      	cbz	r0, 11318 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   11314:	2000      	movs	r0, #0
   11316:	4770      	bx	lr
   11318:	2001      	movs	r0, #1
   1131a:	4770      	bx	lr

0001131c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1131c:	b510      	push	{r4, lr}
   1131e:	2900      	cmp	r1, #0
   11320:	4604      	mov	r4, r0
   11322:	f04f 0106 	mov.w	r1, #6
   11326:	d002      	beq.n	1132e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   11328:	f7f4 fad8 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   1132c:	e001      	b.n	11332 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   1132e:	f7f4 faef 	bl	5910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   11332:	7960      	ldrb	r0, [r4, #5]
   11334:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   11338:	7160      	strb	r0, [r4, #5]
   1133a:	bd10      	pop	{r4, pc}

0001133c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1133c:	b530      	push	{r4, r5, lr}
   1133e:	460c      	mov	r4, r1
   11340:	4605      	mov	r5, r0
   11342:	b08d      	sub	sp, #52	; 0x34
   11344:	f04f 0103 	mov.w	r1, #3
   11348:	f104 0003 	add.w	r0, r4, #3
   1134c:	b112      	cbz	r2, 11354 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1134e:	f7f4 fac5 	bl	58dc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   11352:	e001      	b.n	11358 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   11354:	f7f4 fadc 	bl	5910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   11358:	7960      	ldrb	r0, [r4, #5]
   1135a:	220d      	movs	r2, #13
   1135c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   11360:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11364:	7160      	strb	r0, [r4, #5]
   11366:	2100      	movs	r1, #0
   11368:	a804      	add	r0, sp, #16
   1136a:	f7fe fe89 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1136e:	78e0      	ldrb	r0, [r4, #3]
   11370:	f88d 001f 	strb.w	r0, [sp, #31]
   11374:	7920      	ldrb	r0, [r4, #4]
   11376:	f88d 001e 	strb.w	r0, [sp, #30]
   1137a:	7960      	ldrb	r0, [r4, #5]
   1137c:	f88d 001d 	strb.w	r0, [sp, #29]
   11380:	6828      	ldr	r0, [r5, #0]
   11382:	9000      	str	r0, [sp, #0]
   11384:	6868      	ldr	r0, [r5, #4]
   11386:	9001      	str	r0, [sp, #4]
   11388:	68a8      	ldr	r0, [r5, #8]
   1138a:	9002      	str	r0, [sp, #8]
   1138c:	68e8      	ldr	r0, [r5, #12]
   1138e:	9003      	str	r0, [sp, #12]
   11390:	4668      	mov	r0, sp
   11392:	f7ff ff67 	bl	11264 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   11396:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1139a:	7020      	strb	r0, [r4, #0]
   1139c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   113a0:	7060      	strb	r0, [r4, #1]
   113a2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   113a6:	70a0      	strb	r0, [r4, #2]
   113a8:	b00d      	add	sp, #52	; 0x34
   113aa:	bd30      	pop	{r4, r5, pc}

000113ac <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   113ac:	b510      	push	{r4, lr}
   113ae:	f7fc ff45 	bl	e23c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   113b2:	2800      	cmp	r0, #0
   113b4:	bf04      	itt	eq
   113b6:	20ff      	moveq	r0, #255	; 0xff
   113b8:	bd10      	popeq	{r4, pc}
   113ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113be:	f7fc befb 	b.w	e1b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

000113c2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   113c2:	b510      	push	{r4, lr}
   113c4:	f7f5 fe52 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   113c8:	2810      	cmp	r0, #16
   113ca:	bf04      	itt	eq
   113cc:	2000      	moveq	r0, #0
   113ce:	bd10      	popeq	{r4, pc}
   113d0:	f7f5 ff06 	bl	71e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
   113d4:	2001      	movs	r0, #1
   113d6:	bd10      	pop	{r4, pc}

000113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   113d8:	b570      	push	{r4, r5, r6, lr}
   113da:	460c      	mov	r4, r1
   113dc:	4605      	mov	r5, r0
   113de:	2100      	movs	r1, #0
   113e0:	f7ff feee 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   113e4:	6060      	str	r0, [r4, #4]
   113e6:	b110      	cbz	r0, 113ee <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   113e8:	2000      	movs	r0, #0
   113ea:	7020      	strb	r0, [r4, #0]
   113ec:	bd70      	pop	{r4, r5, r6, pc}
   113ee:	2101      	movs	r1, #1
   113f0:	4628      	mov	r0, r5
   113f2:	f7ff fee5 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   113f6:	6060      	str	r0, [r4, #4]
   113f8:	2800      	cmp	r0, #0
   113fa:	bf04      	itt	eq
   113fc:	2002      	moveq	r0, #2
   113fe:	bd70      	popeq	{r4, r5, r6, pc}
   11400:	2001      	movs	r0, #1
   11402:	7020      	strb	r0, [r4, #0]
   11404:	2000      	movs	r0, #0
   11406:	bd70      	pop	{r4, r5, r6, pc}

00011408 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   11408:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   1140c:	2906      	cmp	r1, #6
   1140e:	bf9a      	itte	ls
   11410:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   11414:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   11418:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1141c:	4348      	muls	r0, r1
   1141e:	4770      	bx	lr

00011420 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   11420:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   11424:	f241 7270 	movw	r2, #6000	; 0x1770
   11428:	4291      	cmp	r1, r2
   1142a:	bf94      	ite	ls
   1142c:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   11430:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   11434:	fbb0 f0f1 	udiv	r0, r0, r1
   11438:	bf98      	it	ls
   1143a:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   1143e:	b280      	uxth	r0, r0
   11440:	4770      	bx	lr

00011442 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   11442:	b570      	push	{r4, r5, r6, lr}
   11444:	4604      	mov	r4, r0
   11446:	4290      	cmp	r0, r2
   11448:	bf28      	it	cs
   1144a:	bd70      	popcs	{r4, r5, r6, pc}
   1144c:	1b10      	subs	r0, r2, r4
   1144e:	2864      	cmp	r0, #100	; 0x64
   11450:	d30b      	bcc.n	1146a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   11452:	1825      	adds	r5, r4, r0
   11454:	428d      	cmp	r5, r1
   11456:	d806      	bhi.n	11466 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   11458:	2104      	movs	r1, #4
   1145a:	f7f0 fedb 	bl	2214 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1145e:	2800      	cmp	r0, #0
   11460:	bf04      	itt	eq
   11462:	4628      	moveq	r0, r5
   11464:	bd70      	popeq	{r4, r5, r6, pc}
   11466:	4620      	mov	r0, r4
   11468:	bd70      	pop	{r4, r5, r6, pc}
   1146a:	2064      	movs	r0, #100	; 0x64
   1146c:	e7f1      	b.n	11452 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

0001146e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   1146e:	290c      	cmp	r1, #12
   11470:	d265      	bcs.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11472:	e8df f001 	tbb	[pc, r1]
   11476:	0906      	.short	0x0906
   11478:	1b16130e 	.word	0x1b16130e
   1147c:	5e433c32 	.word	0x5e433c32
   11480:	504a      	.short	0x504a
   11482:	2a00      	cmp	r2, #0
   11484:	d05d      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11486:	e05a      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11488:	2a07      	cmp	r2, #7
   1148a:	bf18      	it	ne
   1148c:	2a08      	cmpne	r2, #8
   1148e:	d058      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11490:	e055      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11492:	2a0c      	cmp	r2, #12
   11494:	bf18      	it	ne
   11496:	2a0b      	cmpne	r2, #11
   11498:	d053      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1149a:	e050      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1149c:	2a0d      	cmp	r2, #13
   1149e:	d050      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114a0:	e04d      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114a2:	f1a2 000f 	sub.w	r0, r2, #15
   114a6:	280c      	cmp	r0, #12
   114a8:	d94b      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114aa:	e048      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114ac:	b123      	cbz	r3, 114b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
   114ae:	f1a2 0010 	sub.w	r0, r2, #16
   114b2:	280b      	cmp	r0, #11
   114b4:	d945      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114b6:	e042      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114b8:	2a12      	cmp	r2, #18
   114ba:	bf18      	it	ne
   114bc:	2a11      	cmpne	r2, #17
   114be:	d040      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114c0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   114c4:	b120      	cbz	r0, 114d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
   114c6:	2a12      	cmp	r2, #18
   114c8:	d339      	bcc.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114ca:	2a1a      	cmp	r2, #26
   114cc:	d939      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114ce:	e036      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114d0:	2a16      	cmp	r2, #22
   114d2:	d334      	bcc.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114d4:	2a1a      	cmp	r2, #26
   114d6:	d934      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114d8:	e031      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114da:	f1a2 010f 	sub.w	r1, r2, #15
   114de:	2903      	cmp	r1, #3
   114e0:	d92f      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114e2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   114e6:	b318      	cbz	r0, 11530 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   114e8:	2a1b      	cmp	r2, #27
   114ea:	d92a      	bls.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114ec:	e027      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114ee:	b113      	cbz	r3, 114f6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
   114f0:	2a04      	cmp	r2, #4
   114f2:	d026      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114f4:	e023      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114f6:	2a04      	cmp	r2, #4
   114f8:	d121      	bne.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   114fa:	e022      	b.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   114fc:	b113      	cbz	r3, 11504 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   114fe:	2a06      	cmp	r2, #6
   11500:	d01f      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11502:	e01c      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11504:	2a01      	cmp	r2, #1
   11506:	d11a      	bne.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11508:	e01b      	b.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1150a:	2a1c      	cmp	r2, #28
   1150c:	bf1c      	itt	ne
   1150e:	2a1d      	cmpne	r2, #29
   11510:	2a1e      	cmpne	r2, #30
   11512:	d016      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11514:	e013      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11516:	2a1f      	cmp	r2, #31
   11518:	bf18      	it	ne
   1151a:	2a20      	cmpne	r2, #32
   1151c:	d011      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1151e:	2a21      	cmp	r2, #33	; 0x21
   11520:	bf18      	it	ne
   11522:	2a22      	cmpne	r2, #34	; 0x22
   11524:	d00d      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11526:	2a23      	cmp	r2, #35	; 0x23
   11528:	bf1c      	itt	ne
   1152a:	2a24      	cmpne	r2, #36	; 0x24
   1152c:	2a26      	cmpne	r2, #38	; 0x26
   1152e:	d008      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11530:	e005      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   11532:	b113      	cbz	r3, 1153a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
   11534:	2a0e      	cmp	r2, #14
   11536:	d004      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   11538:	e001      	b.n	1153e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1153a:	2a05      	cmp	r2, #5
   1153c:	d001      	beq.n	11542 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1153e:	2000      	movs	r0, #0
   11540:	4770      	bx	lr
   11542:	2001      	movs	r0, #1
   11544:	4770      	bx	lr

00011546 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   11546:	280c      	cmp	r0, #12
   11548:	bf18      	it	ne
   1154a:	280b      	cmpne	r0, #11
   1154c:	d010      	beq.n	11570 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1154e:	280d      	cmp	r0, #13
   11550:	bf18      	it	ne
   11552:	281f      	cmpne	r0, #31
   11554:	d00c      	beq.n	11570 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   11556:	2820      	cmp	r0, #32
   11558:	bf18      	it	ne
   1155a:	2821      	cmpne	r0, #33	; 0x21
   1155c:	d008      	beq.n	11570 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1155e:	2822      	cmp	r0, #34	; 0x22
   11560:	bf18      	it	ne
   11562:	2823      	cmpne	r0, #35	; 0x23
   11564:	d004      	beq.n	11570 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   11566:	2824      	cmp	r0, #36	; 0x24
   11568:	bf1e      	ittt	ne
   1156a:	2826      	cmpne	r0, #38	; 0x26
   1156c:	2000      	movne	r0, #0
   1156e:	4770      	bxne	lr
   11570:	f04f 0001 	mov.w	r0, #1
   11574:	4770      	bx	lr

00011576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   11576:	f011 0f0c 	tst.w	r1, #12
   1157a:	d013      	beq.n	115a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
   1157c:	f001 0104 	and.w	r1, r1, #4
   11580:	2900      	cmp	r1, #0
   11582:	bf0d      	iteet	eq
   11584:	2240      	moveq	r2, #64	; 0x40
   11586:	2210      	movne	r2, #16
   11588:	2196      	movne	r1, #150	; 0x96
   1158a:	f44f 7116 	moveq.w	r1, #600	; 0x258
   1158e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   11592:	eba0 0301 	sub.w	r3, r0, r1
   11596:	4288      	cmp	r0, r1
   11598:	bf88      	it	hi
   1159a:	fb93 f0f2 	sdivhi	r0, r3, r2
   1159e:	d90e      	bls.n	115be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   115a0:	b280      	uxth	r0, r0
   115a2:	4770      	bx	lr
   115a4:	2902      	cmp	r1, #2
   115a6:	d002      	beq.n	115ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   115a8:	2870      	cmp	r0, #112	; 0x70
   115aa:	d908      	bls.n	115be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   115ac:	e009      	b.n	115c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
   115ae:	283c      	cmp	r0, #60	; 0x3c
   115b0:	d905      	bls.n	115be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   115b2:	383c      	subs	r0, #60	; 0x3c
   115b4:	17c1      	asrs	r1, r0, #31
   115b6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   115ba:	1080      	asrs	r0, r0, #2
   115bc:	e7f0      	b.n	115a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   115be:	2000      	movs	r0, #0
   115c0:	e7ee      	b.n	115a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   115c2:	3870      	subs	r0, #112	; 0x70
   115c4:	17c1      	asrs	r1, r0, #31
   115c6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   115ca:	10c0      	asrs	r0, r0, #3
   115cc:	e7e8      	b.n	115a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

000115ce <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   115ce:	6809      	ldr	r1, [r1, #0]
   115d0:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
   115d4:	4770      	bx	lr

000115d6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   115d6:	f010 0f01 	tst.w	r0, #1
   115da:	bf1c      	itt	ne
   115dc:	2001      	movne	r0, #1
   115de:	4770      	bxne	lr
   115e0:	f010 0f02 	tst.w	r0, #2
   115e4:	bf1c      	itt	ne
   115e6:	2002      	movne	r0, #2
   115e8:	4770      	bxne	lr
   115ea:	f010 0004 	ands.w	r0, r0, #4
   115ee:	bf18      	it	ne
   115f0:	2008      	movne	r0, #8
   115f2:	4770      	bx	lr

000115f4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   115f4:	2901      	cmp	r1, #1
   115f6:	d008      	beq.n	1160a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   115f8:	2902      	cmp	r1, #2
   115fa:	d00b      	beq.n	11614 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   115fc:	2904      	cmp	r1, #4
   115fe:	bf12      	itee	ne
   11600:	2908      	cmpne	r1, #8
   11602:	f640 60a6 	movweq	r0, #3750	; 0xea6
   11606:	4770      	bxeq	lr
   11608:	e007      	b.n	1161a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   1160a:	2800      	cmp	r0, #0
   1160c:	bf04      	itt	eq
   1160e:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   11612:	4770      	bxeq	lr
   11614:	f640 10c4 	movw	r0, #2500	; 0x9c4
   11618:	4770      	bx	lr
   1161a:	b510      	push	{r4, lr}
   1161c:	f240 514b 	movw	r1, #1355	; 0x54b
   11620:	2029      	movs	r0, #41	; 0x29
   11622:	f7f3 fb05 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011626 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   11626:	2a16      	cmp	r2, #22
   11628:	d110      	bne.n	1164c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   1162a:	222a      	movs	r2, #42	; 0x2a
   1162c:	280c      	cmp	r0, #12
   1162e:	bf18      	it	ne
   11630:	280d      	cmpne	r0, #13
   11632:	d00f      	beq.n	11654 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   11634:	f04f 0c23 	mov.w	ip, #35	; 0x23
   11638:	281f      	cmp	r0, #31
   1163a:	d00d      	beq.n	11658 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1163c:	b131      	cbz	r1, 1164c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   1163e:	7808      	ldrb	r0, [r1, #0]
   11640:	2801      	cmp	r0, #1
   11642:	bf18      	it	ne
   11644:	2800      	cmpne	r0, #0
   11646:	d005      	beq.n	11654 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   11648:	2816      	cmp	r0, #22
   1164a:	d005      	beq.n	11658 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1164c:	2000      	movs	r0, #0
   1164e:	4770      	bx	lr
   11650:	2001      	movs	r0, #1
   11652:	4770      	bx	lr
   11654:	701a      	strb	r2, [r3, #0]
   11656:	e7fb      	b.n	11650 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   11658:	f883 c000 	strb.w	ip, [r3]
   1165c:	e7f8      	b.n	11650 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

0001165e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   1165e:	b438      	push	{r3, r4, r5}
   11660:	b2cb      	uxtb	r3, r1
   11662:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   11666:	b2c1      	uxtb	r1, r0
   11668:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1166c:	2b01      	cmp	r3, #1
   1166e:	d007      	beq.n	11680 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x22>
   11670:	2b02      	cmp	r3, #2
   11672:	d009      	beq.n	11688 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x2a>
   11674:	2b04      	cmp	r3, #4
   11676:	bf08      	it	eq
   11678:	f1bc 0f04 	cmpeq.w	ip, #4
   1167c:	d02d      	beq.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1167e:	e006      	b.n	1168e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   11680:	f1bc 0f01 	cmp.w	ip, #1
   11684:	d103      	bne.n	1168e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   11686:	e028      	b.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   11688:	f1bc 0f02 	cmp.w	ip, #2
   1168c:	d025      	beq.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1168e:	2901      	cmp	r1, #1
   11690:	d006      	beq.n	116a0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x42>
   11692:	2902      	cmp	r1, #2
   11694:	d007      	beq.n	116a6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x48>
   11696:	2904      	cmp	r1, #4
   11698:	bf08      	it	eq
   1169a:	2c04      	cmpeq	r4, #4
   1169c:	d01d      	beq.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   1169e:	e004      	b.n	116aa <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   116a0:	2c01      	cmp	r4, #1
   116a2:	d102      	bne.n	116aa <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   116a4:	e019      	b.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   116a6:	2c02      	cmp	r4, #2
   116a8:	d017      	beq.n	116da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   116aa:	ea01 010c 	and.w	r1, r1, ip
   116ae:	f361 0207 	bfi	r2, r1, #0, #8
   116b2:	ea04 0103 	and.w	r1, r4, r3
   116b6:	f361 220f 	bfi	r2, r1, #8, #8
   116ba:	b2d1      	uxtb	r1, r2
   116bc:	f011 0f02 	tst.w	r1, #2
   116c0:	bf18      	it	ne
   116c2:	2302      	movne	r3, #2
   116c4:	d010      	beq.n	116e8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x8a>
   116c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   116ca:	f88d 3000 	strb.w	r3, [sp]
   116ce:	f011 0f02 	tst.w	r1, #2
   116d2:	bf18      	it	ne
   116d4:	2102      	movne	r1, #2
   116d6:	d11b      	bne.n	11710 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   116d8:	e011      	b.n	116fe <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xa0>
   116da:	4021      	ands	r1, r4
   116dc:	ea03 030c 	and.w	r3, r3, ip
   116e0:	4019      	ands	r1, r3
   116e2:	f361 0207 	bfi	r2, r1, #0, #8
   116e6:	e7e6      	b.n	116b6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x58>
   116e8:	f011 0f01 	tst.w	r1, #1
   116ec:	bf18      	it	ne
   116ee:	2301      	movne	r3, #1
   116f0:	d1e9      	bne.n	116c6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   116f2:	f011 0f04 	tst.w	r1, #4
   116f6:	bf14      	ite	ne
   116f8:	2308      	movne	r3, #8
   116fa:	2300      	moveq	r3, #0
   116fc:	e7e3      	b.n	116c6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   116fe:	f011 0f01 	tst.w	r1, #1
   11702:	bf18      	it	ne
   11704:	2101      	movne	r1, #1
   11706:	d103      	bne.n	11710 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   11708:	f011 0104 	ands.w	r1, r1, #4
   1170c:	bf18      	it	ne
   1170e:	2108      	movne	r1, #8
   11710:	f88d 1001 	strb.w	r1, [sp, #1]
   11714:	2b08      	cmp	r3, #8
   11716:	bf01      	itttt	eq
   11718:	0c00      	lsreq	r0, r0, #16
   1171a:	2801      	cmpeq	r0, #1
   1171c:	2004      	moveq	r0, #4
   1171e:	f88d 0000 	strbeq.w	r0, [sp]
   11722:	f8bd 0000 	ldrh.w	r0, [sp]
   11726:	bc38      	pop	{r3, r4, r5}
   11728:	4770      	bx	lr

0001172a <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   1172a:	f04f 0c00 	mov.w	ip, #0
   1172e:	2908      	cmp	r1, #8
   11730:	d002      	beq.n	11738 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   11732:	2904      	cmp	r1, #4
   11734:	d009      	beq.n	1174a <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   11736:	e011      	b.n	1175c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   11738:	2801      	cmp	r0, #1
   1173a:	d10f      	bne.n	1175c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1173c:	2004      	movs	r0, #4
   1173e:	7090      	strb	r0, [r2, #2]
   11740:	f882 c003 	strb.w	ip, [r2, #3]
   11744:	8013      	strh	r3, [r2, #0]
   11746:	2001      	movs	r0, #1
   11748:	4770      	bx	lr
   1174a:	2801      	cmp	r0, #1
   1174c:	d006      	beq.n	1175c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1174e:	2008      	movs	r0, #8
   11750:	7090      	strb	r0, [r2, #2]
   11752:	f882 c003 	strb.w	ip, [r2, #3]
   11756:	8013      	strh	r3, [r2, #0]
   11758:	2001      	movs	r0, #1
   1175a:	4770      	bx	lr
   1175c:	2000      	movs	r0, #0
   1175e:	4770      	bx	lr

00011760 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   11760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11764:	460c      	mov	r4, r1
   11766:	4605      	mov	r5, r0
   11768:	68c7      	ldr	r7, [r0, #12]
   1176a:	f7f1 f9c9 	bl	2b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1176e:	b198      	cbz	r0, 11798 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   11770:	b1bc      	cbz	r4, 117a2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   11772:	4638      	mov	r0, r7
   11774:	68e9      	ldr	r1, [r5, #12]
   11776:	f7f0 fe75 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1177a:	2800      	cmp	r0, #0
   1177c:	dd11      	ble.n	117a2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1177e:	4420      	add	r0, r4
   11780:	1e40      	subs	r0, r0, #1
   11782:	fbb0 f6f4 	udiv	r6, r0, r4
   11786:	fb06 f104 	mul.w	r1, r6, r4
   1178a:	4638      	mov	r0, r7
   1178c:	f7f0 fe34 	bl	23f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   11790:	60e8      	str	r0, [r5, #12]
   11792:	4630      	mov	r0, r6
   11794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11798:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   1179c:	2029      	movs	r0, #41	; 0x29
   1179e:	f7f3 fa47 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   117a2:	2000      	movs	r0, #0
   117a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000117a8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   117a8:	b538      	push	{r3, r4, r5, lr}
   117aa:	4605      	mov	r5, r0
   117ac:	460c      	mov	r4, r1
   117ae:	4668      	mov	r0, sp
   117b0:	f7fd fdb4 	bl	f31c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   117b4:	2800      	cmp	r0, #0
   117b6:	bf08      	it	eq
   117b8:	bd38      	popeq	{r3, r4, r5, pc}
   117ba:	f99d 2000 	ldrsb.w	r2, [sp]
   117be:	7222      	strb	r2, [r4, #8]
   117c0:	7ee0      	ldrb	r0, [r4, #27]
   117c2:	7260      	strb	r0, [r4, #9]
   117c4:	f994 100a 	ldrsb.w	r1, [r4, #10]
   117c8:	2000      	movs	r0, #0
   117ca:	1a51      	subs	r1, r2, r1
   117cc:	bf48      	it	mi
   117ce:	4249      	negmi	r1, r1
   117d0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   117d4:	428b      	cmp	r3, r1
   117d6:	bfc8      	it	gt
   117d8:	bd38      	popgt	{r3, r4, r5, pc}
   117da:	2bff      	cmp	r3, #255	; 0xff
   117dc:	bf08      	it	eq
   117de:	bd38      	popeq	{r3, r4, r5, pc}
   117e0:	7ae1      	ldrb	r1, [r4, #11]
   117e2:	1c49      	adds	r1, r1, #1
   117e4:	b2c9      	uxtb	r1, r1
   117e6:	72e1      	strb	r1, [r4, #11]
   117e8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   117ec:	4299      	cmp	r1, r3
   117ee:	d803      	bhi.n	117f8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   117f0:	7aa1      	ldrb	r1, [r4, #10]
   117f2:	297f      	cmp	r1, #127	; 0x7f
   117f4:	bf18      	it	ne
   117f6:	bd38      	popne	{r3, r4, r5, pc}
   117f8:	72a2      	strb	r2, [r4, #10]
   117fa:	2000      	movs	r0, #0
   117fc:	72e0      	strb	r0, [r4, #11]
   117fe:	2001      	movs	r0, #1
   11800:	bd38      	pop	{r3, r4, r5, pc}

00011802 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   11802:	2300      	movs	r3, #0
   11804:	6203      	str	r3, [r0, #32]
   11806:	8502      	strh	r2, [r0, #40]	; 0x28
   11808:	f240 2371 	movw	r3, #625	; 0x271
   1180c:	435a      	muls	r2, r3
   1180e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   11812:	1e52      	subs	r2, r2, #1
   11814:	fbb2 f1f1 	udiv	r1, r2, r1
   11818:	6241      	str	r1, [r0, #36]	; 0x24
   1181a:	4770      	bx	lr

0001181c <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   1181c:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   11820:	4281      	cmp	r1, r0
   11822:	bf38      	it	cc
   11824:	4608      	movcc	r0, r1
   11826:	1a08      	subs	r0, r1, r0
   11828:	6819      	ldr	r1, [r3, #0]
   1182a:	0840      	lsrs	r0, r0, #1
   1182c:	4401      	add	r1, r0
   1182e:	6019      	str	r1, [r3, #0]
   11830:	6811      	ldr	r1, [r2, #0]
   11832:	eba1 0100 	sub.w	r1, r1, r0
   11836:	6011      	str	r1, [r2, #0]
   11838:	bf18      	it	ne
   1183a:	2001      	movne	r0, #1
   1183c:	4770      	bx	lr

0001183e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   1183e:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11842:	4291      	cmp	r1, r2
   11844:	bf34      	ite	cc
   11846:	2164      	movcc	r1, #100	; 0x64
   11848:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   1184c:	4348      	muls	r0, r1
   1184e:	4770      	bx	lr

00011850 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   11850:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11854:	4291      	cmp	r1, r2
   11856:	bf34      	ite	cc
   11858:	2164      	movcc	r1, #100	; 0x64
   1185a:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   1185e:	fb10 f001 	smulbb	r0, r0, r1
   11862:	4770      	bx	lr
   11864:	b510      	push	{r4, lr}
   11866:	7c0a      	ldrb	r2, [r1, #16]
   11868:	f002 021f 	and.w	r2, r2, #31
   1186c:	740a      	strb	r2, [r1, #16]
   1186e:	2200      	movs	r2, #0
   11870:	7642      	strb	r2, [r0, #25]
   11872:	188b      	adds	r3, r1, r2
   11874:	f893 c00c 	ldrb.w	ip, [r3, #12]
   11878:	f00c 0301 	and.w	r3, ip, #1
   1187c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   11880:	f00c 0401 	and.w	r4, ip, #1
   11884:	4423      	add	r3, r4
   11886:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1188a:	f00c 0401 	and.w	r4, ip, #1
   1188e:	4423      	add	r3, r4
   11890:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   11894:	f00c 0401 	and.w	r4, ip, #1
   11898:	4423      	add	r3, r4
   1189a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1189e:	f00c 0401 	and.w	r4, ip, #1
   118a2:	4423      	add	r3, r4
   118a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   118a8:	f00c 0401 	and.w	r4, ip, #1
   118ac:	4423      	add	r3, r4
   118ae:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   118b2:	f00c 0401 	and.w	r4, ip, #1
   118b6:	4423      	add	r3, r4
   118b8:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   118bc:	eb00 0c02 	add.w	ip, r0, r2
   118c0:	1c52      	adds	r2, r2, #1
   118c2:	f88c 3014 	strb.w	r3, [ip, #20]
   118c6:	f890 c019 	ldrb.w	ip, [r0, #25]
   118ca:	2a05      	cmp	r2, #5
   118cc:	4463      	add	r3, ip
   118ce:	7643      	strb	r3, [r0, #25]
   118d0:	dbcf      	blt.n	11872 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   118d2:	b2d8      	uxtb	r0, r3
   118d4:	2825      	cmp	r0, #37	; 0x25
   118d6:	bf98      	it	ls
   118d8:	bd10      	popls	{r4, pc}
   118da:	21d8      	movs	r1, #216	; 0xd8
   118dc:	2029      	movs	r0, #41	; 0x29
   118de:	f7f3 f9a7 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000118e2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   118e2:	b430      	push	{r4, r5}
   118e4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   118e8:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   118ec:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   118f0:	7903      	ldrb	r3, [r0, #4]
   118f2:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   118f6:	2900      	cmp	r1, #0
   118f8:	bf18      	it	ne
   118fa:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   118fe:	d903      	bls.n	11908 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   11900:	f640 5107 	movw	r1, #3335	; 0xd07
   11904:	428a      	cmp	r2, r1
   11906:	d90b      	bls.n	11920 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   11908:	1f91      	subs	r1, r2, #6
   1190a:	f640 457a 	movw	r5, #3194	; 0xc7a
   1190e:	42a9      	cmp	r1, r5
   11910:	d80f      	bhi.n	11932 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   11912:	b173      	cbz	r3, 11932 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   11914:	2b08      	cmp	r3, #8
   11916:	bf98      	it	ls
   11918:	4293      	cmpls	r3, r2
   1191a:	d20a      	bcs.n	11932 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1191c:	4562      	cmp	r2, ip
   1191e:	d308      	bcc.n	11932 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   11920:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   11924:	d205      	bcs.n	11932 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   11926:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1192a:	bf9e      	ittt	ls
   1192c:	2001      	movls	r0, #1
   1192e:	bc30      	popls	{r4, r5}
   11930:	4770      	bxls	lr
   11932:	2000      	movs	r0, #0
   11934:	bc30      	pop	{r4, r5}
   11936:	4770      	bx	lr

00011938 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   11938:	1d02      	adds	r2, r0, #4
   1193a:	4608      	mov	r0, r1
   1193c:	4611      	mov	r1, r2
   1193e:	f001 bf36 	b.w	137ae <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

00011942 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   11942:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   11946:	4770      	bx	lr

00011948 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   11948:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1194c:	4770      	bx	lr

0001194e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   1194e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   11952:	4770      	bx	lr

00011954 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   11954:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   11958:	4770      	bx	lr

0001195a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   1195a:	8980      	ldrh	r0, [r0, #12]
   1195c:	8008      	strh	r0, [r1, #0]
   1195e:	4770      	bx	lr

00011960 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   11960:	f8d0 0016 	ldr.w	r0, [r0, #22]
   11964:	6008      	str	r0, [r1, #0]
   11966:	4770      	bx	lr

00011968 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   11968:	6842      	ldr	r2, [r0, #4]
   1196a:	600a      	str	r2, [r1, #0]
   1196c:	6880      	ldr	r0, [r0, #8]
   1196e:	6048      	str	r0, [r1, #4]
   11970:	4770      	bx	lr

00011972 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   11972:	f8d0 200e 	ldr.w	r2, [r0, #14]
   11976:	600a      	str	r2, [r1, #0]
   11978:	f8d0 0012 	ldr.w	r0, [r0, #18]
   1197c:	6048      	str	r0, [r1, #4]
   1197e:	4770      	bx	lr

00011980 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   11980:	6842      	ldr	r2, [r0, #4]
   11982:	600a      	str	r2, [r1, #0]
   11984:	6880      	ldr	r0, [r0, #8]
   11986:	6048      	str	r0, [r1, #4]
   11988:	4770      	bx	lr

0001198a <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   1198a:	7840      	ldrb	r0, [r0, #1]
   1198c:	4770      	bx	lr

0001198e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   1198e:	7800      	ldrb	r0, [r0, #0]
   11990:	f000 0003 	and.w	r0, r0, #3
   11994:	4770      	bx	lr

00011996 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   11996:	7900      	ldrb	r0, [r0, #4]
   11998:	4770      	bx	lr

0001199a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   1199a:	8880      	ldrh	r0, [r0, #4]
   1199c:	4770      	bx	lr

0001199e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   1199e:	88c0      	ldrh	r0, [r0, #6]
   119a0:	4770      	bx	lr

000119a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   119a2:	8900      	ldrh	r0, [r0, #8]
   119a4:	4770      	bx	lr

000119a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   119a6:	8940      	ldrh	r0, [r0, #10]
   119a8:	4770      	bx	lr

000119aa <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   119aa:	88c0      	ldrh	r0, [r0, #6]
   119ac:	4770      	bx	lr

000119ae <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   119ae:	7940      	ldrb	r0, [r0, #5]
   119b0:	4770      	bx	lr

000119b2 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   119b2:	7900      	ldrb	r0, [r0, #4]
   119b4:	4770      	bx	lr

000119b6 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   119b6:	7900      	ldrb	r0, [r0, #4]
   119b8:	4770      	bx	lr

000119ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   119ba:	8901      	ldrh	r1, [r0, #8]
   119bc:	291b      	cmp	r1, #27
   119be:	bf24      	itt	cs
   119c0:	8941      	ldrhcs	r1, [r0, #10]
   119c2:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   119c6:	d307      	bcc.n	119d8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   119c8:	8881      	ldrh	r1, [r0, #4]
   119ca:	291b      	cmp	r1, #27
   119cc:	bf21      	itttt	cs
   119ce:	88c0      	ldrhcs	r0, [r0, #6]
   119d0:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   119d4:	2001      	movcs	r0, #1
   119d6:	4770      	bxcs	lr
   119d8:	2000      	movs	r0, #0
   119da:	4770      	bx	lr

000119dc <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   119dc:	b510      	push	{r4, lr}
   119de:	29fb      	cmp	r1, #251	; 0xfb
   119e0:	bf9c      	itt	ls
   119e2:	7041      	strbls	r1, [r0, #1]
   119e4:	bd10      	popls	{r4, pc}
   119e6:	f240 5156 	movw	r1, #1366	; 0x556
   119ea:	202a      	movs	r0, #42	; 0x2a
   119ec:	f7f3 f920 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000119f0 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   119f0:	7901      	ldrb	r1, [r0, #4]
   119f2:	f011 0f07 	tst.w	r1, #7
   119f6:	bf1b      	ittet	ne
   119f8:	7940      	ldrbne	r0, [r0, #5]
   119fa:	f010 0f07 	tstne.w	r0, #7
   119fe:	2000      	moveq	r0, #0
   11a00:	2001      	movne	r0, #1
   11a02:	4770      	bx	lr

00011a04 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   11a04:	7901      	ldrb	r1, [r0, #4]
   11a06:	f011 0f07 	tst.w	r1, #7
   11a0a:	bf1b      	ittet	ne
   11a0c:	7940      	ldrbne	r0, [r0, #5]
   11a0e:	f010 0f07 	tstne.w	r0, #7
   11a12:	2000      	moveq	r0, #0
   11a14:	2001      	movne	r0, #1
   11a16:	4770      	bx	lr

00011a18 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   11a18:	7900      	ldrb	r0, [r0, #4]
   11a1a:	4770      	bx	lr

00011a1c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   11a1c:	7940      	ldrb	r0, [r0, #5]
   11a1e:	4770      	bx	lr

00011a20 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   11a20:	7101      	strb	r1, [r0, #4]
   11a22:	4770      	bx	lr

00011a24 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   11a24:	7141      	strb	r1, [r0, #5]
   11a26:	4770      	bx	lr

00011a28 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   11a28:	b510      	push	{r4, lr}
   11a2a:	2a1b      	cmp	r2, #27
   11a2c:	d904      	bls.n	11a38 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   11a2e:	f240 31bd 	movw	r1, #957	; 0x3bd
   11a32:	202a      	movs	r0, #42	; 0x2a
   11a34:	f7f3 f8fc 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11a38:	7042      	strb	r2, [r0, #1]
   11a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a3e:	1cc0      	adds	r0, r0, #3
   11a40:	f7f2 bf6a 	b.w	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

00011a44 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   11a44:	6809      	ldr	r1, [r1, #0]
   11a46:	60c1      	str	r1, [r0, #12]
   11a48:	4770      	bx	lr

00011a4a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   11a4a:	680a      	ldr	r2, [r1, #0]
   11a4c:	6042      	str	r2, [r0, #4]
   11a4e:	6849      	ldr	r1, [r1, #4]
   11a50:	6081      	str	r1, [r0, #8]
   11a52:	4770      	bx	lr

00011a54 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   11a54:	680a      	ldr	r2, [r1, #0]
   11a56:	6042      	str	r2, [r0, #4]
   11a58:	6849      	ldr	r1, [r1, #4]
   11a5a:	6081      	str	r1, [r0, #8]
   11a5c:	4770      	bx	lr

00011a5e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   11a5e:	680a      	ldr	r2, [r1, #0]
   11a60:	6042      	str	r2, [r0, #4]
   11a62:	6849      	ldr	r1, [r1, #4]
   11a64:	6081      	str	r1, [r0, #8]
   11a66:	4770      	bx	lr

00011a68 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   11a68:	7802      	ldrb	r2, [r0, #0]
   11a6a:	f001 0103 	and.w	r1, r1, #3
   11a6e:	f022 0203 	bic.w	r2, r2, #3
   11a72:	4311      	orrs	r1, r2
   11a74:	7001      	strb	r1, [r0, #0]
   11a76:	4770      	bx	lr

00011a78 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   11a78:	7101      	strb	r1, [r0, #4]
   11a7a:	0a09      	lsrs	r1, r1, #8
   11a7c:	7141      	strb	r1, [r0, #5]
   11a7e:	4770      	bx	lr

00011a80 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   11a80:	7181      	strb	r1, [r0, #6]
   11a82:	0a09      	lsrs	r1, r1, #8
   11a84:	71c1      	strb	r1, [r0, #7]
   11a86:	4770      	bx	lr

00011a88 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   11a88:	7201      	strb	r1, [r0, #8]
   11a8a:	0a09      	lsrs	r1, r1, #8
   11a8c:	7241      	strb	r1, [r0, #9]
   11a8e:	4770      	bx	lr

00011a90 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   11a90:	7281      	strb	r1, [r0, #10]
   11a92:	0a09      	lsrs	r1, r1, #8
   11a94:	72c1      	strb	r1, [r0, #11]
   11a96:	4770      	bx	lr

00011a98 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   11a98:	7800      	ldrb	r0, [r0, #0]
   11a9a:	f000 000f 	and.w	r0, r0, #15
   11a9e:	4770      	bx	lr

00011aa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   11aa0:	b430      	push	{r4, r5}
   11aa2:	7802      	ldrb	r2, [r0, #0]
   11aa4:	f002 020f 	and.w	r2, r2, #15
   11aa8:	2a03      	cmp	r2, #3
   11aaa:	d02d      	beq.n	11b08 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   11aac:	2a05      	cmp	r2, #5
   11aae:	d12e      	bne.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11ab0:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   11ab4:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   11ab8:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   11abc:	7d83      	ldrb	r3, [r0, #22]
   11abe:	2900      	cmp	r1, #0
   11ac0:	bf18      	it	ne
   11ac2:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   11ac6:	d907      	bls.n	11ad8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   11ac8:	f640 5107 	movw	r1, #3335	; 0xd07
   11acc:	428a      	cmp	r2, r1
   11ace:	d803      	bhi.n	11ad8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   11ad0:	7841      	ldrb	r1, [r0, #1]
   11ad2:	2922      	cmp	r1, #34	; 0x22
   11ad4:	d11b      	bne.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11ad6:	e00e      	b.n	11af6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   11ad8:	7841      	ldrb	r1, [r0, #1]
   11ada:	2922      	cmp	r1, #34	; 0x22
   11adc:	d117      	bne.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11ade:	1f91      	subs	r1, r2, #6
   11ae0:	f640 457a 	movw	r5, #3194	; 0xc7a
   11ae4:	42a9      	cmp	r1, r5
   11ae6:	d812      	bhi.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11ae8:	b18b      	cbz	r3, 11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11aea:	2b08      	cmp	r3, #8
   11aec:	bf98      	it	ls
   11aee:	4293      	cmpls	r3, r2
   11af0:	d20d      	bcs.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11af2:	4562      	cmp	r2, ip
   11af4:	d30b      	bcc.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11af6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   11afa:	d208      	bcs.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11afc:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   11b00:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   11b04:	d803      	bhi.n	11b0e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   11b06:	e005      	b.n	11b14 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   11b08:	7840      	ldrb	r0, [r0, #1]
   11b0a:	280c      	cmp	r0, #12
   11b0c:	d002      	beq.n	11b14 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   11b0e:	bc30      	pop	{r4, r5}
   11b10:	2000      	movs	r0, #0
   11b12:	4770      	bx	lr
   11b14:	bc30      	pop	{r4, r5}
   11b16:	2001      	movs	r0, #1
   11b18:	4770      	bx	lr

00011b1a <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   11b1a:	22c0      	movs	r2, #192	; 0xc0
   11b1c:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   11b20:	78c2      	ldrb	r2, [r0, #3]
   11b22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   11b26:	4311      	orrs	r1, r2
   11b28:	70c1      	strb	r1, [r0, #3]
   11b2a:	4770      	bx	lr

00011b2c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   11b2c:	b570      	push	{r4, r5, r6, lr}
   11b2e:	4614      	mov	r4, r2
   11b30:	4605      	mov	r5, r0
   11b32:	2a1f      	cmp	r2, #31
   11b34:	d903      	bls.n	11b3e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   11b36:	21b0      	movs	r1, #176	; 0xb0
   11b38:	202a      	movs	r0, #42	; 0x2a
   11b3a:	f7f3 f879 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b3e:	f105 0009 	add.w	r0, r5, #9
   11b42:	f7f2 fee9 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11b46:	1da0      	adds	r0, r4, #6
   11b48:	7068      	strb	r0, [r5, #1]
   11b4a:	bd70      	pop	{r4, r5, r6, pc}

00011b4c <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   11b4c:	b570      	push	{r4, r5, r6, lr}
   11b4e:	461e      	mov	r6, r3
   11b50:	000c      	movs	r4, r1
   11b52:	4605      	mov	r5, r0
   11b54:	d00a      	beq.n	11b6c <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   11b56:	4611      	mov	r1, r2
   11b58:	f7f5 fec4 	bl	78e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   11b5c:	b158      	cbz	r0, 11b76 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   11b5e:	4428      	add	r0, r5
   11b60:	4632      	mov	r2, r6
   11b62:	4621      	mov	r1, r4
   11b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b68:	f7f2 bed6 	b.w	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11b6c:	f240 21be 	movw	r1, #702	; 0x2be
   11b70:	202a      	movs	r0, #42	; 0x2a
   11b72:	f7f3 f85d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b76:	f240 21bf 	movw	r1, #703	; 0x2bf
   11b7a:	202a      	movs	r0, #42	; 0x2a
   11b7c:	f7f3 f858 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011b80 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   11b80:	b2c9      	uxtb	r1, r1
   11b82:	f001 0201 	and.w	r2, r1, #1
   11b86:	f3c1 0340 	ubfx	r3, r1, #1, #1
   11b8a:	441a      	add	r2, r3
   11b8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11b90:	f3c1 0380 	ubfx	r3, r1, #2, #1
   11b94:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   11b98:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   11b9c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   11ba0:	f3c1 1300 	ubfx	r3, r1, #4, #1
   11ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11ba8:	441a      	add	r2, r3
   11baa:	f3c1 1340 	ubfx	r3, r1, #5, #1
   11bae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11bb2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   11bb6:	f3c1 1380 	ubfx	r3, r1, #6, #1
   11bba:	441a      	add	r2, r3
   11bbc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   11bc0:	d002      	beq.n	11bc8 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   11bc2:	1c52      	adds	r2, r2, #1
   11bc4:	b2d2      	uxtb	r2, r2
   11bc6:	7101      	strb	r1, [r0, #4]
   11bc8:	78c3      	ldrb	r3, [r0, #3]
   11bca:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   11bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11bd2:	4319      	orrs	r1, r3
   11bd4:	70c1      	strb	r1, [r0, #3]
   11bd6:	1c51      	adds	r1, r2, #1
   11bd8:	7041      	strb	r1, [r0, #1]
   11bda:	4770      	bx	lr

00011bdc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   11bdc:	b510      	push	{r4, lr}
   11bde:	7802      	ldrb	r2, [r0, #0]
   11be0:	f001 030f 	and.w	r3, r1, #15
   11be4:	f022 020f 	bic.w	r2, r2, #15
   11be8:	431a      	orrs	r2, r3
   11bea:	7002      	strb	r2, [r0, #0]
   11bec:	2909      	cmp	r1, #9
   11bee:	d213      	bcs.n	11c18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   11bf0:	e8df f001 	tbb	[pc, r1]
   11bf4:	07050705 	.word	0x07050705
   11bf8:	0b050905 	.word	0x0b050905
   11bfc:	000f      	.short	0x000f
   11bfe:	2106      	movs	r1, #6
   11c00:	e008      	b.n	11c14 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11c02:	210c      	movs	r1, #12
   11c04:	e006      	b.n	11c14 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11c06:	2122      	movs	r1, #34	; 0x22
   11c08:	e004      	b.n	11c14 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11c0a:	2101      	movs	r1, #1
   11c0c:	2200      	movs	r2, #0
   11c0e:	70c2      	strb	r2, [r0, #3]
   11c10:	e000      	b.n	11c14 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   11c12:	210e      	movs	r1, #14
   11c14:	7041      	strb	r1, [r0, #1]
   11c16:	bd10      	pop	{r4, pc}
   11c18:	216e      	movs	r1, #110	; 0x6e
   11c1a:	202a      	movs	r0, #42	; 0x2a
   11c1c:	f7f3 f808 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011c20 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   11c20:	680a      	ldr	r2, [r1, #0]
   11c22:	f8c0 2009 	str.w	r2, [r0, #9]
   11c26:	8889      	ldrh	r1, [r1, #4]
   11c28:	f8a0 100d 	strh.w	r1, [r0, #13]
   11c2c:	4770      	bx	lr

00011c2e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   11c2e:	7802      	ldrb	r2, [r0, #0]
   11c30:	2380      	movs	r3, #128	; 0x80
   11c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11c36:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   11c3a:	4311      	orrs	r1, r2
   11c3c:	7001      	strb	r1, [r0, #0]
   11c3e:	4770      	bx	lr

00011c40 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   11c40:	680a      	ldr	r2, [r1, #0]
   11c42:	f8c0 2003 	str.w	r2, [r0, #3]
   11c46:	8889      	ldrh	r1, [r1, #4]
   11c48:	f8a0 1007 	strh.w	r1, [r0, #7]
   11c4c:	4770      	bx	lr

00011c4e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   11c4e:	7802      	ldrb	r2, [r0, #0]
   11c50:	2340      	movs	r3, #64	; 0x40
   11c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11c56:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   11c5a:	4311      	orrs	r1, r2
   11c5c:	7001      	strb	r1, [r0, #0]
   11c5e:	4770      	bx	lr

00011c60 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   11c60:	b570      	push	{r4, r5, r6, lr}
   11c62:	4614      	mov	r4, r2
   11c64:	4605      	mov	r5, r0
   11c66:	2a1f      	cmp	r2, #31
   11c68:	d903      	bls.n	11c72 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   11c6a:	21d2      	movs	r1, #210	; 0xd2
   11c6c:	202a      	movs	r0, #42	; 0x2a
   11c6e:	f7f2 ffdf 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11c72:	f105 0009 	add.w	r0, r5, #9
   11c76:	f7f2 fe4f 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11c7a:	1da0      	adds	r0, r4, #6
   11c7c:	7068      	strb	r0, [r5, #1]
   11c7e:	bd70      	pop	{r4, r5, r6, pc}

00011c80 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   11c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c84:	4604      	mov	r4, r0
   11c86:	b082      	sub	sp, #8
   11c88:	4688      	mov	r8, r1
   11c8a:	2000      	movs	r0, #0
   11c8c:	f7f3 f9e0 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   11c90:	4605      	mov	r5, r0
   11c92:	2001      	movs	r0, #1
   11c94:	f7f3 f9dc 	bl	5050 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   11c98:	4428      	add	r0, r5
   11c9a:	b2c7      	uxtb	r7, r0
   11c9c:	2600      	movs	r6, #0
   11c9e:	eb17 0508 	adds.w	r5, r7, r8
   11ca2:	bf18      	it	ne
   11ca4:	f04f 0800 	movne.w	r8, #0
   11ca8:	d01c      	beq.n	11ce4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   11caa:	8820      	ldrh	r0, [r4, #0]
   11cac:	1c40      	adds	r0, r0, #1
   11cae:	b280      	uxth	r0, r0
   11cb0:	8020      	strh	r0, [r4, #0]
   11cb2:	42a8      	cmp	r0, r5
   11cb4:	bf28      	it	cs
   11cb6:	f8a4 8000 	strhcs.w	r8, [r4]
   11cba:	8820      	ldrh	r0, [r4, #0]
   11cbc:	42b8      	cmp	r0, r7
   11cbe:	bf28      	it	cs
   11cc0:	4285      	cmpcs	r5, r0
   11cc2:	d903      	bls.n	11ccc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   11cc4:	b002      	add	sp, #8
   11cc6:	2000      	movs	r0, #0
   11cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ccc:	4669      	mov	r1, sp
   11cce:	f7ff fb83 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11cd2:	2800      	cmp	r0, #0
   11cd4:	bf04      	itt	eq
   11cd6:	b002      	addeq	sp, #8
   11cd8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cdc:	1c70      	adds	r0, r6, #1
   11cde:	b2c6      	uxtb	r6, r0
   11ce0:	42b5      	cmp	r5, r6
   11ce2:	d8e2      	bhi.n	11caa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   11ce4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   11ce8:	8020      	strh	r0, [r4, #0]
   11cea:	b002      	add	sp, #8
   11cec:	2012      	movs	r0, #18
   11cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011cf2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   11cf2:	7801      	ldrb	r1, [r0, #0]
   11cf4:	2900      	cmp	r1, #0
   11cf6:	bf08      	it	eq
   11cf8:	4770      	bxeq	lr
   11cfa:	6841      	ldr	r1, [r0, #4]
   11cfc:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   11d00:	2a00      	cmp	r2, #0
   11d02:	bf08      	it	eq
   11d04:	4770      	bxeq	lr
   11d06:	2200      	movs	r2, #0
   11d08:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   11d0c:	6840      	ldr	r0, [r0, #4]
   11d0e:	f000 bb7f 	b.w	12410 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

00011d12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   11d12:	b430      	push	{r4, r5}
   11d14:	8050      	strh	r0, [r2, #2]
   11d16:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   11d1a:	f8a2 c004 	strh.w	ip, [r2, #4]
   11d1e:	898b      	ldrh	r3, [r1, #12]
   11d20:	80d3      	strh	r3, [r2, #6]
   11d22:	8948      	ldrh	r0, [r1, #10]
   11d24:	8110      	strh	r0, [r2, #8]
   11d26:	89cc      	ldrh	r4, [r1, #14]
   11d28:	8154      	strh	r4, [r2, #10]
   11d2a:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   11d2c:	42a5      	cmp	r5, r4
   11d2e:	bf04      	itt	eq
   11d30:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   11d32:	4284      	cmpeq	r4, r0
   11d34:	d106      	bne.n	11d44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   11d36:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   11d38:	429c      	cmp	r4, r3
   11d3a:	bf02      	ittt	eq
   11d3c:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   11d3e:	4563      	cmpeq	r3, ip
   11d40:	2300      	moveq	r3, #0
   11d42:	d001      	beq.n	11d48 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   11d44:	f04f 0301 	mov.w	r3, #1
   11d48:	7313      	strb	r3, [r2, #12]
   11d4a:	8548      	strh	r0, [r1, #42]	; 0x2a
   11d4c:	8950      	ldrh	r0, [r2, #10]
   11d4e:	85c8      	strh	r0, [r1, #46]	; 0x2e
   11d50:	8890      	ldrh	r0, [r2, #4]
   11d52:	8588      	strh	r0, [r1, #44]	; 0x2c
   11d54:	88d0      	ldrh	r0, [r2, #6]
   11d56:	8608      	strh	r0, [r1, #48]	; 0x30
   11d58:	f04f 0001 	mov.w	r0, #1
   11d5c:	7010      	strb	r0, [r2, #0]
   11d5e:	bc30      	pop	{r4, r5}
   11d60:	4770      	bx	lr

00011d62 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   11d62:	b570      	push	{r4, r5, r6, lr}
   11d64:	460c      	mov	r4, r1
   11d66:	4616      	mov	r6, r2
   11d68:	6841      	ldr	r1, [r0, #4]
   11d6a:	2596      	movs	r5, #150	; 0x96
   11d6c:	f641 524c 	movw	r2, #7500	; 0x1d4c
   11d70:	4291      	cmp	r1, r2
   11d72:	bf38      	it	cc
   11d74:	254d      	movcc	r5, #77	; 0x4d
   11d76:	f7f6 f9c7 	bl	8108 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x68>
   11d7a:	4428      	add	r0, r5
   11d7c:	4430      	add	r0, r6
   11d7e:	42a0      	cmp	r0, r4
   11d80:	bf94      	ite	ls
   11d82:	1a20      	subls	r0, r4, r0
   11d84:	2000      	movhi	r0, #0
   11d86:	bd70      	pop	{r4, r5, r6, pc}

00011d88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   11d88:	b4f0      	push	{r4, r5, r6, r7}
   11d8a:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   11d8e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   11d90:	8e46      	ldrh	r6, [r0, #50]	; 0x32
   11d92:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
   11d94:	428a      	cmp	r2, r1
   11d96:	bf28      	it	cs
   11d98:	460a      	movcs	r2, r1
   11d9a:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
   11d9e:	f04f 0c00 	mov.w	ip, #0
   11da2:	f011 0f0c 	tst.w	r1, #12
   11da6:	bf18      	it	ne
   11da8:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   11dac:	d106      	bne.n	11dbc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x34>
   11dae:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   11db2:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   11db6:	428b      	cmp	r3, r1
   11db8:	bf38      	it	cc
   11dba:	4619      	movcc	r1, r3
   11dbc:	8642      	strh	r2, [r0, #50]	; 0x32
   11dbe:	86c1      	strh	r1, [r0, #54]	; 0x36
   11dc0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   11dc2:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   11dc4:	4294      	cmp	r4, r2
   11dc6:	bf38      	it	cc
   11dc8:	4614      	movcc	r4, r2
   11dca:	428b      	cmp	r3, r1
   11dcc:	bf38      	it	cc
   11dce:	460b      	movcc	r3, r1
   11dd0:	8704      	strh	r4, [r0, #56]	; 0x38
   11dd2:	8743      	strh	r3, [r0, #58]	; 0x3a
   11dd4:	42b2      	cmp	r2, r6
   11dd6:	bf0a      	itet	eq
   11dd8:	42a9      	cmpeq	r1, r5
   11dda:	2301      	movne	r3, #1
   11ddc:	2300      	moveq	r3, #0
   11dde:	8e05      	ldrh	r5, [r0, #48]	; 0x30
   11de0:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   11de4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11de6:	8e84      	ldrh	r4, [r0, #52]	; 0x34
   11de8:	428a      	cmp	r2, r1
   11dea:	bf28      	it	cs
   11dec:	460a      	movcs	r2, r1
   11dee:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
   11df2:	f011 0f0c 	tst.w	r1, #12
   11df6:	bf18      	it	ne
   11df8:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   11dfc:	d106      	bne.n	11e0c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   11dfe:	f8b0 6046 	ldrh.w	r6, [r0, #70]	; 0x46
   11e02:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   11e06:	428e      	cmp	r6, r1
   11e08:	bf38      	it	cc
   11e0a:	4631      	movcc	r1, r6
   11e0c:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
   11e10:	2e02      	cmp	r6, #2
   11e12:	d00a      	beq.n	11e2a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
   11e14:	8602      	strh	r2, [r0, #48]	; 0x30
   11e16:	8681      	strh	r1, [r0, #52]	; 0x34
   11e18:	42aa      	cmp	r2, r5
   11e1a:	bf0a      	itet	eq
   11e1c:	42a1      	cmpeq	r1, r4
   11e1e:	2001      	movne	r0, #1
   11e20:	2000      	moveq	r0, #0
   11e22:	ea40 0003 	orr.w	r0, r0, r3
   11e26:	bcf0      	pop	{r4, r5, r6, r7}
   11e28:	4770      	bx	lr
   11e2a:	4295      	cmp	r5, r2
   11e2c:	bf38      	it	cc
   11e2e:	462a      	movcc	r2, r5
   11e30:	428c      	cmp	r4, r1
   11e32:	bf38      	it	cc
   11e34:	4621      	movcc	r1, r4
   11e36:	f880 c05c 	strb.w	ip, [r0, #92]	; 0x5c
   11e3a:	e7eb      	b.n	11e14 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8c>

00011e3c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   11e3c:	b570      	push	{r4, r5, r6, lr}
   11e3e:	4615      	mov	r5, r2
   11e40:	460e      	mov	r6, r1
   11e42:	4604      	mov	r4, r0
   11e44:	f7f6 f960 	bl	8108 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x68>
   11e48:	6863      	ldr	r3, [r4, #4]
   11e4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11e4c:	4299      	cmp	r1, r3
   11e4e:	bf38      	it	cc
   11e50:	460b      	movcc	r3, r1
   11e52:	1b99      	subs	r1, r3, r6
   11e54:	4428      	add	r0, r5
   11e56:	4288      	cmp	r0, r1
   11e58:	bf38      	it	cc
   11e5a:	4608      	movcc	r0, r1
   11e5c:	62e0      	str	r0, [r4, #44]	; 0x2c
   11e5e:	bd70      	pop	{r4, r5, r6, pc}

00011e60 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   11e60:	221b      	movs	r2, #27
   11e62:	8402      	strh	r2, [r0, #32]
   11e64:	8382      	strh	r2, [r0, #28]
   11e66:	82c2      	strh	r2, [r0, #22]
   11e68:	8282      	strh	r2, [r0, #20]
   11e6a:	8142      	strh	r2, [r0, #10]
   11e6c:	8202      	strh	r2, [r0, #16]
   11e6e:	8102      	strh	r2, [r0, #8]
   11e70:	8542      	strh	r2, [r0, #42]	; 0x2a
   11e72:	8582      	strh	r2, [r0, #44]	; 0x2c
   11e74:	8482      	strh	r2, [r0, #36]	; 0x24
   11e76:	b159      	cbz	r1, 11e90 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   11e78:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   11e7c:	8441      	strh	r1, [r0, #34]	; 0x22
   11e7e:	83c1      	strh	r1, [r0, #30]
   11e80:	8341      	strh	r1, [r0, #26]
   11e82:	8301      	strh	r1, [r0, #24]
   11e84:	81c1      	strh	r1, [r0, #14]
   11e86:	8241      	strh	r1, [r0, #18]
   11e88:	8181      	strh	r1, [r0, #12]
   11e8a:	85c1      	strh	r1, [r0, #46]	; 0x2e
   11e8c:	8601      	strh	r1, [r0, #48]	; 0x30
   11e8e:	4770      	bx	lr
   11e90:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11e94:	8441      	strh	r1, [r0, #34]	; 0x22
   11e96:	83c1      	strh	r1, [r0, #30]
   11e98:	8341      	strh	r1, [r0, #26]
   11e9a:	8301      	strh	r1, [r0, #24]
   11e9c:	81c1      	strh	r1, [r0, #14]
   11e9e:	8241      	strh	r1, [r0, #18]
   11ea0:	8181      	strh	r1, [r0, #12]
   11ea2:	85c1      	strh	r1, [r0, #46]	; 0x2e
   11ea4:	8601      	strh	r1, [r0, #48]	; 0x30
   11ea6:	4770      	bx	lr

00011ea8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   11ea8:	6800      	ldr	r0, [r0, #0]
   11eaa:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   11eae:	4290      	cmp	r0, r2
   11eb0:	bf9c      	itt	ls
   11eb2:	2000      	movls	r0, #0
   11eb4:	4770      	bxls	lr
   11eb6:	1a40      	subs	r0, r0, r1
   11eb8:	389c      	subs	r0, #156	; 0x9c
   11eba:	0840      	lsrs	r0, r0, #1
   11ebc:	4770      	bx	lr

00011ebe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   11ebe:	f8dd c000 	ldr.w	ip, [sp]
   11ec2:	8281      	strh	r1, [r0, #20]
   11ec4:	82c2      	strh	r2, [r0, #22]
   11ec6:	8303      	strh	r3, [r0, #24]
   11ec8:	f8a0 c01a 	strh.w	ip, [r0, #26]
   11ecc:	4770      	bx	lr

00011ece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   11ece:	8050      	strh	r0, [r2, #2]
   11ed0:	8a88      	ldrh	r0, [r1, #20]
   11ed2:	8090      	strh	r0, [r2, #4]
   11ed4:	8ac8      	ldrh	r0, [r1, #22]
   11ed6:	80d0      	strh	r0, [r2, #6]
   11ed8:	8b08      	ldrh	r0, [r1, #24]
   11eda:	8110      	strh	r0, [r2, #8]
   11edc:	8b48      	ldrh	r0, [r1, #26]
   11ede:	8150      	strh	r0, [r2, #10]
   11ee0:	2001      	movs	r0, #1
   11ee2:	7010      	strb	r0, [r2, #0]
   11ee4:	4770      	bx	lr
   11ee6:	2001      	movs	r0, #1
   11ee8:	f7f6 be08 	b.w	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   11eec:	2001      	movs	r0, #1
   11eee:	f7f6 be05 	b.w	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   11ef2:	b510      	push	{r4, lr}
   11ef4:	f7f7 f878 	bl	8fe8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   11ef8:	2800      	cmp	r0, #0
   11efa:	bf18      	it	ne
   11efc:	bd10      	popne	{r4, pc}
   11efe:	2000      	movs	r0, #0
   11f00:	f7f6 fdfc 	bl	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   11f04:	2000      	movs	r0, #0
   11f06:	bd10      	pop	{r4, pc}
   11f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f0c:	f244 2455 	movw	r4, #16981	; 0x4255
   11f10:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11f14:	f04f 0910 	mov.w	r9, #16
   11f18:	f00c 0801 	and.w	r8, ip, #1
   11f1c:	f3cc 0a40 	ubfx	sl, ip, #1, #1
   11f20:	f100 0c0b 	add.w	ip, r0, #11
   11f24:	fb0c fc04 	mul.w	ip, ip, r4
   11f28:	ea4f 579c 	mov.w	r7, ip, lsr #22
   11f2c:	ea58 0b0a 	orrs.w	fp, r8, sl
   11f30:	f44f 75c8 	mov.w	r5, #400	; 0x190
   11f34:	f44f 76bf 	mov.w	r6, #382	; 0x17e
   11f38:	f04f 0400 	mov.w	r4, #0
   11f3c:	f04f 0c40 	mov.w	ip, #64	; 0x40
   11f40:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
   11f44:	f000 810b 	beq.w	1215e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x290>
   11f48:	f1ba 0f00 	cmp.w	sl, #0
   11f4c:	d01c      	beq.n	11f88 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
   11f4e:	2a08      	cmp	r2, #8
   11f50:	bf04      	itt	eq
   11f52:	46ab      	moveq	fp, r5
   11f54:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   11f58:	d00f      	beq.n	11f7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xac>
   11f5a:	2a04      	cmp	r2, #4
   11f5c:	bf04      	itt	eq
   11f5e:	46b3      	moveq	fp, r6
   11f60:	f04f 0a10 	moveq.w	sl, #16
   11f64:	d009      	beq.n	11f7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xac>
   11f66:	2a02      	cmp	r2, #2
   11f68:	bf07      	ittee	eq
   11f6a:	f104 0b18 	addeq.w	fp, r4, #24
   11f6e:	f04f 0a04 	moveq.w	sl, #4
   11f72:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
   11f76:	f04f 0a08 	movne.w	sl, #8
   11f7a:	eb0a 0e8a 	add.w	lr, sl, sl, lsl #2
   11f7e:	eb0e 1a8a 	add.w	sl, lr, sl, lsl #6
   11f82:	44da      	add	sl, fp
   11f84:	4451      	add	r1, sl
   11f86:	e03b      	b.n	12000 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x132>
   11f88:	b1d3      	cbz	r3, 11fc0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
   11f8a:	2a08      	cmp	r2, #8
   11f8c:	bf04      	itt	eq
   11f8e:	46aa      	moveq	sl, r5
   11f90:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   11f94:	d00f      	beq.n	11fb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe8>
   11f96:	2a04      	cmp	r2, #4
   11f98:	bf04      	itt	eq
   11f9a:	46b2      	moveq	sl, r6
   11f9c:	f04f 0b10 	moveq.w	fp, #16
   11fa0:	d009      	beq.n	11fb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe8>
   11fa2:	2a02      	cmp	r2, #2
   11fa4:	bf07      	ittee	eq
   11fa6:	f104 0a18 	addeq.w	sl, r4, #24
   11faa:	f04f 0b04 	moveq.w	fp, #4
   11fae:	f104 0a28 	addne.w	sl, r4, #40	; 0x28
   11fb2:	f04f 0b08 	movne.w	fp, #8
   11fb6:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
   11fba:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
   11fbe:	e01e      	b.n	11ffe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x130>
   11fc0:	28ff      	cmp	r0, #255	; 0xff
   11fc2:	bf34      	ite	cc
   11fc4:	4682      	movcc	sl, r0
   11fc6:	f04f 0aff 	movcs.w	sl, #255	; 0xff
   11fca:	f10a 0a05 	add.w	sl, sl, #5
   11fce:	2a08      	cmp	r2, #8
   11fd0:	d024      	beq.n	1201c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x14e>
   11fd2:	2a04      	cmp	r2, #4
   11fd4:	bf04      	itt	eq
   11fd6:	fb0a 1a09 	mlaeq	sl, sl, r9, r1
   11fda:	212e      	moveq	r1, #46	; 0x2e
   11fdc:	d021      	beq.n	12022 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x154>
   11fde:	2a02      	cmp	r2, #2
   11fe0:	bf0c      	ite	eq
   11fe2:	f04f 0b04 	moveq.w	fp, #4
   11fe6:	f04f 0b08 	movne.w	fp, #8
   11fea:	fb0a 1a0b 	mla	sl, sl, fp, r1
   11fee:	bf07      	ittee	eq
   11ff0:	4621      	moveq	r1, r4
   11ff2:	f04f 0b18 	moveq.w	fp, #24
   11ff6:	2100      	movne	r1, #0
   11ff8:	f04f 0b28 	movne.w	fp, #40	; 0x28
   11ffc:	4459      	add	r1, fp
   11ffe:	4451      	add	r1, sl
   12000:	319c      	adds	r1, #156	; 0x9c
   12002:	f002 0a0c 	and.w	sl, r2, #12
   12006:	f1ba 0f00 	cmp.w	sl, #0
   1200a:	bf18      	it	ne
   1200c:	f04f 0a28 	movne.w	sl, #40	; 0x28
   12010:	4451      	add	r1, sl
   12012:	bf18      	it	ne
   12014:	f501 6141 	addne.w	r1, r1, #3088	; 0xc10
   12018:	d123      	bne.n	12062 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x194>
   1201a:	e005      	b.n	12028 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x15a>
   1201c:	fb0a 1a0c 	mla	sl, sl, ip, r1
   12020:	4661      	mov	r1, ip
   12022:	f44f 7ba8 	mov.w	fp, #336	; 0x150
   12026:	e7e9      	b.n	11ffc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x12e>
   12028:	2a08      	cmp	r2, #8
   1202a:	bf04      	itt	eq
   1202c:	46ab      	moveq	fp, r5
   1202e:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   12032:	d00f      	beq.n	12054 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x186>
   12034:	2a04      	cmp	r2, #4
   12036:	bf04      	itt	eq
   12038:	46b3      	moveq	fp, r6
   1203a:	f04f 0a10 	moveq.w	sl, #16
   1203e:	d009      	beq.n	12054 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x186>
   12040:	2a02      	cmp	r2, #2
   12042:	bf07      	ittee	eq
   12044:	f104 0b18 	addeq.w	fp, r4, #24
   12048:	f04f 0a04 	moveq.w	sl, #4
   1204c:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
   12050:	f04f 0a08 	movne.w	sl, #8
   12054:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   12058:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   1205c:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
   12060:	4451      	add	r1, sl
   12062:	3198      	adds	r1, #152	; 0x98
   12064:	f1b8 0f00 	cmp.w	r8, #0
   12068:	d017      	beq.n	1209a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1cc>
   1206a:	2a08      	cmp	r2, #8
   1206c:	bf08      	it	eq
   1206e:	2040      	moveq	r0, #64	; 0x40
   12070:	d00c      	beq.n	1208c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1be>
   12072:	2a04      	cmp	r2, #4
   12074:	bf04      	itt	eq
   12076:	4635      	moveq	r5, r6
   12078:	2010      	moveq	r0, #16
   1207a:	d007      	beq.n	1208c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1be>
   1207c:	2a02      	cmp	r2, #2
   1207e:	bf07      	ittee	eq
   12080:	f104 0518 	addeq.w	r5, r4, #24
   12084:	2004      	moveq	r0, #4
   12086:	f104 0528 	addne.w	r5, r4, #40	; 0x28
   1208a:	2008      	movne	r0, #8
   1208c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   12090:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   12094:	4428      	add	r0, r5
   12096:	4401      	add	r1, r0
   12098:	e05d      	b.n	12156 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   1209a:	b1db      	cbz	r3, 120d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x206>
   1209c:	2a08      	cmp	r2, #8
   1209e:	bf04      	itt	eq
   120a0:	462b      	moveq	r3, r5
   120a2:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   120a6:	d00f      	beq.n	120c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1fa>
   120a8:	2a04      	cmp	r2, #4
   120aa:	bf04      	itt	eq
   120ac:	4633      	moveq	r3, r6
   120ae:	f04f 0c10 	moveq.w	ip, #16
   120b2:	d009      	beq.n	120c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1fa>
   120b4:	2a02      	cmp	r2, #2
   120b6:	bf07      	ittee	eq
   120b8:	f104 0318 	addeq.w	r3, r4, #24
   120bc:	f04f 0c04 	moveq.w	ip, #4
   120c0:	f104 0328 	addne.w	r3, r4, #40	; 0x28
   120c4:	f04f 0c08 	movne.w	ip, #8
   120c8:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   120cc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   120d0:	4419      	add	r1, r3
   120d2:	e020      	b.n	12116 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x248>
   120d4:	28ff      	cmp	r0, #255	; 0xff
   120d6:	bf34      	ite	cc
   120d8:	4603      	movcc	r3, r0
   120da:	23ff      	movcs	r3, #255	; 0xff
   120dc:	1d5b      	adds	r3, r3, #5
   120de:	2a08      	cmp	r2, #8
   120e0:	bf08      	it	eq
   120e2:	fb03 110c 	mlaeq	r1, r3, ip, r1
   120e6:	d01f      	beq.n	12128 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x25a>
   120e8:	2a04      	cmp	r2, #4
   120ea:	bf04      	itt	eq
   120ec:	fb03 1109 	mlaeq	r1, r3, r9, r1
   120f0:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   120f4:	d018      	beq.n	12128 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x25a>
   120f6:	2a02      	cmp	r2, #2
   120f8:	bf0c      	ite	eq
   120fa:	f04f 0c04 	moveq.w	ip, #4
   120fe:	f04f 0c08 	movne.w	ip, #8
   12102:	fb03 110c 	mla	r1, r3, ip, r1
   12106:	bf07      	ittee	eq
   12108:	46a4      	moveq	ip, r4
   1210a:	2318      	moveq	r3, #24
   1210c:	f04f 0c00 	movne.w	ip, #0
   12110:	2328      	movne	r3, #40	; 0x28
   12112:	4463      	add	r3, ip
   12114:	4419      	add	r1, r3
   12116:	28eb      	cmp	r0, #235	; 0xeb
   12118:	d91d      	bls.n	12156 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   1211a:	2a08      	cmp	r2, #8
   1211c:	d00a      	beq.n	12134 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x266>
   1211e:	2a04      	cmp	r2, #4
   12120:	d005      	beq.n	1212e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x260>
   12122:	2a02      	cmp	r2, #2
   12124:	d008      	beq.n	12138 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x26a>
   12126:	e00b      	b.n	12140 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x272>
   12128:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1212c:	e7f1      	b.n	12112 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x244>
   1212e:	4635      	mov	r5, r6
   12130:	2010      	movs	r0, #16
   12132:	e008      	b.n	12146 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   12134:	2040      	movs	r0, #64	; 0x40
   12136:	e006      	b.n	12146 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   12138:	f104 0518 	add.w	r5, r4, #24
   1213c:	2004      	movs	r0, #4
   1213e:	e002      	b.n	12146 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   12140:	f104 0528 	add.w	r5, r4, #40	; 0x28
   12144:	2008      	movs	r0, #8
   12146:	eb00 1080 	add.w	r0, r0, r0, lsl #6
   1214a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1214e:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   12152:	fb07 1100 	mla	r1, r7, r0, r1
   12156:	f101 00ea 	add.w	r0, r1, #234	; 0xea
   1215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215e:	b1db      	cbz	r3, 12198 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2ca>
   12160:	2a08      	cmp	r2, #8
   12162:	bf04      	itt	eq
   12164:	462b      	moveq	r3, r5
   12166:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   1216a:	d00f      	beq.n	1218c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2be>
   1216c:	2a04      	cmp	r2, #4
   1216e:	bf04      	itt	eq
   12170:	4633      	moveq	r3, r6
   12172:	f04f 0c10 	moveq.w	ip, #16
   12176:	d009      	beq.n	1218c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2be>
   12178:	2a02      	cmp	r2, #2
   1217a:	bf07      	ittee	eq
   1217c:	f104 0318 	addeq.w	r3, r4, #24
   12180:	f04f 0c04 	moveq.w	ip, #4
   12184:	f104 0328 	addne.w	r3, r4, #40	; 0x28
   12188:	f04f 0c08 	movne.w	ip, #8
   1218c:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   12190:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   12194:	4419      	add	r1, r3
   12196:	e020      	b.n	121da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30c>
   12198:	28ff      	cmp	r0, #255	; 0xff
   1219a:	bf34      	ite	cc
   1219c:	4603      	movcc	r3, r0
   1219e:	23ff      	movcs	r3, #255	; 0xff
   121a0:	1d5b      	adds	r3, r3, #5
   121a2:	2a08      	cmp	r2, #8
   121a4:	bf08      	it	eq
   121a6:	fb03 110c 	mlaeq	r1, r3, ip, r1
   121aa:	d01f      	beq.n	121ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x31e>
   121ac:	2a04      	cmp	r2, #4
   121ae:	bf04      	itt	eq
   121b0:	fb03 1109 	mlaeq	r1, r3, r9, r1
   121b4:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   121b8:	d018      	beq.n	121ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x31e>
   121ba:	2a02      	cmp	r2, #2
   121bc:	bf0c      	ite	eq
   121be:	f04f 0c04 	moveq.w	ip, #4
   121c2:	f04f 0c08 	movne.w	ip, #8
   121c6:	fb03 110c 	mla	r1, r3, ip, r1
   121ca:	bf07      	ittee	eq
   121cc:	46a4      	moveq	ip, r4
   121ce:	2318      	moveq	r3, #24
   121d0:	f04f 0c00 	movne.w	ip, #0
   121d4:	2328      	movne	r3, #40	; 0x28
   121d6:	4463      	add	r3, ip
   121d8:	4419      	add	r1, r3
   121da:	28eb      	cmp	r0, #235	; 0xeb
   121dc:	d9bb      	bls.n	12156 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   121de:	2a08      	cmp	r2, #8
   121e0:	d0a8      	beq.n	12134 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x266>
   121e2:	2a04      	cmp	r2, #4
   121e4:	d0a3      	beq.n	1212e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x260>
   121e6:	2a02      	cmp	r2, #2
   121e8:	d1aa      	bne.n	12140 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x272>
   121ea:	e7a5      	b.n	12138 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x26a>
   121ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
   121f0:	e7f1      	b.n	121d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x308>
   121f2:	2902      	cmp	r1, #2
   121f4:	bf08      	it	eq
   121f6:	f44f 727a 	moveq.w	r2, #1000	; 0x3e8
   121fa:	d005      	beq.n	12208 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x33a>
   121fc:	2901      	cmp	r1, #1
   121fe:	bf0c      	ite	eq
   12200:	f640 0234 	movweq	r2, #2100	; 0x834
   12204:	f640 2228 	movwne	r2, #2600	; 0xa28
   12208:	f24a 13df 	movw	r3, #41439	; 0xa1df
   1220c:	441a      	add	r2, r3
   1220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12212:	fbb2 fcf3 	udiv	ip, r2, r3
   12216:	2908      	cmp	r1, #8
   12218:	bf08      	it	eq
   1221a:	2340      	moveq	r3, #64	; 0x40
   1221c:	d00a      	beq.n	12234 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x366>
   1221e:	2904      	cmp	r1, #4
   12220:	bf08      	it	eq
   12222:	2310      	moveq	r3, #16
   12224:	d006      	beq.n	12234 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x366>
   12226:	2902      	cmp	r1, #2
   12228:	bf07      	ittee	eq
   1222a:	2304      	moveq	r3, #4
   1222c:	2212      	moveq	r2, #18
   1222e:	2308      	movne	r3, #8
   12230:	2219      	movne	r2, #25
   12232:	e000      	b.n	12236 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x368>
   12234:	2214      	movs	r2, #20
   12236:	fb13 f202 	smulbb	r2, r3, r2
   1223a:	2908      	cmp	r1, #8
   1223c:	bf08      	it	eq
   1223e:	2340      	moveq	r3, #64	; 0x40
   12240:	d012      	beq.n	12268 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x39a>
   12242:	2904      	cmp	r1, #4
   12244:	bf08      	it	eq
   12246:	232e      	moveq	r3, #46	; 0x2e
   12248:	d00e      	beq.n	12268 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x39a>
   1224a:	2300      	movs	r3, #0
   1224c:	2902      	cmp	r1, #2
   1224e:	bf0c      	ite	eq
   12250:	2118      	moveq	r1, #24
   12252:	2128      	movne	r1, #40	; 0x28
   12254:	4419      	add	r1, r3
   12256:	4411      	add	r1, r2
   12258:	fb01 c100 	mla	r1, r1, r0, ip
   1225c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   12260:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   12264:	4408      	add	r0, r1
   12266:	4770      	bx	lr
   12268:	f44f 71a8 	mov.w	r1, #336	; 0x150
   1226c:	e7f2      	b.n	12254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x386>
   1226e:	2001      	movs	r0, #1
   12270:	f7f6 bc44 	b.w	8afc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

00012274 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   12274:	b510      	push	{r4, lr}
   12276:	7001      	strb	r1, [r0, #0]
   12278:	7042      	strb	r2, [r0, #1]
   1227a:	7880      	ldrb	r0, [r0, #2]
   1227c:	f3c0 0380 	ubfx	r3, r0, #2, #1
   12280:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   12284:	4463      	add	r3, ip
   12286:	f000 0001 	and.w	r0, r0, #1
   1228a:	4418      	add	r0, r3
   1228c:	fb10 f001 	smulbb	r0, r0, r1
   12290:	fb10 f002 	smulbb	r0, r0, r2
   12294:	28ff      	cmp	r0, #255	; 0xff
   12296:	bf38      	it	cc
   12298:	bd10      	popcc	{r4, pc}
   1229a:	215c      	movs	r1, #92	; 0x5c
   1229c:	202e      	movs	r0, #46	; 0x2e
   1229e:	f7f2 fcc7 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000122a2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   122a2:	7881      	ldrb	r1, [r0, #2]
   122a4:	f3c1 0280 	ubfx	r2, r1, #2, #1
   122a8:	f3c1 0340 	ubfx	r3, r1, #1, #1
   122ac:	441a      	add	r2, r3
   122ae:	f001 0101 	and.w	r1, r1, #1
   122b2:	4411      	add	r1, r2
   122b4:	7842      	ldrb	r2, [r0, #1]
   122b6:	7800      	ldrb	r0, [r0, #0]
   122b8:	fb12 f000 	smulbb	r0, r2, r0
   122bc:	4348      	muls	r0, r1
   122be:	b2c0      	uxtb	r0, r0
   122c0:	4770      	bx	lr

000122c2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   122c2:	7882      	ldrb	r2, [r0, #2]
   122c4:	2100      	movs	r1, #0
   122c6:	f012 0f01 	tst.w	r2, #1
   122ca:	d005      	beq.n	122d8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   122cc:	78c3      	ldrb	r3, [r0, #3]
   122ce:	f013 0f01 	tst.w	r3, #1
   122d2:	bf08      	it	eq
   122d4:	2101      	moveq	r1, #1
   122d6:	d010      	beq.n	122fa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   122d8:	f012 0f02 	tst.w	r2, #2
   122dc:	d005      	beq.n	122ea <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   122de:	78c3      	ldrb	r3, [r0, #3]
   122e0:	f013 0f02 	tst.w	r3, #2
   122e4:	bf08      	it	eq
   122e6:	2102      	moveq	r1, #2
   122e8:	d007      	beq.n	122fa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   122ea:	f012 0f04 	tst.w	r2, #4
   122ee:	d004      	beq.n	122fa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   122f0:	78c3      	ldrb	r3, [r0, #3]
   122f2:	f013 0f04 	tst.w	r3, #4
   122f6:	bf08      	it	eq
   122f8:	2104      	moveq	r1, #4
   122fa:	7943      	ldrb	r3, [r0, #5]
   122fc:	1c5b      	adds	r3, r3, #1
   122fe:	b2db      	uxtb	r3, r3
   12300:	7143      	strb	r3, [r0, #5]
   12302:	f890 c001 	ldrb.w	ip, [r0, #1]
   12306:	4563      	cmp	r3, ip
   12308:	d10d      	bne.n	12326 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   1230a:	2300      	movs	r3, #0
   1230c:	7143      	strb	r3, [r0, #5]
   1230e:	f890 c003 	ldrb.w	ip, [r0, #3]
   12312:	ea4c 0c01 	orr.w	ip, ip, r1
   12316:	f880 c003 	strb.w	ip, [r0, #3]
   1231a:	4594      	cmp	ip, r2
   1231c:	d103      	bne.n	12326 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   1231e:	70c3      	strb	r3, [r0, #3]
   12320:	7902      	ldrb	r2, [r0, #4]
   12322:	1c52      	adds	r2, r2, #1
   12324:	7102      	strb	r2, [r0, #4]
   12326:	2901      	cmp	r1, #1
   12328:	bf04      	itt	eq
   1232a:	2025      	moveq	r0, #37	; 0x25
   1232c:	4770      	bxeq	lr
   1232e:	2902      	cmp	r1, #2
   12330:	bf04      	itt	eq
   12332:	2026      	moveq	r0, #38	; 0x26
   12334:	4770      	bxeq	lr
   12336:	2904      	cmp	r1, #4
   12338:	bf04      	itt	eq
   1233a:	2027      	moveq	r0, #39	; 0x27
   1233c:	4770      	bxeq	lr
   1233e:	b510      	push	{r4, lr}
   12340:	2139      	movs	r1, #57	; 0x39
   12342:	202e      	movs	r0, #46	; 0x2e
   12344:	f7f2 fc74 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012348 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   12348:	7081      	strb	r1, [r0, #2]
   1234a:	4770      	bx	lr

0001234c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1234c:	b410      	push	{r4}
   1234e:	7881      	ldrb	r1, [r0, #2]
   12350:	f3c1 0280 	ubfx	r2, r1, #2, #1
   12354:	f3c1 0340 	ubfx	r3, r1, #1, #1
   12358:	441a      	add	r2, r3
   1235a:	f001 0101 	and.w	r1, r1, #1
   1235e:	7843      	ldrb	r3, [r0, #1]
   12360:	4411      	add	r1, r2
   12362:	fb13 f201 	smulbb	r2, r3, r1
   12366:	78c1      	ldrb	r1, [r0, #3]
   12368:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   1236c:	f3c1 0440 	ubfx	r4, r1, #1, #1
   12370:	44a4      	add	ip, r4
   12372:	f001 0101 	and.w	r1, r1, #1
   12376:	4461      	add	r1, ip
   12378:	f890 c005 	ldrb.w	ip, [r0, #5]
   1237c:	fb11 c103 	smlabb	r1, r1, r3, ip
   12380:	7803      	ldrb	r3, [r0, #0]
   12382:	7900      	ldrb	r0, [r0, #4]
   12384:	1a18      	subs	r0, r3, r0
   12386:	fb10 f002 	smulbb	r0, r0, r2
   1238a:	1a40      	subs	r0, r0, r1
   1238c:	bc10      	pop	{r4}
   1238e:	b2c0      	uxtb	r0, r0
   12390:	4770      	bx	lr

00012392 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   12392:	b510      	push	{r4, lr}
   12394:	4604      	mov	r4, r0
   12396:	f001 fa0f 	bl	137b8 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   1239a:	2001      	movs	r0, #1
   1239c:	7060      	strb	r0, [r4, #1]
   1239e:	7020      	strb	r0, [r4, #0]
   123a0:	bd10      	pop	{r4, pc}

000123a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   123a2:	2100      	movs	r1, #0
   123a4:	70c1      	strb	r1, [r0, #3]
   123a6:	7141      	strb	r1, [r0, #5]
   123a8:	7101      	strb	r1, [r0, #4]
   123aa:	4770      	bx	lr

000123ac <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   123ac:	f240 315a 	movw	r1, #858	; 0x35a
   123b0:	4348      	muls	r0, r1
   123b2:	4770      	bx	lr

000123b4 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   123b4:	f240 20ef 	movw	r0, #751	; 0x2ef
   123b8:	4770      	bx	lr
   123ba:	020e      	.short	0x020e
   123bc:	0630041c 	.word	0x0630041c
   123c0:	035a0c60 	.word	0x035a0c60
   123c4:	05c506b4 	.word	0x05c506b4
   123c8:	12250bf5 	.word	0x12250bf5
   123cc:	03b101a3 	.word	0x03b101a3
   123d0:	02ef05bf 	.word	0x02ef05bf
   123d4:	09a30649 	.word	0x09a30649

000123d8 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   123d8:	b570      	push	{r4, r5, r6, lr}
   123da:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   123de:	4605      	mov	r5, r0
   123e0:	4620      	mov	r0, r4
   123e2:	f001 f92b 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   123e6:	f64d 7141 	movw	r1, #57153	; 0xdf41
   123ea:	4408      	add	r0, r1
   123ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123f0:	fbb0 f0f1 	udiv	r0, r0, r1
   123f4:	f014 010c 	ands.w	r1, r4, #12
   123f8:	bf18      	it	ne
   123fa:	2128      	movne	r1, #40	; 0x28
   123fc:	4408      	add	r0, r1
   123fe:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   12402:	4628      	mov	r0, r5
   12404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12408:	f44f 71a8 	mov.w	r1, #336	; 0x150
   1240c:	f7ff bd16 	b.w	11e3c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

00012410 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   12410:	b570      	push	{r4, r5, r6, lr}
   12412:	4604      	mov	r4, r0
   12414:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   12418:	b082      	sub	sp, #8
   1241a:	2800      	cmp	r0, #0
   1241c:	bf07      	ittee	eq
   1241e:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   12422:	2803      	cmpeq	r0, #3
   12424:	b002      	addne	sp, #8
   12426:	bd70      	popne	{r4, r5, r6, pc}
   12428:	f7fd fcb7 	bl	fd9a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1242c:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   12430:	4601      	mov	r1, r0
   12432:	4610      	mov	r0, r2
   12434:	f7f0 f816 	bl	2464 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   12438:	2800      	cmp	r0, #0
   1243a:	bfdc      	itt	le
   1243c:	b002      	addle	sp, #8
   1243e:	bd70      	pople	{r4, r5, r6, pc}
   12440:	6861      	ldr	r1, [r4, #4]
   12442:	2900      	cmp	r1, #0
   12444:	bf14      	ite	ne
   12446:	fbb0 f0f1 	udivne	r0, r0, r1
   1244a:	2000      	moveq	r0, #0
   1244c:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   12450:	1c40      	adds	r0, r0, #1
   12452:	4408      	add	r0, r1
   12454:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   12458:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   1245c:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   12460:	1a08      	subs	r0, r1, r0
   12462:	b200      	sxth	r0, r0
   12464:	2800      	cmp	r0, #0
   12466:	bfdc      	itt	le
   12468:	b002      	addle	sp, #8
   1246a:	bd70      	pople	{r4, r5, r6, pc}
   1246c:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   12470:	f7f0 fd22 	bl	2eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   12474:	2800      	cmp	r0, #0
   12476:	bf04      	itt	eq
   12478:	b002      	addeq	sp, #8
   1247a:	bd70      	popeq	{r4, r5, r6, pc}
   1247c:	2001      	movs	r0, #1
   1247e:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   12482:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   12486:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1248a:	ae01      	add	r6, sp, #4
   1248c:	1a40      	subs	r0, r0, r1
   1248e:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   12492:	1e40      	subs	r0, r0, #1
   12494:	4408      	add	r0, r1
   12496:	b285      	uxth	r5, r0
   12498:	e019      	b.n	124ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   1249a:	9600      	str	r6, [sp, #0]
   1249c:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   124a0:	2300      	movs	r3, #0
   124a2:	2201      	movs	r2, #1
   124a4:	4620      	mov	r0, r4
   124a6:	f7f7 fdb1 	bl	a00c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
   124aa:	2800      	cmp	r0, #0
   124ac:	bf04      	itt	eq
   124ae:	b002      	addeq	sp, #8
   124b0:	bd70      	popeq	{r4, r5, r6, pc}
   124b2:	2801      	cmp	r0, #1
   124b4:	d004      	beq.n	124c0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   124b6:	f240 51df 	movw	r1, #1503	; 0x5df
   124ba:	2030      	movs	r0, #48	; 0x30
   124bc:	f7f2 fbb8 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   124c0:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   124c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   124c8:	4408      	add	r0, r1
   124ca:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   124ce:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   124d2:	1a28      	subs	r0, r5, r0
   124d4:	b200      	sxth	r0, r0
   124d6:	2800      	cmp	r0, #0
   124d8:	dadf      	bge.n	1249a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   124da:	b002      	add	sp, #8
   124dc:	bd70      	pop	{r4, r5, r6, pc}
   124de:	01f4      	.short	0x01f4
   124e0:	009600fa 	.word	0x009600fa
   124e4:	004b0064 	.word	0x004b0064
   124e8:	001e0032 	.word	0x001e0032
   124ec:	000a0014 	.word	0x000a0014
   124f0:	00020005 	.word	0x00020005
   124f4:	0001      	.short	0x0001

000124f6 <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   124f6:	b570      	push	{r4, r5, r6, lr}
   124f8:	460c      	mov	r4, r1
   124fa:	4605      	mov	r5, r0
   124fc:	f44f 720a 	mov.w	r2, #552	; 0x228
   12500:	2100      	movs	r1, #0
   12502:	4620      	mov	r0, r4
   12504:	f7fd fdbc 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12508:	8025      	strh	r5, [r4, #0]
   1250a:	bd70      	pop	{r4, r5, r6, pc}

0001250c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   1250c:	f7f2 bf30 	b.w	5370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00012510 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   12510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12514:	460d      	mov	r5, r1
   12516:	4607      	mov	r7, r0
   12518:	2101      	movs	r1, #1
   1251a:	f7fe fe51 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1251e:	1e04      	subs	r4, r0, #0
   12520:	bf08      	it	eq
   12522:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   12526:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   1252a:	2600      	movs	r6, #0
   1252c:	b1b8      	cbz	r0, 1255e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   1252e:	706e      	strb	r6, [r5, #1]
   12530:	2009      	movs	r0, #9
   12532:	7028      	strb	r0, [r5, #0]
   12534:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   12538:	b178      	cbz	r0, 1255a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   1253a:	8466      	strh	r6, [r4, #34]	; 0x22
   1253c:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   12540:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   12544:	6068      	str	r0, [r5, #4]
   12546:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   1254a:	60a8      	str	r0, [r5, #8]
   1254c:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   12550:	81a8      	strh	r0, [r5, #12]
   12552:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   12556:	2800      	cmp	r0, #0
   12558:	d1ef      	bne.n	1253a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   1255a:	712e      	strb	r6, [r5, #4]
   1255c:	e047      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1255e:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   12562:	2800      	cmp	r0, #0
   12564:	d03a      	beq.n	125dc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   12566:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   1256a:	280d      	cmp	r0, #13
   1256c:	d01b      	beq.n	125a6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   1256e:	280e      	cmp	r0, #14
   12570:	d004      	beq.n	1257c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   12572:	f640 21d3 	movw	r1, #2771	; 0xad3
   12576:	2031      	movs	r0, #49	; 0x31
   12578:	f7f2 fb5a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1257c:	8820      	ldrh	r0, [r4, #0]
   1257e:	f7f2 ff6b 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   12582:	4607      	mov	r7, r0
   12584:	f7fe fcbc 	bl	10f00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   12588:	b9a0      	cbnz	r0, 125b4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   1258a:	706e      	strb	r6, [r5, #1]
   1258c:	200e      	movs	r0, #14
   1258e:	7028      	strb	r0, [r5, #0]
   12590:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   12594:	7128      	strb	r0, [r5, #4]
   12596:	8820      	ldrh	r0, [r4, #0]
   12598:	80e8      	strh	r0, [r5, #6]
   1259a:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   1259e:	4638      	mov	r0, r7
   125a0:	f7fe fcc4 	bl	10f2c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   125a4:	e023      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   125a6:	8820      	ldrh	r0, [r4, #0]
   125a8:	f7f2 ff56 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   125ac:	4607      	mov	r7, r0
   125ae:	f7fe fca7 	bl	10f00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   125b2:	b110      	cbz	r0, 125ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   125b4:	2000      	movs	r0, #0
   125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   125ba:	706e      	strb	r6, [r5, #1]
   125bc:	200d      	movs	r0, #13
   125be:	7028      	strb	r0, [r5, #0]
   125c0:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   125c4:	7128      	strb	r0, [r5, #4]
   125c6:	8820      	ldrh	r0, [r4, #0]
   125c8:	80e8      	strh	r0, [r5, #6]
   125ca:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   125ce:	7228      	strb	r0, [r5, #8]
   125d0:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   125d4:	4638      	mov	r0, r7
   125d6:	f7fe fca9 	bl	10f2c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   125da:	e008      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   125dc:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   125e0:	b140      	cbz	r0, 125f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   125e2:	706e      	strb	r6, [r5, #1]
   125e4:	2010      	movs	r0, #16
   125e6:	7028      	strb	r0, [r5, #0]
   125e8:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   125ec:	80af      	strh	r7, [r5, #4]
   125ee:	2001      	movs	r0, #1
   125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   125f4:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   125f8:	b190      	cbz	r0, 12620 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   125fa:	706e      	strb	r6, [r5, #1]
   125fc:	200a      	movs	r0, #10
   125fe:	7028      	strb	r0, [r5, #0]
   12600:	8820      	ldrh	r0, [r4, #0]
   12602:	80a8      	strh	r0, [r5, #4]
   12604:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   12608:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   1260c:	f8c5 0006 	str.w	r0, [r5, #6]
   12610:	f8c5 100a 	str.w	r1, [r5, #10]
   12614:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   12618:	81e8      	strh	r0, [r5, #14]
   1261a:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   1261e:	e7e6      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   12620:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   12624:	b180      	cbz	r0, 12648 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   12626:	706e      	strb	r6, [r5, #1]
   12628:	201a      	movs	r0, #26
   1262a:	7028      	strb	r0, [r5, #0]
   1262c:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   12630:	2800      	cmp	r0, #0
   12632:	d0dc      	beq.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   12634:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   12638:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   1263c:	6068      	str	r0, [r5, #4]
   1263e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   12642:	2800      	cmp	r0, #0
   12644:	d1f6      	bne.n	12634 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   12646:	e7d2      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   12648:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   1264c:	b160      	cbz	r0, 12668 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   1264e:	706e      	strb	r6, [r5, #1]
   12650:	2008      	movs	r0, #8
   12652:	7028      	strb	r0, [r5, #0]
   12654:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   12658:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   1265c:	60ea      	str	r2, [r5, #12]
   1265e:	e9c5 0101 	strd	r0, r1, [r5, #4]
   12662:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   12666:	e7c2      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   12668:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   1266c:	b1a0      	cbz	r0, 12698 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   1266e:	706e      	strb	r6, [r5, #1]
   12670:	2015      	movs	r0, #21
   12672:	7028      	strb	r0, [r5, #0]
   12674:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   12678:	2800      	cmp	r0, #0
   1267a:	d0b8      	beq.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1267c:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   12680:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   12684:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   12688:	60ea      	str	r2, [r5, #12]
   1268a:	e9c5 0101 	strd	r0, r1, [r5, #4]
   1268e:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   12692:	2800      	cmp	r0, #0
   12694:	d1f2      	bne.n	1267c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   12696:	e7aa      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   12698:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   1269c:	b170      	cbz	r0, 126bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   1269e:	706e      	strb	r6, [r5, #1]
   126a0:	201c      	movs	r0, #28
   126a2:	7028      	strb	r0, [r5, #0]
   126a4:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   126a8:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   126ac:	6068      	str	r0, [r5, #4]
   126ae:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   126b2:	60a8      	str	r0, [r5, #8]
   126b4:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   126b8:	81a8      	strh	r0, [r5, #12]
   126ba:	e798      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   126bc:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   126c0:	b138      	cbz	r0, 126d2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   126c2:	201d      	movs	r0, #29
   126c4:	7028      	strb	r0, [r5, #0]
   126c6:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   126ca:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   126ce:	6068      	str	r0, [r5, #4]
   126d0:	e78d      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   126d2:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   126d6:	2800      	cmp	r0, #0
   126d8:	bf08      	it	eq
   126da:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   126de:	706e      	strb	r6, [r5, #1]
   126e0:	2016      	movs	r0, #22
   126e2:	7028      	strb	r0, [r5, #0]
   126e4:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   126e8:	2800      	cmp	r0, #0
   126ea:	d080      	beq.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   126ec:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   126f0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   126f4:	6068      	str	r0, [r5, #4]
   126f6:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   126fa:	8128      	strh	r0, [r5, #8]
   126fc:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   12700:	2800      	cmp	r0, #0
   12702:	d1f3      	bne.n	126ec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   12704:	e773      	b.n	125ee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

00012706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   12706:	2100      	movs	r1, #0
   12708:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   1270c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   12710:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   12714:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   12718:	b111      	cbz	r1, 12720 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1271a:	2102      	movs	r1, #2
   1271c:	f7f7 bb42 	b.w	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   12720:	2103      	movs	r1, #3
   12722:	f7f7 bb3f 	b.w	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

00012726 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   12726:	b570      	push	{r4, r5, r6, lr}
   12728:	460c      	mov	r4, r1
   1272a:	4615      	mov	r5, r2
   1272c:	4606      	mov	r6, r0
   1272e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   12732:	2100      	movs	r1, #0
   12734:	4620      	mov	r0, r4
   12736:	f7fd fca3 	bl	10080 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1273a:	8026      	strh	r6, [r4, #0]
   1273c:	2d00      	cmp	r5, #0
   1273e:	bf1e      	ittt	ne
   12740:	6828      	ldrne	r0, [r5, #0]
   12742:	f8c4 012c 	strne.w	r0, [r4, #300]	; 0x12c
   12746:	bd70      	popne	{r4, r5, r6, pc}
   12748:	f640 113a 	movw	r1, #2362	; 0x93a
   1274c:	2036      	movs	r0, #54	; 0x36
   1274e:	f7f2 fa6f 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012752 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   12752:	f7f2 be0d 	b.w	5370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   12756:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1275a:	f001 0107 	and.w	r1, r1, #7
   1275e:	7800      	ldrb	r0, [r0, #0]
   12760:	2201      	movs	r2, #1
   12762:	408a      	lsls	r2, r1
   12764:	4010      	ands	r0, r2
   12766:	40c8      	lsrs	r0, r1
   12768:	4770      	bx	lr
   1276a:	b118      	cbz	r0, 12774 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   1276c:	2802      	cmp	r0, #2
   1276e:	d001      	beq.n	12774 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   12770:	2001      	movs	r0, #1
   12772:	4770      	bx	lr
   12774:	2000      	movs	r0, #0
   12776:	4770      	bx	lr

00012778 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   12778:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1277c:	7881      	ldrb	r1, [r0, #2]
   1277e:	4605      	mov	r5, r0
   12780:	291a      	cmp	r1, #26
   12782:	d025      	beq.n	127d0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   12784:	dc0e      	bgt.n	127a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   12786:	2916      	cmp	r1, #22
   12788:	d22e      	bcs.n	127e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1278a:	e8df f001 	tbb	[pc, r1]
   1278e:	2d2d      	.short	0x2d2d
   12790:	212d2d2d 	.word	0x212d2d2d
   12794:	2d2d2d2d 	.word	0x2d2d2d2d
   12798:	2d2d2d2d 	.word	0x2d2d2d2d
   1279c:	2d2d2d2d 	.word	0x2d2d2d2d
   127a0:	2121212d 	.word	0x2121212d
   127a4:	292a      	cmp	r1, #42	; 0x2a
   127a6:	d01f      	beq.n	127e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   127a8:	dc0b      	bgt.n	127c2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   127aa:	f1a1 011e 	sub.w	r1, r1, #30
   127ae:	290c      	cmp	r1, #12
   127b0:	d21a      	bcs.n	127e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   127b2:	e8df f001 	tbb	[pc, r1]
   127b6:	1919      	.short	0x1919
   127b8:	19191919 	.word	0x19191919
   127bc:	19191919 	.word	0x19191919
   127c0:	0d19      	.short	0x0d19
   127c2:	393a      	subs	r1, #58	; 0x3a
   127c4:	2904      	cmp	r1, #4
   127c6:	d20f      	bcs.n	127e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   127c8:	e8df f001 	tbb	[pc, r1]
   127cc:	020e020e 	.word	0x020e020e
   127d0:	8828      	ldrh	r0, [r5, #0]
   127d2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   127d6:	d207      	bcs.n	127e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   127d8:	2701      	movs	r7, #1
   127da:	4669      	mov	r1, sp
   127dc:	f7fe fdfc 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   127e0:	b120      	cbz	r0, 127ec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   127e2:	2002      	movs	r0, #2
   127e4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   127e8:	2012      	movs	r0, #18
   127ea:	e7fb      	b.n	127e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   127ec:	f89d 0000 	ldrb.w	r0, [sp]
   127f0:	f000 fc0b 	bl	1300a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   127f4:	9c01      	ldr	r4, [sp, #4]
   127f6:	b110      	cbz	r0, 127fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   127f8:	f504 7494 	add.w	r4, r4, #296	; 0x128
   127fc:	e001      	b.n	12802 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   127fe:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   12802:	f89d 0000 	ldrb.w	r0, [sp]
   12806:	f000 fc00 	bl	1300a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   1280a:	9e01      	ldr	r6, [sp, #4]
   1280c:	b110      	cbz	r0, 12814 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   1280e:	f206 1629 	addw	r6, r6, #297	; 0x129
   12812:	e001      	b.n	12818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   12814:	f206 1689 	addw	r6, r6, #393	; 0x189
   12818:	4668      	mov	r0, sp
   1281a:	f000 fd55 	bl	132c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x350>
   1281e:	b108      	cbz	r0, 12824 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   12820:	7820      	ldrb	r0, [r4, #0]
   12822:	b108      	cbz	r0, 12828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   12824:	200c      	movs	r0, #12
   12826:	e7dd      	b.n	127e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   12828:	7027      	strb	r7, [r4, #0]
   1282a:	78a8      	ldrb	r0, [r5, #2]
   1282c:	7030      	strb	r0, [r6, #0]
   1282e:	4668      	mov	r0, sp
   12830:	f7ff fa5f 	bl	11cf2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   12834:	2000      	movs	r0, #0
   12836:	e7d5      	b.n	127e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

00012838 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   12838:	b510      	push	{r4, lr}
   1283a:	4604      	mov	r4, r0
   1283c:	7800      	ldrb	r0, [r0, #0]
   1283e:	b118      	cbz	r0, 12848 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   12840:	2801      	cmp	r0, #1
   12842:	d001      	beq.n	12848 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   12844:	2012      	movs	r0, #18
   12846:	bd10      	pop	{r4, pc}
   12848:	f000 fd0e 	bl	13268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   1284c:	b120      	cbz	r0, 12858 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1284e:	f7f4 f985 	bl	6b5c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12852:	b108      	cbz	r0, 12858 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   12854:	200c      	movs	r0, #12
   12856:	bd10      	pop	{r4, pc}
   12858:	7820      	ldrb	r0, [r4, #0]
   1285a:	f7ff ff86 	bl	1276a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   1285e:	1de2      	adds	r2, r4, #7
   12860:	f104 0317 	add.w	r3, r4, #23
   12864:	1c61      	adds	r1, r4, #1
   12866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1286a:	f7f4 b9c7 	b.w	6bfc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001286e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1286e:	b510      	push	{r4, lr}
   12870:	4604      	mov	r4, r0
   12872:	f000 fe3d 	bl	134f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   12876:	b108      	cbz	r0, 1287c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   12878:	200c      	movs	r0, #12
   1287a:	bd10      	pop	{r4, pc}
   1287c:	7820      	ldrb	r0, [r4, #0]
   1287e:	b128      	cbz	r0, 1288c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   12880:	2801      	cmp	r0, #1
   12882:	d003      	beq.n	1288c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   12884:	28ff      	cmp	r0, #255	; 0xff
   12886:	d00b      	beq.n	128a0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   12888:	2012      	movs	r0, #18
   1288a:	bd10      	pop	{r4, pc}
   1288c:	f7ff ff6d 	bl	1276a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   12890:	1c61      	adds	r1, r4, #1
   12892:	f7f4 fafb 	bl	6e8c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   12896:	b108      	cbz	r0, 1289c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   12898:	2000      	movs	r0, #0
   1289a:	bd10      	pop	{r4, pc}
   1289c:	2007      	movs	r0, #7
   1289e:	bd10      	pop	{r4, pc}
   128a0:	2001      	movs	r0, #1
   128a2:	f7f4 fb2f 	bl	6f04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   128a6:	e7f7      	b.n	12898 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

000128a8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   128a8:	b510      	push	{r4, lr}
   128aa:	f000 fcdd 	bl	13268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   128ae:	b120      	cbz	r0, 128ba <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   128b0:	f7f4 f954 	bl	6b5c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   128b4:	b108      	cbz	r0, 128ba <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   128b6:	200c      	movs	r0, #12
   128b8:	bd10      	pop	{r4, pc}
   128ba:	f7f4 fa05 	bl	6cc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   128be:	2000      	movs	r0, #0
   128c0:	bd10      	pop	{r4, pc}

000128c2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   128c2:	b510      	push	{r4, lr}
   128c4:	f000 fe14 	bl	134f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   128c8:	b108      	cbz	r0, 128ce <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   128ca:	200c      	movs	r0, #12
   128cc:	bd10      	pop	{r4, pc}
   128ce:	f7f4 fb1f 	bl	6f10 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   128d2:	2000      	movs	r0, #0
   128d4:	bd10      	pop	{r4, pc}

000128d6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   128d6:	b570      	push	{r4, r5, r6, lr}
   128d8:	4606      	mov	r6, r0
   128da:	f000 fb4d 	bl	12f78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   128de:	2800      	cmp	r0, #0
   128e0:	d10c      	bne.n	128fc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x26>
   128e2:	8830      	ldrh	r0, [r6, #0]
   128e4:	2100      	movs	r1, #0
   128e6:	f7fe fc6b 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   128ea:	0004      	movs	r4, r0
   128ec:	d007      	beq.n	128fe <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   128ee:	f000 fcf2 	bl	132d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
   128f2:	b120      	cbz	r0, 128fe <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   128f4:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
   128f8:	b118      	cbz	r0, 12902 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   128fa:	203a      	movs	r0, #58	; 0x3a
   128fc:	bd70      	pop	{r4, r5, r6, pc}
   128fe:	2002      	movs	r0, #2
   12900:	bd70      	pop	{r4, r5, r6, pc}
   12902:	88b0      	ldrh	r0, [r6, #4]
   12904:	f7fe fd80 	bl	11408 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   12908:	4605      	mov	r5, r0
   1290a:	4601      	mov	r1, r0
   1290c:	2008      	movs	r0, #8
   1290e:	f7fe ff9f 	bl	11850 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   12912:	4601      	mov	r1, r0
   12914:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   12918:	4281      	cmp	r1, r0
   1291a:	d301      	bcc.n	12920 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x4a>
   1291c:	42a8      	cmp	r0, r5
   1291e:	d301      	bcc.n	12924 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x4e>
   12920:	2012      	movs	r0, #18
   12922:	bd70      	pop	{r4, r5, r6, pc}
   12924:	f641 504c 	movw	r0, #7500	; 0x1d4c
   12928:	4285      	cmp	r5, r0
   1292a:	d209      	bcs.n	12940 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x6a>
   1292c:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   12930:	2802      	cmp	r0, #2
   12932:	d103      	bne.n	1293c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
   12934:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12938:	2802      	cmp	r0, #2
   1293a:	d001      	beq.n	12940 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x6a>
   1293c:	200c      	movs	r0, #12
   1293e:	bd70      	pop	{r4, r5, r6, pc}
   12940:	4629      	mov	r1, r5
   12942:	2005      	movs	r0, #5
   12944:	f7fe ff84 	bl	11850 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   12948:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
   1294c:	2000      	movs	r0, #0
   1294e:	e9c4 0553 	strd	r0, r5, [r4, #332]	; 0x14c
   12952:	88f0      	ldrh	r0, [r6, #6]
   12954:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
   12958:	8930      	ldrh	r0, [r6, #8]
   1295a:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
   1295e:	2001      	movs	r0, #1
   12960:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
   12964:	2000      	movs	r0, #0
   12966:	bd70      	pop	{r4, r5, r6, pc}

00012968 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   12968:	b510      	push	{r4, lr}
   1296a:	460b      	mov	r3, r1
   1296c:	2201      	movs	r2, #1
   1296e:	f100 0110 	add.w	r1, r0, #16
   12972:	f7f4 fc83 	bl	727c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   12976:	2000      	movs	r0, #0
   12978:	bd10      	pop	{r4, pc}

0001297a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1297a:	b510      	push	{r4, lr}
   1297c:	8800      	ldrh	r0, [r0, #0]
   1297e:	2101      	movs	r1, #1
   12980:	f7fe fc1e 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12984:	b118      	cbz	r0, 1298e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   12986:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   1298a:	b111      	cbz	r1, 12992 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   1298c:	e007      	b.n	1299e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   1298e:	2002      	movs	r0, #2
   12990:	bd10      	pop	{r4, pc}
   12992:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   12996:	2914      	cmp	r1, #20
   12998:	d003      	beq.n	129a2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1299a:	2915      	cmp	r1, #21
   1299c:	d001      	beq.n	129a2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1299e:	200c      	movs	r0, #12
   129a0:	bd10      	pop	{r4, pc}
   129a2:	2102      	movs	r1, #2
   129a4:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   129a8:	2000      	movs	r0, #0
   129aa:	bd10      	pop	{r4, pc}

000129ac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   129ac:	b570      	push	{r4, r5, r6, lr}
   129ae:	4605      	mov	r5, r0
   129b0:	8800      	ldrh	r0, [r0, #0]
   129b2:	2101      	movs	r1, #1
   129b4:	f7fe fc04 	bl	111c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   129b8:	0004      	movs	r4, r0
   129ba:	d003      	beq.n	129c4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   129bc:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   129c0:	b110      	cbz	r0, 129c8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   129c2:	e00a      	b.n	129da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   129c4:	2002      	movs	r0, #2
   129c6:	bd70      	pop	{r4, r5, r6, pc}
   129c8:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   129cc:	2814      	cmp	r0, #20
   129ce:	d001      	beq.n	129d4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   129d0:	2815      	cmp	r0, #21
   129d2:	d102      	bne.n	129da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   129d4:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   129d8:	b108      	cbz	r0, 129de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   129da:	200c      	movs	r0, #12
   129dc:	bd70      	pop	{r4, r5, r6, pc}
   129de:	2210      	movs	r2, #16
   129e0:	1ca9      	adds	r1, r5, #2
   129e2:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   129e6:	f7f1 ff97 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   129ea:	2001      	movs	r0, #1
   129ec:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   129f0:	2000      	movs	r0, #0
   129f2:	bd70      	pop	{r4, r5, r6, pc}

000129f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   129f4:	b510      	push	{r4, lr}
   129f6:	2108      	movs	r1, #8
   129f8:	f7f2 ff8a 	bl	5910 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   129fc:	2000      	movs	r0, #0
   129fe:	bd10      	pop	{r4, pc}

00012a00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   12a00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   12a02:	460c      	mov	r4, r1
   12a04:	4605      	mov	r5, r0
   12a06:	8800      	ldrh	r0, [r0, #0]
   12a08:	4669      	mov	r1, sp
   12a0a:	f7fe fce5 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12a0e:	2200      	movs	r2, #0
   12a10:	b128      	cbz	r0, 12a1e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   12a12:	f8c4 2002 	str.w	r2, [r4, #2]
   12a16:	71a2      	strb	r2, [r4, #6]
   12a18:	8022      	strh	r2, [r4, #0]
   12a1a:	2002      	movs	r0, #2
   12a1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12a1e:	9901      	ldr	r1, [sp, #4]
   12a20:	4608      	mov	r0, r1
   12a22:	3178      	adds	r1, #120	; 0x78
   12a24:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   12a28:	68c3      	ldr	r3, [r0, #12]
   12a2a:	f8c4 3002 	str.w	r3, [r4, #2]
   12a2e:	7c03      	ldrb	r3, [r0, #16]
   12a30:	71a3      	strb	r3, [r4, #6]
   12a32:	882b      	ldrh	r3, [r5, #0]
   12a34:	8023      	strh	r3, [r4, #0]
   12a36:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   12a3a:	2b00      	cmp	r3, #0
   12a3c:	d1f2      	bne.n	12a24 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   12a3e:	2000      	movs	r0, #0
   12a40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00012a42 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   12a42:	b510      	push	{r4, lr}
   12a44:	4604      	mov	r4, r0
   12a46:	f000 fc39 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   12a4a:	b140      	cbz	r0, 12a5e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   12a4c:	20fb      	movs	r0, #251	; 0xfb
   12a4e:	8020      	strh	r0, [r4, #0]
   12a50:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   12a54:	8061      	strh	r1, [r4, #2]
   12a56:	80a0      	strh	r0, [r4, #4]
   12a58:	80e1      	strh	r1, [r4, #6]
   12a5a:	2000      	movs	r0, #0
   12a5c:	bd10      	pop	{r4, pc}
   12a5e:	2001      	movs	r0, #1
   12a60:	bd10      	pop	{r4, pc}

00012a62 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   12a62:	2108      	movs	r1, #8
   12a64:	7001      	strb	r1, [r0, #0]
   12a66:	2000      	movs	r0, #0
   12a68:	4770      	bx	lr

00012a6a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   12a6a:	21d8      	movs	r1, #216	; 0xd8
   12a6c:	7001      	strb	r1, [r0, #0]
   12a6e:	2108      	movs	r1, #8
   12a70:	7041      	strb	r1, [r0, #1]
   12a72:	2000      	movs	r0, #0
   12a74:	4770      	bx	lr

00012a76 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   12a76:	2108      	movs	r1, #8
   12a78:	7001      	strb	r1, [r0, #0]
   12a7a:	2000      	movs	r0, #0
   12a7c:	4770      	bx	lr

00012a7e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   12a7e:	b510      	push	{r4, lr}
   12a80:	4604      	mov	r4, r0
   12a82:	7800      	ldrb	r0, [r0, #0]
   12a84:	b108      	cbz	r0, 12a8a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   12a86:	2801      	cmp	r0, #1
   12a88:	d110      	bne.n	12aac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   12a8a:	f000 fbed 	bl	13268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   12a8e:	b120      	cbz	r0, 12a9a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   12a90:	f7f4 f864 	bl	6b5c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12a94:	b108      	cbz	r0, 12a9a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   12a96:	200c      	movs	r0, #12
   12a98:	bd10      	pop	{r4, pc}
   12a9a:	7820      	ldrb	r0, [r4, #0]
   12a9c:	f7ff fe65 	bl	1276a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   12aa0:	1c61      	adds	r1, r4, #1
   12aa2:	f7f4 f9af 	bl	6e04 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   12aa6:	b108      	cbz	r0, 12aac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   12aa8:	2000      	movs	r0, #0
   12aaa:	bd10      	pop	{r4, pc}
   12aac:	2012      	movs	r0, #18
   12aae:	bd10      	pop	{r4, pc}

00012ab0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   12ab0:	b510      	push	{r4, lr}
   12ab2:	4604      	mov	r4, r0
   12ab4:	f000 fd1c 	bl	134f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   12ab8:	b108      	cbz	r0, 12abe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   12aba:	200c      	movs	r0, #12
   12abc:	bd10      	pop	{r4, pc}
   12abe:	7820      	ldrb	r0, [r4, #0]
   12ac0:	b120      	cbz	r0, 12acc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   12ac2:	2801      	cmp	r0, #1
   12ac4:	d002      	beq.n	12acc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   12ac6:	28ff      	cmp	r0, #255	; 0xff
   12ac8:	d108      	bne.n	12adc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   12aca:	e009      	b.n	12ae0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   12acc:	f7ff fe4d 	bl	1276a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   12ad0:	1c61      	adds	r1, r4, #1
   12ad2:	f7fe fc76 	bl	113c2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   12ad6:	b108      	cbz	r0, 12adc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   12ad8:	2000      	movs	r0, #0
   12ada:	bd10      	pop	{r4, pc}
   12adc:	2012      	movs	r0, #18
   12ade:	bd10      	pop	{r4, pc}
   12ae0:	2000      	movs	r0, #0
   12ae2:	f7f4 fa0f 	bl	6f04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   12ae6:	e7f7      	b.n	12ad8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00012ae8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   12ae8:	b510      	push	{r4, lr}
   12aea:	4604      	mov	r4, r0
   12aec:	f000 fbbc 	bl	13268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   12af0:	b108      	cbz	r0, 12af6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   12af2:	200c      	movs	r0, #12
   12af4:	bd10      	pop	{r4, pc}
   12af6:	7820      	ldrb	r0, [r4, #0]
   12af8:	f000 0001 	and.w	r0, r0, #1
   12afc:	f7f4 f828 	bl	6b50 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   12b00:	2000      	movs	r0, #0
   12b02:	bd10      	pop	{r4, pc}

00012b04 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   12b04:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   12b06:	460d      	mov	r5, r1
   12b08:	4604      	mov	r4, r0
   12b0a:	f000 fbd7 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   12b0e:	b130      	cbz	r0, 12b1e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   12b10:	88a0      	ldrh	r0, [r4, #4]
   12b12:	f244 2190 	movw	r1, #17040	; 0x4290
   12b16:	4288      	cmp	r0, r1
   12b18:	d903      	bls.n	12b22 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   12b1a:	2012      	movs	r0, #18
   12b1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12b1e:	2001      	movs	r0, #1
   12b20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12b22:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   12b26:	4288      	cmp	r0, r1
   12b28:	d300      	bcc.n	12b2c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   12b2a:	4608      	mov	r0, r1
   12b2c:	8821      	ldrh	r1, [r4, #0]
   12b2e:	f8ad 1000 	strh.w	r1, [sp]
   12b32:	8861      	ldrh	r1, [r4, #2]
   12b34:	f8ad 1002 	strh.w	r1, [sp, #2]
   12b38:	f8ad 0004 	strh.w	r0, [sp, #4]
   12b3c:	8861      	ldrh	r1, [r4, #2]
   12b3e:	f8ad 1006 	strh.w	r1, [sp, #6]
   12b42:	f8ad 0008 	strh.w	r0, [sp, #8]
   12b46:	8820      	ldrh	r0, [r4, #0]
   12b48:	8028      	strh	r0, [r5, #0]
   12b4a:	4668      	mov	r0, sp
   12b4c:	f000 fbf3 	bl	13336 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   12b50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00012b52 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   12b52:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   12b54:	4604      	mov	r4, r0
   12b56:	f000 fbd6 	bl	13306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   12b5a:	b1b0      	cbz	r0, 12b8a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
   12b5c:	f10d 0007 	add.w	r0, sp, #7
   12b60:	9000      	str	r0, [sp, #0]
   12b62:	7922      	ldrb	r2, [r4, #4]
   12b64:	78e1      	ldrb	r1, [r4, #3]
   12b66:	78a0      	ldrb	r0, [r4, #2]
   12b68:	f10d 0306 	add.w	r3, sp, #6
   12b6c:	f000 fc7a 	bl	13464 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ec>
   12b70:	2800      	cmp	r0, #0
   12b72:	d109      	bne.n	12b88 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
   12b74:	8820      	ldrh	r0, [r4, #0]
   12b76:	f8ad 0004 	strh.w	r0, [sp, #4]
   12b7a:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   12b7e:	f8ad 0008 	strh.w	r0, [sp, #8]
   12b82:	a801      	add	r0, sp, #4
   12b84:	f000 f8c9 	bl	12d1a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   12b88:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12b8a:	2001      	movs	r0, #1
   12b8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00012b8e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   12b8e:	b510      	push	{r4, lr}
   12b90:	4604      	mov	r4, r0
   12b92:	f000 fb69 	bl	13268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   12b96:	b120      	cbz	r0, 12ba2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   12b98:	f7f3 ffe0 	bl	6b5c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   12b9c:	b108      	cbz	r0, 12ba2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   12b9e:	200c      	movs	r0, #12
   12ba0:	bd10      	pop	{r4, pc}
   12ba2:	7820      	ldrb	r0, [r4, #0]
   12ba4:	f7ff fde1 	bl	1276a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   12ba8:	79e2      	ldrb	r2, [r4, #7]
   12baa:	1c61      	adds	r1, r4, #1
   12bac:	f7f3 ff66 	bl	6a7c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   12bb0:	b108      	cbz	r0, 12bb6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   12bb2:	2000      	movs	r0, #0
   12bb4:	bd10      	pop	{r4, pc}
   12bb6:	2002      	movs	r0, #2
   12bb8:	bd10      	pop	{r4, pc}

00012bba <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   12bba:	b510      	push	{r4, lr}
   12bbc:	4604      	mov	r4, r0
   12bbe:	2001      	movs	r0, #1
   12bc0:	f7fa ffa8 	bl	db14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   12bc4:	b128      	cbz	r0, 12bd2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   12bc6:	4621      	mov	r1, r4
   12bc8:	2001      	movs	r0, #1
   12bca:	f7f3 f803 	bl	5bd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   12bce:	2000      	movs	r0, #0
   12bd0:	bd10      	pop	{r4, pc}
   12bd2:	200c      	movs	r0, #12
   12bd4:	bd10      	pop	{r4, pc}

00012bd6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   12bd6:	b510      	push	{r4, lr}
   12bd8:	8800      	ldrh	r0, [r0, #0]
   12bda:	f7f4 f939 	bl	6e50 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   12bde:	b108      	cbz	r0, 12be4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   12be0:	2000      	movs	r0, #0
   12be2:	bd10      	pop	{r4, pc}
   12be4:	2030      	movs	r0, #48	; 0x30
   12be6:	bd10      	pop	{r4, pc}

00012be8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   12be8:	b51c      	push	{r2, r3, r4, lr}
   12bea:	4604      	mov	r4, r0
   12bec:	f000 fb66 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   12bf0:	b178      	cbz	r0, 12c12 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   12bf2:	8820      	ldrh	r0, [r4, #0]
   12bf4:	f8ad 0000 	strh.w	r0, [sp]
   12bf8:	8860      	ldrh	r0, [r4, #2]
   12bfa:	f8ad 0002 	strh.w	r0, [sp, #2]
   12bfe:	8820      	ldrh	r0, [r4, #0]
   12c00:	f8ad 0004 	strh.w	r0, [sp, #4]
   12c04:	8860      	ldrh	r0, [r4, #2]
   12c06:	f8ad 0006 	strh.w	r0, [sp, #6]
   12c0a:	4668      	mov	r0, sp
   12c0c:	f7fb f98c 	bl	df28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   12c10:	bd1c      	pop	{r2, r3, r4, pc}
   12c12:	2001      	movs	r0, #1
   12c14:	bd1c      	pop	{r2, r3, r4, pc}

00012c16 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   12c16:	b510      	push	{r4, lr}
   12c18:	f7f3 f80a 	bl	5c30 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   12c1c:	2000      	movs	r0, #0
   12c1e:	bd10      	pop	{r4, pc}

00012c20 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   12c20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   12c22:	460c      	mov	r4, r1
   12c24:	4605      	mov	r5, r0
   12c26:	f000 fb49 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   12c2a:	b178      	cbz	r0, 12c4c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   12c2c:	4669      	mov	r1, sp
   12c2e:	4628      	mov	r0, r5
   12c30:	f7fe fbd2 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12c34:	2800      	cmp	r0, #0
   12c36:	d108      	bne.n	12c4a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   12c38:	f89d 0000 	ldrb.w	r0, [sp]
   12c3c:	b140      	cbz	r0, 12c50 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   12c3e:	2100      	movs	r1, #0
   12c40:	4622      	mov	r2, r4
   12c42:	9801      	ldr	r0, [sp, #4]
   12c44:	f000 fad6 	bl	131f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
   12c48:	2000      	movs	r0, #0
   12c4a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12c4c:	2001      	movs	r0, #1
   12c4e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12c50:	2101      	movs	r1, #1
   12c52:	e7f5      	b.n	12c40 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

00012c54 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   12c54:	b538      	push	{r3, r4, r5, lr}
   12c56:	460d      	mov	r5, r1
   12c58:	4604      	mov	r4, r0
   12c5a:	f000 fa3f 	bl	130dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x164>
   12c5e:	2800      	cmp	r0, #0
   12c60:	d108      	bne.n	12c74 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   12c62:	4620      	mov	r0, r4
   12c64:	f000 fa09 	bl	1307a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x102>
   12c68:	2800      	cmp	r0, #0
   12c6a:	d103      	bne.n	12c74 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   12c6c:	f7f6 ff9a 	bl	9ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   12c70:	b108      	cbz	r0, 12c76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   12c72:	200c      	movs	r0, #12
   12c74:	bd38      	pop	{r3, r4, r5, pc}
   12c76:	f7f5 fe79 	bl	896c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   12c7a:	7028      	strb	r0, [r5, #0]
   12c7c:	74e0      	strb	r0, [r4, #19]
   12c7e:	4620      	mov	r0, r4
   12c80:	f7f5 fcac 	bl	85dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   12c84:	4605      	mov	r5, r0
   12c86:	7e60      	ldrb	r0, [r4, #25]
   12c88:	b158      	cbz	r0, 12ca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
   12c8a:	b955      	cbnz	r5, 12ca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
   12c8c:	20ff      	movs	r0, #255	; 0xff
   12c8e:	f88d 0000 	strb.w	r0, [sp]
   12c92:	4669      	mov	r1, sp
   12c94:	2000      	movs	r0, #0
   12c96:	f7f5 fec3 	bl	8a20 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   12c9a:	4669      	mov	r1, sp
   12c9c:	2000      	movs	r0, #0
   12c9e:	f7f5 fecd 	bl	8a3c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   12ca2:	4628      	mov	r0, r5
   12ca4:	bd38      	pop	{r3, r4, r5, pc}

00012ca6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   12ca6:	b510      	push	{r4, lr}
   12ca8:	4604      	mov	r4, r0
   12caa:	2000      	movs	r0, #0
   12cac:	f7fa ff32 	bl	db14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   12cb0:	b128      	cbz	r0, 12cbe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   12cb2:	4621      	mov	r1, r4
   12cb4:	2000      	movs	r0, #0
   12cb6:	f7f2 ff8d 	bl	5bd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   12cba:	2000      	movs	r0, #0
   12cbc:	bd10      	pop	{r4, pc}
   12cbe:	200c      	movs	r0, #12
   12cc0:	bd10      	pop	{r4, pc}

00012cc2 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   12cc2:	b510      	push	{r4, lr}
   12cc4:	4604      	mov	r4, r0
   12cc6:	f7fa f96f 	bl	cfa8 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   12cca:	b150      	cbz	r0, 12ce2 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   12ccc:	f7f7 f806 	bl	9cdc <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   12cd0:	b138      	cbz	r0, 12ce2 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   12cd2:	7820      	ldrb	r0, [r4, #0]
   12cd4:	f7f7 f820 	bl	9d18 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   12cd8:	7820      	ldrb	r0, [r4, #0]
   12cda:	f7fa f939 	bl	cf50 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   12cde:	2000      	movs	r0, #0
   12ce0:	bd10      	pop	{r4, pc}
   12ce2:	200c      	movs	r0, #12
   12ce4:	bd10      	pop	{r4, pc}

00012ce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   12ce6:	b510      	push	{r4, lr}
   12ce8:	4604      	mov	r4, r0
   12cea:	7800      	ldrb	r0, [r0, #0]
   12cec:	f000 0001 	and.w	r0, r0, #1
   12cf0:	f7fa f970 	bl	cfd4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   12cf4:	7820      	ldrb	r0, [r4, #0]
   12cf6:	f000 0001 	and.w	r0, r0, #1
   12cfa:	f7f7 f813 	bl	9d24 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   12cfe:	2000      	movs	r0, #0
   12d00:	bd10      	pop	{r4, pc}

00012d02 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   12d02:	b510      	push	{r4, lr}
   12d04:	4604      	mov	r4, r0
   12d06:	f000 fad9 	bl	132bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   12d0a:	b120      	cbz	r0, 12d16 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   12d0c:	4620      	mov	r0, r4
   12d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12d12:	f000 bb10 	b.w	13336 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   12d16:	2001      	movs	r0, #1
   12d18:	bd10      	pop	{r4, pc}

00012d1a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   12d1a:	b510      	push	{r4, lr}
   12d1c:	4604      	mov	r4, r0
   12d1e:	8880      	ldrh	r0, [r0, #4]
   12d20:	b128      	cbz	r0, 12d2e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   12d22:	2801      	cmp	r0, #1
   12d24:	d003      	beq.n	12d2e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   12d26:	2802      	cmp	r0, #2
   12d28:	d001      	beq.n	12d2e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   12d2a:	2012      	movs	r0, #18
   12d2c:	bd10      	pop	{r4, pc}
   12d2e:	78e0      	ldrb	r0, [r4, #3]
   12d30:	f000 fa3e 	bl	131b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   12d34:	b148      	cbz	r0, 12d4a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   12d36:	78a0      	ldrb	r0, [r4, #2]
   12d38:	f000 fa3a 	bl	131b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   12d3c:	b128      	cbz	r0, 12d4a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   12d3e:	4620      	mov	r0, r4
   12d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12d44:	2101      	movs	r1, #1
   12d46:	f000 b888 	b.w	12e5a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   12d4a:	2011      	movs	r0, #17
   12d4c:	bd10      	pop	{r4, pc}

00012d4e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   12d4e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   12d50:	460c      	mov	r4, r1
   12d52:	4605      	mov	r5, r0
   12d54:	8800      	ldrh	r0, [r0, #0]
   12d56:	4669      	mov	r1, sp
   12d58:	f7fe fb3e 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12d5c:	2800      	cmp	r0, #0
   12d5e:	d106      	bne.n	12d6e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   12d60:	9801      	ldr	r0, [sp, #4]
   12d62:	8829      	ldrh	r1, [r5, #0]
   12d64:	8021      	strh	r1, [r4, #0]
   12d66:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   12d6a:	8060      	strh	r0, [r4, #2]
   12d6c:	2000      	movs	r0, #0
   12d6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00012d70 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   12d70:	b510      	push	{r4, lr}
   12d72:	4604      	mov	r4, r0
   12d74:	4601      	mov	r1, r0
   12d76:	2000      	movs	r0, #0
   12d78:	f7f2 ff0a 	bl	5b90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   12d7c:	b910      	cbnz	r0, 12d84 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   12d7e:	2000      	movs	r0, #0
   12d80:	6020      	str	r0, [r4, #0]
   12d82:	80a0      	strh	r0, [r4, #4]
   12d84:	2000      	movs	r0, #0
   12d86:	bd10      	pop	{r4, pc}

00012d88 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   12d88:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   12d8a:	8800      	ldrh	r0, [r0, #0]
   12d8c:	4669      	mov	r1, sp
   12d8e:	f7fe fb23 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12d92:	b978      	cbnz	r0, 12db4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   12d94:	4668      	mov	r0, sp
   12d96:	f000 fa97 	bl	132c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x350>
   12d9a:	b158      	cbz	r0, 12db4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   12d9c:	9c01      	ldr	r4, [sp, #4]
   12d9e:	f89d 0000 	ldrb.w	r0, [sp]
   12da2:	3478      	adds	r4, #120	; 0x78
   12da4:	f000 f931 	bl	1300a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   12da8:	2800      	cmp	r0, #0
   12daa:	9801      	ldr	r0, [sp, #4]
   12dac:	d004      	beq.n	12db8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   12dae:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   12db2:	e003      	b.n	12dbc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   12db4:	2002      	movs	r0, #2
   12db6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12db8:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   12dbc:	7801      	ldrb	r1, [r0, #0]
   12dbe:	b911      	cbnz	r1, 12dc6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   12dc0:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   12dc4:	b109      	cbz	r1, 12dca <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   12dc6:	203a      	movs	r0, #58	; 0x3a
   12dc8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12dca:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   12dce:	f04f 0501 	mov.w	r5, #1
   12dd2:	0789      	lsls	r1, r1, #30
   12dd4:	d103      	bne.n	12dde <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   12dd6:	7005      	strb	r5, [r0, #0]
   12dd8:	4668      	mov	r0, sp
   12dda:	f7fe ff8a 	bl	11cf2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   12dde:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   12de2:	2000      	movs	r0, #0
   12de4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00012de6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   12de6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   12de8:	460c      	mov	r4, r1
   12dea:	4605      	mov	r5, r0
   12dec:	8800      	ldrh	r0, [r0, #0]
   12dee:	4669      	mov	r1, sp
   12df0:	f7fe faf2 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12df4:	b108      	cbz	r0, 12dfa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   12df6:	2002      	movs	r0, #2
   12df8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12dfa:	78a8      	ldrb	r0, [r5, #2]
   12dfc:	b128      	cbz	r0, 12e0a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   12dfe:	2008      	movs	r0, #8
   12e00:	70a0      	strb	r0, [r4, #2]
   12e02:	8828      	ldrh	r0, [r5, #0]
   12e04:	8020      	strh	r0, [r4, #0]
   12e06:	2000      	movs	r0, #0
   12e08:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   12e0a:	9801      	ldr	r0, [sp, #4]
   12e0c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   12e10:	e7f6      	b.n	12e00 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00012e12 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   12e12:	b510      	push	{r4, lr}
   12e14:	f7fb f8b8 	bl	df88 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   12e18:	2000      	movs	r0, #0
   12e1a:	bd10      	pop	{r4, pc}

00012e1c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   12e1c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   12e20:	4604      	mov	r4, r0
   12e22:	8840      	ldrh	r0, [r0, #2]
   12e24:	460d      	mov	r5, r1
   12e26:	b1b0      	cbz	r0, 12e56 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
   12e28:	8820      	ldrh	r0, [r4, #0]
   12e2a:	4669      	mov	r1, sp
   12e2c:	f7fe fad4 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12e30:	2800      	cmp	r0, #0
   12e32:	d10e      	bne.n	12e52 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
   12e34:	8820      	ldrh	r0, [r4, #0]
   12e36:	8028      	strh	r0, [r5, #0]
   12e38:	9e01      	ldr	r6, [sp, #4]
   12e3a:	1d35      	adds	r5, r6, #4
   12e3c:	3678      	adds	r6, #120	; 0x78
   12e3e:	682f      	ldr	r7, [r5, #0]
   12e40:	8862      	ldrh	r2, [r4, #2]
   12e42:	4639      	mov	r1, r7
   12e44:	4630      	mov	r0, r6
   12e46:	f7fe fcdc 	bl	11802 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   12e4a:	6828      	ldr	r0, [r5, #0]
   12e4c:	42b8      	cmp	r0, r7
   12e4e:	d1f6      	bne.n	12e3e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
   12e50:	2000      	movs	r0, #0
   12e52:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   12e56:	2012      	movs	r0, #18
   12e58:	e7fb      	b.n	12e52 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

00012e5a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   12e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e5e:	b08a      	sub	sp, #40	; 0x28
   12e60:	468a      	mov	sl, r1
   12e62:	4681      	mov	r9, r0
   12e64:	8800      	ldrh	r0, [r0, #0]
   12e66:	a904      	add	r1, sp, #16
   12e68:	f7fe fab6 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12e6c:	2800      	cmp	r0, #0
   12e6e:	d14a      	bne.n	12f06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   12e70:	9805      	ldr	r0, [sp, #20]
   12e72:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12e76:	4605      	mov	r5, r0
   12e78:	3078      	adds	r0, #120	; 0x78
   12e7a:	2900      	cmp	r1, #0
   12e7c:	4629      	mov	r1, r5
   12e7e:	d005      	beq.n	12e8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   12e80:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   12e84:	7b41      	ldrb	r1, [r0, #13]
   12e86:	2921      	cmp	r1, #33	; 0x21
   12e88:	d003      	beq.n	12e92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   12e8a:	e003      	b.n	12e94 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   12e8c:	f891 61aa 	ldrb.w	r6, [r1, #426]	; 0x1aa
   12e90:	e7f8      	b.n	12e84 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   12e92:	b13e      	cbz	r6, 12ea4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   12e94:	2400      	movs	r4, #0
   12e96:	3046      	adds	r0, #70	; 0x46
   12e98:	2108      	movs	r1, #8
   12e9a:	4607      	mov	r7, r0
   12e9c:	f7ff fc5b 	bl	12756 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   12ea0:	b110      	cbz	r0, 12ea8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   12ea2:	e007      	b.n	12eb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   12ea4:	2401      	movs	r4, #1
   12ea6:	e7f6      	b.n	12e96 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   12ea8:	210b      	movs	r1, #11
   12eaa:	4638      	mov	r0, r7
   12eac:	f7ff fc53 	bl	12756 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   12eb0:	b900      	cbnz	r0, 12eb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   12eb2:	b33c      	cbz	r4, 12f04 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   12eb4:	a802      	add	r0, sp, #8
   12eb6:	9000      	str	r0, [sp, #0]
   12eb8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ebc:	ab01      	add	r3, sp, #4
   12ebe:	464a      	mov	r2, r9
   12ec0:	4629      	mov	r1, r5
   12ec2:	f000 f9db 	bl	1327c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   12ec6:	0007      	movs	r7, r0
   12ec8:	d11d      	bne.n	12f06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   12eca:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ece:	9c05      	ldr	r4, [sp, #20]
   12ed0:	b1e0      	cbz	r0, 12f0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   12ed2:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   12ed6:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   12eda:	b168      	cbz	r0, 12ef8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   12edc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12ee0:	f010 0102 	ands.w	r1, r0, #2
   12ee4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12ee8:	f88d 1004 	strb.w	r1, [sp, #4]
   12eec:	f000 0002 	and.w	r0, r0, #2
   12ef0:	f88d 0008 	strb.w	r0, [sp, #8]
   12ef4:	d00d      	beq.n	12f12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   12ef6:	b160      	cbz	r0, 12f12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   12ef8:	2001      	movs	r0, #1
   12efa:	7060      	strb	r0, [r4, #1]
   12efc:	f04f 0800 	mov.w	r8, #0
   12f00:	b95e      	cbnz	r6, 12f1a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   12f02:	e008      	b.n	12f16 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   12f04:	201a      	movs	r0, #26
   12f06:	b00a      	add	sp, #40	; 0x28
   12f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f0c:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   12f10:	e7e1      	b.n	12ed6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   12f12:	2009      	movs	r0, #9
   12f14:	e7f7      	b.n	12f06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   12f16:	7820      	ldrb	r0, [r4, #0]
   12f18:	b108      	cbz	r0, 12f1e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   12f1a:	273a      	movs	r7, #58	; 0x3a
   12f1c:	e014      	b.n	12f48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xee>
   12f1e:	f8cd 8018 	str.w	r8, [sp, #24]
   12f22:	f884 a000 	strb.w	sl, [r4]
   12f26:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12f2a:	70a0      	strb	r0, [r4, #2]
   12f2c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   12f30:	70e1      	strb	r1, [r4, #3]
   12f32:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   12f36:	80a2      	strh	r2, [r4, #4]
   12f38:	f88d 0018 	strb.w	r0, [sp, #24]
   12f3c:	f88d 1019 	strb.w	r1, [sp, #25]
   12f40:	a906      	add	r1, sp, #24
   12f42:	4628      	mov	r0, r5
   12f44:	f7fe fb43 	bl	115ce <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   12f48:	f884 8001 	strb.w	r8, [r4, #1]
   12f4c:	4638      	mov	r0, r7
   12f4e:	e7da      	b.n	12f06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00012f50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   12f50:	b510      	push	{r4, lr}
   12f52:	2008      	movs	r0, #8
   12f54:	f7fb f8aa 	bl	e0ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   12f58:	f7fa f874 	bl	d044 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   12f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f60:	f7f7 bec4 	b.w	acec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

00012f64 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>:
   12f64:	b510      	push	{r4, lr}
   12f66:	200b      	movs	r0, #11
   12f68:	f7fb f8a0 	bl	e0ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   12f6c:	f7fa f86a 	bl	d044 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   12f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f74:	f7f7 beba 	b.w	acec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

00012f78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   12f78:	b510      	push	{r4, lr}
   12f7a:	4604      	mov	r4, r0
   12f7c:	2000      	movs	r0, #0
   12f7e:	8822      	ldrh	r2, [r4, #0]
   12f80:	b086      	sub	sp, #24
   12f82:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   12f86:	39ff      	subs	r1, #255	; 0xff
   12f88:	d008      	beq.n	12f9c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   12f8a:	a903      	add	r1, sp, #12
   12f8c:	4610      	mov	r0, r2
   12f8e:	f7fe fa23 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12f92:	b110      	cbz	r0, 12f9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   12f94:	2002      	movs	r0, #2
   12f96:	b006      	add	sp, #24
   12f98:	bd10      	pop	{r4, pc}
   12f9a:	9804      	ldr	r0, [sp, #16]
   12f9c:	8921      	ldrh	r1, [r4, #8]
   12f9e:	89a3      	ldrh	r3, [r4, #12]
   12fa0:	8962      	ldrh	r2, [r4, #10]
   12fa2:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   12fa6:	88e3      	ldrh	r3, [r4, #6]
   12fa8:	88a2      	ldrh	r2, [r4, #4]
   12faa:	8861      	ldrh	r1, [r4, #2]
   12fac:	f7fa fe46 	bl	dc3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x190>
   12fb0:	b108      	cbz	r0, 12fb6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   12fb2:	2000      	movs	r0, #0
   12fb4:	e7ef      	b.n	12f96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   12fb6:	2030      	movs	r0, #48	; 0x30
   12fb8:	e7ed      	b.n	12f96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   12fba:	f44f 71a4 	mov.w	r1, #328	; 0x148
   12fbe:	4288      	cmp	r0, r1
   12fc0:	d303      	bcc.n	12fca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   12fc2:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   12fc6:	4288      	cmp	r0, r1
   12fc8:	d300      	bcc.n	12fcc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   12fca:	4608      	mov	r0, r1
   12fcc:	4770      	bx	lr
   12fce:	0741      	lsls	r1, r0, #29
   12fd0:	d501      	bpl.n	12fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   12fd2:	2008      	movs	r0, #8
   12fd4:	4770      	bx	lr
   12fd6:	07c1      	lsls	r1, r0, #31
   12fd8:	d001      	beq.n	12fde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   12fda:	2001      	movs	r0, #1
   12fdc:	4770      	bx	lr
   12fde:	0780      	lsls	r0, r0, #30
   12fe0:	d501      	bpl.n	12fe6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6e>
   12fe2:	2002      	movs	r0, #2
   12fe4:	4770      	bx	lr
   12fe6:	2000      	movs	r0, #0
   12fe8:	4770      	bx	lr
   12fea:	b510      	push	{r4, lr}
   12fec:	2801      	cmp	r0, #1
   12fee:	d00b      	beq.n	13008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   12ff0:	2802      	cmp	r0, #2
   12ff2:	d009      	beq.n	13008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   12ff4:	2804      	cmp	r0, #4
   12ff6:	d006      	beq.n	13006 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   12ff8:	2808      	cmp	r0, #8
   12ffa:	d004      	beq.n	13006 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   12ffc:	f240 218f 	movw	r1, #655	; 0x28f
   13000:	2006      	movs	r0, #6
   13002:	f7f1 fe15 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13006:	2003      	movs	r0, #3
   13008:	bd10      	pop	{r4, pc}
   1300a:	b108      	cbz	r0, 13010 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   1300c:	2000      	movs	r0, #0
   1300e:	4770      	bx	lr
   13010:	2001      	movs	r0, #1
   13012:	4770      	bx	lr
   13014:	b570      	push	{r4, r5, r6, lr}
   13016:	460d      	mov	r5, r1
   13018:	8899      	ldrh	r1, [r3, #4]
   1301a:	461c      	mov	r4, r3
   1301c:	194b      	adds	r3, r1, r5
   1301e:	4293      	cmp	r3, r2
   13020:	d901      	bls.n	13026 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   13022:	2007      	movs	r0, #7
   13024:	bd70      	pop	{r4, r5, r6, pc}
   13026:	6822      	ldr	r2, [r4, #0]
   13028:	1853      	adds	r3, r2, r1
   1302a:	4601      	mov	r1, r0
   1302c:	462a      	mov	r2, r5
   1302e:	4618      	mov	r0, r3
   13030:	f7f1 fc72 	bl	4918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   13034:	88a0      	ldrh	r0, [r4, #4]
   13036:	4428      	add	r0, r5
   13038:	80a0      	strh	r0, [r4, #4]
   1303a:	2000      	movs	r0, #0
   1303c:	bd70      	pop	{r4, r5, r6, pc}
   1303e:	b570      	push	{r4, r5, r6, lr}
   13040:	460c      	mov	r4, r1
   13042:	4605      	mov	r5, r0
   13044:	b112      	cbz	r2, 1304c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   13046:	291f      	cmp	r1, #31
   13048:	d807      	bhi.n	1305a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe2>
   1304a:	e010      	b.n	1306e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf6>
   1304c:	2cff      	cmp	r4, #255	; 0xff
   1304e:	d804      	bhi.n	1305a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe2>
   13050:	f7f5 fc74 	bl	893c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   13054:	b118      	cbz	r0, 1305e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
   13056:	2c1f      	cmp	r4, #31
   13058:	d901      	bls.n	1305e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
   1305a:	2012      	movs	r0, #18
   1305c:	bd70      	pop	{r4, r5, r6, pc}
   1305e:	4628      	mov	r0, r5
   13060:	f7f5 fc8a 	bl	8978 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   13064:	b128      	cbz	r0, 13072 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   13066:	4620      	mov	r0, r4
   13068:	f7f5 fa46 	bl	84f8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1306c:	b118      	cbz	r0, 13076 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfe>
   1306e:	2000      	movs	r0, #0
   13070:	bd70      	pop	{r4, r5, r6, pc}
   13072:	2042      	movs	r0, #66	; 0x42
   13074:	bd70      	pop	{r4, r5, r6, pc}
   13076:	2045      	movs	r0, #69	; 0x45
   13078:	bd70      	pop	{r4, r5, r6, pc}
   1307a:	b510      	push	{r4, lr}
   1307c:	4604      	mov	r4, r0
   1307e:	7840      	ldrb	r0, [r0, #1]
   13080:	06c0      	lsls	r0, r0, #27
   13082:	d413      	bmi.n	130ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   13084:	f7fb f822 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   13088:	0780      	lsls	r0, r0, #30
   1308a:	d405      	bmi.n	13098 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   1308c:	7d20      	ldrb	r0, [r4, #20]
   1308e:	2802      	cmp	r0, #2
   13090:	d020      	beq.n	130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   13092:	7da0      	ldrb	r0, [r4, #22]
   13094:	2802      	cmp	r0, #2
   13096:	d01d      	beq.n	130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   13098:	f7fb f818 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1309c:	0740      	lsls	r0, r0, #29
   1309e:	d405      	bmi.n	130ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   130a0:	7d20      	ldrb	r0, [r4, #20]
   130a2:	2803      	cmp	r0, #3
   130a4:	d016      	beq.n	130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   130a6:	7da0      	ldrb	r0, [r4, #22]
   130a8:	2803      	cmp	r0, #3
   130aa:	d013      	beq.n	130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   130ac:	7860      	ldrb	r0, [r4, #1]
   130ae:	07c0      	lsls	r0, r0, #31
   130b0:	d002      	beq.n	130b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   130b2:	f7fa ffa7 	bl	e004 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   130b6:	b168      	cbz	r0, 130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   130b8:	7860      	ldrb	r0, [r4, #1]
   130ba:	06c1      	lsls	r1, r0, #27
   130bc:	d405      	bmi.n	130ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   130be:	0700      	lsls	r0, r0, #28
   130c0:	d503      	bpl.n	130ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   130c2:	7d20      	ldrb	r0, [r4, #20]
   130c4:	2802      	cmp	r0, #2
   130c6:	d105      	bne.n	130d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   130c8:	e006      	b.n	130d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   130ca:	7d20      	ldrb	r0, [r4, #20]
   130cc:	2802      	cmp	r0, #2
   130ce:	d003      	beq.n	130d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   130d0:	7ea0      	ldrb	r0, [r4, #26]
   130d2:	b108      	cbz	r0, 130d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   130d4:	2011      	movs	r0, #17
   130d6:	bd10      	pop	{r4, pc}
   130d8:	2000      	movs	r0, #0
   130da:	bd10      	pop	{r4, pc}
   130dc:	b538      	push	{r3, r4, r5, lr}
   130de:	4604      	mov	r4, r0
   130e0:	7800      	ldrb	r0, [r0, #0]
   130e2:	28ef      	cmp	r0, #239	; 0xef
   130e4:	d860      	bhi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   130e6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   130ea:	f8ad 0000 	strh.w	r0, [sp]
   130ee:	9800      	ldr	r0, [sp, #0]
   130f0:	f000 f9cf 	bl	13492 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x51a>
   130f4:	b3c0      	cbz	r0, 13168 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f0>
   130f6:	7860      	ldrb	r0, [r4, #1]
   130f8:	0701      	lsls	r1, r0, #28
   130fa:	d40f      	bmi.n	1311c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a4>
   130fc:	f8d4 2002 	ldr.w	r2, [r4, #2]
   13100:	f8d4 1005 	ldr.w	r1, [r4, #5]
   13104:	0a13      	lsrs	r3, r2, #8
   13106:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   1310a:	d84d      	bhi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1310c:	2320      	movs	r3, #32
   1310e:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   13112:	d849      	bhi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13114:	025a      	lsls	r2, r3, #9
   13116:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   1311a:	d345      	bcc.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1311c:	7a61      	ldrb	r1, [r4, #9]
   1311e:	b319      	cbz	r1, 13168 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f0>
   13120:	2907      	cmp	r1, #7
   13122:	d841      	bhi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13124:	7aa1      	ldrb	r1, [r4, #10]
   13126:	b129      	cbz	r1, 13134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   13128:	2901      	cmp	r1, #1
   1312a:	d003      	beq.n	13134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   1312c:	2902      	cmp	r1, #2
   1312e:	d001      	beq.n	13134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   13130:	2903      	cmp	r1, #3
   13132:	d139      	bne.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13134:	0742      	lsls	r2, r0, #29
   13136:	d403      	bmi.n	13140 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
   13138:	2902      	cmp	r1, #2
   1313a:	d001      	beq.n	13140 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
   1313c:	2903      	cmp	r1, #3
   1313e:	d105      	bne.n	1314c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d4>
   13140:	7ae1      	ldrb	r1, [r4, #11]
   13142:	b109      	cbz	r1, 13148 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d0>
   13144:	2901      	cmp	r1, #1
   13146:	d12f      	bne.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13148:	0741      	lsls	r1, r0, #29
   1314a:	d407      	bmi.n	1315c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   1314c:	7ca1      	ldrb	r1, [r4, #18]
   1314e:	b129      	cbz	r1, 1315c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   13150:	2901      	cmp	r1, #1
   13152:	d003      	beq.n	1315c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   13154:	2902      	cmp	r1, #2
   13156:	d001      	beq.n	1315c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   13158:	2903      	cmp	r1, #3
   1315a:	d125      	bne.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1315c:	06c1      	lsls	r1, r0, #27
   1315e:	d504      	bpl.n	1316a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f2>
   13160:	7d20      	ldrb	r0, [r4, #20]
   13162:	2801      	cmp	r0, #1
   13164:	d120      	bne.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13166:	e01b      	b.n	131a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x228>
   13168:	e01e      	b.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1316a:	7d21      	ldrb	r1, [r4, #20]
   1316c:	2902      	cmp	r1, #2
   1316e:	d10b      	bne.n	13188 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   13170:	07c1      	lsls	r1, r0, #31
   13172:	d019      	beq.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13174:	0741      	lsls	r1, r0, #29
   13176:	d417      	bmi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13178:	0701      	lsls	r1, r0, #28
   1317a:	d515      	bpl.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1317c:	0641      	lsls	r1, r0, #25
   1317e:	d413      	bmi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13180:	0681      	lsls	r1, r0, #26
   13182:	d411      	bmi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13184:	0781      	lsls	r1, r0, #30
   13186:	d40f      	bmi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   13188:	06c0      	lsls	r0, r0, #27
   1318a:	d409      	bmi.n	131a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x228>
   1318c:	7da0      	ldrb	r0, [r4, #22]
   1318e:	2801      	cmp	r0, #1
   13190:	d003      	beq.n	1319a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   13192:	2802      	cmp	r0, #2
   13194:	d001      	beq.n	1319a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   13196:	2803      	cmp	r0, #3
   13198:	d106      	bne.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1319a:	7de0      	ldrb	r0, [r4, #23]
   1319c:	280f      	cmp	r0, #15
   1319e:	d803      	bhi.n	131a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   131a0:	7e20      	ldrb	r0, [r4, #24]
   131a2:	b118      	cbz	r0, 131ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x234>
   131a4:	2801      	cmp	r0, #1
   131a6:	d001      	beq.n	131ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x234>
   131a8:	2012      	movs	r0, #18
   131aa:	bd38      	pop	{r3, r4, r5, pc}
   131ac:	2000      	movs	r0, #0
   131ae:	bd38      	pop	{r3, r4, r5, pc}
   131b0:	b510      	push	{r4, lr}
   131b2:	0004      	movs	r4, r0
   131b4:	d005      	beq.n	131c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24a>
   131b6:	f7fa ff89 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   131ba:	4384      	bics	r4, r0
   131bc:	d001      	beq.n	131c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24a>
   131be:	2000      	movs	r0, #0
   131c0:	bd10      	pop	{r4, pc}
   131c2:	2001      	movs	r0, #1
   131c4:	bd10      	pop	{r4, pc}
   131c6:	28fb      	cmp	r0, #251	; 0xfb
   131c8:	d802      	bhi.n	131d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x258>
   131ca:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   131ce:	d901      	bls.n	131d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25c>
   131d0:	2011      	movs	r0, #17
   131d2:	4770      	bx	lr
   131d4:	2000      	movs	r0, #0
   131d6:	4770      	bx	lr
   131d8:	381b      	subs	r0, #27
   131da:	28e1      	cmp	r0, #225	; 0xe1
   131dc:	d206      	bcs.n	131ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
   131de:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   131e2:	d303      	bcc.n	131ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
   131e4:	f244 2090 	movw	r0, #17040	; 0x4290
   131e8:	4281      	cmp	r1, r0
   131ea:	d901      	bls.n	131f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x278>
   131ec:	2012      	movs	r0, #18
   131ee:	4770      	bx	lr
   131f0:	2000      	movs	r0, #0
   131f2:	4770      	bx	lr
   131f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131f8:	4605      	mov	r5, r0
   131fa:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   131fe:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   13202:	4616      	mov	r6, r2
   13204:	3028      	adds	r0, #40	; 0x28
   13206:	b111      	cbz	r1, 1320e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x296>
   13208:	f7f9 feea 	bl	cfe0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   1320c:	e001      	b.n	13212 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x29a>
   1320e:	f7f6 fd8f 	bl	9d30 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   13212:	4680      	mov	r8, r0
   13214:	2102      	movs	r1, #2
   13216:	f7fe f9ae 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1321a:	4287      	cmp	r7, r0
   1321c:	d200      	bcs.n	13220 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   1321e:	4638      	mov	r0, r7
   13220:	4607      	mov	r7, r0
   13222:	2102      	movs	r1, #2
   13224:	4640      	mov	r0, r8
   13226:	f7fe f9a6 	bl	11576 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1322a:	4284      	cmp	r4, r0
   1322c:	d200      	bcs.n	13230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b8>
   1322e:	4620      	mov	r0, r4
   13230:	8829      	ldrh	r1, [r5, #0]
   13232:	8031      	strh	r1, [r6, #0]
   13234:	2f1b      	cmp	r7, #27
   13236:	d913      	bls.n	13260 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
   13238:	2ffb      	cmp	r7, #251	; 0xfb
   1323a:	d300      	bcc.n	1323e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   1323c:	27fb      	movs	r7, #251	; 0xfb
   1323e:	8077      	strh	r7, [r6, #2]
   13240:	281b      	cmp	r0, #27
   13242:	d90f      	bls.n	13264 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ec>
   13244:	28fb      	cmp	r0, #251	; 0xfb
   13246:	d300      	bcc.n	1324a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   13248:	20fb      	movs	r0, #251	; 0xfb
   1324a:	80f0      	strh	r0, [r6, #6]
   1324c:	4640      	mov	r0, r8
   1324e:	f7ff feb4 	bl	12fba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   13252:	80b0      	strh	r0, [r6, #4]
   13254:	4640      	mov	r0, r8
   13256:	f7ff feb0 	bl	12fba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   1325a:	8130      	strh	r0, [r6, #8]
   1325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13260:	271b      	movs	r7, #27
   13262:	e7ec      	b.n	1323e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   13264:	201b      	movs	r0, #27
   13266:	e7f0      	b.n	1324a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   13268:	b510      	push	{r4, lr}
   1326a:	f000 f859 	bl	13320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1326e:	b918      	cbnz	r0, 13278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   13270:	f7f6 fc98 	bl	9ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   13274:	2800      	cmp	r0, #0
   13276:	d000      	beq.n	1327a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x302>
   13278:	2001      	movs	r0, #1
   1327a:	bd10      	pop	{r4, pc}
   1327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13280:	7890      	ldrb	r0, [r2, #2]
   13282:	9e06      	ldr	r6, [sp, #24]
   13284:	461d      	mov	r5, r3
   13286:	4614      	mov	r4, r2
   13288:	b908      	cbnz	r0, 1328e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x316>
   1328a:	f7fa ff1f 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1328e:	78e4      	ldrb	r4, [r4, #3]
   13290:	4607      	mov	r7, r0
   13292:	b914      	cbnz	r4, 1329a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x322>
   13294:	f7fa ff1a 	bl	e0cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   13298:	4604      	mov	r4, r0
   1329a:	b16f      	cbz	r7, 132b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   1329c:	b164      	cbz	r4, 132b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   1329e:	4638      	mov	r0, r7
   132a0:	f7ff fe95 	bl	12fce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   132a4:	4620      	mov	r0, r4
   132a6:	f7ff fe92 	bl	12fce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   132aa:	b12f      	cbz	r7, 132b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   132ac:	b124      	cbz	r4, 132b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   132ae:	702f      	strb	r7, [r5, #0]
   132b0:	7034      	strb	r4, [r6, #0]
   132b2:	2000      	movs	r0, #0
   132b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132b8:	2009      	movs	r0, #9
   132ba:	e7fb      	b.n	132b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33c>
   132bc:	b510      	push	{r4, lr}
   132be:	f7fa feff 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   132c2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   132c6:	bd10      	pop	{r4, pc}
   132c8:	7801      	ldrb	r1, [r0, #0]
   132ca:	6840      	ldr	r0, [r0, #4]
   132cc:	b109      	cbz	r1, 132d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   132ce:	f000 b80e 	b.w	132ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x376>
   132d2:	f000 b800 	b.w	132d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
   132d6:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   132da:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   132de:	b920      	cbnz	r0, 132ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   132e0:	b119      	cbz	r1, 132ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   132e2:	2904      	cmp	r1, #4
   132e4:	d001      	beq.n	132ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   132e6:	2001      	movs	r0, #1
   132e8:	4770      	bx	lr
   132ea:	2000      	movs	r0, #0
   132ec:	4770      	bx	lr
   132ee:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   132f2:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   132f6:	b920      	cbnz	r0, 13302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   132f8:	b119      	cbz	r1, 13302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   132fa:	2904      	cmp	r1, #4
   132fc:	d001      	beq.n	13302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   132fe:	2001      	movs	r0, #1
   13300:	4770      	bx	lr
   13302:	2000      	movs	r0, #0
   13304:	4770      	bx	lr
   13306:	b510      	push	{r4, lr}
   13308:	f7fa feda 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1330c:	0a00      	lsrs	r0, r0, #8
   1330e:	07c0      	lsls	r0, r0, #31
   13310:	d104      	bne.n	1331c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a4>
   13312:	f7fa fed5 	bl	e0c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   13316:	0ac0      	lsrs	r0, r0, #11
   13318:	07c0      	lsls	r0, r0, #31
   1331a:	d000      	beq.n	1331e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a6>
   1331c:	2001      	movs	r0, #1
   1331e:	bd10      	pop	{r4, pc}
   13320:	b510      	push	{r4, lr}
   13322:	f7f9 fe6b 	bl	cffc <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   13326:	2804      	cmp	r0, #4
   13328:	d003      	beq.n	13332 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ba>
   1332a:	2805      	cmp	r0, #5
   1332c:	d001      	beq.n	13332 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ba>
   1332e:	2000      	movs	r0, #0
   13330:	bd10      	pop	{r4, pc}
   13332:	2001      	movs	r0, #1
   13334:	bd10      	pop	{r4, pc}
   13336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1333a:	b086      	sub	sp, #24
   1333c:	4604      	mov	r4, r0
   1333e:	8800      	ldrh	r0, [r0, #0]
   13340:	4669      	mov	r1, sp
   13342:	f7fe f849 	bl	113d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   13346:	2800      	cmp	r0, #0
   13348:	d151      	bne.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   1334a:	9801      	ldr	r0, [sp, #4]
   1334c:	f89d 1000 	ldrb.w	r1, [sp]
   13350:	3078      	adds	r0, #120	; 0x78
   13352:	2900      	cmp	r1, #0
   13354:	9901      	ldr	r1, [sp, #4]
   13356:	d007      	beq.n	13368 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f0>
   13358:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   1335c:	f88d 1008 	strb.w	r1, [sp, #8]
   13360:	7b81      	ldrb	r1, [r0, #14]
   13362:	0689      	lsls	r1, r1, #26
   13364:	d413      	bmi.n	1338e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x416>
   13366:	e009      	b.n	1337c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   13368:	f891 119e 	ldrb.w	r1, [r1, #414]	; 0x19e
   1336c:	f88d 1008 	strb.w	r1, [sp, #8]
   13370:	7b41      	ldrb	r1, [r0, #13]
   13372:	291d      	cmp	r1, #29
   13374:	d00b      	beq.n	1338e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x416>
   13376:	e001      	b.n	1337c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   13378:	2101      	movs	r1, #1
   1337a:	e000      	b.n	1337e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   1337c:	2100      	movs	r1, #0
   1337e:	f88d 100c 	strb.w	r1, [sp, #12]
   13382:	2105      	movs	r1, #5
   13384:	3046      	adds	r0, #70	; 0x46
   13386:	f7ff f9e6 	bl	12756 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   1338a:	b128      	cbz	r0, 13398 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x420>
   1338c:	e007      	b.n	1339e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x426>
   1338e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   13392:	2900      	cmp	r1, #0
   13394:	d1f2      	bne.n	1337c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   13396:	e7ef      	b.n	13378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x400>
   13398:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1339c:	b330      	cbz	r0, 133ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x474>
   1339e:	8921      	ldrh	r1, [r4, #8]
   133a0:	88e0      	ldrh	r0, [r4, #6]
   133a2:	f7ff ff19 	bl	131d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
   133a6:	2800      	cmp	r0, #0
   133a8:	d121      	bne.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   133aa:	88a1      	ldrh	r1, [r4, #4]
   133ac:	8860      	ldrh	r0, [r4, #2]
   133ae:	f7ff ff13 	bl	131d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
   133b2:	2800      	cmp	r0, #0
   133b4:	d11b      	bne.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   133b6:	8921      	ldrh	r1, [r4, #8]
   133b8:	88e0      	ldrh	r0, [r4, #6]
   133ba:	f7ff ff04 	bl	131c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24e>
   133be:	2800      	cmp	r0, #0
   133c0:	d115      	bne.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   133c2:	88a1      	ldrh	r1, [r4, #4]
   133c4:	8860      	ldrh	r0, [r4, #2]
   133c6:	f7ff fefe 	bl	131c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24e>
   133ca:	0006      	movs	r6, r0
   133cc:	d10f      	bne.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   133ce:	f89d 0000 	ldrb.w	r0, [sp]
   133d2:	9f01      	ldr	r7, [sp, #4]
   133d4:	b170      	cbz	r0, 133f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47c>
   133d6:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   133da:	f04f 0801 	mov.w	r8, #1
   133de:	f885 8001 	strb.w	r8, [r5, #1]
   133e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   133e6:	b140      	cbz	r0, 133fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x482>
   133e8:	263a      	movs	r6, #58	; 0x3a
   133ea:	e037      	b.n	1345c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   133ec:	201a      	movs	r0, #26
   133ee:	b006      	add	sp, #24
   133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133f4:	f507 759a 	add.w	r5, r7, #308	; 0x134
   133f8:	e7ef      	b.n	133da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x462>
   133fa:	f89d 0000 	ldrb.w	r0, [sp]
   133fe:	f7ff fe04 	bl	1300a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   13402:	4601      	mov	r1, r0
   13404:	aa02      	add	r2, sp, #8
   13406:	4638      	mov	r0, r7
   13408:	f7ff fef4 	bl	131f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
   1340c:	8861      	ldrh	r1, [r4, #2]
   1340e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   13412:	4281      	cmp	r1, r0
   13414:	d200      	bcs.n	13418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   13416:	4608      	mov	r0, r1
   13418:	80e8      	strh	r0, [r5, #6]
   1341a:	88a1      	ldrh	r1, [r4, #4]
   1341c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   13420:	4281      	cmp	r1, r0
   13422:	d200      	bcs.n	13426 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ae>
   13424:	4608      	mov	r0, r1
   13426:	8128      	strh	r0, [r5, #8]
   13428:	88e2      	ldrh	r2, [r4, #6]
   1342a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1342e:	428a      	cmp	r2, r1
   13430:	d200      	bcs.n	13434 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   13432:	4611      	mov	r1, r2
   13434:	8069      	strh	r1, [r5, #2]
   13436:	8921      	ldrh	r1, [r4, #8]
   13438:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1343c:	4291      	cmp	r1, r2
   1343e:	d300      	bcc.n	13442 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ca>
   13440:	4611      	mov	r1, r2
   13442:	f640 0248 	movw	r2, #2120	; 0x848
   13446:	80a9      	strh	r1, [r5, #4]
   13448:	4291      	cmp	r1, r2
   1344a:	d300      	bcc.n	1344e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   1344c:	4611      	mov	r1, r2
   1344e:	80a9      	strh	r1, [r5, #4]
   13450:	4290      	cmp	r0, r2
   13452:	d200      	bcs.n	13456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   13454:	4602      	mov	r2, r0
   13456:	812a      	strh	r2, [r5, #8]
   13458:	f885 8000 	strb.w	r8, [r5]
   1345c:	2000      	movs	r0, #0
   1345e:	7068      	strb	r0, [r5, #1]
   13460:	4630      	mov	r0, r6
   13462:	e7c4      	b.n	133ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   13464:	b530      	push	{r4, r5, lr}
   13466:	f340 0400 	sbfx	r4, r0, #0, #1
   1346a:	f340 0040 	sbfx	r0, r0, #1, #1
   1346e:	1c40      	adds	r0, r0, #1
   13470:	9d03      	ldr	r5, [sp, #12]
   13472:	1c64      	adds	r4, r4, #1
   13474:	d000      	beq.n	13478 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   13476:	b119      	cbz	r1, 13480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x508>
   13478:	b100      	cbz	r0, 1347c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   1347a:	b10a      	cbz	r2, 13480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x508>
   1347c:	b91c      	cbnz	r4, 13486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50e>
   1347e:	e001      	b.n	13484 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50c>
   13480:	2011      	movs	r0, #17
   13482:	bd30      	pop	{r4, r5, pc}
   13484:	2100      	movs	r1, #0
   13486:	7019      	strb	r1, [r3, #0]
   13488:	b900      	cbnz	r0, 1348c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x514>
   1348a:	2200      	movs	r2, #0
   1348c:	702a      	strb	r2, [r5, #0]
   1348e:	2000      	movs	r0, #0
   13490:	bd30      	pop	{r4, r5, pc}
   13492:	b2c0      	uxtb	r0, r0
   13494:	06c1      	lsls	r1, r0, #27
   13496:	d415      	bmi.n	134c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54c>
   13498:	0681      	lsls	r1, r0, #26
   1349a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1349e:	d503      	bpl.n	134a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x530>
   134a0:	bb21      	cbnz	r1, 134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134a2:	0781      	lsls	r1, r0, #30
   134a4:	d422      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134a6:	e001      	b.n	134ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x534>
   134a8:	2900      	cmp	r1, #0
   134aa:	d1fa      	bne.n	134a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52a>
   134ac:	0701      	lsls	r1, r0, #28
   134ae:	d51b      	bpl.n	134e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   134b0:	07c1      	lsls	r1, r0, #31
   134b2:	d01b      	beq.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134b4:	0781      	lsls	r1, r0, #30
   134b6:	d419      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134b8:	0641      	lsls	r1, r0, #25
   134ba:	d417      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134bc:	0741      	lsls	r1, r0, #29
   134be:	d415      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134c0:	0680      	lsls	r0, r0, #26
   134c2:	e00f      	b.n	134e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   134c4:	0641      	lsls	r1, r0, #25
   134c6:	d411      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134c8:	0681      	lsls	r1, r0, #26
   134ca:	d40f      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134cc:	07c1      	lsls	r1, r0, #31
   134ce:	ea4f 7180 	mov.w	r1, r0, lsl #30
   134d2:	d004      	beq.n	134de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x566>
   134d4:	2900      	cmp	r1, #0
   134d6:	db02      	blt.n	134de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x566>
   134d8:	0740      	lsls	r0, r0, #29
   134da:	d405      	bmi.n	134e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   134dc:	e006      	b.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134de:	0701      	lsls	r1, r0, #28
   134e0:	d404      	bmi.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134e2:	0740      	lsls	r0, r0, #29
   134e4:	2800      	cmp	r0, #0
   134e6:	db01      	blt.n	134ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   134e8:	2001      	movs	r0, #1
   134ea:	4770      	bx	lr
   134ec:	2000      	movs	r0, #0
   134ee:	4770      	bx	lr
   134f0:	b510      	push	{r4, lr}
   134f2:	f7ff ff15 	bl	13320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   134f6:	b110      	cbz	r0, 134fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x586>
   134f8:	f7f9 fd3a 	bl	cf70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   134fc:	b928      	cbnz	r0, 1350a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   134fe:	f7f6 fb51 	bl	9ba4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   13502:	b120      	cbz	r0, 1350e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   13504:	f7f5 faf2 	bl	8aec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   13508:	b108      	cbz	r0, 1350e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   1350a:	2001      	movs	r0, #1
   1350c:	bd10      	pop	{r4, pc}
   1350e:	2000      	movs	r0, #0
   13510:	bd10      	pop	{r4, pc}

00013512 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   13512:	6802      	ldr	r2, [r0, #0]
   13514:	b912      	cbnz	r2, 1351c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   13516:	6001      	str	r1, [r0, #0]
   13518:	4770      	bx	lr
   1351a:	4602      	mov	r2, r0
   1351c:	6850      	ldr	r0, [r2, #4]
   1351e:	b108      	cbz	r0, 13524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   13520:	428a      	cmp	r2, r1
   13522:	d1fa      	bne.n	1351a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   13524:	428a      	cmp	r2, r1
   13526:	d0f7      	beq.n	13518 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   13528:	6051      	str	r1, [r2, #4]
   1352a:	4770      	bx	lr
   1352c:	b510      	push	{r4, lr}
   1352e:	f7f5 fa15 	bl	895c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   13532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13536:	f7fa bd6b 	b.w	e010 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   1353a:	b510      	push	{r4, lr}
   1353c:	f7f6 fb4c 	bl	9bd8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   13540:	b108      	cbz	r0, 13546 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   13542:	21e2      	movs	r1, #226	; 0xe2
   13544:	e004      	b.n	13550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   13546:	f7f5 fa27 	bl	8998 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1354a:	2800      	cmp	r0, #0
   1354c:	d003      	beq.n	13556 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   1354e:	21e7      	movs	r1, #231	; 0xe7
   13550:	2001      	movs	r0, #1
   13552:	f7f1 fb6d 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13556:	bd10      	pop	{r4, pc}
   13558:	b50e      	push	{r1, r2, r3, lr}
   1355a:	4669      	mov	r1, sp
   1355c:	2001      	movs	r0, #1
   1355e:	f7fd fe39 	bl	111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   13562:	b148      	cbz	r0, 13578 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   13564:	219c      	movs	r1, #156	; 0x9c
   13566:	e01a      	b.n	1359e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   13568:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1356c:	2101      	movs	r1, #1
   1356e:	f7f1 fde7 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   13572:	b108      	cbz	r0, 13578 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   13574:	21a0      	movs	r1, #160	; 0xa0
   13576:	e012      	b.n	1359e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   13578:	4668      	mov	r0, sp
   1357a:	f7f1 fdbb 	bl	50f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1357e:	2800      	cmp	r0, #0
   13580:	d0f2      	beq.n	13568 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
   13582:	4669      	mov	r1, sp
   13584:	2000      	movs	r0, #0
   13586:	f7fd fe25 	bl	111d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1358a:	b158      	cbz	r0, 135a4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x92>
   1358c:	21a6      	movs	r1, #166	; 0xa6
   1358e:	e006      	b.n	1359e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   13590:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   13594:	2100      	movs	r1, #0
   13596:	f7f1 fdd3 	bl	5140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1359a:	b118      	cbz	r0, 135a4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x92>
   1359c:	21aa      	movs	r1, #170	; 0xaa
   1359e:	2001      	movs	r0, #1
   135a0:	f7f1 fb46 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   135a4:	4668      	mov	r0, sp
   135a6:	f7f1 fda5 	bl	50f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   135aa:	2800      	cmp	r0, #0
   135ac:	d0f0      	beq.n	13590 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7e>
   135ae:	bd0e      	pop	{r1, r2, r3, pc}
   135b0:	b510      	push	{r4, lr}
   135b2:	4604      	mov	r4, r0
   135b4:	e002      	b.n	135bc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   135b6:	6820      	ldr	r0, [r4, #0]
   135b8:	4780      	blx	r0
   135ba:	6864      	ldr	r4, [r4, #4]
   135bc:	2c00      	cmp	r4, #0
   135be:	d1fa      	bne.n	135b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   135c0:	bd10      	pop	{r4, pc}
   135c2:	b510      	push	{r4, lr}
   135c4:	f7ff ffc8 	bl	13558 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x46>
   135c8:	f7f1 ff32 	bl	5430 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   135cc:	f7f2 faa0 	bl	5b10 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   135d0:	f7f2 fd34 	bl	603c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   135d4:	2800      	cmp	r0, #0
   135d6:	d003      	beq.n	135e0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xce>
   135d8:	21c0      	movs	r1, #192	; 0xc0
   135da:	2001      	movs	r0, #1
   135dc:	f7f1 fb28 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   135e0:	bd10      	pop	{r4, pc}
   135e2:	f7ff bfee 	b.w	135c2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb0>
   135e6:	b510      	push	{r4, lr}
   135e8:	f7ff ffa7 	bl	1353a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x28>
   135ec:	f7f7 fd44 	bl	b078 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   135f0:	2800      	cmp	r0, #0
   135f2:	d003      	beq.n	135fc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xea>
   135f4:	21fe      	movs	r1, #254	; 0xfe
   135f6:	2001      	movs	r0, #1
   135f8:	f7f1 fb1a 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   135fc:	bd10      	pop	{r4, pc}

000135fe <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   135fe:	b510      	push	{r4, lr}
   13600:	f7fb fa58 	bl	eab4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   13604:	f7fa ff3a 	bl	e47c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   13608:	f7fa fdcc 	bl	e1a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13610:	f7fa bece 	b.w	e3b0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00013614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   13614:	2801      	cmp	r0, #1
   13616:	bf04      	itt	eq
   13618:	2028      	moveq	r0, #40	; 0x28
   1361a:	4770      	bxeq	lr
   1361c:	2802      	cmp	r0, #2
   1361e:	bf04      	itt	eq
   13620:	2018      	moveq	r0, #24
   13622:	4770      	bxeq	lr
   13624:	2804      	cmp	r0, #4
   13626:	bf12      	itee	ne
   13628:	2808      	cmpne	r0, #8
   1362a:	f44f 70a8 	moveq.w	r0, #336	; 0x150
   1362e:	4770      	bxeq	lr
   13630:	b510      	push	{r4, lr}
   13632:	f640 3178 	movw	r1, #2936	; 0xb78
   13636:	203e      	movs	r0, #62	; 0x3e
   13638:	f7f1 fafa 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1363c:	2801      	cmp	r0, #1
   1363e:	bf04      	itt	eq
   13640:	f641 6014 	movweq	r0, #7700	; 0x1e14
   13644:	4770      	bxeq	lr
   13646:	2802      	cmp	r0, #2
   13648:	bf04      	itt	eq
   1364a:	f241 1030 	movweq	r0, #4400	; 0x1130
   1364e:	4770      	bxeq	lr
   13650:	2804      	cmp	r0, #4
   13652:	bf04      	itt	eq
   13654:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
   13658:	4770      	bxeq	lr
   1365a:	2808      	cmp	r0, #8
   1365c:	bf04      	itt	eq
   1365e:	f247 303c 	movweq	r0, #29500	; 0x733c
   13662:	4770      	bxeq	lr
   13664:	b510      	push	{r4, lr}
   13666:	f640 318c 	movw	r1, #2956	; 0xb8c
   1366a:	203e      	movs	r0, #62	; 0x3e
   1366c:	f7f1 fae0 	bl	4c30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00013670 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   13670:	b570      	push	{r4, r5, r6, lr}
   13672:	4605      	mov	r5, r0
   13674:	4614      	mov	r4, r2
   13676:	4608      	mov	r0, r1
   13678:	f7ff ffe0 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1367c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   13680:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   13684:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   13688:	4620      	mov	r0, r4
   1368a:	2c01      	cmp	r4, #1
   1368c:	bf1a      	itte	ne
   1368e:	2802      	cmpne	r0, #2
   13690:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13694:	f7ff ffd2 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13698:	4428      	add	r0, r5
   1369a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1369e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   136a2:	fbb0 f5f1 	udiv	r5, r0, r1
   136a6:	4620      	mov	r0, r4
   136a8:	f7ff ffb4 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   136ac:	4428      	add	r0, r5
   136ae:	1d40      	adds	r0, r0, #5
   136b0:	bd70      	pop	{r4, r5, r6, pc}

000136b2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   136b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136b6:	4607      	mov	r7, r0
   136b8:	461e      	mov	r6, r3
   136ba:	460d      	mov	r5, r1
   136bc:	4614      	mov	r4, r2
   136be:	4610      	mov	r0, r2
   136c0:	2a01      	cmp	r2, #1
   136c2:	bf1a      	itte	ne
   136c4:	2802      	cmpne	r0, #2
   136c6:	f64e 2060 	movwne	r0, #60000	; 0xea60
   136ca:	f7ff ffb7 	bleq	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   136ce:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   136d2:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   136d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   136da:	2d02      	cmp	r5, #2
   136dc:	bf08      	it	eq
   136de:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   136e2:	d009      	beq.n	136f8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   136e4:	2d01      	cmp	r5, #1
   136e6:	bf08      	it	eq
   136e8:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   136ec:	d004      	beq.n	136f8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   136ee:	2d04      	cmp	r5, #4
   136f0:	bf0c      	ite	eq
   136f2:	2100      	moveq	r1, #0
   136f4:	f241 7170 	movwne	r1, #6000	; 0x1770
   136f8:	4408      	add	r0, r1
   136fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   136fe:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   13702:	fbb0 f5f1 	udiv	r5, r0, r1
   13706:	4620      	mov	r0, r4
   13708:	f7ff ff84 	bl	13614 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1370c:	4428      	add	r0, r5
   1370e:	4430      	add	r0, r6
   13710:	1d40      	adds	r0, r0, #5
   13712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013716 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   13716:	b510      	push	{r4, lr}
   13718:	4604      	mov	r4, r0
   1371a:	4608      	mov	r0, r1
   1371c:	f7ff ff8e 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13724:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   13728:	fbb0 f0f1 	udiv	r0, r0, r1
   1372c:	1a20      	subs	r0, r4, r0
   1372e:	1e80      	subs	r0, r0, #2
   13730:	bd10      	pop	{r4, pc}

00013732 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   13732:	b510      	push	{r4, lr}
   13734:	4604      	mov	r4, r0
   13736:	4608      	mov	r0, r1
   13738:	f7ff ff80 	bl	1363c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1373c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13740:	fbb0 f0f1 	udiv	r0, r0, r1
   13744:	1a20      	subs	r0, r4, r0
   13746:	bd10      	pop	{r4, pc}

00013748 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   13748:	2902      	cmp	r1, #2
   1374a:	bf08      	it	eq
   1374c:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   13750:	d009      	beq.n	13766 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   13752:	2901      	cmp	r1, #1
   13754:	bf08      	it	eq
   13756:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   1375a:	d004      	beq.n	13766 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   1375c:	2904      	cmp	r1, #4
   1375e:	bf0c      	ite	eq
   13760:	2100      	moveq	r1, #0
   13762:	f241 7170 	movwne	r1, #6000	; 0x1770
   13766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1376a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1376e:	fbb1 f1f2 	udiv	r1, r1, r2
   13772:	4408      	add	r0, r1
   13774:	1e80      	subs	r0, r0, #2
   13776:	4770      	bx	lr

00013778 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   13778:	2902      	cmp	r1, #2
   1377a:	bf08      	it	eq
   1377c:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   13780:	d009      	beq.n	13796 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   13782:	2901      	cmp	r1, #1
   13784:	bf08      	it	eq
   13786:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   1378a:	d004      	beq.n	13796 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   1378c:	2904      	cmp	r1, #4
   1378e:	bf0c      	ite	eq
   13790:	2100      	moveq	r1, #0
   13792:	f241 7170 	movwne	r1, #6000	; 0x1770
   13796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1379a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1379e:	fbb1 f1f2 	udiv	r1, r1, r2
   137a2:	4408      	add	r0, r1
   137a4:	4770      	bx	lr

000137a6 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   137a6:	2100      	movs	r1, #0
   137a8:	6001      	str	r1, [r0, #0]
   137aa:	6041      	str	r1, [r0, #4]
   137ac:	4770      	bx	lr

000137ae <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   137ae:	680a      	ldr	r2, [r1, #0]
   137b0:	6002      	str	r2, [r0, #0]
   137b2:	790b      	ldrb	r3, [r1, #4]
   137b4:	7103      	strb	r3, [r0, #4]
   137b6:	4770      	bx	lr

000137b8 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   137b8:	2100      	movs	r1, #0
   137ba:	6001      	str	r1, [r0, #0]
   137bc:	8081      	strh	r1, [r0, #4]
   137be:	4770      	bx	lr
   137c0:	1702080c 	.word	0x1702080c
   137c4:	0201010d 	.word	0x0201010d
   137c8:	01010909 	.word	0x01010909
   137cc:	18090206 	.word	0x18090206
   137d0:	01010318 	.word	0x01010318
   137d4:	03030909 	.word	0x03030909
   137d8:	00000005 	.word	0x00000005

000137dc <disconnected>:
        , addr, info.role, info.le.interval, info.le.latency, info.le.timeout);
    }
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   137dc:	b510      	push	{r4, lr}
    dk_set_led_off(CON_STATUS_LED);
   137de:	2001      	movs	r0, #1
{
   137e0:	460c      	mov	r4, r1
    dk_set_led_off(CON_STATUS_LED);
   137e2:	f00e fb33 	bl	21e4c <dk_set_led_off>
    printk("Disconnected (reason %u)\n", reason);
   137e6:	4621      	mov	r1, r4
   137e8:	4802      	ldr	r0, [pc, #8]	; (137f4 <disconnected+0x18>)
}
   137ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Disconnected (reason %u)\n", reason);
   137ee:	f00b bed1 	b.w	1f594 <printk>
   137f2:	bf00      	nop
   137f4:	000234b8 	.word	0x000234b8

000137f8 <bt_addr_le_to_str.constprop.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   137f8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   137fa:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   137fc:	b08a      	sub	sp, #40	; 0x28
   137fe:	4604      	mov	r4, r0
   13800:	460e      	mov	r6, r1
   13802:	ad07      	add	r5, sp, #28
   13804:	2b03      	cmp	r3, #3
   13806:	d820      	bhi.n	1384a <bt_addr_le_to_str.constprop.0+0x52>
   13808:	e8df f003 	tbb	[pc, r3]
   1380c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   13810:	4911      	ldr	r1, [pc, #68]	; (13858 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   13812:	4628      	mov	r0, r5
   13814:	f00c feae 	bl	20574 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13818:	7863      	ldrb	r3, [r4, #1]
   1381a:	9304      	str	r3, [sp, #16]
   1381c:	78a3      	ldrb	r3, [r4, #2]
   1381e:	9303      	str	r3, [sp, #12]
   13820:	78e3      	ldrb	r3, [r4, #3]
   13822:	9302      	str	r3, [sp, #8]
   13824:	7923      	ldrb	r3, [r4, #4]
   13826:	9301      	str	r3, [sp, #4]
   13828:	7963      	ldrb	r3, [r4, #5]
   1382a:	9300      	str	r3, [sp, #0]
   1382c:	4a0b      	ldr	r2, [pc, #44]	; (1385c <bt_addr_le_to_str.constprop.0+0x64>)
   1382e:	79a3      	ldrb	r3, [r4, #6]
   13830:	9505      	str	r5, [sp, #20]
   13832:	211e      	movs	r1, #30
   13834:	4630      	mov	r0, r6
   13836:	f00b feba 	bl	1f5ae <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1383a:	b00a      	add	sp, #40	; 0x28
   1383c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1383e:	4908      	ldr	r1, [pc, #32]	; (13860 <bt_addr_le_to_str.constprop.0+0x68>)
   13840:	e7e7      	b.n	13812 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   13842:	4908      	ldr	r1, [pc, #32]	; (13864 <bt_addr_le_to_str.constprop.0+0x6c>)
   13844:	e7e5      	b.n	13812 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   13846:	4908      	ldr	r1, [pc, #32]	; (13868 <bt_addr_le_to_str.constprop.0+0x70>)
   13848:	e7e3      	b.n	13812 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1384a:	4a08      	ldr	r2, [pc, #32]	; (1386c <bt_addr_le_to_str.constprop.0+0x74>)
   1384c:	210a      	movs	r1, #10
   1384e:	4628      	mov	r0, r5
   13850:	f00b fead 	bl	1f5ae <snprintk>
		break;
   13854:	e7e0      	b.n	13818 <bt_addr_le_to_str.constprop.0+0x20>
   13856:	bf00      	nop
   13858:	000234d2 	.word	0x000234d2
   1385c:	000234f4 	.word	0x000234f4
   13860:	000234d9 	.word	0x000234d9
   13864:	000234e0 	.word	0x000234e0
   13868:	000234ea 	.word	0x000234ea
   1386c:	00024ce9 	.word	0x00024ce9

00013870 <connected>:
{
   13870:	b510      	push	{r4, lr}
    ble_connection = conn;
   13872:	4b15      	ldr	r3, [pc, #84]	; (138c8 <connected+0x58>)
{
   13874:	b092      	sub	sp, #72	; 0x48
   13876:	4604      	mov	r4, r0
    ble_connection = conn;
   13878:	6018      	str	r0, [r3, #0]
    if (err) {
   1387a:	b121      	cbz	r1, 13886 <connected+0x16>
        printk("Connection failed (err %u)\n", err);
   1387c:	4813      	ldr	r0, [pc, #76]	; (138cc <connected+0x5c>)
   1387e:	f00b fe89 	bl	1f594 <printk>
}
   13882:	b012      	add	sp, #72	; 0x48
   13884:	bd10      	pop	{r4, pc}
    } else if(bt_conn_get_info(conn, &info)) {
   13886:	a90a      	add	r1, sp, #40	; 0x28
   13888:	f005 f850 	bl	1892c <bt_conn_get_info>
   1388c:	b118      	cbz	r0, 13896 <connected+0x26>
        printk("Could not parse connection info\n");
   1388e:	4810      	ldr	r0, [pc, #64]	; (138d0 <connected+0x60>)
   13890:	f00b fe80 	bl	1f594 <printk>
   13894:	e7f5      	b.n	13882 <connected+0x12>
        bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   13896:	4620      	mov	r0, r4
   13898:	f00d f941 	bl	20b1e <bt_conn_get_dst>
   1389c:	a902      	add	r1, sp, #8
   1389e:	f7ff ffab 	bl	137f8 <bt_addr_le_to_str.constprop.0>
        dk_set_led_on(CON_STATUS_LED);
   138a2:	2001      	movs	r0, #1
   138a4:	f00e facf 	bl	21e46 <dk_set_led_on>
        printk("Connection established!        \n\
   138a8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   138ac:	9301      	str	r3, [sp, #4]
   138ae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   138b2:	9300      	str	r3, [sp, #0]
   138b4:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   138b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   138bc:	4805      	ldr	r0, [pc, #20]	; (138d4 <connected+0x64>)
   138be:	a902      	add	r1, sp, #8
   138c0:	f00b fe68 	bl	1f594 <printk>
   138c4:	e7dd      	b.n	13882 <connected+0x12>
   138c6:	bf00      	nop
   138c8:	20002578 	.word	0x20002578
   138cc:	00023517 	.word	0x00023517
   138d0:	00023533 	.word	0x00023533
   138d4:	00023554 	.word	0x00023554

000138d8 <le_param_updated>:
    //If acceptable params, return true, otherwise return false.
    return true; 
}

static void le_param_updated(struct bt_conn *conn, u16_t interval, u16_t latency, u16_t timeout)
{
   138d8:	b510      	push	{r4, lr}
   138da:	b092      	sub	sp, #72	; 0x48
    struct bt_conn_info info; 
    char addr[BT_ADDR_LE_STR_LEN];
    
    if(bt_conn_get_info(conn, &info))
   138dc:	a90a      	add	r1, sp, #40	; 0x28
{
   138de:	4604      	mov	r4, r0
    if(bt_conn_get_info(conn, &info))
   138e0:	f005 f824 	bl	1892c <bt_conn_get_info>
   138e4:	b120      	cbz	r0, 138f0 <le_param_updated+0x18>
    {
        printk("Could not parse connection info\n");
   138e6:	480b      	ldr	r0, [pc, #44]	; (13914 <le_param_updated+0x3c>)
   138e8:	f00b fe54 	bl	1f594 <printk>
        New Connection Interval: %u                \n\
        New Slave Latency: %u                    \n\
        New Connection Supervisory Timeout: %u    \n"
        , addr, info.le.interval, info.le.latency, info.le.timeout);
    }
}
   138ec:	b012      	add	sp, #72	; 0x48
   138ee:	bd10      	pop	{r4, pc}
        bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   138f0:	4620      	mov	r0, r4
   138f2:	f00d f914 	bl	20b1e <bt_conn_get_dst>
   138f6:	a902      	add	r1, sp, #8
   138f8:	f7ff ff7e 	bl	137f8 <bt_addr_le_to_str.constprop.0>
        printk("Connection parameters updated!    \n\
   138fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   13900:	9300      	str	r3, [sp, #0]
   13902:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   13906:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   1390a:	4803      	ldr	r0, [pc, #12]	; (13918 <le_param_updated+0x40>)
   1390c:	a902      	add	r1, sp, #8
   1390e:	f00b fe41 	bl	1f594 <printk>
}
   13912:	e7eb      	b.n	138ec <le_param_updated+0x14>
   13914:	00023533 	.word	0x00023533
   13918:	0002365c 	.word	0x0002365c

0001391c <bt_ready>:
    .le_param_req     = le_param_req,
    .le_param_updated = le_param_updated,
};

static void bt_ready(int err)
{
   1391c:	b530      	push	{r4, r5, lr}
    if (err) 
   1391e:	4601      	mov	r1, r0
{
   13920:	b089      	sub	sp, #36	; 0x24
    if (err) 
   13922:	b120      	cbz	r0, 1392e <bt_ready+0x12>
    {
        printk("BLE init failed with error code %d\n", err);
   13924:	4813      	ldr	r0, [pc, #76]	; (13974 <bt_ready+0x58>)
    //Start advertising
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
                  sd, ARRAY_SIZE(sd));
    if (err) 
    {
        printk("Advertising failed to start (err %d)\n", err);
   13926:	f00b fe35 	bl	1f594 <printk>
    }

    printk("Advertising successfully started\n");

    k_sem_give(&ble_init_ok);
}
   1392a:	b009      	add	sp, #36	; 0x24
   1392c:	bd30      	pop	{r4, r5, pc}
    bt_conn_cb_register(&conn_callbacks);
   1392e:	4812      	ldr	r0, [pc, #72]	; (13978 <bt_ready+0x5c>)
   13930:	f004 fd12 	bl	18358 <bt_conn_cb_register>
    err = acc_service_init();
   13934:	f000 f90e 	bl	13b54 <acc_service_init>
    if (err) 
   13938:	4601      	mov	r1, r0
   1393a:	b108      	cbz	r0, 13940 <bt_ready+0x24>
        printk("Failed to init LBS (err:%d)\n", err);
   1393c:	480f      	ldr	r0, [pc, #60]	; (1397c <bt_ready+0x60>)
   1393e:	e7f2      	b.n	13926 <bt_ready+0xa>
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   13940:	4d0f      	ldr	r5, [pc, #60]	; (13980 <bt_ready+0x64>)
   13942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13944:	ac03      	add	r4, sp, #12
   13946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13948:	682b      	ldr	r3, [r5, #0]
   1394a:	6023      	str	r3, [r4, #0]
   1394c:	2301      	movs	r3, #1
   1394e:	490d      	ldr	r1, [pc, #52]	; (13984 <bt_ready+0x68>)
   13950:	9300      	str	r3, [sp, #0]
   13952:	2202      	movs	r2, #2
   13954:	4b0c      	ldr	r3, [pc, #48]	; (13988 <bt_ready+0x6c>)
   13956:	a803      	add	r0, sp, #12
   13958:	f004 fac4 	bl	17ee4 <bt_le_adv_start>
    if (err) 
   1395c:	4601      	mov	r1, r0
   1395e:	b108      	cbz	r0, 13964 <bt_ready+0x48>
        printk("Advertising failed to start (err %d)\n", err);
   13960:	480a      	ldr	r0, [pc, #40]	; (1398c <bt_ready+0x70>)
   13962:	e7e0      	b.n	13926 <bt_ready+0xa>
    printk("Advertising successfully started\n");
   13964:	480a      	ldr	r0, [pc, #40]	; (13990 <bt_ready+0x74>)
   13966:	f00b fe15 	bl	1f594 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1396a:	480a      	ldr	r0, [pc, #40]	; (13994 <bt_ready+0x78>)
   1396c:	f00a fab8 	bl	1dee0 <z_impl_k_sem_give>
   13970:	e7db      	b.n	1392a <bt_ready+0xe>
   13972:	bf00      	nop
   13974:	0002374a 	.word	0x0002374a
   13978:	200004f8 	.word	0x200004f8
   1397c:	0002376e 	.word	0x0002376e
   13980:	00022db0 	.word	0x00022db0
   13984:	00022e58 	.word	0x00022e58
   13988:	00022e68 	.word	0x00022e68
   1398c:	0002378b 	.word	0x0002378b
   13990:	000237b1 	.word	0x000237b1
   13994:	20000928 	.word	0x20000928

00013998 <error>:


static void error(uint8_t code)
{
   13998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    while (true) {
        printk("Error!\n");
   1399a:	4d0b      	ldr	r5, [pc, #44]	; (139c8 <error+0x30>)
        if (code > 0) {
            uint16_t data = 1000 + code;
            acc_service_send(ble_connection, (uint8_t*) &data, 2);
   1399c:	4f0b      	ldr	r7, [pc, #44]	; (139cc <error+0x34>)
{
   1399e:	4604      	mov	r4, r0
            uint16_t data = 1000 + code;
   139a0:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
        printk("Error!\n");
   139a4:	4628      	mov	r0, r5
   139a6:	f00b fdf5 	bl	1f594 <printk>
        if (code > 0) {
   139aa:	b13c      	cbz	r4, 139bc <error+0x24>
            acc_service_send(ble_connection, (uint8_t*) &data, 2);
   139ac:	6838      	ldr	r0, [r7, #0]
            uint16_t data = 1000 + code;
   139ae:	f8ad 6006 	strh.w	r6, [sp, #6]
            acc_service_send(ble_connection, (uint8_t*) &data, 2);
   139b2:	2202      	movs	r2, #2
   139b4:	f10d 0106 	add.w	r1, sp, #6
   139b8:	f000 f8de 	bl	13b78 <acc_service_send>
	return z_impl_k_sleep(timeout);
   139bc:	2100      	movs	r1, #0
   139be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   139c2:	f00a fa65 	bl	1de90 <z_impl_k_sleep>
    while (true) {
   139c6:	e7ed      	b.n	139a4 <error+0xc>
   139c8:	000237d3 	.word	0x000237d3
   139cc:	20002578 	.word	0x20002578

000139d0 <main>:
        k_sleep(K_MSEC(1000)); //1000ms
    }
}

void main(void)
{
   139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139d4:	b0ac      	sub	sp, #176	; 0xb0
    int err = 0;
    err = dk_leds_init();
   139d6:	f007 ff4b 	bl	1b870 <dk_leds_init>
    if (err) {
   139da:	b130      	cbz	r0, 139ea <main+0x1a>
        printk("Cannot init LEDs (err: %d)", err);
   139dc:	4601      	mov	r1, r0
   139de:	4833      	ldr	r0, [pc, #204]	; (13aac <main+0xdc>)
   139e0:	f00b fdd8 	bl	1f594 <printk>
        error(0);
   139e4:	2000      	movs	r0, #0
   139e6:	f7ff ffd7 	bl	13998 <error>
    }

    printk("Starting Nordic BLE peripheral tutorial\n");
   139ea:	4831      	ldr	r0, [pc, #196]	; (13ab0 <main+0xe0>)
   139ec:	f00b fdd2 	bl	1f594 <printk>
    
    err = bt_enable(bt_ready);
   139f0:	4830      	ldr	r0, [pc, #192]	; (13ab4 <main+0xe4>)
   139f2:	f004 f8ab 	bl	17b4c <bt_enable>
    if (err) {
   139f6:	b118      	cbz	r0, 13a00 <main+0x30>
        printk("BLE initialization failed\n");
   139f8:	482f      	ldr	r0, [pc, #188]	; (13ab8 <main+0xe8>)
    err = k_sem_take(&ble_init_ok, K_MSEC(500));

    if (!err) {
        printk("Bluetooth initialized\n");
    } else {
        printk("BLE initialization did not complete in time\n");
   139fa:	f00b fdcb 	bl	1f594 <printk>
        error(0);
   139fe:	e7f1      	b.n	139e4 <main+0x14>
	return z_impl_k_sem_take(sem, timeout);
   13a00:	482e      	ldr	r0, [pc, #184]	; (13abc <main+0xec>)
   13a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13a06:	2300      	movs	r3, #0
   13a08:	f00a fa90 	bl	1df2c <z_impl_k_sem_take>
    if (!err) {
   13a0c:	4604      	mov	r4, r0
   13a0e:	b9b8      	cbnz	r0, 13a40 <main+0x70>
        printk("Bluetooth initialized\n");
   13a10:	482b      	ldr	r0, [pc, #172]	; (13ac0 <main+0xf0>)
   13a12:	f00b fdbf 	bl	1f594 <printk>
    }

    err = acc_service_init();
   13a16:	f000 f89d 	bl	13b54 <acc_service_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13a1a:	482a      	ldr	r0, [pc, #168]	; (13ac4 <main+0xf4>)
   13a1c:	f009 fbde 	bl	1d1dc <z_impl_device_get_binding>

   const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, adi_adxl345)));
   if (dev == NULL) {
   13a20:	4605      	mov	r5, r0
   13a22:	b178      	cbz	r0, 13a44 <main+0x74>
            data[idx]   = accel[0].val1;
            data[idx+1] = accel[1].val1;
            data[idx+2] = accel[2].val1;
            idx += 3;
            if (idx > 75) {
                acc_service_send(ble_connection, (uint8_t *) data, len); 
   13a24:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 13ad8 <main+0x108>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   13a28:	68ab      	ldr	r3, [r5, #8]
   13a2a:	2138      	movs	r1, #56	; 0x38
   13a2c:	68db      	ldr	r3, [r3, #12]
   13a2e:	4628      	mov	r0, r5
   13a30:	4798      	blx	r3
        if ( samples_count < 0 ) {
   13a32:	1e07      	subs	r7, r0, #0
   13a34:	da37      	bge.n	13aa6 <main+0xd6>
            printk("Sample fetch error\n");
   13a36:	4824      	ldr	r0, [pc, #144]	; (13ac8 <main+0xf8>)
   13a38:	f00b fdac 	bl	1f594 <printk>
            error(2); 
   13a3c:	2002      	movs	r0, #2
   13a3e:	e7d2      	b.n	139e6 <main+0x16>
        printk("BLE initialization did not complete in time\n");
   13a40:	4822      	ldr	r0, [pc, #136]	; (13acc <main+0xfc>)
   13a42:	e7da      	b.n	139fa <main+0x2a>
       printk("Device get binding device\n");
   13a44:	4822      	ldr	r0, [pc, #136]	; (13ad0 <main+0x100>)
   13a46:	f00b fda5 	bl	1f594 <printk>
       error(1);
   13a4a:	2001      	movs	r0, #1
   13a4c:	e7cb      	b.n	139e6 <main+0x16>
            data[idx]   = accel[0].val1;
   13a4e:	ab2c      	add	r3, sp, #176	; 0xb0
   13a50:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   13a54:	9a00      	ldr	r2, [sp, #0]
   13a56:	f823 2c98 	strh.w	r2, [r3, #-152]
            data[idx+1] = accel[1].val1;
   13a5a:	ab2c      	add	r3, sp, #176	; 0xb0
   13a5c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   13a60:	9a02      	ldr	r2, [sp, #8]
   13a62:	f823 2c96 	strh.w	r2, [r3, #-150]
            data[idx+2] = accel[2].val1;
   13a66:	ab2c      	add	r3, sp, #176	; 0xb0
   13a68:	eb03 0344 	add.w	r3, r3, r4, lsl #1
            idx += 3;
   13a6c:	3403      	adds	r4, #3
            data[idx+2] = accel[2].val1;
   13a6e:	9a04      	ldr	r2, [sp, #16]
   13a70:	f823 2c94 	strh.w	r2, [r3, #-148]
            if (idx > 75) {
   13a74:	2c4b      	cmp	r4, #75	; 0x4b
   13a76:	dd06      	ble.n	13a86 <main+0xb6>
                acc_service_send(ble_connection, (uint8_t *) data, len); 
   13a78:	f8d8 0000 	ldr.w	r0, [r8]
   13a7c:	2296      	movs	r2, #150	; 0x96
   13a7e:	a906      	add	r1, sp, #24
   13a80:	f000 f87a 	bl	13b78 <acc_service_send>
                idx = 0;
   13a84:	2400      	movs	r4, #0
        for (int i = 0; i < samples_count; i++) {
   13a86:	3601      	adds	r6, #1
   13a88:	42be      	cmp	r6, r7
   13a8a:	d0cd      	beq.n	13a28 <main+0x58>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   13a8c:	68ab      	ldr	r3, [r5, #8]
   13a8e:	466a      	mov	r2, sp
   13a90:	691b      	ldr	r3, [r3, #16]
   13a92:	2103      	movs	r1, #3
   13a94:	4628      	mov	r0, r5
   13a96:	4798      	blx	r3
            if (sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ, accel) < 0) {
   13a98:	2800      	cmp	r0, #0
   13a9a:	dad8      	bge.n	13a4e <main+0x7e>
                printk("Channel get error\n");
   13a9c:	480d      	ldr	r0, [pc, #52]	; (13ad4 <main+0x104>)
   13a9e:	f00b fd79 	bl	1f594 <printk>
                error(3); 
   13aa2:	2003      	movs	r0, #3
   13aa4:	e79f      	b.n	139e6 <main+0x16>
        for (int i = 0; i < samples_count; i++) {
   13aa6:	2600      	movs	r6, #0
   13aa8:	e7ee      	b.n	13a88 <main+0xb8>
   13aaa:	bf00      	nop
   13aac:	000237db 	.word	0x000237db
   13ab0:	000237f6 	.word	0x000237f6
   13ab4:	0001391d 	.word	0x0001391d
   13ab8:	0002381f 	.word	0x0002381f
   13abc:	20000928 	.word	0x20000928
   13ac0:	0002383a 	.word	0x0002383a
   13ac4:	00023851 	.word	0x00023851
   13ac8:	000238a1 	.word	0x000238a1
   13acc:	00023859 	.word	0x00023859
   13ad0:	00023886 	.word	0x00023886
   13ad4:	000238b5 	.word	0x000238b5
   13ad8:	20002578 	.word	0x20002578

00013adc <on_cccd_changed>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, u16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
   13adc:	2902      	cmp	r1, #2
   13ade:	d902      	bls.n	13ae6 <on_cccd_changed+0xa>
        case 0: 
            // Stop sending stuff
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value");     
   13ae0:	4801      	ldr	r0, [pc, #4]	; (13ae8 <on_cccd_changed+0xc>)
   13ae2:	f00b bd57 	b.w	1f594 <printk>
    }
}
   13ae6:	4770      	bx	lr
   13ae8:	000238d1 	.word	0x000238d1

00013aec <on_receive>:
{
   13aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
   13aee:	8a09      	ldrh	r1, [r1, #16]
        printk("%02X", buffer[i]);
   13af0:	4f0b      	ldr	r7, [pc, #44]	; (13b20 <on_receive+0x34>)
{
   13af2:	4615      	mov	r5, r2
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
   13af4:	4602      	mov	r2, r0
   13af6:	480b      	ldr	r0, [pc, #44]	; (13b24 <on_receive+0x38>)
{
   13af8:	461c      	mov	r4, r3
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
   13afa:	f00b fd4b 	bl	1f594 <printk>
    for(u8_t i = 0; i < len; i++){
   13afe:	2100      	movs	r1, #0
   13b00:	b2cb      	uxtb	r3, r1
   13b02:	42a3      	cmp	r3, r4
   13b04:	f101 0601 	add.w	r6, r1, #1
   13b08:	d304      	bcc.n	13b14 <on_receive+0x28>
    printk("\n");
   13b0a:	4807      	ldr	r0, [pc, #28]	; (13b28 <on_receive+0x3c>)
   13b0c:	f00b fd42 	bl	1f594 <printk>
}
   13b10:	4620      	mov	r0, r4
   13b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printk("%02X", buffer[i]);
   13b14:	5ce9      	ldrb	r1, [r5, r3]
   13b16:	4638      	mov	r0, r7
   13b18:	f00b fd3c 	bl	1f594 <printk>
   13b1c:	4631      	mov	r1, r6
   13b1e:	e7ef      	b.n	13b00 <on_receive+0x14>
   13b20:	0002392a 	.word	0x0002392a
   13b24:	000238fe 	.word	0x000238fe
   13b28:	00023748 	.word	0x00023748

00013b2c <on_sent>:
{
   13b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   13b2e:	f00c fff6 	bl	20b1e <bt_conn_get_dst>
	printk("Data sent to Address 0x %02X %02X %02X %02X %02X %02X \n", addr->a.val[0]
   13b32:	7984      	ldrb	r4, [r0, #6]
   13b34:	78c3      	ldrb	r3, [r0, #3]
   13b36:	7882      	ldrb	r2, [r0, #2]
   13b38:	7841      	ldrb	r1, [r0, #1]
   13b3a:	9402      	str	r4, [sp, #8]
   13b3c:	7944      	ldrb	r4, [r0, #5]
   13b3e:	9401      	str	r4, [sp, #4]
   13b40:	7900      	ldrb	r0, [r0, #4]
   13b42:	9000      	str	r0, [sp, #0]
   13b44:	4802      	ldr	r0, [pc, #8]	; (13b50 <on_sent+0x24>)
   13b46:	f00b fd25 	bl	1f594 <printk>
}
   13b4a:	b004      	add	sp, #16
   13b4c:	bd10      	pop	{r4, pc}
   13b4e:	bf00      	nop
   13b50:	0002392f 	.word	0x0002392f

00013b54 <acc_service_init>:
{
   13b54:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
   13b56:	22f0      	movs	r2, #240	; 0xf0
   13b58:	2100      	movs	r1, #0
   13b5a:	4805      	ldr	r0, [pc, #20]	; (13b70 <acc_service_init+0x1c>)
   13b5c:	f00c fd95 	bl	2068a <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
   13b60:	22f0      	movs	r2, #240	; 0xf0
   13b62:	2100      	movs	r1, #0
   13b64:	4803      	ldr	r0, [pc, #12]	; (13b74 <acc_service_init+0x20>)
   13b66:	f00c fd90 	bl	2068a <memset>
}
   13b6a:	2000      	movs	r0, #0
   13b6c:	bd08      	pop	{r3, pc}
   13b6e:	bf00      	nop
   13b70:	2000369e 	.word	0x2000369e
   13b74:	2000378e 	.word	0x2000378e

00013b78 <acc_service_send>:

/* This function sends a notification to a Client with the provided data,
given that the Client Characteristic Control Descripter has been set to Notify (0x1).
It also calls the on_sent() callback if successful*/
void acc_service_send(struct bt_conn *conn, const u8_t *data, uint16_t len)
{
   13b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b7a:	b08d      	sub	sp, #52	; 0x34
    to check whether notification has been enabled by the peer or not.
    Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
    */
    const struct bt_gatt_attr *attr = &acc_service.attrs[3]; 

    struct bt_gatt_notify_params params = {
   13b7c:	2300      	movs	r3, #0
   13b7e:	9309      	str	r3, [sp, #36]	; 0x24
   13b80:	930b      	str	r3, [sp, #44]	; 0x2c
        .uuid   = BT_UUID_ACC_SERVICE_TX,
   13b82:	4b15      	ldr	r3, [pc, #84]	; (13bd8 <acc_service_send+0x60>)
   13b84:	ac01      	add	r4, sp, #4
{
   13b86:	4605      	mov	r5, r0
   13b88:	460f      	mov	r7, r1
        .uuid   = BT_UUID_ACC_SERVICE_TX,
   13b8a:	f103 0e10 	add.w	lr, r3, #16
   13b8e:	46a4      	mov	ip, r4
   13b90:	6818      	ldr	r0, [r3, #0]
   13b92:	6859      	ldr	r1, [r3, #4]
   13b94:	4626      	mov	r6, r4
   13b96:	c603      	stmia	r6!, {r0, r1}
   13b98:	3308      	adds	r3, #8
   13b9a:	4573      	cmp	r3, lr
   13b9c:	4634      	mov	r4, r6
   13b9e:	d1f7      	bne.n	13b90 <acc_service_send+0x18>
   13ba0:	781b      	ldrb	r3, [r3, #0]
    struct bt_gatt_notify_params params = {
   13ba2:	490e      	ldr	r1, [pc, #56]	; (13bdc <acc_service_send+0x64>)
        .uuid   = BT_UUID_ACC_SERVICE_TX,
   13ba4:	7033      	strb	r3, [r6, #0]
        .len    = len,
        .func   = on_sent
    };

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   13ba6:	4628      	mov	r0, r5
    struct bt_gatt_notify_params params = {
   13ba8:	4b0d      	ldr	r3, [pc, #52]	; (13be0 <acc_service_send+0x68>)
   13baa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   13bae:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = {
   13bb0:	e9cd 1707 	strd	r1, r7, [sp, #28]
   13bb4:	f8cd c018 	str.w	ip, [sp, #24]
   13bb8:	930a      	str	r3, [sp, #40]	; 0x28
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   13bba:	f00d fe55 	bl	21868 <bt_gatt_is_subscribed>
   13bbe:	b148      	cbz	r0, 13bd4 <acc_service_send+0x5c>
        // Send the notification
	if(bt_gatt_notify_cb(conn, &params)) {
   13bc0:	a906      	add	r1, sp, #24
   13bc2:	4628      	mov	r0, r5
   13bc4:	f006 fdda 	bl	1a77c <bt_gatt_notify_cb>
   13bc8:	b110      	cbz	r0, 13bd0 <acc_service_send+0x58>
            printk("Error, unable to send notification\n");
   13bca:	4806      	ldr	r0, [pc, #24]	; (13be4 <acc_service_send+0x6c>)
        }
    } else {
        printk("Warning, notification not enabled on the selected attribute\n");
   13bcc:	f00b fce2 	bl	1f594 <printk>
    }
}
   13bd0:	b00d      	add	sp, #52	; 0x34
   13bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
   13bd4:	4804      	ldr	r0, [pc, #16]	; (13be8 <acc_service_send+0x70>)
   13bd6:	e7f9      	b.n	13bcc <acc_service_send+0x54>
   13bd8:	00022e30 	.word	0x00022e30
   13bdc:	00022eac 	.word	0x00022eac
   13be0:	00013b2d 	.word	0x00013b2d
   13be4:	00023967 	.word	0x00023967
   13be8:	0002398b 	.word	0x0002398b

00013bec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   13bec:	680b      	ldr	r3, [r1, #0]
   13bee:	3301      	adds	r3, #1
   13bf0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   13bf2:	4b01      	ldr	r3, [pc, #4]	; (13bf8 <char_out+0xc>)
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	4718      	bx	r3
   13bf8:	20000538 	.word	0x20000538

00013bfc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   13bfc:	b507      	push	{r0, r1, r2, lr}
   13bfe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   13c00:	2100      	movs	r1, #0
{
   13c02:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   13c04:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   13c06:	4803      	ldr	r0, [pc, #12]	; (13c14 <vprintk+0x18>)
   13c08:	a901      	add	r1, sp, #4
   13c0a:	f000 f8ff 	bl	13e0c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   13c0e:	b003      	add	sp, #12
   13c10:	f85d fb04 	ldr.w	pc, [sp], #4
   13c14:	00013bed 	.word	0x00013bed

00013c18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   13c18:	b530      	push	{r4, r5, lr}
   13c1a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   13c1c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   13c20:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   13c22:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   13c24:	a901      	add	r1, sp, #4
   13c26:	4805      	ldr	r0, [pc, #20]	; (13c3c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   13c28:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   13c2a:	f000 f8ef 	bl	13e0c <cbvprintf>

	if (ctx.count < ctx.max) {
   13c2e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   13c32:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   13c34:	bfb8      	it	lt
   13c36:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   13c38:	b005      	add	sp, #20
   13c3a:	bd30      	pop	{r4, r5, pc}
   13c3c:	0001f56f 	.word	0x0001f56f

00013c40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13c44:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   13c48:	f019 0808 	ands.w	r8, r9, #8
{
   13c4c:	4604      	mov	r4, r0
   13c4e:	4693      	mov	fp, r2
	if (processing) {
   13c50:	d00d      	beq.n	13c6e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   13c52:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13c54:	bf0c      	ite	eq
   13c56:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   13c5a:	f049 0920 	orrne.w	r9, r9, #32
   13c5e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13c62:	f38b 8811 	msr	BASEPRI, fp
   13c66:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   13c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13c6e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   13c72:	2902      	cmp	r1, #2
   13c74:	d107      	bne.n	13c86 <process_event+0x46>
			evt = process_recheck(mgr);
   13c76:	4620      	mov	r0, r4
   13c78:	f00b fca6 	bl	1f5c8 <process_recheck>
		if (evt == EVT_NOP) {
   13c7c:	2800      	cmp	r0, #0
   13c7e:	d0f0      	beq.n	13c62 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   13c80:	2801      	cmp	r0, #1
   13c82:	8b23      	ldrh	r3, [r4, #24]
   13c84:	d150      	bne.n	13d28 <process_event+0xe8>
			res = mgr->last_res;
   13c86:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13c88:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   13c8a:	2f00      	cmp	r7, #0
   13c8c:	da15      	bge.n	13cba <process_event+0x7a>
		*clients = mgr->clients;
   13c8e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13c90:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   13c94:	e9c4 8800 	strd	r8, r8, [r4]
   13c98:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   13c9c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   13c9e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13ca0:	8b21      	ldrh	r1, [r4, #24]
   13ca2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13ca6:	45ca      	cmp	sl, r9
   13ca8:	d002      	beq.n	13cb0 <process_event+0x70>
		if (do_monitors
   13caa:	68a3      	ldr	r3, [r4, #8]
   13cac:	2b00      	cmp	r3, #0
   13cae:	d15c      	bne.n	13d6a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   13cb0:	b90d      	cbnz	r5, 13cb6 <process_event+0x76>
		    || (transit != NULL)) {
   13cb2:	2e00      	cmp	r6, #0
   13cb4:	d074      	beq.n	13da0 <process_event+0x160>
   13cb6:	2300      	movs	r3, #0
   13cb8:	e058      	b.n	13d6c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13cba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   13cbe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13cc0:	2a01      	cmp	r2, #1
   13cc2:	d820      	bhi.n	13d06 <process_event+0xc6>
		*clients = mgr->clients;
   13cc4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   13cc8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   13cca:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   13ccc:	b289      	uxth	r1, r1
	list->tail = NULL;
   13cce:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   13cd2:	d10c      	bne.n	13cee <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13cd4:	2d00      	cmp	r5, #0
   13cd6:	462b      	mov	r3, r5
   13cd8:	bf38      	it	cc
   13cda:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13cdc:	b12b      	cbz	r3, 13cea <process_event+0xaa>
				mgr->refs += 1U;
   13cde:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13ce0:	681b      	ldr	r3, [r3, #0]
   13ce2:	3201      	adds	r2, #1
   13ce4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13ce6:	2b00      	cmp	r3, #0
   13ce8:	d1f8      	bne.n	13cdc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13cea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   13cee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   13cf0:	4620      	mov	r0, r4
   13cf2:	f00b fc69 	bl	1f5c8 <process_recheck>
   13cf6:	4606      	mov	r6, r0
   13cf8:	2800      	cmp	r0, #0
   13cfa:	d0d1      	beq.n	13ca0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13cfc:	8b23      	ldrh	r3, [r4, #24]
   13cfe:	f043 0320 	orr.w	r3, r3, #32
   13d02:	8323      	strh	r3, [r4, #24]
   13d04:	e7cb      	b.n	13c9e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   13d06:	2b04      	cmp	r3, #4
   13d08:	d10c      	bne.n	13d24 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d0a:	f021 0107 	bic.w	r1, r1, #7
   13d0e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   13d10:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   13d12:	4620      	mov	r0, r4
   13d14:	f00b fc58 	bl	1f5c8 <process_recheck>
   13d18:	4605      	mov	r5, r0
   13d1a:	2800      	cmp	r0, #0
   13d1c:	d0bf      	beq.n	13c9e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13d1e:	f041 0120 	orr.w	r1, r1, #32
   13d22:	8321      	strh	r1, [r4, #24]
   13d24:	2500      	movs	r5, #0
   13d26:	e7ba      	b.n	13c9e <process_event+0x5e>
		} else if (evt == EVT_START) {
   13d28:	2803      	cmp	r0, #3
   13d2a:	d109      	bne.n	13d40 <process_event+0x100>
			transit = mgr->transitions->start;
   13d2c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d2e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   13d32:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d34:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   13d38:	8323      	strh	r3, [r4, #24]
}
   13d3a:	2500      	movs	r5, #0
		res = 0;
   13d3c:	462f      	mov	r7, r5
   13d3e:	e7af      	b.n	13ca0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   13d40:	2804      	cmp	r0, #4
   13d42:	d106      	bne.n	13d52 <process_event+0x112>
			transit = mgr->transitions->stop;
   13d44:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d46:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   13d4a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d4c:	f043 0304 	orr.w	r3, r3, #4
   13d50:	e7f2      	b.n	13d38 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   13d52:	2805      	cmp	r0, #5
   13d54:	d106      	bne.n	13d64 <process_event+0x124>
			transit = mgr->transitions->reset;
   13d56:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d58:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   13d5c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13d5e:	f043 0305 	orr.w	r3, r3, #5
   13d62:	e7e9      	b.n	13d38 <process_event+0xf8>
   13d64:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   13d66:	462e      	mov	r6, r5
   13d68:	e7e8      	b.n	13d3c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   13d6a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13d6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13d70:	8321      	strh	r1, [r4, #24]
   13d72:	f38b 8811 	msr	BASEPRI, fp
   13d76:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13d7a:	bb03      	cbnz	r3, 13dbe <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   13d7c:	2d00      	cmp	r5, #0
   13d7e:	d133      	bne.n	13de8 <process_event+0x1a8>
			if (transit != NULL) {
   13d80:	b116      	cbz	r6, 13d88 <process_event+0x148>
				transit(mgr, transition_complete);
   13d82:	4921      	ldr	r1, [pc, #132]	; (13e08 <process_event+0x1c8>)
   13d84:	4620      	mov	r0, r4
   13d86:	47b0      	blx	r6
	__asm__ volatile(
   13d88:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d8c:	f3ef 8b11 	mrs	fp, BASEPRI
   13d90:	f383 8811 	msr	BASEPRI, r3
   13d94:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13d98:	8b23      	ldrh	r3, [r4, #24]
   13d9a:	f023 0308 	bic.w	r3, r3, #8
   13d9e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13da0:	8b23      	ldrh	r3, [r4, #24]
   13da2:	06da      	lsls	r2, r3, #27
   13da4:	d528      	bpl.n	13df8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13da6:	f023 0310 	bic.w	r3, r3, #16
   13daa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   13dac:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   13dae:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   13db2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   13db6:	2900      	cmp	r1, #0
   13db8:	f47f af5b 	bne.w	13c72 <process_event+0x32>
out:
   13dbc:	e751      	b.n	13c62 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13dbe:	68a1      	ldr	r1, [r4, #8]
   13dc0:	2900      	cmp	r1, #0
   13dc2:	d0db      	beq.n	13d7c <process_event+0x13c>
	return node->next;
   13dc4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   13dc6:	f8d1 b004 	ldr.w	fp, [r1, #4]
   13dca:	2b00      	cmp	r3, #0
   13dcc:	bf38      	it	cc
   13dce:	2300      	movcc	r3, #0
   13dd0:	4699      	mov	r9, r3
   13dd2:	4652      	mov	r2, sl
   13dd4:	463b      	mov	r3, r7
   13dd6:	4620      	mov	r0, r4
   13dd8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13dda:	f1b9 0f00 	cmp.w	r9, #0
   13dde:	d0cd      	beq.n	13d7c <process_event+0x13c>
   13de0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13de4:	4649      	mov	r1, r9
   13de6:	e7ee      	b.n	13dc6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13de8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   13dea:	463b      	mov	r3, r7
   13dec:	4652      	mov	r2, sl
   13dee:	4620      	mov	r0, r4
   13df0:	682d      	ldr	r5, [r5, #0]
   13df2:	f00b fc05 	bl	1f600 <notify_one>
   13df6:	e7c1      	b.n	13d7c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13df8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13dfc:	bf1e      	ittt	ne
   13dfe:	f023 0320 	bicne.w	r3, r3, #32
   13e02:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   13e04:	2102      	movne	r1, #2
   13e06:	e7d2      	b.n	13dae <process_event+0x16e>
   13e08:	0001f62d 	.word	0x0001f62d

00013e0c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   13e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e10:	b091      	sub	sp, #68	; 0x44
   13e12:	468b      	mov	fp, r1
   13e14:	9002      	str	r0, [sp, #8]
   13e16:	4692      	mov	sl, r2
   13e18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13e1a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13e1c:	f89a 0000 	ldrb.w	r0, [sl]
   13e20:	b908      	cbnz	r0, 13e26 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   13e22:	4628      	mov	r0, r5
   13e24:	e35e      	b.n	144e4 <cbvprintf+0x6d8>
		if (*fp != '%') {
   13e26:	2825      	cmp	r0, #37	; 0x25
   13e28:	f10a 0701 	add.w	r7, sl, #1
   13e2c:	d007      	beq.n	13e3e <cbvprintf+0x32>
			OUTC('%');
   13e2e:	9b02      	ldr	r3, [sp, #8]
   13e30:	4659      	mov	r1, fp
   13e32:	4798      	blx	r3
   13e34:	2800      	cmp	r0, #0
   13e36:	f2c0 8355 	blt.w	144e4 <cbvprintf+0x6d8>
   13e3a:	3501      	adds	r5, #1
			break;
   13e3c:	e210      	b.n	14260 <cbvprintf+0x454>
		} state = {
   13e3e:	2218      	movs	r2, #24
   13e40:	2100      	movs	r1, #0
   13e42:	a80a      	add	r0, sp, #40	; 0x28
   13e44:	f00c fc21 	bl	2068a <memset>
	if (*sp == '%') {
   13e48:	f89a 3001 	ldrb.w	r3, [sl, #1]
   13e4c:	2b25      	cmp	r3, #37	; 0x25
   13e4e:	d078      	beq.n	13f42 <cbvprintf+0x136>
   13e50:	2200      	movs	r2, #0
   13e52:	4694      	mov	ip, r2
   13e54:	4616      	mov	r6, r2
   13e56:	4696      	mov	lr, r2
   13e58:	4610      	mov	r0, r2
   13e5a:	4639      	mov	r1, r7
		switch (*sp) {
   13e5c:	f817 3b01 	ldrb.w	r3, [r7], #1
   13e60:	2b2b      	cmp	r3, #43	; 0x2b
   13e62:	f000 809d 	beq.w	13fa0 <cbvprintf+0x194>
   13e66:	f200 8094 	bhi.w	13f92 <cbvprintf+0x186>
   13e6a:	2b20      	cmp	r3, #32
   13e6c:	f000 809b 	beq.w	13fa6 <cbvprintf+0x19a>
   13e70:	2b23      	cmp	r3, #35	; 0x23
   13e72:	f000 809a 	beq.w	13faa <cbvprintf+0x19e>
   13e76:	b128      	cbz	r0, 13e84 <cbvprintf+0x78>
   13e78:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   13e7c:	f040 0004 	orr.w	r0, r0, #4
   13e80:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   13e84:	f1be 0f00 	cmp.w	lr, #0
   13e88:	d005      	beq.n	13e96 <cbvprintf+0x8a>
   13e8a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   13e8e:	f040 0008 	orr.w	r0, r0, #8
   13e92:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   13e96:	b12e      	cbz	r6, 13ea4 <cbvprintf+0x98>
   13e98:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   13e9c:	f040 0010 	orr.w	r0, r0, #16
   13ea0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   13ea4:	f1bc 0f00 	cmp.w	ip, #0
   13ea8:	d005      	beq.n	13eb6 <cbvprintf+0xaa>
   13eaa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   13eae:	f040 0020 	orr.w	r0, r0, #32
   13eb2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   13eb6:	b12a      	cbz	r2, 13ec4 <cbvprintf+0xb8>
   13eb8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13ec0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   13ec4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13ec8:	f002 0044 	and.w	r0, r2, #68	; 0x44
   13ecc:	2844      	cmp	r0, #68	; 0x44
   13ece:	d103      	bne.n	13ed8 <cbvprintf+0xcc>
		conv->flag_zero = false;
   13ed0:	f36f 1286 	bfc	r2, #6, #1
   13ed4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   13ed8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   13edc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   13ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13ee2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   13ee6:	d17b      	bne.n	13fe0 <cbvprintf+0x1d4>
		conv->width_star = true;
   13ee8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   13eec:	f042 0201 	orr.w	r2, r2, #1
   13ef0:	1c4b      	adds	r3, r1, #1
   13ef2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   13ef6:	781a      	ldrb	r2, [r3, #0]
   13ef8:	2a2e      	cmp	r2, #46	; 0x2e
   13efa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   13efe:	bf0c      	ite	eq
   13f00:	2101      	moveq	r1, #1
   13f02:	2100      	movne	r1, #0
   13f04:	f361 0241 	bfi	r2, r1, #1, #1
   13f08:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   13f0c:	d174      	bne.n	13ff8 <cbvprintf+0x1ec>
	if (*sp == '*') {
   13f0e:	785a      	ldrb	r2, [r3, #1]
   13f10:	2a2a      	cmp	r2, #42	; 0x2a
   13f12:	d06a      	beq.n	13fea <cbvprintf+0x1de>
   13f14:	3301      	adds	r3, #1
	size_t val = 0;
   13f16:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   13f18:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   13f1a:	4618      	mov	r0, r3
   13f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
   13f20:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   13f24:	2f09      	cmp	r7, #9
   13f26:	f240 808e 	bls.w	14046 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   13f2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   13f2e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   13f30:	f3c2 0040 	ubfx	r0, r2, #1, #1
   13f34:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   13f38:	f361 0241 	bfi	r2, r1, #1, #1
   13f3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   13f40:	e05a      	b.n	13ff8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   13f42:	f10a 0702 	add.w	r7, sl, #2
   13f46:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   13f4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13f4e:	07d9      	lsls	r1, r3, #31
   13f50:	f140 8149 	bpl.w	141e6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   13f54:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   13f58:	f1b9 0f00 	cmp.w	r9, #0
   13f5c:	da07      	bge.n	13f6e <cbvprintf+0x162>
				conv->flag_dash = true;
   13f5e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13f62:	f042 0204 	orr.w	r2, r2, #4
   13f66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   13f6a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   13f6e:	075a      	lsls	r2, r3, #29
   13f70:	f140 8142 	bpl.w	141f8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   13f74:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   13f78:	f1b8 0f00 	cmp.w	r8, #0
   13f7c:	f280 8141 	bge.w	14202 <cbvprintf+0x3f6>
				conv->prec_present = false;
   13f80:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13f84:	f36f 0341 	bfc	r3, #1, #1
   13f88:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   13f8c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13f90:	e137      	b.n	14202 <cbvprintf+0x3f6>
		switch (*sp) {
   13f92:	2b2d      	cmp	r3, #45	; 0x2d
   13f94:	d00c      	beq.n	13fb0 <cbvprintf+0x1a4>
   13f96:	2b30      	cmp	r3, #48	; 0x30
   13f98:	f47f af6d 	bne.w	13e76 <cbvprintf+0x6a>
			conv->flag_zero = true;
   13f9c:	2201      	movs	r2, #1
	} while (loop);
   13f9e:	e75c      	b.n	13e5a <cbvprintf+0x4e>
			conv->flag_plus = true;
   13fa0:	f04f 0e01 	mov.w	lr, #1
   13fa4:	e759      	b.n	13e5a <cbvprintf+0x4e>
			conv->flag_space = true;
   13fa6:	2601      	movs	r6, #1
   13fa8:	e757      	b.n	13e5a <cbvprintf+0x4e>
			conv->flag_hash = true;
   13faa:	f04f 0c01 	mov.w	ip, #1
   13fae:	e754      	b.n	13e5a <cbvprintf+0x4e>
		switch (*sp) {
   13fb0:	2001      	movs	r0, #1
   13fb2:	e752      	b.n	13e5a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   13fb4:	fb0c 0202 	mla	r2, ip, r2, r0
   13fb8:	3a30      	subs	r2, #48	; 0x30
   13fba:	4633      	mov	r3, r6
   13fbc:	461e      	mov	r6, r3
   13fbe:	f816 0b01 	ldrb.w	r0, [r6], #1
   13fc2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   13fc6:	2f09      	cmp	r7, #9
   13fc8:	d9f4      	bls.n	13fb4 <cbvprintf+0x1a8>
	if (sp != wp) {
   13fca:	4299      	cmp	r1, r3
   13fcc:	d093      	beq.n	13ef6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   13fce:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   13fd2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   13fd4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   13fd6:	f362 0141 	bfi	r1, r2, #1, #1
   13fda:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   13fde:	e78a      	b.n	13ef6 <cbvprintf+0xea>
   13fe0:	460b      	mov	r3, r1
	size_t val = 0;
   13fe2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   13fe4:	f04f 0c0a 	mov.w	ip, #10
   13fe8:	e7e8      	b.n	13fbc <cbvprintf+0x1b0>
		conv->prec_star = true;
   13fea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   13fee:	f042 0204 	orr.w	r2, r2, #4
   13ff2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   13ff6:	3302      	adds	r3, #2
	switch (*sp) {
   13ff8:	461f      	mov	r7, r3
   13ffa:	f817 2b01 	ldrb.w	r2, [r7], #1
   13ffe:	2a6c      	cmp	r2, #108	; 0x6c
   14000:	d041      	beq.n	14086 <cbvprintf+0x27a>
   14002:	d825      	bhi.n	14050 <cbvprintf+0x244>
   14004:	2a68      	cmp	r2, #104	; 0x68
   14006:	d02b      	beq.n	14060 <cbvprintf+0x254>
   14008:	2a6a      	cmp	r2, #106	; 0x6a
   1400a:	d046      	beq.n	1409a <cbvprintf+0x28e>
   1400c:	2a4c      	cmp	r2, #76	; 0x4c
   1400e:	d04c      	beq.n	140aa <cbvprintf+0x29e>
   14010:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   14012:	f817 2b01 	ldrb.w	r2, [r7], #1
   14016:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1401a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1401e:	2a78      	cmp	r2, #120	; 0x78
   14020:	f200 80d9 	bhi.w	141d6 <cbvprintf+0x3ca>
   14024:	2a57      	cmp	r2, #87	; 0x57
   14026:	d84d      	bhi.n	140c4 <cbvprintf+0x2b8>
   14028:	2a41      	cmp	r2, #65	; 0x41
   1402a:	d003      	beq.n	14034 <cbvprintf+0x228>
   1402c:	3a45      	subs	r2, #69	; 0x45
   1402e:	2a02      	cmp	r2, #2
   14030:	f200 80d1 	bhi.w	141d6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   14034:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14038:	2204      	movs	r2, #4
   1403a:	f362 0302 	bfi	r3, r2, #0, #3
   1403e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   14042:	2301      	movs	r3, #1
			break;
   14044:	e09e      	b.n	14184 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   14046:	fb06 2101 	mla	r1, r6, r1, r2
   1404a:	3930      	subs	r1, #48	; 0x30
   1404c:	4603      	mov	r3, r0
   1404e:	e764      	b.n	13f1a <cbvprintf+0x10e>
	switch (*sp) {
   14050:	2a74      	cmp	r2, #116	; 0x74
   14052:	d026      	beq.n	140a2 <cbvprintf+0x296>
   14054:	2a7a      	cmp	r2, #122	; 0x7a
   14056:	d1db      	bne.n	14010 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   14058:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1405c:	2206      	movs	r2, #6
   1405e:	e00d      	b.n	1407c <cbvprintf+0x270>
		if (*++sp == 'h') {
   14060:	785a      	ldrb	r2, [r3, #1]
   14062:	2a68      	cmp	r2, #104	; 0x68
   14064:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   14068:	d106      	bne.n	14078 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1406a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1406c:	f361 02c6 	bfi	r2, r1, #3, #4
   14070:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   14074:	1c9f      	adds	r7, r3, #2
   14076:	e7cc      	b.n	14012 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   14078:	4613      	mov	r3, r2
   1407a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1407c:	f362 03c6 	bfi	r3, r2, #3, #4
   14080:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   14084:	e7c5      	b.n	14012 <cbvprintf+0x206>
		if (*++sp == 'l') {
   14086:	785a      	ldrb	r2, [r3, #1]
   14088:	2a6c      	cmp	r2, #108	; 0x6c
   1408a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1408e:	d101      	bne.n	14094 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   14090:	2104      	movs	r1, #4
   14092:	e7eb      	b.n	1406c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   14094:	4613      	mov	r3, r2
   14096:	2203      	movs	r2, #3
   14098:	e7f0      	b.n	1407c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1409a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1409e:	2205      	movs	r2, #5
   140a0:	e7ec      	b.n	1407c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   140a2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   140a6:	2207      	movs	r2, #7
   140a8:	e7e8      	b.n	1407c <cbvprintf+0x270>
		conv->unsupported = true;
   140aa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   140ae:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   140b2:	f023 0302 	bic.w	r3, r3, #2
   140b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   140ba:	f043 0302 	orr.w	r3, r3, #2
   140be:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   140c2:	e7a6      	b.n	14012 <cbvprintf+0x206>
   140c4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   140c8:	2920      	cmp	r1, #32
   140ca:	f200 8084 	bhi.w	141d6 <cbvprintf+0x3ca>
   140ce:	a001      	add	r0, pc, #4	; (adr r0, 140d4 <cbvprintf+0x2c8>)
   140d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   140d4:	00014199 	.word	0x00014199
   140d8:	000141d7 	.word	0x000141d7
   140dc:	000141d7 	.word	0x000141d7
   140e0:	000141d7 	.word	0x000141d7
   140e4:	000141d7 	.word	0x000141d7
   140e8:	000141d7 	.word	0x000141d7
   140ec:	000141d7 	.word	0x000141d7
   140f0:	000141d7 	.word	0x000141d7
   140f4:	000141d7 	.word	0x000141d7
   140f8:	00014035 	.word	0x00014035
   140fc:	000141d7 	.word	0x000141d7
   14100:	00014199 	.word	0x00014199
   14104:	00014159 	.word	0x00014159
   14108:	00014035 	.word	0x00014035
   1410c:	00014035 	.word	0x00014035
   14110:	00014035 	.word	0x00014035
   14114:	000141d7 	.word	0x000141d7
   14118:	00014159 	.word	0x00014159
   1411c:	000141d7 	.word	0x000141d7
   14120:	000141d7 	.word	0x000141d7
   14124:	000141d7 	.word	0x000141d7
   14128:	000141d7 	.word	0x000141d7
   1412c:	000141a1 	.word	0x000141a1
   14130:	00014199 	.word	0x00014199
   14134:	000141bd 	.word	0x000141bd
   14138:	000141d7 	.word	0x000141d7
   1413c:	000141d7 	.word	0x000141d7
   14140:	000141bd 	.word	0x000141bd
   14144:	000141d7 	.word	0x000141d7
   14148:	00014199 	.word	0x00014199
   1414c:	000141d7 	.word	0x000141d7
   14150:	000141d7 	.word	0x000141d7
   14154:	00014199 	.word	0x00014199
		conv->specifier_cat = SPECIFIER_SINT;
   14158:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1415c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1415e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   14162:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   14166:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   14168:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1416c:	bf02      	ittt	eq
   1416e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   14172:	f041 0101 	orreq.w	r1, r1, #1
   14176:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1417a:	2a63      	cmp	r2, #99	; 0x63
   1417c:	d131      	bne.n	141e2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1417e:	3b00      	subs	r3, #0
   14180:	bf18      	it	ne
   14182:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   14184:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   14188:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1418c:	430b      	orrs	r3, r1
   1418e:	f363 0241 	bfi	r2, r3, #1, #1
   14192:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   14196:	e6d8      	b.n	13f4a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   14198:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1419c:	2002      	movs	r0, #2
   1419e:	e7de      	b.n	1415e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   141a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   141a4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   141a8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   141ac:	2103      	movs	r1, #3
   141ae:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   141b2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   141b4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   141b8:	4143      	adcs	r3, r0
   141ba:	e7e3      	b.n	14184 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   141bc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   141c0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   141c2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   141c6:	f361 0202 	bfi	r2, r1, #0, #3
   141ca:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   141ce:	bf14      	ite	ne
   141d0:	2301      	movne	r3, #1
   141d2:	2300      	moveq	r3, #0
   141d4:	e7d6      	b.n	14184 <cbvprintf+0x378>
		conv->invalid = true;
   141d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   141da:	f043 0301 	orr.w	r3, r3, #1
   141de:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   141e2:	2300      	movs	r3, #0
   141e4:	e7ce      	b.n	14184 <cbvprintf+0x378>
		} else if (conv->width_present) {
   141e6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   141ea:	2a00      	cmp	r2, #0
			width = conv->width_value;
   141ec:	bfb4      	ite	lt
   141ee:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   141f2:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   141f6:	e6ba      	b.n	13f6e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   141f8:	079b      	lsls	r3, r3, #30
   141fa:	f57f aec7 	bpl.w	13f8c <cbvprintf+0x180>
			precision = conv->prec_value;
   141fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   14202:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   14206:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   14208:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1420c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   14210:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   14214:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   14216:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1421a:	d136      	bne.n	1428a <cbvprintf+0x47e>
			switch (length_mod) {
   1421c:	1ed3      	subs	r3, r2, #3
   1421e:	2b04      	cmp	r3, #4
   14220:	d820      	bhi.n	14264 <cbvprintf+0x458>
   14222:	e8df f003 	tbb	[pc, r3]
   14226:	0703      	.short	0x0703
   14228:	1f07      	.short	0x1f07
   1422a:	1f          	.byte	0x1f
   1422b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1422c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   14230:	17c1      	asrs	r1, r0, #31
   14232:	e004      	b.n	1423e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   14234:	3407      	adds	r4, #7
   14236:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1423a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1423e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   14242:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   14246:	f013 0603 	ands.w	r6, r3, #3
   1424a:	d054      	beq.n	142f6 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   1424c:	9802      	ldr	r0, [sp, #8]
   1424e:	463b      	mov	r3, r7
   14250:	4652      	mov	r2, sl
   14252:	4659      	mov	r1, fp
   14254:	f00b fd6d 	bl	1fd32 <outs>
   14258:	2800      	cmp	r0, #0
   1425a:	f2c0 8143 	blt.w	144e4 <cbvprintf+0x6d8>
   1425e:	4405      	add	r5, r0
			continue;
   14260:	46ba      	mov	sl, r7
   14262:	e5db      	b.n	13e1c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14264:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   14268:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1426a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1426e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   14272:	d105      	bne.n	14280 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   14274:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   14278:	930a      	str	r3, [sp, #40]	; 0x28
   1427a:	2300      	movs	r3, #0
   1427c:	930b      	str	r3, [sp, #44]	; 0x2c
   1427e:	e7e0      	b.n	14242 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   14280:	2a02      	cmp	r2, #2
   14282:	d1de      	bne.n	14242 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   14284:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   14288:	e7d2      	b.n	14230 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1428a:	2b02      	cmp	r3, #2
   1428c:	d123      	bne.n	142d6 <cbvprintf+0x4ca>
			switch (length_mod) {
   1428e:	1ed3      	subs	r3, r2, #3
   14290:	2b04      	cmp	r3, #4
   14292:	d813      	bhi.n	142bc <cbvprintf+0x4b0>
   14294:	e8df f003 	tbb	[pc, r3]
   14298:	120a0a03 	.word	0x120a0a03
   1429c:	12          	.byte	0x12
   1429d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1429e:	6820      	ldr	r0, [r4, #0]
   142a0:	900a      	str	r0, [sp, #40]	; 0x28
   142a2:	2100      	movs	r1, #0
   142a4:	1d23      	adds	r3, r4, #4
   142a6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   142a8:	461c      	mov	r4, r3
   142aa:	e7ca      	b.n	14242 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   142ac:	3407      	adds	r4, #7
   142ae:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   142b2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   142b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   142ba:	e7f5      	b.n	142a8 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   142bc:	f854 3b04 	ldr.w	r3, [r4], #4
   142c0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   142c2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   142c4:	f04f 0300 	mov.w	r3, #0
   142c8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   142ca:	d0d3      	beq.n	14274 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   142cc:	2a02      	cmp	r2, #2
   142ce:	d1b8      	bne.n	14242 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   142d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   142d4:	e7d0      	b.n	14278 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   142d6:	2b04      	cmp	r3, #4
   142d8:	d107      	bne.n	142ea <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   142da:	3407      	adds	r4, #7
   142dc:	f024 0407 	bic.w	r4, r4, #7
   142e0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   142e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   142e8:	e7ab      	b.n	14242 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   142ea:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   142ec:	bf04      	itt	eq
   142ee:	f854 3b04 	ldreq.w	r3, [r4], #4
   142f2:	930a      	streq	r3, [sp, #40]	; 0x28
   142f4:	e7a5      	b.n	14242 <cbvprintf+0x436>
		switch (conv->specifier) {
   142f6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   142fa:	2878      	cmp	r0, #120	; 0x78
   142fc:	d8b0      	bhi.n	14260 <cbvprintf+0x454>
   142fe:	2862      	cmp	r0, #98	; 0x62
   14300:	d822      	bhi.n	14348 <cbvprintf+0x53c>
   14302:	2825      	cmp	r0, #37	; 0x25
   14304:	f43f ad93 	beq.w	13e2e <cbvprintf+0x22>
   14308:	2858      	cmp	r0, #88	; 0x58
   1430a:	d1a9      	bne.n	14260 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1430c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   14310:	9300      	str	r3, [sp, #0]
   14312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   14316:	ab04      	add	r3, sp, #16
   14318:	aa0c      	add	r2, sp, #48	; 0x30
   1431a:	f00b fcbf 	bl	1fc9c <encode_uint>
   1431e:	4682      	mov	sl, r0
			if (precision >= 0) {
   14320:	f1b8 0f00 	cmp.w	r8, #0
   14324:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14328:	db0c      	blt.n	14344 <cbvprintf+0x538>
				conv->flag_zero = false;
   1432a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1432e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   14332:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   14336:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   14338:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1433c:	d902      	bls.n	14344 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1433e:	eba8 0303 	sub.w	r3, r8, r3
   14342:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   14344:	4680      	mov	r8, r0
   14346:	e03d      	b.n	143c4 <cbvprintf+0x5b8>
   14348:	3863      	subs	r0, #99	; 0x63
   1434a:	2815      	cmp	r0, #21
   1434c:	d888      	bhi.n	14260 <cbvprintf+0x454>
   1434e:	a101      	add	r1, pc, #4	; (adr r1, 14354 <cbvprintf+0x548>)
   14350:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   14354:	000143d5 	.word	0x000143d5
   14358:	00014439 	.word	0x00014439
   1435c:	00014261 	.word	0x00014261
   14360:	00014261 	.word	0x00014261
   14364:	00014261 	.word	0x00014261
   14368:	00014261 	.word	0x00014261
   1436c:	00014439 	.word	0x00014439
   14370:	00014261 	.word	0x00014261
   14374:	00014261 	.word	0x00014261
   14378:	00014261 	.word	0x00014261
   1437c:	00014261 	.word	0x00014261
   14380:	00014497 	.word	0x00014497
   14384:	00014465 	.word	0x00014465
   14388:	00014469 	.word	0x00014469
   1438c:	00014261 	.word	0x00014261
   14390:	00014261 	.word	0x00014261
   14394:	000143ad 	.word	0x000143ad
   14398:	00014261 	.word	0x00014261
   1439c:	00014465 	.word	0x00014465
   143a0:	00014261 	.word	0x00014261
   143a4:	00014261 	.word	0x00014261
   143a8:	00014465 	.word	0x00014465
			if (precision >= 0) {
   143ac:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   143b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   143b4:	db0a      	blt.n	143cc <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   143b6:	4641      	mov	r1, r8
   143b8:	4650      	mov	r0, sl
   143ba:	f00c f8ff 	bl	205bc <strnlen>
			bpe = bps + len;
   143be:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   143c2:	2600      	movs	r6, #0
		if (bps == NULL) {
   143c4:	f1ba 0f00 	cmp.w	sl, #0
   143c8:	d10c      	bne.n	143e4 <cbvprintf+0x5d8>
   143ca:	e749      	b.n	14260 <cbvprintf+0x454>
				len = strlen(bps);
   143cc:	4650      	mov	r0, sl
   143ce:	f00c f8ee 	bl	205ae <strlen>
   143d2:	e7f4      	b.n	143be <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   143d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143d6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   143da:	2600      	movs	r6, #0
			bpe = buf + 1;
   143dc:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   143e0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   143e4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   143e8:	b106      	cbz	r6, 143ec <cbvprintf+0x5e0>
			nj_len += 1U;
   143ea:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   143ec:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   143f0:	06d0      	lsls	r0, r2, #27
   143f2:	d56b      	bpl.n	144cc <cbvprintf+0x6c0>
			nj_len += 2U;
   143f4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   143f6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   143f8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   143fa:	bf48      	it	mi
   143fc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   143fe:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   14400:	bf48      	it	mi
   14402:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   14404:	f1b9 0f00 	cmp.w	r9, #0
   14408:	dd79      	ble.n	144fe <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1440a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1440e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   14412:	f3c2 0380 	ubfx	r3, r2, #2, #1
   14416:	9303      	str	r3, [sp, #12]
   14418:	0753      	lsls	r3, r2, #29
   1441a:	d470      	bmi.n	144fe <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1441c:	0650      	lsls	r0, r2, #25
   1441e:	d564      	bpl.n	144ea <cbvprintf+0x6de>
					if (sign != 0) {
   14420:	b146      	cbz	r6, 14434 <cbvprintf+0x628>
						OUTC(sign);
   14422:	9b02      	ldr	r3, [sp, #8]
   14424:	4659      	mov	r1, fp
   14426:	4630      	mov	r0, r6
   14428:	4798      	blx	r3
   1442a:	2800      	cmp	r0, #0
   1442c:	db5a      	blt.n	144e4 <cbvprintf+0x6d8>
						sign = 0;
   1442e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   14430:	3501      	adds	r5, #1
						sign = 0;
   14432:	461e      	mov	r6, r3
					pad = '0';
   14434:	2330      	movs	r3, #48	; 0x30
   14436:	e059      	b.n	144ec <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   14438:	071e      	lsls	r6, r3, #28
   1443a:	d411      	bmi.n	14460 <cbvprintf+0x654>
				sign = ' ';
   1443c:	f013 0610 	ands.w	r6, r3, #16
   14440:	bf18      	it	ne
   14442:	2620      	movne	r6, #32
			if (value->sint < 0) {
   14444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   14448:	2a00      	cmp	r2, #0
   1444a:	f173 0100 	sbcs.w	r1, r3, #0
   1444e:	f6bf af5d 	bge.w	1430c <cbvprintf+0x500>
				value->uint = (uint_value_type)-value->sint;
   14452:	4252      	negs	r2, r2
   14454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14458:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   1445c:	262d      	movs	r6, #45	; 0x2d
   1445e:	e755      	b.n	1430c <cbvprintf+0x500>
				sign = '+';
   14460:	262b      	movs	r6, #43	; 0x2b
   14462:	e7ef      	b.n	14444 <cbvprintf+0x638>
		switch (conv->specifier) {
   14464:	2600      	movs	r6, #0
   14466:	e751      	b.n	1430c <cbvprintf+0x500>
			if (value->ptr != NULL) {
   14468:	980a      	ldr	r0, [sp, #40]	; 0x28
   1446a:	b348      	cbz	r0, 144c0 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1446c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   14470:	9300      	str	r3, [sp, #0]
   14472:	aa0c      	add	r2, sp, #48	; 0x30
   14474:	ab04      	add	r3, sp, #16
   14476:	2100      	movs	r1, #0
   14478:	f00b fc10 	bl	1fc9c <encode_uint>
				conv->altform_0c = true;
   1447c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   14480:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   14484:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   14488:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1448c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1448e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   14492:	2600      	movs	r6, #0
				goto prec_int_pad0;
   14494:	e744      	b.n	14320 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   14496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   14498:	2a07      	cmp	r2, #7
   1449a:	f63f aee1 	bhi.w	14260 <cbvprintf+0x454>
   1449e:	e8df f002 	tbb	[pc, r2]
   144a2:	040d      	.short	0x040d
   144a4:	08080d06 	.word	0x08080d06
   144a8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   144aa:	701d      	strb	r5, [r3, #0]
		break;
   144ac:	e6d8      	b.n	14260 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   144ae:	801d      	strh	r5, [r3, #0]
		break;
   144b0:	e6d6      	b.n	14260 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   144b2:	4628      	mov	r0, r5
   144b4:	17e9      	asrs	r1, r5, #31
   144b6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   144ba:	e6d1      	b.n	14260 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   144bc:	601d      	str	r5, [r3, #0]
		break;
   144be:	e6cf      	b.n	14260 <cbvprintf+0x454>
			bpe = bps + 5;
   144c0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 14588 <cbvprintf+0x77c>
   144c4:	4606      	mov	r6, r0
			bps = "(nil)";
   144c6:	f1a8 0a05 	sub.w	sl, r8, #5
   144ca:	e78b      	b.n	143e4 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   144cc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   144ce:	bf48      	it	mi
   144d0:	3301      	addmi	r3, #1
   144d2:	e790      	b.n	143f6 <cbvprintf+0x5ea>
					OUTC(pad);
   144d4:	4618      	mov	r0, r3
   144d6:	9303      	str	r3, [sp, #12]
   144d8:	4659      	mov	r1, fp
   144da:	9b02      	ldr	r3, [sp, #8]
   144dc:	4798      	blx	r3
   144de:	2800      	cmp	r0, #0
   144e0:	9b03      	ldr	r3, [sp, #12]
   144e2:	da04      	bge.n	144ee <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   144e4:	b011      	add	sp, #68	; 0x44
   144e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   144ea:	2320      	movs	r3, #32
   144ec:	444d      	add	r5, r9
   144ee:	464a      	mov	r2, r9
				while (width-- > 0) {
   144f0:	2a00      	cmp	r2, #0
   144f2:	eba5 0109 	sub.w	r1, r5, r9
   144f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   144fa:	dceb      	bgt.n	144d4 <cbvprintf+0x6c8>
   144fc:	460d      	mov	r5, r1
		if (sign != 0) {
   144fe:	b136      	cbz	r6, 1450e <cbvprintf+0x702>
			OUTC(sign);
   14500:	9b02      	ldr	r3, [sp, #8]
   14502:	4659      	mov	r1, fp
   14504:	4630      	mov	r0, r6
   14506:	4798      	blx	r3
   14508:	2800      	cmp	r0, #0
   1450a:	dbeb      	blt.n	144e4 <cbvprintf+0x6d8>
   1450c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1450e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14512:	06d9      	lsls	r1, r3, #27
   14514:	d401      	bmi.n	1451a <cbvprintf+0x70e>
   14516:	071a      	lsls	r2, r3, #28
   14518:	d506      	bpl.n	14528 <cbvprintf+0x71c>
				OUTC('0');
   1451a:	9b02      	ldr	r3, [sp, #8]
   1451c:	4659      	mov	r1, fp
   1451e:	2030      	movs	r0, #48	; 0x30
   14520:	4798      	blx	r3
   14522:	2800      	cmp	r0, #0
   14524:	dbde      	blt.n	144e4 <cbvprintf+0x6d8>
   14526:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   14528:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1452c:	06db      	lsls	r3, r3, #27
   1452e:	d507      	bpl.n	14540 <cbvprintf+0x734>
				OUTC(conv->specifier);
   14530:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   14534:	9b02      	ldr	r3, [sp, #8]
   14536:	4659      	mov	r1, fp
   14538:	4798      	blx	r3
   1453a:	2800      	cmp	r0, #0
   1453c:	dbd2      	blt.n	144e4 <cbvprintf+0x6d8>
   1453e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   14540:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14542:	442e      	add	r6, r5
   14544:	1b73      	subs	r3, r6, r5
   14546:	2b00      	cmp	r3, #0
   14548:	dc16      	bgt.n	14578 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   1454a:	9802      	ldr	r0, [sp, #8]
   1454c:	4643      	mov	r3, r8
   1454e:	4652      	mov	r2, sl
   14550:	4659      	mov	r1, fp
   14552:	f00b fbee 	bl	1fd32 <outs>
   14556:	2800      	cmp	r0, #0
   14558:	dbc4      	blt.n	144e4 <cbvprintf+0x6d8>
   1455a:	4405      	add	r5, r0
		while (width > 0) {
   1455c:	44a9      	add	r9, r5
   1455e:	eba9 0305 	sub.w	r3, r9, r5
   14562:	2b00      	cmp	r3, #0
   14564:	f77f ae7c 	ble.w	14260 <cbvprintf+0x454>
			OUTC(' ');
   14568:	9b02      	ldr	r3, [sp, #8]
   1456a:	4659      	mov	r1, fp
   1456c:	2020      	movs	r0, #32
   1456e:	4798      	blx	r3
   14570:	2800      	cmp	r0, #0
   14572:	dbb7      	blt.n	144e4 <cbvprintf+0x6d8>
   14574:	3501      	adds	r5, #1
			--width;
   14576:	e7f2      	b.n	1455e <cbvprintf+0x752>
				OUTC('0');
   14578:	9b02      	ldr	r3, [sp, #8]
   1457a:	4659      	mov	r1, fp
   1457c:	2030      	movs	r0, #48	; 0x30
   1457e:	4798      	blx	r3
   14580:	2800      	cmp	r0, #0
   14582:	dbaf      	blt.n	144e4 <cbvprintf+0x6d8>
   14584:	3501      	adds	r5, #1
   14586:	e7dd      	b.n	14544 <cbvprintf+0x738>
   14588:	000239cd 	.word	0x000239cd

0001458c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1458c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1458e:	4910      	ldr	r1, [pc, #64]	; (145d0 <enable_logger+0x44>)
   14590:	4810      	ldr	r0, [pc, #64]	; (145d4 <enable_logger+0x48>)
{
   14592:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   14594:	2200      	movs	r2, #0
   14596:	f00e f8d0 	bl	2273a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1459a:	4d0f      	ldr	r5, [pc, #60]	; (145d8 <enable_logger+0x4c>)
   1459c:	490f      	ldr	r1, [pc, #60]	; (145dc <enable_logger+0x50>)
   1459e:	2200      	movs	r2, #0
   145a0:	2300      	movs	r3, #0
   145a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   145a6:	2400      	movs	r4, #0
   145a8:	230e      	movs	r3, #14
   145aa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   145ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   145b2:	4b0b      	ldr	r3, [pc, #44]	; (145e0 <enable_logger+0x54>)
   145b4:	9400      	str	r4, [sp, #0]
   145b6:	f44f 7240 	mov.w	r2, #768	; 0x300
   145ba:	4628      	mov	r0, r5
   145bc:	f009 fd2a 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   145c0:	4908      	ldr	r1, [pc, #32]	; (145e4 <enable_logger+0x58>)
   145c2:	4628      	mov	r0, r5
   145c4:	f00d ffce 	bl	22564 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   145c8:	4620      	mov	r0, r4
   145ca:	b009      	add	sp, #36	; 0x24
   145cc:	bd30      	pop	{r4, r5, pc}
   145ce:	bf00      	nop
   145d0:	000145e9 	.word	0x000145e9
   145d4:	20001e20 	.word	0x20001e20
   145d8:	20001e58 	.word	0x20001e58
   145dc:	20004440 	.word	0x20004440
   145e0:	000149e5 	.word	0x000149e5
   145e4:	000239ce 	.word	0x000239ce

000145e8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   145e8:	4801      	ldr	r0, [pc, #4]	; (145f0 <log_process_thread_timer_expiry_fn+0x8>)
   145ea:	f009 bc79 	b.w	1dee0 <z_impl_k_sem_give>
   145ee:	bf00      	nop
   145f0:	20000940 	.word	0x20000940

000145f4 <log_core_init>:
{
   145f4:	b508      	push	{r3, lr}
		log_msg_pool_init();
   145f6:	f000 fa57 	bl	14aa8 <log_msg_pool_init>
		log_list_init(&list);
   145fa:	4809      	ldr	r0, [pc, #36]	; (14620 <log_core_init+0x2c>)
   145fc:	f00b fbb0 	bl	1fd60 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   14600:	2304      	movs	r3, #4
   14602:	2228      	movs	r2, #40	; 0x28
   14604:	4907      	ldr	r1, [pc, #28]	; (14624 <log_core_init+0x30>)
   14606:	4808      	ldr	r0, [pc, #32]	; (14628 <log_core_init+0x34>)
   14608:	f00d fda7 	bl	2215a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   1460c:	4b07      	ldr	r3, [pc, #28]	; (1462c <log_core_init+0x38>)
   1460e:	4a08      	ldr	r2, [pc, #32]	; (14630 <log_core_init+0x3c>)
   14610:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   14612:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
   14616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   1461a:	f000 bab9 	b.w	14b90 <log_output_timestamp_freq_set>
   1461e:	bf00      	nop
   14620:	20002588 	.word	0x20002588
   14624:	200070d0 	.word	0x200070d0
   14628:	20002590 	.word	0x20002590
   1462c:	2000053c 	.word	0x2000053c
   14630:	0001fd9f 	.word	0x0001fd9f

00014634 <dropped_notify>:
{
   14634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14636:	4b0f      	ldr	r3, [pc, #60]	; (14674 <dropped_notify+0x40>)
   14638:	f3bf 8f5b 	dmb	ish
   1463c:	2500      	movs	r5, #0
   1463e:	e853 7f00 	ldrex	r7, [r3]
   14642:	e843 5200 	strex	r2, r5, [r3]
   14646:	2a00      	cmp	r2, #0
   14648:	d1f9      	bne.n	1463e <dropped_notify+0xa>
   1464a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1464e:	4c0a      	ldr	r4, [pc, #40]	; (14678 <dropped_notify+0x44>)
   14650:	4e0a      	ldr	r6, [pc, #40]	; (1467c <dropped_notify+0x48>)
   14652:	1b36      	subs	r6, r6, r4
   14654:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14656:	42b5      	cmp	r5, r6
   14658:	db00      	blt.n	1465c <dropped_notify+0x28>
}
   1465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1465c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1465e:	795b      	ldrb	r3, [r3, #5]
   14660:	b12b      	cbz	r3, 1466e <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
   14662:	6823      	ldr	r3, [r4, #0]
   14664:	68db      	ldr	r3, [r3, #12]
   14666:	b113      	cbz	r3, 1466e <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
   14668:	4639      	mov	r1, r7
   1466a:	4620      	mov	r0, r4
   1466c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1466e:	3501      	adds	r5, #1
   14670:	3410      	adds	r4, #16
   14672:	e7f0      	b.n	14656 <dropped_notify+0x22>
   14674:	20002580 	.word	0x20002580
   14678:	00022db0 	.word	0x00022db0
   1467c:	00022db0 	.word	0x00022db0

00014680 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14680:	4b06      	ldr	r3, [pc, #24]	; (1469c <log_dropped+0x1c>)
   14682:	f3bf 8f5b 	dmb	ish
   14686:	e853 2f00 	ldrex	r2, [r3]
   1468a:	3201      	adds	r2, #1
   1468c:	e843 2100 	strex	r1, r2, [r3]
   14690:	2900      	cmp	r1, #0
   14692:	d1f8      	bne.n	14686 <log_dropped+0x6>
   14694:	f3bf 8f5b 	dmb	ish
}
   14698:	4770      	bx	lr
   1469a:	bf00      	nop
   1469c:	20002580 	.word	0x20002580

000146a0 <log_backend_enable>:
	id += backend - log_backend_get(0);
   146a0:	4b09      	ldr	r3, [pc, #36]	; (146c8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   146a2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   146a4:	1ac3      	subs	r3, r0, r3
   146a6:	111b      	asrs	r3, r3, #4
   146a8:	3301      	adds	r3, #1
{
   146aa:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   146ac:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
   146ae:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   146b0:	4c06      	ldr	r4, [pc, #24]	; (146cc <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   146b2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   146b4:	2201      	movs	r2, #1
   146b6:	715a      	strb	r2, [r3, #5]
   146b8:	7822      	ldrb	r2, [r4, #0]
   146ba:	b912      	cbnz	r2, 146c2 <log_backend_enable+0x22>
   146bc:	4804      	ldr	r0, [pc, #16]	; (146d0 <log_backend_enable+0x30>)
   146be:	f009 fc0f 	bl	1dee0 <z_impl_k_sem_give>
	backend_attached = true;
   146c2:	2301      	movs	r3, #1
   146c4:	7023      	strb	r3, [r4, #0]
}
   146c6:	bd10      	pop	{r4, pc}
   146c8:	00022db0 	.word	0x00022db0
   146cc:	2000387e 	.word	0x2000387e
   146d0:	20000940 	.word	0x20000940

000146d4 <log_init>:
{
   146d4:	b570      	push	{r4, r5, r6, lr}
   146d6:	4b11      	ldr	r3, [pc, #68]	; (1471c <log_init+0x48>)
   146d8:	f3bf 8f5b 	dmb	ish
   146dc:	e853 5f00 	ldrex	r5, [r3]
   146e0:	1c6a      	adds	r2, r5, #1
   146e2:	e843 2100 	strex	r1, r2, [r3]
   146e6:	2900      	cmp	r1, #0
   146e8:	d1f8      	bne.n	146dc <log_init+0x8>
   146ea:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   146ee:	b92d      	cbnz	r5, 146fc <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   146f0:	4c0b      	ldr	r4, [pc, #44]	; (14720 <log_init+0x4c>)
   146f2:	4e0c      	ldr	r6, [pc, #48]	; (14724 <log_init+0x50>)
   146f4:	1b36      	subs	r6, r6, r4
   146f6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   146f8:	42b5      	cmp	r5, r6
   146fa:	db00      	blt.n	146fe <log_init+0x2a>
}
   146fc:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   146fe:	7b23      	ldrb	r3, [r4, #12]
   14700:	b143      	cbz	r3, 14714 <log_init+0x40>
			if (backend->api->init != NULL) {
   14702:	6823      	ldr	r3, [r4, #0]
   14704:	695b      	ldr	r3, [r3, #20]
   14706:	b103      	cbz	r3, 1470a <log_init+0x36>
				backend->api->init();
   14708:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1470a:	2204      	movs	r2, #4
   1470c:	2100      	movs	r1, #0
   1470e:	4620      	mov	r0, r4
   14710:	f7ff ffc6 	bl	146a0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   14714:	3501      	adds	r5, #1
   14716:	3410      	adds	r4, #16
   14718:	e7ee      	b.n	146f8 <log_init+0x24>
   1471a:	bf00      	nop
   1471c:	20002584 	.word	0x20002584
   14720:	00022db0 	.word	0x00022db0
   14724:	00022db0 	.word	0x00022db0

00014728 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   14728:	4b16      	ldr	r3, [pc, #88]	; (14784 <log_strdup+0x5c>)
   1472a:	4298      	cmp	r0, r3
{
   1472c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1472e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14730:	d302      	bcc.n	14738 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   14732:	4b15      	ldr	r3, [pc, #84]	; (14788 <log_strdup+0x60>)
   14734:	4298      	cmp	r0, r3
   14736:	d320      	bcc.n	1477a <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   14738:	4814      	ldr	r0, [pc, #80]	; (1478c <log_strdup+0x64>)
   1473a:	2200      	movs	r2, #0
   1473c:	2300      	movs	r3, #0
   1473e:	a901      	add	r1, sp, #4
   14740:	f008 fede 	bl	1d500 <k_mem_slab_alloc>
	if (err != 0) {
   14744:	4605      	mov	r5, r0
   14746:	b9d8      	cbnz	r0, 14780 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14748:	2201      	movs	r2, #1
   1474a:	9b01      	ldr	r3, [sp, #4]
   1474c:	f3bf 8f5b 	dmb	ish
   14750:	e853 1f00 	ldrex	r1, [r3]
   14754:	e843 2000 	strex	r0, r2, [r3]
   14758:	2800      	cmp	r0, #0
   1475a:	d1f9      	bne.n	14750 <log_strdup+0x28>
   1475c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   14760:	9801      	ldr	r0, [sp, #4]
   14762:	4621      	mov	r1, r4
   14764:	221f      	movs	r2, #31
   14766:	3004      	adds	r0, #4
   14768:	f00b ff0e 	bl	20588 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1476c:	9c01      	ldr	r4, [sp, #4]
   1476e:	237e      	movs	r3, #126	; 0x7e
   14770:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   14774:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
   14778:	3404      	adds	r4, #4
}
   1477a:	4620      	mov	r0, r4
   1477c:	b003      	add	sp, #12
   1477e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   14780:	4c03      	ldr	r4, [pc, #12]	; (14790 <log_strdup+0x68>)
   14782:	e7fa      	b.n	1477a <log_strdup+0x52>
   14784:	00022a94 	.word	0x00022a94
   14788:	00025354 	.word	0x00025354
   1478c:	20002590 	.word	0x20002590
   14790:	000239d6 	.word	0x000239d6

00014794 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   14794:	b148      	cbz	r0, 147aa <log_is_strdup+0x16>
   14796:	4b05      	ldr	r3, [pc, #20]	; (147ac <log_is_strdup+0x18>)
   14798:	4298      	cmp	r0, r3
   1479a:	d305      	bcc.n	147a8 <log_is_strdup+0x14>
   1479c:	33a0      	adds	r3, #160	; 0xa0
   1479e:	4298      	cmp	r0, r3
   147a0:	bf2c      	ite	cs
   147a2:	2000      	movcs	r0, #0
   147a4:	2001      	movcc	r0, #1
   147a6:	4770      	bx	lr
   147a8:	2000      	movs	r0, #0
}
   147aa:	4770      	bx	lr
   147ac:	200070d0 	.word	0x200070d0

000147b0 <z_impl_log_process>:
{
   147b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   147b4:	4b4c      	ldr	r3, [pc, #304]	; (148e8 <z_impl_log_process+0x138>)
   147b6:	781b      	ldrb	r3, [r3, #0]
{
   147b8:	b085      	sub	sp, #20
   147ba:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   147bc:	b903      	cbnz	r3, 147c0 <z_impl_log_process+0x10>
   147be:	b360      	cbz	r0, 1481a <z_impl_log_process+0x6a>
   147c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   147c4:	f3ef 8611 	mrs	r6, BASEPRI
   147c8:	f383 8811 	msr	BASEPRI, r3
   147cc:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   147d0:	4846      	ldr	r0, [pc, #280]	; (148ec <z_impl_log_process+0x13c>)
   147d2:	f00b fad5 	bl	1fd80 <log_list_head_get>
   147d6:	4605      	mov	r5, r0
	__asm__ volatile(
   147d8:	f386 8811 	msr	BASEPRI, r6
   147dc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   147e0:	b178      	cbz	r0, 14802 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   147e2:	f3bf 8f5b 	dmb	ish
   147e6:	4b42      	ldr	r3, [pc, #264]	; (148f0 <z_impl_log_process+0x140>)
   147e8:	e853 2f00 	ldrex	r2, [r3]
   147ec:	3a01      	subs	r2, #1
   147ee:	e843 2100 	strex	r1, r2, [r3]
   147f2:	2900      	cmp	r1, #0
   147f4:	d1f8      	bne.n	147e8 <z_impl_log_process+0x38>
   147f6:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   147fa:	b194      	cbz	r4, 14822 <z_impl_log_process+0x72>
	log_msg_put(msg);
   147fc:	4628      	mov	r0, r5
   147fe:	f00b fb80 	bl	1ff02 <log_msg_put>
	if (!bypass && dropped_cnt) {
   14802:	b924      	cbnz	r4, 1480e <z_impl_log_process+0x5e>
   14804:	4b3b      	ldr	r3, [pc, #236]	; (148f4 <z_impl_log_process+0x144>)
   14806:	681b      	ldr	r3, [r3, #0]
   14808:	b10b      	cbz	r3, 1480e <z_impl_log_process+0x5e>
		dropped_notify();
   1480a:	f7ff ff13 	bl	14634 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1480e:	4837      	ldr	r0, [pc, #220]	; (148ec <z_impl_log_process+0x13c>)
   14810:	f00b fab4 	bl	1fd7c <log_list_head_peek>
   14814:	1e04      	subs	r4, r0, #0
   14816:	bf18      	it	ne
   14818:	2401      	movne	r4, #1
}
   1481a:	4620      	mov	r0, r4
   1481c:	b005      	add	sp, #20
   1481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   14822:	4b35      	ldr	r3, [pc, #212]	; (148f8 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   14824:	781b      	ldrb	r3, [r3, #0]
   14826:	b9cb      	cbnz	r3, 1485c <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   14828:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1482a:	07db      	lsls	r3, r3, #31
   1482c:	d416      	bmi.n	1485c <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
   1482e:	f00b fb7b 	bl	1ff28 <log_msg_str_get>
   14832:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   14834:	4628      	mov	r0, r5
   14836:	f00b fb42 	bl	1febe <log_msg_nargs_get>
   1483a:	4601      	mov	r1, r0
   1483c:	4640      	mov	r0, r8
   1483e:	f00b fab2 	bl	1fda6 <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14842:	4f2e      	ldr	r7, [pc, #184]	; (148fc <z_impl_log_process+0x14c>)
   14844:	4b2e      	ldr	r3, [pc, #184]	; (14900 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   14846:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1491c <z_impl_log_process+0x16c>
   1484a:	1bdb      	subs	r3, r3, r7
   1484c:	08db      	lsrs	r3, r3, #3
   1484e:	9303      	str	r3, [sp, #12]
   14850:	4b2c      	ldr	r3, [pc, #176]	; (14904 <z_impl_log_process+0x154>)
   14852:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   14854:	4606      	mov	r6, r0
   14856:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   1485a:	b936      	cbnz	r6, 1486a <z_impl_log_process+0xba>
   1485c:	4e2a      	ldr	r6, [pc, #168]	; (14908 <z_impl_log_process+0x158>)
   1485e:	4f2b      	ldr	r7, [pc, #172]	; (1490c <z_impl_log_process+0x15c>)
   14860:	1bbf      	subs	r7, r7, r6
   14862:	113f      	asrs	r7, r7, #4
   14864:	f04f 0800 	mov.w	r8, #0
   14868:	e03a      	b.n	148e0 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
   1486a:	fab6 f186 	clz	r1, r6
   1486e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   14872:	4649      	mov	r1, r9
   14874:	4628      	mov	r0, r5
   14876:	f00b fb25 	bl	1fec4 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   1487a:	4b25      	ldr	r3, [pc, #148]	; (14910 <z_impl_log_process+0x160>)
   1487c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   1487e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14880:	d302      	bcc.n	14888 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   14882:	4b24      	ldr	r3, [pc, #144]	; (14914 <z_impl_log_process+0x164>)
   14884:	4298      	cmp	r0, r3
   14886:	d31a      	bcc.n	148be <z_impl_log_process+0x10e>
   14888:	4608      	mov	r0, r1
   1488a:	f7ff ff83 	bl	14794 <log_is_strdup>
   1488e:	4602      	mov	r2, r0
   14890:	b9a8      	cbnz	r0, 148be <z_impl_log_process+0x10e>
   14892:	4b21      	ldr	r3, [pc, #132]	; (14918 <z_impl_log_process+0x168>)
   14894:	4299      	cmp	r1, r3
   14896:	d012      	beq.n	148be <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
   14898:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1489a:	9903      	ldr	r1, [sp, #12]
   1489c:	f3c3 1389 	ubfx	r3, r3, #6, #10
   148a0:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   148a2:	bf38      	it	cc
   148a4:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   148a8:	ea4f 138a 	mov.w	r3, sl, lsl #6
   148ac:	f043 0301 	orr.w	r3, r3, #1
   148b0:	f8ad 3000 	strh.w	r3, [sp]
   148b4:	4649      	mov	r1, r9
   148b6:	4643      	mov	r3, r8
   148b8:	4658      	mov	r0, fp
   148ba:	f00b face 	bl	1fe5a <log_3>
		mask &= ~BIT(idx);
   148be:	2101      	movs	r1, #1
   148c0:	fa01 f109 	lsl.w	r1, r1, r9
   148c4:	ea26 0601 	bic.w	r6, r6, r1
   148c8:	e7c7      	b.n	1485a <z_impl_log_process+0xaa>
	return backend->cb->active;
   148ca:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   148cc:	795b      	ldrb	r3, [r3, #5]
   148ce:	b123      	cbz	r3, 148da <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
   148d0:	6833      	ldr	r3, [r6, #0]
   148d2:	4629      	mov	r1, r5
   148d4:	681b      	ldr	r3, [r3, #0]
   148d6:	4630      	mov	r0, r6
   148d8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   148da:	f108 0801 	add.w	r8, r8, #1
   148de:	3610      	adds	r6, #16
   148e0:	45b8      	cmp	r8, r7
   148e2:	dbf2      	blt.n	148ca <z_impl_log_process+0x11a>
   148e4:	e78a      	b.n	147fc <z_impl_log_process+0x4c>
   148e6:	bf00      	nop
   148e8:	2000387e 	.word	0x2000387e
   148ec:	20002588 	.word	0x20002588
   148f0:	2000257c 	.word	0x2000257c
   148f4:	20002580 	.word	0x20002580
   148f8:	2000387f 	.word	0x2000387f
   148fc:	00022cf0 	.word	0x00022cf0
   14900:	00022db0 	.word	0x00022db0
   14904:	00022d68 	.word	0x00022d68
   14908:	00022db0 	.word	0x00022db0
   1490c:	00022db0 	.word	0x00022db0
   14910:	00022a94 	.word	0x00022a94
   14914:	00025354 	.word	0x00025354
   14918:	000239d6 	.word	0x000239d6
   1491c:	000239f0 	.word	0x000239f0

00014920 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   14920:	4b29      	ldr	r3, [pc, #164]	; (149c8 <msg_finalize+0xa8>)
{
   14922:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   14924:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   14926:	8141      	strh	r1, [r0, #10]
{
   14928:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1492a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1492c:	4d27      	ldr	r5, [pc, #156]	; (149cc <msg_finalize+0xac>)
   1492e:	60e0      	str	r0, [r4, #12]
   14930:	f3bf 8f5b 	dmb	ish
   14934:	e855 3f00 	ldrex	r3, [r5]
   14938:	3301      	adds	r3, #1
   1493a:	e845 3200 	strex	r2, r3, [r5]
   1493e:	2a00      	cmp	r2, #0
   14940:	d1f8      	bne.n	14934 <msg_finalize+0x14>
   14942:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   14946:	f04f 0340 	mov.w	r3, #64	; 0x40
   1494a:	f3ef 8611 	mrs	r6, BASEPRI
   1494e:	f383 8811 	msr	BASEPRI, r3
   14952:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   14956:	481e      	ldr	r0, [pc, #120]	; (149d0 <msg_finalize+0xb0>)
   14958:	4621      	mov	r1, r4
   1495a:	f00b fa05 	bl	1fd68 <log_list_add_tail>
	__asm__ volatile(
   1495e:	f386 8811 	msr	BASEPRI, r6
   14962:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   14966:	4b1b      	ldr	r3, [pc, #108]	; (149d4 <msg_finalize+0xb4>)
   14968:	781b      	ldrb	r3, [r3, #0]
   1496a:	b183      	cbz	r3, 1498e <msg_finalize+0x6e>
	__asm__ volatile(
   1496c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14970:	f3ef 8411 	mrs	r4, BASEPRI
   14974:	f383 8811 	msr	BASEPRI, r3
   14978:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   1497c:	2000      	movs	r0, #0
   1497e:	f7ff ff17 	bl	147b0 <z_impl_log_process>
	__asm__ volatile(
   14982:	f384 8811 	msr	BASEPRI, r4
   14986:	f3bf 8f6f 	isb	sy
}
   1498a:	b002      	add	sp, #8
   1498c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1498e:	4a12      	ldr	r2, [pc, #72]	; (149d8 <msg_finalize+0xb8>)
   14990:	682b      	ldr	r3, [r5, #0]
   14992:	6812      	ldr	r2, [r2, #0]
   14994:	2a00      	cmp	r2, #0
   14996:	d0f8      	beq.n	1498a <msg_finalize+0x6a>
   14998:	2b01      	cmp	r3, #1
   1499a:	d10a      	bne.n	149b2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   1499c:	2200      	movs	r2, #0
   1499e:	2300      	movs	r3, #0
   149a0:	e9cd 2300 	strd	r2, r3, [sp]
   149a4:	480d      	ldr	r0, [pc, #52]	; (149dc <msg_finalize+0xbc>)
   149a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   149aa:	2300      	movs	r3, #0
   149ac:	f009 fddc 	bl	1e568 <z_impl_k_timer_start>
   149b0:	e7eb      	b.n	1498a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   149b2:	2b0a      	cmp	r3, #10
   149b4:	d1e9      	bne.n	1498a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   149b6:	4809      	ldr	r0, [pc, #36]	; (149dc <msg_finalize+0xbc>)
   149b8:	f00d fecb 	bl	22752 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   149bc:	4808      	ldr	r0, [pc, #32]	; (149e0 <msg_finalize+0xc0>)
}
   149be:	b002      	add	sp, #8
   149c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   149c4:	f009 ba8c 	b.w	1dee0 <z_impl_k_sem_give>
   149c8:	2000053c 	.word	0x2000053c
   149cc:	2000257c 	.word	0x2000257c
   149d0:	20002588 	.word	0x20002588
   149d4:	2000387f 	.word	0x2000387f
   149d8:	200025ac 	.word	0x200025ac
   149dc:	20001e20 	.word	0x20001e20
   149e0:	20000940 	.word	0x20000940

000149e4 <log_process_thread_func>:
{
   149e4:	b510      	push	{r4, lr}
	log_init();
   149e6:	f7ff fe75 	bl	146d4 <log_init>
	return z_impl_k_current_get();
   149ea:	f009 fa73 	bl	1ded4 <z_impl_k_current_get>
	proc_tid = process_tid;
   149ee:	4b0c      	ldr	r3, [pc, #48]	; (14a20 <log_process_thread_func+0x3c>)
   149f0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   149f2:	b130      	cbz	r0, 14a02 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   149f4:	4b0b      	ldr	r3, [pc, #44]	; (14a24 <log_process_thread_func+0x40>)
	    process_tid &&
   149f6:	681b      	ldr	r3, [r3, #0]
   149f8:	2b09      	cmp	r3, #9
   149fa:	dd02      	ble.n	14a02 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   149fc:	480a      	ldr	r0, [pc, #40]	; (14a28 <log_process_thread_func+0x44>)
   149fe:	f009 fa6f 	bl	1dee0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   14a02:	4c09      	ldr	r4, [pc, #36]	; (14a28 <log_process_thread_func+0x44>)
   14a04:	2000      	movs	r0, #0
   14a06:	f7ff fed3 	bl	147b0 <z_impl_log_process>
		if (log_process(false) == false) {
   14a0a:	2800      	cmp	r0, #0
   14a0c:	d1fa      	bne.n	14a04 <log_process_thread_func+0x20>
   14a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a16:	4620      	mov	r0, r4
   14a18:	f009 fa88 	bl	1df2c <z_impl_k_sem_take>
   14a1c:	e7f2      	b.n	14a04 <log_process_thread_func+0x20>
   14a1e:	bf00      	nop
   14a20:	200025ac 	.word	0x200025ac
   14a24:	2000257c 	.word	0x2000257c
   14a28:	20000940 	.word	0x20000940

00014a2c <z_impl_log_panic>:
{
   14a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   14a2e:	4f0e      	ldr	r7, [pc, #56]	; (14a68 <z_impl_log_panic+0x3c>)
   14a30:	783d      	ldrb	r5, [r7, #0]
   14a32:	b975      	cbnz	r5, 14a52 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   14a34:	4c0d      	ldr	r4, [pc, #52]	; (14a6c <z_impl_log_panic+0x40>)
   14a36:	4e0e      	ldr	r6, [pc, #56]	; (14a70 <z_impl_log_panic+0x44>)
	log_init();
   14a38:	f7ff fe4c 	bl	146d4 <log_init>
   14a3c:	1b36      	subs	r6, r6, r4
   14a3e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14a40:	42b5      	cmp	r5, r6
   14a42:	db07      	blt.n	14a54 <z_impl_log_panic+0x28>
   14a44:	2000      	movs	r0, #0
   14a46:	f7ff feb3 	bl	147b0 <z_impl_log_process>
		while (log_process(false) == true) {
   14a4a:	2800      	cmp	r0, #0
   14a4c:	d1fa      	bne.n	14a44 <z_impl_log_panic+0x18>
	panic_mode = true;
   14a4e:	2301      	movs	r3, #1
   14a50:	703b      	strb	r3, [r7, #0]
}
   14a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   14a54:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   14a56:	795b      	ldrb	r3, [r3, #5]
   14a58:	b11b      	cbz	r3, 14a62 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   14a5a:	6823      	ldr	r3, [r4, #0]
   14a5c:	4620      	mov	r0, r4
   14a5e:	691b      	ldr	r3, [r3, #16]
   14a60:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14a62:	3501      	adds	r5, #1
   14a64:	3410      	adds	r4, #16
   14a66:	e7eb      	b.n	14a40 <z_impl_log_panic+0x14>
   14a68:	2000387f 	.word	0x2000387f
   14a6c:	00022db0 	.word	0x00022db0
   14a70:	00022db0 	.word	0x00022db0

00014a74 <log_free>:
{
   14a74:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   14a76:	3804      	subs	r0, #4
   14a78:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14a7a:	f3bf 8f5b 	dmb	ish
   14a7e:	e850 3f00 	ldrex	r3, [r0]
   14a82:	1e5a      	subs	r2, r3, #1
   14a84:	e840 2100 	strex	r1, r2, [r0]
   14a88:	2900      	cmp	r1, #0
   14a8a:	d1f8      	bne.n	14a7e <log_free+0xa>
   14a8c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   14a90:	2b01      	cmp	r3, #1
   14a92:	d103      	bne.n	14a9c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   14a94:	4803      	ldr	r0, [pc, #12]	; (14aa4 <log_free+0x30>)
   14a96:	a901      	add	r1, sp, #4
   14a98:	f008 fd64 	bl	1d564 <k_mem_slab_free>
}
   14a9c:	b003      	add	sp, #12
   14a9e:	f85d fb04 	ldr.w	pc, [sp], #4
   14aa2:	bf00      	nop
   14aa4:	20002590 	.word	0x20002590

00014aa8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   14aa8:	2320      	movs	r3, #32
   14aaa:	4902      	ldr	r1, [pc, #8]	; (14ab4 <log_msg_pool_init+0xc>)
   14aac:	4802      	ldr	r0, [pc, #8]	; (14ab8 <log_msg_pool_init+0x10>)
   14aae:	461a      	mov	r2, r3
   14ab0:	f00d bb53 	b.w	2215a <k_mem_slab_init>
   14ab4:	20007170 	.word	0x20007170
   14ab8:	200025b0 	.word	0x200025b0

00014abc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   14abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   14abe:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   14ac0:	4d09      	ldr	r5, [pc, #36]	; (14ae8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   14ac2:	9301      	str	r3, [sp, #4]
   14ac4:	2001      	movs	r0, #1
   14ac6:	f7ff fe73 	bl	147b0 <z_impl_log_process>
   14aca:	4604      	mov	r4, r0
			log_dropped();
   14acc:	f7ff fdd8 	bl	14680 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   14ad0:	2200      	movs	r2, #0
   14ad2:	2300      	movs	r3, #0
   14ad4:	a901      	add	r1, sp, #4
   14ad6:	4628      	mov	r0, r5
   14ad8:	f008 fd12 	bl	1d500 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   14adc:	b108      	cbz	r0, 14ae2 <log_msg_no_space_handle+0x26>
   14ade:	2c00      	cmp	r4, #0
   14ae0:	d1f0      	bne.n	14ac4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   14ae2:	9801      	ldr	r0, [sp, #4]
   14ae4:	b003      	add	sp, #12
   14ae6:	bd30      	pop	{r4, r5, pc}
   14ae8:	200025b0 	.word	0x200025b0

00014aec <log_msg_chunk_alloc>:
{
   14aec:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   14aee:	2300      	movs	r3, #0
   14af0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   14af2:	4807      	ldr	r0, [pc, #28]	; (14b10 <log_msg_chunk_alloc+0x24>)
   14af4:	2200      	movs	r2, #0
   14af6:	2300      	movs	r3, #0
   14af8:	a901      	add	r1, sp, #4
   14afa:	f008 fd01 	bl	1d500 <k_mem_slab_alloc>
	if (err != 0) {
   14afe:	b110      	cbz	r0, 14b06 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   14b00:	f7ff ffdc 	bl	14abc <log_msg_no_space_handle>
   14b04:	9001      	str	r0, [sp, #4]
}
   14b06:	9801      	ldr	r0, [sp, #4]
   14b08:	b003      	add	sp, #12
   14b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b0e:	bf00      	nop
   14b10:	200025b0 	.word	0x200025b0

00014b14 <msg_free>:
{
   14b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   14b16:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   14b18:	7a45      	ldrb	r5, [r0, #9]
{
   14b1a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   14b1c:	092d      	lsrs	r5, r5, #4
{
   14b1e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   14b20:	07d8      	lsls	r0, r3, #31
   14b22:	d41c      	bmi.n	14b5e <msg_free+0x4a>
   14b24:	b1dd      	cbz	r5, 14b5e <msg_free+0x4a>
		uint32_t smask = 0;
   14b26:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   14b28:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   14b2a:	9801      	ldr	r0, [sp, #4]
   14b2c:	4631      	mov	r1, r6
   14b2e:	f00b f9c9 	bl	1fec4 <log_msg_arg_get>
   14b32:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   14b34:	f7ff fe2e 	bl	14794 <log_is_strdup>
   14b38:	b170      	cbz	r0, 14b58 <msg_free+0x44>
				if (smask == 0) {
   14b3a:	b934      	cbnz	r4, 14b4a <msg_free+0x36>
					smask = z_log_get_s_mask(
   14b3c:	9b01      	ldr	r3, [sp, #4]
   14b3e:	4629      	mov	r1, r5
   14b40:	6918      	ldr	r0, [r3, #16]
   14b42:	f00b f930 	bl	1fda6 <z_log_get_s_mask>
					if (smask == 0) {
   14b46:	4604      	mov	r4, r0
   14b48:	b148      	cbz	r0, 14b5e <msg_free+0x4a>
				if (smask & BIT(i)) {
   14b4a:	fa24 f306 	lsr.w	r3, r4, r6
   14b4e:	07d9      	lsls	r1, r3, #31
   14b50:	d502      	bpl.n	14b58 <msg_free+0x44>
					log_free(buf);
   14b52:	4638      	mov	r0, r7
   14b54:	f7ff ff8e 	bl	14a74 <log_free>
		for (i = 0; i < nargs; i++) {
   14b58:	3601      	adds	r6, #1
   14b5a:	42ae      	cmp	r6, r5
   14b5c:	d3e5      	bcc.n	14b2a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   14b5e:	9b01      	ldr	r3, [sp, #4]
   14b60:	7a1a      	ldrb	r2, [r3, #8]
   14b62:	0792      	lsls	r2, r2, #30
   14b64:	d504      	bpl.n	14b70 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   14b66:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   14b68:	4c08      	ldr	r4, [pc, #32]	; (14b8c <msg_free+0x78>)
   14b6a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   14b6c:	9b03      	ldr	r3, [sp, #12]
   14b6e:	b92b      	cbnz	r3, 14b7c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   14b70:	4806      	ldr	r0, [pc, #24]	; (14b8c <msg_free+0x78>)
   14b72:	a901      	add	r1, sp, #4
   14b74:	f008 fcf6 	bl	1d564 <k_mem_slab_free>
}
   14b78:	b005      	add	sp, #20
   14b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   14b7c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   14b7e:	a903      	add	r1, sp, #12
   14b80:	4620      	mov	r0, r4
   14b82:	f008 fcef 	bl	1d564 <k_mem_slab_free>
		cont = next;
   14b86:	9503      	str	r5, [sp, #12]
   14b88:	e7f0      	b.n	14b6c <msg_free+0x58>
   14b8a:	bf00      	nop
   14b8c:	200025b0 	.word	0x200025b0

00014b90 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14b90:	4a08      	ldr	r2, [pc, #32]	; (14bb4 <log_output_timestamp_freq_set+0x24>)
{
   14b92:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   14b94:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14b96:	4c08      	ldr	r4, [pc, #32]	; (14bb8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   14b98:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   14b9a:	2100      	movs	r1, #0
   14b9c:	42a0      	cmp	r0, r4
   14b9e:	d804      	bhi.n	14baa <log_output_timestamp_freq_set+0x1a>
   14ba0:	b101      	cbz	r1, 14ba4 <log_output_timestamp_freq_set+0x14>
   14ba2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   14ba4:	4b05      	ldr	r3, [pc, #20]	; (14bbc <log_output_timestamp_freq_set+0x2c>)
   14ba6:	6018      	str	r0, [r3, #0]
}
   14ba8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   14baa:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14bac:	005b      	lsls	r3, r3, #1
   14bae:	2101      	movs	r1, #1
   14bb0:	e7f4      	b.n	14b9c <log_output_timestamp_freq_set+0xc>
   14bb2:	bf00      	nop
   14bb4:	200025d0 	.word	0x200025d0
   14bb8:	000f4240 	.word	0x000f4240
   14bbc:	200025cc 	.word	0x200025cc

00014bc0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   14bc0:	b508      	push	{r3, lr}
   14bc2:	4604      	mov	r4, r0
	__asm__ volatile(
   14bc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   14bc8:	f3ef 8311 	mrs	r3, BASEPRI
   14bcc:	f382 8811 	msr	BASEPRI, r2
   14bd0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   14bd4:	f00b fae6 	bl	201a4 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   14bd8:	4620      	mov	r0, r4
   14bda:	f001 f91b 	bl	15e14 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   14bde:	4803      	ldr	r0, [pc, #12]	; (14bec <sys_reboot+0x2c>)
   14be0:	f00a fcd8 	bl	1f594 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14be4:	f000 fd10 	bl	15608 <arch_cpu_idle>
   14be8:	e7fc      	b.n	14be4 <sys_reboot+0x24>
   14bea:	bf00      	nop
   14bec:	00023a39 	.word	0x00023a39

00014bf0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14bf0:	b570      	push	{r4, r5, r6, lr}
   14bf2:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   14bf4:	480d      	ldr	r0, [pc, #52]	; (14c2c <onoff_stop+0x3c>)
   14bf6:	1a23      	subs	r3, r4, r0
   14bf8:	109a      	asrs	r2, r3, #2
   14bfa:	4b0d      	ldr	r3, [pc, #52]	; (14c30 <onoff_stop+0x40>)
   14bfc:	4353      	muls	r3, r2
   14bfe:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   14c00:	250c      	movs	r5, #12
   14c02:	435d      	muls	r5, r3
   14c04:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   14c08:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   14c0a:	4418      	add	r0, r3
   14c0c:	2140      	movs	r1, #64	; 0x40
   14c0e:	f00b fa3d 	bl	2008c <set_off_state>
	if (err < 0) {
   14c12:	1e01      	subs	r1, r0, #0
   14c14:	db04      	blt.n	14c20 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   14c16:	4b07      	ldr	r3, [pc, #28]	; (14c34 <onoff_stop+0x44>)
   14c18:	442b      	add	r3, r5
   14c1a:	685b      	ldr	r3, [r3, #4]
   14c1c:	4798      	blx	r3
	return 0;
   14c1e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   14c20:	4620      	mov	r0, r4
   14c22:	4633      	mov	r3, r6
}
   14c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   14c28:	4718      	bx	r3
   14c2a:	bf00      	nop
   14c2c:	200025e4 	.word	0x200025e4
   14c30:	b6db6db7 	.word	0xb6db6db7
   14c34:	00022efc 	.word	0x00022efc

00014c38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14c3c:	4c0f      	ldr	r4, [pc, #60]	; (14c7c <onoff_start+0x44>)
   14c3e:	4d10      	ldr	r5, [pc, #64]	; (14c80 <onoff_start+0x48>)
   14c40:	1b03      	subs	r3, r0, r4
   14c42:	109b      	asrs	r3, r3, #2
   14c44:	435d      	muls	r5, r3
   14c46:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   14c48:	250c      	movs	r5, #12
   14c4a:	435d      	muls	r5, r3
{
   14c4c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   14c4e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   14c52:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   14c54:	4420      	add	r0, r4
   14c56:	2140      	movs	r1, #64	; 0x40
   14c58:	f00b fa31 	bl	200be <set_starting_state>
	if (err < 0) {
   14c5c:	1e01      	subs	r1, r0, #0
   14c5e:	db08      	blt.n	14c72 <onoff_start+0x3a>
	subdata->cb = cb;
   14c60:	4b08      	ldr	r3, [pc, #32]	; (14c84 <onoff_start+0x4c>)
   14c62:	442c      	add	r4, r5
	subdata->user_data = user_data;
   14c64:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   14c68:	4b07      	ldr	r3, [pc, #28]	; (14c88 <onoff_start+0x50>)
   14c6a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   14c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   14c70:	4718      	bx	r3
		notify(mgr, err);
   14c72:	4638      	mov	r0, r7
   14c74:	4633      	mov	r3, r6
}
   14c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   14c7a:	4718      	bx	r3
   14c7c:	200025e4 	.word	0x200025e4
   14c80:	b6db6db7 	.word	0xb6db6db7
   14c84:	00020121 	.word	0x00020121
   14c88:	00022efc 	.word	0x00022efc

00014c8c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14c8c:	2200      	movs	r2, #0
{
   14c8e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14c90:	2101      	movs	r1, #1
{
   14c92:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14c94:	4610      	mov	r0, r2
   14c96:	f000 fc39 	bl	1550c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   14c9a:	2000      	movs	r0, #0
   14c9c:	f000 fc26 	bl	154ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14ca0:	480f      	ldr	r0, [pc, #60]	; (14ce0 <clk_init+0x54>)
   14ca2:	f007 fbf3 	bl	1c48c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14ca6:	4b0f      	ldr	r3, [pc, #60]	; (14ce4 <clk_init+0x58>)
   14ca8:	4298      	cmp	r0, r3
   14caa:	d115      	bne.n	14cd8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14cac:	f00d f901 	bl	21eb2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   14cb0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   14cb2:	490d      	ldr	r1, [pc, #52]	; (14ce8 <clk_init+0x5c>)
   14cb4:	4630      	mov	r0, r6
   14cb6:	f00a fcd6 	bl	1f666 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14cba:	2800      	cmp	r0, #0
   14cbc:	db0b      	blt.n	14cd6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14cbe:	2501      	movs	r5, #1
   14cc0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   14cc2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14cc4:	4908      	ldr	r1, [pc, #32]	; (14ce8 <clk_init+0x5c>)
   14cc6:	f104 001c 	add.w	r0, r4, #28
   14cca:	f00a fccc 	bl	1f666 <onoff_manager_init>
		if (err < 0) {
   14cce:	2800      	cmp	r0, #0
   14cd0:	db01      	blt.n	14cd6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14cd2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   14cd4:	2000      	movs	r0, #0
}
   14cd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14cd8:	f06f 0004 	mvn.w	r0, #4
   14cdc:	e7fb      	b.n	14cd6 <clk_init+0x4a>
   14cde:	bf00      	nop
   14ce0:	00014d21 	.word	0x00014d21
   14ce4:	0bad0000 	.word	0x0bad0000
   14ce8:	00022f14 	.word	0x00022f14

00014cec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14cec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14cee:	230c      	movs	r3, #12
   14cf0:	4809      	ldr	r0, [pc, #36]	; (14d18 <clkstarted_handle.constprop.0+0x2c>)
   14cf2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   14cf4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14cf6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   14cf8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   14cfc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   14cfe:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   14d00:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   14d02:	4418      	add	r0, r3
   14d04:	f00b f9f9 	bl	200fa <set_on_state>
	if (callback) {
   14d08:	b12d      	cbz	r5, 14d16 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14d0a:	4632      	mov	r2, r6
   14d0c:	462b      	mov	r3, r5
   14d0e:	4803      	ldr	r0, [pc, #12]	; (14d1c <clkstarted_handle.constprop.0+0x30>)
}
   14d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   14d14:	4718      	bx	r3
}
   14d16:	bd70      	pop	{r4, r5, r6, pc}
   14d18:	200025e4 	.word	0x200025e4
   14d1c:	200007cc 	.word	0x200007cc

00014d20 <clock_event_handler>:
	switch (event) {
   14d20:	b110      	cbz	r0, 14d28 <clock_event_handler+0x8>
   14d22:	2801      	cmp	r0, #1
   14d24:	d004      	beq.n	14d30 <clock_event_handler+0x10>
   14d26:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14d28:	4b03      	ldr	r3, [pc, #12]	; (14d38 <clock_event_handler+0x18>)
   14d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14d2c:	075b      	lsls	r3, r3, #29
   14d2e:	d101      	bne.n	14d34 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14d30:	f7ff bfdc 	b.w	14cec <clkstarted_handle.constprop.0>
}
   14d34:	4770      	bx	lr
   14d36:	bf00      	nop
   14d38:	200025e4 	.word	0x200025e4

00014d3c <generic_hfclk_start>:
{
   14d3c:	b508      	push	{r3, lr}
   14d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14d42:	f3ef 8111 	mrs	r1, BASEPRI
   14d46:	f383 8811 	msr	BASEPRI, r3
   14d4a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14d4e:	4a12      	ldr	r2, [pc, #72]	; (14d98 <generic_hfclk_start+0x5c>)
   14d50:	6813      	ldr	r3, [r2, #0]
   14d52:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   14d56:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14d5a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14d5c:	d00c      	beq.n	14d78 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14d62:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14d66:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14d6a:	f013 0301 	ands.w	r3, r3, #1
   14d6e:	d003      	beq.n	14d78 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   14d70:	480a      	ldr	r0, [pc, #40]	; (14d9c <generic_hfclk_start+0x60>)
   14d72:	f00b f9c2 	bl	200fa <set_on_state>
			already_started = true;
   14d76:	2301      	movs	r3, #1
	__asm__ volatile(
   14d78:	f381 8811 	msr	BASEPRI, r1
   14d7c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14d80:	b123      	cbz	r3, 14d8c <generic_hfclk_start+0x50>
}
   14d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14d86:	2000      	movs	r0, #0
   14d88:	f7ff bfb0 	b.w	14cec <clkstarted_handle.constprop.0>
}
   14d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14d90:	2001      	movs	r0, #1
   14d92:	f007 bb6b 	b.w	1c46c <nrfx_clock_start>
   14d96:	bf00      	nop
   14d98:	20002634 	.word	0x20002634
   14d9c:	20002624 	.word	0x20002624

00014da0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14da0:	4b09      	ldr	r3, [pc, #36]	; (14dc8 <generic_hfclk_stop+0x28>)
   14da2:	f3bf 8f5b 	dmb	ish
   14da6:	e853 2f00 	ldrex	r2, [r3]
   14daa:	f022 0102 	bic.w	r1, r2, #2
   14dae:	e843 1000 	strex	r0, r1, [r3]
   14db2:	2800      	cmp	r0, #0
   14db4:	d1f7      	bne.n	14da6 <generic_hfclk_stop+0x6>
   14db6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14dba:	07d3      	lsls	r3, r2, #31
   14dbc:	d402      	bmi.n	14dc4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14dbe:	2001      	movs	r0, #1
   14dc0:	f00d b872 	b.w	21ea8 <nrfx_clock_stop>
}
   14dc4:	4770      	bx	lr
   14dc6:	bf00      	nop
   14dc8:	20002634 	.word	0x20002634

00014dcc <api_blocking_start>:
{
   14dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14dce:	2200      	movs	r2, #0
   14dd0:	2301      	movs	r3, #1
   14dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14dd6:	ab04      	add	r3, sp, #16
   14dd8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14ddc:	4a09      	ldr	r2, [pc, #36]	; (14e04 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14dde:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14de2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14de4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14de8:	f00b f9c0 	bl	2016c <api_start>
	if (err < 0) {
   14dec:	2800      	cmp	r0, #0
   14dee:	db05      	blt.n	14dfc <api_blocking_start+0x30>
   14df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14df4:	2300      	movs	r3, #0
   14df6:	4668      	mov	r0, sp
   14df8:	f009 f898 	bl	1df2c <z_impl_k_sem_take>
}
   14dfc:	b007      	add	sp, #28
   14dfe:	f85d fb04 	ldr.w	pc, [sp], #4
   14e02:	bf00      	nop
   14e04:	0002013f 	.word	0x0002013f

00014e08 <z_nrf_clock_control_lf_on>:
{
   14e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14e0c:	493a      	ldr	r1, [pc, #232]	; (14ef8 <z_nrf_clock_control_lf_on+0xf0>)
   14e0e:	f3bf 8f5b 	dmb	ish
   14e12:	4606      	mov	r6, r0
   14e14:	2201      	movs	r2, #1
   14e16:	e851 3f00 	ldrex	r3, [r1]
   14e1a:	e841 2000 	strex	r0, r2, [r1]
   14e1e:	2800      	cmp	r0, #0
   14e20:	d1f9      	bne.n	14e16 <z_nrf_clock_control_lf_on+0xe>
   14e22:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   14e26:	b933      	cbnz	r3, 14e36 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14e28:	4934      	ldr	r1, [pc, #208]	; (14efc <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   14e2a:	4835      	ldr	r0, [pc, #212]	; (14f00 <z_nrf_clock_control_lf_on+0xf8>)
   14e2c:	604b      	str	r3, [r1, #4]
   14e2e:	60cb      	str	r3, [r1, #12]
   14e30:	608a      	str	r2, [r1, #8]
   14e32:	f00a fc2b 	bl	1f68c <onoff_request>
	switch (start_mode) {
   14e36:	1e73      	subs	r3, r6, #1
   14e38:	2b01      	cmp	r3, #1
   14e3a:	d832      	bhi.n	14ea2 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14e3c:	2e01      	cmp	r6, #1
   14e3e:	d107      	bne.n	14e50 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14e44:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   14e48:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14e4c:	2b01      	cmp	r3, #1
   14e4e:	d028      	beq.n	14ea2 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14e50:	f00d fb7e 	bl	22550 <k_is_in_isr>
   14e54:	4604      	mov	r4, r0
   14e56:	b918      	cbnz	r0, 14e60 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   14e58:	4b2a      	ldr	r3, [pc, #168]	; (14f04 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d144      	bne.n	14eea <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   14e60:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e64:	f3ef 8511 	mrs	r5, BASEPRI
   14e68:	f383 8811 	msr	BASEPRI, r3
   14e6c:	f3bf 8f6f 	isb	sy
   14e70:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14e72:	4f25      	ldr	r7, [pc, #148]	; (14f08 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e74:	f8df 8094 	ldr.w	r8, [pc, #148]	; 14f0c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e78:	f8df 9094 	ldr.w	r9, [pc, #148]	; 14f10 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14e80:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14e84:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   14e88:	03d2      	lsls	r2, r2, #15
   14e8a:	d50c      	bpl.n	14ea6 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14e8c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14e90:	2b01      	cmp	r3, #1
   14e92:	d001      	beq.n	14e98 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14e94:	2e01      	cmp	r6, #1
   14e96:	d106      	bne.n	14ea6 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   14e98:	b30c      	cbz	r4, 14ede <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   14e9a:	f385 8811 	msr	BASEPRI, r5
   14e9e:	f3bf 8f6f 	isb	sy
}
   14ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   14ea6:	b1ac      	cbz	r4, 14ed4 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14ea8:	4628      	mov	r0, r5
   14eaa:	f000 fbbb 	bl	15624 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14eb2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14eb6:	2b00      	cmp	r3, #0
   14eb8:	d1e0      	bne.n	14e7c <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14eba:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   14ebc:	2900      	cmp	r1, #0
   14ebe:	d0dd      	beq.n	14e7c <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ec0:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14ec2:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14ec4:	2301      	movs	r3, #1
   14ec6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   14eca:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ece:	f8c9 3000 	str.w	r3, [r9]
}
   14ed2:	e7d3      	b.n	14e7c <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   14ed4:	2100      	movs	r1, #0
   14ed6:	2021      	movs	r0, #33	; 0x21
   14ed8:	f008 ffda 	bl	1de90 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14edc:	e7e7      	b.n	14eae <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   14ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14ee2:	2202      	movs	r2, #2
   14ee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14ee8:	e7db      	b.n	14ea2 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   14eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14eee:	2202      	movs	r2, #2
   14ef0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   14ef4:	4605      	mov	r5, r0
}
   14ef6:	e7bc      	b.n	14e72 <z_nrf_clock_control_lf_on+0x6a>
   14ef8:	20002638 	.word	0x20002638
   14efc:	200025d4 	.word	0x200025d4
   14f00:	20002600 	.word	0x20002600
   14f04:	20004435 	.word	0x20004435
   14f08:	40000104 	.word	0x40000104
   14f0c:	e000e100 	.word	0xe000e100
   14f10:	40000008 	.word	0x40000008

00014f14 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   14f14:	4a04      	ldr	r2, [pc, #16]	; (14f28 <sys_clock_timeout_handler+0x14>)
   14f16:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   14f18:	1ac8      	subs	r0, r1, r3
   14f1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14f1e:	4403      	add	r3, r0
   14f20:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14f22:	f009 ba75 	b.w	1e410 <z_clock_announce>
   14f26:	bf00      	nop
   14f28:	20002648 	.word	0x20002648

00014f2c <set_absolute_alarm>:
{
   14f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f30:	0086      	lsls	r6, r0, #2
   14f32:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14f36:	f100 0450 	add.w	r4, r0, #80	; 0x50
   14f3a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   14f3e:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   14f40:	f8df 807c 	ldr.w	r8, [pc, #124]	; 14fc0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   14f44:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f48:	b2a4      	uxth	r4, r4
   14f4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f4e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14f52:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   14f56:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f5a:	4087      	lsls	r7, r0
   14f5c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   14f5e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14f62:	eba3 030a 	sub.w	r3, r3, sl
   14f66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f6a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   14f6e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   14f70:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   14f74:	d102      	bne.n	14f7c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   14f76:	2013      	movs	r0, #19
   14f78:	f00d faf0 	bl	2255c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14f7c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   14f80:	1aab      	subs	r3, r5, r2
   14f82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   14f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   14f8a:	bf88      	it	hi
   14f8c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f8e:	2300      	movs	r3, #0
   14f90:	6023      	str	r3, [r4, #0]
   14f92:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14f94:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f98:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14f9c:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   14fa0:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14fa4:	459a      	cmp	sl, r3
   14fa6:	d006      	beq.n	14fb6 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   14fa8:	1aeb      	subs	r3, r5, r3
   14faa:	3b02      	subs	r3, #2
   14fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   14fb4:	d801      	bhi.n	14fba <set_absolute_alarm+0x8e>
}
   14fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   14fba:	462b      	mov	r3, r5
   14fbc:	e7cf      	b.n	14f5e <set_absolute_alarm+0x32>
   14fbe:	bf00      	nop
   14fc0:	40011000 	.word	0x40011000

00014fc4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   14fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   14fc6:	4e10      	ldr	r6, [pc, #64]	; (15008 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fc8:	4f10      	ldr	r7, [pc, #64]	; (1500c <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14fca:	2500      	movs	r5, #0
   14fcc:	4b10      	ldr	r3, [pc, #64]	; (15010 <rtc_nrf_isr+0x4c>)
   14fce:	2000      	movs	r0, #0
   14fd0:	681c      	ldr	r4, [r3, #0]
   14fd2:	461a      	mov	r2, r3
   14fd4:	b105      	cbz	r5, 14fd8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   14fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   14fd8:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   14fdc:	03c9      	lsls	r1, r1, #15
   14fde:	d5fa      	bpl.n	14fd6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fe0:	6839      	ldr	r1, [r7, #0]
   14fe2:	2900      	cmp	r1, #0
   14fe4:	d0f7      	beq.n	14fd6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14fe6:	603d      	str	r5, [r7, #0]
   14fe8:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14fea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   14fee:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   14ff2:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14ff6:	2501      	movs	r5, #1
			if (handler) {
   14ff8:	b11c      	cbz	r4, 15002 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   14ffa:	685a      	ldr	r2, [r3, #4]
   14ffc:	6018      	str	r0, [r3, #0]
   14ffe:	47a0      	blx	r4
   15000:	e7e4      	b.n	14fcc <rtc_nrf_isr+0x8>
   15002:	6014      	str	r4, [r2, #0]
}
   15004:	e7e7      	b.n	14fd6 <rtc_nrf_isr+0x12>
   15006:	bf00      	nop
   15008:	40011000 	.word	0x40011000
   1500c:	40011140 	.word	0x40011140
   15010:	2000263c 	.word	0x2000263c

00015014 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   15014:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   15016:	4d10      	ldr	r5, [pc, #64]	; (15058 <z_clock_driver_init+0x44>)
   15018:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   1501a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1501e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   15022:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   15026:	4b0d      	ldr	r3, [pc, #52]	; (1505c <z_clock_driver_init+0x48>)
   15028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1502c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15030:	2101      	movs	r1, #1
   15032:	4622      	mov	r2, r4
   15034:	2011      	movs	r0, #17
   15036:	f000 fa69 	bl	1550c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1503a:	2011      	movs	r0, #17
   1503c:	f000 fa56 	bl	154ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15040:	4a07      	ldr	r2, [pc, #28]	; (15060 <z_clock_driver_init+0x4c>)
   15042:	2301      	movs	r3, #1
   15044:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   15046:	4a07      	ldr	r2, [pc, #28]	; (15064 <z_clock_driver_init+0x50>)
   15048:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1504a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   1504c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   1504e:	f7ff fedb 	bl	14e08 <z_nrf_clock_control_lf_on>

	return 0;
}
   15052:	4620      	mov	r0, r4
   15054:	bd38      	pop	{r3, r4, r5, pc}
   15056:	bf00      	nop
   15058:	40011000 	.word	0x40011000
   1505c:	e000e100 	.word	0xe000e100
   15060:	40011008 	.word	0x40011008
   15064:	20002644 	.word	0x20002644

00015068 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15068:	4b13      	ldr	r3, [pc, #76]	; (150b8 <z_clock_set_timeout+0x50>)
   1506a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1506e:	bf08      	it	eq
   15070:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15072:	3801      	subs	r0, #1
   15074:	2800      	cmp	r0, #0
   15076:	dd1c      	ble.n	150b2 <z_clock_set_timeout+0x4a>
   15078:	4298      	cmp	r0, r3
   1507a:	bfa8      	it	ge
   1507c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   1507e:	4b0f      	ldr	r3, [pc, #60]	; (150bc <z_clock_set_timeout+0x54>)
   15080:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   15084:	4b0e      	ldr	r3, [pc, #56]	; (150c0 <z_clock_set_timeout+0x58>)
   15086:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   15088:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1508a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1508e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   15092:	bf18      	it	ne
   15094:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   15096:	4a0b      	ldr	r2, [pc, #44]	; (150c4 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15098:	3301      	adds	r3, #1
   1509a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   1509c:	480a      	ldr	r0, [pc, #40]	; (150c8 <z_clock_set_timeout+0x60>)
   1509e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   150a0:	2000      	movs	r0, #0
   150a2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   150a4:	4a04      	ldr	r2, [pc, #16]	; (150b8 <z_clock_set_timeout+0x50>)
   150a6:	4293      	cmp	r3, r2
   150a8:	bf94      	ite	ls
   150aa:	18c9      	addls	r1, r1, r3
   150ac:	1889      	addhi	r1, r1, r2
   150ae:	f7ff bf3d 	b.w	14f2c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   150b2:	2000      	movs	r0, #0
   150b4:	e7e3      	b.n	1507e <z_clock_set_timeout+0x16>
   150b6:	bf00      	nop
   150b8:	007fffff 	.word	0x007fffff
   150bc:	40011000 	.word	0x40011000
   150c0:	20002648 	.word	0x20002648
   150c4:	2000263c 	.word	0x2000263c
   150c8:	00014f15 	.word	0x00014f15

000150cc <z_clock_elapsed>:
	__asm__ volatile(
   150cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   150d0:	f3ef 8311 	mrs	r3, BASEPRI
   150d4:	f382 8811 	msr	BASEPRI, r2
   150d8:	f3bf 8f6f 	isb	sy
   150dc:	4a06      	ldr	r2, [pc, #24]	; (150f8 <z_clock_elapsed+0x2c>)
   150de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   150e2:	4a06      	ldr	r2, [pc, #24]	; (150fc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   150e4:	6812      	ldr	r2, [r2, #0]
   150e6:	1a80      	subs	r0, r0, r2
   150e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   150ec:	f383 8811 	msr	BASEPRI, r3
   150f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   150f4:	4770      	bx	lr
   150f6:	bf00      	nop
   150f8:	40011000 	.word	0x40011000
   150fc:	20002648 	.word	0x20002648

00015100 <z_timer_cycle_get_32>:
	__asm__ volatile(
   15100:	f04f 0340 	mov.w	r3, #64	; 0x40
   15104:	f3ef 8211 	mrs	r2, BASEPRI
   15108:	f383 8811 	msr	BASEPRI, r3
   1510c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   15110:	4906      	ldr	r1, [pc, #24]	; (1512c <z_timer_cycle_get_32+0x2c>)
   15112:	4b07      	ldr	r3, [pc, #28]	; (15130 <z_timer_cycle_get_32+0x30>)
   15114:	6808      	ldr	r0, [r1, #0]
   15116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   1511a:	f382 8811 	msr	BASEPRI, r2
   1511e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   15122:	1a1b      	subs	r3, r3, r0
   15124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   15128:	4418      	add	r0, r3
   1512a:	4770      	bx	lr
   1512c:	20002648 	.word	0x20002648
   15130:	40011000 	.word	0x40011000

00015134 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   15134:	4801      	ldr	r0, [pc, #4]	; (1513c <nrf_cc3xx_platform_abort_init+0x8>)
   15136:	f009 bb63 	b.w	1e800 <nrf_cc3xx_platform_set_abort>
   1513a:	bf00      	nop
   1513c:	00022f20 	.word	0x00022f20

00015140 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15140:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   15142:	b1d0      	cbz	r0, 1517a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   15144:	6843      	ldr	r3, [r0, #4]
   15146:	2b04      	cmp	r3, #4
   15148:	d111      	bne.n	1516e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1514a:	2200      	movs	r2, #0
   1514c:	6803      	ldr	r3, [r0, #0]
   1514e:	f3bf 8f5b 	dmb	ish
   15152:	e853 1f00 	ldrex	r1, [r3]
   15156:	2901      	cmp	r1, #1
   15158:	d103      	bne.n	15162 <mutex_unlock_platform+0x22>
   1515a:	e843 2000 	strex	r0, r2, [r3]
   1515e:	2800      	cmp	r0, #0
   15160:	d1f7      	bne.n	15152 <mutex_unlock_platform+0x12>
   15162:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   15166:	4807      	ldr	r0, [pc, #28]	; (15184 <mutex_unlock_platform+0x44>)
   15168:	bf08      	it	eq
   1516a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1516c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1516e:	b13b      	cbz	r3, 15180 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   15170:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   15172:	f008 fa9b 	bl	1d6ac <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   15176:	2000      	movs	r0, #0
   15178:	e7f8      	b.n	1516c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1517a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1517e:	e7f5      	b.n	1516c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   15180:	4801      	ldr	r0, [pc, #4]	; (15188 <mutex_unlock_platform+0x48>)
   15182:	e7f3      	b.n	1516c <mutex_unlock_platform+0x2c>
   15184:	ffff8fe9 	.word	0xffff8fe9
   15188:	ffff8fea 	.word	0xffff8fea

0001518c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1518c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1518e:	4604      	mov	r4, r0
   15190:	b918      	cbnz	r0, 1519a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   15192:	4b0d      	ldr	r3, [pc, #52]	; (151c8 <mutex_free_platform+0x3c>)
   15194:	480d      	ldr	r0, [pc, #52]	; (151cc <mutex_free_platform+0x40>)
   15196:	685b      	ldr	r3, [r3, #4]
   15198:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1519a:	6861      	ldr	r1, [r4, #4]
   1519c:	2908      	cmp	r1, #8
   1519e:	d00d      	beq.n	151bc <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   151a0:	f031 0304 	bics.w	r3, r1, #4
   151a4:	d00a      	beq.n	151bc <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   151a6:	f011 0102 	ands.w	r1, r1, #2
   151aa:	d008      	beq.n	151be <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   151ac:	4808      	ldr	r0, [pc, #32]	; (151d0 <mutex_free_platform+0x44>)
   151ae:	4621      	mov	r1, r4
   151b0:	f008 f9d8 	bl	1d564 <k_mem_slab_free>
        mutex->mutex = NULL;
   151b4:	2300      	movs	r3, #0
   151b6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   151b8:	2300      	movs	r3, #0
   151ba:	6063      	str	r3, [r4, #4]
}
   151bc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   151be:	6820      	ldr	r0, [r4, #0]
   151c0:	2214      	movs	r2, #20
   151c2:	f00b fa62 	bl	2068a <memset>
   151c6:	e7f7      	b.n	151b8 <mutex_free_platform+0x2c>
   151c8:	20000698 	.word	0x20000698
   151cc:	00023a8c 	.word	0x00023a8c
   151d0:	2000264c 	.word	0x2000264c

000151d4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   151d4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   151d6:	4604      	mov	r4, r0
   151d8:	b918      	cbnz	r0, 151e2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   151da:	4b16      	ldr	r3, [pc, #88]	; (15234 <mutex_init_platform+0x60>)
   151dc:	4816      	ldr	r0, [pc, #88]	; (15238 <mutex_init_platform+0x64>)
   151de:	685b      	ldr	r3, [r3, #4]
   151e0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   151e2:	6863      	ldr	r3, [r4, #4]
   151e4:	2b04      	cmp	r3, #4
   151e6:	d023      	beq.n	15230 <mutex_init_platform+0x5c>
   151e8:	2b08      	cmp	r3, #8
   151ea:	d021      	beq.n	15230 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   151ec:	b9cb      	cbnz	r3, 15222 <mutex_init_platform+0x4e>
   151ee:	6823      	ldr	r3, [r4, #0]
   151f0:	b9bb      	cbnz	r3, 15222 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   151f2:	4812      	ldr	r0, [pc, #72]	; (1523c <mutex_init_platform+0x68>)
   151f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151fc:	4621      	mov	r1, r4
   151fe:	f008 f97f 	bl	1d500 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   15202:	b908      	cbnz	r0, 15208 <mutex_init_platform+0x34>
   15204:	6823      	ldr	r3, [r4, #0]
   15206:	b91b      	cbnz	r3, 15210 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   15208:	4b0a      	ldr	r3, [pc, #40]	; (15234 <mutex_init_platform+0x60>)
   1520a:	480d      	ldr	r0, [pc, #52]	; (15240 <mutex_init_platform+0x6c>)
   1520c:	685b      	ldr	r3, [r3, #4]
   1520e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   15210:	6820      	ldr	r0, [r4, #0]
   15212:	2214      	movs	r2, #20
   15214:	2100      	movs	r1, #0
   15216:	f00b fa38 	bl	2068a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1521a:	6863      	ldr	r3, [r4, #4]
   1521c:	f043 0302 	orr.w	r3, r3, #2
   15220:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   15222:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   15224:	f00c ffb4 	bl	22190 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   15228:	6863      	ldr	r3, [r4, #4]
   1522a:	f043 0301 	orr.w	r3, r3, #1
   1522e:	6063      	str	r3, [r4, #4]
}
   15230:	bd10      	pop	{r4, pc}
   15232:	bf00      	nop
   15234:	20000698 	.word	0x20000698
   15238:	00023a8c 	.word	0x00023a8c
   1523c:	2000264c 	.word	0x2000264c
   15240:	00023ab2 	.word	0x00023ab2

00015244 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15244:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   15246:	b308      	cbz	r0, 1528c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   15248:	6843      	ldr	r3, [r0, #4]
   1524a:	2b04      	cmp	r3, #4
   1524c:	d110      	bne.n	15270 <mutex_lock_platform+0x2c>
   1524e:	2201      	movs	r2, #1
   15250:	6803      	ldr	r3, [r0, #0]
   15252:	f3bf 8f5b 	dmb	ish
   15256:	e853 1f00 	ldrex	r1, [r3]
   1525a:	2900      	cmp	r1, #0
   1525c:	d103      	bne.n	15266 <mutex_lock_platform+0x22>
   1525e:	e843 2000 	strex	r0, r2, [r3]
   15262:	2800      	cmp	r0, #0
   15264:	d1f7      	bne.n	15256 <mutex_lock_platform+0x12>
   15266:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1526a:	d10b      	bne.n	15284 <mutex_lock_platform+0x40>
   1526c:	2000      	movs	r0, #0
}
   1526e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15270:	b153      	cbz	r3, 15288 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   15272:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   15274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1527c:	f008 f99e 	bl	1d5bc <z_impl_k_mutex_lock>
        if (ret == 0) {
   15280:	2800      	cmp	r0, #0
   15282:	d0f3      	beq.n	1526c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   15284:	4803      	ldr	r0, [pc, #12]	; (15294 <mutex_lock_platform+0x50>)
   15286:	e7f2      	b.n	1526e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   15288:	4803      	ldr	r0, [pc, #12]	; (15298 <mutex_lock_platform+0x54>)
   1528a:	e7f0      	b.n	1526e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1528c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   15290:	e7ed      	b.n	1526e <mutex_lock_platform+0x2a>
   15292:	bf00      	nop
   15294:	ffff8fe9 	.word	0xffff8fe9
   15298:	ffff8fea 	.word	0xffff8fea

0001529c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1529c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1529e:	4906      	ldr	r1, [pc, #24]	; (152b8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   152a0:	4806      	ldr	r0, [pc, #24]	; (152bc <nrf_cc3xx_platform_mutex_init+0x20>)
   152a2:	2340      	movs	r3, #64	; 0x40
   152a4:	2214      	movs	r2, #20
   152a6:	f00c ff58 	bl	2215a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   152aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   152ae:	4904      	ldr	r1, [pc, #16]	; (152c0 <nrf_cc3xx_platform_mutex_init+0x24>)
   152b0:	4804      	ldr	r0, [pc, #16]	; (152c4 <nrf_cc3xx_platform_mutex_init+0x28>)
   152b2:	f009 bb23 	b.w	1e8fc <nrf_cc3xx_platform_set_mutexes>
   152b6:	bf00      	nop
   152b8:	20002668 	.word	0x20002668
   152bc:	2000264c 	.word	0x2000264c
   152c0:	00022f38 	.word	0x00022f38
   152c4:	00022f28 	.word	0x00022f28

000152c8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   152c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   152ca:	4e26      	ldr	r6, [pc, #152]	; (15364 <tc_aes128_set_encrypt_key+0x9c>)
{
   152cc:	4607      	mov	r7, r0
   152ce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   152d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   152d2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   152d4:	ad01      	add	r5, sp, #4
   152d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   152d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   152da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   152dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   152e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   152e4:	4638      	mov	r0, r7
   152e6:	2f00      	cmp	r7, #0
   152e8:	d038      	beq.n	1535c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   152ea:	2c00      	cmp	r4, #0
   152ec:	d038      	beq.n	15360 <tc_aes128_set_encrypt_key+0x98>
   152ee:	1f38      	subs	r0, r7, #4
   152f0:	4621      	mov	r1, r4
   152f2:	4602      	mov	r2, r0
   152f4:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   152f6:	784b      	ldrb	r3, [r1, #1]
   152f8:	780d      	ldrb	r5, [r1, #0]
   152fa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   152fc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   15300:	78cd      	ldrb	r5, [r1, #3]
   15302:	432b      	orrs	r3, r5
   15304:	788d      	ldrb	r5, [r1, #2]
   15306:	3104      	adds	r1, #4
   15308:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1530c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1530e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   15312:	d1f0      	bne.n	152f6 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15314:	4c14      	ldr	r4, [pc, #80]	; (15368 <tc_aes128_set_encrypt_key+0xa0>)
   15316:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   15318:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1531a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1531c:	d116      	bne.n	1534c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1531e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15322:	5ca5      	ldrb	r5, [r4, r2]
   15324:	0e1a      	lsrs	r2, r3, #24
   15326:	5ca2      	ldrb	r2, [r4, r2]
   15328:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1532c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   15330:	b2db      	uxtb	r3, r3
   15332:	5d65      	ldrb	r5, [r4, r5]
   15334:	5ce3      	ldrb	r3, [r4, r3]
   15336:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1533a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1533e:	ad0c      	add	r5, sp, #48	; 0x30
   15340:	f021 0303 	bic.w	r3, r1, #3
   15344:	442b      	add	r3, r5
   15346:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1534a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1534c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   15350:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   15352:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   15354:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   15356:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15358:	d1de      	bne.n	15318 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1535a:	2001      	movs	r0, #1
}
   1535c:	b00d      	add	sp, #52	; 0x34
   1535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   15360:	4620      	mov	r0, r4
   15362:	e7fb      	b.n	1535c <tc_aes128_set_encrypt_key+0x94>
   15364:	00022dc4 	.word	0x00022dc4
   15368:	00023adf 	.word	0x00023adf

0001536c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15370:	4615      	mov	r5, r2
   15372:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   15374:	4606      	mov	r6, r0
   15376:	2800      	cmp	r0, #0
   15378:	d058      	beq.n	1542c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1537a:	2900      	cmp	r1, #0
   1537c:	d059      	beq.n	15432 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1537e:	2a00      	cmp	r2, #0
   15380:	d059      	beq.n	15436 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   15382:	2310      	movs	r3, #16
   15384:	460a      	mov	r2, r1
   15386:	4668      	mov	r0, sp
   15388:	4619      	mov	r1, r3
   1538a:	f00a ff0f 	bl	201ac <_copy>
	add_round_key(state, s->words);
   1538e:	4629      	mov	r1, r5
   15390:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   15392:	4c2a      	ldr	r4, [pc, #168]	; (1543c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   15394:	f00a ff22 	bl	201dc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   15398:	f105 0710 	add.w	r7, r5, #16
   1539c:	46a1      	mov	r9, r4
   1539e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   153a0:	46e8      	mov	r8, sp
{
   153a2:	466a      	mov	r2, sp
   153a4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   153a6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   153a8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   153aa:	5c61      	ldrb	r1, [r4, r1]
   153ac:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   153b0:	d1f9      	bne.n	153a6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   153b2:	4668      	mov	r0, sp
   153b4:	f00a ff57 	bl	20266 <shift_rows>
	mult_row_column(t, s);
   153b8:	4669      	mov	r1, sp
   153ba:	a804      	add	r0, sp, #16
   153bc:	f00a ff8c 	bl	202d8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   153c0:	a901      	add	r1, sp, #4
   153c2:	a805      	add	r0, sp, #20
   153c4:	f00a ff88 	bl	202d8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   153c8:	a902      	add	r1, sp, #8
   153ca:	a806      	add	r0, sp, #24
   153cc:	f00a ff84 	bl	202d8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   153d0:	a903      	add	r1, sp, #12
   153d2:	a807      	add	r0, sp, #28
   153d4:	f00a ff80 	bl	202d8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   153d8:	2310      	movs	r3, #16
   153da:	4619      	mov	r1, r3
   153dc:	eb0d 0203 	add.w	r2, sp, r3
   153e0:	4668      	mov	r0, sp
   153e2:	f00a fee3 	bl	201ac <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   153e6:	4639      	mov	r1, r7
   153e8:	4668      	mov	r0, sp
   153ea:	3710      	adds	r7, #16
   153ec:	f00a fef6 	bl	201dc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   153f0:	42af      	cmp	r7, r5
   153f2:	d1d5      	bne.n	153a0 <tc_aes_encrypt+0x34>
   153f4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   153f6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   153fa:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   153fc:	f819 3003 	ldrb.w	r3, [r9, r3]
   15400:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   15404:	d1f7      	bne.n	153f6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   15406:	4668      	mov	r0, sp
   15408:	f00a ff2d 	bl	20266 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1540c:	4629      	mov	r1, r5
   1540e:	4668      	mov	r0, sp
   15410:	f00a fee4 	bl	201dc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   15414:	2310      	movs	r3, #16
   15416:	4619      	mov	r1, r3
   15418:	466a      	mov	r2, sp
   1541a:	4630      	mov	r0, r6
   1541c:	f00a fec6 	bl	201ac <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15420:	4668      	mov	r0, sp
   15422:	2210      	movs	r2, #16
   15424:	4621      	mov	r1, r4
   15426:	f00a fece 	bl	201c6 <_set>

	return TC_CRYPTO_SUCCESS;
   1542a:	2001      	movs	r0, #1
}
   1542c:	b009      	add	sp, #36	; 0x24
   1542e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   15432:	4608      	mov	r0, r1
   15434:	e7fa      	b.n	1542c <tc_aes_encrypt+0xc0>
   15436:	4610      	mov	r0, r2
   15438:	e7f8      	b.n	1542c <tc_aes_encrypt+0xc0>
   1543a:	bf00      	nop
   1543c:	00023adf 	.word	0x00023adf

00015440 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15440:	4a0a      	ldr	r2, [pc, #40]	; (1546c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   15442:	490b      	ldr	r1, [pc, #44]	; (15470 <arch_swap+0x30>)
	_current->arch.basepri = key;
   15444:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   15446:	6809      	ldr	r1, [r1, #0]
   15448:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1544c:	4909      	ldr	r1, [pc, #36]	; (15474 <arch_swap+0x34>)
	_current->arch.basepri = key;
   1544e:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15450:	684b      	ldr	r3, [r1, #4]
   15452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15456:	604b      	str	r3, [r1, #4]
   15458:	2300      	movs	r3, #0
   1545a:	f383 8811 	msr	BASEPRI, r3
   1545e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15462:	6893      	ldr	r3, [r2, #8]
}
   15464:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   15468:	4770      	bx	lr
   1546a:	bf00      	nop
   1546c:	20002e30 	.word	0x20002e30
   15470:	000233a8 	.word	0x000233a8
   15474:	e000ed00 	.word	0xe000ed00

00015478 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15478:	4912      	ldr	r1, [pc, #72]	; (154c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1547a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1547c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   15480:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15482:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15486:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1548a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1548c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15490:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15494:	4f0c      	ldr	r7, [pc, #48]	; (154c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15496:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1549a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   1549c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1549e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   154a0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   154a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   154a4:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   154a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   154aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   154ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   154ae:	f000 fbcd 	bl	15c4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   154b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   154b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   154ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   154be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   154c2:	4770      	bx	lr
    ldr r1, =_kernel
   154c4:	20002e30 	.word	0x20002e30
    ldr v4, =_SCS_ICSR
   154c8:	e000ed04 	.word	0xe000ed04

000154cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   154cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   154d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   154d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   154d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   154da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   154dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   154e0:	2902      	cmp	r1, #2
    beq _oops
   154e2:	d0ff      	beq.n	154e4 <_oops>

000154e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   154e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   154e6:	f00b f83a 	bl	2055e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   154ea:	bd01      	pop	{r0, pc}

000154ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   154ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   154ee:	2b00      	cmp	r3, #0
   154f0:	db08      	blt.n	15504 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   154f2:	2201      	movs	r2, #1
   154f4:	f000 001f 	and.w	r0, r0, #31
   154f8:	fa02 f000 	lsl.w	r0, r2, r0
   154fc:	095b      	lsrs	r3, r3, #5
   154fe:	4a02      	ldr	r2, [pc, #8]	; (15508 <arch_irq_enable+0x1c>)
   15500:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   15504:	4770      	bx	lr
   15506:	bf00      	nop
   15508:	e000e100 	.word	0xe000e100

0001550c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   1550c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1550e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   15510:	bf54      	ite	pl
   15512:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15514:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15516:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15518:	bfac      	ite	ge
   1551a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1551e:	4a07      	ldrlt	r2, [pc, #28]	; (1553c <z_arm_irq_priority_set+0x30>)
   15520:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15524:	bfac      	ite	ge
   15526:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1552a:	f000 000f 	andlt.w	r0, r0, #15
   1552e:	b2db      	uxtb	r3, r3
   15530:	bfb4      	ite	lt
   15532:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15534:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   15538:	4770      	bx	lr
   1553a:	bf00      	nop
   1553c:	e000ed14 	.word	0xe000ed14

00015540 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15540:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15542:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15544:	4b04      	ldr	r3, [pc, #16]	; (15558 <_arch_isr_direct_pm+0x18>)
   15546:	6a58      	ldr	r0, [r3, #36]	; 0x24
   15548:	b118      	cbz	r0, 15552 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1554a:	2200      	movs	r2, #0
   1554c:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
   1554e:	f00c fd96 	bl	2207e <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15552:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15554:	bd08      	pop	{r3, pc}
   15556:	bf00      	nop
   15558:	20002e30 	.word	0x20002e30

0001555c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1555c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15560:	9b00      	ldr	r3, [sp, #0]
   15562:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   15566:	490a      	ldr	r1, [pc, #40]	; (15590 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   15568:	9b01      	ldr	r3, [sp, #4]
   1556a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1556e:	9b02      	ldr	r3, [sp, #8]
   15570:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   15574:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1557c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   15580:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   15584:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15586:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   15588:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1558a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1558c:	4770      	bx	lr
   1558e:	bf00      	nop
   15590:	0001f71f 	.word	0x0001f71f

00015594 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15594:	4a0b      	ldr	r2, [pc, #44]	; (155c4 <z_check_thread_stack_fail+0x30>)
{
   15596:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   15598:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   1559a:	b190      	cbz	r0, 155c2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1559c:	f113 0f16 	cmn.w	r3, #22
   155a0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   155a2:	d005      	beq.n	155b0 <z_check_thread_stack_fail+0x1c>
   155a4:	f1a0 0220 	sub.w	r2, r0, #32
   155a8:	429a      	cmp	r2, r3
   155aa:	d806      	bhi.n	155ba <z_check_thread_stack_fail+0x26>
   155ac:	4283      	cmp	r3, r0
   155ae:	d204      	bcs.n	155ba <z_check_thread_stack_fail+0x26>
   155b0:	4281      	cmp	r1, r0
   155b2:	bf2c      	ite	cs
   155b4:	2100      	movcs	r1, #0
   155b6:	2101      	movcc	r1, #1
   155b8:	e000      	b.n	155bc <z_check_thread_stack_fail+0x28>
   155ba:	2100      	movs	r1, #0
   155bc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   155be:	bf08      	it	eq
   155c0:	2000      	moveq	r0, #0
}
   155c2:	4770      	bx	lr
   155c4:	20002e30 	.word	0x20002e30

000155c8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   155c8:	b508      	push	{r3, lr}
   155ca:	4604      	mov	r4, r0
   155cc:	460e      	mov	r6, r1
   155ce:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   155d0:	f000 fb30 	bl	15c34 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   155d4:	4b08      	ldr	r3, [pc, #32]	; (155f8 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   155d6:	4620      	mov	r0, r4
	_current = main_thread;
   155d8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   155da:	f000 fb37 	bl	15c4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   155de:	4628      	mov	r0, r5
   155e0:	f386 8809 	msr	PSP, r6
   155e4:	2100      	movs	r1, #0
   155e6:	b663      	cpsie	if
   155e8:	f381 8811 	msr	BASEPRI, r1
   155ec:	f3bf 8f6f 	isb	sy
   155f0:	2200      	movs	r2, #0
   155f2:	2300      	movs	r3, #0
   155f4:	f00a f893 	bl	1f71e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   155f8:	20002e30 	.word	0x20002e30

000155fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   155fc:	4901      	ldr	r1, [pc, #4]	; (15604 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   155fe:	2210      	movs	r2, #16
	str	r2, [r1]
   15600:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15602:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15604:	e000ed10 	.word	0xe000ed10

00015608 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15608:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1560a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1560c:	f380 8811 	msr	BASEPRI, r0
	isb
   15610:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15614:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15618:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1561a:	b662      	cpsie	i
	isb
   1561c:	f3bf 8f6f 	isb	sy

	bx	lr
   15620:	4770      	bx	lr
   15622:	bf00      	nop

00015624 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15624:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15626:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15628:	f381 8811 	msr	BASEPRI, r1

	wfe
   1562c:	bf20      	wfe

	msr	BASEPRI, r0
   1562e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15632:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15634:	4770      	bx	lr
   15636:	bf00      	nop

00015638 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15638:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1563a:	4606      	mov	r6, r0

	if (esf != NULL) {
   1563c:	460c      	mov	r4, r1
   1563e:	b301      	cbz	r1, 15682 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   15640:	4b13      	ldr	r3, [pc, #76]	; (15690 <z_arm_fatal_error+0x58>)
   15642:	4d14      	ldr	r5, [pc, #80]	; (15694 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15644:	4814      	ldr	r0, [pc, #80]	; (15698 <z_arm_fatal_error+0x60>)
   15646:	1aed      	subs	r5, r5, r3
   15648:	08ed      	lsrs	r5, r5, #3
   1564a:	01ad      	lsls	r5, r5, #6
   1564c:	f045 0501 	orr.w	r5, r5, #1
   15650:	f8ad 5000 	strh.w	r5, [sp]
   15654:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   15658:	6809      	ldr	r1, [r1, #0]
   1565a:	f00a fbfe 	bl	1fe5a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1565e:	f8ad 5000 	strh.w	r5, [sp]
   15662:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15666:	68e1      	ldr	r1, [r4, #12]
   15668:	480c      	ldr	r0, [pc, #48]	; (1569c <z_arm_fatal_error+0x64>)
   1566a:	f00a fbf6 	bl	1fe5a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1566e:	69e1      	ldr	r1, [r4, #28]
   15670:	480b      	ldr	r0, [pc, #44]	; (156a0 <z_arm_fatal_error+0x68>)
   15672:	462a      	mov	r2, r5
   15674:	f00a fbc4 	bl	1fe00 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15678:	69a1      	ldr	r1, [r4, #24]
   1567a:	480a      	ldr	r0, [pc, #40]	; (156a4 <z_arm_fatal_error+0x6c>)
   1567c:	462a      	mov	r2, r5
   1567e:	f00a fbbf 	bl	1fe00 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15682:	4621      	mov	r1, r4
   15684:	4630      	mov	r0, r6
}
   15686:	b002      	add	sp, #8
   15688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   1568c:	f007 bdce 	b.w	1d22c <z_fatal_error>
   15690:	00022cf0 	.word	0x00022cf0
   15694:	00022d88 	.word	0x00022d88
   15698:	00023bdf 	.word	0x00023bdf
   1569c:	00023c0e 	.word	0x00023c0e
   156a0:	00023c3d 	.word	0x00023c3d
   156a4:	00023c4c 	.word	0x00023c4c

000156a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   156a8:	bf30      	wfi
    b z_SysNmiOnReset
   156aa:	f7ff bffd 	b.w	156a8 <z_SysNmiOnReset>
   156ae:	bf00      	nop

000156b0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   156b0:	4a0e      	ldr	r2, [pc, #56]	; (156ec <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   156b2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   156b4:	4b0e      	ldr	r3, [pc, #56]	; (156f0 <z_arm_prep_c+0x40>)
   156b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   156ba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   156bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   156c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   156c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   156c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   156cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   156d0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   156d4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   156d8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   156dc:	f007 fe34 	bl	1d348 <z_bss_zero>
	z_data_copy();
   156e0:	f008 fd9c 	bl	1e21c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   156e4:	f000 fa78 	bl	15bd8 <z_arm_interrupt_init>
	z_cstart();
   156e8:	f007 fe52 	bl	1d390 <z_cstart>
   156ec:	00001000 	.word	0x00001000
   156f0:	e000ed00 	.word	0xe000ed00

000156f4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   156f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   156f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   156f8:	4a0b      	ldr	r2, [pc, #44]	; (15728 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   156fa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   156fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   156fe:	bf1e      	ittt	ne
	movne	r1, #0
   15700:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15702:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
   15704:	f00c fcbb 	blne	2207e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15708:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1570a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1570e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15712:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15716:	4905      	ldr	r1, [pc, #20]	; (1572c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15718:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1571a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1571c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1571e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15722:	4903      	ldr	r1, [pc, #12]	; (15730 <_isr_wrapper+0x3c>)
	bx r1
   15724:	4708      	bx	r1
   15726:	0000      	.short	0x0000
	ldr r2, =_kernel
   15728:	20002e30 	.word	0x20002e30
	ldr r1, =_sw_isr_table
   1572c:	00022b34 	.word	0x00022b34
	ldr r1, =z_arm_int_exit
   15730:	00015bbd 	.word	0x00015bbd

00015734 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   15734:	f00a ffcc 	bl	206d0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15738:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1573a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1573e:	4808      	ldr	r0, [pc, #32]	; (15760 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15740:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   15744:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15746:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1574a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1574e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15750:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15752:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15756:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1575a:	f7ff ffa9 	bl	156b0 <z_arm_prep_c>
   1575e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   15760:	20005f60 	.word	0x20005f60

00015764 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15764:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15768:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1576c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1576e:	4672      	mov	r2, lr
	bl z_arm_fault
   15770:	f000 f94e 	bl	15a10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15774:	bd01      	pop	{r0, pc}
   15776:	bf00      	nop

00015778 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   15778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1577c:	4b35      	ldr	r3, [pc, #212]	; (15854 <mem_manage_fault+0xdc>)
   1577e:	4c36      	ldr	r4, [pc, #216]	; (15858 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15780:	4d36      	ldr	r5, [pc, #216]	; (1585c <mem_manage_fault+0xe4>)
   15782:	1ae4      	subs	r4, r4, r3
   15784:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   15786:	01a4      	lsls	r4, r4, #6
   15788:	f044 0901 	orr.w	r9, r4, #1
{
   1578c:	4607      	mov	r7, r0
   1578e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   15790:	4833      	ldr	r0, [pc, #204]	; (15860 <mem_manage_fault+0xe8>)
   15792:	4649      	mov	r1, r9
{
   15794:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   15796:	f00a fb26 	bl	1fde6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1579a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1579c:	06d3      	lsls	r3, r2, #27
   1579e:	d503      	bpl.n	157a8 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   157a0:	4830      	ldr	r0, [pc, #192]	; (15864 <mem_manage_fault+0xec>)
   157a2:	4649      	mov	r1, r9
   157a4:	f00a fb1f 	bl	1fde6 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   157a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   157aa:	0718      	lsls	r0, r3, #28
   157ac:	d504      	bpl.n	157b8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   157ae:	482e      	ldr	r0, [pc, #184]	; (15868 <mem_manage_fault+0xf0>)
   157b0:	f044 0101 	orr.w	r1, r4, #1
   157b4:	f00a fb17 	bl	1fde6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   157b8:	4d28      	ldr	r5, [pc, #160]	; (1585c <mem_manage_fault+0xe4>)
   157ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   157bc:	0799      	lsls	r1, r3, #30
   157be:	d423      	bmi.n	15808 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   157c0:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   157c4:	4d25      	ldr	r5, [pc, #148]	; (1585c <mem_manage_fault+0xe4>)
   157c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   157c8:	07d3      	lsls	r3, r2, #31
   157ca:	d504      	bpl.n	157d6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   157cc:	4827      	ldr	r0, [pc, #156]	; (1586c <mem_manage_fault+0xf4>)
   157ce:	f044 0101 	orr.w	r1, r4, #1
   157d2:	f00a fb08 	bl	1fde6 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   157d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   157d8:	0698      	lsls	r0, r3, #26
   157da:	d504      	bpl.n	157e6 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   157dc:	4824      	ldr	r0, [pc, #144]	; (15870 <mem_manage_fault+0xf8>)
   157de:	f044 0101 	orr.w	r1, r4, #1
   157e2:	f00a fb00 	bl	1fde6 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157e6:	4b1d      	ldr	r3, [pc, #116]	; (1585c <mem_manage_fault+0xe4>)
   157e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   157ea:	06d1      	lsls	r1, r2, #27
   157ec:	d424      	bmi.n	15838 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   157ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157f0:	0792      	lsls	r2, r2, #30
   157f2:	d421      	bmi.n	15838 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   157f4:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   157f6:	4a19      	ldr	r2, [pc, #100]	; (1585c <mem_manage_fault+0xe4>)
   157f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   157fa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   157fe:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   15800:	2300      	movs	r3, #0
   15802:	7033      	strb	r3, [r6, #0]

	return reason;
}
   15804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   15808:	f044 0a01 	orr.w	sl, r4, #1
   1580c:	4819      	ldr	r0, [pc, #100]	; (15874 <mem_manage_fault+0xfc>)
   1580e:	4651      	mov	r1, sl
   15810:	f00a fae9 	bl	1fde6 <log_0>
		uint32_t temp = SCB->MMFAR;
   15814:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15818:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1581a:	061a      	lsls	r2, r3, #24
   1581c:	d5d0      	bpl.n	157c0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1581e:	4816      	ldr	r0, [pc, #88]	; (15878 <mem_manage_fault+0x100>)
   15820:	4652      	mov	r2, sl
   15822:	4649      	mov	r1, r9
   15824:	f00a faec 	bl	1fe00 <log_1>
			if (from_hard_fault) {
   15828:	f1b8 0f00 	cmp.w	r8, #0
   1582c:	d0ca      	beq.n	157c4 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1582e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15834:	62ab      	str	r3, [r5, #40]	; 0x28
   15836:	e7c5      	b.n	157c4 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15838:	685b      	ldr	r3, [r3, #4]
   1583a:	051b      	lsls	r3, r3, #20
   1583c:	d5da      	bpl.n	157f4 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1583e:	4639      	mov	r1, r7
   15840:	4648      	mov	r0, r9
   15842:	f7ff fea7 	bl	15594 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15846:	2800      	cmp	r0, #0
   15848:	d0d4      	beq.n	157f4 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1584a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1584e:	2002      	movs	r0, #2
   15850:	e7d1      	b.n	157f6 <mem_manage_fault+0x7e>
   15852:	bf00      	nop
   15854:	00022cf0 	.word	0x00022cf0
   15858:	00022d88 	.word	0x00022d88
   1585c:	e000ed00 	.word	0xe000ed00
   15860:	00023c7a 	.word	0x00023c7a
   15864:	00023c90 	.word	0x00023c90
   15868:	00023cc3 	.word	0x00023cc3
   1586c:	00023d04 	.word	0x00023d04
   15870:	00023d23 	.word	0x00023d23
   15874:	00023cd6 	.word	0x00023cd6
   15878:	00023cee 	.word	0x00023cee

0001587c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1587c:	b570      	push	{r4, r5, r6, lr}
   1587e:	4b23      	ldr	r3, [pc, #140]	; (1590c <usage_fault.isra.0+0x90>)
   15880:	4c23      	ldr	r4, [pc, #140]	; (15910 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15882:	4d24      	ldr	r5, [pc, #144]	; (15914 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15884:	4824      	ldr	r0, [pc, #144]	; (15918 <usage_fault.isra.0+0x9c>)
   15886:	1ae4      	subs	r4, r4, r3
   15888:	08e4      	lsrs	r4, r4, #3
   1588a:	01a4      	lsls	r4, r4, #6
   1588c:	f044 0601 	orr.w	r6, r4, #1
   15890:	4631      	mov	r1, r6
   15892:	f00a faa8 	bl	1fde6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15896:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15898:	0193      	lsls	r3, r2, #6
   1589a:	d503      	bpl.n	158a4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   1589c:	481f      	ldr	r0, [pc, #124]	; (1591c <usage_fault.isra.0+0xa0>)
   1589e:	4631      	mov	r1, r6
   158a0:	f00a faa1 	bl	1fde6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   158a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   158a6:	01dd      	lsls	r5, r3, #7
   158a8:	d504      	bpl.n	158b4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   158aa:	481d      	ldr	r0, [pc, #116]	; (15920 <usage_fault.isra.0+0xa4>)
   158ac:	f044 0101 	orr.w	r1, r4, #1
   158b0:	f00a fa99 	bl	1fde6 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   158b4:	4d17      	ldr	r5, [pc, #92]	; (15914 <usage_fault.isra.0+0x98>)
   158b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   158b8:	0310      	lsls	r0, r2, #12
   158ba:	d504      	bpl.n	158c6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   158bc:	4819      	ldr	r0, [pc, #100]	; (15924 <usage_fault.isra.0+0xa8>)
   158be:	f044 0101 	orr.w	r1, r4, #1
   158c2:	f00a fa90 	bl	1fde6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   158c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   158c8:	0359      	lsls	r1, r3, #13
   158ca:	d504      	bpl.n	158d6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   158cc:	4816      	ldr	r0, [pc, #88]	; (15928 <usage_fault.isra.0+0xac>)
   158ce:	f044 0101 	orr.w	r1, r4, #1
   158d2:	f00a fa88 	bl	1fde6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   158d6:	4d0f      	ldr	r5, [pc, #60]	; (15914 <usage_fault.isra.0+0x98>)
   158d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   158da:	0392      	lsls	r2, r2, #14
   158dc:	d504      	bpl.n	158e8 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   158de:	4813      	ldr	r0, [pc, #76]	; (1592c <usage_fault.isra.0+0xb0>)
   158e0:	f044 0101 	orr.w	r1, r4, #1
   158e4:	f00a fa7f 	bl	1fde6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   158e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   158ea:	03db      	lsls	r3, r3, #15
   158ec:	d504      	bpl.n	158f8 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   158ee:	4810      	ldr	r0, [pc, #64]	; (15930 <usage_fault.isra.0+0xb4>)
   158f0:	f044 0101 	orr.w	r1, r4, #1
   158f4:	f00a fa77 	bl	1fde6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   158f8:	4a06      	ldr	r2, [pc, #24]	; (15914 <usage_fault.isra.0+0x98>)
   158fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   158fc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15900:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15904:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15906:	2000      	movs	r0, #0
   15908:	bd70      	pop	{r4, r5, r6, pc}
   1590a:	bf00      	nop
   1590c:	00022cf0 	.word	0x00022cf0
   15910:	00022d88 	.word	0x00022d88
   15914:	e000ed00 	.word	0xe000ed00
   15918:	00023d52 	.word	0x00023d52
   1591c:	00023d6a 	.word	0x00023d6a
   15920:	00023d7d 	.word	0x00023d7d
   15924:	00023d97 	.word	0x00023d97
   15928:	00023db5 	.word	0x00023db5
   1592c:	00023dda 	.word	0x00023dda
   15930:	00023df4 	.word	0x00023df4

00015934 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15938:	4b2a      	ldr	r3, [pc, #168]	; (159e4 <bus_fault.isra.0+0xb0>)
   1593a:	4c2b      	ldr	r4, [pc, #172]	; (159e8 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1593c:	4d2b      	ldr	r5, [pc, #172]	; (159ec <bus_fault.isra.0+0xb8>)
   1593e:	1ae4      	subs	r4, r4, r3
   15940:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   15942:	01a4      	lsls	r4, r4, #6
   15944:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15948:	4607      	mov	r7, r0
   1594a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1594c:	4828      	ldr	r0, [pc, #160]	; (159f0 <bus_fault.isra.0+0xbc>)
   1594e:	4641      	mov	r1, r8
   15950:	f00a fa49 	bl	1fde6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15954:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15956:	04d1      	lsls	r1, r2, #19
   15958:	d503      	bpl.n	15962 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   1595a:	4826      	ldr	r0, [pc, #152]	; (159f4 <bus_fault.isra.0+0xc0>)
   1595c:	4641      	mov	r1, r8
   1595e:	f00a fa42 	bl	1fde6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15962:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15964:	051a      	lsls	r2, r3, #20
   15966:	d504      	bpl.n	15972 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   15968:	4823      	ldr	r0, [pc, #140]	; (159f8 <bus_fault.isra.0+0xc4>)
   1596a:	f044 0101 	orr.w	r1, r4, #1
   1596e:	f00a fa3a 	bl	1fde6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15972:	4d1e      	ldr	r5, [pc, #120]	; (159ec <bus_fault.isra.0+0xb8>)
   15974:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15976:	059b      	lsls	r3, r3, #22
   15978:	d512      	bpl.n	159a0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1597a:	f044 0801 	orr.w	r8, r4, #1
   1597e:	481f      	ldr	r0, [pc, #124]	; (159fc <bus_fault.isra.0+0xc8>)
   15980:	4641      	mov	r1, r8
   15982:	f00a fa30 	bl	1fde6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   15986:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15988:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1598a:	0418      	lsls	r0, r3, #16
   1598c:	d508      	bpl.n	159a0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1598e:	481c      	ldr	r0, [pc, #112]	; (15a00 <bus_fault.isra.0+0xcc>)
   15990:	4642      	mov	r2, r8
   15992:	f00a fa35 	bl	1fe00 <log_1>
			if (from_hard_fault) {
   15996:	b11f      	cbz	r7, 159a0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15998:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1599a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1599e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   159a0:	4d12      	ldr	r5, [pc, #72]	; (159ec <bus_fault.isra.0+0xb8>)
   159a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   159a4:	0559      	lsls	r1, r3, #21
   159a6:	d504      	bpl.n	159b2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   159a8:	4816      	ldr	r0, [pc, #88]	; (15a04 <bus_fault.isra.0+0xd0>)
   159aa:	f044 0101 	orr.w	r1, r4, #1
   159ae:	f00a fa1a 	bl	1fde6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   159b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   159b4:	05da      	lsls	r2, r3, #23
   159b6:	d50d      	bpl.n	159d4 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   159b8:	4813      	ldr	r0, [pc, #76]	; (15a08 <bus_fault.isra.0+0xd4>)
   159ba:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   159be:	f00a fa12 	bl	1fde6 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   159c2:	4a0a      	ldr	r2, [pc, #40]	; (159ec <bus_fault.isra.0+0xb8>)
   159c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   159c6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   159c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   159cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   159ce:	7030      	strb	r0, [r6, #0]
}
   159d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   159d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   159d6:	049b      	lsls	r3, r3, #18
   159d8:	d5f3      	bpl.n	159c2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   159da:	480c      	ldr	r0, [pc, #48]	; (15a0c <bus_fault.isra.0+0xd8>)
   159dc:	f044 0101 	orr.w	r1, r4, #1
   159e0:	e7ed      	b.n	159be <bus_fault.isra.0+0x8a>
   159e2:	bf00      	nop
   159e4:	00022cf0 	.word	0x00022cf0
   159e8:	00022d88 	.word	0x00022d88
   159ec:	e000ed00 	.word	0xe000ed00
   159f0:	00023e1f 	.word	0x00023e1f
   159f4:	00023e35 	.word	0x00023e35
   159f8:	00023cc3 	.word	0x00023cc3
   159fc:	00023e46 	.word	0x00023e46
   15a00:	00023e5f 	.word	0x00023e5f
   15a04:	00023e74 	.word	0x00023e74
   15a08:	00023e8f 	.word	0x00023e8f
   15a0c:	00023d23 	.word	0x00023d23

00015a10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15a14:	4b57      	ldr	r3, [pc, #348]	; (15b74 <z_arm_fault+0x164>)
   15a16:	685e      	ldr	r6, [r3, #4]
{
   15a18:	b08a      	sub	sp, #40	; 0x28
   15a1a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15a1c:	f3c6 0408 	ubfx	r4, r6, #0, #9
   15a20:	2500      	movs	r5, #0
   15a22:	f385 8811 	msr	BASEPRI, r5
   15a26:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15a2a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15a2e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15a32:	d10d      	bne.n	15a50 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15a34:	f002 030c 	and.w	r3, r2, #12
   15a38:	2b08      	cmp	r3, #8
   15a3a:	d10b      	bne.n	15a54 <z_arm_fault+0x44>
   15a3c:	494e      	ldr	r1, [pc, #312]	; (15b78 <z_arm_fault+0x168>)
   15a3e:	4b4f      	ldr	r3, [pc, #316]	; (15b7c <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15a40:	484f      	ldr	r0, [pc, #316]	; (15b80 <z_arm_fault+0x170>)
   15a42:	1ac9      	subs	r1, r1, r3
   15a44:	08c9      	lsrs	r1, r1, #3
   15a46:	0189      	lsls	r1, r1, #6
   15a48:	f041 0101 	orr.w	r1, r1, #1
   15a4c:	f00a f9cb 	bl	1fde6 <log_0>
		return NULL;
   15a50:	462f      	mov	r7, r5
   15a52:	e003      	b.n	15a5c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15a54:	0712      	lsls	r2, r2, #28
   15a56:	d401      	bmi.n	15a5c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   15a58:	4607      	mov	r7, r0
			*nested_exc = true;
   15a5a:	2501      	movs	r5, #1
	*recoverable = false;
   15a5c:	2300      	movs	r3, #0
   15a5e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   15a62:	1ee3      	subs	r3, r4, #3
   15a64:	2b09      	cmp	r3, #9
   15a66:	d86b      	bhi.n	15b40 <z_arm_fault+0x130>
   15a68:	e8df f003 	tbb	[pc, r3]
   15a6c:	3d5d5905 	.word	0x3d5d5905
   15a70:	6a6a6a6a 	.word	0x6a6a6a6a
   15a74:	616a      	.short	0x616a
   15a76:	4b41      	ldr	r3, [pc, #260]	; (15b7c <z_arm_fault+0x16c>)
   15a78:	4e3f      	ldr	r6, [pc, #252]	; (15b78 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   15a7a:	4842      	ldr	r0, [pc, #264]	; (15b84 <z_arm_fault+0x174>)
   15a7c:	1af6      	subs	r6, r6, r3
   15a7e:	08f6      	lsrs	r6, r6, #3
   15a80:	01b6      	lsls	r6, r6, #6
   15a82:	f046 0601 	orr.w	r6, r6, #1
   15a86:	4631      	mov	r1, r6
   15a88:	f00a f9ad 	bl	1fde6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15a8c:	4b39      	ldr	r3, [pc, #228]	; (15b74 <z_arm_fault+0x164>)
   15a8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   15a90:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15a94:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   15a98:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15a9c:	d005      	beq.n	15aaa <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   15a9e:	483a      	ldr	r0, [pc, #232]	; (15b88 <z_arm_fault+0x178>)
   15aa0:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   15aa2:	f00a f9a0 	bl	1fde6 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15aa6:	2400      	movs	r4, #0
}
   15aa8:	e020      	b.n	15aec <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15aac:	005b      	lsls	r3, r3, #1
   15aae:	d51d      	bpl.n	15aec <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
   15ab0:	4836      	ldr	r0, [pc, #216]	; (15b8c <z_arm_fault+0x17c>)
   15ab2:	4631      	mov	r1, r6
   15ab4:	f00a f997 	bl	1fde6 <log_0>
		if (SCB_MMFSR != 0) {
   15ab8:	4b35      	ldr	r3, [pc, #212]	; (15b90 <z_arm_fault+0x180>)
   15aba:	781b      	ldrb	r3, [r3, #0]
   15abc:	b133      	cbz	r3, 15acc <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   15abe:	f10d 0207 	add.w	r2, sp, #7
   15ac2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15ac4:	4638      	mov	r0, r7
   15ac6:	f7ff fe57 	bl	15778 <mem_manage_fault>
   15aca:	e00e      	b.n	15aea <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
   15acc:	4b31      	ldr	r3, [pc, #196]	; (15b94 <z_arm_fault+0x184>)
   15ace:	781b      	ldrb	r3, [r3, #0]
   15ad0:	b12b      	cbz	r3, 15ade <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   15ad2:	f10d 0107 	add.w	r1, sp, #7
   15ad6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15ad8:	f7ff ff2c 	bl	15934 <bus_fault.isra.0>
   15adc:	e005      	b.n	15aea <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
   15ade:	4b2e      	ldr	r3, [pc, #184]	; (15b98 <z_arm_fault+0x188>)
   15ae0:	881b      	ldrh	r3, [r3, #0]
   15ae2:	b29b      	uxth	r3, r3
   15ae4:	b113      	cbz	r3, 15aec <z_arm_fault+0xdc>
			reason = usage_fault(esf);
   15ae6:	f7ff fec9 	bl	1587c <usage_fault.isra.0>
   15aea:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15af0:	b993      	cbnz	r3, 15b18 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15af2:	2220      	movs	r2, #32
   15af4:	4639      	mov	r1, r7
   15af6:	a802      	add	r0, sp, #8
   15af8:	f00a fd9c 	bl	20634 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15afe:	b39d      	cbz	r5, 15b68 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15b04:	b922      	cbnz	r2, 15b10 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15b06:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15b0a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15b0e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   15b10:	a902      	add	r1, sp, #8
   15b12:	4620      	mov	r0, r4
   15b14:	f7ff fd90 	bl	15638 <z_arm_fatal_error>
}
   15b18:	b00a      	add	sp, #40	; 0x28
   15b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   15b1e:	f10d 0207 	add.w	r2, sp, #7
   15b22:	2100      	movs	r1, #0
   15b24:	e7ce      	b.n	15ac4 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
   15b26:	f10d 0107 	add.w	r1, sp, #7
   15b2a:	2000      	movs	r0, #0
   15b2c:	e7d4      	b.n	15ad8 <z_arm_fault+0xc8>
   15b2e:	4912      	ldr	r1, [pc, #72]	; (15b78 <z_arm_fault+0x168>)
   15b30:	4b12      	ldr	r3, [pc, #72]	; (15b7c <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
   15b32:	481a      	ldr	r0, [pc, #104]	; (15b9c <z_arm_fault+0x18c>)
   15b34:	1ac9      	subs	r1, r1, r3
   15b36:	08c9      	lsrs	r1, r1, #3
   15b38:	0189      	lsls	r1, r1, #6
   15b3a:	f041 0101 	orr.w	r1, r1, #1
   15b3e:	e7b0      	b.n	15aa2 <z_arm_fault+0x92>
   15b40:	4a0e      	ldr	r2, [pc, #56]	; (15b7c <z_arm_fault+0x16c>)
   15b42:	4b0d      	ldr	r3, [pc, #52]	; (15b78 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
   15b44:	4816      	ldr	r0, [pc, #88]	; (15ba0 <z_arm_fault+0x190>)
   15b46:	4917      	ldr	r1, [pc, #92]	; (15ba4 <z_arm_fault+0x194>)
   15b48:	1a9b      	subs	r3, r3, r2
   15b4a:	08db      	lsrs	r3, r3, #3
   15b4c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   15b50:	ea4f 1383 	mov.w	r3, r3, lsl #6
   15b54:	bf18      	it	ne
   15b56:	4601      	movne	r1, r0
   15b58:	f043 0301 	orr.w	r3, r3, #1
   15b5c:	4812      	ldr	r0, [pc, #72]	; (15ba8 <z_arm_fault+0x198>)
   15b5e:	f1a4 0210 	sub.w	r2, r4, #16
   15b62:	f00a f961 	bl	1fe28 <log_2>
   15b66:	e79e      	b.n	15aa6 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15b68:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15b6c:	f023 0301 	bic.w	r3, r3, #1
   15b70:	e7cd      	b.n	15b0e <z_arm_fault+0xfe>
   15b72:	bf00      	nop
   15b74:	e000ed00 	.word	0xe000ed00
   15b78:	00022d88 	.word	0x00022d88
   15b7c:	00022cf0 	.word	0x00022cf0
   15b80:	00023ea7 	.word	0x00023ea7
   15b84:	00023ed2 	.word	0x00023ed2
   15b88:	00023ee9 	.word	0x00023ee9
   15b8c:	00023f0a 	.word	0x00023f0a
   15b90:	e000ed28 	.word	0xe000ed28
   15b94:	e000ed29 	.word	0xe000ed29
   15b98:	e000ed2a 	.word	0xe000ed2a
   15b9c:	00023f29 	.word	0x00023f29
   15ba0:	00023f74 	.word	0x00023f74
   15ba4:	00023f5f 	.word	0x00023f5f
   15ba8:	00023f8d 	.word	0x00023f8d

00015bac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15bac:	4a02      	ldr	r2, [pc, #8]	; (15bb8 <z_arm_fault_init+0xc>)
   15bae:	6953      	ldr	r3, [r2, #20]
   15bb0:	f043 0310 	orr.w	r3, r3, #16
   15bb4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   15bb6:	4770      	bx	lr
   15bb8:	e000ed00 	.word	0xe000ed00

00015bbc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15bbc:	4b04      	ldr	r3, [pc, #16]	; (15bd0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15bbe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15bc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   15bc2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15bc4:	d003      	beq.n	15bce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15bc6:	4903      	ldr	r1, [pc, #12]	; (15bd4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15bcc:	600a      	str	r2, [r1, #0]

00015bce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15bce:	4770      	bx	lr
	ldr r3, =_kernel
   15bd0:	20002e30 	.word	0x20002e30
	ldr r1, =_SCS_ICSR
   15bd4:	e000ed04 	.word	0xe000ed04

00015bd8 <z_arm_interrupt_init>:
   15bd8:	4804      	ldr	r0, [pc, #16]	; (15bec <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15bda:	2300      	movs	r3, #0
   15bdc:	2140      	movs	r1, #64	; 0x40
   15bde:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15be0:	3301      	adds	r3, #1
   15be2:	2b30      	cmp	r3, #48	; 0x30
   15be4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15be8:	d1f9      	bne.n	15bde <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15bea:	4770      	bx	lr
   15bec:	e000e100 	.word	0xe000e100

00015bf0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   15bf0:	b508      	push	{r3, lr}
	if (_current == thread) {
   15bf2:	4b0e      	ldr	r3, [pc, #56]	; (15c2c <z_impl_k_thread_abort+0x3c>)
   15bf4:	689b      	ldr	r3, [r3, #8]
   15bf6:	4283      	cmp	r3, r0
   15bf8:	d107      	bne.n	15c0a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15bfa:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15bfe:	b193      	cbz	r3, 15c26 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15c00:	4a0b      	ldr	r2, [pc, #44]	; (15c30 <z_impl_k_thread_abort+0x40>)
   15c02:	6853      	ldr	r3, [r2, #4]
   15c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15c08:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   15c0a:	f007 ff93 	bl	1db34 <z_thread_single_abort>
	__asm__ volatile(
   15c0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c12:	f3ef 8011 	mrs	r0, BASEPRI
   15c16:	f383 8811 	msr	BASEPRI, r3
   15c1a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   15c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   15c22:	f00c bbb3 	b.w	2238c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   15c26:	f008 fa7f 	bl	1e128 <z_self_abort>
   15c2a:	bf00      	nop
   15c2c:	20002e30 	.word	0x20002e30
   15c30:	e000ed00 	.word	0xe000ed00

00015c34 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15c34:	4b02      	ldr	r3, [pc, #8]	; (15c40 <z_arm_configure_static_mpu_regions+0xc>)
   15c36:	4a03      	ldr	r2, [pc, #12]	; (15c44 <z_arm_configure_static_mpu_regions+0x10>)
   15c38:	4803      	ldr	r0, [pc, #12]	; (15c48 <z_arm_configure_static_mpu_regions+0x14>)
   15c3a:	2101      	movs	r1, #1
   15c3c:	f000 b8b2 	b.w	15da4 <arm_core_mpu_configure_static_mpu_regions>
   15c40:	20040000 	.word	0x20040000
   15c44:	20000000 	.word	0x20000000
   15c48:	00022f4c 	.word	0x00022f4c

00015c4c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15c4c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15c4e:	4b05      	ldr	r3, [pc, #20]	; (15c64 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   15c50:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   15c52:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15c54:	4a04      	ldr	r2, [pc, #16]	; (15c68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15c56:	2120      	movs	r1, #32
   15c58:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15c5c:	4618      	mov	r0, r3
   15c5e:	2101      	movs	r1, #1
   15c60:	f000 b8aa 	b.w	15db8 <arm_core_mpu_configure_dynamic_mpu_regions>
   15c64:	20002b68 	.word	0x20002b68
   15c68:	150b0000 	.word	0x150b0000

00015c6c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   15c6e:	4f28      	ldr	r7, [pc, #160]	; (15d10 <mpu_configure_regions+0xa4>)
   15c70:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   15c72:	2100      	movs	r1, #0
   15c74:	42b1      	cmp	r1, r6
   15c76:	da14      	bge.n	15ca2 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   15c78:	6844      	ldr	r4, [r0, #4]
   15c7a:	2c00      	cmp	r4, #0
   15c7c:	d045      	beq.n	15d0a <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15c7e:	b1c3      	cbz	r3, 15cb2 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15c80:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15c84:	ea14 0f0c 	tst.w	r4, ip
   15c88:	d00d      	beq.n	15ca6 <mpu_configure_regions+0x3a>
   15c8a:	4a22      	ldr	r2, [pc, #136]	; (15d14 <mpu_configure_regions+0xa8>)
   15c8c:	4b22      	ldr	r3, [pc, #136]	; (15d18 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15c8e:	4823      	ldr	r0, [pc, #140]	; (15d1c <mpu_configure_regions+0xb0>)
   15c90:	1ad2      	subs	r2, r2, r3
   15c92:	08d2      	lsrs	r2, r2, #3
   15c94:	0192      	lsls	r2, r2, #6
   15c96:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15c9a:	f00a f8b1 	bl	1fe00 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15c9e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15ca2:	4610      	mov	r0, r2
   15ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   15ca6:	2c1f      	cmp	r4, #31
   15ca8:	d9ef      	bls.n	15c8a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   15caa:	6805      	ldr	r5, [r0, #0]
		&&
   15cac:	ea1c 0f05 	tst.w	ip, r5
   15cb0:	d1eb      	bne.n	15c8a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15cb2:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15cb4:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   15cb6:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   15cba:	6802      	ldr	r2, [r0, #0]
   15cbc:	d916      	bls.n	15cec <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   15cbe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15cc2:	d815      	bhi.n	15cf0 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15cc4:	3c01      	subs	r4, #1
   15cc6:	fab4 f484 	clz	r4, r4
   15cca:	f1c4 041f 	rsb	r4, r4, #31
   15cce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15cd0:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15cd2:	ea4c 0404 	orr.w	r4, ip, r4
   15cd6:	d90d      	bls.n	15cf4 <mpu_configure_regions+0x88>
   15cd8:	4a0e      	ldr	r2, [pc, #56]	; (15d14 <mpu_configure_regions+0xa8>)
   15cda:	4b0f      	ldr	r3, [pc, #60]	; (15d18 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15cdc:	4810      	ldr	r0, [pc, #64]	; (15d20 <mpu_configure_regions+0xb4>)
   15cde:	1ad2      	subs	r2, r2, r3
   15ce0:	08d2      	lsrs	r2, r2, #3
   15ce2:	0192      	lsls	r2, r2, #6
   15ce4:	f042 0201 	orr.w	r2, r2, #1
   15ce8:	4629      	mov	r1, r5
   15cea:	e7d6      	b.n	15c9a <mpu_configure_regions+0x2e>
		return REGION_32B;
   15cec:	2408      	movs	r4, #8
   15cee:	e7ef      	b.n	15cd0 <mpu_configure_regions+0x64>
		return REGION_4G;
   15cf0:	243e      	movs	r4, #62	; 0x3e
   15cf2:	e7ed      	b.n	15cd0 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15cf4:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   15cf8:	432a      	orrs	r2, r5
   15cfa:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15cfe:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   15d02:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d04:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15d06:	613c      	str	r4, [r7, #16]
		reg_index++;
   15d08:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   15d0a:	3101      	adds	r1, #1
   15d0c:	300c      	adds	r0, #12
   15d0e:	e7b1      	b.n	15c74 <mpu_configure_regions+0x8>
   15d10:	e000ed90 	.word	0xe000ed90
   15d14:	00022d78 	.word	0x00022d78
   15d18:	00022cf0 	.word	0x00022cf0
   15d1c:	00023fa4 	.word	0x00023fa4
   15d20:	00023fc7 	.word	0x00023fc7

00015d24 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15d24:	4b03      	ldr	r3, [pc, #12]	; (15d34 <arm_core_mpu_enable+0x10>)
   15d26:	2205      	movs	r2, #5
   15d28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15d2e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15d32:	4770      	bx	lr
   15d34:	e000ed90 	.word	0xe000ed90

00015d38 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   15d38:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15d3c:	4b01      	ldr	r3, [pc, #4]	; (15d44 <arm_core_mpu_disable+0xc>)
   15d3e:	2200      	movs	r2, #0
   15d40:	605a      	str	r2, [r3, #4]
}
   15d42:	4770      	bx	lr
   15d44:	e000ed90 	.word	0xe000ed90

00015d48 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15d48:	4913      	ldr	r1, [pc, #76]	; (15d98 <arm_mpu_init+0x50>)
   15d4a:	6808      	ldr	r0, [r1, #0]
   15d4c:	2808      	cmp	r0, #8
{
   15d4e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15d50:	d81e      	bhi.n	15d90 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15d52:	f7ff fff1 	bl	15d38 <arm_core_mpu_disable>
	MPU->RNR = index;
   15d56:	4c11      	ldr	r4, [pc, #68]	; (15d9c <arm_mpu_init+0x54>)
   15d58:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15d5a:	2200      	movs	r2, #0
   15d5c:	4290      	cmp	r0, r2
   15d5e:	f101 010c 	add.w	r1, r1, #12
   15d62:	d105      	bne.n	15d70 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15d64:	4b0e      	ldr	r3, [pc, #56]	; (15da0 <arm_mpu_init+0x58>)
   15d66:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   15d68:	f7ff ffdc 	bl	15d24 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   15d6c:	2000      	movs	r0, #0
}
   15d6e:	bd10      	pop	{r4, pc}
   15d70:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d72:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   15d76:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15d7a:	4313      	orrs	r3, r2
   15d7c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d80:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15d86:	f043 0301 	orr.w	r3, r3, #1
   15d8a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15d8c:	3201      	adds	r2, #1
   15d8e:	e7e5      	b.n	15d5c <arm_mpu_init+0x14>
		return -1;
   15d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d94:	e7eb      	b.n	15d6e <arm_mpu_init+0x26>
   15d96:	bf00      	nop
   15d98:	00022f58 	.word	0x00022f58
   15d9c:	e000ed90 	.word	0xe000ed90
   15da0:	20003880 	.word	0x20003880

00015da4 <arm_core_mpu_configure_static_mpu_regions>:
{
   15da4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15da6:	4c03      	ldr	r4, [pc, #12]	; (15db4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15da8:	2301      	movs	r3, #1
   15daa:	7822      	ldrb	r2, [r4, #0]
   15dac:	f7ff ff5e 	bl	15c6c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15db0:	7020      	strb	r0, [r4, #0]
}
   15db2:	bd10      	pop	{r4, pc}
   15db4:	20003880 	.word	0x20003880

00015db8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   15db8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15dba:	4a08      	ldr	r2, [pc, #32]	; (15ddc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   15dbc:	2300      	movs	r3, #0
   15dbe:	7812      	ldrb	r2, [r2, #0]
   15dc0:	f7ff ff54 	bl	15c6c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15dc4:	f110 0f16 	cmn.w	r0, #22
   15dc8:	d003      	beq.n	15dd2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15dca:	4b05      	ldr	r3, [pc, #20]	; (15de0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   15dcc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15dce:	2807      	cmp	r0, #7
   15dd0:	dd00      	ble.n	15dd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   15dd2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15dd4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   15dd6:	611a      	str	r2, [r3, #16]
   15dd8:	3001      	adds	r0, #1
   15dda:	e7f8      	b.n	15dce <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   15ddc:	20003880 	.word	0x20003880
   15de0:	e000ed90 	.word	0xe000ed90

00015de4 <nordicsemi_nrf52_init>:
   15de4:	f04f 0340 	mov.w	r3, #64	; 0x40
   15de8:	f3ef 8211 	mrs	r2, BASEPRI
   15dec:	f383 8811 	msr	BASEPRI, r3
   15df0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15df4:	4906      	ldr	r1, [pc, #24]	; (15e10 <nordicsemi_nrf52_init+0x2c>)
   15df6:	2301      	movs	r3, #1
   15df8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15e00:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15e04:	f382 8811 	msr	BASEPRI, r2
   15e08:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15e0c:	2000      	movs	r0, #0
   15e0e:	4770      	bx	lr
   15e10:	4001e000 	.word	0x4001e000

00015e14 <sys_arch_reboot>:
    *p_gpregret = val;
   15e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15e18:	b2c0      	uxtb	r0, r0
   15e1a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15e1e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15e22:	4905      	ldr	r1, [pc, #20]	; (15e38 <sys_arch_reboot+0x24>)
   15e24:	4b05      	ldr	r3, [pc, #20]	; (15e3c <sys_arch_reboot+0x28>)
   15e26:	68ca      	ldr	r2, [r1, #12]
   15e28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15e2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15e2e:	60cb      	str	r3, [r1, #12]
   15e30:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15e34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15e36:	e7fd      	b.n	15e34 <sys_arch_reboot+0x20>
   15e38:	e000ed00 	.word	0xe000ed00
   15e3c:	05fa0004 	.word	0x05fa0004

00015e40 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15e40:	b120      	cbz	r0, 15e4c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   15e42:	4b03      	ldr	r3, [pc, #12]	; (15e50 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15e44:	0180      	lsls	r0, r0, #6
   15e46:	f043 0301 	orr.w	r3, r3, #1
   15e4a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15e4c:	4770      	bx	lr
   15e4e:	bf00      	nop
   15e50:	00022e50 	.word	0x00022e50

00015e54 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   15e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15e58:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   15e5c:	07db      	lsls	r3, r3, #31
   15e5e:	d52e      	bpl.n	15ebe <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   15e60:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   15e64:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   15e68:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   15e6c:	2b07      	cmp	r3, #7
   15e6e:	d126      	bne.n	15ebe <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   15e70:	4b14      	ldr	r3, [pc, #80]	; (15ec4 <board_nrf52840dongle_nrf52840_init+0x70>)
   15e72:	2201      	movs	r2, #1
   15e74:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   15e78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   15e7c:	2a00      	cmp	r2, #0
   15e7e:	d0fb      	beq.n	15e78 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   15e80:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   15e84:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   15e88:	f022 0207 	bic.w	r2, r2, #7
   15e8c:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
   15e90:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   15e94:	2200      	movs	r2, #0
   15e96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   15e9a:	4a0a      	ldr	r2, [pc, #40]	; (15ec4 <board_nrf52840dongle_nrf52840_init+0x70>)
   15e9c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	d0fb      	beq.n	15e9c <board_nrf52840dongle_nrf52840_init+0x48>
   15ea4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15ea8:	4907      	ldr	r1, [pc, #28]	; (15ec8 <board_nrf52840dongle_nrf52840_init+0x74>)
   15eaa:	4b08      	ldr	r3, [pc, #32]	; (15ecc <board_nrf52840dongle_nrf52840_init+0x78>)
   15eac:	68ca      	ldr	r2, [r1, #12]
   15eae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15eb2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15eb4:	60cb      	str	r3, [r1, #12]
   15eb6:	f3bf 8f4f 	dsb	sy
    __NOP();
   15eba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15ebc:	e7fd      	b.n	15eba <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   15ebe:	2000      	movs	r0, #0
   15ec0:	4770      	bx	lr
   15ec2:	bf00      	nop
   15ec4:	4001e000 	.word	0x4001e000
   15ec8:	e000ed00 	.word	0xe000ed00
   15ecc:	05fa0004 	.word	0x05fa0004

00015ed0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15ed0:	4b0e      	ldr	r3, [pc, #56]	; (15f0c <bt_hex_real+0x3c>)
   15ed2:	2940      	cmp	r1, #64	; 0x40
{
   15ed4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15ed6:	bf28      	it	cs
   15ed8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   15eda:	4c0d      	ldr	r4, [pc, #52]	; (15f10 <bt_hex_real+0x40>)
   15edc:	1846      	adds	r6, r0, r1
   15ede:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15ee0:	42b0      	cmp	r0, r6
   15ee2:	f103 0302 	add.w	r3, r3, #2
   15ee6:	d104      	bne.n	15ef2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15ee8:	2300      	movs	r3, #0
   15eea:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15eee:	4807      	ldr	r0, [pc, #28]	; (15f0c <bt_hex_real+0x3c>)
   15ef0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   15ef2:	7802      	ldrb	r2, [r0, #0]
   15ef4:	0912      	lsrs	r2, r2, #4
   15ef6:	5ca2      	ldrb	r2, [r4, r2]
   15ef8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15efc:	f810 2b01 	ldrb.w	r2, [r0], #1
   15f00:	f002 020f 	and.w	r2, r2, #15
   15f04:	5ca2      	ldrb	r2, [r4, r2]
   15f06:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15f0a:	e7e9      	b.n	15ee0 <bt_hex_real+0x10>
   15f0c:	20003881 	.word	0x20003881
   15f10:	00024000 	.word	0x00024000

00015f14 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15f14:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15f16:	7803      	ldrb	r3, [r0, #0]
   15f18:	b08b      	sub	sp, #44	; 0x2c
   15f1a:	4604      	mov	r4, r0
   15f1c:	ad07      	add	r5, sp, #28
   15f1e:	2b03      	cmp	r3, #3
   15f20:	d821      	bhi.n	15f66 <bt_addr_le_str_real+0x52>
   15f22:	e8df f003 	tbb	[pc, r3]
   15f26:	1a02      	.short	0x1a02
   15f28:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15f2a:	4912      	ldr	r1, [pc, #72]	; (15f74 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   15f2c:	4628      	mov	r0, r5
   15f2e:	f00a fb21 	bl	20574 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15f32:	7863      	ldrb	r3, [r4, #1]
   15f34:	9304      	str	r3, [sp, #16]
   15f36:	78a3      	ldrb	r3, [r4, #2]
   15f38:	9303      	str	r3, [sp, #12]
   15f3a:	78e3      	ldrb	r3, [r4, #3]
   15f3c:	9302      	str	r3, [sp, #8]
   15f3e:	7923      	ldrb	r3, [r4, #4]
   15f40:	9301      	str	r3, [sp, #4]
   15f42:	7963      	ldrb	r3, [r4, #5]
   15f44:	9300      	str	r3, [sp, #0]
   15f46:	4a0c      	ldr	r2, [pc, #48]	; (15f78 <bt_addr_le_str_real+0x64>)
   15f48:	79a3      	ldrb	r3, [r4, #6]
   15f4a:	9505      	str	r5, [sp, #20]
   15f4c:	211e      	movs	r1, #30
   15f4e:	480b      	ldr	r0, [pc, #44]	; (15f7c <bt_addr_le_str_real+0x68>)
   15f50:	f009 fb2d 	bl	1f5ae <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15f54:	4809      	ldr	r0, [pc, #36]	; (15f7c <bt_addr_le_str_real+0x68>)
   15f56:	b00b      	add	sp, #44	; 0x2c
   15f58:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15f5a:	4909      	ldr	r1, [pc, #36]	; (15f80 <bt_addr_le_str_real+0x6c>)
   15f5c:	e7e6      	b.n	15f2c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   15f5e:	4909      	ldr	r1, [pc, #36]	; (15f84 <bt_addr_le_str_real+0x70>)
   15f60:	e7e4      	b.n	15f2c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   15f62:	4909      	ldr	r1, [pc, #36]	; (15f88 <bt_addr_le_str_real+0x74>)
   15f64:	e7e2      	b.n	15f2c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15f66:	4a09      	ldr	r2, [pc, #36]	; (15f8c <bt_addr_le_str_real+0x78>)
   15f68:	210a      	movs	r1, #10
   15f6a:	4628      	mov	r0, r5
   15f6c:	f009 fb1f 	bl	1f5ae <snprintk>
		break;
   15f70:	e7df      	b.n	15f32 <bt_addr_le_str_real+0x1e>
   15f72:	bf00      	nop
   15f74:	000234d2 	.word	0x000234d2
   15f78:	000234f4 	.word	0x000234f4
   15f7c:	20003902 	.word	0x20003902
   15f80:	000234d9 	.word	0x000234d9
   15f84:	000234e0 	.word	0x000234e0
   15f88:	000234ea 	.word	0x000234ea
   15f8c:	00024ce9 	.word	0x00024ce9

00015f90 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15f90:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   15f92:	7802      	ldrb	r2, [r0, #0]
   15f94:	2a01      	cmp	r2, #1
{
   15f96:	4604      	mov	r4, r0
   15f98:	460b      	mov	r3, r1
	switch (src->type) {
   15f9a:	d016      	beq.n	15fca <uuid_to_uuid128+0x3a>
   15f9c:	2a02      	cmp	r2, #2
   15f9e:	d02c      	beq.n	15ffa <uuid_to_uuid128+0x6a>
   15fa0:	b98a      	cbnz	r2, 15fc6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15fa2:	4a19      	ldr	r2, [pc, #100]	; (16008 <uuid_to_uuid128+0x78>)
   15fa4:	460d      	mov	r5, r1
   15fa6:	f102 0710 	add.w	r7, r2, #16
   15faa:	6810      	ldr	r0, [r2, #0]
   15fac:	6851      	ldr	r1, [r2, #4]
   15fae:	462e      	mov	r6, r5
   15fb0:	c603      	stmia	r6!, {r0, r1}
   15fb2:	3208      	adds	r2, #8
   15fb4:	42ba      	cmp	r2, r7
   15fb6:	4635      	mov	r5, r6
   15fb8:	d1f7      	bne.n	15faa <uuid_to_uuid128+0x1a>
   15fba:	7812      	ldrb	r2, [r2, #0]
   15fbc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15fbe:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   15fc0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   15fc2:	0a12      	lsrs	r2, r2, #8
   15fc4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15fc6:	bcf0      	pop	{r4, r5, r6, r7}
   15fc8:	4770      	bx	lr
		*dst = uuid128_base;
   15fca:	4a0f      	ldr	r2, [pc, #60]	; (16008 <uuid_to_uuid128+0x78>)
   15fcc:	460d      	mov	r5, r1
   15fce:	f102 0710 	add.w	r7, r2, #16
   15fd2:	6810      	ldr	r0, [r2, #0]
   15fd4:	6851      	ldr	r1, [r2, #4]
   15fd6:	462e      	mov	r6, r5
   15fd8:	c603      	stmia	r6!, {r0, r1}
   15fda:	3208      	adds	r2, #8
   15fdc:	42ba      	cmp	r2, r7
   15fde:	4635      	mov	r5, r6
   15fe0:	d1f7      	bne.n	15fd2 <uuid_to_uuid128+0x42>
   15fe2:	7812      	ldrb	r2, [r2, #0]
   15fe4:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15fe6:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   15fe8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   15fea:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   15fee:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   15ff0:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   15ff2:	0a12      	lsrs	r2, r2, #8
   15ff4:	7399      	strb	r1, [r3, #14]
   15ff6:	741a      	strb	r2, [r3, #16]
}
   15ff8:	e7e5      	b.n	15fc6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   15ffa:	4601      	mov	r1, r0
}
   15ffc:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   15ffe:	2211      	movs	r2, #17
   16000:	4618      	mov	r0, r3
   16002:	f00a bb17 	b.w	20634 <memcpy>
   16006:	bf00      	nop
   16008:	00024018 	.word	0x00024018

0001600c <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1600c:	b538      	push	{r3, r4, r5, lr}
   1600e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16010:	4805      	ldr	r0, [pc, #20]	; (16028 <bt_buf_get_rx+0x1c>)
   16012:	f00b fccf 	bl	219b4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16016:	4604      	mov	r4, r0
   16018:	b120      	cbz	r0, 16024 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1601a:	2100      	movs	r1, #0
   1601c:	3008      	adds	r0, #8
   1601e:	f00b fce8 	bl	219f2 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16022:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16024:	4620      	mov	r0, r4
   16026:	bd38      	pop	{r3, r4, r5, pc}
   16028:	20000a58 	.word	0x20000a58

0001602c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1602c:	b570      	push	{r4, r5, r6, lr}
   1602e:	4602      	mov	r2, r0
   16030:	460b      	mov	r3, r1
	__asm__ volatile(
   16032:	f04f 0140 	mov.w	r1, #64	; 0x40
   16036:	f3ef 8511 	mrs	r5, BASEPRI
   1603a:	f381 8811 	msr	BASEPRI, r1
   1603e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   16042:	480c      	ldr	r0, [pc, #48]	; (16074 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   16044:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   16046:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
   1604a:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
	__asm__ volatile(
   1604e:	f385 8811 	msr	BASEPRI, r5
   16052:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   16056:	b924      	cbnz	r4, 16062 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1605c:	2001      	movs	r0, #1
   1605e:	f7ff bfd5 	b.w	1600c <bt_buf_get_rx>
   16062:	2301      	movs	r3, #1
   16064:	f104 0008 	add.w	r0, r4, #8
   16068:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1606a:	81a1      	strh	r1, [r4, #12]
   1606c:	f00b fcc1 	bl	219f2 <net_buf_simple_reserve>
}
   16070:	4620      	mov	r0, r4
   16072:	bd70      	pop	{r4, r5, r6, pc}
   16074:	200003c8 	.word	0x200003c8

00016078 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16078:	b570      	push	{r4, r5, r6, lr}
   1607a:	4604      	mov	r4, r0
	switch (evt) {
   1607c:	2c0f      	cmp	r4, #15
{
   1607e:	460d      	mov	r5, r1
   16080:	4610      	mov	r0, r2
   16082:	4619      	mov	r1, r3
	switch (evt) {
   16084:	d805      	bhi.n	16092 <bt_buf_get_evt+0x1a>
   16086:	2c0d      	cmp	r4, #13
   16088:	d912      	bls.n	160b0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1608a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1608e:	f7ff bfcd 	b.w	1602c <bt_buf_get_cmd_complete>
	switch (evt) {
   16092:	2c13      	cmp	r4, #19
   16094:	d10c      	bne.n	160b0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   16096:	480b      	ldr	r0, [pc, #44]	; (160c4 <bt_buf_get_evt+0x4c>)
   16098:	f00b fc8c 	bl	219b4 <net_buf_alloc_fixed>
			if (buf) {
   1609c:	4604      	mov	r4, r0
   1609e:	b128      	cbz	r0, 160ac <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   160a0:	2100      	movs	r1, #0
   160a2:	3008      	adds	r0, #8
   160a4:	f00b fca5 	bl	219f2 <net_buf_simple_reserve>
   160a8:	2301      	movs	r3, #1
   160aa:	7523      	strb	r3, [r4, #20]
}
   160ac:	4620      	mov	r0, r4
   160ae:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   160b0:	4602      	mov	r2, r0
   160b2:	460b      	mov	r3, r1
		if (discardable) {
   160b4:	b10d      	cbz	r5, 160ba <bt_buf_get_evt+0x42>
   160b6:	4804      	ldr	r0, [pc, #16]	; (160c8 <bt_buf_get_evt+0x50>)
   160b8:	e7ee      	b.n	16098 <bt_buf_get_evt+0x20>
}
   160ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   160be:	2001      	movs	r0, #1
   160c0:	f7ff bfa4 	b.w	1600c <bt_buf_get_rx>
   160c4:	20000a80 	.word	0x20000a80
   160c8:	200009e0 	.word	0x200009e0

000160cc <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   160cc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   160ce:	4d0b      	ldr	r5, [pc, #44]	; (160fc <ver_str+0x30>)
{
   160d0:	4606      	mov	r6, r0
	const char * const str[] = {
   160d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   160d4:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   160d6:	466c      	mov	r4, sp
   160d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   160da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   160dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   160de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   160e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
   160e6:	2e0b      	cmp	r6, #11
		return str[ver];
   160e8:	bf9b      	ittet	ls
   160ea:	ab0c      	addls	r3, sp, #48	; 0x30
   160ec:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   160f0:	4803      	ldrhi	r0, [pc, #12]	; (16100 <ver_str+0x34>)
		return str[ver];
   160f2:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   160f6:	b00c      	add	sp, #48	; 0x30
   160f8:	bd70      	pop	{r4, r5, r6, pc}
   160fa:	bf00      	nop
   160fc:	00022df0 	.word	0x00022df0
   16100:	0002411b 	.word	0x0002411b

00016104 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   16104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16106:	4f0a      	ldr	r7, [pc, #40]	; (16130 <id_find+0x2c>)
{
   16108:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1610a:	2500      	movs	r5, #0
   1610c:	79fb      	ldrb	r3, [r7, #7]
   1610e:	b2ec      	uxtb	r4, r5
   16110:	42a3      	cmp	r3, r4
   16112:	d802      	bhi.n	1611a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16114:	f06f 0401 	mvn.w	r4, #1
   16118:	e008      	b.n	1612c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1611a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1611e:	4439      	add	r1, r7
   16120:	4630      	mov	r0, r6
   16122:	f00a fb61 	bl	207e8 <bt_addr_le_cmp>
   16126:	3501      	adds	r5, #1
   16128:	2800      	cmp	r0, #0
   1612a:	d1ef      	bne.n	1610c <id_find+0x8>
}
   1612c:	4620      	mov	r0, r4
   1612e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16130:	200003c8 	.word	0x200003c8

00016134 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16134:	6843      	ldr	r3, [r0, #4]
{
   16136:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16138:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1613a:	0558      	lsls	r0, r3, #21
   1613c:	d502      	bpl.n	16144 <valid_adv_param+0x10>
		return false;
   1613e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   16140:	b003      	add	sp, #12
   16142:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16144:	6922      	ldr	r2, [r4, #16]
   16146:	b10a      	cbz	r2, 1614c <valid_adv_param+0x18>
   16148:	07d9      	lsls	r1, r3, #31
   1614a:	d5f8      	bpl.n	1613e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1614c:	4d1a      	ldr	r5, [pc, #104]	; (161b8 <valid_adv_param+0x84>)
   1614e:	7820      	ldrb	r0, [r4, #0]
   16150:	79eb      	ldrb	r3, [r5, #7]
   16152:	4283      	cmp	r3, r0
   16154:	d9f3      	bls.n	1613e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16156:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1615a:	2300      	movs	r3, #0
   1615c:	4669      	mov	r1, sp
   1615e:	4428      	add	r0, r5
   16160:	9300      	str	r3, [sp, #0]
   16162:	f8cd 3003 	str.w	r3, [sp, #3]
   16166:	f00a fb3f 	bl	207e8 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   1616a:	2800      	cmp	r0, #0
   1616c:	d0e7      	beq.n	1613e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1616e:	6860      	ldr	r0, [r4, #4]
   16170:	07c2      	lsls	r2, r0, #31
   16172:	d406      	bmi.n	16182 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16174:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   16178:	2b08      	cmp	r3, #8
   1617a:	d802      	bhi.n	16182 <valid_adv_param+0x4e>
   1617c:	68a3      	ldr	r3, [r4, #8]
   1617e:	2b9f      	cmp	r3, #159	; 0x9f
   16180:	d9dd      	bls.n	1613e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   16182:	f010 0f30 	tst.w	r0, #48	; 0x30
   16186:	d002      	beq.n	1618e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16188:	6923      	ldr	r3, [r4, #16]
   1618a:	2b00      	cmp	r3, #0
   1618c:	d0d7      	beq.n	1613e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1618e:	06c3      	lsls	r3, r0, #27
   16190:	d401      	bmi.n	16196 <valid_adv_param+0x62>
   16192:	6923      	ldr	r3, [r4, #16]
   16194:	b943      	cbnz	r3, 161a8 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   16196:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1619a:	429a      	cmp	r2, r3
   1619c:	d8cf      	bhi.n	1613e <valid_adv_param+0xa>
   1619e:	2a1f      	cmp	r2, #31
   161a0:	d9cd      	bls.n	1613e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   161a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   161a6:	d8ca      	bhi.n	1613e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   161a8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   161ac:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   161b0:	bf18      	it	ne
   161b2:	2001      	movne	r0, #1
   161b4:	e7c4      	b.n	16140 <valid_adv_param+0xc>
   161b6:	bf00      	nop
   161b8:	200003c8 	.word	0x200003c8

000161bc <hci_data_buf_overflow>:
   161bc:	4905      	ldr	r1, [pc, #20]	; (161d4 <hci_data_buf_overflow+0x18>)
   161be:	4a06      	ldr	r2, [pc, #24]	; (161d8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   161c0:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   161c2:	4806      	ldr	r0, [pc, #24]	; (161dc <hci_data_buf_overflow+0x20>)
   161c4:	1a52      	subs	r2, r2, r1
   161c6:	08d2      	lsrs	r2, r2, #3
   161c8:	0192      	lsls	r2, r2, #6
   161ca:	7819      	ldrb	r1, [r3, #0]
   161cc:	f042 0202 	orr.w	r2, r2, #2
   161d0:	f009 be16 	b.w	1fe00 <log_1>
   161d4:	00022cf0 	.word	0x00022cf0
   161d8:	00022d18 	.word	0x00022d18
   161dc:	00024123 	.word	0x00024123

000161e0 <hci_disconn_complete_prio>:
{
   161e0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   161e2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   161e4:	781a      	ldrb	r2, [r3, #0]
   161e6:	b9da      	cbnz	r2, 16220 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161e8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   161ec:	4628      	mov	r0, r5
   161ee:	f002 fa3d 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   161f2:	4604      	mov	r4, r0
   161f4:	b960      	cbnz	r0, 16210 <hci_disconn_complete_prio+0x30>
   161f6:	4b0b      	ldr	r3, [pc, #44]	; (16224 <hci_disconn_complete_prio+0x44>)
   161f8:	4a0b      	ldr	r2, [pc, #44]	; (16228 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   161fa:	480c      	ldr	r0, [pc, #48]	; (1622c <hci_disconn_complete_prio+0x4c>)
   161fc:	1ad2      	subs	r2, r2, r3
   161fe:	08d2      	lsrs	r2, r2, #3
   16200:	0192      	lsls	r2, r2, #6
   16202:	4629      	mov	r1, r5
   16204:	f042 0201 	orr.w	r2, r2, #1
}
   16208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1620c:	f009 bdf8 	b.w	1fe00 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16210:	2101      	movs	r1, #1
   16212:	f002 fa37 	bl	18684 <bt_conn_set_state>
	bt_conn_unref(conn);
   16216:	4620      	mov	r0, r4
}
   16218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1621c:	f00a bc46 	b.w	20aac <bt_conn_unref>
}
   16220:	bd38      	pop	{r3, r4, r5, pc}
   16222:	bf00      	nop
   16224:	00022cf0 	.word	0x00022cf0
   16228:	00022d18 	.word	0x00022d18
   1622c:	0002414b 	.word	0x0002414b

00016230 <hci_disconn_complete>:
{
   16230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16232:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   16234:	7835      	ldrb	r5, [r6, #0]
   16236:	b9f5      	cbnz	r5, 16276 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16238:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   1623c:	4638      	mov	r0, r7
   1623e:	f002 fa15 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   16242:	4604      	mov	r4, r0
   16244:	b960      	cbnz	r0, 16260 <hci_disconn_complete+0x30>
   16246:	4b0c      	ldr	r3, [pc, #48]	; (16278 <hci_disconn_complete+0x48>)
   16248:	4a0c      	ldr	r2, [pc, #48]	; (1627c <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   1624a:	480d      	ldr	r0, [pc, #52]	; (16280 <hci_disconn_complete+0x50>)
   1624c:	1ad2      	subs	r2, r2, r3
   1624e:	08d2      	lsrs	r2, r2, #3
   16250:	0192      	lsls	r2, r2, #6
   16252:	4639      	mov	r1, r7
   16254:	f042 0201 	orr.w	r2, r2, #1
}
   16258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1625c:	f009 bdd0 	b.w	1fe00 <log_1>
	conn->err = evt->reason;
   16260:	78f3      	ldrb	r3, [r6, #3]
   16262:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16264:	4629      	mov	r1, r5
   16266:	f002 fa0d 	bl	18684 <bt_conn_set_state>
	conn->handle = 0U;
   1626a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1626c:	4620      	mov	r0, r4
}
   1626e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   16272:	f00a bc1b 	b.w	20aac <bt_conn_unref>
}
   16276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16278:	00022cf0 	.word	0x00022cf0
   1627c:	00022d18 	.word	0x00022d18
   16280:	0002414b 	.word	0x0002414b

00016284 <hci_hardware_error>:
{
   16284:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16286:	2101      	movs	r1, #1
   16288:	3008      	adds	r0, #8
   1628a:	f00b fc10 	bl	21aae <net_buf_simple_pull_mem>
   1628e:	4b06      	ldr	r3, [pc, #24]	; (162a8 <hci_hardware_error+0x24>)
   16290:	4a06      	ldr	r2, [pc, #24]	; (162ac <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16292:	7801      	ldrb	r1, [r0, #0]
   16294:	4806      	ldr	r0, [pc, #24]	; (162b0 <hci_hardware_error+0x2c>)
   16296:	1ad2      	subs	r2, r2, r3
   16298:	08d2      	lsrs	r2, r2, #3
   1629a:	0192      	lsls	r2, r2, #6
}
   1629c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   162a0:	f042 0201 	orr.w	r2, r2, #1
   162a4:	f009 bdac 	b.w	1fe00 <log_1>
   162a8:	00022cf0 	.word	0x00022cf0
   162ac:	00022d18 	.word	0x00022d18
   162b0:	00024171 	.word	0x00024171

000162b4 <hci_vendor_event>:
{
   162b4:	b510      	push	{r4, lr}
   162b6:	4a0a      	ldr	r2, [pc, #40]	; (162e0 <hci_vendor_event+0x2c>)
   162b8:	4c0a      	ldr	r4, [pc, #40]	; (162e4 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   162ba:	8981      	ldrh	r1, [r0, #12]
   162bc:	6880      	ldr	r0, [r0, #8]
   162be:	1aa4      	subs	r4, r4, r2
   162c0:	f7ff fe06 	bl	15ed0 <bt_hex_real>
   162c4:	f7fe fa30 	bl	14728 <log_strdup>
   162c8:	08e4      	lsrs	r4, r4, #3
   162ca:	01a4      	lsls	r4, r4, #6
   162cc:	f044 0402 	orr.w	r4, r4, #2
   162d0:	4601      	mov	r1, r0
   162d2:	4622      	mov	r2, r4
   162d4:	4804      	ldr	r0, [pc, #16]	; (162e8 <hci_vendor_event+0x34>)
}
   162d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   162da:	f009 bd91 	b.w	1fe00 <log_1>
   162de:	bf00      	nop
   162e0:	00022cf0 	.word	0x00022cf0
   162e4:	00022d18 	.word	0x00022d18
   162e8:	00024193 	.word	0x00024193

000162ec <le_data_len_change>:
{
   162ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   162f0:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   162f2:	881d      	ldrh	r5, [r3, #0]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   162f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
   162f8:	88df      	ldrh	r7, [r3, #6]
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
   162fa:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
   162fe:	891e      	ldrh	r6, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
   16300:	4628      	mov	r0, r5
   16302:	f002 f9b3 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   16306:	4604      	mov	r4, r0
   16308:	b960      	cbnz	r0, 16324 <le_data_len_change+0x38>
   1630a:	4b0e      	ldr	r3, [pc, #56]	; (16344 <le_data_len_change+0x58>)
   1630c:	4a0e      	ldr	r2, [pc, #56]	; (16348 <le_data_len_change+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1630e:	480f      	ldr	r0, [pc, #60]	; (1634c <le_data_len_change+0x60>)
   16310:	1ad2      	subs	r2, r2, r3
   16312:	08d2      	lsrs	r2, r2, #3
   16314:	0192      	lsls	r2, r2, #6
   16316:	4629      	mov	r1, r5
   16318:	f042 0201 	orr.w	r2, r2, #1
}
   1631c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16320:	f009 bd6e 	b.w	1fe00 <log_1>
	conn->le.data_len.tx_max_len = max_tx_octets;
   16324:	f8a0 90b8 	strh.w	r9, [r0, #184]	; 0xb8
	conn->le.data_len.tx_max_time = max_tx_time;
   16328:	f8a0 80ba 	strh.w	r8, [r0, #186]	; 0xba
	conn->le.data_len.rx_max_len = max_rx_octets;
   1632c:	f8a0 70bc 	strh.w	r7, [r0, #188]	; 0xbc
	conn->le.data_len.rx_max_time = max_rx_time;
   16330:	f8a0 60be 	strh.w	r6, [r0, #190]	; 0xbe
	notify_le_data_len_updated(conn);
   16334:	f001 ffde 	bl	182f4 <notify_le_data_len_updated>
	bt_conn_unref(conn);
   16338:	4620      	mov	r0, r4
}
   1633a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_conn_unref(conn);
   1633e:	f00a bbb5 	b.w	20aac <bt_conn_unref>
   16342:	bf00      	nop
   16344:	00022cf0 	.word	0x00022cf0
   16348:	00022d18 	.word	0x00022d18
   1634c:	000241b7 	.word	0x000241b7

00016350 <le_conn_update_complete>:
{
   16350:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16352:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16354:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16358:	4630      	mov	r0, r6
   1635a:	f002 f987 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   1635e:	4604      	mov	r4, r0
   16360:	b960      	cbnz	r0, 1637c <le_conn_update_complete+0x2c>
   16362:	4a1f      	ldr	r2, [pc, #124]	; (163e0 <le_conn_update_complete+0x90>)
   16364:	4b1f      	ldr	r3, [pc, #124]	; (163e4 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16366:	4820      	ldr	r0, [pc, #128]	; (163e8 <le_conn_update_complete+0x98>)
   16368:	1ad2      	subs	r2, r2, r3
   1636a:	08d2      	lsrs	r2, r2, #3
   1636c:	0192      	lsls	r2, r2, #6
   1636e:	f042 0201 	orr.w	r2, r2, #1
   16372:	4631      	mov	r1, r6
   16374:	f009 fd44 	bl	1fe00 <log_1>
}
   16378:	b002      	add	sp, #8
   1637a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1637c:	782b      	ldrb	r3, [r5, #0]
   1637e:	b9bb      	cbnz	r3, 163b0 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16380:	792a      	ldrb	r2, [r5, #4]
   16382:	78eb      	ldrb	r3, [r5, #3]
   16384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16388:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1638c:	79aa      	ldrb	r2, [r5, #6]
   1638e:	796b      	ldrb	r3, [r5, #5]
   16390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16394:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16398:	79eb      	ldrb	r3, [r5, #7]
   1639a:	7a2a      	ldrb	r2, [r5, #8]
   1639c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   163a0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   163a4:	f001 ff6e 	bl	18284 <notify_le_param_updated>
	bt_conn_unref(conn);
   163a8:	4620      	mov	r0, r4
   163aa:	f00a fb7f 	bl	20aac <bt_conn_unref>
   163ae:	e7e3      	b.n	16378 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   163b0:	2b1a      	cmp	r3, #26
   163b2:	d1f9      	bne.n	163a8 <le_conn_update_complete+0x58>
   163b4:	78c3      	ldrb	r3, [r0, #3]
   163b6:	2b01      	cmp	r3, #1
   163b8:	d1f6      	bne.n	163a8 <le_conn_update_complete+0x58>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   163ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
   163be:	3004      	adds	r0, #4
   163c0:	f00a fa15 	bl	207ee <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   163c4:	0543      	lsls	r3, r0, #21
   163c6:	d4ef      	bmi.n	163a8 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   163c8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   163cc:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   163ce:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   163d0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   163d4:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   163d6:	4620      	mov	r0, r4
   163d8:	f002 fdc4 	bl	18f64 <bt_l2cap_update_conn_param>
   163dc:	e7e4      	b.n	163a8 <le_conn_update_complete+0x58>
   163de:	bf00      	nop
   163e0:	00022d18 	.word	0x00022d18
   163e4:	00022cf0 	.word	0x00022cf0
   163e8:	000241b7 	.word	0x000241b7

000163ec <hci_cmd_done>:
{
   163ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   163f0:	4607      	mov	r7, r0
   163f2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   163f4:	7990      	ldrb	r0, [r2, #6]
   163f6:	4e34      	ldr	r6, [pc, #208]	; (164c8 <hci_cmd_done+0xdc>)
{
   163f8:	4688      	mov	r8, r1
   163fa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   163fc:	f004 fbe4 	bl	1abc8 <net_buf_pool_get>
   16400:	4286      	cmp	r6, r0
   16402:	d016      	beq.n	16432 <hci_cmd_done+0x46>
   16404:	4b31      	ldr	r3, [pc, #196]	; (164cc <hci_cmd_done+0xe0>)
   16406:	4d32      	ldr	r5, [pc, #200]	; (164d0 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   16408:	79a0      	ldrb	r0, [r4, #6]
   1640a:	9700      	str	r7, [sp, #0]
   1640c:	1aed      	subs	r5, r5, r3
   1640e:	08ed      	lsrs	r5, r5, #3
   16410:	9001      	str	r0, [sp, #4]
   16412:	f004 fbd9 	bl	1abc8 <net_buf_pool_get>
   16416:	01ad      	lsls	r5, r5, #6
   16418:	f045 0502 	orr.w	r5, r5, #2
   1641c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   16420:	462b      	mov	r3, r5
   16422:	482c      	ldr	r0, [pc, #176]	; (164d4 <hci_cmd_done+0xe8>)
   16424:	2204      	movs	r2, #4
   16426:	4669      	mov	r1, sp
   16428:	f009 fd33 	bl	1fe92 <log_n>
}
   1642c:	b005      	add	sp, #20
   1642e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16432:	4620      	mov	r0, r4
   16434:	f004 fbd0 	bl	1abd8 <net_buf_id>
   16438:	4d27      	ldr	r5, [pc, #156]	; (164d8 <hci_cmd_done+0xec>)
   1643a:	f04f 090c 	mov.w	r9, #12
   1643e:	fb09 5300 	mla	r3, r9, r0, r5
   16442:	885b      	ldrh	r3, [r3, #2]
   16444:	42bb      	cmp	r3, r7
   16446:	d011      	beq.n	1646c <hci_cmd_done+0x80>
   16448:	4b20      	ldr	r3, [pc, #128]	; (164cc <hci_cmd_done+0xe0>)
   1644a:	4e21      	ldr	r6, [pc, #132]	; (164d0 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1644c:	4620      	mov	r0, r4
   1644e:	1af6      	subs	r6, r6, r3
   16450:	f004 fbc2 	bl	1abd8 <net_buf_id>
   16454:	08f6      	lsrs	r6, r6, #3
   16456:	fb09 5000 	mla	r0, r9, r0, r5
   1645a:	01b6      	lsls	r6, r6, #6
   1645c:	f046 0602 	orr.w	r6, r6, #2
   16460:	8842      	ldrh	r2, [r0, #2]
   16462:	481e      	ldr	r0, [pc, #120]	; (164dc <hci_cmd_done+0xf0>)
   16464:	4633      	mov	r3, r6
   16466:	4639      	mov	r1, r7
   16468:	f009 fcde 	bl	1fe28 <log_2>
	if (cmd(buf)->state && !status) {
   1646c:	4620      	mov	r0, r4
   1646e:	f004 fbb3 	bl	1abd8 <net_buf_id>
   16472:	260c      	movs	r6, #12
   16474:	fb06 5000 	mla	r0, r6, r0, r5
   16478:	6843      	ldr	r3, [r0, #4]
   1647a:	b16b      	cbz	r3, 16498 <hci_cmd_done+0xac>
   1647c:	f1b8 0f00 	cmp.w	r8, #0
   16480:	d10a      	bne.n	16498 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16482:	4620      	mov	r0, r4
   16484:	f004 fba8 	bl	1abd8 <net_buf_id>
   16488:	fb06 5000 	mla	r0, r6, r0, r5
   1648c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1648e:	e9d3 0100 	ldrd	r0, r1, [r3]
   16492:	7a1a      	ldrb	r2, [r3, #8]
   16494:	f00a f9c9 	bl	2082a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   16498:	4620      	mov	r0, r4
   1649a:	f004 fb9d 	bl	1abd8 <net_buf_id>
   1649e:	260c      	movs	r6, #12
   164a0:	fb06 5000 	mla	r0, r6, r0, r5
   164a4:	6883      	ldr	r3, [r0, #8]
   164a6:	2b00      	cmp	r3, #0
   164a8:	d0c0      	beq.n	1642c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   164aa:	4620      	mov	r0, r4
   164ac:	f004 fb94 	bl	1abd8 <net_buf_id>
   164b0:	4370      	muls	r0, r6
   164b2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   164b6:	4620      	mov	r0, r4
   164b8:	f004 fb8e 	bl	1abd8 <net_buf_id>
   164bc:	fb06 5500 	mla	r5, r6, r0, r5
   164c0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   164c2:	f007 fd0d 	bl	1dee0 <z_impl_k_sem_give>
}
   164c6:	e7b1      	b.n	1642c <hci_cmd_done+0x40>
   164c8:	20000a30 	.word	0x20000a30
   164cc:	00022cf0 	.word	0x00022cf0
   164d0:	00022d18 	.word	0x00022d18
   164d4:	000241db 	.word	0x000241db
   164d8:	20002b74 	.word	0x20002b74
   164dc:	00024210 	.word	0x00024210

000164e0 <handle_event>:
{
   164e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   164e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   164e6:	4605      	mov	r5, r0
   164e8:	4608      	mov	r0, r1
		if (handler->event != event) {
   164ea:	7811      	ldrb	r1, [r2, #0]
   164ec:	42a9      	cmp	r1, r5
   164ee:	d01a      	beq.n	16526 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   164f0:	3208      	adds	r2, #8
   164f2:	429a      	cmp	r2, r3
   164f4:	d1f9      	bne.n	164ea <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   164f6:	8986      	ldrh	r6, [r0, #12]
   164f8:	4b16      	ldr	r3, [pc, #88]	; (16554 <handle_event+0x74>)
   164fa:	4c17      	ldr	r4, [pc, #92]	; (16558 <handle_event+0x78>)
   164fc:	6880      	ldr	r0, [r0, #8]
   164fe:	4631      	mov	r1, r6
   16500:	1ae4      	subs	r4, r4, r3
   16502:	f7ff fce5 	bl	15ed0 <bt_hex_real>
   16506:	f7fe f90f 	bl	14728 <log_strdup>
   1650a:	08e4      	lsrs	r4, r4, #3
   1650c:	01a4      	lsls	r4, r4, #6
   1650e:	f044 0402 	orr.w	r4, r4, #2
   16512:	4603      	mov	r3, r0
   16514:	f8ad 4000 	strh.w	r4, [sp]
   16518:	4810      	ldr	r0, [pc, #64]	; (1655c <handle_event+0x7c>)
   1651a:	4632      	mov	r2, r6
   1651c:	4629      	mov	r1, r5
   1651e:	f009 fc9c 	bl	1fe5a <log_3>
}
   16522:	b002      	add	sp, #8
   16524:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   16526:	8981      	ldrh	r1, [r0, #12]
   16528:	7853      	ldrb	r3, [r2, #1]
   1652a:	428b      	cmp	r3, r1
   1652c:	d90d      	bls.n	1654a <handle_event+0x6a>
   1652e:	4a09      	ldr	r2, [pc, #36]	; (16554 <handle_event+0x74>)
   16530:	4b09      	ldr	r3, [pc, #36]	; (16558 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16532:	480b      	ldr	r0, [pc, #44]	; (16560 <handle_event+0x80>)
   16534:	1a9b      	subs	r3, r3, r2
   16536:	08db      	lsrs	r3, r3, #3
   16538:	019b      	lsls	r3, r3, #6
   1653a:	f043 0301 	orr.w	r3, r3, #1
   1653e:	462a      	mov	r2, r5
}
   16540:	b002      	add	sp, #8
   16542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16546:	f009 bc6f 	b.w	1fe28 <log_2>
		handler->handler(buf);
   1654a:	6853      	ldr	r3, [r2, #4]
}
   1654c:	b002      	add	sp, #8
   1654e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   16552:	4718      	bx	r3
   16554:	00022cf0 	.word	0x00022cf0
   16558:	00022d18 	.word	0x00022d18
   1655c:	00024265 	.word	0x00024265
   16560:	00024243 	.word	0x00024243

00016564 <hci_rx_thread>:
{
   16564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16568:	4b47      	ldr	r3, [pc, #284]	; (16688 <hci_rx_thread+0x124>)
   1656a:	4d48      	ldr	r5, [pc, #288]	; (1668c <hci_rx_thread+0x128>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1656c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 166ac <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16570:	f8df 913c 	ldr.w	r9, [pc, #316]	; 166b0 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16574:	4f46      	ldr	r7, [pc, #280]	; (16690 <hci_rx_thread+0x12c>)
   16576:	1aed      	subs	r5, r5, r3
   16578:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1657a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1657e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16582:	4640      	mov	r0, r8
   16584:	f00b fa1b 	bl	219be <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16588:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   1658a:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1658c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   1658e:	d046      	beq.n	1661e <hci_rx_thread+0xba>
   16590:	2903      	cmp	r1, #3
   16592:	d173      	bne.n	1667c <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16594:	8983      	ldrh	r3, [r0, #12]
   16596:	2b03      	cmp	r3, #3
   16598:	d80c      	bhi.n	165b4 <hci_rx_thread+0x50>
   1659a:	493e      	ldr	r1, [pc, #248]	; (16694 <hci_rx_thread+0x130>)
   1659c:	483e      	ldr	r0, [pc, #248]	; (16698 <hci_rx_thread+0x134>)
   1659e:	f240 43ac 	movw	r3, #1196	; 0x4ac
   165a2:	463a      	mov	r2, r7
   165a4:	f008 fff6 	bl	1f594 <printk>
   165a8:	4040      	eors	r0, r0
   165aa:	f380 8811 	msr	BASEPRI, r0
   165ae:	f04f 0003 	mov.w	r0, #3
   165b2:	df02      	svc	2
   165b4:	2104      	movs	r1, #4
   165b6:	f104 0008 	add.w	r0, r4, #8
   165ba:	f00b fa78 	bl	21aae <net_buf_simple_pull_mem>
	if (buf->len != len) {
   165be:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   165c0:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   165c2:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   165c6:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   165c8:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   165cc:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   165ce:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   165d0:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   165d2:	d009      	beq.n	165e8 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   165d4:	01ab      	lsls	r3, r5, #6
   165d6:	4831      	ldr	r0, [pc, #196]	; (1669c <hci_rx_thread+0x138>)
   165d8:	f043 0301 	orr.w	r3, r3, #1
   165dc:	f009 fc24 	bl	1fe28 <log_2>
			net_buf_unref(buf);
   165e0:	4620      	mov	r0, r4
   165e2:	f004 fbad 	bl	1ad40 <net_buf_unref>
			break;
   165e6:	e017      	b.n	16618 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   165e8:	f002 f840 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   165ec:	4606      	mov	r6, r0
   165ee:	b938      	cbnz	r0, 16600 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   165f0:	01aa      	lsls	r2, r5, #6
   165f2:	8ae1      	ldrh	r1, [r4, #22]
   165f4:	482a      	ldr	r0, [pc, #168]	; (166a0 <hci_rx_thread+0x13c>)
   165f6:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   165fa:	f009 fc01 	bl	1fe00 <log_1>
   165fe:	e7ef      	b.n	165e0 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   16600:	f002 fb08 	bl	18c14 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   16604:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   16608:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1660a:	4621      	mov	r1, r4
   1660c:	4630      	mov	r0, r6
   1660e:	f001 fecd 	bl	183ac <bt_conn_recv>
	bt_conn_unref(conn);
   16612:	4630      	mov	r0, r6
   16614:	f00a fa4a 	bl	20aac <bt_conn_unref>
	z_impl_k_yield();
   16618:	f007 fbec 	bl	1ddf4 <z_impl_k_yield>
	while (1) {
   1661c:	e7ad      	b.n	1657a <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1661e:	8983      	ldrh	r3, [r0, #12]
   16620:	2b01      	cmp	r3, #1
   16622:	d80c      	bhi.n	1663e <hci_rx_thread+0xda>
   16624:	491b      	ldr	r1, [pc, #108]	; (16694 <hci_rx_thread+0x130>)
   16626:	481c      	ldr	r0, [pc, #112]	; (16698 <hci_rx_thread+0x134>)
   16628:	f241 33fb 	movw	r3, #5115	; 0x13fb
   1662c:	463a      	mov	r2, r7
   1662e:	f008 ffb1 	bl	1f594 <printk>
   16632:	4040      	eors	r0, r0
   16634:	f380 8811 	msr	BASEPRI, r0
   16638:	f04f 0003 	mov.w	r0, #3
   1663c:	df02      	svc	2
   1663e:	2102      	movs	r1, #2
   16640:	f104 0008 	add.w	r0, r4, #8
   16644:	f00b fa33 	bl	21aae <net_buf_simple_pull_mem>
   16648:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1664a:	7800      	ldrb	r0, [r0, #0]
   1664c:	f00a f8a2 	bl	20794 <bt_hci_evt_get_flags>
   16650:	0783      	lsls	r3, r0, #30
   16652:	d40c      	bmi.n	1666e <hci_rx_thread+0x10a>
   16654:	4913      	ldr	r1, [pc, #76]	; (166a4 <hci_rx_thread+0x140>)
   16656:	4810      	ldr	r0, [pc, #64]	; (16698 <hci_rx_thread+0x134>)
   16658:	f241 33ff 	movw	r3, #5119	; 0x13ff
   1665c:	463a      	mov	r2, r7
   1665e:	f008 ff99 	bl	1f594 <printk>
   16662:	4040      	eors	r0, r0
   16664:	f380 8811 	msr	BASEPRI, r0
   16668:	f04f 0003 	mov.w	r0, #3
   1666c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1666e:	7830      	ldrb	r0, [r6, #0]
   16670:	2304      	movs	r3, #4
   16672:	464a      	mov	r2, r9
   16674:	4621      	mov	r1, r4
   16676:	f7ff ff33 	bl	164e0 <handle_event>
	net_buf_unref(buf);
   1667a:	e7b1      	b.n	165e0 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1667c:	01aa      	lsls	r2, r5, #6
   1667e:	480a      	ldr	r0, [pc, #40]	; (166a8 <hci_rx_thread+0x144>)
   16680:	f042 0201 	orr.w	r2, r2, #1
   16684:	e7b9      	b.n	165fa <hci_rx_thread+0x96>
   16686:	bf00      	nop
   16688:	00022cf0 	.word	0x00022cf0
   1668c:	00022d18 	.word	0x00022d18
   16690:	00024287 	.word	0x00024287
   16694:	000242bb 	.word	0x000242bb
   16698:	000242d4 	.word	0x000242d4
   1669c:	000242f1 	.word	0x000242f1
   166a0:	00024315 	.word	0x00024315
   166a4:	00024337 	.word	0x00024337
   166a8:	00024365 	.word	0x00024365
   166ac:	200004c4 	.word	0x200004c4
   166b0:	00023000 	.word	0x00023000

000166b4 <hci_le_meta_event>:
{
   166b4:	b510      	push	{r4, lr}
   166b6:	2101      	movs	r1, #1
   166b8:	4604      	mov	r4, r0
   166ba:	3008      	adds	r0, #8
   166bc:	f00b f9f7 	bl	21aae <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   166c0:	4621      	mov	r1, r4
   166c2:	4a03      	ldr	r2, [pc, #12]	; (166d0 <hci_le_meta_event+0x1c>)
   166c4:	7800      	ldrb	r0, [r0, #0]
}
   166c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   166ca:	2307      	movs	r3, #7
   166cc:	f7ff bf08 	b.w	164e0 <handle_event>
   166d0:	00022fa8 	.word	0x00022fa8

000166d4 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166d4:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166d6:	4c0c      	ldr	r4, [pc, #48]	; (16708 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166d8:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166da:	2205      	movs	r2, #5
   166dc:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   166e0:	f002 f900 	bl	188e4 <bt_conn_lookup_state_le>
		if (!conn) {
   166e4:	b970      	cbnz	r0, 16704 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   166e6:	4b09      	ldr	r3, [pc, #36]	; (1670c <find_pending_connect.part.0+0x38>)
   166e8:	6818      	ldr	r0, [r3, #0]
   166ea:	889a      	ldrh	r2, [r3, #4]
   166ec:	9000      	str	r0, [sp, #0]
   166ee:	799b      	ldrb	r3, [r3, #6]
   166f0:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   166f4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   166f8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   166fc:	2204      	movs	r2, #4
   166fe:	4669      	mov	r1, sp
   16700:	f002 f8f0 	bl	188e4 <bt_conn_lookup_state_le>
}
   16704:	b002      	add	sp, #8
   16706:	bd10      	pop	{r4, pc}
   16708:	200003c8 	.word	0x200003c8
   1670c:	00022e20 	.word	0x00022e20

00016710 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16710:	b530      	push	{r4, r5, lr}
   16712:	4d13      	ldr	r5, [pc, #76]	; (16760 <id_create.isra.0+0x50>)
   16714:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16718:	b085      	sub	sp, #20
   1671a:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1671c:	460c      	mov	r4, r1
   1671e:	b171      	cbz	r1, 1673e <id_create.isra.0+0x2e>
   16720:	2300      	movs	r3, #0
   16722:	4669      	mov	r1, sp
   16724:	4620      	mov	r0, r4
   16726:	9300      	str	r3, [sp, #0]
   16728:	f8cd 3003 	str.w	r3, [sp, #3]
   1672c:	f00a f85c 	bl	207e8 <bt_addr_le_cmp>
   16730:	b128      	cbz	r0, 1673e <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16732:	4621      	mov	r1, r4
   16734:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16736:	f00a f854 	bl	207e2 <bt_addr_le_copy>
}
   1673a:	b005      	add	sp, #20
   1673c:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   1673e:	a802      	add	r0, sp, #8
   16740:	f00a f81a 	bl	20778 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   16744:	a802      	add	r0, sp, #8
   16746:	f7ff fcdd 	bl	16104 <id_find>
   1674a:	2800      	cmp	r0, #0
   1674c:	daf7      	bge.n	1673e <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1674e:	a902      	add	r1, sp, #8
   16750:	4628      	mov	r0, r5
   16752:	f00a f846 	bl	207e2 <bt_addr_le_copy>
		if (addr) {
   16756:	2c00      	cmp	r4, #0
   16758:	d0ef      	beq.n	1673a <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1675a:	4629      	mov	r1, r5
   1675c:	4620      	mov	r0, r4
   1675e:	e7ea      	b.n	16736 <id_create.isra.0+0x26>
   16760:	200003c8 	.word	0x200003c8

00016764 <hci_num_completed_packets>:
{
   16764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16768:	4d3d      	ldr	r5, [pc, #244]	; (16860 <hci_num_completed_packets+0xfc>)
   1676a:	4b3e      	ldr	r3, [pc, #248]	; (16864 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1676c:	f8d0 8008 	ldr.w	r8, [r0, #8]
		k_queue_append(&work_q->queue, work);
   16770:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 16870 <hci_num_completed_packets+0x10c>
   16774:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   16776:	2600      	movs	r6, #0
   16778:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   1677a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   1677c:	f898 3000 	ldrb.w	r3, [r8]
   16780:	429e      	cmp	r6, r3
   16782:	db01      	blt.n	16788 <hci_num_completed_packets+0x24>
}
   16784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16788:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   1678c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16790:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16794:	4658      	mov	r0, fp
   16796:	f001 ff69 	bl	1866c <bt_conn_lookup_handle>
		if (!conn) {
   1679a:	4604      	mov	r4, r0
   1679c:	b1d8      	cbz	r0, 167d6 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1679e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   167a2:	2f00      	cmp	r7, #0
   167a4:	d033      	beq.n	1680e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   167a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   167aa:	f3ef 8211 	mrs	r2, BASEPRI
   167ae:	f383 8811 	msr	BASEPRI, r3
   167b2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   167b6:	69e3      	ldr	r3, [r4, #28]
   167b8:	b1b3      	cbz	r3, 167e8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   167ba:	3b01      	subs	r3, #1
   167bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   167be:	f382 8811 	msr	BASEPRI, r2
   167c2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   167c6:	4620      	mov	r0, r4
   167c8:	f001 fd58 	bl	1827c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   167cc:	3f01      	subs	r7, #1
   167ce:	f007 fb87 	bl	1dee0 <z_impl_k_sem_give>
   167d2:	b2bf      	uxth	r7, r7
   167d4:	e7e5      	b.n	167a2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   167d6:	01aa      	lsls	r2, r5, #6
   167d8:	4823      	ldr	r0, [pc, #140]	; (16868 <hci_num_completed_packets+0x104>)
   167da:	f042 0201 	orr.w	r2, r2, #1
   167de:	4659      	mov	r1, fp
   167e0:	f009 fb0e 	bl	1fe00 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   167e4:	3601      	adds	r6, #1
   167e6:	e7c9      	b.n	1677c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   167e8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   167ea:	b12b      	cbz	r3, 167f8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   167ec:	69a1      	ldr	r1, [r4, #24]
   167ee:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   167f0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   167f2:	428b      	cmp	r3, r1
	list->tail = node;
   167f4:	bf08      	it	eq
   167f6:	61a0      	streq	r0, [r4, #24]
   167f8:	f382 8811 	msr	BASEPRI, r2
   167fc:	f3bf 8f6f 	isb	sy
			if (!node) {
   16800:	b94b      	cbnz	r3, 16816 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   16802:	01a9      	lsls	r1, r5, #6
   16804:	4819      	ldr	r0, [pc, #100]	; (1686c <hci_num_completed_packets+0x108>)
   16806:	f041 0101 	orr.w	r1, r1, #1
   1680a:	f009 faec 	bl	1fde6 <log_0>
		bt_conn_unref(conn);
   1680e:	4620      	mov	r0, r4
   16810:	f00a f94c 	bl	20aac <bt_conn_unref>
   16814:	e7e6      	b.n	167e4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   16816:	f04f 0240 	mov.w	r2, #64	; 0x40
   1681a:	f3ef 8111 	mrs	r1, BASEPRI
   1681e:	f382 8811 	msr	BASEPRI, r2
   16822:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16826:	68da      	ldr	r2, [r3, #12]
   16828:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1682a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   1682e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   16830:	f8c3 900c 	str.w	r9, [r3, #12]
   16834:	b98a      	cbnz	r2, 1685a <hci_num_completed_packets+0xf6>
	list->head = node;
   16836:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1683a:	f381 8811 	msr	BASEPRI, r1
   1683e:	f3bf 8f6f 	isb	sy
   16842:	2101      	movs	r1, #1
   16844:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16848:	f009 ffd1 	bl	207ee <atomic_or>
   1684c:	07c3      	lsls	r3, r0, #31
   1684e:	d4ba      	bmi.n	167c6 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
   16850:	4659      	mov	r1, fp
   16852:	4650      	mov	r0, sl
   16854:	f00b fd20 	bl	22298 <k_queue_append>
   16858:	e7b5      	b.n	167c6 <hci_num_completed_packets+0x62>
	parent->next = child;
   1685a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1685c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1685e:	e7ec      	b.n	1683a <hci_num_completed_packets+0xd6>
   16860:	00022d18 	.word	0x00022d18
   16864:	00022cf0 	.word	0x00022cf0
   16868:	00024379 	.word	0x00024379
   1686c:	00024395 	.word	0x00024395
   16870:	200024d0 	.word	0x200024d0

00016874 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16874:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16876:	4b28      	ldr	r3, [pc, #160]	; (16918 <le_adv_start_add_conn+0xa4>)
   16878:	b085      	sub	sp, #20
   1687a:	4605      	mov	r5, r0
   1687c:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   1687e:	7801      	ldrb	r1, [r0, #0]
   16880:	f103 0028 	add.w	r0, r3, #40	; 0x28
   16884:	f009 ffa7 	bl	207d6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   16888:	f010 0f40 	tst.w	r0, #64	; 0x40
   1688c:	461a      	mov	r2, r3
   1688e:	d008      	beq.n	168a2 <le_adv_start_add_conn+0x2e>
   16890:	f103 0028 	add.w	r0, r3, #40	; 0x28
   16894:	f009 ff9f 	bl	207d6 <atomic_get>
   16898:	05c0      	lsls	r0, r0, #23
   1689a:	d502      	bpl.n	168a2 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1689c:	7e1b      	ldrb	r3, [r3, #24]
   1689e:	428b      	cmp	r3, r1
   168a0:	d131      	bne.n	16906 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   168a2:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   168a4:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   168a6:	f816 3b09 	ldrb.w	r3, [r6], #9
   168aa:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   168ae:	4630      	mov	r0, r6
   168b0:	2300      	movs	r3, #0
   168b2:	9300      	str	r3, [sp, #0]
   168b4:	f8cd 3003 	str.w	r3, [sp, #3]
   168b8:	f009 ff96 	bl	207e8 <bt_addr_le_cmp>
   168bc:	4604      	mov	r4, r0
   168be:	7828      	ldrb	r0, [r5, #0]
   168c0:	b164      	cbz	r4, 168dc <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   168c2:	4631      	mov	r1, r6
   168c4:	f001 ffe8 	bl	18898 <bt_conn_exists_le>
   168c8:	4604      	mov	r4, r0
   168ca:	b9f8      	cbnz	r0, 1690c <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   168cc:	7828      	ldrb	r0, [r5, #0]
   168ce:	4631      	mov	r1, r6
   168d0:	f001 fea0 	bl	18614 <bt_conn_add_le>
	if (!conn) {
   168d4:	4605      	mov	r5, r0
   168d6:	b1e0      	cbz	r0, 16912 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   168d8:	2105      	movs	r1, #5
   168da:	e00e      	b.n	168fa <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   168dc:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   168e0:	9302      	str	r3, [sp, #8]
   168e2:	a902      	add	r1, sp, #8
   168e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   168e8:	f8ad 300c 	strh.w	r3, [sp, #12]
   168ec:	f88d 300e 	strb.w	r3, [sp, #14]
   168f0:	f001 fe90 	bl	18614 <bt_conn_add_le>
		if (!conn) {
   168f4:	4605      	mov	r5, r0
   168f6:	b160      	cbz	r0, 16912 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   168f8:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   168fa:	f001 fec3 	bl	18684 <bt_conn_set_state>
	*out_conn = conn;
   168fe:	603d      	str	r5, [r7, #0]
	return 0;
}
   16900:	4620      	mov	r0, r4
   16902:	b005      	add	sp, #20
   16904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   16906:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1690a:	e7f9      	b.n	16900 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   1690c:	f06f 0415 	mvn.w	r4, #21
   16910:	e7f6      	b.n	16900 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   16912:	f06f 040b 	mvn.w	r4, #11
   16916:	e7f3      	b.n	16900 <le_adv_start_add_conn+0x8c>
   16918:	200003c8 	.word	0x200003c8

0001691c <hci_cmd_status>:
{
   1691c:	b538      	push	{r3, r4, r5, lr}
   1691e:	2104      	movs	r1, #4
   16920:	4604      	mov	r4, r0
   16922:	3008      	adds	r0, #8
   16924:	f00b f8c3 	bl	21aae <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16928:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1692a:	7801      	ldrb	r1, [r0, #0]
   1692c:	8840      	ldrh	r0, [r0, #2]
   1692e:	4622      	mov	r2, r4
   16930:	f7ff fd5c 	bl	163ec <hci_cmd_done>
	if (ncmd) {
   16934:	b125      	cbz	r5, 16940 <hci_cmd_status+0x24>
   16936:	4803      	ldr	r0, [pc, #12]	; (16944 <hci_cmd_status+0x28>)
}
   16938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1693c:	f007 bad0 	b.w	1dee0 <z_impl_k_sem_give>
   16940:	bd38      	pop	{r3, r4, r5, pc}
   16942:	bf00      	nop
   16944:	200004a8 	.word	0x200004a8

00016948 <hci_cmd_complete>:
{
   16948:	b538      	push	{r3, r4, r5, lr}
   1694a:	2103      	movs	r1, #3
   1694c:	4604      	mov	r4, r0
   1694e:	3008      	adds	r0, #8
   16950:	f00b f8ad 	bl	21aae <net_buf_simple_pull_mem>
	status = buf->data[0];
   16954:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   16956:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16958:	7819      	ldrb	r1, [r3, #0]
   1695a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1695e:	4622      	mov	r2, r4
   16960:	f7ff fd44 	bl	163ec <hci_cmd_done>
	if (ncmd) {
   16964:	b125      	cbz	r5, 16970 <hci_cmd_complete+0x28>
   16966:	4803      	ldr	r0, [pc, #12]	; (16974 <hci_cmd_complete+0x2c>)
}
   16968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1696c:	f007 bab8 	b.w	1dee0 <z_impl_k_sem_give>
   16970:	bd38      	pop	{r3, r4, r5, pc}
   16972:	bf00      	nop
   16974:	200004a8 	.word	0x200004a8

00016978 <bt_hci_cmd_create>:
{
   16978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1697c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16984:	4605      	mov	r5, r0
   16986:	4816      	ldr	r0, [pc, #88]	; (169e0 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   16988:	f8df 8058 	ldr.w	r8, [pc, #88]	; 169e4 <bt_hci_cmd_create+0x6c>
{
   1698c:	460e      	mov	r6, r1
   1698e:	f00b f811 	bl	219b4 <net_buf_alloc_fixed>
   16992:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16994:	f100 0b08 	add.w	fp, r0, #8
   16998:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1699a:	2700      	movs	r7, #0
   1699c:	4658      	mov	r0, fp
   1699e:	f00b f828 	bl	219f2 <net_buf_simple_reserve>
   169a2:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   169a4:	4620      	mov	r0, r4
   169a6:	f004 f917 	bl	1abd8 <net_buf_id>
   169aa:	f04f 0a0c 	mov.w	sl, #12
   169ae:	fb0a 8000 	mla	r0, sl, r0, r8
   169b2:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   169b4:	4620      	mov	r0, r4
   169b6:	f004 f90f 	bl	1abd8 <net_buf_id>
   169ba:	fb0a 8000 	mla	r0, sl, r0, r8
   169be:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   169c0:	4620      	mov	r0, r4
   169c2:	f004 f909 	bl	1abd8 <net_buf_id>
   169c6:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   169ca:	2103      	movs	r1, #3
   169cc:	6047      	str	r7, [r0, #4]
   169ce:	4658      	mov	r0, fp
   169d0:	f00b f846 	bl	21a60 <net_buf_simple_add>
	hdr->param_len = param_len;
   169d4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   169d6:	8005      	strh	r5, [r0, #0]
}
   169d8:	4620      	mov	r0, r4
   169da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169de:	bf00      	nop
   169e0:	20000a30 	.word	0x20000a30
   169e4:	20002b74 	.word	0x20002b74

000169e8 <bt_hci_cmd_send_sync>:
{
   169e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169ec:	4607      	mov	r7, r0
   169ee:	b086      	sub	sp, #24
   169f0:	4615      	mov	r5, r2
	if (!buf) {
   169f2:	460c      	mov	r4, r1
   169f4:	b921      	cbnz	r1, 16a00 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   169f6:	f7ff ffbf 	bl	16978 <bt_hci_cmd_create>
		if (!buf) {
   169fa:	4604      	mov	r4, r0
   169fc:	2800      	cmp	r0, #0
   169fe:	d055      	beq.n	16aac <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16a00:	2201      	movs	r2, #1
   16a02:	2100      	movs	r1, #0
   16a04:	4668      	mov	r0, sp
   16a06:	f00b fd93 	bl	22530 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16a0a:	4620      	mov	r0, r4
   16a0c:	f004 f8e4 	bl	1abd8 <net_buf_id>
   16a10:	4e28      	ldr	r6, [pc, #160]	; (16ab4 <bt_hci_cmd_send_sync+0xcc>)
   16a12:	230c      	movs	r3, #12
   16a14:	fb03 6000 	mla	r0, r3, r0, r6
   16a18:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   16a1c:	4620      	mov	r0, r4
   16a1e:	f00a fff9 	bl	21a14 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16a22:	4825      	ldr	r0, [pc, #148]	; (16ab8 <bt_hci_cmd_send_sync+0xd0>)
   16a24:	4621      	mov	r1, r4
   16a26:	f00a ffe8 	bl	219fa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16a2a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16a2e:	2300      	movs	r3, #0
   16a30:	4668      	mov	r0, sp
   16a32:	f007 fa7b 	bl	1df2c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16a36:	4680      	mov	r8, r0
   16a38:	b180      	cbz	r0, 16a5c <bt_hci_cmd_send_sync+0x74>
   16a3a:	4a20      	ldr	r2, [pc, #128]	; (16abc <bt_hci_cmd_send_sync+0xd4>)
   16a3c:	4920      	ldr	r1, [pc, #128]	; (16ac0 <bt_hci_cmd_send_sync+0xd8>)
   16a3e:	4821      	ldr	r0, [pc, #132]	; (16ac4 <bt_hci_cmd_send_sync+0xdc>)
   16a40:	f240 134d 	movw	r3, #333	; 0x14d
   16a44:	f008 fda6 	bl	1f594 <printk>
   16a48:	481f      	ldr	r0, [pc, #124]	; (16ac8 <bt_hci_cmd_send_sync+0xe0>)
   16a4a:	4641      	mov	r1, r8
   16a4c:	f008 fda2 	bl	1f594 <printk>
   16a50:	4040      	eors	r0, r0
   16a52:	f380 8811 	msr	BASEPRI, r0
   16a56:	f04f 0003 	mov.w	r0, #3
   16a5a:	df02      	svc	2
	status = cmd(buf)->status;
   16a5c:	4620      	mov	r0, r4
   16a5e:	f004 f8bb 	bl	1abd8 <net_buf_id>
   16a62:	230c      	movs	r3, #12
   16a64:	4343      	muls	r3, r0
   16a66:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   16a68:	b1be      	cbz	r6, 16a9a <bt_hci_cmd_send_sync+0xb2>
   16a6a:	4a18      	ldr	r2, [pc, #96]	; (16acc <bt_hci_cmd_send_sync+0xe4>)
   16a6c:	4b18      	ldr	r3, [pc, #96]	; (16ad0 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16a6e:	4819      	ldr	r0, [pc, #100]	; (16ad4 <bt_hci_cmd_send_sync+0xec>)
   16a70:	1a9b      	subs	r3, r3, r2
   16a72:	08db      	lsrs	r3, r3, #3
   16a74:	019b      	lsls	r3, r3, #6
   16a76:	f043 0302 	orr.w	r3, r3, #2
   16a7a:	4632      	mov	r2, r6
   16a7c:	4639      	mov	r1, r7
   16a7e:	f009 f9d3 	bl	1fe28 <log_2>
		net_buf_unref(buf);
   16a82:	4620      	mov	r0, r4
   16a84:	f004 f95c 	bl	1ad40 <net_buf_unref>
			return -EIO;
   16a88:	2e09      	cmp	r6, #9
   16a8a:	bf0c      	ite	eq
   16a8c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   16a90:	f06f 0004 	mvnne.w	r0, #4
}
   16a94:	b006      	add	sp, #24
   16a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   16a9a:	b115      	cbz	r5, 16aa2 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   16a9c:	602c      	str	r4, [r5, #0]
	return 0;
   16a9e:	4630      	mov	r0, r6
   16aa0:	e7f8      	b.n	16a94 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   16aa2:	4620      	mov	r0, r4
   16aa4:	f004 f94c 	bl	1ad40 <net_buf_unref>
	return 0;
   16aa8:	4628      	mov	r0, r5
   16aaa:	e7f3      	b.n	16a94 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   16aac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16ab0:	e7f0      	b.n	16a94 <bt_hci_cmd_send_sync+0xac>
   16ab2:	bf00      	nop
   16ab4:	20002b74 	.word	0x20002b74
   16ab8:	200004dc 	.word	0x200004dc
   16abc:	00024287 	.word	0x00024287
   16ac0:	000243ac 	.word	0x000243ac
   16ac4:	000242d4 	.word	0x000242d4
   16ac8:	000243b5 	.word	0x000243b5
   16acc:	00022cf0 	.word	0x00022cf0
   16ad0:	00022d18 	.word	0x00022d18
   16ad4:	000243d5 	.word	0x000243d5

00016ad8 <set_random_address>:
{
   16ad8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
   16ada:	4e15      	ldr	r6, [pc, #84]	; (16b30 <set_random_address+0x58>)
   16adc:	2206      	movs	r2, #6
   16ade:	f106 012d 	add.w	r1, r6, #45	; 0x2d
   16ae2:	4605      	mov	r5, r0
   16ae4:	f009 fd7f 	bl	205e6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16ae8:	4604      	mov	r4, r0
   16aea:	b1e0      	cbz	r0, 16b26 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16aec:	2106      	movs	r1, #6
   16aee:	f242 0005 	movw	r0, #8197	; 0x2005
   16af2:	f7ff ff41 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   16af6:	4604      	mov	r4, r0
   16af8:	b1b8      	cbz	r0, 16b2a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16afa:	2206      	movs	r2, #6
   16afc:	4629      	mov	r1, r5
   16afe:	3008      	adds	r0, #8
   16b00:	f00a ffb4 	bl	21a6c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16b04:	4621      	mov	r1, r4
   16b06:	2200      	movs	r2, #0
   16b08:	f242 0005 	movw	r0, #8197	; 0x2005
   16b0c:	f7ff ff6c 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   16b10:	4604      	mov	r4, r0
   16b12:	b940      	cbnz	r0, 16b26 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
   16b14:	2206      	movs	r2, #6
   16b16:	4629      	mov	r1, r5
   16b18:	f106 002d 	add.w	r0, r6, #45	; 0x2d
   16b1c:	f009 fd8a 	bl	20634 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16b20:	2301      	movs	r3, #1
   16b22:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
   16b26:	4620      	mov	r0, r4
   16b28:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   16b2a:	f06f 0436 	mvn.w	r4, #54	; 0x36
   16b2e:	e7fa      	b.n	16b26 <set_random_address+0x4e>
   16b30:	200003c8 	.word	0x200003c8

00016b34 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   16b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16b38:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b3a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   16b3e:	460e      	mov	r6, r1
   16b40:	4690      	mov	r8, r2
   16b42:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b44:	d027      	beq.n	16b96 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16b46:	4f27      	ldr	r7, [pc, #156]	; (16be4 <le_adv_set_random_addr.isra.0+0xb0>)
   16b48:	b12a      	cbz	r2, 16b56 <le_adv_set_random_addr.isra.0+0x22>
   16b4a:	0688      	lsls	r0, r1, #26
   16b4c:	d503      	bpl.n	16b56 <le_adv_set_random_addr.isra.0+0x22>
   16b4e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   16b52:	0659      	lsls	r1, r3, #25
   16b54:	d542      	bpl.n	16bdc <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16b56:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16b5a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   16b5e:	5cfb      	ldrb	r3, [r7, r3]
   16b60:	2b01      	cmp	r3, #1
   16b62:	d008      	beq.n	16b76 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   16b64:	eba9 0404 	sub.w	r4, r9, r4
   16b68:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16b6a:	f1b8 0f00 	cmp.w	r8, #0
   16b6e:	d10d      	bne.n	16b8c <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16b70:	702b      	strb	r3, [r5, #0]
	return 0;
   16b72:	2000      	movs	r0, #0
   16b74:	e007      	b.n	16b86 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   16b76:	2007      	movs	r0, #7
   16b78:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   16b7c:	4438      	add	r0, r7
   16b7e:	f7ff ffab 	bl	16ad8 <set_random_address>
				if (err) {
   16b82:	2800      	cmp	r0, #0
   16b84:	d0ee      	beq.n	16b64 <le_adv_set_random_addr.isra.0+0x30>
}
   16b86:	b003      	add	sp, #12
   16b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16b8c:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16b8e:	bf48      	it	mi
   16b90:	f043 0302 	orrmi.w	r3, r3, #2
   16b94:	e7ec      	b.n	16b70 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16b96:	074b      	lsls	r3, r1, #29
   16b98:	d510      	bpl.n	16bbc <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16b9a:	4e12      	ldr	r6, [pc, #72]	; (16be4 <le_adv_set_random_addr.isra.0+0xb0>)
   16b9c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16ba0:	00e7      	lsls	r7, r4, #3
   16ba2:	5cf3      	ldrb	r3, [r6, r3]
   16ba4:	2b01      	cmp	r3, #1
   16ba6:	d105      	bne.n	16bb4 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   16ba8:	2007      	movs	r0, #7
   16baa:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   16bae:	4430      	add	r0, r6
   16bb0:	f7ff ff92 	bl	16ad8 <set_random_address>
			*own_addr_type = id_addr->type;
   16bb4:	1b3c      	subs	r4, r7, r4
   16bb6:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16bb8:	702b      	strb	r3, [r5, #0]
		if (err) {
   16bba:	e7e4      	b.n	16b86 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   16bbc:	2106      	movs	r1, #6
   16bbe:	4668      	mov	r0, sp
   16bc0:	f005 fba4 	bl	1c30c <bt_rand>
	if (err) {
   16bc4:	b940      	cbnz	r0, 16bd8 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
   16bc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   16bca:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   16bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16bd0:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   16bd4:	f7ff ff80 	bl	16ad8 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16bd8:	2301      	movs	r3, #1
   16bda:	e7ed      	b.n	16bb8 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   16bdc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16be0:	e7d1      	b.n	16b86 <le_adv_set_random_addr.isra.0+0x52>
   16be2:	bf00      	nop
   16be4:	200003c8 	.word	0x200003c8

00016be8 <hci_set_ad>:
{
   16be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bec:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16bee:	2120      	movs	r1, #32
{
   16bf0:	4682      	mov	sl, r0
   16bf2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16bf4:	f7ff fec0 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   16bf8:	4606      	mov	r6, r0
   16bfa:	2800      	cmp	r0, #0
   16bfc:	d05c      	beq.n	16cb8 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   16bfe:	2120      	movs	r1, #32
   16c00:	3008      	adds	r0, #8
   16c02:	f00a ff2d 	bl	21a60 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   16c06:	2220      	movs	r2, #32
   16c08:	2100      	movs	r1, #0
   16c0a:	4681      	mov	r9, r0
   16c0c:	f009 fd3d 	bl	2068a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   16c10:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   16c14:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16c18:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   16c1a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   16c1c:	f8d4 8000 	ldr.w	r8, [r4]
   16c20:	2300      	movs	r3, #0
   16c22:	6862      	ldr	r2, [r4, #4]
   16c24:	4293      	cmp	r3, r2
   16c26:	d30d      	bcc.n	16c44 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   16c28:	9b00      	ldr	r3, [sp, #0]
   16c2a:	3408      	adds	r4, #8
   16c2c:	429c      	cmp	r4, r3
   16c2e:	d1f5      	bne.n	16c1c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16c30:	2200      	movs	r2, #0
   16c32:	4631      	mov	r1, r6
   16c34:	4650      	mov	r0, sl
	*data_len = set_data_len;
   16c36:	f889 5000 	strb.w	r5, [r9]
}
   16c3a:	b003      	add	sp, #12
   16c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16c40:	f7ff bed2 	b.w	169e8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   16c44:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16c48:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16c4c:	1ca8      	adds	r0, r5, #2
   16c4e:	1881      	adds	r1, r0, r2
   16c50:	291f      	cmp	r1, #31
   16c52:	d91a      	bls.n	16c8a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16c54:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   16c58:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16c5c:	d101      	bne.n	16c62 <hci_set_ad+0x7a>
   16c5e:	2a00      	cmp	r2, #0
   16c60:	dc11      	bgt.n	16c86 <hci_set_ad+0x9e>
   16c62:	4b17      	ldr	r3, [pc, #92]	; (16cc0 <hci_set_ad+0xd8>)
   16c64:	4917      	ldr	r1, [pc, #92]	; (16cc4 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   16c66:	4818      	ldr	r0, [pc, #96]	; (16cc8 <hci_set_ad+0xe0>)
   16c68:	1ac9      	subs	r1, r1, r3
   16c6a:	08c9      	lsrs	r1, r1, #3
   16c6c:	0189      	lsls	r1, r1, #6
   16c6e:	f041 0101 	orr.w	r1, r1, #1
   16c72:	f009 f8b8 	bl	1fde6 <log_0>
		net_buf_unref(buf);
   16c76:	4630      	mov	r0, r6
   16c78:	f004 f862 	bl	1ad40 <net_buf_unref>
					return -EINVAL;
   16c7c:	f06f 0015 	mvn.w	r0, #21
}
   16c80:	b003      	add	sp, #12
   16c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   16c86:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   16c8a:	b2d7      	uxtb	r7, r2
   16c8c:	1c79      	adds	r1, r7, #1
   16c8e:	f80b 1005 	strb.w	r1, [fp, r5]
   16c92:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   16c94:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   16c96:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   16c9a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   16c9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   16ca2:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   16ca4:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   16ca6:	f009 fcc5 	bl	20634 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   16caa:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   16cac:	443d      	add	r5, r7
   16cae:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   16cb0:	3301      	adds	r3, #1
   16cb2:	f108 0808 	add.w	r8, r8, #8
   16cb6:	e7b4      	b.n	16c22 <hci_set_ad+0x3a>
		return -ENOBUFS;
   16cb8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16cbc:	e7e0      	b.n	16c80 <hci_set_ad+0x98>
   16cbe:	bf00      	nop
   16cc0:	00022cf0 	.word	0x00022cf0
   16cc4:	00022d18 	.word	0x00022d18
   16cc8:	000243f1 	.word	0x000243f1

00016ccc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   16ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd0:	b087      	sub	sp, #28
   16cd2:	4606      	mov	r6, r0
   16cd4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   16cd8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   16cdc:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   16ce0:	460c      	mov	r4, r1
   16ce2:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   16ce4:	2100      	movs	r1, #0
   16ce6:	2210      	movs	r2, #16
   16ce8:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   16cea:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   16cec:	f009 fccd 	bl	2068a <memset>
	if (use_name) {
   16cf0:	f1b8 0f00 	cmp.w	r8, #0
   16cf4:	d00e      	beq.n	16d14 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   16cf6:	bbb4      	cbnz	r4, 16d66 <le_adv_update.constprop.0+0x9a>
   16cf8:	2d00      	cmp	r5, #0
   16cfa:	d13f      	bne.n	16d7c <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   16cfc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 16db0 <le_adv_update.constprop.0+0xe4>
   16d00:	4658      	mov	r0, fp
   16d02:	f009 fc54 	bl	205ae <strlen>
   16d06:	2309      	movs	r3, #9
   16d08:	f88d 3000 	strb.w	r3, [sp]
   16d0c:	f88d 0001 	strb.w	r0, [sp, #1]
   16d10:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   16d14:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   16d18:	f1b8 0f00 	cmp.w	r8, #0
   16d1c:	d030      	beq.n	16d80 <le_adv_update.constprop.0+0xb4>
   16d1e:	f1ba 0f00 	cmp.w	sl, #0
   16d22:	d12d      	bne.n	16d80 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   16d24:	2301      	movs	r3, #1
			d[1].data = &data;
   16d26:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   16d2a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   16d2c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   16d2e:	a902      	add	r1, sp, #8
   16d30:	f242 0008 	movw	r0, #8200	; 0x2008
   16d34:	f7ff ff58 	bl	16be8 <hci_set_ad>
		if (err) {
   16d38:	4604      	mov	r4, r0
   16d3a:	b938      	cbnz	r0, 16d4c <le_adv_update.constprop.0+0x80>
	if (scannable) {
   16d3c:	f1ba 0f00 	cmp.w	sl, #0
   16d40:	d120      	bne.n	16d84 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16d42:	2104      	movs	r1, #4
   16d44:	f106 0010 	add.w	r0, r6, #16
   16d48:	f009 fd51 	bl	207ee <atomic_or>
}
   16d4c:	4620      	mov	r0, r4
   16d4e:	b007      	add	sp, #28
   16d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   16d54:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   16d58:	3a08      	subs	r2, #8
   16d5a:	2a01      	cmp	r2, #1
   16d5c:	d925      	bls.n	16daa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   16d5e:	3301      	adds	r3, #1
   16d60:	429f      	cmp	r7, r3
   16d62:	d1f7      	bne.n	16d54 <le_adv_update.constprop.0+0x88>
   16d64:	e7c8      	b.n	16cf8 <le_adv_update.constprop.0+0x2c>
   16d66:	2300      	movs	r3, #0
   16d68:	e7fa      	b.n	16d60 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   16d6a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   16d6e:	3a08      	subs	r2, #8
   16d70:	2a01      	cmp	r2, #1
   16d72:	d91a      	bls.n	16daa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   16d74:	3301      	adds	r3, #1
   16d76:	4599      	cmp	r9, r3
   16d78:	d1f7      	bne.n	16d6a <le_adv_update.constprop.0+0x9e>
   16d7a:	e7bf      	b.n	16cfc <le_adv_update.constprop.0+0x30>
   16d7c:	2300      	movs	r3, #0
   16d7e:	e7fa      	b.n	16d76 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   16d80:	2201      	movs	r2, #1
   16d82:	e7d4      	b.n	16d2e <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   16d84:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   16d88:	2201      	movs	r2, #1
   16d8a:	f1b8 0f00 	cmp.w	r8, #0
   16d8e:	d003      	beq.n	16d98 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   16d90:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   16d92:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   16d96:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   16d98:	a902      	add	r1, sp, #8
   16d9a:	f242 0009 	movw	r0, #8201	; 0x2009
   16d9e:	f7ff ff23 	bl	16be8 <hci_set_ad>
		if (err) {
   16da2:	2800      	cmp	r0, #0
   16da4:	d0cd      	beq.n	16d42 <le_adv_update.constprop.0+0x76>
   16da6:	4604      	mov	r4, r0
   16da8:	e7d0      	b.n	16d4c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   16daa:	f06f 0415 	mvn.w	r4, #21
   16dae:	e7cd      	b.n	16d4c <le_adv_update.constprop.0+0x80>
   16db0:	000238c8 	.word	0x000238c8

00016db4 <set_le_adv_enable_legacy>:
{
   16db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16db6:	4606      	mov	r6, r0
   16db8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   16dba:	f242 000a 	movw	r0, #8202	; 0x200a
   16dbe:	2101      	movs	r1, #1
   16dc0:	f7ff fdda 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   16dc4:	4604      	mov	r4, r0
   16dc6:	b1e8      	cbz	r0, 16e04 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   16dc8:	3008      	adds	r0, #8
   16dca:	b1cd      	cbz	r5, 16e00 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
   16dcc:	2101      	movs	r1, #1
   16dce:	f00a fe56 	bl	21a7e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   16dd2:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
   16dd4:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   16dd6:	4620      	mov	r0, r4
   16dd8:	9302      	str	r3, [sp, #8]
	state->target = target;
   16dda:	9601      	str	r6, [sp, #4]
	state->val = val;
   16ddc:	f88d 500c 	strb.w	r5, [sp, #12]
   16de0:	f003 fefa 	bl	1abd8 <net_buf_id>
   16de4:	4b09      	ldr	r3, [pc, #36]	; (16e0c <set_le_adv_enable_legacy+0x58>)
   16de6:	220c      	movs	r2, #12
   16de8:	fb02 3000 	mla	r0, r2, r0, r3
   16dec:	ab01      	add	r3, sp, #4
   16dee:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   16df0:	2200      	movs	r2, #0
   16df2:	4621      	mov	r1, r4
   16df4:	f242 000a 	movw	r0, #8202	; 0x200a
   16df8:	f7ff fdf6 	bl	169e8 <bt_hci_cmd_send_sync>
}
   16dfc:	b004      	add	sp, #16
   16dfe:	bd70      	pop	{r4, r5, r6, pc}
   16e00:	4629      	mov	r1, r5
   16e02:	e7e4      	b.n	16dce <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   16e04:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16e08:	e7f8      	b.n	16dfc <set_le_adv_enable_legacy+0x48>
   16e0a:	bf00      	nop
   16e0c:	20002b74 	.word	0x20002b74

00016e10 <bt_send>:
	return bt_dev.drv->send(buf);
   16e10:	4b02      	ldr	r3, [pc, #8]	; (16e1c <bt_send+0xc>)
   16e12:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   16e16:	691b      	ldr	r3, [r3, #16]
   16e18:	4718      	bx	r3
   16e1a:	bf00      	nop
   16e1c:	200003c8 	.word	0x200003c8

00016e20 <bt_hci_cmd_send>:
{
   16e20:	b538      	push	{r3, r4, r5, lr}
   16e22:	4605      	mov	r5, r0
	if (!buf) {
   16e24:	460c      	mov	r4, r1
   16e26:	b919      	cbnz	r1, 16e30 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16e28:	f7ff fda6 	bl	16978 <bt_hci_cmd_create>
		if (!buf) {
   16e2c:	4604      	mov	r4, r0
   16e2e:	b1f0      	cbz	r0, 16e6e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16e30:	f640 4335 	movw	r3, #3125	; 0xc35
   16e34:	429d      	cmp	r5, r3
   16e36:	d114      	bne.n	16e62 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   16e38:	4620      	mov	r0, r4
   16e3a:	f7ff ffe9 	bl	16e10 <bt_send>
		if (err) {
   16e3e:	4605      	mov	r5, r0
   16e40:	b168      	cbz	r0, 16e5e <bt_hci_cmd_send+0x3e>
   16e42:	4b0c      	ldr	r3, [pc, #48]	; (16e74 <bt_hci_cmd_send+0x54>)
   16e44:	4a0c      	ldr	r2, [pc, #48]	; (16e78 <bt_hci_cmd_send+0x58>)
   16e46:	1ad2      	subs	r2, r2, r3
   16e48:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   16e4a:	0192      	lsls	r2, r2, #6
   16e4c:	4601      	mov	r1, r0
   16e4e:	f042 0201 	orr.w	r2, r2, #1
   16e52:	480a      	ldr	r0, [pc, #40]	; (16e7c <bt_hci_cmd_send+0x5c>)
   16e54:	f008 ffd4 	bl	1fe00 <log_1>
			net_buf_unref(buf);
   16e58:	4620      	mov	r0, r4
   16e5a:	f003 ff71 	bl	1ad40 <net_buf_unref>
}
   16e5e:	4628      	mov	r0, r5
   16e60:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16e62:	4807      	ldr	r0, [pc, #28]	; (16e80 <bt_hci_cmd_send+0x60>)
   16e64:	4621      	mov	r1, r4
   16e66:	f00a fdc8 	bl	219fa <net_buf_put>
	return 0;
   16e6a:	2500      	movs	r5, #0
   16e6c:	e7f7      	b.n	16e5e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   16e6e:	f06f 0536 	mvn.w	r5, #54	; 0x36
   16e72:	e7f4      	b.n	16e5e <bt_hci_cmd_send+0x3e>
   16e74:	00022cf0 	.word	0x00022cf0
   16e78:	00022d18 	.word	0x00022d18
   16e7c:	0002440a 	.word	0x0002440a
   16e80:	200004dc 	.word	0x200004dc

00016e84 <conn_auto_initiate>:
{
   16e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16e86:	7a83      	ldrb	r3, [r0, #10]
   16e88:	2b07      	cmp	r3, #7
{
   16e8a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16e8c:	d149      	bne.n	16f22 <conn_auto_initiate+0x9e>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16e8e:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16e90:	4630      	mov	r0, r6
   16e92:	f009 fca0 	bl	207d6 <atomic_get>
   16e96:	0480      	lsls	r0, r0, #18
   16e98:	d41b      	bmi.n	16ed2 <conn_auto_initiate+0x4e>
   16e9a:	78e3      	ldrb	r3, [r4, #3]
   16e9c:	b123      	cbz	r3, 16ea8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   16e9e:	4b22      	ldr	r3, [pc, #136]	; (16f28 <conn_auto_initiate+0xa4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   16ea0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   16ea4:	0719      	lsls	r1, r3, #28
   16ea6:	d514      	bpl.n	16ed2 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16ea8:	2102      	movs	r1, #2
   16eaa:	f242 0016 	movw	r0, #8214	; 0x2016
   16eae:	f7ff fd63 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   16eb2:	4605      	mov	r5, r0
   16eb4:	b168      	cbz	r0, 16ed2 <conn_auto_initiate+0x4e>
	return net_buf_simple_add(&buf->b, len);
   16eb6:	2102      	movs	r1, #2
   16eb8:	3008      	adds	r0, #8
   16eba:	f00a fdd1 	bl	21a60 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16ebe:	8823      	ldrh	r3, [r4, #0]
   16ec0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   16ec2:	4629      	mov	r1, r5
   16ec4:	f242 0016 	movw	r0, #8214	; 0x2016
}
   16ec8:	b002      	add	sp, #8
   16eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   16ece:	f7ff bfa7 	b.w	16e20 <bt_hci_cmd_send>
   16ed2:	4630      	mov	r0, r6
   16ed4:	f009 fc7f 	bl	207d6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16ed8:	04c2      	lsls	r2, r0, #19
   16eda:	f3c0 3100 	ubfx	r1, r0, #12, #1
   16ede:	d420      	bmi.n	16f22 <conn_auto_initiate+0x9e>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   16ee0:	4b11      	ldr	r3, [pc, #68]	; (16f28 <conn_auto_initiate+0xa4>)
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   16ee2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
   16ee6:	07db      	lsls	r3, r3, #31
   16ee8:	d51b      	bpl.n	16f22 <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16eea:	2302      	movs	r3, #2
   16eec:	9100      	str	r1, [sp, #0]
   16eee:	461a      	mov	r2, r3
   16ef0:	4620      	mov	r0, r4
   16ef2:	f009 fce6 	bl	208c2 <bt_le_set_phy>
		if (!err) {
   16ef6:	4601      	mov	r1, r0
   16ef8:	b930      	cbnz	r0, 16f08 <conn_auto_initiate+0x84>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16efa:	2180      	movs	r1, #128	; 0x80
   16efc:	4630      	mov	r0, r6
}
   16efe:	b002      	add	sp, #8
   16f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16f04:	f009 bc73 	b.w	207ee <atomic_or>
   16f08:	4b08      	ldr	r3, [pc, #32]	; (16f2c <conn_auto_initiate+0xa8>)
   16f0a:	4a09      	ldr	r2, [pc, #36]	; (16f30 <conn_auto_initiate+0xac>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   16f0c:	4809      	ldr	r0, [pc, #36]	; (16f34 <conn_auto_initiate+0xb0>)
   16f0e:	1ad2      	subs	r2, r2, r3
   16f10:	08d2      	lsrs	r2, r2, #3
   16f12:	0192      	lsls	r2, r2, #6
   16f14:	f042 0201 	orr.w	r2, r2, #1
}
   16f18:	b002      	add	sp, #8
   16f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Failed to set LE PHY (%d)", err);
   16f1e:	f008 bf6f 	b.w	1fe00 <log_1>
}
   16f22:	b002      	add	sp, #8
   16f24:	bd70      	pop	{r4, r5, r6, pc}
   16f26:	bf00      	nop
   16f28:	200003c8 	.word	0x200003c8
   16f2c:	00022cf0 	.word	0x00022cf0
   16f30:	00022d18 	.word	0x00022d18
   16f34:	0002442c 	.word	0x0002442c

00016f38 <le_phy_update_complete>:
{
   16f38:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f3a:	6883      	ldr	r3, [r0, #8]
   16f3c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16f40:	4628      	mov	r0, r5
   16f42:	f001 fb93 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   16f46:	4604      	mov	r4, r0
   16f48:	b960      	cbnz	r0, 16f64 <le_phy_update_complete+0x2c>
   16f4a:	4b11      	ldr	r3, [pc, #68]	; (16f90 <le_phy_update_complete+0x58>)
   16f4c:	4a11      	ldr	r2, [pc, #68]	; (16f94 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f4e:	4812      	ldr	r0, [pc, #72]	; (16f98 <le_phy_update_complete+0x60>)
   16f50:	1ad2      	subs	r2, r2, r3
   16f52:	08d2      	lsrs	r2, r2, #3
   16f54:	0192      	lsls	r2, r2, #6
   16f56:	4629      	mov	r1, r5
   16f58:	f042 0201 	orr.w	r2, r2, #1
}
   16f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f60:	f008 bf4e 	b.w	1fe00 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   16f64:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16f66:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16f6a:	4628      	mov	r0, r5
   16f6c:	f009 fc4e 	bl	2080c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16f70:	0603      	lsls	r3, r0, #24
   16f72:	d507      	bpl.n	16f84 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16f78:	4628      	mov	r0, r5
   16f7a:	f009 fc38 	bl	207ee <atomic_or>
		conn_auto_initiate(conn);
   16f7e:	4620      	mov	r0, r4
   16f80:	f7ff ff80 	bl	16e84 <conn_auto_initiate>
	bt_conn_unref(conn);
   16f84:	4620      	mov	r0, r4
}
   16f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16f8a:	f009 bd8f 	b.w	20aac <bt_conn_unref>
   16f8e:	bf00      	nop
   16f90:	00022cf0 	.word	0x00022cf0
   16f94:	00022d18 	.word	0x00022d18
   16f98:	000241b7 	.word	0x000241b7

00016f9c <le_remote_feat_complete>:
{
   16f9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16f9e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16fa0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16fa4:	4630      	mov	r0, r6
   16fa6:	f001 fb61 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   16faa:	4604      	mov	r4, r0
   16fac:	b960      	cbnz	r0, 16fc8 <le_remote_feat_complete+0x2c>
   16fae:	4a10      	ldr	r2, [pc, #64]	; (16ff0 <le_remote_feat_complete+0x54>)
   16fb0:	4b10      	ldr	r3, [pc, #64]	; (16ff4 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16fb2:	4811      	ldr	r0, [pc, #68]	; (16ff8 <le_remote_feat_complete+0x5c>)
   16fb4:	1ad2      	subs	r2, r2, r3
   16fb6:	08d2      	lsrs	r2, r2, #3
   16fb8:	0192      	lsls	r2, r2, #6
   16fba:	4631      	mov	r1, r6
   16fbc:	f042 0201 	orr.w	r2, r2, #1
}
   16fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16fc4:	f008 bf1c 	b.w	1fe00 <log_1>
	if (!evt->status) {
   16fc8:	782b      	ldrb	r3, [r5, #0]
   16fca:	b923      	cbnz	r3, 16fd6 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   16fcc:	2208      	movs	r2, #8
   16fce:	1ce9      	adds	r1, r5, #3
   16fd0:	30ac      	adds	r0, #172	; 0xac
   16fd2:	f009 fb2f 	bl	20634 <memcpy>
   16fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16fda:	1d20      	adds	r0, r4, #4
   16fdc:	f009 fc07 	bl	207ee <atomic_or>
	conn_auto_initiate(conn);
   16fe0:	4620      	mov	r0, r4
   16fe2:	f7ff ff4f 	bl	16e84 <conn_auto_initiate>
	bt_conn_unref(conn);
   16fe6:	4620      	mov	r0, r4
}
   16fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16fec:	f009 bd5e 	b.w	20aac <bt_conn_unref>
   16ff0:	00022d18 	.word	0x00022d18
   16ff4:	00022cf0 	.word	0x00022cf0
   16ff8:	000241b7 	.word	0x000241b7

00016ffc <le_conn_param_neg_reply>:
{
   16ffc:	b570      	push	{r4, r5, r6, lr}
   16ffe:	4606      	mov	r6, r0
   17000:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   17002:	f242 0021 	movw	r0, #8225	; 0x2021
   17006:	2103      	movs	r1, #3
   17008:	f7ff fcb6 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   1700c:	4604      	mov	r4, r0
   1700e:	b958      	cbnz	r0, 17028 <le_conn_param_neg_reply+0x2c>
   17010:	490c      	ldr	r1, [pc, #48]	; (17044 <le_conn_param_neg_reply+0x48>)
   17012:	4b0d      	ldr	r3, [pc, #52]	; (17048 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   17014:	480d      	ldr	r0, [pc, #52]	; (1704c <le_conn_param_neg_reply+0x50>)
   17016:	1ac9      	subs	r1, r1, r3
   17018:	08c9      	lsrs	r1, r1, #3
   1701a:	0189      	lsls	r1, r1, #6
}
   1701c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   17020:	f041 0101 	orr.w	r1, r1, #1
   17024:	f008 bedf 	b.w	1fde6 <log_0>
   17028:	2103      	movs	r1, #3
   1702a:	3008      	adds	r0, #8
   1702c:	f00a fd18 	bl	21a60 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   17030:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   17032:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17034:	4621      	mov	r1, r4
   17036:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1703a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1703e:	f7ff beef 	b.w	16e20 <bt_hci_cmd_send>
   17042:	bf00      	nop
   17044:	00022d18 	.word	0x00022d18
   17048:	00022cf0 	.word	0x00022cf0
   1704c:	00024446 	.word	0x00024446

00017050 <le_conn_param_req>:
{
   17050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17052:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17054:	78d9      	ldrb	r1, [r3, #3]
   17056:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   17058:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1705a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1705e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   17062:	7959      	ldrb	r1, [r3, #5]
   17064:	791a      	ldrb	r2, [r3, #4]
   17066:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1706a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1706e:	799a      	ldrb	r2, [r3, #6]
   17070:	79d9      	ldrb	r1, [r3, #7]
   17072:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17076:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1707a:	7a1a      	ldrb	r2, [r3, #8]
   1707c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1707e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17080:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17084:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17086:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1708a:	f001 faef 	bl	1866c <bt_conn_lookup_handle>
	if (!conn) {
   1708e:	4606      	mov	r6, r0
   17090:	b980      	cbnz	r0, 170b4 <le_conn_param_req+0x64>
   17092:	4b20      	ldr	r3, [pc, #128]	; (17114 <le_conn_param_req+0xc4>)
   17094:	4a20      	ldr	r2, [pc, #128]	; (17118 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17096:	4821      	ldr	r0, [pc, #132]	; (1711c <le_conn_param_req+0xcc>)
   17098:	1ad2      	subs	r2, r2, r3
   1709a:	08d2      	lsrs	r2, r2, #3
   1709c:	0192      	lsls	r2, r2, #6
   1709e:	4621      	mov	r1, r4
   170a0:	f042 0201 	orr.w	r2, r2, #1
   170a4:	f008 feac 	bl	1fe00 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   170a8:	2102      	movs	r1, #2
   170aa:	4620      	mov	r0, r4
   170ac:	f7ff ffa6 	bl	16ffc <le_conn_param_neg_reply>
}
   170b0:	b003      	add	sp, #12
   170b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   170b4:	4669      	mov	r1, sp
   170b6:	f001 f92f 	bl	18318 <le_param_req>
   170ba:	b938      	cbnz	r0, 170cc <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   170bc:	211e      	movs	r1, #30
   170be:	4620      	mov	r0, r4
   170c0:	f7ff ff9c 	bl	16ffc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   170c4:	4630      	mov	r0, r6
   170c6:	f009 fcf1 	bl	20aac <bt_conn_unref>
   170ca:	e7f1      	b.n	170b0 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   170cc:	210e      	movs	r1, #14
   170ce:	f242 0020 	movw	r0, #8224	; 0x2020
   170d2:	f7ff fc51 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   170d6:	4605      	mov	r5, r0
   170d8:	2800      	cmp	r0, #0
   170da:	d0f3      	beq.n	170c4 <le_conn_param_req+0x74>
   170dc:	210e      	movs	r1, #14
   170de:	3008      	adds	r0, #8
   170e0:	f00a fcbe 	bl	21a60 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   170e4:	220e      	movs	r2, #14
   170e6:	4604      	mov	r4, r0
   170e8:	2100      	movs	r1, #0
   170ea:	f009 face 	bl	2068a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   170ee:	f8bd 3000 	ldrh.w	r3, [sp]
   170f2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   170f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   170f8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   170fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   170fe:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17100:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   17104:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17106:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   17108:	4629      	mov	r1, r5
   1710a:	f242 0020 	movw	r0, #8224	; 0x2020
   1710e:	f7ff fe87 	bl	16e20 <bt_hci_cmd_send>
   17112:	e7d7      	b.n	170c4 <le_conn_param_req+0x74>
   17114:	00022cf0 	.word	0x00022cf0
   17118:	00022d18 	.word	0x00022d18
   1711c:	000241b7 	.word	0x000241b7

00017120 <hci_tx_thread>:
{
   17120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17124:	4d51      	ldr	r5, [pc, #324]	; (1726c <hci_tx_thread+0x14c>)
   17126:	4b52      	ldr	r3, [pc, #328]	; (17270 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   17128:	f8df 914c 	ldr.w	r9, [pc, #332]	; 17278 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   1712c:	f8df a174 	ldr.w	sl, [pc, #372]	; 172a4 <hci_tx_thread+0x184>
   17130:	1aed      	subs	r5, r5, r3
   17132:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   17134:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17138:	484e      	ldr	r0, [pc, #312]	; (17274 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1713a:	f36f 3310 	bfc	r3, #12, #5
   1713e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17142:	f001 fa29 	bl	18598 <bt_conn_prepare_events>
   17146:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17148:	484b      	ldr	r0, [pc, #300]	; (17278 <hci_tx_thread+0x158>)
   1714a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1714e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17152:	4639      	mov	r1, r7
   17154:	f007 fa64 	bl	1e620 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   17158:	b160      	cbz	r0, 17174 <hci_tx_thread+0x54>
   1715a:	4948      	ldr	r1, [pc, #288]	; (1727c <hci_tx_thread+0x15c>)
   1715c:	4848      	ldr	r0, [pc, #288]	; (17280 <hci_tx_thread+0x160>)
   1715e:	f241 4371 	movw	r3, #5233	; 0x1471
   17162:	4652      	mov	r2, sl
   17164:	f008 fa16 	bl	1f594 <printk>
   17168:	4040      	eors	r0, r0
   1716a:	f380 8811 	msr	BASEPRI, r0
   1716e:	f04f 0003 	mov.w	r0, #3
   17172:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   17174:	4e43      	ldr	r6, [pc, #268]	; (17284 <hci_tx_thread+0x164>)
{
   17176:	f8df 8100 	ldr.w	r8, [pc, #256]	; 17278 <hci_tx_thread+0x158>
   1717a:	f106 0be0 	add.w	fp, r6, #224	; 0xe0
	for (; count; ev++, count--) {
   1717e:	b917      	cbnz	r7, 17186 <hci_tx_thread+0x66>
	z_impl_k_yield();
   17180:	f006 fe38 	bl	1ddf4 <z_impl_k_yield>
	while (1) {
   17184:	e7d6      	b.n	17134 <hci_tx_thread+0x14>
		switch (ev->state) {
   17186:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1718a:	f3c1 3104 	ubfx	r1, r1, #12, #5
   1718e:	2901      	cmp	r1, #1
   17190:	d959      	bls.n	17246 <hci_tx_thread+0x126>
   17192:	2904      	cmp	r1, #4
   17194:	d163      	bne.n	1725e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   17196:	f898 300c 	ldrb.w	r3, [r8, #12]
   1719a:	2b00      	cmp	r3, #0
   1719c:	d157      	bne.n	1724e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1719e:	483a      	ldr	r0, [pc, #232]	; (17288 <hci_tx_thread+0x168>)
   171a0:	2200      	movs	r2, #0
   171a2:	2300      	movs	r3, #0
   171a4:	f00a fc0b 	bl	219be <net_buf_get>
	BT_ASSERT(buf);
   171a8:	4604      	mov	r4, r0
   171aa:	b960      	cbnz	r0, 171c6 <hci_tx_thread+0xa6>
   171ac:	4937      	ldr	r1, [pc, #220]	; (1728c <hci_tx_thread+0x16c>)
   171ae:	4834      	ldr	r0, [pc, #208]	; (17280 <hci_tx_thread+0x160>)
   171b0:	f241 430e 	movw	r3, #5134	; 0x140e
   171b4:	4652      	mov	r2, sl
   171b6:	f008 f9ed 	bl	1f594 <printk>
   171ba:	4040      	eors	r0, r0
   171bc:	f380 8811 	msr	BASEPRI, r0
   171c0:	f04f 0003 	mov.w	r0, #3
   171c4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   171c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   171ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   171ce:	4658      	mov	r0, fp
   171d0:	f006 feac 	bl	1df2c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   171d4:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   171d8:	b163      	cbz	r3, 171f4 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   171da:	01a9      	lsls	r1, r5, #6
   171dc:	482c      	ldr	r0, [pc, #176]	; (17290 <hci_tx_thread+0x170>)
   171de:	f041 0101 	orr.w	r1, r1, #1
   171e2:	f008 fe00 	bl	1fde6 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   171e6:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   171ea:	f003 fda9 	bl	1ad40 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   171ee:	2300      	movs	r3, #0
   171f0:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
   171f4:	4620      	mov	r0, r4
   171f6:	f00a fc0d 	bl	21a14 <net_buf_ref>
   171fa:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
   171fe:	4620      	mov	r0, r4
   17200:	f7ff fe06 	bl	16e10 <bt_send>
	if (err) {
   17204:	4601      	mov	r1, r0
   17206:	b1f0      	cbz	r0, 17246 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   17208:	01aa      	lsls	r2, r5, #6
   1720a:	4822      	ldr	r0, [pc, #136]	; (17294 <hci_tx_thread+0x174>)
   1720c:	f042 0201 	orr.w	r2, r2, #1
   17210:	f008 fdf6 	bl	1fe00 <log_1>
	z_impl_k_sem_give(sem);
   17214:	4820      	ldr	r0, [pc, #128]	; (17298 <hci_tx_thread+0x178>)
   17216:	f006 fe63 	bl	1dee0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1721a:	4620      	mov	r0, r4
   1721c:	f003 fcdc 	bl	1abd8 <net_buf_id>
   17220:	4b1e      	ldr	r3, [pc, #120]	; (1729c <hci_tx_thread+0x17c>)
   17222:	220c      	movs	r2, #12
   17224:	fb02 3000 	mla	r0, r2, r0, r3
   17228:	211f      	movs	r1, #31
   1722a:	8840      	ldrh	r0, [r0, #2]
   1722c:	4622      	mov	r2, r4
   1722e:	f7ff f8dd 	bl	163ec <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   17232:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   17236:	f003 fd83 	bl	1ad40 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1723a:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1723c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1723e:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
   17242:	f003 fd7d 	bl	1ad40 <net_buf_unref>
	for (; count; ev++, count--) {
   17246:	f108 0814 	add.w	r8, r8, #20
   1724a:	3f01      	subs	r7, #1
   1724c:	e797      	b.n	1717e <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1724e:	2b01      	cmp	r3, #1
   17250:	d1f9      	bne.n	17246 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   17252:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   17256:	3834      	subs	r0, #52	; 0x34
   17258:	f001 fc74 	bl	18b44 <bt_conn_process_tx>
   1725c:	e7f3      	b.n	17246 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1725e:	01aa      	lsls	r2, r5, #6
   17260:	480f      	ldr	r0, [pc, #60]	; (172a0 <hci_tx_thread+0x180>)
   17262:	f042 0202 	orr.w	r2, r2, #2
   17266:	f008 fdcb 	bl	1fe00 <log_1>
   1726a:	e7ec      	b.n	17246 <hci_tx_thread+0x126>
   1726c:	00022d18 	.word	0x00022d18
   17270:	00022cf0 	.word	0x00022cf0
   17274:	20000574 	.word	0x20000574
   17278:	20000560 	.word	0x20000560
   1727c:	000243ac 	.word	0x000243ac
   17280:	000242d4 	.word	0x000242d4
   17284:	200003c8 	.word	0x200003c8
   17288:	200004dc 	.word	0x200004dc
   1728c:	0002402c 	.word	0x0002402c
   17290:	00024460 	.word	0x00024460
   17294:	0002440a 	.word	0x0002440a
   17298:	200004a8 	.word	0x200004a8
   1729c:	20002b74 	.word	0x20002b74
   172a0:	0002447b 	.word	0x0002447b
   172a4:	00024287 	.word	0x00024287

000172a8 <hci_event_prio>:
{
   172a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172ac:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   172ae:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   172b2:	4630      	mov	r0, r6
   172b4:	f00a fc0b 	bl	21ace <net_buf_simple_headroom>
	state->len = buf->len;
   172b8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   172bc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   172c0:	4605      	mov	r5, r0
   172c2:	d80c      	bhi.n	172de <hci_event_prio+0x36>
   172c4:	4a1c      	ldr	r2, [pc, #112]	; (17338 <hci_event_prio+0x90>)
   172c6:	491d      	ldr	r1, [pc, #116]	; (1733c <hci_event_prio+0x94>)
   172c8:	481d      	ldr	r0, [pc, #116]	; (17340 <hci_event_prio+0x98>)
   172ca:	f641 03ae 	movw	r3, #6318	; 0x18ae
   172ce:	f008 f961 	bl	1f594 <printk>
   172d2:	4040      	eors	r0, r0
   172d4:	f380 8811 	msr	BASEPRI, r0
   172d8:	f04f 0003 	mov.w	r0, #3
   172dc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   172de:	2102      	movs	r1, #2
   172e0:	4630      	mov	r0, r6
   172e2:	f00a fbe4 	bl	21aae <net_buf_simple_pull_mem>
   172e6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   172e8:	7800      	ldrb	r0, [r0, #0]
   172ea:	f009 fa53 	bl	20794 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   172ee:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   172f0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   172f2:	d40c      	bmi.n	1730e <hci_event_prio+0x66>
   172f4:	4a10      	ldr	r2, [pc, #64]	; (17338 <hci_event_prio+0x90>)
   172f6:	4913      	ldr	r1, [pc, #76]	; (17344 <hci_event_prio+0x9c>)
   172f8:	4811      	ldr	r0, [pc, #68]	; (17340 <hci_event_prio+0x98>)
   172fa:	f641 03b2 	movw	r3, #6322	; 0x18b2
   172fe:	f008 f949 	bl	1f594 <printk>
   17302:	4040      	eors	r0, r0
   17304:	f380 8811 	msr	BASEPRI, r0
   17308:	f04f 0003 	mov.w	r0, #3
   1730c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1730e:	2305      	movs	r3, #5
   17310:	4a0d      	ldr	r2, [pc, #52]	; (17348 <hci_event_prio+0xa0>)
   17312:	7838      	ldrb	r0, [r7, #0]
   17314:	4621      	mov	r1, r4
   17316:	f7ff f8e3 	bl	164e0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1731a:	07b3      	lsls	r3, r6, #30
   1731c:	d507      	bpl.n	1732e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1731e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   17320:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17324:	fa10 f585 	uxtah	r5, r0, r5
   17328:	60a5      	str	r5, [r4, #8]
}
   1732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1732e:	4620      	mov	r0, r4
}
   17330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   17334:	f003 bd04 	b.w	1ad40 <net_buf_unref>
   17338:	00024287 	.word	0x00024287
   1733c:	000242bb 	.word	0x000242bb
   17340:	000242d4 	.word	0x000242d4
   17344:	0002449c 	.word	0x0002449c
   17348:	00023030 	.word	0x00023030

0001734c <bt_recv>:
{
   1734c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1734e:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   17350:	2901      	cmp	r1, #1
{
   17352:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   17354:	d007      	beq.n	17366 <bt_recv+0x1a>
   17356:	2903      	cmp	r1, #3
   17358:	d113      	bne.n	17382 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1735a:	4812      	ldr	r0, [pc, #72]	; (173a4 <bt_recv+0x58>)
   1735c:	4629      	mov	r1, r5
   1735e:	f00a fb4c 	bl	219fa <net_buf_put>
		return 0;
   17362:	2000      	movs	r0, #0
   17364:	e00c      	b.n	17380 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17366:	6883      	ldr	r3, [r0, #8]
   17368:	7818      	ldrb	r0, [r3, #0]
   1736a:	f009 fa13 	bl	20794 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1736e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17370:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17372:	d502      	bpl.n	1737a <bt_recv+0x2e>
			hci_event_prio(buf);
   17374:	4628      	mov	r0, r5
   17376:	f7ff ff97 	bl	172a8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1737a:	f014 0002 	ands.w	r0, r4, #2
   1737e:	d1ec      	bne.n	1735a <bt_recv+0xe>
}
   17380:	bd38      	pop	{r3, r4, r5, pc}
   17382:	4b09      	ldr	r3, [pc, #36]	; (173a8 <bt_recv+0x5c>)
   17384:	4a09      	ldr	r2, [pc, #36]	; (173ac <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17386:	480a      	ldr	r0, [pc, #40]	; (173b0 <bt_recv+0x64>)
   17388:	1ad2      	subs	r2, r2, r3
   1738a:	08d2      	lsrs	r2, r2, #3
   1738c:	0192      	lsls	r2, r2, #6
   1738e:	f042 0201 	orr.w	r2, r2, #1
   17392:	f008 fd35 	bl	1fe00 <log_1>
		net_buf_unref(buf);
   17396:	4628      	mov	r0, r5
   17398:	f003 fcd2 	bl	1ad40 <net_buf_unref>
		return -EINVAL;
   1739c:	f06f 0015 	mvn.w	r0, #21
   173a0:	e7ee      	b.n	17380 <bt_recv+0x34>
   173a2:	bf00      	nop
   173a4:	200004c4 	.word	0x200004c4
   173a8:	00022cf0 	.word	0x00022cf0
   173ac:	00022d18 	.word	0x00022d18
   173b0:	000244b5 	.word	0x000244b5

000173b4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   173b4:	4a08      	ldr	r2, [pc, #32]	; (173d8 <bt_hci_driver_register+0x24>)
{
   173b6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   173b8:	f8d2 012c 	ldr.w	r0, [r2, #300]	; 0x12c
   173bc:	b930      	cbnz	r0, 173cc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   173be:	68d9      	ldr	r1, [r3, #12]
   173c0:	b139      	cbz	r1, 173d2 <bt_hci_driver_register+0x1e>
   173c2:	6919      	ldr	r1, [r3, #16]
   173c4:	b129      	cbz	r1, 173d2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   173c6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	return 0;
   173ca:	4770      	bx	lr
		return -EALREADY;
   173cc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   173d0:	4770      	bx	lr
		return -EINVAL;
   173d2:	f06f 0015 	mvn.w	r0, #21
}
   173d6:	4770      	bx	lr
   173d8:	200003c8 	.word	0x200003c8

000173dc <bt_finalize_init>:
{
   173dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   173e0:	4c2b      	ldr	r4, [pc, #172]	; (17490 <bt_finalize_init+0xb4>)
   173e2:	4d2c      	ldr	r5, [pc, #176]	; (17494 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   173e4:	4e2c      	ldr	r6, [pc, #176]	; (17498 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   173e6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 174b0 <bt_finalize_init+0xd4>
{
   173ea:	b087      	sub	sp, #28
   173ec:	2102      	movs	r1, #2
   173ee:	f104 0094 	add.w	r0, r4, #148	; 0x94
   173f2:	f009 f9fc 	bl	207ee <atomic_or>
   173f6:	4b29      	ldr	r3, [pc, #164]	; (1749c <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   173f8:	4929      	ldr	r1, [pc, #164]	; (174a0 <bt_finalize_init+0xc4>)
   173fa:	1aed      	subs	r5, r5, r3
   173fc:	79e3      	ldrb	r3, [r4, #7]
   173fe:	4620      	mov	r0, r4
   17400:	2b01      	cmp	r3, #1
   17402:	bf88      	it	hi
   17404:	460e      	movhi	r6, r1
   17406:	f7fe fd85 	bl	15f14 <bt_addr_le_str_real>
   1740a:	f7fd f98d 	bl	14728 <log_strdup>
   1740e:	08ed      	lsrs	r5, r5, #3
   17410:	01ad      	lsls	r5, r5, #6
   17412:	f045 0703 	orr.w	r7, r5, #3
   17416:	4602      	mov	r2, r0
   17418:	4631      	mov	r1, r6
   1741a:	4822      	ldr	r0, [pc, #136]	; (174a4 <bt_finalize_init+0xc8>)
   1741c:	463b      	mov	r3, r7
   1741e:	f008 fd03 	bl	1fe28 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   17422:	46a0      	mov	r8, r4
   17424:	2601      	movs	r6, #1
   17426:	79e3      	ldrb	r3, [r4, #7]
   17428:	429e      	cmp	r6, r3
   1742a:	f108 0807 	add.w	r8, r8, #7
   1742e:	db22      	blt.n	17476 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   17430:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   17434:	4630      	mov	r0, r6
   17436:	f7fe fe49 	bl	160cc <ver_str>
   1743a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1743c:	9304      	str	r3, [sp, #16]
   1743e:	f045 0503 	orr.w	r5, r5, #3
   17442:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   17444:	9305      	str	r3, [sp, #20]
   17446:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1744a:	462b      	mov	r3, r5
   1744c:	a902      	add	r1, sp, #8
   1744e:	2204      	movs	r2, #4
   17450:	4815      	ldr	r0, [pc, #84]	; (174a8 <bt_finalize_init+0xcc>)
   17452:	f008 fd1e 	bl	1fe92 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   17456:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   1745a:	4630      	mov	r0, r6
   1745c:	f7fe fe36 	bl	160cc <ver_str>
   17460:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   17462:	f8ad 5000 	strh.w	r5, [sp]
   17466:	4601      	mov	r1, r0
   17468:	4632      	mov	r2, r6
   1746a:	4810      	ldr	r0, [pc, #64]	; (174ac <bt_finalize_init+0xd0>)
   1746c:	f008 fcf5 	bl	1fe5a <log_3>
}
   17470:	b007      	add	sp, #28
   17472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   17476:	4640      	mov	r0, r8
   17478:	f7fe fd4c 	bl	15f14 <bt_addr_le_str_real>
   1747c:	f7fd f954 	bl	14728 <log_strdup>
   17480:	4631      	mov	r1, r6
   17482:	4602      	mov	r2, r0
   17484:	463b      	mov	r3, r7
   17486:	4648      	mov	r0, r9
   17488:	f008 fcce 	bl	1fe28 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   1748c:	3601      	adds	r6, #1
   1748e:	e7ca      	b.n	17426 <bt_finalize_init+0x4a>
   17490:	200003c8 	.word	0x200003c8
   17494:	00022d18 	.word	0x00022d18
   17498:	00023749 	.word	0x00023749
   1749c:	00022cf0 	.word	0x00022cf0
   174a0:	000244c9 	.word	0x000244c9
   174a4:	000244cd 	.word	0x000244cd
   174a8:	000244ed 	.word	0x000244ed
   174ac:	0002452b 	.word	0x0002452b
   174b0:	000244dc 	.word	0x000244dc

000174b4 <bt_get_name>:
}
   174b4:	4800      	ldr	r0, [pc, #0]	; (174b8 <bt_get_name+0x4>)
   174b6:	4770      	bx	lr
   174b8:	000238c8 	.word	0x000238c8

000174bc <bt_id_create>:
{
   174bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   174be:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   174c0:	4605      	mov	r5, r0
   174c2:	b918      	cbnz	r0, 174cc <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   174c4:	b344      	cbz	r4, 17518 <bt_id_create+0x5c>
		return -EINVAL;
   174c6:	f06f 0415 	mvn.w	r4, #21
   174ca:	e022      	b.n	17512 <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   174cc:	2300      	movs	r3, #0
   174ce:	4669      	mov	r1, sp
   174d0:	9300      	str	r3, [sp, #0]
   174d2:	f8cd 3003 	str.w	r3, [sp, #3]
   174d6:	f009 f987 	bl	207e8 <bt_addr_le_cmp>
   174da:	2800      	cmp	r0, #0
   174dc:	d0f2      	beq.n	174c4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   174de:	782b      	ldrb	r3, [r5, #0]
   174e0:	2b01      	cmp	r3, #1
   174e2:	d104      	bne.n	174ee <bt_id_create+0x32>
   174e4:	79ab      	ldrb	r3, [r5, #6]
   174e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   174ea:	2bc0      	cmp	r3, #192	; 0xc0
   174ec:	d00a      	beq.n	17504 <bt_id_create+0x48>
   174ee:	4b11      	ldr	r3, [pc, #68]	; (17534 <bt_id_create+0x78>)
   174f0:	4911      	ldr	r1, [pc, #68]	; (17538 <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
   174f2:	4812      	ldr	r0, [pc, #72]	; (1753c <bt_id_create+0x80>)
   174f4:	1ac9      	subs	r1, r1, r3
   174f6:	08c9      	lsrs	r1, r1, #3
   174f8:	0189      	lsls	r1, r1, #6
   174fa:	f041 0101 	orr.w	r1, r1, #1
   174fe:	f008 fc72 	bl	1fde6 <log_0>
			return -EINVAL;
   17502:	e7e0      	b.n	174c6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   17504:	4628      	mov	r0, r5
   17506:	f7fe fdfd 	bl	16104 <id_find>
   1750a:	2800      	cmp	r0, #0
   1750c:	dbda      	blt.n	174c4 <bt_id_create+0x8>
			return -EALREADY;
   1750e:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   17512:	4620      	mov	r0, r4
   17514:	b003      	add	sp, #12
   17516:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17518:	4b09      	ldr	r3, [pc, #36]	; (17540 <bt_id_create+0x84>)
   1751a:	79dc      	ldrb	r4, [r3, #7]
   1751c:	2c01      	cmp	r4, #1
   1751e:	d006      	beq.n	1752e <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
   17520:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   17522:	4629      	mov	r1, r5
   17524:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   17526:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   17528:	f7ff f8f2 	bl	16710 <id_create.isra.0>
	return new_id;
   1752c:	e7f1      	b.n	17512 <bt_id_create+0x56>
		return -ENOMEM;
   1752e:	f06f 040b 	mvn.w	r4, #11
   17532:	e7ee      	b.n	17512 <bt_id_create+0x56>
   17534:	00022cf0 	.word	0x00022cf0
   17538:	00022d18 	.word	0x00022d18
   1753c:	00024552 	.word	0x00024552
   17540:	200003c8 	.word	0x200003c8

00017544 <bt_setup_public_id_addr>:
{
   17544:	b570      	push	{r4, r5, r6, lr}
   17546:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17548:	aa01      	add	r2, sp, #4
   1754a:	2100      	movs	r1, #0
   1754c:	f241 0009 	movw	r0, #4105	; 0x1009
   17550:	f7ff fa4a 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17554:	4e1f      	ldr	r6, [pc, #124]	; (175d4 <bt_setup_public_id_addr+0x90>)
   17556:	4604      	mov	r4, r0
   17558:	b168      	cbz	r0, 17576 <bt_setup_public_id_addr+0x32>
   1755a:	491f      	ldr	r1, [pc, #124]	; (175d8 <bt_setup_public_id_addr+0x94>)
   1755c:	4b1f      	ldr	r3, [pc, #124]	; (175dc <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
   1755e:	4820      	ldr	r0, [pc, #128]	; (175e0 <bt_setup_public_id_addr+0x9c>)
   17560:	1ac9      	subs	r1, r1, r3
   17562:	08c9      	lsrs	r1, r1, #3
   17564:	0189      	lsls	r1, r1, #6
   17566:	f041 0102 	orr.w	r1, r1, #2
   1756a:	f008 fc3c 	bl	1fde6 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1756e:	2300      	movs	r3, #0
   17570:	71f3      	strb	r3, [r6, #7]
}
   17572:	b006      	add	sp, #24
   17574:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17576:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17578:	689d      	ldr	r5, [r3, #8]
   1757a:	9004      	str	r0, [sp, #16]
   1757c:	3501      	adds	r5, #1
   1757e:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   17582:	2206      	movs	r2, #6
   17584:	a904      	add	r1, sp, #16
   17586:	4628      	mov	r0, r5
   17588:	f009 f82d 	bl	205e6 <memcmp>
   1758c:	b918      	cbnz	r0, 17596 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
   1758e:	9801      	ldr	r0, [sp, #4]
   17590:	f003 fbd6 	bl	1ad40 <net_buf_unref>
   17594:	e7eb      	b.n	1756e <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   17596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1759a:	2206      	movs	r2, #6
   1759c:	a902      	add	r1, sp, #8
   1759e:	4628      	mov	r0, r5
   175a0:	9302      	str	r3, [sp, #8]
   175a2:	f8ad 300c 	strh.w	r3, [sp, #12]
   175a6:	f009 f81e 	bl	205e6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   175aa:	2800      	cmp	r0, #0
   175ac:	d0ef      	beq.n	1758e <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   175ae:	4629      	mov	r1, r5
   175b0:	2206      	movs	r2, #6
   175b2:	f10d 0011 	add.w	r0, sp, #17
   175b6:	f009 f83d 	bl	20634 <memcpy>
	net_buf_unref(rsp);
   175ba:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   175bc:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   175c0:	f003 fbbe 	bl	1ad40 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   175c4:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   175c6:	a904      	add	r1, sp, #16
   175c8:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   175ca:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   175cc:	f7ff f8a0 	bl	16710 <id_create.isra.0>
   175d0:	e7cf      	b.n	17572 <bt_setup_public_id_addr+0x2e>
   175d2:	bf00      	nop
   175d4:	200003c8 	.word	0x200003c8
   175d8:	00022d18 	.word	0x00022d18
   175dc:	00022cf0 	.word	0x00022cf0
   175e0:	00024580 	.word	0x00024580

000175e4 <bt_read_static_addr>:
{
   175e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   175e8:	4b25      	ldr	r3, [pc, #148]	; (17680 <bt_read_static_addr+0x9c>)
   175ea:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   175ee:	f014 0401 	ands.w	r4, r4, #1
{
   175f2:	4607      	mov	r7, r0
   175f4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   175f6:	d10a      	bne.n	1760e <bt_read_static_addr+0x2a>
   175f8:	4922      	ldr	r1, [pc, #136]	; (17684 <bt_read_static_addr+0xa0>)
   175fa:	4b23      	ldr	r3, [pc, #140]	; (17688 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   175fc:	4823      	ldr	r0, [pc, #140]	; (1768c <bt_read_static_addr+0xa8>)
   175fe:	1ac9      	subs	r1, r1, r3
   17600:	08c9      	lsrs	r1, r1, #3
   17602:	0189      	lsls	r1, r1, #6
   17604:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
   17608:	f008 fbed 	bl	1fde6 <log_0>
   1760c:	e012      	b.n	17634 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1760e:	aa01      	add	r2, sp, #4
   17610:	2100      	movs	r1, #0
   17612:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17616:	f7ff f9e7 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   1761a:	4605      	mov	r5, r0
   1761c:	b170      	cbz	r0, 1763c <bt_read_static_addr+0x58>
   1761e:	4b1a      	ldr	r3, [pc, #104]	; (17688 <bt_read_static_addr+0xa4>)
   17620:	4918      	ldr	r1, [pc, #96]	; (17684 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   17622:	481b      	ldr	r0, [pc, #108]	; (17690 <bt_read_static_addr+0xac>)
   17624:	1ac9      	subs	r1, r1, r3
   17626:	08c9      	lsrs	r1, r1, #3
   17628:	0189      	lsls	r1, r1, #6
   1762a:	f041 0102 	orr.w	r1, r1, #2
   1762e:	f008 fbda 	bl	1fde6 <log_0>
		return 0;
   17632:	2400      	movs	r4, #0
}
   17634:	4620      	mov	r0, r4
   17636:	b002      	add	sp, #8
   17638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   1763c:	9b01      	ldr	r3, [sp, #4]
   1763e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   17640:	785c      	ldrb	r4, [r3, #1]
   17642:	42b4      	cmp	r4, r6
   17644:	bf28      	it	cs
   17646:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17648:	f04f 0816 	mov.w	r8, #22
   1764c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1764e:	42a5      	cmp	r5, r4
   17650:	db0d      	blt.n	1766e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   17652:	9801      	ldr	r0, [sp, #4]
   17654:	f003 fb74 	bl	1ad40 <net_buf_unref>
	if (!cnt) {
   17658:	2c00      	cmp	r4, #0
   1765a:	d1eb      	bne.n	17634 <bt_read_static_addr+0x50>
   1765c:	4909      	ldr	r1, [pc, #36]	; (17684 <bt_read_static_addr+0xa0>)
   1765e:	4b0a      	ldr	r3, [pc, #40]	; (17688 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   17660:	480c      	ldr	r0, [pc, #48]	; (17694 <bt_read_static_addr+0xb0>)
   17662:	1ac9      	subs	r1, r1, r3
   17664:	08c9      	lsrs	r1, r1, #3
   17666:	0189      	lsls	r1, r1, #6
   17668:	f041 0102 	orr.w	r1, r1, #2
   1766c:	e7cc      	b.n	17608 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1766e:	fb08 7005 	mla	r0, r8, r5, r7
   17672:	2216      	movs	r2, #22
   17674:	4631      	mov	r1, r6
   17676:	f008 ffdd 	bl	20634 <memcpy>
	for (i = 0; i < cnt; i++) {
   1767a:	3501      	adds	r5, #1
   1767c:	e7e7      	b.n	1764e <bt_read_static_addr+0x6a>
   1767e:	bf00      	nop
   17680:	200003c8 	.word	0x200003c8
   17684:	00022d18 	.word	0x00022d18
   17688:	00022cf0 	.word	0x00022cf0
   1768c:	0002459e 	.word	0x0002459e
   17690:	000245ca 	.word	0x000245ca
   17694:	000245ea 	.word	0x000245ea

00017698 <bt_setup_random_id_addr>:
{
   17698:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1769a:	4d14      	ldr	r5, [pc, #80]	; (176ec <bt_setup_random_id_addr+0x54>)
   1769c:	79ec      	ldrb	r4, [r5, #7]
{
   1769e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   176a0:	b9f4      	cbnz	r4, 176e0 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   176a2:	2101      	movs	r1, #1
   176a4:	a802      	add	r0, sp, #8
   176a6:	f7ff ff9d 	bl	175e4 <bt_read_static_addr>
   176aa:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   176ac:	b1c0      	cbz	r0, 176e0 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   176ae:	2716      	movs	r7, #22
   176b0:	e00f      	b.n	176d2 <bt_setup_random_id_addr+0x3a>
   176b2:	ab02      	add	r3, sp, #8
   176b4:	fb07 3106 	mla	r1, r7, r6, r3
   176b8:	2206      	movs	r2, #6
   176ba:	f10d 0001 	add.w	r0, sp, #1
   176be:	f008 ffb9 	bl	20634 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   176c2:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   176c4:	4669      	mov	r1, sp
   176c6:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   176c8:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   176cc:	f7ff f820 	bl	16710 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   176d0:	3401      	adds	r4, #1
   176d2:	79eb      	ldrb	r3, [r5, #7]
   176d4:	b2e6      	uxtb	r6, r4
   176d6:	42b3      	cmp	r3, r6
   176d8:	d8eb      	bhi.n	176b2 <bt_setup_random_id_addr+0x1a>
			return 0;
   176da:	2000      	movs	r0, #0
}
   176dc:	b009      	add	sp, #36	; 0x24
   176de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   176e0:	2100      	movs	r1, #0
   176e2:	4608      	mov	r0, r1
   176e4:	f7ff feea 	bl	174bc <bt_id_create>
   176e8:	e7f8      	b.n	176dc <bt_setup_random_id_addr+0x44>
   176ea:	bf00      	nop
   176ec:	200003c8 	.word	0x200003c8

000176f0 <hci_init>:
{
   176f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   176f2:	4db9      	ldr	r5, [pc, #740]	; (179d8 <hci_init+0x2e8>)
   176f4:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   176f8:	6899      	ldr	r1, [r3, #8]
   176fa:	f011 0101 	ands.w	r1, r1, #1
{
   176fe:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17700:	d11f      	bne.n	17742 <hci_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   17702:	aa01      	add	r2, sp, #4
   17704:	f640 4003 	movw	r0, #3075	; 0xc03
   17708:	f7ff f96e 	bl	169e8 <bt_hci_cmd_send_sync>
		if (err) {
   1770c:	4604      	mov	r4, r0
   1770e:	2800      	cmp	r0, #0
   17710:	d16e      	bne.n	177f0 <hci_init+0x100>
		hci_reset_complete(rsp);
   17712:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   17714:	689b      	ldr	r3, [r3, #8]
	if (status) {
   17716:	781b      	ldrb	r3, [r3, #0]
   17718:	b983      	cbnz	r3, 1773c <hci_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1771a:	f105 0394 	add.w	r3, r5, #148	; 0x94
   1771e:	4618      	mov	r0, r3
   17720:	f009 f859 	bl	207d6 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17724:	f3bf 8f5b 	dmb	ish
   17728:	f000 0005 	and.w	r0, r0, #5
   1772c:	e853 2f00 	ldrex	r2, [r3]
   17730:	e843 0100 	strex	r1, r0, [r3]
   17734:	2900      	cmp	r1, #0
   17736:	d1f9      	bne.n	1772c <hci_init+0x3c>
   17738:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1773c:	9801      	ldr	r0, [sp, #4]
   1773e:	f003 faff 	bl	1ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   17742:	aa01      	add	r2, sp, #4
   17744:	2100      	movs	r1, #0
   17746:	f241 0003 	movw	r0, #4099	; 0x1003
   1774a:	f7ff f94d 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   1774e:	4604      	mov	r4, r0
   17750:	2800      	cmp	r0, #0
   17752:	d14d      	bne.n	177f0 <hci_init+0x100>
	read_local_features_complete(rsp);
   17754:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   17756:	48a1      	ldr	r0, [pc, #644]	; (179dc <hci_init+0x2ec>)
   17758:	6899      	ldr	r1, [r3, #8]
   1775a:	2208      	movs	r2, #8
   1775c:	3101      	adds	r1, #1
   1775e:	f008 ff69 	bl	20634 <memcpy>
	net_buf_unref(rsp);
   17762:	9801      	ldr	r0, [sp, #4]
   17764:	f003 faec 	bl	1ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   17768:	4621      	mov	r1, r4
   1776a:	aa01      	add	r2, sp, #4
   1776c:	f241 0001 	movw	r0, #4097	; 0x1001
   17770:	f7ff f93a 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17774:	4604      	mov	r4, r0
   17776:	2800      	cmp	r0, #0
   17778:	d13a      	bne.n	177f0 <hci_init+0x100>
	read_local_ver_complete(rsp);
   1777a:	9801      	ldr	r0, [sp, #4]
   1777c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1777e:	785a      	ldrb	r2, [r3, #1]
   17780:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   17784:	78d9      	ldrb	r1, [r3, #3]
   17786:	789a      	ldrb	r2, [r3, #2]
   17788:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1778c:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   1778e:	791a      	ldrb	r2, [r3, #4]
   17790:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   17794:	7a19      	ldrb	r1, [r3, #8]
   17796:	79da      	ldrb	r2, [r3, #7]
   17798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1779c:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1779e:	795a      	ldrb	r2, [r3, #5]
   177a0:	799b      	ldrb	r3, [r3, #6]
   177a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   177a6:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   177a8:	f003 faca 	bl	1ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   177ac:	4621      	mov	r1, r4
   177ae:	aa01      	add	r2, sp, #4
   177b0:	f241 0002 	movw	r0, #4098	; 0x1002
   177b4:	f7ff f918 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   177b8:	4604      	mov	r4, r0
   177ba:	b9c8      	cbnz	r0, 177f0 <hci_init+0x100>
	read_supported_commands_complete(rsp);
   177bc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   177be:	4888      	ldr	r0, [pc, #544]	; (179e0 <hci_init+0x2f0>)
   177c0:	6899      	ldr	r1, [r3, #8]
   177c2:	2240      	movs	r2, #64	; 0x40
   177c4:	3101      	adds	r1, #1
   177c6:	f008 ff35 	bl	20634 <memcpy>
	net_buf_unref(rsp);
   177ca:	9801      	ldr	r0, [sp, #4]
   177cc:	f003 fab8 	bl	1ad40 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   177d0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   177d4:	065e      	lsls	r6, r3, #25
   177d6:	d40e      	bmi.n	177f6 <hci_init+0x106>
   177d8:	4b82      	ldr	r3, [pc, #520]	; (179e4 <hci_init+0x2f4>)
   177da:	4983      	ldr	r1, [pc, #524]	; (179e8 <hci_init+0x2f8>)
		BT_ERR("Non-LE capable controller detected!");
   177dc:	4883      	ldr	r0, [pc, #524]	; (179ec <hci_init+0x2fc>)
   177de:	1ac9      	subs	r1, r1, r3
   177e0:	08c9      	lsrs	r1, r1, #3
   177e2:	0189      	lsls	r1, r1, #6
   177e4:	f041 0101 	orr.w	r1, r1, #1
   177e8:	f008 fafd 	bl	1fde6 <log_0>
		return -ENODEV;
   177ec:	f06f 0412 	mvn.w	r4, #18
}
   177f0:	4620      	mov	r0, r4
   177f2:	b007      	add	sp, #28
   177f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   177f6:	4621      	mov	r1, r4
   177f8:	aa01      	add	r2, sp, #4
   177fa:	f242 0003 	movw	r0, #8195	; 0x2003
   177fe:	f7ff f8f3 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17802:	4604      	mov	r4, r0
   17804:	2800      	cmp	r0, #0
   17806:	d1f3      	bne.n	177f0 <hci_init+0x100>
	read_le_features_complete(rsp);
   17808:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1780a:	4879      	ldr	r0, [pc, #484]	; (179f0 <hci_init+0x300>)
   1780c:	6899      	ldr	r1, [r3, #8]
   1780e:	2208      	movs	r2, #8
   17810:	3101      	adds	r1, #1
   17812:	f008 ff0f 	bl	20634 <memcpy>
	net_buf_unref(rsp);
   17816:	9801      	ldr	r0, [sp, #4]
   17818:	f003 fa92 	bl	1ad40 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1781c:	4621      	mov	r1, r4
   1781e:	aa01      	add	r2, sp, #4
   17820:	f242 0002 	movw	r0, #8194	; 0x2002
   17824:	f7ff f8e0 	bl	169e8 <bt_hci_cmd_send_sync>
		if (err) {
   17828:	4604      	mov	r4, r0
   1782a:	2800      	cmp	r0, #0
   1782c:	d1e0      	bne.n	177f0 <hci_init+0x100>
		le_read_buffer_size_complete(rsp);
   1782e:	9b01      	ldr	r3, [sp, #4]
   17830:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   17832:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17836:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
   1783a:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1783c:	b121      	cbz	r1, 17848 <hci_init+0x158>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1783e:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17840:	486c      	ldr	r0, [pc, #432]	; (179f4 <hci_init+0x304>)
   17842:	4611      	mov	r1, r2
   17844:	f00a fe74 	bl	22530 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   17848:	9801      	ldr	r0, [sp, #4]
   1784a:	f003 fa79 	bl	1ad40 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1784e:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   17852:	f016 0620 	ands.w	r6, r6, #32
   17856:	f000 80a3 	beq.w	179a0 <hci_init+0x2b0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1785a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1785e:	0718      	lsls	r0, r3, #28
   17860:	f100 80ce 	bmi.w	17a00 <hci_init+0x310>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17864:	2108      	movs	r1, #8
   17866:	f242 0001 	movw	r0, #8193	; 0x2001
   1786a:	f7ff f885 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   1786e:	4604      	mov	r4, r0
   17870:	2800      	cmp	r0, #0
   17872:	f000 809c 	beq.w	179ae <hci_init+0x2be>
	return net_buf_simple_add(&buf->b, len);
   17876:	2108      	movs	r1, #8
   17878:	4408      	add	r0, r1
   1787a:	f00a f8f1 	bl	21a60 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1787e:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17882:	f012 0f02 	tst.w	r2, #2
   17886:	bf14      	ite	ne
   17888:	232f      	movne	r3, #47	; 0x2f
   1788a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1788c:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1788e:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   17892:	bf48      	it	mi
   17894:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17898:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1789c:	bf18      	it	ne
   1789e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   178a2:	2200      	movs	r2, #0
   178a4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   178a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   178aa:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   178ac:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   178ae:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   178b0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   178b2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   178b4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   178b6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   178b8:	4621      	mov	r1, r4
   178ba:	f242 0001 	movw	r0, #8193	; 0x2001
   178be:	f7ff f893 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   178c2:	4604      	mov	r4, r0
   178c4:	2800      	cmp	r0, #0
   178c6:	d193      	bne.n	177f0 <hci_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   178c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   178cc:	069a      	lsls	r2, r3, #26
   178ce:	d41d      	bmi.n	1790c <hci_init+0x21c>
	if (bt_dev.le.acl_mtu) {
   178d0:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   178d4:	b9d1      	cbnz	r1, 1790c <hci_init+0x21c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   178d6:	aa01      	add	r2, sp, #4
   178d8:	f241 0005 	movw	r0, #4101	; 0x1005
   178dc:	f7ff f884 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   178e0:	4604      	mov	r4, r0
   178e2:	2800      	cmp	r0, #0
   178e4:	d184      	bne.n	177f0 <hci_init+0x100>
	if (bt_dev.le.acl_mtu) {
   178e6:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   178ea:	b963      	cbnz	r3, 17906 <hci_init+0x216>
	read_buffer_size_complete(rsp);
   178ec:	9b01      	ldr	r3, [sp, #4]
   178ee:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   178f0:	785a      	ldrb	r2, [r3, #1]
   178f2:	7899      	ldrb	r1, [r3, #2]
   178f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   178f8:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   178fc:	889a      	ldrh	r2, [r3, #4]
   178fe:	483d      	ldr	r0, [pc, #244]	; (179f4 <hci_init+0x304>)
   17900:	4611      	mov	r1, r2
   17902:	f00a fe15 	bl	22530 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   17906:	9801      	ldr	r0, [sp, #4]
   17908:	f003 fa1a 	bl	1ad40 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1790c:	2108      	movs	r1, #8
   1790e:	f640 4001 	movw	r0, #3073	; 0xc01
   17912:	f7ff f831 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   17916:	4604      	mov	r4, r0
   17918:	2800      	cmp	r0, #0
   1791a:	d048      	beq.n	179ae <hci_init+0x2be>
   1791c:	2108      	movs	r1, #8
   1791e:	4408      	add	r0, r1
   17920:	f00a f89e 	bl	21a60 <net_buf_simple_add>
	dst[0] = val;
   17924:	2310      	movs	r3, #16
   17926:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17928:	2388      	movs	r3, #136	; 0x88
   1792a:	7043      	strb	r3, [r0, #1]
   1792c:	2302      	movs	r3, #2
	dst[0] = val;
   1792e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   17930:	70c3      	strb	r3, [r0, #3]
   17932:	2320      	movs	r3, #32
	dst[0] = val;
   17934:	7082      	strb	r2, [r0, #2]
   17936:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   17938:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1793a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1793c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1793e:	4621      	mov	r1, r4
   17940:	f640 4001 	movw	r0, #3073	; 0xc01
   17944:	f7ff f850 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17948:	4604      	mov	r4, r0
   1794a:	2800      	cmp	r0, #0
   1794c:	f47f af50 	bne.w	177f0 <hci_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17950:	4601      	mov	r1, r0
   17952:	466a      	mov	r2, sp
   17954:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17958:	f7ff f846 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   1795c:	4e22      	ldr	r6, [pc, #136]	; (179e8 <hci_init+0x2f8>)
   1795e:	4b21      	ldr	r3, [pc, #132]	; (179e4 <hci_init+0x2f4>)
   17960:	1af6      	subs	r6, r6, r3
   17962:	08f6      	lsrs	r6, r6, #3
   17964:	01b6      	lsls	r6, r6, #6
   17966:	2800      	cmp	r0, #0
   17968:	d05e      	beq.n	17a28 <hci_init+0x338>
		BT_WARN("Vendor HCI extensions not available");
   1796a:	4823      	ldr	r0, [pc, #140]	; (179f8 <hci_init+0x308>)
   1796c:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
   17970:	f008 fa39 	bl	1fde6 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17974:	79eb      	ldrb	r3, [r5, #7]
   17976:	2b00      	cmp	r3, #0
   17978:	f47f af3a 	bne.w	177f0 <hci_init+0x100>
		bt_setup_public_id_addr();
   1797c:	f7ff fde2 	bl	17544 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17980:	79eb      	ldrb	r3, [r5, #7]
   17982:	2b00      	cmp	r3, #0
   17984:	f47f af34 	bne.w	177f0 <hci_init+0x100>
		err = bt_setup_random_id_addr();
   17988:	f7ff fe86 	bl	17698 <bt_setup_random_id_addr>
		if (err) {
   1798c:	4604      	mov	r4, r0
   1798e:	2800      	cmp	r0, #0
   17990:	f000 80b7 	beq.w	17b02 <hci_init+0x412>
			BT_ERR("Unable to set identity address");
   17994:	4819      	ldr	r0, [pc, #100]	; (179fc <hci_init+0x30c>)
   17996:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
   1799a:	f008 fa24 	bl	1fde6 <log_0>
			return err;
   1799e:	e727      	b.n	177f0 <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   179a0:	2102      	movs	r1, #2
   179a2:	f640 406d 	movw	r0, #3181	; 0xc6d
   179a6:	f7fe ffe7 	bl	16978 <bt_hci_cmd_create>
		if (!buf) {
   179aa:	4604      	mov	r4, r0
   179ac:	b910      	cbnz	r0, 179b4 <hci_init+0x2c4>
		return -ENOBUFS;
   179ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
   179b2:	e71d      	b.n	177f0 <hci_init+0x100>
   179b4:	2102      	movs	r1, #2
   179b6:	3008      	adds	r0, #8
   179b8:	f00a f852 	bl	21a60 <net_buf_simple_add>
		cp_le->le = 0x01;
   179bc:	2301      	movs	r3, #1
   179be:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   179c0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   179c2:	4621      	mov	r1, r4
   179c4:	4632      	mov	r2, r6
   179c6:	f640 406d 	movw	r0, #3181	; 0xc6d
   179ca:	f7ff f80d 	bl	169e8 <bt_hci_cmd_send_sync>
		if (err) {
   179ce:	4604      	mov	r4, r0
   179d0:	2800      	cmp	r0, #0
   179d2:	f43f af42 	beq.w	1785a <hci_init+0x16a>
   179d6:	e70b      	b.n	177f0 <hci_init+0x100>
   179d8:	200003c8 	.word	0x200003c8
   179dc:	20000404 	.word	0x20000404
   179e0:	2000040c 	.word	0x2000040c
   179e4:	00022cf0 	.word	0x00022cf0
   179e8:	00022d18 	.word	0x00022d18
   179ec:	00024613 	.word	0x00024613
   179f0:	20000460 	.word	0x20000460
   179f4:	20000490 	.word	0x20000490
   179f8:	00024637 	.word	0x00024637
   179fc:	0002470b 	.word	0x0002470b
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   17a00:	aa01      	add	r2, sp, #4
   17a02:	2100      	movs	r1, #0
   17a04:	f242 001c 	movw	r0, #8220	; 0x201c
   17a08:	f7fe ffee 	bl	169e8 <bt_hci_cmd_send_sync>
		if (err) {
   17a0c:	4604      	mov	r4, r0
   17a0e:	2800      	cmp	r0, #0
   17a10:	f47f aeee 	bne.w	177f0 <hci_init+0x100>
		le_read_supp_states_complete(rsp);
   17a14:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17a16:	6883      	ldr	r3, [r0, #8]
   17a18:	f853 2f01 	ldr.w	r2, [r3, #1]!
   17a1c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   17a1e:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   17a22:	f003 f98d 	bl	1ad40 <net_buf_unref>
   17a26:	e71d      	b.n	17864 <hci_init+0x174>
	rp.info = (void *)rsp->data;
   17a28:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
   17a2a:	483b      	ldr	r0, [pc, #236]	; (17b18 <hci_init+0x428>)
	rp.info = (void *)rsp->data;
   17a2c:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   17a2e:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   17a32:	2a03      	cmp	r2, #3
		return plat_str[platform];
   17a34:	bf96      	itet	ls
   17a36:	4939      	ldrls	r1, [pc, #228]	; (17b1c <hci_init+0x42c>)
	return "unknown";
   17a38:	4939      	ldrhi	r1, [pc, #228]	; (17b20 <hci_init+0x430>)
		return plat_str[platform];
   17a3a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   17a3e:	f046 0303 	orr.w	r3, r6, #3
   17a42:	f008 f9f1 	bl	1fe28 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17a46:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   17a4a:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17a4e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   17a50:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17a54:	d12e      	bne.n	17ab4 <hci_init+0x3c4>
	if (variant < ARRAY_SIZE(nordic_str)) {
   17a56:	2a03      	cmp	r2, #3
   17a58:	d82c      	bhi.n	17ab4 <hci_init+0x3c4>
		return nordic_str[variant];
   17a5a:	4932      	ldr	r1, [pc, #200]	; (17b24 <hci_init+0x434>)
   17a5c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   17a60:	4831      	ldr	r0, [pc, #196]	; (17b28 <hci_init+0x438>)
   17a62:	f008 f9e1 	bl	1fe28 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   17a66:	797a      	ldrb	r2, [r7, #5]
   17a68:	4830      	ldr	r0, [pc, #192]	; (17b2c <hci_init+0x43c>)
	if (variant < ARRAY_SIZE(var_str)) {
   17a6a:	2a03      	cmp	r2, #3
		return var_str[variant];
   17a6c:	bf96      	itet	ls
   17a6e:	4930      	ldrls	r1, [pc, #192]	; (17b30 <hci_init+0x440>)
	return "unknown";
   17a70:	492b      	ldrhi	r1, [pc, #172]	; (17b20 <hci_init+0x430>)
		return var_str[variant];
   17a72:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   17a76:	e9cd 1201 	strd	r1, r2, [sp, #4]
   17a7a:	79ba      	ldrb	r2, [r7, #6]
   17a7c:	9203      	str	r2, [sp, #12]
   17a7e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   17a82:	9204      	str	r2, [sp, #16]
   17a84:	f8d7 2009 	ldr.w	r2, [r7, #9]
   17a88:	9205      	str	r2, [sp, #20]
   17a8a:	f046 0303 	orr.w	r3, r6, #3
   17a8e:	2205      	movs	r2, #5
   17a90:	a901      	add	r1, sp, #4
   17a92:	f008 f9fe 	bl	1fe92 <log_n>
	net_buf_unref(rsp);
   17a96:	9800      	ldr	r0, [sp, #0]
   17a98:	f003 f952 	bl	1ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17a9c:	466a      	mov	r2, sp
   17a9e:	2100      	movs	r1, #0
   17aa0:	f64f 4002 	movw	r0, #64514	; 0xfc02
   17aa4:	f7fe ffa0 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17aa8:	4607      	mov	r7, r0
   17aaa:	b128      	cbz	r0, 17ab8 <hci_init+0x3c8>
		BT_WARN("Failed to read supported vendor commands");
   17aac:	4821      	ldr	r0, [pc, #132]	; (17b34 <hci_init+0x444>)
   17aae:	f046 0102 	orr.w	r1, r6, #2
   17ab2:	e75d      	b.n	17970 <hci_init+0x280>
		return "unknown";
   17ab4:	491a      	ldr	r1, [pc, #104]	; (17b20 <hci_init+0x430>)
   17ab6:	e7d3      	b.n	17a60 <hci_init+0x370>
	rp.cmds = (void *)rsp->data;
   17ab8:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17aba:	481f      	ldr	r0, [pc, #124]	; (17b38 <hci_init+0x448>)
   17abc:	6899      	ldr	r1, [r3, #8]
   17abe:	2202      	movs	r2, #2
   17ac0:	3101      	adds	r1, #1
   17ac2:	f008 fdb7 	bl	20634 <memcpy>
	net_buf_unref(rsp);
   17ac6:	9800      	ldr	r0, [sp, #0]
   17ac8:	f003 f93a 	bl	1ad40 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17acc:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   17ad0:	075b      	lsls	r3, r3, #29
   17ad2:	f57f af4f 	bpl.w	17974 <hci_init+0x284>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17ad6:	466a      	mov	r2, sp
   17ad8:	4639      	mov	r1, r7
   17ada:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17ade:	f7fe ff83 	bl	169e8 <bt_hci_cmd_send_sync>
		if (err) {
   17ae2:	b118      	cbz	r0, 17aec <hci_init+0x3fc>
			BT_WARN("Failed to read supported vendor features");
   17ae4:	4815      	ldr	r0, [pc, #84]	; (17b3c <hci_init+0x44c>)
   17ae6:	f046 0102 	orr.w	r1, r6, #2
   17aea:	e741      	b.n	17970 <hci_init+0x280>
		rp.feat = (void *)rsp->data;
   17aec:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17aee:	4814      	ldr	r0, [pc, #80]	; (17b40 <hci_init+0x450>)
   17af0:	6899      	ldr	r1, [r3, #8]
   17af2:	2201      	movs	r2, #1
   17af4:	4411      	add	r1, r2
   17af6:	f008 fd9d 	bl	20634 <memcpy>
		net_buf_unref(rsp);
   17afa:	9800      	ldr	r0, [sp, #0]
   17afc:	f003 f920 	bl	1ad40 <net_buf_unref>
   17b00:	e738      	b.n	17974 <hci_init+0x284>
		err = set_random_address(&bt_dev.id_addr[0].a);
   17b02:	4810      	ldr	r0, [pc, #64]	; (17b44 <hci_init+0x454>)
   17b04:	f7fe ffe8 	bl	16ad8 <set_random_address>
		if (err) {
   17b08:	4604      	mov	r4, r0
   17b0a:	2800      	cmp	r0, #0
   17b0c:	f43f ae70 	beq.w	177f0 <hci_init+0x100>
			BT_ERR("Unable to set random address");
   17b10:	480d      	ldr	r0, [pc, #52]	; (17b48 <hci_init+0x458>)
   17b12:	f046 0101 	orr.w	r1, r6, #1
   17b16:	e740      	b.n	1799a <hci_init+0x2aa>
   17b18:	0002465b 	.word	0x0002465b
   17b1c:	00023020 	.word	0x00023020
   17b20:	0002411b 	.word	0x0002411b
   17b24:	00022ff0 	.word	0x00022ff0
   17b28:	00024674 	.word	0x00024674
   17b2c:	0002468c 	.word	0x0002468c
   17b30:	00023058 	.word	0x00023058
   17b34:	000246b9 	.word	0x000246b9
   17b38:	2000044d 	.word	0x2000044d
   17b3c:	000246e2 	.word	0x000246e2
   17b40:	2000044c 	.word	0x2000044c
   17b44:	200003c9 	.word	0x200003c9
   17b48:	0002472a 	.word	0x0002472a

00017b4c <bt_enable>:
{
   17b4c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   17b50:	4d3d      	ldr	r5, [pc, #244]	; (17c48 <bt_enable+0xfc>)
   17b52:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
{
   17b56:	b088      	sub	sp, #32
   17b58:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   17b5a:	b97b      	cbnz	r3, 17b7c <bt_enable+0x30>
   17b5c:	4b3b      	ldr	r3, [pc, #236]	; (17c4c <bt_enable+0x100>)
   17b5e:	493c      	ldr	r1, [pc, #240]	; (17c50 <bt_enable+0x104>)
		BT_ERR("No HCI driver registered");
   17b60:	483c      	ldr	r0, [pc, #240]	; (17c54 <bt_enable+0x108>)
   17b62:	1ac9      	subs	r1, r1, r3
   17b64:	08c9      	lsrs	r1, r1, #3
   17b66:	0189      	lsls	r1, r1, #6
   17b68:	f041 0101 	orr.w	r1, r1, #1
   17b6c:	f008 f93b 	bl	1fde6 <log_0>
		return -ENODEV;
   17b70:	f06f 0412 	mvn.w	r4, #18
}
   17b74:	4620      	mov	r0, r4
   17b76:	b008      	add	sp, #32
   17b78:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17b7c:	2101      	movs	r1, #1
   17b7e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   17b82:	f008 fe34 	bl	207ee <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17b86:	f010 0401 	ands.w	r4, r0, #1
   17b8a:	d15a      	bne.n	17c42 <bt_enable+0xf6>
	ready_cb = cb;
   17b8c:	4b32      	ldr	r3, [pc, #200]	; (17c58 <bt_enable+0x10c>)
   17b8e:	f04f 0800 	mov.w	r8, #0
   17b92:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   17b94:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17b98:	f06f 0308 	mvn.w	r3, #8
   17b9c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17ba0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17ba4:	e9cd 4400 	strd	r4, r4, [sp]
   17ba8:	4b2c      	ldr	r3, [pc, #176]	; (17c5c <bt_enable+0x110>)
   17baa:	492d      	ldr	r1, [pc, #180]	; (17c60 <bt_enable+0x114>)
   17bac:	9404      	str	r4, [sp, #16]
   17bae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   17bb2:	482c      	ldr	r0, [pc, #176]	; (17c64 <bt_enable+0x118>)
   17bb4:	f006 fa2e 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17bb8:	492b      	ldr	r1, [pc, #172]	; (17c68 <bt_enable+0x11c>)
   17bba:	482a      	ldr	r0, [pc, #168]	; (17c64 <bt_enable+0x118>)
   17bbc:	f00a fcd2 	bl	22564 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17bc0:	f06f 0307 	mvn.w	r3, #7
   17bc4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17bc8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17bcc:	e9cd 4400 	strd	r4, r4, [sp]
   17bd0:	4b26      	ldr	r3, [pc, #152]	; (17c6c <bt_enable+0x120>)
   17bd2:	4927      	ldr	r1, [pc, #156]	; (17c70 <bt_enable+0x124>)
   17bd4:	9404      	str	r4, [sp, #16]
   17bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17bda:	4826      	ldr	r0, [pc, #152]	; (17c74 <bt_enable+0x128>)
   17bdc:	f006 fa1a 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17be0:	4925      	ldr	r1, [pc, #148]	; (17c78 <bt_enable+0x12c>)
   17be2:	4824      	ldr	r0, [pc, #144]	; (17c74 <bt_enable+0x128>)
   17be4:	f00a fcbe 	bl	22564 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   17be8:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   17bec:	68db      	ldr	r3, [r3, #12]
   17bee:	4798      	blx	r3
	if (err) {
   17bf0:	4604      	mov	r4, r0
   17bf2:	b158      	cbz	r0, 17c0c <bt_enable+0xc0>
   17bf4:	4b15      	ldr	r3, [pc, #84]	; (17c4c <bt_enable+0x100>)
   17bf6:	4a16      	ldr	r2, [pc, #88]	; (17c50 <bt_enable+0x104>)
   17bf8:	1ad2      	subs	r2, r2, r3
   17bfa:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   17bfc:	0192      	lsls	r2, r2, #6
   17bfe:	4601      	mov	r1, r0
   17c00:	f042 0201 	orr.w	r2, r2, #1
   17c04:	481d      	ldr	r0, [pc, #116]	; (17c7c <bt_enable+0x130>)
   17c06:	f008 f8fb 	bl	1fe00 <log_1>
		return err;
   17c0a:	e7b3      	b.n	17b74 <bt_enable+0x28>
	if (!cb) {
   17c0c:	b966      	cbnz	r6, 17c28 <bt_enable+0xdc>
	err = hci_init();
   17c0e:	f7ff fd6f 	bl	176f0 <hci_init>
	if (err) {
   17c12:	4604      	mov	r4, r0
   17c14:	2800      	cmp	r0, #0
   17c16:	d1ad      	bne.n	17b74 <bt_enable+0x28>
		err = bt_conn_init();
   17c18:	f001 f808 	bl	18c2c <bt_conn_init>
		if (err) {
   17c1c:	4604      	mov	r4, r0
   17c1e:	2800      	cmp	r0, #0
   17c20:	d1a8      	bne.n	17b74 <bt_enable+0x28>
	bt_finalize_init();
   17c22:	f7ff fbdb 	bl	173dc <bt_finalize_init>
	return 0;
   17c26:	e7a5      	b.n	17b74 <bt_enable+0x28>
   17c28:	2101      	movs	r1, #1
   17c2a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   17c2e:	f008 fdde 	bl	207ee <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   17c32:	07c3      	lsls	r3, r0, #31
   17c34:	d49e      	bmi.n	17b74 <bt_enable+0x28>
		k_queue_append(&work_q->queue, work);
   17c36:	4812      	ldr	r0, [pc, #72]	; (17c80 <bt_enable+0x134>)
   17c38:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17c3c:	f00a fb2c 	bl	22298 <k_queue_append>
   17c40:	e798      	b.n	17b74 <bt_enable+0x28>
		return -EALREADY;
   17c42:	f06f 0444 	mvn.w	r4, #68	; 0x44
   17c46:	e795      	b.n	17b74 <bt_enable+0x28>
   17c48:	200003c8 	.word	0x200003c8
   17c4c:	00022cf0 	.word	0x00022cf0
   17c50:	00022d18 	.word	0x00022d18
   17c54:	00024747 	.word	0x00024747
   17c58:	20002b8c 	.word	0x20002b8c
   17c5c:	00017121 	.word	0x00017121
   17c60:	20004b80 	.word	0x20004b80
   17c64:	20001f68 	.word	0x20001f68
   17c68:	00024760 	.word	0x00024760
   17c6c:	00016565 	.word	0x00016565
   17c70:	20004760 	.word	0x20004760
   17c74:	20001ee0 	.word	0x20001ee0
   17c78:	00024766 	.word	0x00024766
   17c7c:	0002476c 	.word	0x0002476c
   17c80:	200024d0 	.word	0x200024d0

00017c84 <init_work>:
{
   17c84:	b510      	push	{r4, lr}
	err = hci_init();
   17c86:	f7ff fd33 	bl	176f0 <hci_init>
	if (err) {
   17c8a:	4604      	mov	r4, r0
   17c8c:	b928      	cbnz	r0, 17c9a <init_work+0x16>
		err = bt_conn_init();
   17c8e:	f000 ffcd 	bl	18c2c <bt_conn_init>
		if (err) {
   17c92:	4604      	mov	r4, r0
   17c94:	b908      	cbnz	r0, 17c9a <init_work+0x16>
	bt_finalize_init();
   17c96:	f7ff fba1 	bl	173dc <bt_finalize_init>
	if (ready_cb) {
   17c9a:	4b04      	ldr	r3, [pc, #16]	; (17cac <init_work+0x28>)
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	b11b      	cbz	r3, 17ca8 <init_work+0x24>
		ready_cb(err);
   17ca0:	4620      	mov	r0, r4
}
   17ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17ca6:	4718      	bx	r3
}
   17ca8:	bd10      	pop	{r4, pc}
   17caa:	bf00      	nop
   17cac:	20002b8c 	.word	0x20002b8c

00017cb0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   17cb4:	690d      	ldr	r5, [r1, #16]
{
   17cb6:	b08f      	sub	sp, #60	; 0x3c
   17cb8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   17cba:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   17cbc:	ebb5 0b03 	subs.w	fp, r5, r3
{
   17cc0:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17cc2:	4883      	ldr	r0, [pc, #524]	; (17ed0 <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
   17cc4:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   17cc6:	bf18      	it	ne
   17cc8:	f04f 0b01 	movne.w	fp, #1
{
   17ccc:	460c      	mov	r4, r1
   17cce:	4691      	mov	r9, r2
   17cd0:	f008 fd81 	bl	207d6 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17cd4:	0787      	lsls	r7, r0, #30
   17cd6:	f140 80ed 	bpl.w	17eb4 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   17cda:	4608      	mov	r0, r1
   17cdc:	f7fe fa2a 	bl	16134 <valid_adv_param>
   17ce0:	4607      	mov	r7, r0
   17ce2:	2800      	cmp	r0, #0
   17ce4:	f000 80e9 	beq.w	17eba <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17ce8:	f106 0810 	add.w	r8, r6, #16
   17cec:	4640      	mov	r0, r8
   17cee:	f008 fd72 	bl	207d6 <atomic_get>
   17cf2:	f3c0 1180 	ubfx	r1, r0, #6, #1
   17cf6:	0640      	lsls	r0, r0, #25
   17cf8:	f100 80e2 	bmi.w	17ec0 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   17cfc:	220f      	movs	r2, #15
   17cfe:	a80a      	add	r0, sp, #40	; 0x28
   17d00:	9105      	str	r1, [sp, #20]
   17d02:	f008 fcc2 	bl	2068a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17d06:	68a3      	ldr	r3, [r4, #8]
   17d08:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   17d0c:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17d0e:	68e3      	ldr	r3, [r4, #12]
   17d10:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   17d14:	f008 fd50 	bl	207b8 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   17d18:	7832      	ldrb	r2, [r6, #0]
   17d1a:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   17d1c:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17d1e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17d22:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   17d24:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   17d28:	d004      	beq.n	17d34 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17d2a:	4869      	ldr	r0, [pc, #420]	; (17ed0 <bt_le_adv_start_legacy+0x220>)
   17d2c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17d30:	f008 fd6c 	bl	2080c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   17d34:	4b67      	ldr	r3, [pc, #412]	; (17ed4 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
   17d36:	7820      	ldrb	r0, [r4, #0]
   17d38:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   17d3a:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   17d3e:	465a      	mov	r2, fp
   17d40:	6861      	ldr	r1, [r4, #4]
   17d42:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   17d46:	f7fe fef5 	bl	16b34 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   17d4a:	4683      	mov	fp, r0
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d16f      	bne.n	17e30 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
   17d50:	f106 0009 	add.w	r0, r6, #9
   17d54:	2d00      	cmp	r5, #0
   17d56:	d048      	beq.n	17dea <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17d58:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17d5a:	f008 fd42 	bl	207e2 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17d5e:	6860      	ldr	r0, [r4, #4]
   17d60:	07c1      	lsls	r1, r0, #31
   17d62:	d54a      	bpl.n	17dfa <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
   17d64:	2d00      	cmp	r5, #0
   17d66:	d045      	beq.n	17df4 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   17d68:	f010 0f10 	tst.w	r0, #16
   17d6c:	bf14      	ite	ne
   17d6e:	2304      	movne	r3, #4
   17d70:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   17d72:	6921      	ldr	r1, [r4, #16]
   17d74:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17d78:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17d7c:	f008 fd31 	bl	207e2 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17d80:	210f      	movs	r1, #15
   17d82:	f242 0006 	movw	r0, #8198	; 0x2006
   17d86:	f7fe fdf7 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   17d8a:	4683      	mov	fp, r0
   17d8c:	2800      	cmp	r0, #0
   17d8e:	f000 809a 	beq.w	17ec6 <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d92:	220f      	movs	r2, #15
   17d94:	a90a      	add	r1, sp, #40	; 0x28
   17d96:	3008      	adds	r0, #8
   17d98:	f009 fe68 	bl	21a6c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17d9c:	2200      	movs	r2, #0
   17d9e:	4659      	mov	r1, fp
   17da0:	f242 0006 	movw	r0, #8198	; 0x2006
   17da4:	f7fe fe20 	bl	169e8 <bt_hci_cmd_send_sync>
	if (err) {
   17da8:	2800      	cmp	r0, #0
   17daa:	f040 808f 	bne.w	17ecc <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
   17dae:	b37d      	cbz	r5, 17e10 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17db0:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17db2:	07da      	lsls	r2, r3, #31
   17db4:	d440      	bmi.n	17e38 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
   17db6:	2101      	movs	r1, #1
   17db8:	4630      	mov	r0, r6
   17dba:	f7fe fffb 	bl	16db4 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   17dbe:	4683      	mov	fp, r0
   17dc0:	2800      	cmp	r0, #0
   17dc2:	d070      	beq.n	17ea6 <bt_le_adv_start_legacy+0x1f6>
   17dc4:	4b44      	ldr	r3, [pc, #272]	; (17ed8 <bt_le_adv_start_legacy+0x228>)
   17dc6:	4945      	ldr	r1, [pc, #276]	; (17edc <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
   17dc8:	4845      	ldr	r0, [pc, #276]	; (17ee0 <bt_le_adv_start_legacy+0x230>)
   17dca:	1ac9      	subs	r1, r1, r3
   17dcc:	08c9      	lsrs	r1, r1, #3
   17dce:	0189      	lsls	r1, r1, #6
   17dd0:	f041 0101 	orr.w	r1, r1, #1
   17dd4:	f008 f807 	bl	1fde6 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17dd8:	9807      	ldr	r0, [sp, #28]
   17dda:	b348      	cbz	r0, 17e30 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17ddc:	2100      	movs	r1, #0
   17dde:	f000 fc51 	bl	18684 <bt_conn_set_state>
			bt_conn_unref(conn);
   17de2:	9807      	ldr	r0, [sp, #28]
   17de4:	f008 fe62 	bl	20aac <bt_conn_unref>
   17de8:	e022      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17dea:	9508      	str	r5, [sp, #32]
   17dec:	a908      	add	r1, sp, #32
   17dee:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   17df2:	e7b2      	b.n	17d5a <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   17df4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17df8:	e7c2      	b.n	17d80 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17dfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17dfc:	b933      	cbnz	r3, 17e0c <bt_le_adv_start_legacy+0x15c>
   17dfe:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   17e02:	f1c7 0303 	rsb	r3, r7, #3
   17e06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17e0a:	e7b9      	b.n	17d80 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17e0c:	2701      	movs	r7, #1
   17e0e:	e7f8      	b.n	17e02 <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17e10:	6863      	ldr	r3, [r4, #4]
   17e12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   17e16:	e9cd 7301 	strd	r7, r3, [sp, #4]
   17e1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17e1c:	9300      	str	r3, [sp, #0]
   17e1e:	4652      	mov	r2, sl
   17e20:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17e22:	4649      	mov	r1, r9
   17e24:	4630      	mov	r0, r6
   17e26:	f7fe ff51 	bl	16ccc <le_adv_update.constprop.0>
		if (err) {
   17e2a:	4683      	mov	fp, r0
   17e2c:	2800      	cmp	r0, #0
   17e2e:	d0bf      	beq.n	17db0 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17e30:	4658      	mov	r0, fp
   17e32:	b00f      	add	sp, #60	; 0x3c
   17e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   17e38:	a907      	add	r1, sp, #28
   17e3a:	4630      	mov	r0, r6
   17e3c:	f7fe fd1a 	bl	16874 <le_adv_start_add_conn>
		if (err) {
   17e40:	4683      	mov	fp, r0
   17e42:	2800      	cmp	r0, #0
   17e44:	d0b7      	beq.n	17db6 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   17e46:	f110 0f0c 	cmn.w	r0, #12
   17e4a:	d1f1      	bne.n	17e30 <bt_le_adv_start_legacy+0x180>
   17e4c:	2d00      	cmp	r5, #0
   17e4e:	d1ef      	bne.n	17e30 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17e50:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   17e52:	079b      	lsls	r3, r3, #30
   17e54:	d4ec      	bmi.n	17e30 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17e56:	6860      	ldr	r0, [r4, #4]
   17e58:	f080 0002 	eor.w	r0, r0, #2
   17e5c:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   17e60:	f00b 0201 	and.w	r2, fp, #1
   17e64:	210c      	movs	r1, #12
   17e66:	4640      	mov	r0, r8
   17e68:	f008 fcdf 	bl	2082a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   17e6c:	6862      	ldr	r2, [r4, #4]
   17e6e:	2107      	movs	r1, #7
   17e70:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   17e74:	4640      	mov	r0, r8
   17e76:	f008 fcd8 	bl	2082a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17e7a:	6862      	ldr	r2, [r4, #4]
   17e7c:	2108      	movs	r1, #8
   17e7e:	f002 0201 	and.w	r2, r2, #1
   17e82:	4640      	mov	r0, r8
   17e84:	f008 fcd1 	bl	2082a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17e88:	463a      	mov	r2, r7
   17e8a:	2109      	movs	r1, #9
   17e8c:	4640      	mov	r0, r8
   17e8e:	f008 fccc 	bl	2082a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17e92:	6862      	ldr	r2, [r4, #4]
   17e94:	210b      	movs	r1, #11
   17e96:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17e9a:	4640      	mov	r0, r8
   17e9c:	f008 fcc5 	bl	2082a <atomic_set_bit_to>
	return 0;
   17ea0:	f04f 0b00 	mov.w	fp, #0
   17ea4:	e7c4      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17ea6:	9807      	ldr	r0, [sp, #28]
   17ea8:	b108      	cbz	r0, 17eae <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
   17eaa:	f008 fdff 	bl	20aac <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17eae:	2d00      	cmp	r5, #0
   17eb0:	d1d6      	bne.n	17e60 <bt_le_adv_start_legacy+0x1b0>
   17eb2:	e7d0      	b.n	17e56 <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
   17eb4:	f06f 0b0a 	mvn.w	fp, #10
   17eb8:	e7ba      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
   17eba:	f06f 0b15 	mvn.w	fp, #21
   17ebe:	e7b7      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
   17ec0:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   17ec4:	e7b4      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
   17ec6:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   17eca:	e7b1      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
   17ecc:	4683      	mov	fp, r0
   17ece:	e7af      	b.n	17e30 <bt_le_adv_start_legacy+0x180>
   17ed0:	2000045c 	.word	0x2000045c
   17ed4:	200003c8 	.word	0x200003c8
   17ed8:	00022cf0 	.word	0x00022cf0
   17edc:	00022d18 	.word	0x00022d18
   17ee0:	00024788 	.word	0x00024788

00017ee4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17ee4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17ee6:	9c04      	ldr	r4, [sp, #16]
   17ee8:	e9cd 3400 	strd	r3, r4, [sp]
   17eec:	4613      	mov	r3, r2
   17eee:	460a      	mov	r2, r1
   17ef0:	4601      	mov	r1, r0
   17ef2:	4802      	ldr	r0, [pc, #8]	; (17efc <bt_le_adv_start+0x18>)
   17ef4:	f7ff fedc 	bl	17cb0 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   17ef8:	b002      	add	sp, #8
   17efa:	bd10      	pop	{r4, pc}
   17efc:	200003e0 	.word	0x200003e0

00017f00 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   17f00:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17f02:	4818      	ldr	r0, [pc, #96]	; (17f64 <bt_le_adv_resume+0x64>)
   17f04:	f008 fc67 	bl	207d6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17f08:	04c1      	lsls	r1, r0, #19
   17f0a:	d529      	bpl.n	17f60 <bt_le_adv_resume+0x60>
   17f0c:	4815      	ldr	r0, [pc, #84]	; (17f64 <bt_le_adv_resume+0x64>)
   17f0e:	f008 fc62 	bl	207d6 <atomic_get>
   17f12:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17f14:	f3c0 1480 	ubfx	r4, r0, #6, #1
   17f18:	d422      	bmi.n	17f60 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17f1a:	4812      	ldr	r0, [pc, #72]	; (17f64 <bt_le_adv_resume+0x64>)
   17f1c:	f008 fc5b 	bl	207d6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17f20:	05c3      	lsls	r3, r0, #23
   17f22:	d51d      	bpl.n	17f60 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17f24:	4810      	ldr	r0, [pc, #64]	; (17f68 <bt_le_adv_resume+0x68>)
   17f26:	a901      	add	r1, sp, #4
   17f28:	f7fe fca4 	bl	16874 <le_adv_start_add_conn>
	if (err) {
   17f2c:	b9c0      	cbnz	r0, 17f60 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   17f2e:	480e      	ldr	r0, [pc, #56]	; (17f68 <bt_le_adv_resume+0x68>)
   17f30:	2101      	movs	r1, #1
   17f32:	f7fe ff3f 	bl	16db4 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   17f36:	b150      	cbz	r0, 17f4e <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f38:	4621      	mov	r1, r4
   17f3a:	9801      	ldr	r0, [sp, #4]
   17f3c:	f000 fba2 	bl	18684 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f40:	4808      	ldr	r0, [pc, #32]	; (17f64 <bt_le_adv_resume+0x64>)
   17f42:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17f46:	f008 fc61 	bl	2080c <atomic_and>
	return (old & mask) != 0;
   17f4a:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17f4e:	9801      	ldr	r0, [sp, #4]
   17f50:	f008 fdac 	bl	20aac <bt_conn_unref>
	if (persist_paused) {
   17f54:	b124      	cbz	r4, 17f60 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f56:	4803      	ldr	r0, [pc, #12]	; (17f64 <bt_le_adv_resume+0x64>)
   17f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17f5c:	f008 fc47 	bl	207ee <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   17f60:	b002      	add	sp, #8
   17f62:	bd10      	pop	{r4, pc}
   17f64:	200003f0 	.word	0x200003f0
   17f68:	200003e0 	.word	0x200003e0

00017f6c <enh_conn_complete>:
{
   17f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   17f70:	7806      	ldrb	r6, [r0, #0]
{
   17f72:	4605      	mov	r5, r0
	if (evt->status) {
   17f74:	b366      	cbz	r6, 17fd0 <enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17f76:	2e3c      	cmp	r6, #60	; 0x3c
   17f78:	d11e      	bne.n	17fb8 <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f7a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17f7e:	4859      	ldr	r0, [pc, #356]	; (180e4 <enh_conn_complete+0x178>)
   17f80:	f008 fc44 	bl	2080c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   17f84:	2000      	movs	r0, #0
   17f86:	f7fe fba5 	bl	166d4 <find_pending_connect.part.0>
		if (!conn) {
   17f8a:	4604      	mov	r4, r0
   17f8c:	b960      	cbnz	r0, 17fa8 <enh_conn_complete+0x3c>
   17f8e:	4956      	ldr	r1, [pc, #344]	; (180e8 <enh_conn_complete+0x17c>)
   17f90:	4b56      	ldr	r3, [pc, #344]	; (180ec <enh_conn_complete+0x180>)
			BT_ERR("No pending slave connection");
   17f92:	4857      	ldr	r0, [pc, #348]	; (180f0 <enh_conn_complete+0x184>)
   17f94:	1ac9      	subs	r1, r1, r3
   17f96:	08c9      	lsrs	r1, r1, #3
   17f98:	0189      	lsls	r1, r1, #6
   17f9a:	f041 0101 	orr.w	r1, r1, #1
   17f9e:	f007 ff22 	bl	1fde6 <log_0>
}
   17fa2:	b004      	add	sp, #16
   17fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   17fa8:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17faa:	2100      	movs	r1, #0
   17fac:	f000 fb6a 	bl	18684 <bt_conn_set_state>
	bt_conn_unref(conn);
   17fb0:	4620      	mov	r0, r4
   17fb2:	f008 fd7b 	bl	20aac <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17fb6:	e7f4      	b.n	17fa2 <enh_conn_complete+0x36>
   17fb8:	4b4c      	ldr	r3, [pc, #304]	; (180ec <enh_conn_complete+0x180>)
   17fba:	4a4b      	ldr	r2, [pc, #300]	; (180e8 <enh_conn_complete+0x17c>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   17fbc:	484d      	ldr	r0, [pc, #308]	; (180f4 <enh_conn_complete+0x188>)
   17fbe:	1ad2      	subs	r2, r2, r3
   17fc0:	08d2      	lsrs	r2, r2, #3
   17fc2:	0192      	lsls	r2, r2, #6
   17fc4:	f042 0202 	orr.w	r2, r2, #2
   17fc8:	4631      	mov	r1, r6
   17fca:	f007 ff19 	bl	1fe00 <log_1>
		return;
   17fce:	e7e8      	b.n	17fa2 <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17fd0:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17fd2:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17fd6:	3b02      	subs	r3, #2
   17fd8:	1d06      	adds	r6, r0, #4
   17fda:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17fdc:	fa1f f788 	uxth.w	r7, r8
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17fe0:	4631      	mov	r1, r6
   17fe2:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17fe4:	d836      	bhi.n	18054 <enh_conn_complete+0xe8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17fe6:	f008 fbfc 	bl	207e2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17fea:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17fee:	2206      	movs	r2, #6
   17ff0:	3b02      	subs	r3, #2
   17ff2:	f105 0111 	add.w	r1, r5, #17
   17ff6:	f10d 0001 	add.w	r0, sp, #1
   17ffa:	f88d 3008 	strb.w	r3, [sp, #8]
   17ffe:	f008 fb19 	bl	20634 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18002:	2301      	movs	r3, #1
   18004:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   18008:	78eb      	ldrb	r3, [r5, #3]
   1800a:	2b01      	cmp	r3, #1
   1800c:	d10c      	bne.n	18028 <enh_conn_complete+0xbc>
   1800e:	a802      	add	r0, sp, #8
   18010:	f7fe fb60 	bl	166d4 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18014:	78eb      	ldrb	r3, [r5, #3]
   18016:	2b01      	cmp	r3, #1
   18018:	4604      	mov	r4, r0
   1801a:	d104      	bne.n	18026 <enh_conn_complete+0xba>
   1801c:	4831      	ldr	r0, [pc, #196]	; (180e4 <enh_conn_complete+0x178>)
   1801e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   18022:	f008 fbf3 	bl	2080c <atomic_and>
	if (!conn) {
   18026:	b9e4      	cbnz	r4, 18062 <enh_conn_complete+0xf6>
   18028:	4a30      	ldr	r2, [pc, #192]	; (180ec <enh_conn_complete+0x180>)
   1802a:	4c2f      	ldr	r4, [pc, #188]	; (180e8 <enh_conn_complete+0x17c>)
		BT_ERR("No pending conn for peer %s",
   1802c:	4630      	mov	r0, r6
   1802e:	1aa4      	subs	r4, r4, r2
   18030:	f7fd ff70 	bl	15f14 <bt_addr_le_str_real>
   18034:	f7fc fb78 	bl	14728 <log_strdup>
   18038:	08e4      	lsrs	r4, r4, #3
   1803a:	01a4      	lsls	r4, r4, #6
   1803c:	f044 0401 	orr.w	r4, r4, #1
   18040:	4601      	mov	r1, r0
   18042:	4622      	mov	r2, r4
   18044:	482c      	ldr	r0, [pc, #176]	; (180f8 <enh_conn_complete+0x18c>)
   18046:	f007 fedb 	bl	1fe00 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1804a:	211f      	movs	r1, #31
   1804c:	4638      	mov	r0, r7
   1804e:	f008 fbfd 	bl	2084c <bt_hci_disconnect>
		return;
   18052:	e7a6      	b.n	17fa2 <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
   18054:	f008 fbc5 	bl	207e2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   18058:	4631      	mov	r1, r6
   1805a:	4668      	mov	r0, sp
   1805c:	f008 fbc1 	bl	207e2 <bt_addr_le_copy>
   18060:	e7d2      	b.n	18008 <enh_conn_complete+0x9c>
	conn->handle = handle;
   18062:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18064:	a902      	add	r1, sp, #8
	conn->handle = handle;
   18066:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1806a:	f008 fbba 	bl	207e2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1806e:	7e2a      	ldrb	r2, [r5, #24]
   18070:	7deb      	ldrb	r3, [r5, #23]
   18072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18076:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1807a:	7eaa      	ldrb	r2, [r5, #26]
   1807c:	7e6b      	ldrb	r3, [r5, #25]
   1807e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18082:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18086:	7f2a      	ldrb	r2, [r5, #28]
   18088:	7eeb      	ldrb	r3, [r5, #27]
   1808a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1808e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   18092:	78eb      	ldrb	r3, [r5, #3]
	conn->le.data_len.tx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   18094:	4a19      	ldr	r2, [pc, #100]	; (180fc <enh_conn_complete+0x190>)
	conn->role = evt->role;
   18096:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   18098:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1809a:	2b01      	cmp	r3, #1
	conn->le.data_len.rx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   1809c:	e9c4 222e 	strd	r2, r2, [r4, #184]	; 0xb8
	conn->err = 0U;
   180a0:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   180a2:	d116      	bne.n	180d2 <enh_conn_complete+0x166>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   180a4:	4669      	mov	r1, sp
   180a6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   180aa:	f008 fb9a 	bl	207e2 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   180ae:	7a21      	ldrb	r1, [r4, #8]
   180b0:	4e13      	ldr	r6, [pc, #76]	; (18100 <enh_conn_complete+0x194>)
   180b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   180b6:	4431      	add	r1, r6
   180b8:	f104 0096 	add.w	r0, r4, #150	; 0x96
   180bc:	f008 fb91 	bl	207e2 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   180c0:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
   180c4:	462a      	mov	r2, r5
   180c6:	f001 0340 	and.w	r3, r1, #64	; 0x40
   180ca:	4313      	orrs	r3, r2
   180cc:	d001      	beq.n	180d2 <enh_conn_complete+0x166>
			bt_le_adv_resume();
   180ce:	f7ff ff17 	bl	17f00 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   180d2:	4620      	mov	r0, r4
   180d4:	2107      	movs	r1, #7
   180d6:	f000 fad5 	bl	18684 <bt_conn_set_state>
	conn_auto_initiate(conn);
   180da:	4620      	mov	r0, r4
   180dc:	f7fe fed2 	bl	16e84 <conn_auto_initiate>
   180e0:	e766      	b.n	17fb0 <enh_conn_complete+0x44>
   180e2:	bf00      	nop
   180e4:	200003f0 	.word	0x200003f0
   180e8:	00022d18 	.word	0x00022d18
   180ec:	00022cf0 	.word	0x00022cf0
   180f0:	000247a3 	.word	0x000247a3
   180f4:	000247bf 	.word	0x000247bf
   180f8:	000247d8 	.word	0x000247d8
   180fc:	0148001b 	.word	0x0148001b
   18100:	200003c8 	.word	0x200003c8

00018104 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   18104:	2300      	movs	r3, #0
	tx->user_data = NULL;
   18106:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1810a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   1810c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1810e:	4801      	ldr	r0, [pc, #4]	; (18114 <tx_free+0x10>)
   18110:	f00a b8c2 	b.w	22298 <k_queue_append>
   18114:	200009a0 	.word	0x200009a0

00018118 <notify_connected>:
{
   18118:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1811a:	4b09      	ldr	r3, [pc, #36]	; (18140 <notify_connected+0x28>)
   1811c:	681d      	ldr	r5, [r3, #0]
{
   1811e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18120:	7a61      	ldrb	r1, [r4, #9]
   18122:	b92d      	cbnz	r5, 18130 <notify_connected+0x18>
	if (!conn->err) {
   18124:	b951      	cbnz	r1, 1813c <notify_connected+0x24>
		bt_gatt_connected(conn);
   18126:	4620      	mov	r0, r4
}
   18128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   1812c:	f002 bcc4 	b.w	1aab8 <bt_gatt_connected>
		if (cb->connected) {
   18130:	682b      	ldr	r3, [r5, #0]
   18132:	b10b      	cbz	r3, 18138 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   18134:	4620      	mov	r0, r4
   18136:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18138:	696d      	ldr	r5, [r5, #20]
   1813a:	e7f1      	b.n	18120 <notify_connected+0x8>
}
   1813c:	bd38      	pop	{r3, r4, r5, pc}
   1813e:	bf00      	nop
   18140:	20002b90 	.word	0x20002b90

00018144 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   18144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18148:	694d      	ldr	r5, [r1, #20]
{
   1814a:	4604      	mov	r4, r0
   1814c:	460e      	mov	r6, r1
   1814e:	4691      	mov	r9, r2
   18150:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   18152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18156:	4845      	ldr	r0, [pc, #276]	; (1826c <send_frag+0x128>)
   18158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1815c:	f005 fee6 	bl	1df2c <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   18160:	7aa3      	ldrb	r3, [r4, #10]
   18162:	2b07      	cmp	r3, #7
   18164:	d151      	bne.n	1820a <send_frag+0xc6>
	__asm__ volatile(
   18166:	f04f 0340 	mov.w	r3, #64	; 0x40
   1816a:	f3ef 8211 	mrs	r2, BASEPRI
   1816e:	f383 8811 	msr	BASEPRI, r3
   18172:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   18176:	2d00      	cmp	r5, #0
   18178:	d059      	beq.n	1822e <send_frag+0xea>
	parent->next = child;
   1817a:	2300      	movs	r3, #0
   1817c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1817e:	69a3      	ldr	r3, [r4, #24]
   18180:	2b00      	cmp	r3, #0
   18182:	d151      	bne.n	18228 <send_frag+0xe4>
	list->head = node;
   18184:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   18188:	f382 8811 	msr	BASEPRI, r2
   1818c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   18190:	2104      	movs	r1, #4
   18192:	f106 0008 	add.w	r0, r6, #8
   18196:	f009 fc7a 	bl	21a8e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1819a:	8823      	ldrh	r3, [r4, #0]
   1819c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   181a0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   181a4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   181a6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   181aa:	3b04      	subs	r3, #4
   181ac:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   181ae:	2302      	movs	r3, #2
   181b0:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   181b2:	4630      	mov	r0, r6
   181b4:	f7fe fe2c 	bl	16e10 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   181b8:	4601      	mov	r1, r0
   181ba:	2800      	cmp	r0, #0
   181bc:	d053      	beq.n	18266 <send_frag+0x122>
   181be:	4b2c      	ldr	r3, [pc, #176]	; (18270 <send_frag+0x12c>)
   181c0:	4a2c      	ldr	r2, [pc, #176]	; (18274 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   181c2:	482d      	ldr	r0, [pc, #180]	; (18278 <send_frag+0x134>)
   181c4:	1ad2      	subs	r2, r2, r3
   181c6:	08d2      	lsrs	r2, r2, #3
   181c8:	0192      	lsls	r2, r2, #6
   181ca:	f042 0201 	orr.w	r2, r2, #1
   181ce:	f007 fe17 	bl	1fe00 <log_1>
	__asm__ volatile(
   181d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   181d6:	f3ef 8111 	mrs	r1, BASEPRI
   181da:	f383 8811 	msr	BASEPRI, r3
   181de:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   181e2:	2d00      	cmp	r5, #0
   181e4:	d039      	beq.n	1825a <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   181e6:	6963      	ldr	r3, [r4, #20]
   181e8:	2200      	movs	r2, #0
   181ea:	b153      	cbz	r3, 18202 <send_frag+0xbe>
   181ec:	429d      	cmp	r5, r3
   181ee:	d131      	bne.n	18254 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   181f0:	682b      	ldr	r3, [r5, #0]
   181f2:	bb4a      	cbnz	r2, 18248 <send_frag+0x104>
   181f4:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   181f6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   181f8:	4295      	cmp	r5, r2
   181fa:	d100      	bne.n	181fe <send_frag+0xba>
	list->tail = node;
   181fc:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   181fe:	2300      	movs	r3, #0
   18200:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   18202:	f381 8811 	msr	BASEPRI, r1
   18206:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1820a:	4818      	ldr	r0, [pc, #96]	; (1826c <send_frag+0x128>)
   1820c:	f005 fe68 	bl	1dee0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   18210:	b115      	cbz	r5, 18218 <send_frag+0xd4>
		tx_free(tx);
   18212:	4628      	mov	r0, r5
   18214:	f7ff ff76 	bl	18104 <tx_free>
	}

	if (always_consume) {
   18218:	b11f      	cbz	r7, 18222 <send_frag+0xde>
		net_buf_unref(buf);
   1821a:	4630      	mov	r0, r6
   1821c:	f002 fd90 	bl	1ad40 <net_buf_unref>
	}
	return false;
   18220:	2700      	movs	r7, #0
}
   18222:	4638      	mov	r0, r7
   18224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18228:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1822a:	61a5      	str	r5, [r4, #24]
}
   1822c:	e7ac      	b.n	18188 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1822e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18230:	b133      	cbz	r3, 18240 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   18232:	f103 080c 	add.w	r8, r3, #12
   18236:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   18238:	3301      	adds	r3, #1
   1823a:	f8c8 3000 	str.w	r3, [r8]
   1823e:	e7a3      	b.n	18188 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   18240:	69e3      	ldr	r3, [r4, #28]
   18242:	f104 081c 	add.w	r8, r4, #28
   18246:	e7f7      	b.n	18238 <send_frag+0xf4>
	parent->next = child;
   18248:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1824a:	69a3      	ldr	r3, [r4, #24]
   1824c:	429d      	cmp	r5, r3
	list->tail = node;
   1824e:	bf08      	it	eq
   18250:	61a2      	streq	r2, [r4, #24]
}
   18252:	e7d4      	b.n	181fe <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18254:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18256:	681b      	ldr	r3, [r3, #0]
   18258:	e7c7      	b.n	181ea <send_frag+0xa6>
			(*pending_no_cb)--;
   1825a:	f8d8 3000 	ldr.w	r3, [r8]
   1825e:	3b01      	subs	r3, #1
   18260:	f8c8 3000 	str.w	r3, [r8]
   18264:	e7cd      	b.n	18202 <send_frag+0xbe>
	return true;
   18266:	2701      	movs	r7, #1
   18268:	e7db      	b.n	18222 <send_frag+0xde>
   1826a:	bf00      	nop
   1826c:	20000490 	.word	0x20000490
   18270:	00022cf0 	.word	0x00022cf0
   18274:	00022d08 	.word	0x00022d08
   18278:	0002440a 	.word	0x0002440a

0001827c <bt_conn_get_pkts>:
}
   1827c:	4800      	ldr	r0, [pc, #0]	; (18280 <bt_conn_get_pkts+0x4>)
   1827e:	4770      	bx	lr
   18280:	20000490 	.word	0x20000490

00018284 <notify_le_param_updated>:
{
   18284:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18286:	f3bf 8f5b 	dmb	ish
   1828a:	6842      	ldr	r2, [r0, #4]
   1828c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   18290:	0592      	lsls	r2, r2, #22
{
   18292:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   18294:	f100 0304 	add.w	r3, r0, #4
   18298:	d519      	bpl.n	182ce <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1829a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1829e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   182a2:	4291      	cmp	r1, r2
   182a4:	d813      	bhi.n	182ce <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   182a6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   182aa:	4291      	cmp	r1, r2
   182ac:	d30f      	bcc.n	182ce <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   182ae:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   182b2:	4291      	cmp	r1, r2
   182b4:	d10b      	bne.n	182ce <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182b6:	f3bf 8f5b 	dmb	ish
   182ba:	e853 2f00 	ldrex	r2, [r3]
   182be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   182c2:	e843 2100 	strex	r1, r2, [r3]
   182c6:	2900      	cmp	r1, #0
   182c8:	d1f7      	bne.n	182ba <notify_le_param_updated+0x36>
   182ca:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   182ce:	4b08      	ldr	r3, [pc, #32]	; (182f0 <notify_le_param_updated+0x6c>)
   182d0:	681d      	ldr	r5, [r3, #0]
   182d2:	b905      	cbnz	r5, 182d6 <notify_le_param_updated+0x52>
}
   182d4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   182d6:	68ee      	ldr	r6, [r5, #12]
   182d8:	b13e      	cbz	r6, 182ea <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   182da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   182de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   182e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   182e6:	4620      	mov	r0, r4
   182e8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   182ea:	696d      	ldr	r5, [r5, #20]
   182ec:	e7f1      	b.n	182d2 <notify_le_param_updated+0x4e>
   182ee:	bf00      	nop
   182f0:	20002b90 	.word	0x20002b90

000182f4 <notify_le_data_len_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
   182f4:	4b07      	ldr	r3, [pc, #28]	; (18314 <notify_le_data_len_updated+0x20>)
{
   182f6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   182f8:	681c      	ldr	r4, [r3, #0]
{
   182fa:	4605      	mov	r5, r0
			cb->le_data_len_updated(conn, &conn->le.data_len);
   182fc:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   18300:	b904      	cbnz	r4, 18304 <notify_le_data_len_updated+0x10>
}
   18302:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_data_len_updated) {
   18304:	6923      	ldr	r3, [r4, #16]
   18306:	b113      	cbz	r3, 1830e <notify_le_data_len_updated+0x1a>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   18308:	4631      	mov	r1, r6
   1830a:	4628      	mov	r0, r5
   1830c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1830e:	6964      	ldr	r4, [r4, #20]
   18310:	e7f6      	b.n	18300 <notify_le_data_len_updated+0xc>
   18312:	bf00      	nop
   18314:	20002b90 	.word	0x20002b90

00018318 <le_param_req>:
{
   18318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1831a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1831c:	4608      	mov	r0, r1
{
   1831e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18320:	f008 faaf 	bl	20882 <bt_le_conn_params_valid>
   18324:	4604      	mov	r4, r0
   18326:	b910      	cbnz	r0, 1832e <le_param_req+0x16>
		return false;
   18328:	2400      	movs	r4, #0
}
   1832a:	4620      	mov	r0, r4
   1832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1832e:	4b09      	ldr	r3, [pc, #36]	; (18354 <le_param_req+0x3c>)
   18330:	681e      	ldr	r6, [r3, #0]
   18332:	2e00      	cmp	r6, #0
   18334:	d0f9      	beq.n	1832a <le_param_req+0x12>
		if (!cb->le_param_req) {
   18336:	68b3      	ldr	r3, [r6, #8]
   18338:	b90b      	cbnz	r3, 1833e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1833a:	6976      	ldr	r6, [r6, #20]
   1833c:	e7f9      	b.n	18332 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1833e:	4629      	mov	r1, r5
   18340:	4638      	mov	r0, r7
   18342:	4798      	blx	r3
   18344:	2800      	cmp	r0, #0
   18346:	d0ef      	beq.n	18328 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   18348:	4628      	mov	r0, r5
   1834a:	f008 fa9a 	bl	20882 <bt_le_conn_params_valid>
   1834e:	2800      	cmp	r0, #0
   18350:	d1f3      	bne.n	1833a <le_param_req+0x22>
   18352:	e7e9      	b.n	18328 <le_param_req+0x10>
   18354:	20002b90 	.word	0x20002b90

00018358 <bt_conn_cb_register>:
	cb->_next = callback_list;
   18358:	4b02      	ldr	r3, [pc, #8]	; (18364 <bt_conn_cb_register+0xc>)
   1835a:	681a      	ldr	r2, [r3, #0]
   1835c:	6142      	str	r2, [r0, #20]
	callback_list = cb;
   1835e:	6018      	str	r0, [r3, #0]
}
   18360:	4770      	bx	lr
   18362:	bf00      	nop
   18364:	20002b90 	.word	0x20002b90

00018368 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   18368:	b570      	push	{r4, r5, r6, lr}
   1836a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1836c:	f100 0634 	add.w	r6, r0, #52	; 0x34
   18370:	2200      	movs	r2, #0
   18372:	2300      	movs	r3, #0
   18374:	4630      	mov	r0, r6
   18376:	f009 fb22 	bl	219be <net_buf_get>
   1837a:	4605      	mov	r5, r0
   1837c:	b958      	cbnz	r0, 18396 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   1837e:	4620      	mov	r0, r4
   18380:	f008 fb50 	bl	20a24 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18384:	f104 0158 	add.w	r1, r4, #88	; 0x58
   18388:	4807      	ldr	r0, [pc, #28]	; (183a8 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1838a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1838e:	2200      	movs	r2, #0
   18390:	2300      	movs	r3, #0
   18392:	f005 bf03 	b.w	1e19c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   18396:	6968      	ldr	r0, [r5, #20]
   18398:	b108      	cbz	r0, 1839e <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   1839a:	f7ff feb3 	bl	18104 <tx_free>
		net_buf_unref(buf);
   1839e:	4628      	mov	r0, r5
   183a0:	f002 fcce 	bl	1ad40 <net_buf_unref>
   183a4:	e7e4      	b.n	18370 <conn_cleanup+0x8>
   183a6:	bf00      	nop
   183a8:	200024d0 	.word	0x200024d0

000183ac <bt_conn_recv>:
{
   183ac:	b570      	push	{r4, r5, r6, lr}
   183ae:	4616      	mov	r6, r2
   183b0:	4604      	mov	r4, r0
   183b2:	460d      	mov	r5, r1
	tx_notify(conn);
   183b4:	f008 fae8 	bl	20988 <tx_notify>
	switch (flags) {
   183b8:	2e01      	cmp	r6, #1
   183ba:	d02e      	beq.n	1841a <bt_conn_recv+0x6e>
   183bc:	2e02      	cmp	r6, #2
   183be:	d15b      	bne.n	18478 <bt_conn_recv+0xcc>
		if (conn->rx) {
   183c0:	6923      	ldr	r3, [r4, #16]
   183c2:	b163      	cbz	r3, 183de <bt_conn_recv+0x32>
   183c4:	4b37      	ldr	r3, [pc, #220]	; (184a4 <bt_conn_recv+0xf8>)
   183c6:	4938      	ldr	r1, [pc, #224]	; (184a8 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   183c8:	4838      	ldr	r0, [pc, #224]	; (184ac <bt_conn_recv+0x100>)
   183ca:	1ac9      	subs	r1, r1, r3
   183cc:	08c9      	lsrs	r1, r1, #3
   183ce:	0189      	lsls	r1, r1, #6
   183d0:	f041 0101 	orr.w	r1, r1, #1
   183d4:	f007 fd07 	bl	1fde6 <log_0>
			bt_conn_reset_rx_state(conn);
   183d8:	4620      	mov	r0, r4
   183da:	f008 fb23 	bl	20a24 <bt_conn_reset_rx_state>
		conn->rx = buf;
   183de:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   183e0:	6923      	ldr	r3, [r4, #16]
   183e2:	8999      	ldrh	r1, [r3, #12]
   183e4:	2901      	cmp	r1, #1
   183e6:	d95b      	bls.n	184a0 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   183e8:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   183ea:	7845      	ldrb	r5, [r0, #1]
   183ec:	7802      	ldrb	r2, [r0, #0]
   183ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   183f2:	3204      	adds	r2, #4
   183f4:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   183f6:	428a      	cmp	r2, r1
   183f8:	d852      	bhi.n	184a0 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   183fa:	d249      	bcs.n	18490 <bt_conn_recv+0xe4>
   183fc:	4829      	ldr	r0, [pc, #164]	; (184a4 <bt_conn_recv+0xf8>)
   183fe:	4b2a      	ldr	r3, [pc, #168]	; (184a8 <bt_conn_recv+0xfc>)
   18400:	1a1b      	subs	r3, r3, r0
   18402:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   18404:	019b      	lsls	r3, r3, #6
   18406:	482a      	ldr	r0, [pc, #168]	; (184b0 <bt_conn_recv+0x104>)
   18408:	f043 0301 	orr.w	r3, r3, #1
   1840c:	f007 fd0c 	bl	1fe28 <log_2>
		bt_conn_reset_rx_state(conn);
   18410:	4620      	mov	r0, r4
}
   18412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   18416:	f008 bb05 	b.w	20a24 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1841a:	6920      	ldr	r0, [r4, #16]
   1841c:	b968      	cbnz	r0, 1843a <bt_conn_recv+0x8e>
   1841e:	4922      	ldr	r1, [pc, #136]	; (184a8 <bt_conn_recv+0xfc>)
   18420:	4b20      	ldr	r3, [pc, #128]	; (184a4 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   18422:	4824      	ldr	r0, [pc, #144]	; (184b4 <bt_conn_recv+0x108>)
   18424:	1ac9      	subs	r1, r1, r3
   18426:	08c9      	lsrs	r1, r1, #3
   18428:	0189      	lsls	r1, r1, #6
   1842a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   1842e:	f007 fcda 	bl	1fde6 <log_0>
			bt_conn_reset_rx_state(conn);
   18432:	4620      	mov	r0, r4
   18434:	f008 faf6 	bl	20a24 <bt_conn_reset_rx_state>
   18438:	e001      	b.n	1843e <bt_conn_recv+0x92>
		if (!buf->len) {
   1843a:	89ae      	ldrh	r6, [r5, #12]
   1843c:	b926      	cbnz	r6, 18448 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   1843e:	4628      	mov	r0, r5
}
   18440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   18444:	f002 bc7c 	b.w	1ad40 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18448:	3008      	adds	r0, #8
   1844a:	f009 fb44 	bl	21ad6 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1844e:	4286      	cmp	r6, r0
   18450:	d908      	bls.n	18464 <bt_conn_recv+0xb8>
   18452:	4915      	ldr	r1, [pc, #84]	; (184a8 <bt_conn_recv+0xfc>)
   18454:	4b13      	ldr	r3, [pc, #76]	; (184a4 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   18456:	4818      	ldr	r0, [pc, #96]	; (184b8 <bt_conn_recv+0x10c>)
   18458:	1ac9      	subs	r1, r1, r3
   1845a:	08c9      	lsrs	r1, r1, #3
   1845c:	0189      	lsls	r1, r1, #6
   1845e:	f041 0101 	orr.w	r1, r1, #1
   18462:	e7e4      	b.n	1842e <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18464:	6920      	ldr	r0, [r4, #16]
   18466:	89aa      	ldrh	r2, [r5, #12]
   18468:	68a9      	ldr	r1, [r5, #8]
   1846a:	3008      	adds	r0, #8
   1846c:	f009 fafe 	bl	21a6c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18470:	4628      	mov	r0, r5
   18472:	f002 fc65 	bl	1ad40 <net_buf_unref>
		break;
   18476:	e7b3      	b.n	183e0 <bt_conn_recv+0x34>
   18478:	4a0a      	ldr	r2, [pc, #40]	; (184a4 <bt_conn_recv+0xf8>)
   1847a:	4b0b      	ldr	r3, [pc, #44]	; (184a8 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1847c:	480f      	ldr	r0, [pc, #60]	; (184bc <bt_conn_recv+0x110>)
   1847e:	1a9b      	subs	r3, r3, r2
   18480:	08db      	lsrs	r3, r3, #3
   18482:	019b      	lsls	r3, r3, #6
   18484:	f043 0201 	orr.w	r2, r3, #1
   18488:	4631      	mov	r1, r6
   1848a:	f007 fcb9 	bl	1fe00 <log_1>
		bt_conn_reset_rx_state(conn);
   1848e:	e7d0      	b.n	18432 <bt_conn_recv+0x86>
	conn->rx = NULL;
   18490:	2200      	movs	r2, #0
   18492:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   18494:	4620      	mov	r0, r4
   18496:	4619      	mov	r1, r3
}
   18498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1849c:	f000 bd2a 	b.w	18ef4 <bt_l2cap_recv>
}
   184a0:	bd70      	pop	{r4, r5, r6, pc}
   184a2:	bf00      	nop
   184a4:	00022cf0 	.word	0x00022cf0
   184a8:	00022d08 	.word	0x00022d08
   184ac:	000247f4 	.word	0x000247f4
   184b0:	00024874 	.word	0x00024874
   184b4:	00024811 	.word	0x00024811
   184b8:	0002482f 	.word	0x0002482f
   184bc:	00024856 	.word	0x00024856

000184c0 <bt_conn_send_cb>:
{
   184c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184c4:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   184c6:	7a83      	ldrb	r3, [r0, #10]
   184c8:	2b07      	cmp	r3, #7
{
   184ca:	4606      	mov	r6, r0
   184cc:	460d      	mov	r5, r1
   184ce:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   184d0:	d00f      	beq.n	184f2 <bt_conn_send_cb+0x32>
   184d2:	4b2a      	ldr	r3, [pc, #168]	; (1857c <bt_conn_send_cb+0xbc>)
   184d4:	492a      	ldr	r1, [pc, #168]	; (18580 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
   184d6:	482b      	ldr	r0, [pc, #172]	; (18584 <bt_conn_send_cb+0xc4>)
   184d8:	1ac9      	subs	r1, r1, r3
   184da:	08c9      	lsrs	r1, r1, #3
   184dc:	0189      	lsls	r1, r1, #6
   184de:	f041 0101 	orr.w	r1, r1, #1
   184e2:	f007 fc80 	bl	1fde6 <log_0>
		net_buf_unref(buf);
   184e6:	4628      	mov	r0, r5
   184e8:	f002 fc2a 	bl	1ad40 <net_buf_unref>
			return -ENOTCONN;
   184ec:	f06f 0038 	mvn.w	r0, #56	; 0x38
   184f0:	e020      	b.n	18534 <bt_conn_send_cb+0x74>
	if (cb) {
   184f2:	2a00      	cmp	r2, #0
   184f4:	d040      	beq.n	18578 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
   184f6:	f005 fced 	bl	1ded4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   184fa:	4b23      	ldr	r3, [pc, #140]	; (18588 <bt_conn_send_cb+0xc8>)
   184fc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   184fe:	4823      	ldr	r0, [pc, #140]	; (1858c <bt_conn_send_cb+0xcc>)
   18500:	bf07      	ittee	eq
   18502:	2200      	moveq	r2, #0
   18504:	2300      	moveq	r3, #0
   18506:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1850a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1850e:	f005 f915 	bl	1d73c <z_impl_k_queue_get>
   18512:	4604      	mov	r4, r0
		if (!tx) {
   18514:	b980      	cbnz	r0, 18538 <bt_conn_send_cb+0x78>
   18516:	4b19      	ldr	r3, [pc, #100]	; (1857c <bt_conn_send_cb+0xbc>)
   18518:	4919      	ldr	r1, [pc, #100]	; (18580 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
   1851a:	481d      	ldr	r0, [pc, #116]	; (18590 <bt_conn_send_cb+0xd0>)
   1851c:	1ac9      	subs	r1, r1, r3
   1851e:	08c9      	lsrs	r1, r1, #3
   18520:	0189      	lsls	r1, r1, #6
   18522:	f041 0101 	orr.w	r1, r1, #1
   18526:	f007 fc5e 	bl	1fde6 <log_0>
			net_buf_unref(buf);
   1852a:	4628      	mov	r0, r5
   1852c:	f002 fc08 	bl	1ad40 <net_buf_unref>
			return -ENOBUFS;
   18530:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   18534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18538:	7ab3      	ldrb	r3, [r6, #10]
   1853a:	2b07      	cmp	r3, #7
   1853c:	d010      	beq.n	18560 <bt_conn_send_cb+0xa0>
   1853e:	4b0f      	ldr	r3, [pc, #60]	; (1857c <bt_conn_send_cb+0xbc>)
   18540:	490f      	ldr	r1, [pc, #60]	; (18580 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
   18542:	4814      	ldr	r0, [pc, #80]	; (18594 <bt_conn_send_cb+0xd4>)
   18544:	1ac9      	subs	r1, r1, r3
   18546:	08c9      	lsrs	r1, r1, #3
   18548:	0189      	lsls	r1, r1, #6
   1854a:	f041 0102 	orr.w	r1, r1, #2
   1854e:	f007 fc4a 	bl	1fde6 <log_0>
			net_buf_unref(buf);
   18552:	4628      	mov	r0, r5
   18554:	f002 fbf4 	bl	1ad40 <net_buf_unref>
			tx_free(tx);
   18558:	4620      	mov	r0, r4
   1855a:	f7ff fdd3 	bl	18104 <tx_free>
   1855e:	e7c5      	b.n	184ec <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
   18560:	2300      	movs	r3, #0
		tx->user_data = user_data;
   18562:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18566:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18568:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1856a:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1856e:	4629      	mov	r1, r5
   18570:	f009 fa43 	bl	219fa <net_buf_put>
	return 0;
   18574:	2000      	movs	r0, #0
   18576:	e7dd      	b.n	18534 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
   18578:	614a      	str	r2, [r1, #20]
   1857a:	e7f6      	b.n	1856a <bt_conn_send_cb+0xaa>
   1857c:	00022cf0 	.word	0x00022cf0
   18580:	00022d08 	.word	0x00022d08
   18584:	0002488f 	.word	0x0002488f
   18588:	200024e8 	.word	0x200024e8
   1858c:	200009a0 	.word	0x200009a0
   18590:	0002489e 	.word	0x0002489e
   18594:	000248bc 	.word	0x000248bc

00018598 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   18598:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   1859a:	4b1b      	ldr	r3, [pc, #108]	; (18608 <bt_conn_prepare_events+0x70>)
   1859c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1859e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   185a0:	609a      	str	r2, [r3, #8]
{
   185a2:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   185a4:	f00a fa2c 	bl	22a00 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185a8:	f3bf 8f5b 	dmb	ish
   185ac:	4b17      	ldr	r3, [pc, #92]	; (1860c <bt_conn_prepare_events+0x74>)
   185ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   185b2:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   185b6:	f104 0014 	add.w	r0, r4, #20
   185ba:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   185bc:	b90a      	cbnz	r2, 185c2 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   185be:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   185c0:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   185c2:	7a9a      	ldrb	r2, [r3, #10]
   185c4:	b99a      	cbnz	r2, 185ee <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   185c6:	f3bf 8f5b 	dmb	ish
   185ca:	1d1a      	adds	r2, r3, #4
   185cc:	e852 5f00 	ldrex	r5, [r2]
   185d0:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   185d4:	e842 ce00 	strex	lr, ip, [r2]
   185d8:	f1be 0f00 	cmp.w	lr, #0
   185dc:	d1f6      	bne.n	185cc <bt_conn_prepare_events+0x34>
   185de:	f3bf 8f5b 	dmb	ish
   185e2:	066a      	lsls	r2, r5, #25
   185e4:	d503      	bpl.n	185ee <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   185e6:	4618      	mov	r0, r3
   185e8:	f7ff febe 	bl	18368 <conn_cleanup>
   185ec:	e7e7      	b.n	185be <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   185ee:	7a8b      	ldrb	r3, [r1, #10]
   185f0:	2b07      	cmp	r3, #7
   185f2:	d1e4      	bne.n	185be <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   185f4:	4b06      	ldr	r3, [pc, #24]	; (18610 <bt_conn_prepare_events+0x78>)
   185f6:	2200      	movs	r2, #0
   185f8:	2104      	movs	r1, #4
   185fa:	f00a fa01 	bl	22a00 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   185fe:	2301      	movs	r3, #1
   18600:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18604:	2002      	movs	r0, #2
	return ev_count;
   18606:	e7db      	b.n	185c0 <bt_conn_prepare_events+0x28>
   18608:	2000059c 	.word	0x2000059c
   1860c:	20001ff0 	.word	0x20001ff0
   18610:	20002024 	.word	0x20002024

00018614 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18614:	b570      	push	{r4, r5, r6, lr}
   18616:	4606      	mov	r6, r0
   18618:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1861a:	4810      	ldr	r0, [pc, #64]	; (1865c <bt_conn_add_le+0x48>)
   1861c:	2101      	movs	r1, #1
   1861e:	f008 f9d9 	bl	209d4 <bt_conn_new>
	if (!conn) {
   18622:	4604      	mov	r4, r0
   18624:	b1b8      	cbz	r0, 18656 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18626:	2230      	movs	r2, #48	; 0x30
   18628:	2100      	movs	r1, #0
   1862a:	3058      	adds	r0, #88	; 0x58
   1862c:	f008 f82d 	bl	2068a <memset>
   18630:	4b0b      	ldr	r3, [pc, #44]	; (18660 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18632:	4a0c      	ldr	r2, [pc, #48]	; (18664 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18634:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18636:	2300      	movs	r3, #0
   18638:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   1863c:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1863e:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
   18640:	2207      	movs	r2, #7
   18642:	4629      	mov	r1, r5
   18644:	f104 0088 	add.w	r0, r4, #136	; 0x88
   18648:	f007 fff4 	bl	20634 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1864c:	2301      	movs	r3, #1
   1864e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18650:	4b05      	ldr	r3, [pc, #20]	; (18668 <bt_conn_add_le+0x54>)
   18652:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18656:	4620      	mov	r0, r4
   18658:	bd70      	pop	{r4, r5, r6, pc}
   1865a:	bf00      	nop
   1865c:	20001ff0 	.word	0x20001ff0
   18660:	000189e9 	.word	0x000189e9
   18664:	000209cf 	.word	0x000209cf
   18668:	00280018 	.word	0x00280018

0001866c <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   1866c:	4602      	mov	r2, r0
   1866e:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18670:	2101      	movs	r1, #1
   18672:	4803      	ldr	r0, [pc, #12]	; (18680 <bt_conn_lookup_handle+0x14>)
   18674:	f008 fa31 	bl	20ada <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   18678:	2800      	cmp	r0, #0
   1867a:	bf38      	it	cc
   1867c:	2000      	movcc	r0, #0
   1867e:	bd08      	pop	{r3, pc}
   18680:	20001ff0 	.word	0x20001ff0

00018684 <bt_conn_set_state>:
{
   18684:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   18686:	7a86      	ldrb	r6, [r0, #10]
   18688:	428e      	cmp	r6, r1
{
   1868a:	4604      	mov	r4, r0
   1868c:	460d      	mov	r5, r1
	if (conn->state == state) {
   1868e:	d112      	bne.n	186b6 <bt_conn_set_state+0x32>
   18690:	4b68      	ldr	r3, [pc, #416]	; (18834 <bt_conn_set_state+0x1b0>)
   18692:	4a69      	ldr	r2, [pc, #420]	; (18838 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
   18694:	4869      	ldr	r0, [pc, #420]	; (1883c <bt_conn_set_state+0x1b8>)
   18696:	2e08      	cmp	r6, #8
   18698:	eba2 0203 	sub.w	r2, r2, r3
   1869c:	bf96      	itet	ls
   1869e:	4b68      	ldrls	r3, [pc, #416]	; (18840 <bt_conn_set_state+0x1bc>)
   186a0:	4968      	ldrhi	r1, [pc, #416]	; (18844 <bt_conn_set_state+0x1c0>)
   186a2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   186a6:	08d2      	lsrs	r2, r2, #3
   186a8:	0192      	lsls	r2, r2, #6
   186aa:	f042 0202 	orr.w	r2, r2, #2
}
   186ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   186b2:	f007 bba5 	b.w	1fe00 <log_1>
	conn->state = state;
   186b6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   186b8:	b90e      	cbnz	r6, 186be <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   186ba:	f008 f9dc 	bl	20a76 <bt_conn_ref>
	switch (conn->state) {
   186be:	7aa3      	ldrb	r3, [r4, #10]
   186c0:	2b08      	cmp	r3, #8
   186c2:	f200 80ac 	bhi.w	1881e <bt_conn_set_state+0x19a>
   186c6:	e8df f003 	tbb	[pc, r3]
   186ca:	053e      	.short	0x053e
   186cc:	b4b4b4b4 	.word	0xb4b4b4b4
   186d0:	1cb4      	.short	0x1cb4
   186d2:	b4          	.byte	0xb4
   186d3:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   186d4:	4d5c      	ldr	r5, [pc, #368]	; (18848 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
   186d6:	2600      	movs	r6, #0
	__asm__ volatile(
   186d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   186dc:	f3ef 8211 	mrs	r2, BASEPRI
   186e0:	f383 8811 	msr	BASEPRI, r3
   186e4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   186e8:	69e3      	ldr	r3, [r4, #28]
   186ea:	2b00      	cmp	r3, #0
   186ec:	d078      	beq.n	187e0 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
   186ee:	3b01      	subs	r3, #1
   186f0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   186f2:	f382 8811 	msr	BASEPRI, r2
   186f6:	f3bf 8f6f 	isb	sy
   186fa:	4628      	mov	r0, r5
   186fc:	f005 fbf0 	bl	1dee0 <z_impl_k_sem_give>
}
   18700:	e7ea      	b.n	186d8 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18702:	78a3      	ldrb	r3, [r4, #2]
   18704:	2b04      	cmp	r3, #4
   18706:	f000 8094 	beq.w	18832 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
   1870a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1870e:	f009 fdb7 	bl	22280 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   18712:	2100      	movs	r1, #0
   18714:	484d      	ldr	r0, [pc, #308]	; (1884c <bt_conn_set_state+0x1c8>)
   18716:	f005 ffdf 	bl	1e6d8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1871a:	2300      	movs	r3, #0
	list->tail = NULL;
   1871c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
   18720:	4620      	mov	r0, r4
   18722:	f000 fb17 	bl	18d54 <bt_l2cap_connected>
		notify_connected(conn);
   18726:	4620      	mov	r0, r4
   18728:	f7ff fcf6 	bl	18118 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1872c:	78e3      	ldrb	r3, [r4, #3]
   1872e:	2b01      	cmp	r3, #1
   18730:	d17f      	bne.n	18832 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18732:	f104 0158 	add.w	r1, r4, #88	; 0x58
   18736:	4846      	ldr	r0, [pc, #280]	; (18850 <bt_conn_set_state+0x1cc>)
}
   18738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1873c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18740:	2300      	movs	r3, #0
   18742:	f005 bd2b 	b.w	1e19c <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18746:	78a3      	ldrb	r3, [r4, #2]
   18748:	2b04      	cmp	r3, #4
   1874a:	d104      	bne.n	18756 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   1874c:	4620      	mov	r0, r4
}
   1874e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   18752:	f008 b9ab 	b.w	20aac <bt_conn_unref>
		switch (old_state) {
   18756:	2e08      	cmp	r6, #8
   18758:	d86b      	bhi.n	18832 <bt_conn_set_state+0x1ae>
   1875a:	a301      	add	r3, pc, #4	; (adr r3, 18760 <bt_conn_set_state+0xdc>)
   1875c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18760:	000187cd 	.word	0x000187cd
   18764:	00018785 	.word	0x00018785
   18768:	000187bf 	.word	0x000187bf
   1876c:	0001874d 	.word	0x0001874d
   18770:	0001874d 	.word	0x0001874d
   18774:	000187bf 	.word	0x000187bf
   18778:	000187bf 	.word	0x000187bf
   1877c:	000187cd 	.word	0x000187cd
   18780:	000187cd 	.word	0x000187cd
			tx_notify(conn);
   18784:	4620      	mov	r0, r4
   18786:	f008 f8ff 	bl	20988 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1878a:	78a3      	ldrb	r3, [r4, #2]
   1878c:	2b01      	cmp	r3, #1
   1878e:	d103      	bne.n	18798 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
   18790:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18794:	f009 ff4e 	bl	22634 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18798:	f3bf 8f5b 	dmb	ish
   1879c:	3404      	adds	r4, #4
   1879e:	e854 3f00 	ldrex	r3, [r4]
   187a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   187a6:	e844 3200 	strex	r2, r3, [r4]
   187aa:	2a00      	cmp	r2, #0
   187ac:	d1f7      	bne.n	1879e <bt_conn_set_state+0x11a>
   187ae:	f3bf 8f5b 	dmb	ish
   187b2:	4826      	ldr	r0, [pc, #152]	; (1884c <bt_conn_set_state+0x1c8>)
}
   187b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   187b8:	2100      	movs	r1, #0
   187ba:	f005 bf8d 	b.w	1e6d8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   187be:	7a63      	ldrb	r3, [r4, #9]
   187c0:	2b00      	cmp	r3, #0
   187c2:	d0c3      	beq.n	1874c <bt_conn_set_state+0xc8>
				notify_connected(conn);
   187c4:	4620      	mov	r0, r4
   187c6:	f7ff fca7 	bl	18118 <notify_connected>
   187ca:	e7bf      	b.n	1874c <bt_conn_set_state+0xc8>
   187cc:	4a1a      	ldr	r2, [pc, #104]	; (18838 <bt_conn_set_state+0x1b4>)
   187ce:	4b19      	ldr	r3, [pc, #100]	; (18834 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
   187d0:	4820      	ldr	r0, [pc, #128]	; (18854 <bt_conn_set_state+0x1d0>)
   187d2:	1ad2      	subs	r2, r2, r3
   187d4:	08d2      	lsrs	r2, r2, #3
   187d6:	0192      	lsls	r2, r2, #6
   187d8:	f042 0202 	orr.w	r2, r2, #2
   187dc:	4629      	mov	r1, r5
   187de:	e766      	b.n	186ae <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   187e0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   187e2:	b128      	cbz	r0, 187f0 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   187e4:	69a1      	ldr	r1, [r4, #24]
   187e6:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   187e8:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   187ea:	4288      	cmp	r0, r1
	list->tail = node;
   187ec:	bf08      	it	eq
   187ee:	61a3      	streq	r3, [r4, #24]
   187f0:	f382 8811 	msr	BASEPRI, r2
   187f4:	f3bf 8f6f 	isb	sy
		if (!node) {
   187f8:	b1d8      	cbz	r0, 18832 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
   187fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   187fe:	f3ef 8311 	mrs	r3, BASEPRI
   18802:	f382 8811 	msr	BASEPRI, r2
   18806:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1880a:	68c2      	ldr	r2, [r0, #12]
   1880c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1880e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   18810:	f383 8811 	msr	BASEPRI, r3
   18814:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   18818:	f7ff fc74 	bl	18104 <tx_free>
   1881c:	e76d      	b.n	186fa <bt_conn_set_state+0x76>
   1881e:	4a06      	ldr	r2, [pc, #24]	; (18838 <bt_conn_set_state+0x1b4>)
   18820:	4b04      	ldr	r3, [pc, #16]	; (18834 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
   18822:	480d      	ldr	r0, [pc, #52]	; (18858 <bt_conn_set_state+0x1d4>)
   18824:	1ad2      	subs	r2, r2, r3
   18826:	08d2      	lsrs	r2, r2, #3
   18828:	0192      	lsls	r2, r2, #6
   1882a:	f042 0202 	orr.w	r2, r2, #2
   1882e:	4629      	mov	r1, r5
   18830:	e73d      	b.n	186ae <bt_conn_set_state+0x2a>
}
   18832:	bd70      	pop	{r4, r5, r6, pc}
   18834:	00022cf0 	.word	0x00022cf0
   18838:	00022d08 	.word	0x00022d08
   1883c:	000248ec 	.word	0x000248ec
   18840:	00023068 	.word	0x00023068
   18844:	000248e2 	.word	0x000248e2
   18848:	20000490 	.word	0x20000490
   1884c:	2000059c 	.word	0x2000059c
   18850:	200024d0 	.word	0x200024d0
   18854:	000248fd 	.word	0x000248fd
   18858:	00024914 	.word	0x00024914

0001885c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1885c:	b570      	push	{r4, r5, r6, lr}
   1885e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18860:	480c      	ldr	r0, [pc, #48]	; (18894 <bt_conn_lookup_addr_le+0x38>)
{
   18862:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18864:	f008 f907 	bl	20a76 <bt_conn_ref>

		if (!conn) {
   18868:	4604      	mov	r4, r0
   1886a:	b128      	cbz	r0, 18878 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1886c:	7883      	ldrb	r3, [r0, #2]
   1886e:	2b01      	cmp	r3, #1
   18870:	d004      	beq.n	1887c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   18872:	f008 f91b 	bl	20aac <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18876:	2400      	movs	r4, #0
}
   18878:	4620      	mov	r0, r4
   1887a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1887c:	4629      	mov	r1, r5
   1887e:	4632      	mov	r2, r6
   18880:	f008 f8d9 	bl	20a36 <bt_conn_is_peer_addr_le>
   18884:	4605      	mov	r5, r0
   18886:	2800      	cmp	r0, #0
   18888:	d1f6      	bne.n	18878 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1888a:	4620      	mov	r0, r4
   1888c:	f008 f90e 	bl	20aac <bt_conn_unref>
	return NULL;
   18890:	462c      	mov	r4, r5
			continue;
   18892:	e7f1      	b.n	18878 <bt_conn_lookup_addr_le+0x1c>
   18894:	20001ff0 	.word	0x20001ff0

00018898 <bt_conn_exists_le>:
{
   18898:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1889a:	f7ff ffdf 	bl	1885c <bt_conn_lookup_addr_le>
	if (conn) {
   1889e:	4604      	mov	r4, r0
   188a0:	b1a0      	cbz	r0, 188cc <bt_conn_exists_le+0x34>
   188a2:	4b0b      	ldr	r3, [pc, #44]	; (188d0 <bt_conn_exists_le+0x38>)
   188a4:	4a0b      	ldr	r2, [pc, #44]	; (188d4 <bt_conn_exists_le+0x3c>)
   188a6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   188a8:	7a83      	ldrb	r3, [r0, #10]
   188aa:	480b      	ldr	r0, [pc, #44]	; (188d8 <bt_conn_exists_le+0x40>)
   188ac:	2b08      	cmp	r3, #8
   188ae:	bf96      	itet	ls
   188b0:	490a      	ldrls	r1, [pc, #40]	; (188dc <bt_conn_exists_le+0x44>)
   188b2:	490b      	ldrhi	r1, [pc, #44]	; (188e0 <bt_conn_exists_le+0x48>)
   188b4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   188b8:	08d2      	lsrs	r2, r2, #3
   188ba:	0192      	lsls	r2, r2, #6
   188bc:	f042 0202 	orr.w	r2, r2, #2
   188c0:	f007 fa9e 	bl	1fe00 <log_1>
		bt_conn_unref(conn);
   188c4:	4620      	mov	r0, r4
   188c6:	f008 f8f1 	bl	20aac <bt_conn_unref>
		return true;
   188ca:	2001      	movs	r0, #1
}
   188cc:	bd10      	pop	{r4, pc}
   188ce:	bf00      	nop
   188d0:	00022cf0 	.word	0x00022cf0
   188d4:	00022d08 	.word	0x00022d08
   188d8:	00024930 	.word	0x00024930
   188dc:	00023068 	.word	0x00023068
   188e0:	000248e2 	.word	0x000248e2

000188e4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   188e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188e6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188e8:	480f      	ldr	r0, [pc, #60]	; (18928 <bt_conn_lookup_state_le+0x44>)
{
   188ea:	460e      	mov	r6, r1
   188ec:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188ee:	f008 f8c2 	bl	20a76 <bt_conn_ref>

		if (!conn) {
   188f2:	4604      	mov	r4, r0
   188f4:	b1b0      	cbz	r0, 18924 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   188f6:	7883      	ldrb	r3, [r0, #2]
   188f8:	2b01      	cmp	r3, #1
   188fa:	d003      	beq.n	18904 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
   188fc:	f008 f8bb 	bl	20a76 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
   18900:	2400      	movs	r4, #0
			continue;
   18902:	e00f      	b.n	18924 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18904:	b146      	cbz	r6, 18918 <bt_conn_lookup_state_le+0x34>
   18906:	4632      	mov	r2, r6
   18908:	4629      	mov	r1, r5
   1890a:	f008 f894 	bl	20a36 <bt_conn_is_peer_addr_le>
   1890e:	b918      	cbnz	r0, 18918 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
   18910:	4620      	mov	r0, r4
   18912:	f008 f8cb 	bl	20aac <bt_conn_unref>
   18916:	e7f3      	b.n	18900 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
   18918:	7aa3      	ldrb	r3, [r4, #10]
   1891a:	42bb      	cmp	r3, r7
   1891c:	d1f8      	bne.n	18910 <bt_conn_lookup_state_le+0x2c>
   1891e:	7a23      	ldrb	r3, [r4, #8]
   18920:	42ab      	cmp	r3, r5
   18922:	d1f5      	bne.n	18910 <bt_conn_lookup_state_le+0x2c>
}
   18924:	4620      	mov	r0, r4
   18926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18928:	20001ff0 	.word	0x20001ff0

0001892c <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   1892c:	b510      	push	{r4, lr}
	info->type = conn->type;
   1892e:	7882      	ldrb	r2, [r0, #2]
   18930:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   18932:	78c4      	ldrb	r4, [r0, #3]
   18934:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   18936:	7a03      	ldrb	r3, [r0, #8]
   18938:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   1893a:	2a01      	cmp	r2, #1
   1893c:	d11e      	bne.n	1897c <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1893e:	f100 0288 	add.w	r2, r0, #136	; 0x88
   18942:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   18944:	4a0f      	ldr	r2, [pc, #60]	; (18984 <bt_conn_get_info+0x58>)
   18946:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1894a:	4413      	add	r3, r2
   1894c:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1894e:	f100 0296 	add.w	r2, r0, #150	; 0x96
   18952:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   18956:	b974      	cbnz	r4, 18976 <bt_conn_get_info+0x4a>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   18958:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   1895c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   18960:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   18962:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   18966:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
   18968:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   1896a:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   1896e:	830b      	strh	r3, [r1, #24]
		info->le.data_len = &conn->le.data_len;
   18970:	61c8      	str	r0, [r1, #28]
#endif
		return 0;
   18972:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   18974:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   18976:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1897a:	e7ef      	b.n	1895c <bt_conn_get_info+0x30>
	return -EINVAL;
   1897c:	f06f 0015 	mvn.w	r0, #21
   18980:	e7f8      	b.n	18974 <bt_conn_get_info+0x48>
   18982:	bf00      	nop
   18984:	200003c8 	.word	0x200003c8

00018988 <send_conn_le_param_update>:
{
   18988:	b538      	push	{r3, r4, r5, lr}
   1898a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1898c:	4608      	mov	r0, r1
{
   1898e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18990:	f007 ff77 	bl	20882 <bt_le_conn_params_valid>
   18994:	b318      	cbz	r0, 189de <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18996:	4b13      	ldr	r3, [pc, #76]	; (189e4 <send_conn_le_param_update+0x5c>)
   18998:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1899c:	0799      	lsls	r1, r3, #30
   1899e:	d407      	bmi.n	189b0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   189a0:	78e3      	ldrb	r3, [r4, #3]
   189a2:	b183      	cbz	r3, 189c6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   189a4:	4629      	mov	r1, r5
   189a6:	4620      	mov	r0, r4
}
   189a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   189ac:	f000 bada 	b.w	18f64 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   189b0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   189b4:	079a      	lsls	r2, r3, #30
   189b6:	d5f3      	bpl.n	189a0 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189b8:	f3bf 8f5b 	dmb	ish
   189bc:	6863      	ldr	r3, [r4, #4]
   189be:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   189c2:	055b      	lsls	r3, r3, #21
   189c4:	d4ec      	bmi.n	189a0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   189c6:	4629      	mov	r1, r5
   189c8:	4620      	mov	r0, r4
   189ca:	f008 f8aa 	bl	20b22 <bt_conn_le_conn_update>
		if (rc == 0) {
   189ce:	b928      	cbnz	r0, 189dc <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   189d0:	88ab      	ldrh	r3, [r5, #4]
   189d2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   189d6:	88eb      	ldrh	r3, [r5, #6]
   189d8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   189dc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   189de:	f06f 0015 	mvn.w	r0, #21
   189e2:	e7fb      	b.n	189dc <send_conn_le_param_update+0x54>
   189e4:	200003c8 	.word	0x200003c8

000189e8 <deferred_work>:
{
   189e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   189ea:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   189ee:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   189f0:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   189f4:	b993      	cbnz	r3, 18a1c <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   189f6:	4630      	mov	r0, r6
   189f8:	f008 f8f4 	bl	20be4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   189fc:	4b1f      	ldr	r3, [pc, #124]	; (18a7c <deferred_work+0x94>)
   189fe:	681d      	ldr	r5, [r3, #0]
   18a00:	b925      	cbnz	r5, 18a0c <deferred_work+0x24>
		bt_conn_unref(conn);
   18a02:	4630      	mov	r0, r6
   18a04:	f008 f852 	bl	20aac <bt_conn_unref>
}
   18a08:	b002      	add	sp, #8
   18a0a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   18a0c:	686b      	ldr	r3, [r5, #4]
   18a0e:	b11b      	cbz	r3, 18a18 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   18a10:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   18a14:	4630      	mov	r0, r6
   18a16:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18a18:	696d      	ldr	r5, [r5, #20]
   18a1a:	e7f1      	b.n	18a00 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   18a1c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   18a20:	2b01      	cmp	r3, #1
   18a22:	d1f1      	bne.n	18a08 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18a24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   18a28:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   18a2c:	e855 3f00 	ldrex	r3, [r5]
   18a30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18a34:	e845 2100 	strex	r1, r2, [r5]
   18a38:	2900      	cmp	r1, #0
   18a3a:	d1f7      	bne.n	18a2c <deferred_work+0x44>
   18a3c:	f3bf 8f5b 	dmb	ish
   18a40:	059b      	lsls	r3, r3, #22
   18a42:	d514      	bpl.n	18a6e <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18a44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18a46:	9300      	str	r3, [sp, #0]
   18a48:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18a4a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   18a4c:	4669      	mov	r1, sp
   18a4e:	4630      	mov	r0, r6
   18a50:	f7ff ff9a 	bl	18988 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a54:	f3bf 8f5b 	dmb	ish
   18a58:	e855 3f00 	ldrex	r3, [r5]
   18a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18a60:	e845 3200 	strex	r2, r3, [r5]
   18a64:	2a00      	cmp	r2, #0
   18a66:	d1f7      	bne.n	18a58 <deferred_work+0x70>
   18a68:	f3bf 8f5b 	dmb	ish
   18a6c:	e7cc      	b.n	18a08 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   18a6e:	4a04      	ldr	r2, [pc, #16]	; (18a80 <deferred_work+0x98>)
   18a70:	6810      	ldr	r0, [r2, #0]
   18a72:	6851      	ldr	r1, [r2, #4]
   18a74:	466b      	mov	r3, sp
   18a76:	c303      	stmia	r3!, {r0, r1}
   18a78:	e7e8      	b.n	18a4c <deferred_work+0x64>
   18a7a:	bf00      	nop
   18a7c:	20002b90 	.word	0x20002b90
   18a80:	00022e28 	.word	0x00022e28

00018a84 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   18a84:	b538      	push	{r3, r4, r5, lr}
   18a86:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   18a88:	490c      	ldr	r1, [pc, #48]	; (18abc <bt_conn_create_pdu_timeout+0x38>)
   18a8a:	2800      	cmp	r0, #0
   18a8c:	bf08      	it	eq
   18a8e:	4608      	moveq	r0, r1
   18a90:	f008 ff90 	bl	219b4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   18a94:	4604      	mov	r4, r0
   18a96:	b958      	cbnz	r0, 18ab0 <bt_conn_create_pdu_timeout+0x2c>
   18a98:	4909      	ldr	r1, [pc, #36]	; (18ac0 <bt_conn_create_pdu_timeout+0x3c>)
   18a9a:	4b0a      	ldr	r3, [pc, #40]	; (18ac4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   18a9c:	480a      	ldr	r0, [pc, #40]	; (18ac8 <bt_conn_create_pdu_timeout+0x44>)
   18a9e:	1ac9      	subs	r1, r1, r3
   18aa0:	08c9      	lsrs	r1, r1, #3
   18aa2:	0189      	lsls	r1, r1, #6
   18aa4:	f041 0102 	orr.w	r1, r1, #2
   18aa8:	f007 f99d 	bl	1fde6 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   18aac:	4620      	mov	r0, r4
   18aae:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   18ab0:	1d29      	adds	r1, r5, #4
   18ab2:	3008      	adds	r0, #8
   18ab4:	f008 ff9d 	bl	219f2 <net_buf_simple_reserve>
	return buf;
   18ab8:	e7f8      	b.n	18aac <bt_conn_create_pdu_timeout+0x28>
   18aba:	bf00      	nop
   18abc:	200009b8 	.word	0x200009b8
   18ac0:	00022d08 	.word	0x00022d08
   18ac4:	00022cf0 	.word	0x00022cf0
   18ac8:	00024953 	.word	0x00024953

00018acc <bt_conn_create_frag_timeout>:
{
   18acc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   18ace:	4801      	ldr	r0, [pc, #4]	; (18ad4 <bt_conn_create_frag_timeout+0x8>)
   18ad0:	f7ff bfd8 	b.w	18a84 <bt_conn_create_pdu_timeout>
   18ad4:	20000a08 	.word	0x20000a08

00018ad8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18adc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   18ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18ae6:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18ae8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   18aea:	f7ff ffef 	bl	18acc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   18aee:	7833      	ldrb	r3, [r6, #0]
   18af0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   18af2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18af4:	f04f 0600 	mov.w	r6, #0
   18af8:	d005      	beq.n	18b06 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   18afa:	f002 f921 	bl	1ad40 <net_buf_unref>
		return NULL;
   18afe:	4635      	mov	r5, r6
}
   18b00:	4628      	mov	r0, r5
   18b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18b06:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   18b08:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   18b0c:	4e0c      	ldr	r6, [pc, #48]	; (18b40 <create_frag.isra.0+0x68>)
   18b0e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18b10:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   18b14:	f008 ffdf 	bl	21ad6 <net_buf_simple_tailroom>
   18b18:	4580      	cmp	r8, r0
   18b1a:	d20c      	bcs.n	18b36 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   18b1c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18b20:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18b24:	4632      	mov	r2, r6
   18b26:	4638      	mov	r0, r7
   18b28:	f008 ffa0 	bl	21a6c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18b2c:	4631      	mov	r1, r6
   18b2e:	4620      	mov	r0, r4
   18b30:	f008 ffb5 	bl	21a9e <net_buf_simple_pull>
   18b34:	e7e4      	b.n	18b00 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   18b36:	4638      	mov	r0, r7
   18b38:	f008 ffcd 	bl	21ad6 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18b3c:	b286      	uxth	r6, r0
   18b3e:	e7ef      	b.n	18b20 <create_frag.isra.0+0x48>
   18b40:	200003c8 	.word	0x200003c8

00018b44 <bt_conn_process_tx>:
{
   18b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b46:	7a83      	ldrb	r3, [r0, #10]
{
   18b48:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b4a:	b993      	cbnz	r3, 18b72 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b4c:	f3bf 8f5b 	dmb	ish
   18b50:	1d03      	adds	r3, r0, #4
   18b52:	e853 2f00 	ldrex	r2, [r3]
   18b56:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18b5a:	e843 1400 	strex	r4, r1, [r3]
   18b5e:	2c00      	cmp	r4, #0
   18b60:	d1f7      	bne.n	18b52 <bt_conn_process_tx+0xe>
   18b62:	f3bf 8f5b 	dmb	ish
   18b66:	0653      	lsls	r3, r2, #25
   18b68:	d503      	bpl.n	18b72 <bt_conn_process_tx+0x2e>
}
   18b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   18b6e:	f7ff bbfb 	b.w	18368 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18b72:	2200      	movs	r2, #0
   18b74:	2300      	movs	r3, #0
   18b76:	f105 0034 	add.w	r0, r5, #52	; 0x34
   18b7a:	f008 ff20 	bl	219be <net_buf_get>
	BT_ASSERT(buf);
   18b7e:	4604      	mov	r4, r0
   18b80:	b960      	cbnz	r0, 18b9c <bt_conn_process_tx+0x58>
   18b82:	4a20      	ldr	r2, [pc, #128]	; (18c04 <bt_conn_process_tx+0xc0>)
   18b84:	4920      	ldr	r1, [pc, #128]	; (18c08 <bt_conn_process_tx+0xc4>)
   18b86:	4821      	ldr	r0, [pc, #132]	; (18c0c <bt_conn_process_tx+0xc8>)
   18b88:	f240 535f 	movw	r3, #1375	; 0x55f
   18b8c:	f006 fd02 	bl	1f594 <printk>
   18b90:	4040      	eors	r0, r0
   18b92:	f380 8811 	msr	BASEPRI, r0
   18b96:	f04f 0003 	mov.w	r0, #3
   18b9a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   18b9c:	4f1c      	ldr	r7, [pc, #112]	; (18c10 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   18b9e:	89a1      	ldrh	r1, [r4, #12]
   18ba0:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
   18ba4:	4291      	cmp	r1, r2
   18ba6:	d807      	bhi.n	18bb8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18ba8:	2300      	movs	r3, #0
   18baa:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   18bac:	4621      	mov	r1, r4
   18bae:	4628      	mov	r0, r5
   18bb0:	f7ff fac8 	bl	18144 <send_frag>
	if (!send_buf(conn, buf)) {
   18bb4:	b140      	cbz	r0, 18bc8 <bt_conn_process_tx+0x84>
}
   18bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   18bb8:	f105 060a 	add.w	r6, r5, #10
   18bbc:	4621      	mov	r1, r4
   18bbe:	4630      	mov	r0, r6
   18bc0:	f7ff ff8a 	bl	18ad8 <create_frag.isra.0>
	if (!frag) {
   18bc4:	4601      	mov	r1, r0
   18bc6:	b920      	cbnz	r0, 18bd2 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   18bc8:	4620      	mov	r0, r4
}
   18bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   18bce:	f002 b8b7 	b.w	1ad40 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18bd2:	2301      	movs	r3, #1
   18bd4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18bd6:	4628      	mov	r0, r5
   18bd8:	f7ff fab4 	bl	18144 <send_frag>
   18bdc:	2800      	cmp	r0, #0
   18bde:	d0f3      	beq.n	18bc8 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   18be0:	89a2      	ldrh	r2, [r4, #12]
   18be2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
   18be6:	429a      	cmp	r2, r3
   18be8:	d802      	bhi.n	18bf0 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   18bea:	2300      	movs	r3, #0
   18bec:	2203      	movs	r2, #3
   18bee:	e7dd      	b.n	18bac <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   18bf0:	4621      	mov	r1, r4
   18bf2:	4630      	mov	r0, r6
   18bf4:	f7ff ff70 	bl	18ad8 <create_frag.isra.0>
		if (!frag) {
   18bf8:	4601      	mov	r1, r0
   18bfa:	2800      	cmp	r0, #0
   18bfc:	d0e4      	beq.n	18bc8 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18bfe:	2301      	movs	r3, #1
   18c00:	461a      	mov	r2, r3
   18c02:	e7e8      	b.n	18bd6 <bt_conn_process_tx+0x92>
   18c04:	0002497c 	.word	0x0002497c
   18c08:	0002402c 	.word	0x0002402c
   18c0c:	000242d4 	.word	0x000242d4
   18c10:	200003c8 	.word	0x200003c8

00018c14 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   18c14:	4b03      	ldr	r3, [pc, #12]	; (18c24 <bt_conn_index+0x10>)
   18c16:	1ac0      	subs	r0, r0, r3
   18c18:	4b03      	ldr	r3, [pc, #12]	; (18c28 <bt_conn_index+0x14>)
   18c1a:	10c0      	asrs	r0, r0, #3
   18c1c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   18c1e:	b2c0      	uxtb	r0, r0
   18c20:	4770      	bx	lr
   18c22:	bf00      	nop
   18c24:	20001ff0 	.word	0x20001ff0
   18c28:	c28f5c29 	.word	0xc28f5c29

00018c2c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   18c2c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   18c2e:	490f      	ldr	r1, [pc, #60]	; (18c6c <bt_conn_init+0x40>)
   18c30:	480f      	ldr	r0, [pc, #60]	; (18c70 <bt_conn_init+0x44>)
   18c32:	f009 fb31 	bl	22298 <k_queue_append>
   18c36:	490f      	ldr	r1, [pc, #60]	; (18c74 <bt_conn_init+0x48>)
   18c38:	480d      	ldr	r0, [pc, #52]	; (18c70 <bt_conn_init+0x44>)
   18c3a:	f009 fb2d 	bl	22298 <k_queue_append>
   18c3e:	490e      	ldr	r1, [pc, #56]	; (18c78 <bt_conn_init+0x4c>)
   18c40:	480b      	ldr	r0, [pc, #44]	; (18c70 <bt_conn_init+0x44>)
   18c42:	f009 fb29 	bl	22298 <k_queue_append>
   18c46:	490d      	ldr	r1, [pc, #52]	; (18c7c <bt_conn_init+0x50>)
   18c48:	4809      	ldr	r0, [pc, #36]	; (18c70 <bt_conn_init+0x44>)
   18c4a:	f009 fb25 	bl	22298 <k_queue_append>
   18c4e:	490c      	ldr	r1, [pc, #48]	; (18c80 <bt_conn_init+0x54>)
   18c50:	4807      	ldr	r0, [pc, #28]	; (18c70 <bt_conn_init+0x44>)
   18c52:	f009 fb21 	bl	22298 <k_queue_append>
	}

	bt_att_init();
   18c56:	f008 fb1a 	bl	2128e <bt_att_init>

	err = bt_smp_init();
   18c5a:	f008 fea8 	bl	219ae <bt_smp_init>
	if (err) {
   18c5e:	4604      	mov	r4, r0
   18c60:	b908      	cbnz	r0, 18c66 <bt_conn_init+0x3a>
		return err;
	}

	bt_l2cap_init();
   18c62:	f008 f811 	bl	20c88 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18c66:	4620      	mov	r0, r4
   18c68:	bd10      	pop	{r4, pc}
   18c6a:	bf00      	nop
   18c6c:	20002b94 	.word	0x20002b94
   18c70:	200009a0 	.word	0x200009a0
   18c74:	20002ba4 	.word	0x20002ba4
   18c78:	20002bb4 	.word	0x20002bb4
   18c7c:	20002bc4 	.word	0x20002bc4
   18c80:	20002bd4 	.word	0x20002bd4

00018c84 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   18c84:	4a0b      	ldr	r2, [pc, #44]	; (18cb4 <l2cap_accept+0x30>)
{
   18c86:	b508      	push	{r3, lr}
   18c88:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   18c8a:	6810      	ldr	r0, [r2, #0]
   18c8c:	b918      	cbnz	r0, 18c96 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18c8e:	4b0a      	ldr	r3, [pc, #40]	; (18cb8 <l2cap_accept+0x34>)
   18c90:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   18c92:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   18c94:	bd08      	pop	{r3, pc}
   18c96:	4909      	ldr	r1, [pc, #36]	; (18cbc <l2cap_accept+0x38>)
   18c98:	4a09      	ldr	r2, [pc, #36]	; (18cc0 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   18c9a:	480a      	ldr	r0, [pc, #40]	; (18cc4 <l2cap_accept+0x40>)
   18c9c:	1a52      	subs	r2, r2, r1
   18c9e:	08d2      	lsrs	r2, r2, #3
   18ca0:	0192      	lsls	r2, r2, #6
   18ca2:	f042 0201 	orr.w	r2, r2, #1
   18ca6:	4619      	mov	r1, r3
   18ca8:	f007 f8aa 	bl	1fe00 <log_1>
	return -ENOMEM;
   18cac:	f06f 000b 	mvn.w	r0, #11
   18cb0:	e7f0      	b.n	18c94 <l2cap_accept+0x10>
   18cb2:	bf00      	nop
   18cb4:	200020b8 	.word	0x200020b8
   18cb8:	000230ac 	.word	0x000230ac
   18cbc:	00022cf0 	.word	0x00022cf0
   18cc0:	00022d20 	.word	0x00022d20
   18cc4:	00024a09 	.word	0x00024a09

00018cc8 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cca:	4605      	mov	r5, r0
   18ccc:	460f      	mov	r7, r1
   18cce:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18cd0:	2300      	movs	r3, #0
   18cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18cd6:	2104      	movs	r1, #4
   18cd8:	2000      	movs	r0, #0
   18cda:	f7ff fed3 	bl	18a84 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18cde:	4604      	mov	r4, r0
   18ce0:	b960      	cbnz	r0, 18cfc <l2cap_create_le_sig_pdu.isra.0+0x34>
   18ce2:	4a0a      	ldr	r2, [pc, #40]	; (18d0c <l2cap_create_le_sig_pdu.isra.0+0x44>)
   18ce4:	4b0a      	ldr	r3, [pc, #40]	; (18d10 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18ce6:	480b      	ldr	r0, [pc, #44]	; (18d14 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   18ce8:	1ad2      	subs	r2, r2, r3
   18cea:	08d2      	lsrs	r2, r2, #3
   18cec:	0192      	lsls	r2, r2, #6
   18cee:	f042 0201 	orr.w	r2, r2, #1
   18cf2:	4629      	mov	r1, r5
   18cf4:	f007 f884 	bl	1fe00 <log_1>
}
   18cf8:	4620      	mov	r0, r4
   18cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   18cfc:	2104      	movs	r1, #4
   18cfe:	3008      	adds	r0, #8
   18d00:	f008 feae 	bl	21a60 <net_buf_simple_add>
	hdr->code = code;
   18d04:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   18d06:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18d08:	8046      	strh	r6, [r0, #2]
	return buf;
   18d0a:	e7f5      	b.n	18cf8 <l2cap_create_le_sig_pdu.isra.0+0x30>
   18d0c:	00022d20 	.word	0x00022d20
   18d10:	00022cf0 	.word	0x00022cf0
   18d14:	00024a30 	.word	0x00024a30

00018d18 <l2cap_rtx_timeout>:
{
   18d18:	b538      	push	{r3, r4, r5, lr}
   18d1a:	4a0b      	ldr	r2, [pc, #44]	; (18d48 <l2cap_rtx_timeout+0x30>)
   18d1c:	4b0b      	ldr	r3, [pc, #44]	; (18d4c <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   18d1e:	4604      	mov	r4, r0
   18d20:	1ad2      	subs	r2, r2, r3
   18d22:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   18d26:	480a      	ldr	r0, [pc, #40]	; (18d50 <l2cap_rtx_timeout+0x38>)
   18d28:	08d2      	lsrs	r2, r2, #3
   18d2a:	0192      	lsls	r2, r2, #6
   18d2c:	4621      	mov	r1, r4
   18d2e:	f042 0201 	orr.w	r2, r2, #1
   18d32:	f007 f865 	bl	1fe00 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   18d36:	4628      	mov	r0, r5
   18d38:	4621      	mov	r1, r4
   18d3a:	f007 ff1c 	bl	20b76 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18d3e:	4620      	mov	r0, r4
}
   18d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   18d44:	f007 bf39 	b.w	20bba <bt_l2cap_chan_del>
   18d48:	00022d20 	.word	0x00022d20
   18d4c:	00022cf0 	.word	0x00022cf0
   18d50:	00024a58 	.word	0x00024a58

00018d54 <bt_l2cap_connected>:
{
   18d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18d58:	4e2a      	ldr	r6, [pc, #168]	; (18e04 <bt_l2cap_connected+0xb0>)
   18d5a:	4f2b      	ldr	r7, [pc, #172]	; (18e08 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18d5c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18e0c <bt_l2cap_connected+0xb8>
{
   18d60:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18d62:	42be      	cmp	r6, r7
   18d64:	d302      	bcc.n	18d6c <bt_l2cap_connected+0x18>
}
   18d66:	b003      	add	sp, #12
   18d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   18d6c:	6873      	ldr	r3, [r6, #4]
   18d6e:	a901      	add	r1, sp, #4
   18d70:	4628      	mov	r0, r5
   18d72:	4798      	blx	r3
   18d74:	2800      	cmp	r0, #0
   18d76:	db40      	blt.n	18dfa <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
   18d78:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   18d7a:	8833      	ldrh	r3, [r6, #0]
   18d7c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   18d80:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   18d84:	2230      	movs	r2, #48	; 0x30
   18d86:	2100      	movs	r1, #0
   18d88:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18d8c:	f8d6 9008 	ldr.w	r9, [r6, #8]
   18d90:	f007 fc7b 	bl	2068a <memset>
   18d94:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18d98:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18d9c:	2200      	movs	r2, #0
   18d9e:	f3bf 8f5b 	dmb	ish
   18da2:	e853 1f00 	ldrex	r1, [r3]
   18da6:	e843 2000 	strex	r0, r2, [r3]
   18daa:	2800      	cmp	r0, #0
   18dac:	d1f9      	bne.n	18da2 <bt_l2cap_connected+0x4e>
   18dae:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18db2:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
   18db4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
   18db6:	f104 0308 	add.w	r3, r4, #8
   18dba:	bb02      	cbnz	r2, 18dfe <bt_l2cap_connected+0xaa>
	list->head = node;
   18dbc:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
   18dc0:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18dc2:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   18dc4:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   18dc6:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   18dca:	681b      	ldr	r3, [r3, #0]
   18dcc:	b103      	cbz	r3, 18dd0 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
   18dce:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18dd0:	9b01      	ldr	r3, [sp, #4]
   18dd2:	f3bf 8f5b 	dmb	ish
   18dd6:	3340      	adds	r3, #64	; 0x40
   18dd8:	e853 2f00 	ldrex	r2, [r3]
   18ddc:	f042 0201 	orr.w	r2, r2, #1
   18de0:	e843 2100 	strex	r1, r2, [r3]
   18de4:	2900      	cmp	r1, #0
   18de6:	d1f7      	bne.n	18dd8 <bt_l2cap_connected+0x84>
   18de8:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18dec:	9801      	ldr	r0, [sp, #4]
   18dee:	6843      	ldr	r3, [r0, #4]
   18df0:	699b      	ldr	r3, [r3, #24]
   18df2:	b113      	cbz	r3, 18dfa <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
   18df4:	f100 0140 	add.w	r1, r0, #64	; 0x40
   18df8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18dfa:	360c      	adds	r6, #12
   18dfc:	e7b1      	b.n	18d62 <bt_l2cap_connected+0xe>
	parent->next = child;
   18dfe:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18e00:	652b      	str	r3, [r5, #80]	; 0x50
}
   18e02:	e7dd      	b.n	18dc0 <bt_l2cap_connected+0x6c>
   18e04:	00022cb4 	.word	0x00022cb4
   18e08:	00022cd8 	.word	0x00022cd8
   18e0c:	00018d19 	.word	0x00018d19

00018e10 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18e10:	898b      	ldrh	r3, [r1, #12]
   18e12:	2b03      	cmp	r3, #3
{
   18e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18e16:	4606      	mov	r6, r0
   18e18:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18e1a:	d80a      	bhi.n	18e32 <l2cap_recv+0x22>
   18e1c:	492e      	ldr	r1, [pc, #184]	; (18ed8 <l2cap_recv+0xc8>)
   18e1e:	4b2f      	ldr	r3, [pc, #188]	; (18edc <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
   18e20:	482f      	ldr	r0, [pc, #188]	; (18ee0 <l2cap_recv+0xd0>)
   18e22:	1ac9      	subs	r1, r1, r3
   18e24:	08c9      	lsrs	r1, r1, #3
   18e26:	0189      	lsls	r1, r1, #6
   18e28:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   18e2c:	f006 ffdb 	bl	1fde6 <log_0>
		return 0;
   18e30:	e013      	b.n	18e5a <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18e32:	2104      	movs	r1, #4
   18e34:	f105 0008 	add.w	r0, r5, #8
   18e38:	f008 fe39 	bl	21aae <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18e3c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18e3e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   18e40:	428a      	cmp	r2, r1
   18e42:	4604      	mov	r4, r0
   18e44:	d00c      	beq.n	18e60 <l2cap_recv+0x50>
   18e46:	4825      	ldr	r0, [pc, #148]	; (18edc <l2cap_recv+0xcc>)
   18e48:	4b23      	ldr	r3, [pc, #140]	; (18ed8 <l2cap_recv+0xc8>)
   18e4a:	1a1b      	subs	r3, r3, r0
   18e4c:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18e4e:	019b      	lsls	r3, r3, #6
   18e50:	4824      	ldr	r0, [pc, #144]	; (18ee4 <l2cap_recv+0xd4>)
   18e52:	f043 0301 	orr.w	r3, r3, #1
   18e56:	f006 ffe7 	bl	1fe28 <log_2>
}
   18e5a:	2000      	movs	r0, #0
   18e5c:	b002      	add	sp, #8
   18e5e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   18e60:	7843      	ldrb	r3, [r0, #1]
   18e62:	b943      	cbnz	r3, 18e76 <l2cap_recv+0x66>
   18e64:	491c      	ldr	r1, [pc, #112]	; (18ed8 <l2cap_recv+0xc8>)
   18e66:	4b1d      	ldr	r3, [pc, #116]	; (18edc <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   18e68:	481f      	ldr	r0, [pc, #124]	; (18ee8 <l2cap_recv+0xd8>)
   18e6a:	1ac9      	subs	r1, r1, r3
   18e6c:	08c9      	lsrs	r1, r1, #3
   18e6e:	0189      	lsls	r1, r1, #6
   18e70:	f041 0101 	orr.w	r1, r1, #1
   18e74:	e7da      	b.n	18e2c <l2cap_recv+0x1c>
	switch (hdr->code) {
   18e76:	7801      	ldrb	r1, [r0, #0]
   18e78:	2901      	cmp	r1, #1
   18e7a:	d0ee      	beq.n	18e5a <l2cap_recv+0x4a>
   18e7c:	2913      	cmp	r1, #19
   18e7e:	d10a      	bne.n	18e96 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   18e80:	2a01      	cmp	r2, #1
   18e82:	d8ea      	bhi.n	18e5a <l2cap_recv+0x4a>
   18e84:	4914      	ldr	r1, [pc, #80]	; (18ed8 <l2cap_recv+0xc8>)
   18e86:	4b15      	ldr	r3, [pc, #84]	; (18edc <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
   18e88:	4818      	ldr	r0, [pc, #96]	; (18eec <l2cap_recv+0xdc>)
   18e8a:	1ac9      	subs	r1, r1, r3
   18e8c:	08c9      	lsrs	r1, r1, #3
   18e8e:	0189      	lsls	r1, r1, #6
   18e90:	f041 0101 	orr.w	r1, r1, #1
   18e94:	e7ca      	b.n	18e2c <l2cap_recv+0x1c>
   18e96:	4b11      	ldr	r3, [pc, #68]	; (18edc <l2cap_recv+0xcc>)
   18e98:	4a0f      	ldr	r2, [pc, #60]	; (18ed8 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18e9a:	4815      	ldr	r0, [pc, #84]	; (18ef0 <l2cap_recv+0xe0>)
   18e9c:	1ad2      	subs	r2, r2, r3
   18e9e:	08d2      	lsrs	r2, r2, #3
   18ea0:	0192      	lsls	r2, r2, #6
   18ea2:	f042 0202 	orr.w	r2, r2, #2
   18ea6:	f006 ffab 	bl	1fe00 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18eaa:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18eac:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18eae:	2202      	movs	r2, #2
   18eb0:	2001      	movs	r0, #1
   18eb2:	f7ff ff09 	bl	18cc8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18eb6:	4604      	mov	r4, r0
   18eb8:	2800      	cmp	r0, #0
   18eba:	d0ce      	beq.n	18e5a <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18ebc:	2102      	movs	r1, #2
   18ebe:	3008      	adds	r0, #8
   18ec0:	f008 fdce 	bl	21a60 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18ec4:	2300      	movs	r3, #0
   18ec6:	7003      	strb	r3, [r0, #0]
   18ec8:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18eca:	4622      	mov	r2, r4
   18ecc:	9300      	str	r3, [sp, #0]
   18ece:	2105      	movs	r1, #5
   18ed0:	4628      	mov	r0, r5
   18ed2:	f007 fea0 	bl	20c16 <bt_l2cap_send_cb>
}
   18ed6:	e7c0      	b.n	18e5a <l2cap_recv+0x4a>
   18ed8:	00022d20 	.word	0x00022d20
   18edc:	00022cf0 	.word	0x00022cf0
   18ee0:	00024a68 	.word	0x00024a68
   18ee4:	00024a86 	.word	0x00024a86
   18ee8:	00024aa7 	.word	0x00024aa7
   18eec:	00024ac8 	.word	0x00024ac8
   18ef0:	00024ae4 	.word	0x00024ae4

00018ef4 <bt_l2cap_recv>:
{
   18ef4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   18ef6:	898b      	ldrh	r3, [r1, #12]
   18ef8:	2b03      	cmp	r3, #3
{
   18efa:	4605      	mov	r5, r0
   18efc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18efe:	d80e      	bhi.n	18f1e <bt_l2cap_recv+0x2a>
   18f00:	4914      	ldr	r1, [pc, #80]	; (18f54 <bt_l2cap_recv+0x60>)
   18f02:	4b15      	ldr	r3, [pc, #84]	; (18f58 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   18f04:	4815      	ldr	r0, [pc, #84]	; (18f5c <bt_l2cap_recv+0x68>)
   18f06:	1ac9      	subs	r1, r1, r3
   18f08:	08c9      	lsrs	r1, r1, #3
   18f0a:	0189      	lsls	r1, r1, #6
   18f0c:	f041 0101 	orr.w	r1, r1, #1
   18f10:	f006 ff69 	bl	1fde6 <log_0>
	net_buf_unref(buf);
   18f14:	4620      	mov	r0, r4
}
   18f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18f1a:	f001 bf11 	b.w	1ad40 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18f1e:	2104      	movs	r1, #4
   18f20:	f104 0008 	add.w	r0, r4, #8
   18f24:	f008 fdc3 	bl	21aae <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18f28:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18f2a:	4628      	mov	r0, r5
   18f2c:	f007 fe9c 	bl	20c68 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18f30:	b950      	cbnz	r0, 18f48 <bt_l2cap_recv+0x54>
   18f32:	4b09      	ldr	r3, [pc, #36]	; (18f58 <bt_l2cap_recv+0x64>)
   18f34:	4a07      	ldr	r2, [pc, #28]	; (18f54 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   18f36:	480a      	ldr	r0, [pc, #40]	; (18f60 <bt_l2cap_recv+0x6c>)
   18f38:	1ad2      	subs	r2, r2, r3
   18f3a:	08d2      	lsrs	r2, r2, #3
   18f3c:	0192      	lsls	r2, r2, #6
   18f3e:	f042 0202 	orr.w	r2, r2, #2
   18f42:	f006 ff5d 	bl	1fe00 <log_1>
		net_buf_unref(buf);
   18f46:	e7e5      	b.n	18f14 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   18f48:	6843      	ldr	r3, [r0, #4]
   18f4a:	4621      	mov	r1, r4
   18f4c:	691b      	ldr	r3, [r3, #16]
   18f4e:	4798      	blx	r3
   18f50:	e7e0      	b.n	18f14 <bt_l2cap_recv+0x20>
   18f52:	bf00      	nop
   18f54:	00022d20 	.word	0x00022d20
   18f58:	00022cf0 	.word	0x00022cf0
   18f5c:	00024b02 	.word	0x00024b02
   18f60:	00024b1f 	.word	0x00024b1f

00018f64 <bt_l2cap_update_conn_param>:
{
   18f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   18f66:	4b15      	ldr	r3, [pc, #84]	; (18fbc <bt_l2cap_update_conn_param+0x58>)
   18f68:	781a      	ldrb	r2, [r3, #0]
   18f6a:	3201      	adds	r2, #1
	if (!ident) {
   18f6c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   18f70:	bf08      	it	eq
   18f72:	2201      	moveq	r2, #1
   18f74:	701a      	strb	r2, [r3, #0]
{
   18f76:	4605      	mov	r5, r0
   18f78:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18f7a:	2208      	movs	r2, #8
   18f7c:	7819      	ldrb	r1, [r3, #0]
   18f7e:	2012      	movs	r0, #18
   18f80:	f7ff fea2 	bl	18cc8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18f84:	4606      	mov	r6, r0
   18f86:	b1b0      	cbz	r0, 18fb6 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   18f88:	2108      	movs	r1, #8
   18f8a:	4408      	add	r0, r1
   18f8c:	f008 fd68 	bl	21a60 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18f90:	8822      	ldrh	r2, [r4, #0]
   18f92:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18f94:	8862      	ldrh	r2, [r4, #2]
   18f96:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18f98:	88a2      	ldrh	r2, [r4, #4]
   18f9a:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18f9c:	88e2      	ldrh	r2, [r4, #6]
   18f9e:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18fa0:	2400      	movs	r4, #0
   18fa2:	9400      	str	r4, [sp, #0]
   18fa4:	4623      	mov	r3, r4
   18fa6:	4632      	mov	r2, r6
   18fa8:	2105      	movs	r1, #5
   18faa:	4628      	mov	r0, r5
   18fac:	f007 fe33 	bl	20c16 <bt_l2cap_send_cb>
	return 0;
   18fb0:	4620      	mov	r0, r4
}
   18fb2:	b002      	add	sp, #8
   18fb4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18fb6:	f06f 000b 	mvn.w	r0, #11
   18fba:	e7fa      	b.n	18fb2 <bt_l2cap_update_conn_param+0x4e>
   18fbc:	20003920 	.word	0x20003920

00018fc0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   18fc0:	4b02      	ldr	r3, [pc, #8]	; (18fcc <att_cfm_sent+0xc>)
   18fc2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   18fc6:	f007 be8d 	b.w	20ce4 <att_sent>
   18fca:	bf00      	nop
   18fcc:	00020fa7 	.word	0x00020fa7

00018fd0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   18fd0:	4b02      	ldr	r3, [pc, #8]	; (18fdc <att_rsp_sent+0xc>)
   18fd2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   18fd6:	f007 be85 	b.w	20ce4 <att_sent>
   18fda:	bf00      	nop
   18fdc:	00020f8b 	.word	0x00020f8b

00018fe0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18fe0:	4b02      	ldr	r3, [pc, #8]	; (18fec <att_req_sent+0xc>)
   18fe2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   18fe6:	f007 be7d 	b.w	20ce4 <att_sent>
   18fea:	bf00      	nop
   18fec:	0001942d 	.word	0x0001942d

00018ff0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18ff0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18ff2:	3808      	subs	r0, #8
   18ff4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18ff6:	a901      	add	r1, sp, #4
   18ff8:	4802      	ldr	r0, [pc, #8]	; (19004 <bt_att_released+0x14>)
   18ffa:	f004 fab3 	bl	1d564 <k_mem_slab_free>
}
   18ffe:	b003      	add	sp, #12
   19000:	f85d fb04 	ldr.w	pc, [sp], #4
   19004:	2000088c 	.word	0x2000088c

00019008 <read_group_cb>:
{
   19008:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1900c:	4606      	mov	r6, r0
   1900e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19010:	f04f 0800 	mov.w	r8, #0
   19014:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19018:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1901a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1901c:	f88d 8008 	strb.w	r8, [sp, #8]
   19020:	a902      	add	r1, sp, #8
{
   19022:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19024:	f8ad 300a 	strh.w	r3, [sp, #10]
   19028:	f007 fb54 	bl	206d4 <bt_uuid_cmp>
   1902c:	b1a0      	cbz	r0, 19058 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1902e:	f642 0301 	movw	r3, #10241	; 0x2801
   19032:	6830      	ldr	r0, [r6, #0]
   19034:	f88d 800c 	strb.w	r8, [sp, #12]
   19038:	a903      	add	r1, sp, #12
   1903a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1903e:	f007 fb49 	bl	206d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19042:	b148      	cbz	r0, 19058 <read_group_cb+0x50>
		if (data->group &&
   19044:	6923      	ldr	r3, [r4, #16]
   19046:	b11b      	cbz	r3, 19050 <read_group_cb+0x48>
   19048:	885a      	ldrh	r2, [r3, #2]
   1904a:	42aa      	cmp	r2, r5
   1904c:	d200      	bcs.n	19050 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1904e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19050:	2001      	movs	r0, #1
}
   19052:	b004      	add	sp, #16
   19054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19058:	6861      	ldr	r1, [r4, #4]
   1905a:	6830      	ldr	r0, [r6, #0]
   1905c:	f007 fb3a 	bl	206d4 <bt_uuid_cmp>
   19060:	b110      	cbz	r0, 19068 <read_group_cb+0x60>
		data->group = NULL;
   19062:	2300      	movs	r3, #0
   19064:	6123      	str	r3, [r4, #16]
   19066:	e7f3      	b.n	19050 <read_group_cb+0x48>
	if (data->rsp->len &&
   19068:	68e3      	ldr	r3, [r4, #12]
   1906a:	68a0      	ldr	r0, [r4, #8]
   1906c:	781a      	ldrb	r2, [r3, #0]
   1906e:	b13a      	cbz	r2, 19080 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19070:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   19074:	8981      	ldrh	r1, [r0, #12]
   19076:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19078:	4293      	cmp	r3, r2
   1907a:	da01      	bge.n	19080 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1907c:	2000      	movs	r0, #0
   1907e:	e7e8      	b.n	19052 <read_group_cb+0x4a>
   19080:	2104      	movs	r1, #4
   19082:	3008      	adds	r0, #8
   19084:	f008 fcec 	bl	21a60 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19088:	4b09      	ldr	r3, [pc, #36]	; (190b0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1908a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1908c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1908e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19090:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19092:	4631      	mov	r1, r6
   19094:	9300      	str	r3, [sp, #0]
   19096:	9401      	str	r4, [sp, #4]
   19098:	2300      	movs	r3, #0
   1909a:	4638      	mov	r0, r7
   1909c:	f007 fe72 	bl	20d84 <att_chan_read>
	if (read < 0) {
   190a0:	2800      	cmp	r0, #0
   190a2:	dbeb      	blt.n	1907c <read_group_cb+0x74>
	if (!data->group) {
   190a4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   190a6:	3800      	subs	r0, #0
   190a8:	bf18      	it	ne
   190aa:	2001      	movne	r0, #1
   190ac:	e7d1      	b.n	19052 <read_group_cb+0x4a>
   190ae:	bf00      	nop
   190b0:	00020f33 	.word	0x00020f33

000190b4 <read_type_cb>:
{
   190b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   190b8:	f8d2 8000 	ldr.w	r8, [r2]
{
   190bc:	4606      	mov	r6, r0
   190be:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   190c0:	6800      	ldr	r0, [r0, #0]
   190c2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   190c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   190c8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   190ca:	f007 fb03 	bl	206d4 <bt_uuid_cmp>
   190ce:	4607      	mov	r7, r0
   190d0:	2800      	cmp	r0, #0
   190d2:	d13e      	bne.n	19152 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   190d4:	4628      	mov	r0, r5
   190d6:	2215      	movs	r2, #21
   190d8:	4631      	mov	r1, r6
   190da:	f008 fba2 	bl	21822 <bt_gatt_check_perm>
   190de:	4605      	mov	r5, r0
   190e0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   190e2:	b148      	cbz	r0, 190f8 <read_type_cb+0x44>
		if (data->rsp->len) {
   190e4:	68e3      	ldr	r3, [r4, #12]
   190e6:	781b      	ldrb	r3, [r3, #0]
   190e8:	b923      	cbnz	r3, 190f4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   190ea:	2500      	movs	r5, #0
}
   190ec:	4628      	mov	r0, r5
   190ee:	b003      	add	sp, #12
   190f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   190f4:	7527      	strb	r7, [r4, #20]
   190f6:	e7f8      	b.n	190ea <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   190f8:	68a0      	ldr	r0, [r4, #8]
   190fa:	f008 fc8f 	bl	21a1c <net_buf_frag_last>
   190fe:	2102      	movs	r1, #2
   19100:	3008      	adds	r0, #8
   19102:	f008 fcad 	bl	21a60 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19106:	4b14      	ldr	r3, [pc, #80]	; (19158 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19108:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1910a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1910c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19110:	4631      	mov	r1, r6
   19112:	9300      	str	r3, [sp, #0]
   19114:	9401      	str	r4, [sp, #4]
   19116:	462b      	mov	r3, r5
   19118:	4640      	mov	r0, r8
   1911a:	f007 fe33 	bl	20d84 <att_chan_read>
	if (read < 0) {
   1911e:	2800      	cmp	r0, #0
   19120:	da07      	bge.n	19132 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   19122:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19126:	bf26      	itte	cs
   19128:	4240      	negcs	r0, r0
   1912a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1912c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1912e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   19130:	e7dc      	b.n	190ec <read_type_cb+0x38>
	if (!data->item) {
   19132:	6923      	ldr	r3, [r4, #16]
   19134:	2b00      	cmp	r3, #0
   19136:	d0d8      	beq.n	190ea <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19138:	68a0      	ldr	r0, [r4, #8]
   1913a:	f007 fdcb 	bl	20cd4 <net_buf_frags_len>
   1913e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19142:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19144:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19146:	7818      	ldrb	r0, [r3, #0]
   19148:	4285      	cmp	r5, r0
   1914a:	bf94      	ite	ls
   1914c:	2500      	movls	r5, #0
   1914e:	2501      	movhi	r5, #1
   19150:	e7cc      	b.n	190ec <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   19152:	2501      	movs	r5, #1
   19154:	e7ca      	b.n	190ec <read_type_cb+0x38>
   19156:	bf00      	nop
   19158:	00020cf1 	.word	0x00020cf1

0001915c <find_type_cb>:
{
   1915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   19160:	f8d2 9000 	ldr.w	r9, [r2]
{
   19164:	b091      	sub	sp, #68	; 0x44
   19166:	4607      	mov	r7, r0
   19168:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1916a:	2500      	movs	r5, #0
   1916c:	f642 0301 	movw	r3, #10241	; 0x2801
   19170:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   19172:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19176:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1917a:	a90b      	add	r1, sp, #44	; 0x2c
{
   1917c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1917e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19182:	f007 faa7 	bl	206d4 <bt_uuid_cmp>
   19186:	2800      	cmp	r0, #0
   19188:	d066      	beq.n	19258 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1918a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1918e:	6838      	ldr	r0, [r7, #0]
   19190:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   19194:	a90b      	add	r1, sp, #44	; 0x2c
   19196:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1919a:	f007 fa9b 	bl	206d4 <bt_uuid_cmp>
   1919e:	b138      	cbz	r0, 191b0 <find_type_cb+0x54>
		if (data->group &&
   191a0:	68a3      	ldr	r3, [r4, #8]
   191a2:	b11b      	cbz	r3, 191ac <find_type_cb+0x50>
   191a4:	885a      	ldrh	r2, [r3, #2]
   191a6:	42b2      	cmp	r2, r6
   191a8:	d200      	bcs.n	191ac <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   191aa:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   191ac:	2001      	movs	r0, #1
   191ae:	e009      	b.n	191c4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   191b0:	6861      	ldr	r1, [r4, #4]
   191b2:	4608      	mov	r0, r1
   191b4:	f007 fd8e 	bl	20cd4 <net_buf_frags_len>
   191b8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   191bc:	1a1b      	subs	r3, r3, r0
   191be:	2b03      	cmp	r3, #3
   191c0:	d803      	bhi.n	191ca <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   191c2:	2000      	movs	r0, #0
}
   191c4:	b011      	add	sp, #68	; 0x44
   191c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   191ca:	4608      	mov	r0, r1
   191cc:	f008 fc26 	bl	21a1c <net_buf_frag_last>
   191d0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   191d2:	6860      	ldr	r0, [r4, #4]
   191d4:	f007 fd7e 	bl	20cd4 <net_buf_frags_len>
   191d8:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   191dc:	f105 0b08 	add.w	fp, r5, #8
   191e0:	ebaa 0a00 	sub.w	sl, sl, r0
   191e4:	4658      	mov	r0, fp
   191e6:	f008 fc76 	bl	21ad6 <net_buf_simple_tailroom>
   191ea:	4582      	cmp	sl, r0
   191ec:	d237      	bcs.n	1925e <find_type_cb+0x102>
   191ee:	6860      	ldr	r0, [r4, #4]
   191f0:	f007 fd70 	bl	20cd4 <net_buf_frags_len>
   191f4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   191f8:	1a18      	subs	r0, r3, r0
	if (!len) {
   191fa:	b970      	cbnz	r0, 1921a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   191fc:	6863      	ldr	r3, [r4, #4]
   191fe:	7998      	ldrb	r0, [r3, #6]
   19200:	f001 fce2 	bl	1abc8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19204:	2200      	movs	r2, #0
   19206:	2300      	movs	r3, #0
   19208:	f008 fbd4 	bl	219b4 <net_buf_alloc_fixed>
		if (!frag) {
   1920c:	4605      	mov	r5, r0
   1920e:	2800      	cmp	r0, #0
   19210:	d0d7      	beq.n	191c2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   19212:	4601      	mov	r1, r0
   19214:	6860      	ldr	r0, [r4, #4]
   19216:	f008 fc12 	bl	21a3e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1921a:	2300      	movs	r3, #0
   1921c:	9300      	str	r3, [sp, #0]
   1921e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   19222:	4639      	mov	r1, r7
   19224:	2310      	movs	r3, #16
   19226:	aa02      	add	r2, sp, #8
   19228:	4640      	mov	r0, r8
   1922a:	47c8      	blx	r9
	if (read < 0) {
   1922c:	1e07      	subs	r7, r0, #0
   1922e:	db13      	blt.n	19258 <find_type_cb+0xfc>
	if (read != data->value_len) {
   19230:	7c22      	ldrb	r2, [r4, #16]
   19232:	68e0      	ldr	r0, [r4, #12]
   19234:	42ba      	cmp	r2, r7
   19236:	d037      	beq.n	192a8 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19238:	4601      	mov	r1, r0
   1923a:	a80b      	add	r0, sp, #44	; 0x2c
   1923c:	f007 fa74 	bl	20728 <bt_uuid_create>
   19240:	b988      	cbnz	r0, 19266 <find_type_cb+0x10a>
   19242:	4a1b      	ldr	r2, [pc, #108]	; (192b0 <find_type_cb+0x154>)
   19244:	4b1b      	ldr	r3, [pc, #108]	; (192b4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   19246:	7c21      	ldrb	r1, [r4, #16]
   19248:	481b      	ldr	r0, [pc, #108]	; (192b8 <find_type_cb+0x15c>)
   1924a:	1ad2      	subs	r2, r2, r3
   1924c:	08d2      	lsrs	r2, r2, #3
   1924e:	0192      	lsls	r2, r2, #6
   19250:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   19254:	f006 fdd4 	bl	1fe00 <log_1>
	data->group = NULL;
   19258:	2300      	movs	r3, #0
   1925a:	60a3      	str	r3, [r4, #8]
   1925c:	e7a6      	b.n	191ac <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1925e:	4658      	mov	r0, fp
   19260:	f008 fc39 	bl	21ad6 <net_buf_simple_tailroom>
   19264:	e7c9      	b.n	191fa <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19266:	b2fa      	uxtb	r2, r7
   19268:	a902      	add	r1, sp, #8
   1926a:	a806      	add	r0, sp, #24
   1926c:	f007 fa5c 	bl	20728 <bt_uuid_create>
   19270:	b948      	cbnz	r0, 19286 <find_type_cb+0x12a>
   19272:	4a0f      	ldr	r2, [pc, #60]	; (192b0 <find_type_cb+0x154>)
   19274:	4b0f      	ldr	r3, [pc, #60]	; (192b4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   19276:	4811      	ldr	r0, [pc, #68]	; (192bc <find_type_cb+0x160>)
   19278:	1ad2      	subs	r2, r2, r3
   1927a:	08d2      	lsrs	r2, r2, #3
   1927c:	0192      	lsls	r2, r2, #6
   1927e:	f042 0202 	orr.w	r2, r2, #2
   19282:	4639      	mov	r1, r7
   19284:	e7e6      	b.n	19254 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   19286:	a906      	add	r1, sp, #24
   19288:	a80b      	add	r0, sp, #44	; 0x2c
   1928a:	f007 fa23 	bl	206d4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1928e:	2800      	cmp	r0, #0
   19290:	d1e2      	bne.n	19258 <find_type_cb+0xfc>
	data->err = 0x00;
   19292:	2300      	movs	r3, #0
   19294:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   19296:	2104      	movs	r1, #4
   19298:	f105 0008 	add.w	r0, r5, #8
   1929c:	f008 fbe0 	bl	21a60 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   192a0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   192a2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   192a4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   192a6:	e781      	b.n	191ac <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   192a8:	a902      	add	r1, sp, #8
   192aa:	f007 f99c 	bl	205e6 <memcmp>
   192ae:	e7ee      	b.n	1928e <find_type_cb+0x132>
   192b0:	00022cf8 	.word	0x00022cf8
   192b4:	00022cf0 	.word	0x00022cf0
   192b8:	00024b54 	.word	0x00024b54
   192bc:	00024b73 	.word	0x00024b73

000192c0 <chan_send>:
{
   192c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   192c4:	688b      	ldr	r3, [r1, #8]
   192c6:	781b      	ldrb	r3, [r3, #0]
   192c8:	2bd2      	cmp	r3, #210	; 0xd2
{
   192ca:	4605      	mov	r5, r0
   192cc:	460c      	mov	r4, r1
   192ce:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   192d0:	d116      	bne.n	19300 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   192d2:	6803      	ldr	r3, [r0, #0]
   192d4:	6818      	ldr	r0, [r3, #0]
   192d6:	f008 fb67 	bl	219a8 <bt_smp_sign>
		if (err) {
   192da:	4606      	mov	r6, r0
   192dc:	b180      	cbz	r0, 19300 <chan_send+0x40>
   192de:	4928      	ldr	r1, [pc, #160]	; (19380 <chan_send+0xc0>)
   192e0:	4b28      	ldr	r3, [pc, #160]	; (19384 <chan_send+0xc4>)
			BT_ERR("Error signing data");
   192e2:	4829      	ldr	r0, [pc, #164]	; (19388 <chan_send+0xc8>)
   192e4:	1ac9      	subs	r1, r1, r3
   192e6:	08c9      	lsrs	r1, r1, #3
   192e8:	0189      	lsls	r1, r1, #6
   192ea:	f041 0101 	orr.w	r1, r1, #1
   192ee:	f006 fd7a 	bl	1fde6 <log_0>
		net_buf_unref(buf);
   192f2:	4620      	mov	r0, r4
   192f4:	f001 fd24 	bl	1ad40 <net_buf_unref>
}
   192f8:	4630      	mov	r0, r6
   192fa:	b003      	add	sp, #12
   192fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   19300:	f104 0008 	add.w	r0, r4, #8
   19304:	f008 fbe3 	bl	21ace <net_buf_simple_headroom>
	state->len = buf->len;
   19308:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1930c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1930e:	f1b9 0f00 	cmp.w	r9, #0
   19312:	d10a      	bne.n	1932a <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
   19314:	68a3      	ldr	r3, [r4, #8]
   19316:	7818      	ldrb	r0, [r3, #0]
   19318:	f007 fcfc 	bl	20d14 <att_op_get_type>
   1931c:	1e43      	subs	r3, r0, #1
   1931e:	b2db      	uxtb	r3, r3
   19320:	2b04      	cmp	r3, #4
   19322:	bf9c      	itt	ls
   19324:	4a19      	ldrls	r2, [pc, #100]	; (1938c <chan_send+0xcc>)
   19326:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1932a:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1932c:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19330:	4620      	mov	r0, r4
   19332:	681e      	ldr	r6, [r3, #0]
   19334:	f008 fb6e 	bl	21a14 <net_buf_ref>
   19338:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
   1933c:	4b14      	ldr	r3, [pc, #80]	; (19390 <chan_send+0xd0>)
   1933e:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19340:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   19342:	d019      	beq.n	19378 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
   19344:	4b13      	ldr	r3, [pc, #76]	; (19394 <chan_send+0xd4>)
   19346:	4299      	cmp	r1, r3
   19348:	d018      	beq.n	1937c <chan_send+0xbc>
		return att_sent;
   1934a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 193a8 <chan_send+0xe8>
   1934e:	4b12      	ldr	r3, [pc, #72]	; (19398 <chan_send+0xd8>)
   19350:	4812      	ldr	r0, [pc, #72]	; (1939c <chan_send+0xdc>)
   19352:	4561      	cmp	r1, ip
   19354:	bf18      	it	ne
   19356:	4603      	movne	r3, r0
				&chan->chan.chan);
   19358:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1935a:	4630      	mov	r0, r6
   1935c:	9500      	str	r5, [sp, #0]
   1935e:	2104      	movs	r1, #4
   19360:	f007 fc59 	bl	20c16 <bt_l2cap_send_cb>
	if (!err) {
   19364:	4606      	mov	r6, r0
   19366:	2800      	cmp	r0, #0
   19368:	d0c3      	beq.n	192f2 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
   1936a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1936c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   19370:	fa10 f787 	uxtah	r7, r0, r7
   19374:	60a7      	str	r7, [r4, #8]
}
   19376:	e7bf      	b.n	192f8 <chan_send+0x38>
		return att_rsp_sent;
   19378:	4b09      	ldr	r3, [pc, #36]	; (193a0 <chan_send+0xe0>)
   1937a:	e7ed      	b.n	19358 <chan_send+0x98>
		return att_cfm_sent;
   1937c:	4b09      	ldr	r3, [pc, #36]	; (193a4 <chan_send+0xe4>)
   1937e:	e7eb      	b.n	19358 <chan_send+0x98>
   19380:	00022cf8 	.word	0x00022cf8
   19384:	00022cf0 	.word	0x00022cf0
   19388:	00024b92 	.word	0x00024b92
   1938c:	000230cc 	.word	0x000230cc
   19390:	00020f8b 	.word	0x00020f8b
   19394:	00020fa7 	.word	0x00020fa7
   19398:	00018fe1 	.word	0x00018fe1
   1939c:	00020ce5 	.word	0x00020ce5
   193a0:	00018fd1 	.word	0x00018fd1
   193a4:	00018fc1 	.word	0x00018fc1
   193a8:	0001942d 	.word	0x0001942d

000193ac <att_get>:
{
   193ac:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   193ae:	7a83      	ldrb	r3, [r0, #10]
   193b0:	2b07      	cmp	r3, #7
   193b2:	d00b      	beq.n	193cc <att_get+0x20>
   193b4:	4918      	ldr	r1, [pc, #96]	; (19418 <att_get+0x6c>)
   193b6:	4b19      	ldr	r3, [pc, #100]	; (1941c <att_get+0x70>)
		BT_WARN("Not connected");
   193b8:	4819      	ldr	r0, [pc, #100]	; (19420 <att_get+0x74>)
   193ba:	1ac9      	subs	r1, r1, r3
   193bc:	08c9      	lsrs	r1, r1, #3
   193be:	0189      	lsls	r1, r1, #6
   193c0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   193c4:	f006 fd0f 	bl	1fde6 <log_0>
		return NULL;
   193c8:	2400      	movs	r4, #0
   193ca:	e00e      	b.n	193ea <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   193cc:	2104      	movs	r1, #4
   193ce:	f007 fc4b 	bl	20c68 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   193d2:	4604      	mov	r4, r0
   193d4:	b958      	cbnz	r0, 193ee <att_get+0x42>
   193d6:	4910      	ldr	r1, [pc, #64]	; (19418 <att_get+0x6c>)
   193d8:	4b10      	ldr	r3, [pc, #64]	; (1941c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   193da:	4812      	ldr	r0, [pc, #72]	; (19424 <att_get+0x78>)
   193dc:	1ac9      	subs	r1, r1, r3
   193de:	08c9      	lsrs	r1, r1, #3
   193e0:	0189      	lsls	r1, r1, #6
   193e2:	f041 0101 	orr.w	r1, r1, #1
   193e6:	f006 fcfe 	bl	1fde6 <log_0>
}
   193ea:	4620      	mov	r0, r4
   193ec:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   193ee:	f3bf 8f5b 	dmb	ish
   193f2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   193f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   193fa:	075b      	lsls	r3, r3, #29
   193fc:	d508      	bpl.n	19410 <att_get+0x64>
   193fe:	4906      	ldr	r1, [pc, #24]	; (19418 <att_get+0x6c>)
   19400:	4b06      	ldr	r3, [pc, #24]	; (1941c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   19402:	4809      	ldr	r0, [pc, #36]	; (19428 <att_get+0x7c>)
   19404:	1ac9      	subs	r1, r1, r3
   19406:	08c9      	lsrs	r1, r1, #3
   19408:	0189      	lsls	r1, r1, #6
   1940a:	f041 0102 	orr.w	r1, r1, #2
   1940e:	e7d9      	b.n	193c4 <att_get+0x18>
	return att_chan->att;
   19410:	f850 4c08 	ldr.w	r4, [r0, #-8]
   19414:	e7e9      	b.n	193ea <att_get+0x3e>
   19416:	bf00      	nop
   19418:	00022cf8 	.word	0x00022cf8
   1941c:	00022cf0 	.word	0x00022cf0
   19420:	00024ba5 	.word	0x00024ba5
   19424:	00024bb3 	.word	0x00024bb3
   19428:	00024bce 	.word	0x00024bce

0001942c <chan_req_sent>:
	if (chan->req) {
   1942c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   19430:	b13b      	cbz	r3, 19442 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   19432:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   19436:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1943a:	4802      	ldr	r0, [pc, #8]	; (19444 <chan_req_sent+0x18>)
   1943c:	2300      	movs	r3, #0
   1943e:	f004 bead 	b.w	1e19c <k_delayed_work_submit_to_queue>
}
   19442:	4770      	bx	lr
   19444:	200024d0 	.word	0x200024d0

00019448 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1944a:	2300      	movs	r3, #0
{
   1944c:	4606      	mov	r6, r0
   1944e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19450:	482c      	ldr	r0, [pc, #176]	; (19504 <bt_att_accept+0xbc>)
   19452:	2200      	movs	r2, #0
   19454:	4669      	mov	r1, sp
   19456:	f004 f853 	bl	1d500 <k_mem_slab_alloc>
   1945a:	4604      	mov	r4, r0
   1945c:	b178      	cbz	r0, 1947e <bt_att_accept+0x36>
   1945e:	4a2a      	ldr	r2, [pc, #168]	; (19508 <bt_att_accept+0xc0>)
   19460:	4b2a      	ldr	r3, [pc, #168]	; (1950c <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
   19462:	482b      	ldr	r0, [pc, #172]	; (19510 <bt_att_accept+0xc8>)
   19464:	1ad2      	subs	r2, r2, r3
   19466:	08d2      	lsrs	r2, r2, #3
   19468:	0192      	lsls	r2, r2, #6
   1946a:	f042 0201 	orr.w	r2, r2, #1
   1946e:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   19470:	f006 fcc6 	bl	1fe00 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   19474:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   19478:	4620      	mov	r0, r4
   1947a:	b003      	add	sp, #12
   1947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1947e:	4601      	mov	r1, r0
   19480:	222c      	movs	r2, #44	; 0x2c
   19482:	9800      	ldr	r0, [sp, #0]
   19484:	f007 f901 	bl	2068a <memset>
	att->conn = conn;
   19488:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1948a:	4822      	ldr	r0, [pc, #136]	; (19514 <bt_att_accept+0xcc>)
	list->tail = NULL;
   1948c:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   1948e:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   19492:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   19496:	2200      	movs	r2, #0
   19498:	2300      	movs	r3, #0
   1949a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1949c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1949e:	f004 f82f 	bl	1d500 <k_mem_slab_alloc>
   194a2:	4604      	mov	r4, r0
   194a4:	b148      	cbz	r0, 194ba <bt_att_accept+0x72>
   194a6:	4a18      	ldr	r2, [pc, #96]	; (19508 <bt_att_accept+0xc0>)
   194a8:	4b18      	ldr	r3, [pc, #96]	; (1950c <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   194aa:	6829      	ldr	r1, [r5, #0]
   194ac:	481a      	ldr	r0, [pc, #104]	; (19518 <bt_att_accept+0xd0>)
   194ae:	1ad2      	subs	r2, r2, r3
   194b0:	08d2      	lsrs	r2, r2, #3
   194b2:	0192      	lsls	r2, r2, #6
   194b4:	f042 0201 	orr.w	r2, r2, #1
   194b8:	e7da      	b.n	19470 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   194ba:	4601      	mov	r1, r0
   194bc:	f44f 7298 	mov.w	r2, #304	; 0x130
   194c0:	9801      	ldr	r0, [sp, #4]
   194c2:	f007 f8e2 	bl	2068a <memset>
	chan->chan.chan.ops = &ops;
   194c6:	9801      	ldr	r0, [sp, #4]
   194c8:	4b14      	ldr	r3, [pc, #80]	; (1951c <bt_att_accept+0xd4>)
   194ca:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   194cc:	30c8      	adds	r0, #200	; 0xc8
   194ce:	f008 fed7 	bl	22280 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   194d2:	9801      	ldr	r0, [sp, #4]
   194d4:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
   194d8:	2205      	movs	r2, #5
   194da:	4611      	mov	r1, r2
   194dc:	f009 f828 	bl	22530 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   194e0:	9b01      	ldr	r3, [sp, #4]
   194e2:	f3bf 8f5b 	dmb	ish
   194e6:	33c0      	adds	r3, #192	; 0xc0
   194e8:	e853 2f00 	ldrex	r2, [r3]
   194ec:	e843 4100 	strex	r1, r4, [r3]
   194f0:	2900      	cmp	r1, #0
   194f2:	d1f9      	bne.n	194e8 <bt_att_accept+0xa0>
   194f4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   194f8:	9b01      	ldr	r3, [sp, #4]
   194fa:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   194fe:	603b      	str	r3, [r7, #0]
	return 0;
   19500:	e7ba      	b.n	19478 <bt_att_accept+0x30>
   19502:	bf00      	nop
   19504:	20000870 	.word	0x20000870
   19508:	00022cf8 	.word	0x00022cf8
   1950c:	00022cf0 	.word	0x00022cf0
   19510:	00024bf2 	.word	0x00024bf2
   19514:	2000088c 	.word	0x2000088c
   19518:	00024c17 	.word	0x00024c17
   1951c:	200005ac 	.word	0x200005ac

00019520 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   19520:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   19522:	4a07      	ldr	r2, [pc, #28]	; (19540 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   19524:	4604      	mov	r4, r0
   19526:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   19528:	f7ff feca 	bl	192c0 <chan_send>
	if (err) {
   1952c:	b130      	cbz	r0, 1953c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   1952e:	4629      	mov	r1, r5
   19530:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   19534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   19538:	f008 ba5f 	b.w	219fa <net_buf_put>
}
   1953c:	bd38      	pop	{r3, r4, r5, pc}
   1953e:	bf00      	nop
   19540:	00020f8b 	.word	0x00020f8b

00019544 <bt_att_connected>:
{
   19544:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19546:	2104      	movs	r1, #4
{
   19548:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1954a:	6800      	ldr	r0, [r0, #0]
   1954c:	f007 fb7c 	bl	20c48 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   19550:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   19554:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19556:	b91b      	cbnz	r3, 19560 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
   19558:	f105 000c 	add.w	r0, r5, #12
   1955c:	f008 fe90 	bl	22280 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   19560:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   19562:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
   19566:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   19568:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
   1956c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1956e:	b902      	cbnz	r2, 19572 <bt_att_connected+0x2e>
	list->tail = node;
   19570:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19572:	f3bf 8f5b 	dmb	ish
   19576:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1957a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1957e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19580:	bf5e      	ittt	pl
   19582:	2317      	movpl	r3, #23
   19584:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19588:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1958c:	2230      	movs	r2, #48	; 0x30
   1958e:	2100      	movs	r1, #0
   19590:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   19594:	f007 f879 	bl	2068a <memset>
   19598:	4b01      	ldr	r3, [pc, #4]	; (195a0 <bt_att_connected+0x5c>)
   1959a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
   1959e:	bd38      	pop	{r3, r4, r5, pc}
   195a0:	00019ee1 	.word	0x00019ee1

000195a4 <att_write_cmd>:
{
   195a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   195a6:	4604      	mov	r4, r0
   195a8:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   195aa:	f101 0008 	add.w	r0, r1, #8
   195ae:	460d      	mov	r5, r1
   195b0:	f008 fa85 	bl	21abe <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   195b4:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   195b6:	68af      	ldr	r7, [r5, #8]
   195b8:	89ad      	ldrh	r5, [r5, #12]
   195ba:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   195bc:	2100      	movs	r1, #0
   195be:	6818      	ldr	r0, [r3, #0]
   195c0:	f008 f99d 	bl	218fe <bt_gatt_change_aware>
   195c4:	b320      	cbz	r0, 19610 <att_write_cmd+0x6c>
	if (!handle) {
   195c6:	b32e      	cbz	r6, 19614 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   195c8:	2218      	movs	r2, #24
   195ca:	2100      	movs	r1, #0
   195cc:	4668      	mov	r0, sp
   195ce:	f007 f85c 	bl	2068a <memset>
	data.conn = chan->att->conn;
   195d2:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   195d4:	4a10      	ldr	r2, [pc, #64]	; (19618 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   195d6:	681b      	ldr	r3, [r3, #0]
   195d8:	9300      	str	r3, [sp, #0]
	data.req = req;
   195da:	2300      	movs	r3, #0
   195dc:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   195e0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   195e4:	2301      	movs	r3, #1
   195e6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   195ea:	4631      	mov	r1, r6
   195ec:	466b      	mov	r3, sp
   195ee:	4630      	mov	r0, r6
	data.value = value;
   195f0:	9703      	str	r7, [sp, #12]
	data.len = len;
   195f2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   195f6:	f007 fbba 	bl	20d6e <bt_gatt_foreach_attr>
	if (data.err) {
   195fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   195fe:	b923      	cbnz	r3, 1960a <att_write_cmd+0x66>
	if (data.buf) {
   19600:	9901      	ldr	r1, [sp, #4]
   19602:	b111      	cbz	r1, 1960a <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19604:	4620      	mov	r0, r4
   19606:	f7ff ff8b 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
   1960a:	2000      	movs	r0, #0
}
   1960c:	b007      	add	sp, #28
   1960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19610:	2012      	movs	r0, #18
   19612:	e7fb      	b.n	1960c <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   19614:	2001      	movs	r0, #1
   19616:	e7f9      	b.n	1960c <att_write_cmd+0x68>
   19618:	0002108b 	.word	0x0002108b

0001961c <bt_att_chan_create_pdu>:
{
   1961c:	b538      	push	{r3, r4, r5, lr}
   1961e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19620:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   19624:	3201      	adds	r2, #1
   19626:	428a      	cmp	r2, r1
   19628:	d90c      	bls.n	19644 <bt_att_chan_create_pdu+0x28>
   1962a:	481a      	ldr	r0, [pc, #104]	; (19694 <bt_att_chan_create_pdu+0x78>)
   1962c:	4b1a      	ldr	r3, [pc, #104]	; (19698 <bt_att_chan_create_pdu+0x7c>)
   1962e:	1a1b      	subs	r3, r3, r0
   19630:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   19632:	019b      	lsls	r3, r3, #6
   19634:	4819      	ldr	r0, [pc, #100]	; (1969c <bt_att_chan_create_pdu+0x80>)
   19636:	f043 0302 	orr.w	r3, r3, #2
   1963a:	f006 fbf5 	bl	1fe28 <log_2>
		return NULL;
   1963e:	2400      	movs	r4, #0
}
   19640:	4620      	mov	r0, r4
   19642:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   19644:	4628      	mov	r0, r5
   19646:	f007 fb65 	bl	20d14 <att_op_get_type>
   1964a:	2802      	cmp	r0, #2
   1964c:	d001      	beq.n	19652 <bt_att_chan_create_pdu+0x36>
   1964e:	2804      	cmp	r0, #4
   19650:	d114      	bne.n	1967c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   19652:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   19656:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   19658:	2100      	movs	r1, #0
   1965a:	4608      	mov	r0, r1
   1965c:	f007 fad8 	bl	20c10 <bt_l2cap_create_pdu_timeout>
   19660:	4604      	mov	r4, r0
	if (!buf) {
   19662:	b980      	cbnz	r0, 19686 <bt_att_chan_create_pdu+0x6a>
   19664:	4b0b      	ldr	r3, [pc, #44]	; (19694 <bt_att_chan_create_pdu+0x78>)
   19666:	4a0c      	ldr	r2, [pc, #48]	; (19698 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   19668:	480d      	ldr	r0, [pc, #52]	; (196a0 <bt_att_chan_create_pdu+0x84>)
   1966a:	1ad2      	subs	r2, r2, r3
   1966c:	08d2      	lsrs	r2, r2, #3
   1966e:	0192      	lsls	r2, r2, #6
   19670:	f042 0201 	orr.w	r2, r2, #1
   19674:	4629      	mov	r1, r5
   19676:	f006 fbc3 	bl	1fe00 <log_1>
		return NULL;
   1967a:	e7e1      	b.n	19640 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1967c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19684:	e7e8      	b.n	19658 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   19686:	2101      	movs	r1, #1
   19688:	3008      	adds	r0, #8
   1968a:	f008 f9e9 	bl	21a60 <net_buf_simple_add>
	hdr->code = op;
   1968e:	7005      	strb	r5, [r0, #0]
	return buf;
   19690:	e7d6      	b.n	19640 <bt_att_chan_create_pdu+0x24>
   19692:	bf00      	nop
   19694:	00022cf0 	.word	0x00022cf0
   19698:	00022cf8 	.word	0x00022cf8
   1969c:	00024c3c 	.word	0x00024c3c
   196a0:	00024a30 	.word	0x00024a30

000196a4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   196a4:	898b      	ldrh	r3, [r1, #12]
{
   196a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196aa:	4604      	mov	r4, r0
   196ac:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   196ae:	b963      	cbnz	r3, 196ca <bt_att_recv+0x26>
   196b0:	494c      	ldr	r1, [pc, #304]	; (197e4 <bt_att_recv+0x140>)
   196b2:	4b4d      	ldr	r3, [pc, #308]	; (197e8 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   196b4:	484d      	ldr	r0, [pc, #308]	; (197ec <bt_att_recv+0x148>)
   196b6:	1ac9      	subs	r1, r1, r3
   196b8:	08c9      	lsrs	r1, r1, #3
   196ba:	0189      	lsls	r1, r1, #6
   196bc:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   196c0:	f006 fb91 	bl	1fde6 <log_0>
}
   196c4:	2000      	movs	r0, #0
   196c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   196ca:	2101      	movs	r1, #1
   196cc:	f108 0008 	add.w	r0, r8, #8
   196d0:	f008 f9ed 	bl	21aae <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   196d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   196d8:	4605      	mov	r5, r0
   196da:	2b00      	cmp	r3, #0
   196dc:	d0f2      	beq.n	196c4 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   196de:	4a44      	ldr	r2, [pc, #272]	; (197f0 <bt_att_recv+0x14c>)
   196e0:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   196e2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   196e6:	2300      	movs	r3, #0
   196e8:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   196ea:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   196ee:	4288      	cmp	r0, r1
   196f0:	d11d      	bne.n	1972e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   196f2:	00d8      	lsls	r0, r3, #3
   196f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   196f8:	789f      	ldrb	r7, [r3, #2]
   196fa:	2f01      	cmp	r7, #1
   196fc:	d132      	bne.n	19764 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196fe:	f3bf 8f5b 	dmb	ish
   19702:	34b8      	adds	r4, #184	; 0xb8
   19704:	e854 3f00 	ldrex	r3, [r4]
   19708:	f043 0201 	orr.w	r2, r3, #1
   1970c:	e844 2100 	strex	r1, r2, [r4]
   19710:	2900      	cmp	r1, #0
   19712:	d1f7      	bne.n	19704 <bt_att_recv+0x60>
   19714:	f3bf 8f5b 	dmb	ish
   19718:	07da      	lsls	r2, r3, #31
   1971a:	d53d      	bpl.n	19798 <bt_att_recv+0xf4>
   1971c:	4931      	ldr	r1, [pc, #196]	; (197e4 <bt_att_recv+0x140>)
   1971e:	4b32      	ldr	r3, [pc, #200]	; (197e8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   19720:	4834      	ldr	r0, [pc, #208]	; (197f4 <bt_att_recv+0x150>)
   19722:	1ac9      	subs	r1, r1, r3
   19724:	08c9      	lsrs	r1, r1, #3
   19726:	0189      	lsls	r1, r1, #6
   19728:	f041 0102 	orr.w	r1, r1, #2
   1972c:	e7c8      	b.n	196c0 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1972e:	3301      	adds	r3, #1
   19730:	2b0d      	cmp	r3, #13
   19732:	d1da      	bne.n	196ea <bt_att_recv+0x46>
   19734:	4b2c      	ldr	r3, [pc, #176]	; (197e8 <bt_att_recv+0x144>)
   19736:	4a2b      	ldr	r2, [pc, #172]	; (197e4 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   19738:	482f      	ldr	r0, [pc, #188]	; (197f8 <bt_att_recv+0x154>)
   1973a:	1ad2      	subs	r2, r2, r3
   1973c:	08d2      	lsrs	r2, r2, #3
   1973e:	0192      	lsls	r2, r2, #6
   19740:	f042 0202 	orr.w	r2, r2, #2
   19744:	f006 fb5c 	bl	1fe00 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   19748:	7829      	ldrb	r1, [r5, #0]
   1974a:	4608      	mov	r0, r1
   1974c:	f007 fae2 	bl	20d14 <att_op_get_type>
   19750:	2800      	cmp	r0, #0
   19752:	d0b7      	beq.n	196c4 <bt_att_recv+0x20>
	if (!req) {
   19754:	2900      	cmp	r1, #0
   19756:	d0b5      	beq.n	196c4 <bt_att_recv+0x20>
   19758:	2306      	movs	r3, #6
   1975a:	2200      	movs	r2, #0
   1975c:	4630      	mov	r0, r6
   1975e:	f007 fd2e 	bl	211be <send_err_rsp.part.0>
   19762:	e7af      	b.n	196c4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   19764:	2f05      	cmp	r7, #5
   19766:	d117      	bne.n	19798 <bt_att_recv+0xf4>
   19768:	f3bf 8f5b 	dmb	ish
   1976c:	34b8      	adds	r4, #184	; 0xb8
   1976e:	e854 3f00 	ldrex	r3, [r4]
   19772:	f043 0202 	orr.w	r2, r3, #2
   19776:	e844 2100 	strex	r1, r2, [r4]
   1977a:	2900      	cmp	r1, #0
   1977c:	d1f7      	bne.n	1976e <bt_att_recv+0xca>
   1977e:	f3bf 8f5b 	dmb	ish
   19782:	079b      	lsls	r3, r3, #30
   19784:	d508      	bpl.n	19798 <bt_att_recv+0xf4>
   19786:	4917      	ldr	r1, [pc, #92]	; (197e4 <bt_att_recv+0x140>)
   19788:	4b17      	ldr	r3, [pc, #92]	; (197e8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   1978a:	481c      	ldr	r0, [pc, #112]	; (197fc <bt_att_recv+0x158>)
   1978c:	1ac9      	subs	r1, r1, r3
   1978e:	08c9      	lsrs	r1, r1, #3
   19790:	0189      	lsls	r1, r1, #6
   19792:	f041 0102 	orr.w	r1, r1, #2
   19796:	e793      	b.n	196c0 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   19798:	eb0c 0300 	add.w	r3, ip, r0
   1979c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   197a0:	785a      	ldrb	r2, [r3, #1]
   197a2:	428a      	cmp	r2, r1
   197a4:	d90e      	bls.n	197c4 <bt_att_recv+0x120>
   197a6:	4a10      	ldr	r2, [pc, #64]	; (197e8 <bt_att_recv+0x144>)
   197a8:	4b0e      	ldr	r3, [pc, #56]	; (197e4 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   197aa:	4815      	ldr	r0, [pc, #84]	; (19800 <bt_att_recv+0x15c>)
   197ac:	1a9b      	subs	r3, r3, r2
   197ae:	08db      	lsrs	r3, r3, #3
   197b0:	019b      	lsls	r3, r3, #6
   197b2:	782a      	ldrb	r2, [r5, #0]
   197b4:	f043 0301 	orr.w	r3, r3, #1
   197b8:	f006 fb36 	bl	1fe28 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   197bc:	2f01      	cmp	r7, #1
   197be:	d181      	bne.n	196c4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   197c0:	2304      	movs	r3, #4
   197c2:	e00a      	b.n	197da <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   197c4:	685b      	ldr	r3, [r3, #4]
   197c6:	4641      	mov	r1, r8
   197c8:	4630      	mov	r0, r6
   197ca:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   197cc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   197ce:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   197d0:	f47f af78 	bne.w	196c4 <bt_att_recv+0x20>
   197d4:	2800      	cmp	r0, #0
   197d6:	f43f af75 	beq.w	196c4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   197da:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   197dc:	2900      	cmp	r1, #0
   197de:	f43f af71 	beq.w	196c4 <bt_att_recv+0x20>
   197e2:	e7ba      	b.n	1975a <bt_att_recv+0xb6>
   197e4:	00022cf8 	.word	0x00022cf8
   197e8:	00022cf0 	.word	0x00022cf0
   197ec:	00024c61 	.word	0x00024c61
   197f0:	000230e0 	.word	0x000230e0
   197f4:	00024c7c 	.word	0x00024c7c
   197f8:	00024cd6 	.word	0x00024cd6
   197fc:	00024c98 	.word	0x00024c98
   19800:	00024cb7 	.word	0x00024cb7

00019804 <att_write_req>:
{
   19804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19808:	4604      	mov	r4, r0
   1980a:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1980c:	f101 0008 	add.w	r0, r1, #8
   19810:	460d      	mov	r5, r1
   19812:	f008 f954 	bl	21abe <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19816:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   19818:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1981c:	89ad      	ldrh	r5, [r5, #12]
   1981e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19820:	2101      	movs	r1, #1
   19822:	6818      	ldr	r0, [r3, #0]
   19824:	f008 f86b 	bl	218fe <bt_gatt_change_aware>
   19828:	2800      	cmp	r0, #0
   1982a:	d03f      	beq.n	198ac <att_write_req+0xa8>
	if (!handle) {
   1982c:	2e00      	cmp	r6, #0
   1982e:	d03f      	beq.n	198b0 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   19830:	2218      	movs	r2, #24
   19832:	2100      	movs	r1, #0
   19834:	4668      	mov	r0, sp
   19836:	f006 ff28 	bl	2068a <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1983a:	2200      	movs	r2, #0
   1983c:	2113      	movs	r1, #19
   1983e:	4620      	mov	r0, r4
   19840:	f7ff feec 	bl	1961c <bt_att_chan_create_pdu>
   19844:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   19846:	b378      	cbz	r0, 198a8 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   19848:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1984a:	4a1a      	ldr	r2, [pc, #104]	; (198b4 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   1984c:	681b      	ldr	r3, [r3, #0]
   1984e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19850:	2301      	movs	r3, #1
   19852:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   19856:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1985a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1985c:	466b      	mov	r3, sp
   1985e:	4631      	mov	r1, r6
   19860:	4630      	mov	r0, r6
	data.len = len;
   19862:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   19866:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1986a:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1986e:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19872:	f007 fa7c 	bl	20d6e <bt_gatt_foreach_attr>
	if (data.err) {
   19876:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1987a:	b175      	cbz	r5, 1989a <att_write_req+0x96>
			net_buf_unref(data.buf);
   1987c:	9801      	ldr	r0, [sp, #4]
   1987e:	f001 fa5f 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19882:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19886:	4632      	mov	r2, r6
   19888:	4641      	mov	r1, r8
   1988a:	4620      	mov	r0, r4
   1988c:	f007 fc97 	bl	211be <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   19890:	463d      	mov	r5, r7
}
   19892:	4628      	mov	r0, r5
   19894:	b007      	add	sp, #28
   19896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1989a:	9901      	ldr	r1, [sp, #4]
   1989c:	2900      	cmp	r1, #0
   1989e:	d0f8      	beq.n	19892 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   198a0:	4620      	mov	r0, r4
   198a2:	f7ff fe3d 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
   198a6:	e7f4      	b.n	19892 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   198a8:	250e      	movs	r5, #14
   198aa:	e7f2      	b.n	19892 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   198ac:	2512      	movs	r5, #18
   198ae:	e7f0      	b.n	19892 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   198b0:	2501      	movs	r5, #1
   198b2:	e7ee      	b.n	19892 <att_write_req+0x8e>
   198b4:	0002108b 	.word	0x0002108b

000198b8 <bt_att_create_pdu>:
{
   198b8:	b570      	push	{r4, r5, r6, lr}
   198ba:	460e      	mov	r6, r1
   198bc:	4615      	mov	r5, r2
	att = att_get(conn);
   198be:	f7ff fd75 	bl	193ac <att_get>
	if (!att) {
   198c2:	b1c0      	cbz	r0, 198f6 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   198c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   198c6:	1c69      	adds	r1, r5, #1
   198c8:	b15b      	cbz	r3, 198e2 <bt_att_create_pdu+0x2a>
   198ca:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   198ce:	d008      	beq.n	198e2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   198d0:	681b      	ldr	r3, [r3, #0]
   198d2:	b10b      	cbz	r3, 198d8 <bt_att_create_pdu+0x20>
   198d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   198d8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
   198dc:	4291      	cmp	r1, r2
   198de:	d90c      	bls.n	198fa <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   198e0:	b98b      	cbnz	r3, 19906 <bt_att_create_pdu+0x4e>
   198e2:	4a0e      	ldr	r2, [pc, #56]	; (1991c <bt_att_create_pdu+0x64>)
   198e4:	4b0e      	ldr	r3, [pc, #56]	; (19920 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   198e6:	480f      	ldr	r0, [pc, #60]	; (19924 <bt_att_create_pdu+0x6c>)
   198e8:	1ad2      	subs	r2, r2, r3
   198ea:	08d2      	lsrs	r2, r2, #3
   198ec:	0192      	lsls	r2, r2, #6
   198ee:	f042 0202 	orr.w	r2, r2, #2
   198f2:	f006 fa85 	bl	1fe00 <log_1>
}
   198f6:	2000      	movs	r0, #0
   198f8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   198fa:	462a      	mov	r2, r5
   198fc:	4631      	mov	r1, r6
}
   198fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19902:	f7ff be8b 	b.w	1961c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19906:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1990a:	d004      	beq.n	19916 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1990c:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19910:	b10c      	cbz	r4, 19916 <bt_att_create_pdu+0x5e>
   19912:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   19916:	4618      	mov	r0, r3
   19918:	4623      	mov	r3, r4
   1991a:	e7dd      	b.n	198d8 <bt_att_create_pdu+0x20>
   1991c:	00022cf8 	.word	0x00022cf8
   19920:	00022cf0 	.word	0x00022cf0
   19924:	00024cf0 	.word	0x00024cf0

00019928 <att_read_group_req>:
{
   19928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1992c:	7b0c      	ldrb	r4, [r1, #12]
   1992e:	3c04      	subs	r4, #4
   19930:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19932:	2c02      	cmp	r4, #2
{
   19934:	4605      	mov	r5, r0
   19936:	b08c      	sub	sp, #48	; 0x30
   19938:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1993a:	d001      	beq.n	19940 <att_read_group_req+0x18>
   1993c:	2c10      	cmp	r4, #16
   1993e:	d16e      	bne.n	19a1e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   19940:	2104      	movs	r1, #4
   19942:	3008      	adds	r0, #8
   19944:	f008 f8b3 	bl	21aae <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19948:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1994c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1994e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19950:	1d01      	adds	r1, r0, #4
   19952:	4622      	mov	r2, r4
   19954:	4640      	mov	r0, r8
   19956:	f006 fee7 	bl	20728 <bt_uuid_create>
   1995a:	2800      	cmp	r0, #0
   1995c:	d061      	beq.n	19a22 <att_read_group_req+0xfa>
	if (!start || !end) {
   1995e:	2e00      	cmp	r6, #0
   19960:	d03a      	beq.n	199d8 <att_read_group_req+0xb0>
   19962:	2400      	movs	r4, #0
   19964:	2f00      	cmp	r7, #0
   19966:	d036      	beq.n	199d6 <att_read_group_req+0xae>
	if (start > end) {
   19968:	42be      	cmp	r6, r7
   1996a:	d835      	bhi.n	199d8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1996c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19970:	a901      	add	r1, sp, #4
   19972:	4640      	mov	r0, r8
   19974:	f88d 4004 	strb.w	r4, [sp, #4]
   19978:	f8ad 3006 	strh.w	r3, [sp, #6]
   1997c:	f006 feaa 	bl	206d4 <bt_uuid_cmp>
   19980:	2800      	cmp	r0, #0
   19982:	d134      	bne.n	199ee <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   19984:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19986:	2214      	movs	r2, #20
   19988:	2100      	movs	r1, #0
   1998a:	a807      	add	r0, sp, #28
   1998c:	f006 fe7d 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19990:	2201      	movs	r2, #1
   19992:	2111      	movs	r1, #17
   19994:	4620      	mov	r0, r4
   19996:	f7ff ff8f 	bl	198b8 <bt_att_create_pdu>
   1999a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1999c:	2800      	cmp	r0, #0
   1999e:	d040      	beq.n	19a22 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   199a0:	2101      	movs	r1, #1
   199a2:	3008      	adds	r0, #8
	data.uuid = uuid;
   199a4:	e9cd 5807 	strd	r5, r8, [sp, #28]
   199a8:	f008 f85a 	bl	21a60 <net_buf_simple_add>
	data.rsp->len = 0U;
   199ac:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   199b0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   199b2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   199b4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   199b8:	4a1b      	ldr	r2, [pc, #108]	; (19a28 <att_read_group_req+0x100>)
	data.group = NULL;
   199ba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   199be:	4639      	mov	r1, r7
   199c0:	4630      	mov	r0, r6
   199c2:	f007 f9d4 	bl	20d6e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   199c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   199c8:	781c      	ldrb	r4, [r3, #0]
   199ca:	bb1c      	cbnz	r4, 19a14 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   199cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   199ce:	f001 f9b7 	bl	1ad40 <net_buf_unref>
	if (!req) {
   199d2:	230a      	movs	r3, #10
   199d4:	e018      	b.n	19a08 <att_read_group_req+0xe0>
			*err = 0U;
   199d6:	463e      	mov	r6, r7
	if (!req) {
   199d8:	2301      	movs	r3, #1
   199da:	4632      	mov	r2, r6
   199dc:	2110      	movs	r1, #16
   199de:	4628      	mov	r0, r5
   199e0:	f007 fbed 	bl	211be <send_err_rsp.part.0>
		return 0;
   199e4:	2400      	movs	r4, #0
}
   199e6:	4620      	mov	r0, r4
   199e8:	b00c      	add	sp, #48	; 0x30
   199ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   199ee:	f642 0301 	movw	r3, #10241	; 0x2801
   199f2:	a907      	add	r1, sp, #28
   199f4:	4640      	mov	r0, r8
   199f6:	f88d 401c 	strb.w	r4, [sp, #28]
   199fa:	f8ad 301e 	strh.w	r3, [sp, #30]
   199fe:	f006 fe69 	bl	206d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19a02:	2800      	cmp	r0, #0
   19a04:	d0be      	beq.n	19984 <att_read_group_req+0x5c>
	if (!req) {
   19a06:	2310      	movs	r3, #16
   19a08:	4632      	mov	r2, r6
   19a0a:	2110      	movs	r1, #16
   19a0c:	4628      	mov	r0, r5
   19a0e:	f007 fbd6 	bl	211be <send_err_rsp.part.0>
		return 0;
   19a12:	e7e8      	b.n	199e6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19a14:	9909      	ldr	r1, [sp, #36]	; 0x24
   19a16:	4628      	mov	r0, r5
   19a18:	f7ff fd82 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19a1c:	e7e2      	b.n	199e4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   19a1e:	2404      	movs	r4, #4
   19a20:	e7e1      	b.n	199e6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   19a22:	240e      	movs	r4, #14
   19a24:	e7df      	b.n	199e6 <att_read_group_req+0xbe>
   19a26:	bf00      	nop
   19a28:	00019009 	.word	0x00019009

00019a2c <att_read_mult_req>:
{
   19a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19a30:	6886      	ldr	r6, [r0, #8]
{
   19a32:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   19a34:	2210      	movs	r2, #16
{
   19a36:	4604      	mov	r4, r0
   19a38:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   19a3a:	4668      	mov	r0, sp
   19a3c:	2100      	movs	r1, #0
   19a3e:	f006 fe24 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19a42:	2200      	movs	r2, #0
   19a44:	210f      	movs	r1, #15
   19a46:	4630      	mov	r0, r6
   19a48:	f7ff ff36 	bl	198b8 <bt_att_create_pdu>
   19a4c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19a4e:	b358      	cbz	r0, 19aa8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19a50:	f8df 9058 	ldr.w	r9, [pc, #88]	; 19aac <att_read_mult_req+0x80>
	data.chan = chan;
   19a54:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19a56:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a5a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19a5e:	89ab      	ldrh	r3, [r5, #12]
   19a60:	2b01      	cmp	r3, #1
   19a62:	d804      	bhi.n	19a6e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19a64:	9902      	ldr	r1, [sp, #8]
   19a66:	4620      	mov	r0, r4
   19a68:	f7ff fd5a 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
   19a6c:	e018      	b.n	19aa0 <att_read_mult_req+0x74>
   19a6e:	4638      	mov	r0, r7
   19a70:	f008 f825 	bl	21abe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19a74:	466b      	mov	r3, sp
   19a76:	464a      	mov	r2, r9
   19a78:	4601      	mov	r1, r0
   19a7a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a7c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19a80:	f007 f975 	bl	20d6e <bt_gatt_foreach_attr>
		if (data.err) {
   19a84:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a88:	2b00      	cmp	r3, #0
   19a8a:	d0e8      	beq.n	19a5e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   19a8c:	9802      	ldr	r0, [sp, #8]
   19a8e:	f001 f957 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19a92:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a96:	4632      	mov	r2, r6
   19a98:	210e      	movs	r1, #14
   19a9a:	4620      	mov	r0, r4
   19a9c:	f007 fb8f 	bl	211be <send_err_rsp.part.0>
	return 0;
   19aa0:	2000      	movs	r0, #0
}
   19aa2:	b005      	add	sp, #20
   19aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   19aa8:	200e      	movs	r0, #14
   19aaa:	e7fa      	b.n	19aa2 <att_read_mult_req+0x76>
   19aac:	0002116b 	.word	0x0002116b

00019ab0 <att_read_rsp>:
{
   19ab0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19ab4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   19ab8:	4605      	mov	r5, r0
   19aba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19abc:	4640      	mov	r0, r8
   19abe:	2101      	movs	r1, #1
{
   19ac0:	4614      	mov	r4, r2
   19ac2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19ac4:	f007 ff1b 	bl	218fe <bt_gatt_change_aware>
   19ac8:	b388      	cbz	r0, 19b2e <att_read_rsp+0x7e>
	if (!handle) {
   19aca:	b396      	cbz	r6, 19b32 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   19acc:	2210      	movs	r2, #16
   19ace:	2100      	movs	r1, #0
   19ad0:	4668      	mov	r0, sp
   19ad2:	f006 fdda 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19ad6:	2200      	movs	r2, #0
   19ad8:	4621      	mov	r1, r4
   19ada:	4640      	mov	r0, r8
   19adc:	f7ff feec 	bl	198b8 <bt_att_create_pdu>
   19ae0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19ae2:	b340      	cbz	r0, 19b36 <att_read_rsp+0x86>
	data.offset = offset;
   19ae4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19ae8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19aec:	2301      	movs	r3, #1
   19aee:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19af2:	4a12      	ldr	r2, [pc, #72]	; (19b3c <att_read_rsp+0x8c>)
	data.chan = chan;
   19af4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19af6:	466b      	mov	r3, sp
   19af8:	4631      	mov	r1, r6
   19afa:	4630      	mov	r0, r6
   19afc:	f007 f937 	bl	20d6e <bt_gatt_foreach_attr>
	if (data.err) {
   19b00:	f89d 400c 	ldrb.w	r4, [sp, #12]
   19b04:	b174      	cbz	r4, 19b24 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   19b06:	9802      	ldr	r0, [sp, #8]
   19b08:	f001 f91a 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19b0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b10:	4632      	mov	r2, r6
   19b12:	4639      	mov	r1, r7
   19b14:	4628      	mov	r0, r5
   19b16:	f007 fb52 	bl	211be <send_err_rsp.part.0>
		return 0;
   19b1a:	2400      	movs	r4, #0
}
   19b1c:	4620      	mov	r0, r4
   19b1e:	b004      	add	sp, #16
   19b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19b24:	9902      	ldr	r1, [sp, #8]
   19b26:	4628      	mov	r0, r5
   19b28:	f7ff fcfa 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19b2c:	e7f6      	b.n	19b1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19b2e:	2412      	movs	r4, #18
   19b30:	e7f4      	b.n	19b1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19b32:	2401      	movs	r4, #1
   19b34:	e7f2      	b.n	19b1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19b36:	240e      	movs	r4, #14
   19b38:	e7f0      	b.n	19b1c <att_read_rsp+0x6c>
   19b3a:	bf00      	nop
   19b3c:	0002116b 	.word	0x0002116b

00019b40 <att_read_type_req>:
{
   19b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19b44:	7b0c      	ldrb	r4, [r1, #12]
   19b46:	3c04      	subs	r4, #4
   19b48:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19b4a:	2c02      	cmp	r4, #2
{
   19b4c:	4605      	mov	r5, r0
   19b4e:	b08c      	sub	sp, #48	; 0x30
   19b50:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19b52:	d001      	beq.n	19b58 <att_read_type_req+0x18>
   19b54:	2c10      	cmp	r4, #16
   19b56:	d14f      	bne.n	19bf8 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   19b58:	2104      	movs	r1, #4
   19b5a:	3008      	adds	r0, #8
   19b5c:	f007 ffa7 	bl	21aae <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19b60:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19b64:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19b66:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19b68:	1d01      	adds	r1, r0, #4
   19b6a:	4622      	mov	r2, r4
   19b6c:	4640      	mov	r0, r8
   19b6e:	f006 fddb 	bl	20728 <bt_uuid_create>
   19b72:	b188      	cbz	r0, 19b98 <att_read_type_req+0x58>
	if (!start || !end) {
   19b74:	b19e      	cbz	r6, 19b9e <att_read_type_req+0x5e>
   19b76:	b18f      	cbz	r7, 19b9c <att_read_type_req+0x5c>
	if (start > end) {
   19b78:	42b7      	cmp	r7, r6
   19b7a:	d310      	bcc.n	19b9e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19b7c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19b7e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19b80:	2100      	movs	r1, #0
   19b82:	eb0d 0002 	add.w	r0, sp, r2
   19b86:	f006 fd80 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19b8a:	2201      	movs	r2, #1
   19b8c:	2109      	movs	r1, #9
   19b8e:	4620      	mov	r0, r4
   19b90:	f7ff fe92 	bl	198b8 <bt_att_create_pdu>
   19b94:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19b96:	b968      	cbnz	r0, 19bb4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19b98:	240e      	movs	r4, #14
   19b9a:	e007      	b.n	19bac <att_read_type_req+0x6c>
			*err = 0U;
   19b9c:	463e      	mov	r6, r7
	if (!req) {
   19b9e:	2301      	movs	r3, #1
   19ba0:	4632      	mov	r2, r6
   19ba2:	2108      	movs	r1, #8
   19ba4:	4628      	mov	r0, r5
   19ba6:	f007 fb0a 	bl	211be <send_err_rsp.part.0>
		return 0;
   19baa:	2400      	movs	r4, #0
}
   19bac:	4620      	mov	r0, r4
   19bae:	b00c      	add	sp, #48	; 0x30
   19bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19bb4:	2101      	movs	r1, #1
   19bb6:	3008      	adds	r0, #8
	data.uuid = uuid;
   19bb8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   19bbc:	f007 ff50 	bl	21a60 <net_buf_simple_add>
	data.rsp->len = 0U;
   19bc0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19bc4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19bc6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19bc8:	4a0c      	ldr	r2, [pc, #48]	; (19bfc <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   19bca:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19bce:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19bd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19bd4:	4630      	mov	r0, r6
   19bd6:	ab06      	add	r3, sp, #24
   19bd8:	f007 f8c9 	bl	20d6e <bt_gatt_foreach_attr>
	if (data.err) {
   19bdc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19be0:	b12c      	cbz	r4, 19bee <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   19be2:	9808      	ldr	r0, [sp, #32]
   19be4:	f001 f8ac 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19be8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19bec:	e7d8      	b.n	19ba0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19bee:	9908      	ldr	r1, [sp, #32]
   19bf0:	4628      	mov	r0, r5
   19bf2:	f7ff fc95 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19bf6:	e7d9      	b.n	19bac <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19bf8:	2404      	movs	r4, #4
   19bfa:	e7d7      	b.n	19bac <att_read_type_req+0x6c>
   19bfc:	000190b5 	.word	0x000190b5

00019c00 <att_find_type_req>:
{
   19c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c04:	4688      	mov	r8, r1
   19c06:	b086      	sub	sp, #24
   19c08:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19c0a:	2106      	movs	r1, #6
   19c0c:	f108 0008 	add.w	r0, r8, #8
   19c10:	f007 ff4d 	bl	21aae <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19c14:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   19c16:	b317      	cbz	r7, 19c5e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19c18:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19c1c:	f1b9 0f00 	cmp.w	r9, #0
   19c20:	d01c      	beq.n	19c5c <att_find_type_req+0x5c>
	if (start > end) {
   19c22:	454f      	cmp	r7, r9
   19c24:	d81b      	bhi.n	19c5e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   19c26:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19c28:	f8ad 3002 	strh.w	r3, [sp, #2]
   19c2c:	2400      	movs	r4, #0
   19c2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19c32:	a901      	add	r1, sp, #4
   19c34:	4668      	mov	r0, sp
	value = buf->data;
   19c36:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19c3a:	f88d 4000 	strb.w	r4, [sp]
   19c3e:	f88d 4004 	strb.w	r4, [sp, #4]
   19c42:	f8ad 3006 	strh.w	r3, [sp, #6]
   19c46:	f006 fd45 	bl	206d4 <bt_uuid_cmp>
   19c4a:	4606      	mov	r6, r0
   19c4c:	b190      	cbz	r0, 19c74 <att_find_type_req+0x74>
	if (!req) {
   19c4e:	230a      	movs	r3, #10
   19c50:	463a      	mov	r2, r7
   19c52:	2106      	movs	r1, #6
   19c54:	4628      	mov	r0, r5
   19c56:	f007 fab2 	bl	211be <send_err_rsp.part.0>
		return 0;
   19c5a:	e007      	b.n	19c6c <att_find_type_req+0x6c>
			*err = 0U;
   19c5c:	464f      	mov	r7, r9
	if (!req) {
   19c5e:	2301      	movs	r3, #1
   19c60:	463a      	mov	r2, r7
   19c62:	2106      	movs	r1, #6
   19c64:	4628      	mov	r0, r5
   19c66:	f007 faaa 	bl	211be <send_err_rsp.part.0>
		return 0;
   19c6a:	2400      	movs	r4, #0
}
   19c6c:	4620      	mov	r0, r4
   19c6e:	b006      	add	sp, #24
   19c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19c74:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19c78:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19c7c:	4601      	mov	r1, r0
   19c7e:	2214      	movs	r2, #20
   19c80:	a801      	add	r0, sp, #4
   19c82:	f006 fd02 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19c86:	4632      	mov	r2, r6
   19c88:	2107      	movs	r1, #7
   19c8a:	4640      	mov	r0, r8
   19c8c:	f7ff fe14 	bl	198b8 <bt_att_create_pdu>
   19c90:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19c92:	b1d8      	cbz	r0, 19ccc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19c94:	230a      	movs	r3, #10
   19c96:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19c9a:	4a0d      	ldr	r2, [pc, #52]	; (19cd0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   19c9c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19ca0:	ab01      	add	r3, sp, #4
   19ca2:	4649      	mov	r1, r9
   19ca4:	4638      	mov	r0, r7
	data.value = value;
   19ca6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19caa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19cac:	f007 f85f 	bl	20d6e <bt_gatt_foreach_attr>
	if (data.err) {
   19cb0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19cb4:	b12c      	cbz	r4, 19cc2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   19cb6:	9802      	ldr	r0, [sp, #8]
   19cb8:	f001 f842 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19cbc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19cc0:	e7ce      	b.n	19c60 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19cc2:	9902      	ldr	r1, [sp, #8]
   19cc4:	4628      	mov	r0, r5
   19cc6:	f7ff fc2b 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19cca:	e7cf      	b.n	19c6c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19ccc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19cce:	e7cd      	b.n	19c6c <att_find_type_req+0x6c>
   19cd0:	0001915d 	.word	0x0001915d

00019cd4 <att_find_info_req>:
{
   19cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   19cd6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   19cd8:	881e      	ldrh	r6, [r3, #0]
{
   19cda:	b085      	sub	sp, #20
   19cdc:	4605      	mov	r5, r0
	if (!start || !end) {
   19cde:	b19e      	cbz	r6, 19d08 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19ce0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19ce2:	b184      	cbz	r4, 19d06 <att_find_info_req+0x32>
	if (start > end) {
   19ce4:	42b4      	cmp	r4, r6
   19ce6:	d30f      	bcc.n	19d08 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   19ce8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19cea:	2210      	movs	r2, #16
   19cec:	2100      	movs	r1, #0
   19cee:	4668      	mov	r0, sp
   19cf0:	f006 fccb 	bl	2068a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19cf4:	2200      	movs	r2, #0
   19cf6:	2105      	movs	r1, #5
   19cf8:	4638      	mov	r0, r7
   19cfa:	f7ff fddd 	bl	198b8 <bt_att_create_pdu>
   19cfe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19d00:	b958      	cbnz	r0, 19d1a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19d02:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19d04:	e007      	b.n	19d16 <att_find_info_req+0x42>
			*err = 0U;
   19d06:	4626      	mov	r6, r4
	if (!req) {
   19d08:	2301      	movs	r3, #1
   19d0a:	4632      	mov	r2, r6
   19d0c:	2104      	movs	r1, #4
   19d0e:	4628      	mov	r0, r5
   19d10:	f007 fa55 	bl	211be <send_err_rsp.part.0>
	return 0;
   19d14:	2000      	movs	r0, #0
}
   19d16:	b005      	add	sp, #20
   19d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19d1a:	4621      	mov	r1, r4
   19d1c:	4a08      	ldr	r2, [pc, #32]	; (19d40 <att_find_info_req+0x6c>)
	data.chan = chan;
   19d1e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19d20:	466b      	mov	r3, sp
   19d22:	4630      	mov	r0, r6
   19d24:	f007 f823 	bl	20d6e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19d28:	9c02      	ldr	r4, [sp, #8]
   19d2a:	b924      	cbnz	r4, 19d36 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   19d2c:	9801      	ldr	r0, [sp, #4]
   19d2e:	f001 f807 	bl	1ad40 <net_buf_unref>
	if (!req) {
   19d32:	230a      	movs	r3, #10
   19d34:	e7e9      	b.n	19d0a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19d36:	9901      	ldr	r1, [sp, #4]
   19d38:	4628      	mov	r0, r5
   19d3a:	f7ff fbf1 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
   19d3e:	e7e9      	b.n	19d14 <att_find_info_req+0x40>
   19d40:	00020e9b 	.word	0x00020e9b

00019d44 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19d44:	b513      	push	{r0, r1, r4, lr}
   19d46:	4602      	mov	r2, r0
   19d48:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19d4a:	4808      	ldr	r0, [pc, #32]	; (19d6c <bt_att_req_alloc+0x28>)
   19d4c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   19d4e:	2400      	movs	r4, #0
   19d50:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19d52:	f003 fbd5 	bl	1d500 <k_mem_slab_alloc>
   19d56:	4601      	mov	r1, r0
   19d58:	b930      	cbnz	r0, 19d68 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19d5a:	9801      	ldr	r0, [sp, #4]
   19d5c:	2218      	movs	r2, #24
   19d5e:	f006 fc94 	bl	2068a <memset>

	return req;
   19d62:	9801      	ldr	r0, [sp, #4]
}
   19d64:	b002      	add	sp, #8
   19d66:	bd10      	pop	{r4, pc}
		return NULL;
   19d68:	4620      	mov	r0, r4
   19d6a:	e7fb      	b.n	19d64 <bt_att_req_alloc+0x20>
   19d6c:	200008a8 	.word	0x200008a8

00019d70 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19d70:	b507      	push	{r0, r1, r2, lr}
   19d72:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   19d74:	a901      	add	r1, sp, #4
   19d76:	4803      	ldr	r0, [pc, #12]	; (19d84 <bt_att_req_free+0x14>)
   19d78:	f003 fbf4 	bl	1d564 <k_mem_slab_free>
}
   19d7c:	b003      	add	sp, #12
   19d7e:	f85d fb04 	ldr.w	pc, [sp], #4
   19d82:	bf00      	nop
   19d84:	200008a8 	.word	0x200008a8

00019d88 <att_handle_rsp>:
{
   19d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d8c:	4605      	mov	r5, r0
   19d8e:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   19d90:	30e0      	adds	r0, #224	; 0xe0
{
   19d92:	4689      	mov	r9, r1
   19d94:	4692      	mov	sl, r2
   19d96:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   19d98:	f008 fc4c 	bl	22634 <k_delayed_work_cancel>
	if (!chan->req) {
   19d9c:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
   19da0:	bb64      	cbnz	r4, 19dfc <att_handle_rsp+0x74>
   19da2:	4932      	ldr	r1, [pc, #200]	; (19e6c <att_handle_rsp+0xe4>)
   19da4:	4b32      	ldr	r3, [pc, #200]	; (19e70 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
   19da6:	4833      	ldr	r0, [pc, #204]	; (19e74 <att_handle_rsp+0xec>)
   19da8:	1ac9      	subs	r1, r1, r3
   19daa:	08c9      	lsrs	r1, r1, #3
   19dac:	0189      	lsls	r1, r1, #6
   19dae:	f041 0102 	orr.w	r1, r1, #2
   19db2:	f006 f818 	bl	1fde6 <log_0>
	att_process(chan->att);
   19db6:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
   19dba:	f10b 0004 	add.w	r0, fp, #4
   19dbe:	f006 ff64 	bl	20c8a <sys_slist_get>
	if (!node) {
   19dc2:	4607      	mov	r7, r0
   19dc4:	2800      	cmp	r0, #0
   19dc6:	d039      	beq.n	19e3c <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19dc8:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   19dcc:	b15a      	cbz	r2, 19de6 <att_handle_rsp+0x5e>
   19dce:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
   19dd2:	d008      	beq.n	19de6 <att_handle_rsp+0x5e>
   19dd4:	6816      	ldr	r6, [r2, #0]
   19dd6:	b10e      	cbz	r6, 19ddc <att_handle_rsp+0x54>
   19dd8:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   19ddc:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   19de0:	b33a      	cbz	r2, 19e32 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19de2:	2e00      	cmp	r6, #0
   19de4:	d137      	bne.n	19e56 <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
   19de6:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   19dea:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   19dec:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   19df0:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   19df4:	bb12      	cbnz	r2, 19e3c <att_handle_rsp+0xb4>
	list->tail = node;
   19df6:	f8cb 7008 	str.w	r7, [fp, #8]
}
   19dfa:	e01f      	b.n	19e3c <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
   19dfc:	4b1e      	ldr	r3, [pc, #120]	; (19e78 <att_handle_rsp+0xf0>)
   19dfe:	429c      	cmp	r4, r3
   19e00:	d103      	bne.n	19e0a <att_handle_rsp+0x82>
		chan->req = NULL;
   19e02:	2400      	movs	r4, #0
   19e04:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
   19e08:	e7d5      	b.n	19db6 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
   19e0a:	6920      	ldr	r0, [r4, #16]
   19e0c:	b128      	cbz	r0, 19e1a <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
   19e0e:	f000 ff97 	bl	1ad40 <net_buf_unref>
		chan->req->buf = NULL;
   19e12:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   19e16:	2200      	movs	r2, #0
   19e18:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
   19e1a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
   19e1e:	2600      	movs	r6, #0
	func = chan->req->func;
   19e20:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
   19e22:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
   19e24:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   19e26:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   19e28:	f007 fa33 	bl	21292 <att_req_destroy>
	chan->req = NULL;
   19e2c:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
   19e30:	e7c1      	b.n	19db6 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   19e32:	4639      	mov	r1, r7
   19e34:	f007 f8eb 	bl	2100e <bt_att_chan_req_send>
   19e38:	2800      	cmp	r0, #0
   19e3a:	dbd2      	blt.n	19de2 <att_handle_rsp+0x5a>
	if (func) {
   19e3c:	b13c      	cbz	r4, 19e4e <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
   19e3e:	9b03      	ldr	r3, [sp, #12]
   19e40:	6828      	ldr	r0, [r5, #0]
   19e42:	9300      	str	r3, [sp, #0]
   19e44:	6800      	ldr	r0, [r0, #0]
   19e46:	4653      	mov	r3, sl
   19e48:	464a      	mov	r2, r9
   19e4a:	4641      	mov	r1, r8
   19e4c:	47a0      	blx	r4
}
   19e4e:	2000      	movs	r0, #0
   19e50:	b005      	add	sp, #20
   19e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   19e56:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
   19e5a:	d004      	beq.n	19e66 <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19e5c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19e60:	b10a      	cbz	r2, 19e66 <att_handle_rsp+0xde>
   19e62:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
   19e66:	4630      	mov	r0, r6
   19e68:	4616      	mov	r6, r2
   19e6a:	e7b7      	b.n	19ddc <att_handle_rsp+0x54>
   19e6c:	00022cf8 	.word	0x00022cf8
   19e70:	00022cf0 	.word	0x00022cf0
   19e74:	00024d0b 	.word	0x00024d0b
   19e78:	20002be4 	.word	0x20002be4

00019e7c <att_reset>:
{
   19e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19e7e:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19e80:	9803      	ldr	r0, [sp, #12]
   19e82:	2200      	movs	r2, #0
   19e84:	2300      	movs	r3, #0
   19e86:	300c      	adds	r0, #12
   19e88:	f007 fd99 	bl	219be <net_buf_get>
   19e8c:	b948      	cbnz	r0, 19ea2 <att_reset+0x26>
	att->conn = NULL;
   19e8e:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19e90:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   19e92:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19e94:	b945      	cbnz	r5, 19ea8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   19e96:	4811      	ldr	r0, [pc, #68]	; (19edc <att_reset+0x60>)
   19e98:	a903      	add	r1, sp, #12
   19e9a:	f003 fb63 	bl	1d564 <k_mem_slab_free>
}
   19e9e:	b004      	add	sp, #16
   19ea0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   19ea2:	f000 ff4d 	bl	1ad40 <net_buf_unref>
   19ea6:	e7eb      	b.n	19e80 <att_reset+0x4>
	return node->next;
   19ea8:	682c      	ldr	r4, [r5, #0]
   19eaa:	2c00      	cmp	r4, #0
   19eac:	bf38      	it	cc
   19eae:	2400      	movcc	r4, #0
		if (req->func) {
   19eb0:	686e      	ldr	r6, [r5, #4]
   19eb2:	b136      	cbz	r6, 19ec2 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19eb4:	696b      	ldr	r3, [r5, #20]
   19eb6:	9300      	str	r3, [sp, #0]
   19eb8:	2300      	movs	r3, #0
   19eba:	461a      	mov	r2, r3
   19ebc:	210e      	movs	r1, #14
   19ebe:	4618      	mov	r0, r3
   19ec0:	47b0      	blx	r6
		att_req_destroy(req);
   19ec2:	4628      	mov	r0, r5
   19ec4:	f007 f9e5 	bl	21292 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19ec8:	2c00      	cmp	r4, #0
   19eca:	d0e4      	beq.n	19e96 <att_reset+0x1a>
   19ecc:	6823      	ldr	r3, [r4, #0]
   19ece:	2b00      	cmp	r3, #0
   19ed0:	bf38      	it	cc
   19ed2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19ed4:	4625      	mov	r5, r4
   19ed6:	461c      	mov	r4, r3
   19ed8:	e7ea      	b.n	19eb0 <att_reset+0x34>
   19eda:	bf00      	nop
   19edc:	20000870 	.word	0x20000870

00019ee0 <att_timeout>:
   19ee0:	4b0e      	ldr	r3, [pc, #56]	; (19f1c <att_timeout+0x3c>)
   19ee2:	490f      	ldr	r1, [pc, #60]	; (19f20 <att_timeout+0x40>)
{
   19ee4:	b570      	push	{r4, r5, r6, lr}
   19ee6:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
   19ee8:	4605      	mov	r5, r0
   19eea:	08c9      	lsrs	r1, r1, #3
   19eec:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
   19ef0:	0189      	lsls	r1, r1, #6
   19ef2:	f041 0101 	orr.w	r1, r1, #1
{
   19ef6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19ef8:	480a      	ldr	r0, [pc, #40]	; (19f24 <att_timeout+0x44>)
   19efa:	f005 ff74 	bl	1fde6 <log_0>
	att_chan_detach(chan);
   19efe:	4628      	mov	r0, r5
   19f00:	f007 f9db 	bl	212ba <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   19f04:	6a75      	ldr	r5, [r6, #36]	; 0x24
   19f06:	b945      	cbnz	r5, 19f1a <att_timeout+0x3a>
	att_reset(att);
   19f08:	4630      	mov	r0, r6
   19f0a:	f7ff ffb7 	bl	19e7c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   19f0e:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   19f12:	f000 fe07 	bl	1ab24 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   19f16:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   19f1a:	bd70      	pop	{r4, r5, r6, pc}
   19f1c:	00022cf0 	.word	0x00022cf0
   19f20:	00022cf8 	.word	0x00022cf8
   19f24:	00024d22 	.word	0x00024d22

00019f28 <gatt_send.constprop.0>:
	if (params->destroy && (params->_ref == 0)) {
		params->destroy(params);
	}
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   19f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f2c:	4606      	mov	r6, r0
   19f2e:	4688      	mov	r8, r1
   19f30:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
   19f32:	461c      	mov	r4, r3
   19f34:	b34b      	cbz	r3, 19f8a <gatt_send.constprop.0+0x62>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19f36:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   19f3a:	2100      	movs	r1, #0
   19f3c:	f7ff ff02 	bl	19d44 <bt_att_req_alloc>
		if (!req) {
   19f40:	4605      	mov	r5, r0
   19f42:	b920      	cbnz	r0, 19f4e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   19f44:	f06f 040b 	mvn.w	r4, #11
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
   19f48:	4620      	mov	r0, r4
   19f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   19f4e:	2300      	movs	r3, #0
		req->user_data = params;
   19f50:	6144      	str	r4, [r0, #20]
		req->buf = buf;
   19f52:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   19f56:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   19f58:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   19f5a:	4601      	mov	r1, r0
   19f5c:	4630      	mov	r0, r6
   19f5e:	f007 fa38 	bl	213d2 <bt_att_req_send>
		if (err) {
   19f62:	4604      	mov	r4, r0
   19f64:	2800      	cmp	r0, #0
   19f66:	d0ef      	beq.n	19f48 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   19f68:	4628      	mov	r0, r5
   19f6a:	f7ff ff01 	bl	19d70 <bt_att_req_free>
	if (err) {
   19f6e:	2c00      	cmp	r4, #0
   19f70:	d0ea      	beq.n	19f48 <gatt_send.constprop.0+0x20>
   19f72:	4b08      	ldr	r3, [pc, #32]	; (19f94 <gatt_send.constprop.0+0x6c>)
   19f74:	4a08      	ldr	r2, [pc, #32]	; (19f98 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
   19f76:	4809      	ldr	r0, [pc, #36]	; (19f9c <gatt_send.constprop.0+0x74>)
   19f78:	1ad2      	subs	r2, r2, r3
   19f7a:	08d2      	lsrs	r2, r2, #3
   19f7c:	0192      	lsls	r2, r2, #6
   19f7e:	f042 0201 	orr.w	r2, r2, #1
   19f82:	4621      	mov	r1, r4
   19f84:	f005 ff3c 	bl	1fe00 <log_1>
   19f88:	e7de      	b.n	19f48 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   19f8a:	461a      	mov	r2, r3
   19f8c:	f007 f9cd 	bl	2132a <bt_att_send>
   19f90:	4604      	mov	r4, r0
   19f92:	e7ec      	b.n	19f6e <gatt_send.constprop.0+0x46>
   19f94:	00022cf0 	.word	0x00022cf0
   19f98:	00022d10 	.word	0x00022d10
   19f9c:	00024d35 	.word	0x00024d35

00019fa0 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   19fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fa4:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
   19fa6:	8a92      	ldrh	r2, [r2, #20]
{
   19fa8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   19faa:	3202      	adds	r2, #2
   19fac:	211d      	movs	r1, #29
{
   19fae:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   19fb0:	f7ff fc82 	bl	198b8 <bt_att_create_pdu>
	if (!buf) {
   19fb4:	4605      	mov	r5, r0
   19fb6:	b1e8      	cbz	r0, 19ff4 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   19fb8:	f100 0808 	add.w	r8, r0, #8
   19fbc:	2102      	movs	r1, #2
   19fbe:	4640      	mov	r0, r8
   19fc0:	f007 fd4e 	bl	21a60 <net_buf_simple_add>
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
	ind->handle = sys_cpu_to_le16(handle);
   19fc4:	4606      	mov	r6, r0
   19fc6:	8aa1      	ldrh	r1, [r4, #20]
   19fc8:	f826 9b02 	strh.w	r9, [r6], #2
   19fcc:	4640      	mov	r0, r8
   19fce:	f007 fd47 	bl	21a60 <net_buf_simple_add>

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);
   19fd2:	8aa2      	ldrh	r2, [r4, #20]
   19fd4:	6921      	ldr	r1, [r4, #16]
   19fd6:	4630      	mov	r0, r6
   19fd8:	f006 fb2c 	bl	20634 <memcpy>

	if (!params->func) {
   19fdc:	68a3      	ldr	r3, [r4, #8]
   19fde:	b933      	cbnz	r3, 19fee <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   19fe0:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   19fe2:	4629      	mov	r1, r5
   19fe4:	4638      	mov	r0, r7
}
   19fe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   19fea:	f7ff bf9d 	b.w	19f28 <gatt_send.constprop.0>
   19fee:	4a08      	ldr	r2, [pc, #32]	; (1a010 <gatt_indicate+0x70>)
   19ff0:	4623      	mov	r3, r4
   19ff2:	e7f6      	b.n	19fe2 <gatt_indicate+0x42>
   19ff4:	4b07      	ldr	r3, [pc, #28]	; (1a014 <gatt_indicate+0x74>)
   19ff6:	4908      	ldr	r1, [pc, #32]	; (1a018 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
   19ff8:	4808      	ldr	r0, [pc, #32]	; (1a01c <gatt_indicate+0x7c>)
   19ffa:	1ac9      	subs	r1, r1, r3
   19ffc:	08c9      	lsrs	r1, r1, #3
   19ffe:	0189      	lsls	r1, r1, #6
   1a000:	f041 0102 	orr.w	r1, r1, #2
   1a004:	f005 feef 	bl	1fde6 <log_0>
}
   1a008:	f06f 000b 	mvn.w	r0, #11
   1a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a010:	00021459 	.word	0x00021459
   1a014:	00022cf0 	.word	0x00022cf0
   1a018:	00022d10 	.word	0x00022d10
   1a01c:	00024d4f 	.word	0x00024d4f

0001a020 <find_sc_cfg>:
{
   1a020:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1a022:	4c06      	ldr	r4, [pc, #24]	; (1a03c <find_sc_cfg+0x1c>)
   1a024:	7823      	ldrb	r3, [r4, #0]
   1a026:	4283      	cmp	r3, r0
   1a028:	d104      	bne.n	1a034 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   1a02a:	2207      	movs	r2, #7
   1a02c:	1c60      	adds	r0, r4, #1
   1a02e:	f006 fada 	bl	205e6 <memcmp>
   1a032:	b108      	cbz	r0, 1a038 <find_sc_cfg+0x18>
	return NULL;
   1a034:	2000      	movs	r0, #0
}
   1a036:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1a038:	4620      	mov	r0, r4
   1a03a:	e7fc      	b.n	1a036 <find_sc_cfg+0x16>
   1a03c:	20003692 	.word	0x20003692

0001a040 <find_cf_cfg>:
{
   1a040:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a042:	4d0d      	ldr	r5, [pc, #52]	; (1a078 <find_cf_cfg+0x38>)
		if (!conn) {
   1a044:	4604      	mov	r4, r0
   1a046:	b968      	cbnz	r0, 1a064 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a048:	9000      	str	r0, [sp, #0]
   1a04a:	2207      	movs	r2, #7
   1a04c:	f8cd 0003 	str.w	r0, [sp, #3]
   1a050:	4669      	mov	r1, sp
   1a052:	1c68      	adds	r0, r5, #1
   1a054:	f006 fac7 	bl	205e6 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a058:	2800      	cmp	r0, #0
   1a05a:	bf08      	it	eq
   1a05c:	462c      	moveq	r4, r5
}
   1a05e:	4620      	mov	r0, r4
   1a060:	b003      	add	sp, #12
   1a062:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a064:	462a      	mov	r2, r5
   1a066:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a06a:	f006 fce4 	bl	20a36 <bt_conn_is_peer_addr_le>
   1a06e:	2800      	cmp	r0, #0
	return NULL;
   1a070:	bf14      	ite	ne
   1a072:	462c      	movne	r4, r5
   1a074:	2400      	moveq	r4, #0
   1a076:	e7f2      	b.n	1a05e <find_cf_cfg+0x1e>
   1a078:	20002bfc 	.word	0x20002bfc

0001a07c <bt_gatt_attr_write_ccc>:
{
   1a07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a080:	461f      	mov	r7, r3
   1a082:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a086:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1a08a:	4606      	mov	r6, r0
   1a08c:	4688      	mov	r8, r1
	if (offset) {
   1a08e:	2b00      	cmp	r3, #0
   1a090:	d153      	bne.n	1a13a <bt_gatt_attr_write_ccc+0xbe>
	if (!len || len > sizeof(uint16_t)) {
   1a092:	1e7b      	subs	r3, r7, #1
   1a094:	2b01      	cmp	r3, #1
   1a096:	d853      	bhi.n	1a140 <bt_gatt_attr_write_ccc+0xc4>
	if (len < sizeof(uint16_t)) {
   1a098:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1a09a:	7815      	ldrb	r5, [r2, #0]
   1a09c:	bf18      	it	ne
   1a09e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1a0a0:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1a0a2:	bf0c      	ite	eq
   1a0a4:	b2ad      	uxtheq	r5, r5
   1a0a6:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1a0aa:	f007 fa5d 	bl	21568 <find_ccc_cfg>
	if (!cfg) {
   1a0ae:	4604      	mov	r4, r0
   1a0b0:	b9f0      	cbnz	r0, 1a0f0 <bt_gatt_attr_write_ccc+0x74>
		if (!value) {
   1a0b2:	b91d      	cbnz	r5, 1a0bc <bt_gatt_attr_write_ccc+0x40>
			return len;
   1a0b4:	4638      	mov	r0, r7
}
   1a0b6:	b003      	add	sp, #12
   1a0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a0bc:	4649      	mov	r1, r9
   1a0be:	f007 fa53 	bl	21568 <find_ccc_cfg>
		if (!cfg) {
   1a0c2:	4604      	mov	r4, r0
   1a0c4:	b960      	cbnz	r0, 1a0e0 <bt_gatt_attr_write_ccc+0x64>
   1a0c6:	4b20      	ldr	r3, [pc, #128]	; (1a148 <bt_gatt_attr_write_ccc+0xcc>)
   1a0c8:	4920      	ldr	r1, [pc, #128]	; (1a14c <bt_gatt_attr_write_ccc+0xd0>)
			BT_WARN("No space to store CCC cfg");
   1a0ca:	4821      	ldr	r0, [pc, #132]	; (1a150 <bt_gatt_attr_write_ccc+0xd4>)
   1a0cc:	1ac9      	subs	r1, r1, r3
   1a0ce:	08c9      	lsrs	r1, r1, #3
   1a0d0:	0189      	lsls	r1, r1, #6
   1a0d2:	f041 0102 	orr.w	r1, r1, #2
   1a0d6:	f005 fe86 	bl	1fde6 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a0da:	f06f 0010 	mvn.w	r0, #16
   1a0de:	e7ea      	b.n	1a0b6 <bt_gatt_attr_write_ccc+0x3a>
	memcpy(dst, src, sizeof(*dst));
   1a0e0:	2207      	movs	r2, #7
   1a0e2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a0e6:	3001      	adds	r0, #1
   1a0e8:	f006 faa4 	bl	20634 <memcpy>
		cfg->id = conn->id;
   1a0ec:	7a33      	ldrb	r3, [r6, #8]
   1a0ee:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1a0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1a0f4:	b9ab      	cbnz	r3, 1a122 <bt_gatt_attr_write_ccc+0xa6>
	if (cfg->value != ccc->value) {
   1a0f6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1a0fa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1a0fc:	42ab      	cmp	r3, r5
   1a0fe:	d003      	beq.n	1a108 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1a100:	4649      	mov	r1, r9
   1a102:	4640      	mov	r0, r8
   1a104:	f007 f99e 	bl	21444 <gatt_ccc_changed>
	if (!value) {
   1a108:	2d00      	cmp	r5, #0
   1a10a:	d1d3      	bne.n	1a0b4 <bt_gatt_attr_write_ccc+0x38>
   1a10c:	2207      	movs	r2, #7
   1a10e:	4669      	mov	r1, sp
   1a110:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a112:	9500      	str	r5, [sp, #0]
   1a114:	f8cd 5003 	str.w	r5, [sp, #3]
   1a118:	f006 fa8c 	bl	20634 <memcpy>
	cfg->id = 0U;
   1a11c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a11e:	8125      	strh	r5, [r4, #8]
}
   1a120:	e7c8      	b.n	1a0b4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a122:	462a      	mov	r2, r5
   1a124:	4641      	mov	r1, r8
   1a126:	4630      	mov	r0, r6
   1a128:	4798      	blx	r3
		if (write < 0) {
   1a12a:	2800      	cmp	r0, #0
   1a12c:	dbc3      	blt.n	1a0b6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1a12e:	3801      	subs	r0, #1
   1a130:	2801      	cmp	r0, #1
   1a132:	d9e0      	bls.n	1a0f6 <bt_gatt_attr_write_ccc+0x7a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a134:	f06f 000d 	mvn.w	r0, #13
   1a138:	e7bd      	b.n	1a0b6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a13a:	f06f 0006 	mvn.w	r0, #6
   1a13e:	e7ba      	b.n	1a0b6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a140:	f06f 000c 	mvn.w	r0, #12
   1a144:	e7b7      	b.n	1a0b6 <bt_gatt_attr_write_ccc+0x3a>
   1a146:	bf00      	nop
   1a148:	00022cf0 	.word	0x00022cf0
   1a14c:	00022d10 	.word	0x00022d10
   1a150:	00024d76 	.word	0x00024d76

0001a154 <sc_indicate_rsp>:
{
   1a154:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a156:	4915      	ldr	r1, [pc, #84]	; (1a1ac <sc_indicate_rsp+0x58>)
   1a158:	f3bf 8f5b 	dmb	ish
   1a15c:	4604      	mov	r4, r0
   1a15e:	f101 0350 	add.w	r3, r1, #80	; 0x50
   1a162:	e853 2f00 	ldrex	r2, [r3]
   1a166:	f022 0202 	bic.w	r2, r2, #2
   1a16a:	e843 2000 	strex	r0, r2, [r3]
   1a16e:	2800      	cmp	r0, #0
   1a170:	d1f7      	bne.n	1a162 <sc_indicate_rsp+0xe>
   1a172:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a176:	f3bf 8f5b 	dmb	ish
   1a17a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1a17c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a180:	07da      	lsls	r2, r3, #31
   1a182:	d505      	bpl.n	1a190 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a184:	480a      	ldr	r0, [pc, #40]	; (1a1b0 <sc_indicate_rsp+0x5c>)
   1a186:	2200      	movs	r2, #0
   1a188:	2300      	movs	r3, #0
   1a18a:	3120      	adds	r1, #32
   1a18c:	f004 f806 	bl	1e19c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   1a190:	4620      	mov	r0, r4
   1a192:	f7ff ff55 	bl	1a040 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a196:	b140      	cbz	r0, 1a1aa <sc_indicate_rsp+0x56>
   1a198:	7a03      	ldrb	r3, [r0, #8]
   1a19a:	07db      	lsls	r3, r3, #31
   1a19c:	d505      	bpl.n	1a1aa <sc_indicate_rsp+0x56>
}
   1a19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a1a2:	2100      	movs	r1, #0
   1a1a4:	300c      	adds	r0, #12
   1a1a6:	f007 b9c3 	b.w	21530 <atomic_set_bit>
}
   1a1aa:	bd10      	pop	{r4, pc}
   1a1ac:	200021a0 	.word	0x200021a0
   1a1b0:	200024d0 	.word	0x200024d0

0001a1b4 <gatt_notify>:
{
   1a1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a1b8:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1a1ba:	8992      	ldrh	r2, [r2, #12]
{
   1a1bc:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a1be:	3202      	adds	r2, #2
   1a1c0:	211b      	movs	r1, #27
{
   1a1c2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a1c4:	f7ff fb78 	bl	198b8 <bt_att_create_pdu>
	if (!buf) {
   1a1c8:	4605      	mov	r5, r0
   1a1ca:	b1c8      	cbz	r0, 1a200 <gatt_notify+0x4c>
   1a1cc:	f100 0908 	add.w	r9, r0, #8
   1a1d0:	2102      	movs	r1, #2
   1a1d2:	4648      	mov	r0, r9
   1a1d4:	f007 fc44 	bl	21a60 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a1d8:	4606      	mov	r6, r0
   1a1da:	89a1      	ldrh	r1, [r4, #12]
   1a1dc:	f826 8b02 	strh.w	r8, [r6], #2
   1a1e0:	4648      	mov	r0, r9
   1a1e2:	f007 fc3d 	bl	21a60 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a1e6:	89a2      	ldrh	r2, [r4, #12]
   1a1e8:	68a1      	ldr	r1, [r4, #8]
   1a1ea:	4630      	mov	r0, r6
   1a1ec:	f006 fa22 	bl	20634 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a1f0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1a1f4:	4629      	mov	r1, r5
   1a1f6:	4638      	mov	r0, r7
}
   1a1f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a1fc:	f007 b895 	b.w	2132a <bt_att_send>
   1a200:	4b06      	ldr	r3, [pc, #24]	; (1a21c <gatt_notify+0x68>)
   1a202:	4907      	ldr	r1, [pc, #28]	; (1a220 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
   1a204:	4807      	ldr	r0, [pc, #28]	; (1a224 <gatt_notify+0x70>)
   1a206:	1ac9      	subs	r1, r1, r3
   1a208:	08c9      	lsrs	r1, r1, #3
   1a20a:	0189      	lsls	r1, r1, #6
   1a20c:	f041 0102 	orr.w	r1, r1, #2
   1a210:	f005 fde9 	bl	1fde6 <log_0>
}
   1a214:	f06f 000b 	mvn.w	r0, #11
   1a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a21c:	00022cf0 	.word	0x00022cf0
   1a220:	00022d10 	.word	0x00022d10
   1a224:	00024d90 	.word	0x00024d90

0001a228 <cf_write>:
{
   1a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a22c:	461f      	mov	r7, r3
   1a22e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a232:	2b01      	cmp	r3, #1
{
   1a234:	4680      	mov	r8, r0
   1a236:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1a238:	d848      	bhi.n	1a2cc <cf_write+0xa4>
	if (offset + len > sizeof(cfg->data)) {
   1a23a:	443b      	add	r3, r7
   1a23c:	2b01      	cmp	r3, #1
   1a23e:	463d      	mov	r5, r7
   1a240:	dc47      	bgt.n	1a2d2 <cf_write+0xaa>
	cfg = find_cf_cfg(conn);
   1a242:	f7ff fefd 	bl	1a040 <find_cf_cfg>
	if (!cfg) {
   1a246:	4604      	mov	r4, r0
   1a248:	b990      	cbnz	r0, 1a270 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1a24a:	f7ff fef9 	bl	1a040 <find_cf_cfg>
	if (!cfg) {
   1a24e:	4604      	mov	r4, r0
   1a250:	b970      	cbnz	r0, 1a270 <cf_write+0x48>
   1a252:	4b23      	ldr	r3, [pc, #140]	; (1a2e0 <cf_write+0xb8>)
   1a254:	4923      	ldr	r1, [pc, #140]	; (1a2e4 <cf_write+0xbc>)
		BT_WARN("No space to store Client Supported Features");
   1a256:	4824      	ldr	r0, [pc, #144]	; (1a2e8 <cf_write+0xc0>)
   1a258:	1ac9      	subs	r1, r1, r3
   1a25a:	08c9      	lsrs	r1, r1, #3
   1a25c:	0189      	lsls	r1, r1, #6
   1a25e:	f041 0102 	orr.w	r1, r1, #2
   1a262:	f005 fdc0 	bl	1fde6 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a266:	f06f 0510 	mvn.w	r5, #16
}
   1a26a:	4628      	mov	r0, r5
   1a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   1a270:	4632      	mov	r2, r6
   1a272:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1a276:	4562      	cmp	r2, ip
   1a278:	d115      	bne.n	1a2a6 <cf_write+0x7e>
	for (i = 0U; i < len && i < last_byte; i++) {
   1a27a:	b12f      	cbz	r7, 1a288 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1a27c:	7833      	ldrb	r3, [r6, #0]
   1a27e:	7a22      	ldrb	r2, [r4, #8]
   1a280:	f003 0307 	and.w	r3, r3, #7
   1a284:	4313      	orrs	r3, r2
   1a286:	7223      	strb	r3, [r4, #8]
   1a288:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1a28c:	2207      	movs	r2, #7
   1a28e:	1c60      	adds	r0, r4, #1
   1a290:	f006 f9d0 	bl	20634 <memcpy>
	cfg->id = conn->id;
   1a294:	4620      	mov	r0, r4
   1a296:	f898 3008 	ldrb.w	r3, [r8, #8]
   1a29a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a29e:	2100      	movs	r1, #0
   1a2a0:	f007 f946 	bl	21530 <atomic_set_bit>
	return len;
   1a2a4:	e7e1      	b.n	1a26a <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1a2a6:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a2aa:	7a20      	ldrb	r0, [r4, #8]
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   1a2b0:	fa21 fe03 	lsr.w	lr, r1, r3
   1a2b4:	f01e 0f01 	tst.w	lr, #1
   1a2b8:	d004      	beq.n	1a2c4 <cf_write+0x9c>
   1a2ba:	fa20 fe03 	lsr.w	lr, r0, r3
   1a2be:	f01e 0f01 	tst.w	lr, #1
   1a2c2:	d109      	bne.n	1a2d8 <cf_write+0xb0>
		for (bit = 0U; bit <= last_bit; bit++) {
   1a2c4:	3301      	adds	r3, #1
   1a2c6:	2b03      	cmp	r3, #3
   1a2c8:	d1f2      	bne.n	1a2b0 <cf_write+0x88>
   1a2ca:	e7d4      	b.n	1a276 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a2cc:	f06f 0506 	mvn.w	r5, #6
   1a2d0:	e7cb      	b.n	1a26a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a2d2:	f06f 050c 	mvn.w	r5, #12
   1a2d6:	e7c8      	b.n	1a26a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a2d8:	f06f 0512 	mvn.w	r5, #18
   1a2dc:	e7c5      	b.n	1a26a <cf_write+0x42>
   1a2de:	bf00      	nop
   1a2e0:	00022cf0 	.word	0x00022cf0
   1a2e4:	00022d10 	.word	0x00022d10
   1a2e8:	00024db9 	.word	0x00024db9

0001a2ec <read_ppcp>:
{
   1a2ec:	b513      	push	{r0, r1, r4, lr}
   1a2ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1a2f2:	4c0b      	ldr	r4, [pc, #44]	; (1a320 <read_ppcp+0x34>)
{
   1a2f4:	4610      	mov	r0, r2
	if (offset > value_len) {
   1a2f6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1a2f8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1a2fc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1a300:	d80b      	bhi.n	1a31a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1a302:	f1c1 0408 	rsb	r4, r1, #8
   1a306:	429c      	cmp	r4, r3
   1a308:	bfa8      	it	ge
   1a30a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a30c:	4622      	mov	r2, r4
   1a30e:	4469      	add	r1, sp
   1a310:	f006 f990 	bl	20634 <memcpy>
}
   1a314:	4620      	mov	r0, r4
   1a316:	b002      	add	sp, #8
   1a318:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a31a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1a31e:	e7f9      	b.n	1a314 <read_ppcp+0x28>
   1a320:	00280018 	.word	0x00280018

0001a324 <sc_save>:
{
   1a324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a328:	4680      	mov	r8, r0
   1a32a:	460f      	mov	r7, r1
   1a32c:	4616      	mov	r6, r2
   1a32e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a330:	f7ff fe76 	bl	1a020 <find_sc_cfg>
	if (!cfg) {
   1a334:	4604      	mov	r4, r0
   1a336:	b9d0      	cbnz	r0, 1a36e <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a338:	4669      	mov	r1, sp
   1a33a:	9000      	str	r0, [sp, #0]
   1a33c:	f8cd 0003 	str.w	r0, [sp, #3]
   1a340:	f7ff fe6e 	bl	1a020 <find_sc_cfg>
		if (!cfg) {
   1a344:	4604      	mov	r4, r0
   1a346:	b960      	cbnz	r0, 1a362 <sc_save+0x3e>
   1a348:	4910      	ldr	r1, [pc, #64]	; (1a38c <sc_save+0x68>)
   1a34a:	4b11      	ldr	r3, [pc, #68]	; (1a390 <sc_save+0x6c>)
			BT_ERR("unable to save SC: no cfg left");
   1a34c:	4811      	ldr	r0, [pc, #68]	; (1a394 <sc_save+0x70>)
   1a34e:	1ac9      	subs	r1, r1, r3
   1a350:	08c9      	lsrs	r1, r1, #3
   1a352:	0189      	lsls	r1, r1, #6
   1a354:	f041 0101 	orr.w	r1, r1, #1
   1a358:	f005 fd45 	bl	1fde6 <log_0>
}
   1a35c:	b002      	add	sp, #8
   1a35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a362:	f800 8b01 	strb.w	r8, [r0], #1
   1a366:	2207      	movs	r2, #7
   1a368:	4639      	mov	r1, r7
   1a36a:	f006 f963 	bl	20634 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a36e:	8922      	ldrh	r2, [r4, #8]
   1a370:	8963      	ldrh	r3, [r4, #10]
   1a372:	b91a      	cbnz	r2, 1a37c <sc_save+0x58>
   1a374:	b923      	cbnz	r3, 1a380 <sc_save+0x5c>
		cfg->data.start = start;
   1a376:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a378:	8165      	strh	r5, [r4, #10]
   1a37a:	e7ef      	b.n	1a35c <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1a37c:	4296      	cmp	r6, r2
   1a37e:	d302      	bcc.n	1a386 <sc_save+0x62>
   1a380:	429d      	cmp	r5, r3
   1a382:	d9eb      	bls.n	1a35c <sc_save+0x38>
   1a384:	e7f8      	b.n	1a378 <sc_save+0x54>
		*start = new_start;
   1a386:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a388:	e7fa      	b.n	1a380 <sc_save+0x5c>
   1a38a:	bf00      	nop
   1a38c:	00022d10 	.word	0x00022d10
   1a390:	00022cf0 	.word	0x00022cf0
   1a394:	00024de5 	.word	0x00024de5

0001a398 <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   1a398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a39a:	4b2e      	ldr	r3, [pc, #184]	; (1a454 <notify_cb+0xbc>)
{
   1a39c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a39e:	6882      	ldr	r2, [r0, #8]
   1a3a0:	429a      	cmp	r2, r3
{
   1a3a2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a3a4:	d12e      	bne.n	1a404 <notify_cb+0x6c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1a3a6:	68c7      	ldr	r7, [r0, #12]

	/* Save Service Changed data if peer is not connected */
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a3a8:	4b2b      	ldr	r3, [pc, #172]	; (1a458 <notify_cb+0xc0>)
   1a3aa:	429f      	cmp	r7, r3
   1a3ac:	d11a      	bne.n	1a3e4 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   1a3ae:	4d2b      	ldr	r5, [pc, #172]	; (1a45c <notify_cb+0xc4>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
			struct gatt_sc_cfg *cfg = &sc_cfg[i];
			struct bt_conn *conn;

			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a3b0:	2300      	movs	r3, #0
   1a3b2:	2207      	movs	r2, #7
   1a3b4:	4669      	mov	r1, sp
   1a3b6:	1c68      	adds	r0, r5, #1
   1a3b8:	9300      	str	r3, [sp, #0]
   1a3ba:	f8cd 3003 	str.w	r3, [sp, #3]
   1a3be:	f006 f912 	bl	205e6 <memcmp>
   1a3c2:	b178      	cbz	r0, 1a3e4 <notify_cb+0x4c>
				continue;
			}

			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a3c4:	4629      	mov	r1, r5
   1a3c6:	2207      	movs	r2, #7
   1a3c8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a3cc:	f7fe fa8a 	bl	188e4 <bt_conn_lookup_state_le>
						       BT_CONN_CONNECTED);
			if (!conn) {
   1a3d0:	b9d8      	cbnz	r0, 1a40a <notify_cb+0x72>
				struct sc_data *sc;

				sc = (struct sc_data *)data->ind_params->data;
   1a3d2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1a3d4:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1a3d6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a3d8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a3dc:	8853      	ldrh	r3, [r2, #2]
   1a3de:	8812      	ldrh	r2, [r2, #0]
   1a3e0:	f7ff ffa0 	bl	1a324 <sc_save>
		int err;

		/* Check if config value matches data type since consolidated
		 * value may be for a different peer.
		 */
		if (cfg->value != data->type) {
   1a3e4:	893a      	ldrh	r2, [r7, #8]
   1a3e6:	89a3      	ldrh	r3, [r4, #12]
   1a3e8:	429a      	cmp	r2, r3
   1a3ea:	d10b      	bne.n	1a404 <notify_cb+0x6c>
			continue;
		}

		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a3ec:	4639      	mov	r1, r7
   1a3ee:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a3f2:	f7fe fa33 	bl	1885c <bt_conn_lookup_addr_le>
		if (!conn) {
   1a3f6:	4605      	mov	r5, r0
   1a3f8:	b120      	cbz	r0, 1a404 <notify_cb+0x6c>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
   1a3fa:	7a83      	ldrb	r3, [r0, #10]
   1a3fc:	2b07      	cmp	r3, #7
   1a3fe:	d007      	beq.n	1a410 <notify_cb+0x78>
			continue;
		}

		/* Confirm match if cfg is managed by application */
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
			bt_conn_unref(conn);
   1a400:	f006 fb54 	bl	20aac <bt_conn_unref>
		}

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
   1a404:	2001      	movs	r0, #1
}
   1a406:	b003      	add	sp, #12
   1a408:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1a40a:	f006 fb4f 	bl	20aac <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a40e:	e7e9      	b.n	1a3e4 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a410:	697b      	ldr	r3, [r7, #20]
   1a412:	b123      	cbz	r3, 1a41e <notify_cb+0x86>
   1a414:	4631      	mov	r1, r6
   1a416:	4798      	blx	r3
   1a418:	b908      	cbnz	r0, 1a41e <notify_cb+0x86>
			bt_conn_unref(conn);
   1a41a:	4628      	mov	r0, r5
   1a41c:	e7f0      	b.n	1a400 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a41e:	89a3      	ldrh	r3, [r4, #12]
   1a420:	88a1      	ldrh	r1, [r4, #4]
   1a422:	6922      	ldr	r2, [r4, #16]
   1a424:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1a426:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a428:	d110      	bne.n	1a44c <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
   1a42a:	f7ff fdb9 	bl	19fa0 <gatt_indicate>
			if (err == 0) {
   1a42e:	4606      	mov	r6, r0
   1a430:	b918      	cbnz	r0, 1a43a <notify_cb+0xa2>
				data->ind_params->_ref++;
   1a432:	6922      	ldr	r2, [r4, #16]
   1a434:	7d93      	ldrb	r3, [r2, #22]
   1a436:	3301      	adds	r3, #1
   1a438:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1a43a:	4628      	mov	r0, r5
   1a43c:	f006 fb36 	bl	20aac <bt_conn_unref>
		if (err < 0) {
   1a440:	2e00      	cmp	r6, #0
   1a442:	f04f 0000 	mov.w	r0, #0
   1a446:	dbde      	blt.n	1a406 <notify_cb+0x6e>
		data->err = 0;
   1a448:	60a0      	str	r0, [r4, #8]
   1a44a:	e7db      	b.n	1a404 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a44c:	f7ff feb2 	bl	1a1b4 <gatt_notify>
   1a450:	4606      	mov	r6, r0
   1a452:	e7f2      	b.n	1a43a <notify_cb+0xa2>
   1a454:	0001a07d 	.word	0x0001a07d
   1a458:	200005fc 	.word	0x200005fc
   1a45c:	20003692 	.word	0x20003692

0001a460 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1a460:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a464:	4b24      	ldr	r3, [pc, #144]	; (1a4f8 <disconnected_cb+0x98>)
{
   1a466:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a468:	6882      	ldr	r2, [r0, #8]
   1a46a:	429a      	cmp	r2, r3
{
   1a46c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a46e:	d102      	bne.n	1a476 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1a470:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1a472:	8963      	ldrh	r3, [r4, #10]
   1a474:	bb13      	cbnz	r3, 1a4bc <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a476:	2001      	movs	r0, #1
   1a478:	b002      	add	sp, #8
   1a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a47e:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1a482:	7a28      	ldrb	r0, [r5, #8]
   1a484:	4641      	mov	r1, r8
   1a486:	f006 fa42 	bl	2090e <bt_addr_le_is_bonded>
   1a48a:	b988      	cbnz	r0, 1a4b0 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   1a48c:	4b1b      	ldr	r3, [pc, #108]	; (1a4fc <disconnected_cb+0x9c>)
   1a48e:	429c      	cmp	r4, r3
   1a490:	d102      	bne.n	1a498 <disconnected_cb+0x38>
					sc_clear(conn);
   1a492:	4628      	mov	r0, r5
   1a494:	f007 f947 	bl	21726 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a498:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1a49a:	2207      	movs	r2, #7
   1a49c:	4669      	mov	r1, sp
   1a49e:	4630      	mov	r0, r6
   1a4a0:	9500      	str	r5, [sp, #0]
   1a4a2:	f8cd 5003 	str.w	r5, [sp, #3]
   1a4a6:	f006 f8c5 	bl	20634 <memcpy>
	cfg->id = 0U;
   1a4aa:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a4ac:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   1a4ae:	e01a      	b.n	1a4e6 <disconnected_cb+0x86>
   1a4b0:	2207      	movs	r2, #7
   1a4b2:	4641      	mov	r1, r8
   1a4b4:	4630      	mov	r0, r6
   1a4b6:	f006 f8bd 	bl	20634 <memcpy>
   1a4ba:	e014      	b.n	1a4e6 <disconnected_cb+0x86>
		if (!cfg->value) {
   1a4bc:	8923      	ldrh	r3, [r4, #8]
   1a4be:	b193      	cbz	r3, 1a4e6 <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a4c0:	4626      	mov	r6, r4
   1a4c2:	4628      	mov	r0, r5
   1a4c4:	f816 1b01 	ldrb.w	r1, [r6], #1
   1a4c8:	4632      	mov	r2, r6
   1a4ca:	f006 fab4 	bl	20a36 <bt_conn_is_peer_addr_le>
   1a4ce:	2800      	cmp	r0, #0
   1a4d0:	d1d5      	bne.n	1a47e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a4d2:	7820      	ldrb	r0, [r4, #0]
   1a4d4:	4631      	mov	r1, r6
   1a4d6:	f7fe f9c1 	bl	1885c <bt_conn_lookup_addr_le>
			if (tmp) {
   1a4da:	b120      	cbz	r0, 1a4e6 <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a4dc:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1a4de:	f006 fae5 	bl	20aac <bt_conn_unref>
	if (!value_used) {
   1a4e2:	2d07      	cmp	r5, #7
   1a4e4:	d0c7      	beq.n	1a476 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1a4e6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a4e8:	2100      	movs	r1, #0
   1a4ea:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a4ec:	2b00      	cmp	r3, #0
   1a4ee:	d0c2      	beq.n	1a476 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a4f0:	4638      	mov	r0, r7
   1a4f2:	4798      	blx	r3
   1a4f4:	e7bf      	b.n	1a476 <disconnected_cb+0x16>
   1a4f6:	bf00      	nop
   1a4f8:	0001a07d 	.word	0x0001a07d
   1a4fc:	200005fc 	.word	0x200005fc

0001a500 <bt_gatt_init>:
{
   1a500:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a502:	4b22      	ldr	r3, [pc, #136]	; (1a58c <bt_gatt_init+0x8c>)
   1a504:	f3bf 8f5b 	dmb	ish
   1a508:	2201      	movs	r2, #1
   1a50a:	e853 1f00 	ldrex	r1, [r3]
   1a50e:	2900      	cmp	r1, #0
   1a510:	d103      	bne.n	1a51a <bt_gatt_init+0x1a>
   1a512:	e843 2000 	strex	r0, r2, [r3]
   1a516:	2800      	cmp	r0, #0
   1a518:	d1f7      	bne.n	1a50a <bt_gatt_init+0xa>
   1a51a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a51e:	d12e      	bne.n	1a57e <bt_gatt_init+0x7e>
   1a520:	f3bf 8f5b 	dmb	ish
   1a524:	4b1a      	ldr	r3, [pc, #104]	; (1a590 <bt_gatt_init+0x90>)
   1a526:	e853 1f00 	ldrex	r1, [r3]
   1a52a:	2900      	cmp	r1, #0
   1a52c:	d103      	bne.n	1a536 <bt_gatt_init+0x36>
   1a52e:	e843 2000 	strex	r0, r2, [r3]
   1a532:	2800      	cmp	r0, #0
   1a534:	d1f7      	bne.n	1a526 <bt_gatt_init+0x26>
   1a536:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a53a:	d108      	bne.n	1a54e <bt_gatt_init+0x4e>
   1a53c:	4a15      	ldr	r2, [pc, #84]	; (1a594 <bt_gatt_init+0x94>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a53e:	4916      	ldr	r1, [pc, #88]	; (1a598 <bt_gatt_init+0x98>)
   1a540:	8813      	ldrh	r3, [r2, #0]
   1a542:	4c16      	ldr	r4, [pc, #88]	; (1a59c <bt_gatt_init+0x9c>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1a544:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a546:	42a1      	cmp	r1, r4
   1a548:	d31a      	bcc.n	1a580 <bt_gatt_init+0x80>
   1a54a:	b100      	cbz	r0, 1a54e <bt_gatt_init+0x4e>
   1a54c:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a54e:	4c14      	ldr	r4, [pc, #80]	; (1a5a0 <bt_gatt_init+0xa0>)
   1a550:	2230      	movs	r2, #48	; 0x30
   1a552:	2100      	movs	r1, #0
   1a554:	4620      	mov	r0, r4
   1a556:	f006 f898 	bl	2068a <memset>
   1a55a:	4b12      	ldr	r3, [pc, #72]	; (1a5a4 <bt_gatt_init+0xa4>)
   1a55c:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a55e:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a560:	4c11      	ldr	r4, [pc, #68]	; (1a5a8 <bt_gatt_init+0xa8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a562:	4812      	ldr	r0, [pc, #72]	; (1a5ac <bt_gatt_init+0xac>)
   1a564:	2300      	movs	r3, #0
   1a566:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a56a:	f003 fe17 	bl	1e19c <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a56e:	2230      	movs	r2, #48	; 0x30
   1a570:	2100      	movs	r1, #0
   1a572:	f104 0020 	add.w	r0, r4, #32
   1a576:	f006 f888 	bl	2068a <memset>
   1a57a:	4b0d      	ldr	r3, [pc, #52]	; (1a5b0 <bt_gatt_init+0xb0>)
   1a57c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1a57e:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
   1a580:	6848      	ldr	r0, [r1, #4]
   1a582:	4403      	add	r3, r0
   1a584:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a586:	3108      	adds	r1, #8
   1a588:	2001      	movs	r0, #1
   1a58a:	e7dc      	b.n	1a546 <bt_gatt_init+0x46>
   1a58c:	20002c0c 	.word	0x20002c0c
   1a590:	20002c28 	.word	0x20002c28
   1a594:	20003690 	.word	0x20003690
   1a598:	00022cd8 	.word	0x00022cd8
   1a59c:	00022cf0 	.word	0x00022cf0
   1a5a0:	20002170 	.word	0x20002170
   1a5a4:	0002181f 	.word	0x0002181f
   1a5a8:	200021a0 	.word	0x200021a0
   1a5ac:	200024d0 	.word	0x200024d0
   1a5b0:	0001a95d 	.word	0x0001a95d

0001a5b4 <bt_gatt_attr_get_handle>:
{
   1a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a5b8:	4603      	mov	r3, r0
   1a5ba:	b148      	cbz	r0, 1a5d0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1a5bc:	8a00      	ldrh	r0, [r0, #16]
   1a5be:	b938      	cbnz	r0, 1a5d0 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a5c0:	4912      	ldr	r1, [pc, #72]	; (1a60c <bt_gatt_attr_get_handle+0x58>)
   1a5c2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1a610 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1a5c6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a5c8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a5cc:	4571      	cmp	r1, lr
   1a5ce:	d301      	bcc.n	1a5d4 <bt_gatt_attr_get_handle+0x20>
}
   1a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   1a5d4:	e9d1 7600 	ldrd	r7, r6, [r1]
   1a5d8:	42bb      	cmp	r3, r7
   1a5da:	d304      	bcc.n	1a5e6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a5dc:	fb0c 7206 	mla	r2, ip, r6, r7
   1a5e0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a5e2:	4293      	cmp	r3, r2
   1a5e4:	d90e      	bls.n	1a604 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1a5e6:	19a2      	adds	r2, r4, r6
   1a5e8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a5ea:	3108      	adds	r1, #8
   1a5ec:	4614      	mov	r4, r2
   1a5ee:	e7ed      	b.n	1a5cc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1a5f0:	fb0c 7805 	mla	r8, ip, r5, r7
   1a5f4:	4543      	cmp	r3, r8
   1a5f6:	d007      	beq.n	1a608 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a5f8:	3501      	adds	r5, #1
   1a5fa:	1962      	adds	r2, r4, r5
   1a5fc:	42b5      	cmp	r5, r6
   1a5fe:	b292      	uxth	r2, r2
   1a600:	d1f6      	bne.n	1a5f0 <bt_gatt_attr_get_handle+0x3c>
   1a602:	e7f2      	b.n	1a5ea <bt_gatt_attr_get_handle+0x36>
   1a604:	2500      	movs	r5, #0
   1a606:	e7f8      	b.n	1a5fa <bt_gatt_attr_get_handle+0x46>
   1a608:	4610      	mov	r0, r2
   1a60a:	e7e1      	b.n	1a5d0 <bt_gatt_attr_get_handle+0x1c>
   1a60c:	00022cd8 	.word	0x00022cd8
   1a610:	00022cf0 	.word	0x00022cf0

0001a614 <bt_gatt_foreach_attr_type>:
{
   1a614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a618:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a61c:	9100      	str	r1, [sp, #0]
   1a61e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a620:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a624:	2d00      	cmp	r5, #0
   1a626:	bf08      	it	eq
   1a628:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a62a:	4b24      	ldr	r3, [pc, #144]	; (1a6bc <bt_gatt_foreach_attr_type+0xa8>)
   1a62c:	881b      	ldrh	r3, [r3, #0]
   1a62e:	4283      	cmp	r3, r0
{
   1a630:	4607      	mov	r7, r0
   1a632:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a634:	d23c      	bcs.n	1a6b0 <bt_gatt_foreach_attr_type+0x9c>
}
   1a636:	b003      	add	sp, #12
   1a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a63c:	6873      	ldr	r3, [r6, #4]
   1a63e:	4423      	add	r3, r4
   1a640:	42bb      	cmp	r3, r7
   1a642:	d232      	bcs.n	1a6aa <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1a644:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a646:	3608      	adds	r6, #8
   1a648:	4b1d      	ldr	r3, [pc, #116]	; (1a6c0 <bt_gatt_foreach_attr_type+0xac>)
   1a64a:	429e      	cmp	r6, r3
   1a64c:	d3f6      	bcc.n	1a63c <bt_gatt_foreach_attr_type+0x28>
   1a64e:	e7f2      	b.n	1a636 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a650:	5889      	ldr	r1, [r1, r2]
   1a652:	9301      	str	r3, [sp, #4]
   1a654:	4640      	mov	r0, r8
   1a656:	f006 f83d 	bl	206d4 <bt_uuid_cmp>
   1a65a:	9b01      	ldr	r3, [sp, #4]
   1a65c:	b190      	cbz	r0, 1a684 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a65e:	3401      	adds	r4, #1
   1a660:	f10a 0a01 	add.w	sl, sl, #1
   1a664:	b2a4      	uxth	r4, r4
   1a666:	6873      	ldr	r3, [r6, #4]
   1a668:	4553      	cmp	r3, sl
   1a66a:	d9ec      	bls.n	1a646 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a66c:	9b00      	ldr	r3, [sp, #0]
   1a66e:	429c      	cmp	r4, r3
   1a670:	d8e1      	bhi.n	1a636 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a672:	42bc      	cmp	r4, r7
   1a674:	d3f3      	bcc.n	1a65e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a676:	6831      	ldr	r1, [r6, #0]
   1a678:	fb0b f20a 	mul.w	r2, fp, sl
   1a67c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a67e:	f1b8 0f00 	cmp.w	r8, #0
   1a682:	d1e5      	bne.n	1a650 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1a684:	f1b9 0f00 	cmp.w	r9, #0
   1a688:	d10b      	bne.n	1a6a2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1a68a:	3d01      	subs	r5, #1
   1a68c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a68e:	4618      	mov	r0, r3
   1a690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a694:	4621      	mov	r1, r4
   1a696:	4798      	blx	r3
	if (!*num_matches) {
   1a698:	2d00      	cmp	r5, #0
   1a69a:	d0cc      	beq.n	1a636 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a69c:	2800      	cmp	r0, #0
   1a69e:	d1de      	bne.n	1a65e <bt_gatt_foreach_attr_type+0x4a>
   1a6a0:	e7c9      	b.n	1a636 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a6a2:	68da      	ldr	r2, [r3, #12]
   1a6a4:	4591      	cmp	r9, r2
   1a6a6:	d1da      	bne.n	1a65e <bt_gatt_foreach_attr_type+0x4a>
   1a6a8:	e7ef      	b.n	1a68a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a6aa:	f04f 0a00 	mov.w	sl, #0
   1a6ae:	e7da      	b.n	1a666 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a6b0:	4e04      	ldr	r6, [pc, #16]	; (1a6c4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1a6b2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a6b4:	f04f 0b14 	mov.w	fp, #20
   1a6b8:	e7c6      	b.n	1a648 <bt_gatt_foreach_attr_type+0x34>
   1a6ba:	bf00      	nop
   1a6bc:	20003690 	.word	0x20003690
   1a6c0:	00022cf0 	.word	0x00022cf0
   1a6c4:	00022cd8 	.word	0x00022cd8

0001a6c8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1a6c8:	b510      	push	{r4, lr}
   1a6ca:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   1a6cc:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a6ce:	aa1c      	add	r2, sp, #112	; 0x70
   1a6d0:	4669      	mov	r1, sp
   1a6d2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1a6d4:	e9cd 3300 	strd	r3, r3, [sp]
   1a6d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a6dc:	f005 fe6f 	bl	203be <tc_cmac_setup>
   1a6e0:	b958      	cbnz	r0, 1a6fa <db_hash_gen.isra.0+0x32>
   1a6e2:	4917      	ldr	r1, [pc, #92]	; (1a740 <db_hash_gen.isra.0+0x78>)
   1a6e4:	4b17      	ldr	r3, [pc, #92]	; (1a744 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
   1a6e6:	4818      	ldr	r0, [pc, #96]	; (1a748 <db_hash_gen.isra.0+0x80>)
   1a6e8:	1ac9      	subs	r1, r1, r3
   1a6ea:	08c9      	lsrs	r1, r1, #3
   1a6ec:	0189      	lsls	r1, r1, #6
   1a6ee:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1a6f2:	f005 fb78 	bl	1fde6 <log_0>
}
   1a6f6:	b048      	add	sp, #288	; 0x120
   1a6f8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a6fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a6fe:	2001      	movs	r0, #1
   1a700:	4a12      	ldr	r2, [pc, #72]	; (1a74c <db_hash_gen.isra.0+0x84>)
   1a702:	ab04      	add	r3, sp, #16
   1a704:	f007 f880 	bl	21808 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1a708:	4811      	ldr	r0, [pc, #68]	; (1a750 <db_hash_gen.isra.0+0x88>)
   1a70a:	a904      	add	r1, sp, #16
   1a70c:	f005 feee 	bl	204ec <tc_cmac_final>
   1a710:	b940      	cbnz	r0, 1a724 <db_hash_gen.isra.0+0x5c>
   1a712:	490b      	ldr	r1, [pc, #44]	; (1a740 <db_hash_gen.isra.0+0x78>)
   1a714:	4b0b      	ldr	r3, [pc, #44]	; (1a744 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
   1a716:	480f      	ldr	r0, [pc, #60]	; (1a754 <db_hash_gen.isra.0+0x8c>)
   1a718:	1ac9      	subs	r1, r1, r3
   1a71a:	08c9      	lsrs	r1, r1, #3
   1a71c:	0189      	lsls	r1, r1, #6
   1a71e:	f041 0101 	orr.w	r1, r1, #1
   1a722:	e7e6      	b.n	1a6f2 <db_hash_gen.isra.0+0x2a>
   1a724:	4b0a      	ldr	r3, [pc, #40]	; (1a750 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1a726:	2208      	movs	r2, #8
   1a728:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a72c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a72e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1a732:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a736:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a738:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1a73a:	d1f7      	bne.n	1a72c <db_hash_gen.isra.0+0x64>
   1a73c:	e7db      	b.n	1a6f6 <db_hash_gen.isra.0+0x2e>
   1a73e:	bf00      	nop
   1a740:	00022d10 	.word	0x00022d10
   1a744:	00022cf0 	.word	0x00022cf0
   1a748:	00024e04 	.word	0x00024e04
   1a74c:	00021485 	.word	0x00021485
   1a750:	20003921 	.word	0x20003921
   1a754:	00024e1d 	.word	0x00024e1d

0001a758 <bt_gatt_attr_next>:
{
   1a758:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a75a:	2300      	movs	r3, #0
   1a75c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a75e:	f7ff ff29 	bl	1a5b4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a762:	1c41      	adds	r1, r0, #1
   1a764:	b289      	uxth	r1, r1
   1a766:	4608      	mov	r0, r1
   1a768:	4a03      	ldr	r2, [pc, #12]	; (1a778 <bt_gatt_attr_next+0x20>)
   1a76a:	ab01      	add	r3, sp, #4
   1a76c:	f007 f84c 	bl	21808 <bt_gatt_foreach_attr>
}
   1a770:	9801      	ldr	r0, [sp, #4]
   1a772:	b003      	add	sp, #12
   1a774:	f85d fb04 	ldr.w	pc, [sp], #4
   1a778:	0002143f 	.word	0x0002143f

0001a77c <bt_gatt_notify_cb>:
{
   1a77c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a77e:	4b37      	ldr	r3, [pc, #220]	; (1a85c <bt_gatt_notify_cb+0xe0>)
   1a780:	f3bf 8f5b 	dmb	ish
   1a784:	681b      	ldr	r3, [r3, #0]
   1a786:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a78a:	079a      	lsls	r2, r3, #30
{
   1a78c:	b08b      	sub	sp, #44	; 0x2c
   1a78e:	4604      	mov	r4, r0
   1a790:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a792:	d55d      	bpl.n	1a850 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1a794:	6848      	ldr	r0, [r1, #4]
   1a796:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a798:	b114      	cbz	r4, 1a7a0 <bt_gatt_notify_cb+0x24>
   1a79a:	7aa3      	ldrb	r3, [r4, #10]
   1a79c:	2b07      	cmp	r3, #7
   1a79e:	d15a      	bne.n	1a856 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a7a0:	f7ff ff08 	bl	1a5b4 <bt_gatt_attr_get_handle>
   1a7a4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1a7a8:	b918      	cbnz	r0, 1a7b2 <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   1a7aa:	f06f 0001 	mvn.w	r0, #1
}
   1a7ae:	b00b      	add	sp, #44	; 0x2c
   1a7b0:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1a7b2:	682a      	ldr	r2, [r5, #0]
   1a7b4:	b9aa      	cbnz	r2, 1a7e2 <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a7b6:	9b05      	ldr	r3, [sp, #20]
   1a7b8:	6818      	ldr	r0, [r3, #0]
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	f88d 3010 	strb.w	r3, [sp, #16]
   1a7c0:	a904      	add	r1, sp, #16
   1a7c2:	f642 0303 	movw	r3, #10243	; 0x2803
   1a7c6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a7ca:	f005 ff83 	bl	206d4 <bt_uuid_cmp>
   1a7ce:	b1c0      	cbz	r0, 1a802 <bt_gatt_notify_cb+0x86>
	if (conn) {
   1a7d0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1a7d4:	b314      	cbz	r4, 1a81c <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   1a7d6:	4601      	mov	r1, r0
   1a7d8:	462a      	mov	r2, r5
   1a7da:	4620      	mov	r0, r4
   1a7dc:	f7ff fcea 	bl	1a1b4 <gatt_notify>
   1a7e0:	e7e5      	b.n	1a7ae <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7e2:	a905      	add	r1, sp, #20
   1a7e4:	9102      	str	r1, [sp, #8]
   1a7e6:	491e      	ldr	r1, [pc, #120]	; (1a860 <bt_gatt_notify_cb+0xe4>)
   1a7e8:	9101      	str	r1, [sp, #4]
   1a7ea:	2101      	movs	r1, #1
	found->attr = NULL;
   1a7ec:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7ee:	9100      	str	r1, [sp, #0]
   1a7f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a7f4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7f6:	f7ff ff0d 	bl	1a614 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a7fa:	9b05      	ldr	r3, [sp, #20]
   1a7fc:	2b00      	cmp	r3, #0
   1a7fe:	d1da      	bne.n	1a7b6 <bt_gatt_notify_cb+0x3a>
   1a800:	e7d3      	b.n	1a7aa <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a802:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1a804:	68c3      	ldr	r3, [r0, #12]
   1a806:	799b      	ldrb	r3, [r3, #6]
   1a808:	06db      	lsls	r3, r3, #27
   1a80a:	d402      	bmi.n	1a812 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   1a80c:	f06f 0015 	mvn.w	r0, #21
   1a810:	e7cd      	b.n	1a7ae <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a812:	f006 ffab 	bl	2176c <bt_gatt_attr_value_handle>
   1a816:	f8ad 0018 	strh.w	r0, [sp, #24]
   1a81a:	e7d9      	b.n	1a7d0 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a81c:	f642 1202 	movw	r2, #10498	; 0x2902
   1a820:	f8ad 2012 	strh.w	r2, [sp, #18]
   1a824:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1a826:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a82a:	9202      	str	r2, [sp, #8]
   1a82c:	4a0d      	ldr	r2, [pc, #52]	; (1a864 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   1a82e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1a830:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a832:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1a836:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a83a:	aa04      	add	r2, sp, #16
   1a83c:	4623      	mov	r3, r4
   1a83e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1a842:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a844:	f88d 4010 	strb.w	r4, [sp, #16]
   1a848:	f7ff fee4 	bl	1a614 <bt_gatt_foreach_attr_type>
	return data.err;
   1a84c:	9807      	ldr	r0, [sp, #28]
   1a84e:	e7ae      	b.n	1a7ae <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   1a850:	f06f 000a 	mvn.w	r0, #10
   1a854:	e7ab      	b.n	1a7ae <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   1a856:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1a85a:	e7a8      	b.n	1a7ae <bt_gatt_notify_cb+0x32>
   1a85c:	2000045c 	.word	0x2000045c
   1a860:	0002147d 	.word	0x0002147d
   1a864:	0001a399 	.word	0x0001a399

0001a868 <bt_gatt_indicate>:
{
   1a868:	b530      	push	{r4, r5, lr}
   1a86a:	4b39      	ldr	r3, [pc, #228]	; (1a950 <bt_gatt_indicate+0xe8>)
   1a86c:	f3bf 8f5b 	dmb	ish
   1a870:	681b      	ldr	r3, [r3, #0]
   1a872:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a876:	079a      	lsls	r2, r3, #30
{
   1a878:	b08b      	sub	sp, #44	; 0x2c
   1a87a:	4604      	mov	r4, r0
   1a87c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a87e:	d561      	bpl.n	1a944 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1a880:	6848      	ldr	r0, [r1, #4]
   1a882:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a884:	b114      	cbz	r4, 1a88c <bt_gatt_indicate+0x24>
   1a886:	7aa3      	ldrb	r3, [r4, #10]
   1a888:	2b07      	cmp	r3, #7
   1a88a:	d15e      	bne.n	1a94a <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a88c:	f7ff fe92 	bl	1a5b4 <bt_gatt_attr_get_handle>
   1a890:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1a894:	b918      	cbnz	r0, 1a89e <bt_gatt_indicate+0x36>
		return -ENOENT;
   1a896:	f06f 0001 	mvn.w	r0, #1
}
   1a89a:	b00b      	add	sp, #44	; 0x2c
   1a89c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1a89e:	682a      	ldr	r2, [r5, #0]
   1a8a0:	b9ba      	cbnz	r2, 1a8d2 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a8a2:	9b05      	ldr	r3, [sp, #20]
   1a8a4:	6818      	ldr	r0, [r3, #0]
   1a8a6:	2300      	movs	r3, #0
   1a8a8:	f88d 3010 	strb.w	r3, [sp, #16]
   1a8ac:	a904      	add	r1, sp, #16
   1a8ae:	f642 0303 	movw	r3, #10243	; 0x2803
   1a8b2:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a8b6:	f005 ff0d 	bl	206d4 <bt_uuid_cmp>
   1a8ba:	b1d0      	cbz	r0, 1a8f2 <bt_gatt_indicate+0x8a>
	if (conn) {
   1a8bc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1a8c0:	b324      	cbz	r4, 1a90c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   1a8c2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a8c4:	4601      	mov	r1, r0
		params->_ref = 1;
   1a8c6:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1a8c8:	462a      	mov	r2, r5
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	f7ff fb68 	bl	19fa0 <gatt_indicate>
   1a8d0:	e7e3      	b.n	1a89a <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a8d2:	a905      	add	r1, sp, #20
   1a8d4:	9102      	str	r1, [sp, #8]
   1a8d6:	491f      	ldr	r1, [pc, #124]	; (1a954 <bt_gatt_indicate+0xec>)
   1a8d8:	9101      	str	r1, [sp, #4]
   1a8da:	2101      	movs	r1, #1
	found->attr = NULL;
   1a8dc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a8de:	9100      	str	r1, [sp, #0]
   1a8e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a8e4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a8e6:	f7ff fe95 	bl	1a614 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a8ea:	9b05      	ldr	r3, [sp, #20]
   1a8ec:	2b00      	cmp	r3, #0
   1a8ee:	d1d8      	bne.n	1a8a2 <bt_gatt_indicate+0x3a>
   1a8f0:	e7d1      	b.n	1a896 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a8f2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a8f4:	68c3      	ldr	r3, [r0, #12]
   1a8f6:	799b      	ldrb	r3, [r3, #6]
   1a8f8:	069b      	lsls	r3, r3, #26
   1a8fa:	d402      	bmi.n	1a902 <bt_gatt_indicate+0x9a>
			return -EINVAL;
   1a8fc:	f06f 0015 	mvn.w	r0, #21
   1a900:	e7cb      	b.n	1a89a <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a902:	f006 ff33 	bl	2176c <bt_gatt_attr_value_handle>
   1a906:	f8ad 0018 	strh.w	r0, [sp, #24]
   1a90a:	e7d7      	b.n	1a8bc <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   1a90c:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1a910:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a912:	2302      	movs	r3, #2
   1a914:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a918:	f642 1302 	movw	r3, #10498	; 0x2902
   1a91c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a920:	ab05      	add	r3, sp, #20
   1a922:	9302      	str	r3, [sp, #8]
   1a924:	4b0c      	ldr	r3, [pc, #48]	; (1a958 <bt_gatt_indicate+0xf0>)
   1a926:	9301      	str	r3, [sp, #4]
   1a928:	2301      	movs	r3, #1
   1a92a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1a92c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a92e:	4623      	mov	r3, r4
   1a930:	aa04      	add	r2, sp, #16
   1a932:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a936:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a938:	f88d 4010 	strb.w	r4, [sp, #16]
   1a93c:	f7ff fe6a 	bl	1a614 <bt_gatt_foreach_attr_type>
	return data.err;
   1a940:	9807      	ldr	r0, [sp, #28]
   1a942:	e7aa      	b.n	1a89a <bt_gatt_indicate+0x32>
		return -EAGAIN;
   1a944:	f06f 000a 	mvn.w	r0, #10
   1a948:	e7a7      	b.n	1a89a <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   1a94a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1a94e:	e7a4      	b.n	1a89a <bt_gatt_indicate+0x32>
   1a950:	2000045c 	.word	0x2000045c
   1a954:	0002147d 	.word	0x0002147d
   1a958:	0001a399 	.word	0x0001a399

0001a95c <sc_process>:
{
   1a95c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a95e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   1a962:	9201      	str	r2, [sp, #4]
{
   1a964:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1a966:	f1a0 0120 	sub.w	r1, r0, #32
   1a96a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a96e:	f3bf 8f5b 	dmb	ish
   1a972:	e854 2f00 	ldrex	r2, [r4]
   1a976:	f022 0201 	bic.w	r2, r2, #1
   1a97a:	e844 2000 	strex	r0, r2, [r4]
   1a97e:	2800      	cmp	r0, #0
   1a980:	d1f7      	bne.n	1a972 <sc_process+0x16>
   1a982:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a986:	4a0d      	ldr	r2, [pc, #52]	; (1a9bc <sc_process+0x60>)
   1a988:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1a98c:	4a0c      	ldr	r2, [pc, #48]	; (1a9c0 <sc_process+0x64>)
   1a98e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1a992:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   1a994:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1a996:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1a99a:	2204      	movs	r2, #4
	sc->start = 0U;
   1a99c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1a9a0:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1a9a4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a9a8:	f7ff ff5e 	bl	1a868 <bt_gatt_indicate>
   1a9ac:	b918      	cbnz	r0, 1a9b6 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1a9ae:	2101      	movs	r1, #1
   1a9b0:	4620      	mov	r0, r4
   1a9b2:	f006 fdbd 	bl	21530 <atomic_set_bit>
}
   1a9b6:	b002      	add	sp, #8
   1a9b8:	bd10      	pop	{r4, pc}
   1a9ba:	bf00      	nop
   1a9bc:	00023170 	.word	0x00023170
   1a9c0:	0001a155 	.word	0x0001a155

0001a9c4 <update_ccc>:
{
   1a9c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a9c6:	4b33      	ldr	r3, [pc, #204]	; (1aa94 <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
   1a9c8:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a9ca:	6882      	ldr	r2, [r0, #8]
   1a9cc:	429a      	cmp	r2, r3
{
   1a9ce:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a9d0:	d11b      	bne.n	1aa0a <update_ccc+0x46>
	ccc = attr->user_data;
   1a9d2:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1a9d4:	8933      	ldrh	r3, [r6, #8]
   1a9d6:	b1c3      	cbz	r3, 1aa0a <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a9d8:	4632      	mov	r2, r6
   1a9da:	4628      	mov	r0, r5
   1a9dc:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a9e0:	f006 f829 	bl	20a36 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a9e4:	b188      	cbz	r0, 1aa0a <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a9e6:	222a      	movs	r2, #42	; 0x2a
   1a9e8:	4621      	mov	r1, r4
   1a9ea:	4628      	mov	r0, r5
   1a9ec:	f006 ff19 	bl	21822 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a9f0:	2803      	cmp	r0, #3
   1a9f2:	d10d      	bne.n	1aa10 <update_ccc+0x4c>
   1a9f4:	4a28      	ldr	r2, [pc, #160]	; (1aa98 <update_ccc+0xd4>)
   1a9f6:	4b29      	ldr	r3, [pc, #164]	; (1aa9c <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
   1a9f8:	4829      	ldr	r0, [pc, #164]	; (1aaa0 <update_ccc+0xdc>)
   1a9fa:	1ad2      	subs	r2, r2, r3
   1a9fc:	08d2      	lsrs	r2, r2, #3
   1a9fe:	0192      	lsls	r2, r2, #6
   1aa00:	f042 0202 	orr.w	r2, r2, #2
   1aa04:	4621      	mov	r1, r4
   1aa06:	f005 f9fb 	bl	1fe00 <log_1>
}
   1aa0a:	2001      	movs	r0, #1
   1aa0c:	b002      	add	sp, #8
   1aa0e:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   1aa10:	4631      	mov	r1, r6
   1aa12:	4620      	mov	r0, r4
   1aa14:	f006 fd16 	bl	21444 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1aa18:	4b22      	ldr	r3, [pc, #136]	; (1aaa4 <update_ccc+0xe0>)
   1aa1a:	429e      	cmp	r6, r3
   1aa1c:	d1f5      	bne.n	1aa0a <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1aa1e:	7a28      	ldrb	r0, [r5, #8]
   1aa20:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1aa24:	f7ff fafc 	bl	1a020 <find_sc_cfg>
	if (!cfg) {
   1aa28:	4604      	mov	r4, r0
   1aa2a:	2800      	cmp	r0, #0
   1aa2c:	d0ed      	beq.n	1aa0a <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   1aa2e:	8902      	ldrh	r2, [r0, #8]
   1aa30:	8943      	ldrh	r3, [r0, #10]
   1aa32:	ea53 0102 	orrs.w	r1, r3, r2
   1aa36:	d0e8      	beq.n	1aa0a <update_ccc+0x46>
	index = bt_conn_index(conn);
   1aa38:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1aa3a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1aa3e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1aa42:	f7fe f8e7 	bl	18c14 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1aa46:	4918      	ldr	r1, [pc, #96]	; (1aaa8 <update_ccc+0xe4>)
   1aa48:	4a18      	ldr	r2, [pc, #96]	; (1aaac <update_ccc+0xe8>)
   1aa4a:	2318      	movs	r3, #24
   1aa4c:	fb03 1300 	mla	r3, r3, r0, r1
   1aa50:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1aa52:	4a17      	ldr	r2, [pc, #92]	; (1aab0 <update_ccc+0xec>)
   1aa54:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1aa56:	aa01      	add	r2, sp, #4
   1aa58:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1aa5a:	2204      	movs	r2, #4
   1aa5c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1aa5e:	b203      	sxth	r3, r0
   1aa60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1aa64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1aa68:	4628      	mov	r0, r5
   1aa6a:	f7ff fefd 	bl	1a868 <bt_gatt_indicate>
   1aa6e:	b148      	cbz	r0, 1aa84 <update_ccc+0xc0>
   1aa70:	4909      	ldr	r1, [pc, #36]	; (1aa98 <update_ccc+0xd4>)
   1aa72:	4b0a      	ldr	r3, [pc, #40]	; (1aa9c <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
   1aa74:	480f      	ldr	r0, [pc, #60]	; (1aab4 <update_ccc+0xf0>)
   1aa76:	1ac9      	subs	r1, r1, r3
   1aa78:	08c9      	lsrs	r1, r1, #3
   1aa7a:	0189      	lsls	r1, r1, #6
   1aa7c:	f041 0101 	orr.w	r1, r1, #1
   1aa80:	f005 f9b1 	bl	1fde6 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1aa84:	2204      	movs	r2, #4
   1aa86:	2100      	movs	r1, #0
   1aa88:	f104 0008 	add.w	r0, r4, #8
   1aa8c:	f005 fdfd 	bl	2068a <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   1aa90:	e7bb      	b.n	1aa0a <update_ccc+0x46>
   1aa92:	bf00      	nop
   1aa94:	0001a07d 	.word	0x0001a07d
   1aa98:	00022d10 	.word	0x00022d10
   1aa9c:	00022cf0 	.word	0x00022cf0
   1aaa0:	00024e36 	.word	0x00024e36
   1aaa4:	200005fc 	.word	0x200005fc
   1aaa8:	20002c10 	.word	0x20002c10
   1aaac:	00023170 	.word	0x00023170
   1aab0:	0002154d 	.word	0x0002154d
   1aab4:	00024e4a 	.word	0x00024e4a

0001aab8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1aab8:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aaba:	4a06      	ldr	r2, [pc, #24]	; (1aad4 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1aabc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aabe:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1aac0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1aac6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aaca:	f006 fe9d 	bl	21808 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1aace:	b003      	add	sp, #12
   1aad0:	f85d fb04 	ldr.w	pc, [sp], #4
   1aad4:	0001a9c5 	.word	0x0001a9c5

0001aad8 <db_hash_read>:
{
   1aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aada:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1aadc:	480f      	ldr	r0, [pc, #60]	; (1ab1c <db_hash_read+0x44>)
{
   1aade:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1aae2:	4615      	mov	r5, r2
   1aae4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   1aae6:	f007 fda5 	bl	22634 <k_delayed_work_cancel>
	if (!err) {
   1aaea:	b908      	cbnz	r0, 1aaf0 <db_hash_read+0x18>
		db_hash_gen(true);
   1aaec:	f7ff fdec 	bl	1a6c8 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   1aaf0:	2101      	movs	r1, #1
   1aaf2:	4620      	mov	r0, r4
   1aaf4:	f006 ff03 	bl	218fe <bt_gatt_change_aware>
	if (offset > value_len) {
   1aaf8:	2e10      	cmp	r6, #16
   1aafa:	d80c      	bhi.n	1ab16 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
   1aafc:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1ab00:	4907      	ldr	r1, [pc, #28]	; (1ab20 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
   1ab02:	42bc      	cmp	r4, r7
   1ab04:	bfa8      	it	ge
   1ab06:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ab08:	4622      	mov	r2, r4
   1ab0a:	4431      	add	r1, r6
   1ab0c:	4628      	mov	r0, r5
   1ab0e:	f005 fd91 	bl	20634 <memcpy>
}
   1ab12:	4620      	mov	r0, r4
   1ab14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ab16:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   1ab1a:	e7fa      	b.n	1ab12 <db_hash_read+0x3a>
   1ab1c:	20002170 	.word	0x20002170
   1ab20:	20003921 	.word	0x20003921

0001ab24 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ab24:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ab26:	4603      	mov	r3, r0
   1ab28:	4a15      	ldr	r2, [pc, #84]	; (1ab80 <bt_gatt_disconnected+0x5c>)
{
   1ab2a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ab2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ab30:	2001      	movs	r0, #1
   1ab32:	f006 fe69 	bl	21808 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1ab36:	4628      	mov	r0, r5
   1ab38:	f7ff fa82 	bl	1a040 <find_cf_cfg>
	if (!cfg) {
   1ab3c:	4604      	mov	r4, r0
   1ab3e:	b1e8      	cbz	r0, 1ab7c <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ab40:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1ab44:	7a28      	ldrb	r0, [r5, #8]
   1ab46:	4631      	mov	r1, r6
   1ab48:	f005 fee1 	bl	2090e <bt_addr_le_is_bonded>
   1ab4c:	b920      	cbnz	r0, 1ab58 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1ab4e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1ab50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1ab54:	f006 bd22 	b.w	2159c <clear_cf_cfg>
   1ab58:	1c60      	adds	r0, r4, #1
   1ab5a:	2207      	movs	r2, #7
   1ab5c:	4631      	mov	r1, r6
   1ab5e:	340c      	adds	r4, #12
   1ab60:	f005 fd68 	bl	20634 <memcpy>
   1ab64:	f3bf 8f5b 	dmb	ish
   1ab68:	e854 3f00 	ldrex	r3, [r4]
   1ab6c:	f023 0302 	bic.w	r3, r3, #2
   1ab70:	e844 3200 	strex	r2, r3, [r4]
   1ab74:	2a00      	cmp	r2, #0
   1ab76:	d1f7      	bne.n	1ab68 <bt_gatt_disconnected+0x44>
   1ab78:	f3bf 8f5b 	dmb	ish
}
   1ab7c:	bd70      	pop	{r4, r5, r6, pc}
   1ab7e:	bf00      	nop
   1ab80:	0001a461 	.word	0x0001a461

0001ab84 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1ab84:	4a0b      	ldr	r2, [pc, #44]	; (1abb4 <bt_smp_accept+0x30>)
{
   1ab86:	b508      	push	{r3, lr}
   1ab88:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1ab8a:	6810      	ldr	r0, [r2, #0]
   1ab8c:	b918      	cbnz	r0, 1ab96 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1ab8e:	4b0a      	ldr	r3, [pc, #40]	; (1abb8 <bt_smp_accept+0x34>)
   1ab90:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1ab92:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1ab94:	bd08      	pop	{r3, pc}
   1ab96:	4909      	ldr	r1, [pc, #36]	; (1abbc <bt_smp_accept+0x38>)
   1ab98:	4a09      	ldr	r2, [pc, #36]	; (1abc0 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   1ab9a:	480a      	ldr	r0, [pc, #40]	; (1abc4 <bt_smp_accept+0x40>)
   1ab9c:	1a52      	subs	r2, r2, r1
   1ab9e:	08d2      	lsrs	r2, r2, #3
   1aba0:	0192      	lsls	r2, r2, #6
   1aba2:	f042 0201 	orr.w	r2, r2, #1
   1aba6:	4619      	mov	r1, r3
   1aba8:	f005 f92a 	bl	1fe00 <log_1>
	return -ENOMEM;
   1abac:	f06f 000b 	mvn.w	r0, #11
   1abb0:	e7f0      	b.n	1ab94 <bt_smp_accept+0x10>
   1abb2:	bf00      	nop
   1abb4:	200021f8 	.word	0x200021f8
   1abb8:	00023274 	.word	0x00023274
   1abbc:	00022cf0 	.word	0x00022cf0
   1abc0:	00022d30 	.word	0x00022d30
   1abc4:	00024e76 	.word	0x00024e76

0001abc8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1abc8:	4b02      	ldr	r3, [pc, #8]	; (1abd4 <net_buf_pool_get+0xc>)
   1abca:	2228      	movs	r2, #40	; 0x28
   1abcc:	fb02 3000 	mla	r0, r2, r0, r3
   1abd0:	4770      	bx	lr
   1abd2:	bf00      	nop
   1abd4:	200009b8 	.word	0x200009b8

0001abd8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1abd8:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1abda:	4a05      	ldr	r2, [pc, #20]	; (1abf0 <net_buf_id+0x18>)
   1abdc:	2128      	movs	r1, #40	; 0x28
   1abde:	fb01 2303 	mla	r3, r1, r3, r2
   1abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abe4:	1ac0      	subs	r0, r0, r3
}
   1abe6:	4b03      	ldr	r3, [pc, #12]	; (1abf4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1abe8:	10c0      	asrs	r0, r0, #3
}
   1abea:	4358      	muls	r0, r3
   1abec:	4770      	bx	lr
   1abee:	bf00      	nop
   1abf0:	200009b8 	.word	0x200009b8
   1abf4:	aaaaaaab 	.word	0xaaaaaaab

0001abf8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1abf8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1abfa:	4a0a      	ldr	r2, [pc, #40]	; (1ac24 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1abfc:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1abfe:	2428      	movs	r4, #40	; 0x28
   1ac00:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1ac04:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ac06:	6a1b      	ldr	r3, [r3, #32]
   1ac08:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ac0a:	6823      	ldr	r3, [r4, #0]
   1ac0c:	429a      	cmp	r2, r3
   1ac0e:	bf94      	ite	ls
   1ac10:	600a      	strls	r2, [r1, #0]
   1ac12:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ac14:	f7ff ffe0 	bl	1abd8 <net_buf_id>
   1ac18:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ac1c:	fb02 3000 	mla	r0, r2, r0, r3
   1ac20:	bd10      	pop	{r4, pc}
   1ac22:	bf00      	nop
   1ac24:	200009b8 	.word	0x200009b8

0001ac28 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ac28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ac2c:	4605      	mov	r5, r0
   1ac2e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1ac30:	4610      	mov	r0, r2
   1ac32:	4619      	mov	r1, r3
{
   1ac34:	4616      	mov	r6, r2
   1ac36:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1ac38:	f007 fd56 	bl	226e8 <z_timeout_end_calc>
   1ac3c:	4680      	mov	r8, r0
   1ac3e:	4689      	mov	r9, r1
	__asm__ volatile(
   1ac40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac44:	f3ef 8a11 	mrs	sl, BASEPRI
   1ac48:	f383 8811 	msr	BASEPRI, r3
   1ac4c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ac50:	8b6b      	ldrh	r3, [r5, #26]
   1ac52:	2b00      	cmp	r3, #0
   1ac54:	d054      	beq.n	1ad00 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ac56:	8b2a      	ldrh	r2, [r5, #24]
   1ac58:	429a      	cmp	r2, r3
   1ac5a:	d93d      	bls.n	1acd8 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1ac5c:	2200      	movs	r2, #0
   1ac5e:	2300      	movs	r3, #0
   1ac60:	4628      	mov	r0, r5
   1ac62:	f002 fd6b 	bl	1d73c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ac66:	4604      	mov	r4, r0
   1ac68:	2800      	cmp	r0, #0
   1ac6a:	d035      	beq.n	1acd8 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1ac6c:	f38a 8811 	msr	BASEPRI, sl
   1ac70:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ac74:	9b01      	ldr	r3, [sp, #4]
   1ac76:	2b00      	cmp	r3, #0
   1ac78:	d052      	beq.n	1ad20 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ac7a:	ea56 0307 	orrs.w	r3, r6, r7
   1ac7e:	d010      	beq.n	1aca2 <net_buf_alloc_len+0x7a>
   1ac80:	1c7b      	adds	r3, r7, #1
   1ac82:	bf08      	it	eq
   1ac84:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ac88:	d00b      	beq.n	1aca2 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1ac8a:	f003 fc2d 	bl	1e4e8 <z_tick_get>
   1ac8e:	ebb8 0600 	subs.w	r6, r8, r0
   1ac92:	eb69 0701 	sbc.w	r7, r9, r1
   1ac96:	2e00      	cmp	r6, #0
   1ac98:	f177 0300 	sbcs.w	r3, r7, #0
   1ac9c:	bfbc      	itt	lt
   1ac9e:	2600      	movlt	r6, #0
   1aca0:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1aca2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1aca4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1ad38 <net_buf_alloc_len+0x110>
   1aca8:	2228      	movs	r2, #40	; 0x28
   1acaa:	fb02 8303 	mla	r3, r2, r3, r8
   1acae:	a901      	add	r1, sp, #4
   1acb0:	6a1b      	ldr	r3, [r3, #32]
   1acb2:	681b      	ldr	r3, [r3, #0]
   1acb4:	4632      	mov	r2, r6
   1acb6:	681d      	ldr	r5, [r3, #0]
   1acb8:	4620      	mov	r0, r4
   1acba:	463b      	mov	r3, r7
   1acbc:	47a8      	blx	r5
   1acbe:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1acc0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1acc2:	bb70      	cbnz	r0, 1ad22 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1acc4:	79a0      	ldrb	r0, [r4, #6]
   1acc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1acca:	4621      	mov	r1, r4
   1accc:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1acd0:	f007 faed 	bl	222ae <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1acd4:	462c      	mov	r4, r5
}
   1acd6:	e01f      	b.n	1ad18 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1acd8:	8b68      	ldrh	r0, [r5, #26]
   1acda:	1e43      	subs	r3, r0, #1
   1acdc:	836b      	strh	r3, [r5, #26]
   1acde:	f38a 8811 	msr	BASEPRI, sl
   1ace2:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1ace6:	8b2c      	ldrh	r4, [r5, #24]
   1ace8:	1a24      	subs	r4, r4, r0
   1acea:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1acec:	2318      	movs	r3, #24
   1acee:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1acf2:	4811      	ldr	r0, [pc, #68]	; (1ad38 <net_buf_alloc_len+0x110>)
   1acf4:	4b11      	ldr	r3, [pc, #68]	; (1ad3c <net_buf_alloc_len+0x114>)
   1acf6:	1a2d      	subs	r5, r5, r0
   1acf8:	10ed      	asrs	r5, r5, #3
   1acfa:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1acfc:	71a5      	strb	r5, [r4, #6]
		goto success;
   1acfe:	e7b9      	b.n	1ac74 <net_buf_alloc_len+0x4c>
   1ad00:	f38a 8811 	msr	BASEPRI, sl
   1ad04:	f3bf 8f6f 	isb	sy
   1ad08:	4632      	mov	r2, r6
   1ad0a:	463b      	mov	r3, r7
   1ad0c:	4628      	mov	r0, r5
   1ad0e:	f002 fd15 	bl	1d73c <z_impl_k_queue_get>
	if (!buf) {
   1ad12:	4604      	mov	r4, r0
   1ad14:	2800      	cmp	r0, #0
   1ad16:	d1ad      	bne.n	1ac74 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ad18:	4620      	mov	r0, r4
   1ad1a:	b002      	add	sp, #8
   1ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1ad20:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1ad22:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ad24:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ad26:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1ad28:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1ad2a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1ad2c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ad2e:	6923      	ldr	r3, [r4, #16]
   1ad30:	81e2      	strh	r2, [r4, #14]
   1ad32:	60a3      	str	r3, [r4, #8]
	return buf;
   1ad34:	e7f0      	b.n	1ad18 <net_buf_alloc_len+0xf0>
   1ad36:	bf00      	nop
   1ad38:	200009b8 	.word	0x200009b8
   1ad3c:	cccccccd 	.word	0xcccccccd

0001ad40 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad44:	4d17      	ldr	r5, [pc, #92]	; (1ada4 <net_buf_unref+0x64>)
   1ad46:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ad48:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ad4a:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1ad4c:	b90c      	cbnz	r4, 1ad52 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ad4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1ad52:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1ad54:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1ad58:	3b01      	subs	r3, #1
   1ad5a:	b2db      	uxtb	r3, r3
   1ad5c:	7123      	strb	r3, [r4, #4]
   1ad5e:	2b00      	cmp	r3, #0
   1ad60:	d1f5      	bne.n	1ad4e <net_buf_unref+0xe>
		if (buf->__buf) {
   1ad62:	6921      	ldr	r1, [r4, #16]
   1ad64:	b159      	cbz	r1, 1ad7e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ad66:	7963      	ldrb	r3, [r4, #5]
   1ad68:	079b      	lsls	r3, r3, #30
   1ad6a:	d407      	bmi.n	1ad7c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1ad6c:	79a3      	ldrb	r3, [r4, #6]
   1ad6e:	fb07 5303 	mla	r3, r7, r3, r5
   1ad72:	4620      	mov	r0, r4
   1ad74:	6a1b      	ldr	r3, [r3, #32]
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	689b      	ldr	r3, [r3, #8]
   1ad7a:	4798      	blx	r3
			buf->__buf = NULL;
   1ad7c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1ad7e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1ad80:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1ad82:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ad86:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ad88:	69db      	ldr	r3, [r3, #28]
   1ad8a:	b11b      	cbz	r3, 1ad94 <net_buf_unref+0x54>
			pool->destroy(buf);
   1ad8c:	4620      	mov	r0, r4
   1ad8e:	4798      	blx	r3
{
   1ad90:	4644      	mov	r4, r8
   1ad92:	e7db      	b.n	1ad4c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ad94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ad98:	4621      	mov	r1, r4
   1ad9a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1ad9e:	f007 fa86 	bl	222ae <k_queue_prepend>
}
   1ada2:	e7f5      	b.n	1ad90 <net_buf_unref+0x50>
   1ada4:	200009b8 	.word	0x200009b8

0001ada8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1ada8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1adaa:	4b09      	ldr	r3, [pc, #36]	; (1add0 <gpio_nrfx_init+0x28>)
   1adac:	781a      	ldrb	r2, [r3, #0]
   1adae:	b96a      	cbnz	r2, 1adcc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1adb0:	2101      	movs	r1, #1
   1adb2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1adb4:	2006      	movs	r0, #6
   1adb6:	2105      	movs	r1, #5
   1adb8:	f7fa fba8 	bl	1550c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1adbc:	2006      	movs	r0, #6
   1adbe:	f7fa fb95 	bl	154ec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1adc2:	4b04      	ldr	r3, [pc, #16]	; (1add4 <gpio_nrfx_init+0x2c>)
   1adc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1adc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1adcc:	2000      	movs	r0, #0
   1adce:	bd08      	pop	{r3, pc}
   1add0:	20003931 	.word	0x20003931
   1add4:	40006000 	.word	0x40006000

0001add8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1add8:	4b2b      	ldr	r3, [pc, #172]	; (1ae88 <gpio_nrfx_config+0xb0>)
{
   1adda:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1addc:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1adde:	482b      	ldr	r0, [pc, #172]	; (1ae8c <gpio_nrfx_config+0xb4>)
   1ade0:	4013      	ands	r3, r2
   1ade2:	4283      	cmp	r3, r0
   1ade4:	d041      	beq.n	1ae6a <gpio_nrfx_config+0x92>
   1ade6:	d80d      	bhi.n	1ae04 <gpio_nrfx_config+0x2c>
   1ade8:	2b06      	cmp	r3, #6
   1adea:	d015      	beq.n	1ae18 <gpio_nrfx_config+0x40>
   1adec:	d805      	bhi.n	1adfa <gpio_nrfx_config+0x22>
   1adee:	b19b      	cbz	r3, 1ae18 <gpio_nrfx_config+0x40>
   1adf0:	2b02      	cmp	r3, #2
   1adf2:	d03c      	beq.n	1ae6e <gpio_nrfx_config+0x96>
   1adf4:	f06f 0015 	mvn.w	r0, #21
   1adf8:	e036      	b.n	1ae68 <gpio_nrfx_config+0x90>
   1adfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1adfe:	d1f9      	bne.n	1adf4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1ae00:	2301      	movs	r3, #1
   1ae02:	e009      	b.n	1ae18 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ae04:	4822      	ldr	r0, [pc, #136]	; (1ae90 <gpio_nrfx_config+0xb8>)
   1ae06:	4283      	cmp	r3, r0
   1ae08:	d033      	beq.n	1ae72 <gpio_nrfx_config+0x9a>
   1ae0a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ae0e:	d032      	beq.n	1ae76 <gpio_nrfx_config+0x9e>
   1ae10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1ae14:	d1ee      	bne.n	1adf4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1ae16:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1ae18:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1ae1a:	bf54      	ite	pl
   1ae1c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1ae20:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ae22:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1ae26:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1ae28:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ae2c:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ae30:	d507      	bpl.n	1ae42 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ae32:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ae36:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ae38:	d01f      	beq.n	1ae7a <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1ae3a:	2201      	movs	r2, #1
   1ae3c:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1ae3e:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1ae42:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1ae44:	4c13      	ldr	r4, [pc, #76]	; (1ae94 <gpio_nrfx_config+0xbc>)
   1ae46:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1ae48:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ae4c:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1ae50:	bf18      	it	ne
   1ae52:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ae56:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae5a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ae5e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae62:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1ae66:	2000      	movs	r0, #0
}
   1ae68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1ae6a:	2307      	movs	r3, #7
   1ae6c:	e7d4      	b.n	1ae18 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1ae6e:	2304      	movs	r3, #4
   1ae70:	e7d2      	b.n	1ae18 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1ae72:	2305      	movs	r3, #5
   1ae74:	e7d0      	b.n	1ae18 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1ae76:	2303      	movs	r3, #3
   1ae78:	e7ce      	b.n	1ae18 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1ae7a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1ae7c:	bf42      	ittt	mi
   1ae7e:	2201      	movmi	r2, #1
   1ae80:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1ae82:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1ae86:	e7dc      	b.n	1ae42 <gpio_nrfx_config+0x6a>
   1ae88:	00f00006 	.word	0x00f00006
   1ae8c:	00100006 	.word	0x00100006
   1ae90:	00400002 	.word	0x00400002
   1ae94:	50000300 	.word	0x50000300

0001ae98 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1ae98:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1ae9c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1ae9e:	4b08      	ldr	r3, [pc, #32]	; (1aec0 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aea0:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1aea2:	bf18      	it	ne
   1aea4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1aea8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1aeac:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1aeb0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1aeb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1aeb8:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1aebc:	4770      	bx	lr
   1aebe:	bf00      	nop
   1aec0:	50000300 	.word	0x50000300

0001aec4 <gpio_nrfx_pin_interrupt_configure>:
{
   1aec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aec6:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1aec8:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1aeca:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1aecc:	7a09      	ldrb	r1, [r1, #8]
   1aece:	f006 051f 	and.w	r5, r6, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1aed2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1aed6:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1aeda:	d110      	bne.n	1aefe <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1aedc:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1aede:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1aee0:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   1aee4:	485d      	ldr	r0, [pc, #372]	; (1b05c <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1aee6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1aeea:	bf18      	it	ne
   1aeec:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1aef0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1aef4:	07c8      	lsls	r0, r1, #31
   1aef6:	d507      	bpl.n	1af08 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1aef8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1aefc:	e093      	b.n	1b026 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1aefe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1af02:	68f9      	ldr	r1, [r7, #12]
   1af04:	f000 8091 	beq.w	1b02a <gpio_nrfx_pin_interrupt_configure+0x166>
   1af08:	68f8      	ldr	r0, [r7, #12]
   1af0a:	2101      	movs	r1, #1
   1af0c:	40b1      	lsls	r1, r6
   1af0e:	4301      	orrs	r1, r0
   1af10:	6978      	ldr	r0, [r7, #20]
   1af12:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1af14:	2101      	movs	r1, #1
   1af16:	40b1      	lsls	r1, r6
   1af18:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1af1c:	69ba      	ldr	r2, [r7, #24]
   1af1e:	bf0c      	ite	eq
   1af20:	4308      	orreq	r0, r1
   1af22:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1af24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1af28:	bf0c      	ite	eq
   1af2a:	430a      	orreq	r2, r1
   1af2c:	438a      	bicne	r2, r1
   1af2e:	61ba      	str	r2, [r7, #24]
   1af30:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1af32:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1af34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1af38:	bf0c      	ite	eq
   1af3a:	4311      	orreq	r1, r2
   1af3c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1af40:	4a47      	ldr	r2, [pc, #284]	; (1b060 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1af42:	6139      	str	r1, [r7, #16]
   1af44:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1af48:	2000      	movs	r0, #0
   1af4a:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1af4c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1af50:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1af54:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1af58:	428d      	cmp	r5, r1
   1af5a:	d16b      	bne.n	1b034 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   1af5c:	fa23 f100 	lsr.w	r1, r3, r0
   1af60:	07c9      	lsls	r1, r1, #31
   1af62:	d567      	bpl.n	1b034 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1af64:	0083      	lsls	r3, r0, #2
   1af66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1af6a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1af6e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1af72:	f021 0101 	bic.w	r1, r1, #1
   1af76:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1af7a:	2301      	movs	r3, #1
   1af7c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1af7e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1af82:	b2c0      	uxtb	r0, r0
   1af84:	f001 fba2 	bl	1c6cc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1af88:	4628      	mov	r0, r5
   1af8a:	2100      	movs	r1, #0
   1af8c:	f7ff ff84 	bl	1ae98 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1af90:	68f8      	ldr	r0, [r7, #12]
   1af92:	40f0      	lsrs	r0, r6
   1af94:	f010 0001 	ands.w	r0, r0, #1
   1af98:	d045      	beq.n	1b026 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1af9a:	6978      	ldr	r0, [r7, #20]
   1af9c:	40f0      	lsrs	r0, r6
   1af9e:	f010 0401 	ands.w	r4, r0, #1
   1afa2:	d04e      	beq.n	1b042 <gpio_nrfx_pin_interrupt_configure+0x17e>
			if (data->double_edge & BIT(pin)) {
   1afa4:	69bb      	ldr	r3, [r7, #24]
   1afa6:	40f3      	lsrs	r3, r6
   1afa8:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1afaa:	bf5f      	itttt	pl
   1afac:	6939      	ldrpl	r1, [r7, #16]
   1afae:	fa21 f606 	lsrpl.w	r6, r1, r6
   1afb2:	f006 0601 	andpl.w	r6, r6, #1
   1afb6:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1afba:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1afbe:	bf54      	ite	pl
   1afc0:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1afc2:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1afc4:	f001 fba4 	bl	1c710 <nrfx_gpiote_channel_alloc>
   1afc8:	4b26      	ldr	r3, [pc, #152]	; (1b064 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1afca:	4298      	cmp	r0, r3
   1afcc:	d136      	bne.n	1b03c <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1afce:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1afd2:	008b      	lsls	r3, r1, #2
   1afd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1afd8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1afdc:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1afde:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1afe2:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1afe6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1afea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1afee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1aff2:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1aff6:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1aff8:	008a      	lsls	r2, r1, #2
   1affa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1affe:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b002:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b006:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b008:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b00c:	6010      	str	r0, [r2, #0]
   1b00e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b010:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1b014:	f042 0201 	orr.w	r2, r2, #1
   1b018:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1b01c:	4a10      	ldr	r2, [pc, #64]	; (1b060 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1b01e:	2301      	movs	r3, #1
   1b020:	408b      	lsls	r3, r1
   1b022:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1b026:	b003      	add	sp, #12
   1b028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1b02a:	2001      	movs	r0, #1
   1b02c:	40b0      	lsls	r0, r6
   1b02e:	ea21 0100 	bic.w	r1, r1, r0
   1b032:	e76d      	b.n	1af10 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1b034:	3001      	adds	r0, #1
   1b036:	2808      	cmp	r0, #8
   1b038:	d188      	bne.n	1af4c <gpio_nrfx_pin_interrupt_configure+0x88>
   1b03a:	e7a5      	b.n	1af88 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1b03c:	f06f 0012 	mvn.w	r0, #18
   1b040:	e7f1      	b.n	1b026 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b042:	6939      	ldr	r1, [r7, #16]
   1b044:	40f1      	lsrs	r1, r6
   1b046:	f001 0101 	and.w	r1, r1, #1
   1b04a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1b04e:	4628      	mov	r0, r5
   1b050:	b2c9      	uxtb	r1, r1
   1b052:	f7ff ff21 	bl	1ae98 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1b056:	4620      	mov	r0, r4
   1b058:	e7e5      	b.n	1b026 <gpio_nrfx_pin_interrupt_configure+0x162>
   1b05a:	bf00      	nop
   1b05c:	50000300 	.word	0x50000300
   1b060:	40006000 	.word	0x40006000
   1b064:	0bad0000 	.word	0x0bad0000

0001b068 <gpiote_event_handler>:
{
   1b068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1b06a:	2600      	movs	r6, #0
   1b06c:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b070:	4d26      	ldr	r5, [pc, #152]	; (1b10c <gpiote_event_handler+0xa4>)
   1b072:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1b074:	b14c      	cbz	r4, 1b08a <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1b076:	4826      	ldr	r0, [pc, #152]	; (1b110 <gpiote_event_handler+0xa8>)
   1b078:	f006 fd9f 	bl	21bba <check_level_trigger_pins>
		fired_triggers[0] =
   1b07c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1b07e:	4825      	ldr	r0, [pc, #148]	; (1b114 <gpiote_event_handler+0xac>)
   1b080:	f006 fd9b 	bl	21bba <check_level_trigger_pins>
		fired_triggers[1] =
   1b084:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b086:	602e      	str	r6, [r5, #0]
   1b088:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1b08a:	4d23      	ldr	r5, [pc, #140]	; (1b118 <gpiote_event_handler+0xb0>)
{
   1b08c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1b08e:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b090:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1b092:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1b096:	fa06 f102 	lsl.w	r1, r6, r2
   1b09a:	4219      	tst	r1, r3
   1b09c:	d01b      	beq.n	1b0d6 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b09e:	0091      	lsls	r1, r2, #2
   1b0a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b0a4:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1b0a8:	680b      	ldr	r3, [r1, #0]
   1b0aa:	b1a3      	cbz	r3, 1b0d6 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1b0ac:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1b0b0:	af02      	add	r7, sp, #8
   1b0b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b0b6:	f8c1 c000 	str.w	ip, [r1]
   1b0ba:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1b0be:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1b0c2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1b0c6:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1b0ca:	fa06 f303 	lsl.w	r3, r6, r3
   1b0ce:	433b      	orrs	r3, r7
   1b0d0:	f840 3c08 	str.w	r3, [r0, #-8]
   1b0d4:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1b0d6:	3201      	adds	r2, #1
   1b0d8:	2a08      	cmp	r2, #8
   1b0da:	d1da      	bne.n	1b092 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1b0dc:	9a00      	ldr	r2, [sp, #0]
   1b0de:	b11a      	cbz	r2, 1b0e8 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1b0e0:	490b      	ldr	r1, [pc, #44]	; (1b110 <gpiote_event_handler+0xa8>)
   1b0e2:	480e      	ldr	r0, [pc, #56]	; (1b11c <gpiote_event_handler+0xb4>)
   1b0e4:	f006 fcff 	bl	21ae6 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1b0e8:	9a01      	ldr	r2, [sp, #4]
   1b0ea:	b11a      	cbz	r2, 1b0f4 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1b0ec:	4909      	ldr	r1, [pc, #36]	; (1b114 <gpiote_event_handler+0xac>)
   1b0ee:	480c      	ldr	r0, [pc, #48]	; (1b120 <gpiote_event_handler+0xb8>)
   1b0f0:	f006 fcf9 	bl	21ae6 <gpio_fire_callbacks>
	if (port_event) {
   1b0f4:	b144      	cbz	r4, 1b108 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1b0f6:	4806      	ldr	r0, [pc, #24]	; (1b110 <gpiote_event_handler+0xa8>)
   1b0f8:	f006 fd88 	bl	21c0c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1b0fc:	4805      	ldr	r0, [pc, #20]	; (1b114 <gpiote_event_handler+0xac>)
}
   1b0fe:	b003      	add	sp, #12
   1b100:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1b104:	f006 bd82 	b.w	21c0c <cfg_level_pins>
}
   1b108:	b003      	add	sp, #12
   1b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b10c:	4000617c 	.word	0x4000617c
   1b110:	200007fc 	.word	0x200007fc
   1b114:	2000080c 	.word	0x2000080c
   1b118:	40006000 	.word	0x40006000
   1b11c:	20002c30 	.word	0x20002c30
   1b120:	20002c4c 	.word	0x20002c4c

0001b124 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1b124:	b510      	push	{r4, lr}
   1b126:	4604      	mov	r4, r0
   1b128:	2200      	movs	r2, #0
   1b12a:	2101      	movs	r1, #1
   1b12c:	2003      	movs	r0, #3
   1b12e:	f7fa f9ed 	bl	1550c <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1b132:	6860      	ldr	r0, [r4, #4]
   1b134:	68e3      	ldr	r3, [r4, #12]
   1b136:	4a0c      	ldr	r2, [pc, #48]	; (1b168 <twi_0_init+0x44>)
   1b138:	f100 0108 	add.w	r1, r0, #8
   1b13c:	f001 fc00 	bl	1c940 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1b140:	4b0a      	ldr	r3, [pc, #40]	; (1b16c <twi_0_init+0x48>)
   1b142:	4298      	cmp	r0, r3
   1b144:	d00d      	beq.n	1b162 <twi_0_init+0x3e>
   1b146:	4b0a      	ldr	r3, [pc, #40]	; (1b170 <twi_0_init+0x4c>)
   1b148:	4a0a      	ldr	r2, [pc, #40]	; (1b174 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1b14a:	480b      	ldr	r0, [pc, #44]	; (1b178 <twi_0_init+0x54>)
   1b14c:	6821      	ldr	r1, [r4, #0]
   1b14e:	1ad2      	subs	r2, r2, r3
   1b150:	08d2      	lsrs	r2, r2, #3
   1b152:	0192      	lsls	r2, r2, #6
   1b154:	f042 0201 	orr.w	r2, r2, #1
   1b158:	f004 fe52 	bl	1fe00 <log_1>
		return -EBUSY;
   1b15c:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1b160:	bd10      	pop	{r4, pc}
	return 0;
   1b162:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1b164:	e7fc      	b.n	1b160 <twi_0_init+0x3c>
   1b166:	bf00      	nop
   1b168:	0001b1d1 	.word	0x0001b1d1
   1b16c:	0bad0000 	.word	0x0bad0000
   1b170:	00022cf0 	.word	0x00022cf0
   1b174:	00022d58 	.word	0x00022d58
   1b178:	00024ebc 	.word	0x00024ebc

0001b17c <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1b17c:	07ca      	lsls	r2, r1, #31
{
   1b17e:	b508      	push	{r3, lr}
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   1b180:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1b182:	d40f      	bmi.n	1b1a4 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1b184:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1b188:	2a01      	cmp	r2, #1
   1b18a:	d00e      	beq.n	1b1aa <i2c_nrfx_twi_configure+0x2e>
   1b18c:	2a02      	cmp	r2, #2
   1b18e:	d015      	beq.n	1b1bc <i2c_nrfx_twi_configure+0x40>
   1b190:	490c      	ldr	r1, [pc, #48]	; (1b1c4 <i2c_nrfx_twi_configure+0x48>)
   1b192:	4b0d      	ldr	r3, [pc, #52]	; (1b1c8 <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1b194:	480d      	ldr	r0, [pc, #52]	; (1b1cc <i2c_nrfx_twi_configure+0x50>)
   1b196:	1ac9      	subs	r1, r1, r3
   1b198:	08c9      	lsrs	r1, r1, #3
   1b19a:	0189      	lsls	r1, r1, #6
   1b19c:	f041 0101 	orr.w	r1, r1, #1
   1b1a0:	f004 fe21 	bl	1fde6 <log_0>
		return -EINVAL;
   1b1a4:	f06f 0015 	mvn.w	r0, #21
   1b1a8:	e007      	b.n	1b1ba <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1b1aa:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1b1ac:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1b1b0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1b1b4:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1b1b6:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1b1b8:	6359      	str	r1, [r3, #52]	; 0x34
}
   1b1ba:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1b1bc:	681b      	ldr	r3, [r3, #0]
   1b1be:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1b1c2:	e7f5      	b.n	1b1b0 <i2c_nrfx_twi_configure+0x34>
   1b1c4:	00022d58 	.word	0x00022d58
   1b1c8:	00022cf0 	.word	0x00022cf0
   1b1cc:	00024edc 	.word	0x00024edc

0001b1d0 <event_handler>:
	switch (p_event->type) {
   1b1d0:	7803      	ldrb	r3, [r0, #0]
   1b1d2:	2b01      	cmp	r3, #1
   1b1d4:	d008      	beq.n	1b1e8 <event_handler+0x18>
   1b1d6:	2b02      	cmp	r3, #2
   1b1d8:	d008      	beq.n	1b1ec <event_handler+0x1c>
   1b1da:	b94b      	cbnz	r3, 1b1f0 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1b1dc:	4b05      	ldr	r3, [pc, #20]	; (1b1f4 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b1de:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1b1e0:	f101 0018 	add.w	r0, r1, #24
   1b1e4:	f002 be7c 	b.w	1dee0 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1b1e8:	4b03      	ldr	r3, [pc, #12]	; (1b1f8 <event_handler+0x28>)
   1b1ea:	e7f8      	b.n	1b1de <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1b1ec:	4b03      	ldr	r3, [pc, #12]	; (1b1fc <event_handler+0x2c>)
   1b1ee:	e7f6      	b.n	1b1de <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b1f0:	4b03      	ldr	r3, [pc, #12]	; (1b200 <event_handler+0x30>)
   1b1f2:	e7f4      	b.n	1b1de <event_handler+0xe>
   1b1f4:	0bad0000 	.word	0x0bad0000
   1b1f8:	0bae0001 	.word	0x0bae0001
   1b1fc:	0bae0002 	.word	0x0bae0002
   1b200:	0bad0001 	.word	0x0bad0001

0001b204 <i2c_nrfx_twi_transfer>:
{
   1b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b208:	4604      	mov	r4, r0
   1b20a:	b087      	sub	sp, #28
   1b20c:	460d      	mov	r5, r1
   1b20e:	4690      	mov	r8, r2
   1b210:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1b212:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1b214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b21c:	f002 fe86 	bl	1df2c <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1b220:	68e0      	ldr	r0, [r4, #12]
   1b222:	3018      	adds	r0, #24
   1b224:	2200      	movs	r2, #0
   1b226:	2300      	movs	r3, #0
   1b228:	f002 fe80 	bl	1df2c <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1b22c:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1b22e:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 1b328 <i2c_nrfx_twi_transfer+0x124>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1b232:	f001 fbe1 	bl	1c9f8 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1b236:	2600      	movs	r6, #0
   1b238:	4546      	cmp	r6, r8
   1b23a:	d301      	bcc.n	1b240 <i2c_nrfx_twi_transfer+0x3c>
   1b23c:	2500      	movs	r5, #0
   1b23e:	e02d      	b.n	1b29c <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1b240:	f895 b008 	ldrb.w	fp, [r5, #8]
   1b244:	f01b 0708 	ands.w	r7, fp, #8
   1b248:	d160      	bne.n	1b30c <i2c_nrfx_twi_transfer+0x108>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b24a:	2214      	movs	r2, #20
   1b24c:	4639      	mov	r1, r7
   1b24e:	a801      	add	r0, sp, #4
   1b250:	f005 fa1b 	bl	2068a <memset>
   1b254:	686a      	ldr	r2, [r5, #4]
   1b256:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1b258:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b25c:	682a      	ldr	r2, [r5, #0]
   1b25e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1b262:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b266:	f88d 9005 	strb.w	r9, [sp, #5]
   1b26a:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1b26c:	d120      	bne.n	1b2b0 <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1b26e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1b272:	42b2      	cmp	r2, r6
   1b274:	d902      	bls.n	1b27c <i2c_nrfx_twi_transfer+0x78>
   1b276:	7d2a      	ldrb	r2, [r5, #20]
   1b278:	0752      	lsls	r2, r2, #29
   1b27a:	d51b      	bpl.n	1b2b4 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1b27c:	2b00      	cmp	r3, #0
   1b27e:	d145      	bne.n	1b30c <i2c_nrfx_twi_transfer+0x108>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1b280:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1b282:	6860      	ldr	r0, [r4, #4]
   1b284:	a901      	add	r1, sp, #4
   1b286:	f001 fbe1 	bl	1ca4c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1b28a:	4550      	cmp	r0, sl
   1b28c:	d014      	beq.n	1b2b8 <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1b28e:	4b21      	ldr	r3, [pc, #132]	; (1b314 <i2c_nrfx_twi_transfer+0x110>)
				ret = -EIO;
   1b290:	4298      	cmp	r0, r3
   1b292:	bf0c      	ite	eq
   1b294:	f06f 050f 	mvneq.w	r5, #15
   1b298:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1b29c:	6860      	ldr	r0, [r4, #4]
   1b29e:	f001 fbbb 	bl	1ca18 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1b2a2:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1b2a4:	f002 fe1c 	bl	1dee0 <z_impl_k_sem_give>
}
   1b2a8:	4628      	mov	r0, r5
   1b2aa:	b007      	add	sp, #28
   1b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1b2b0:	463a      	mov	r2, r7
   1b2b2:	e7e6      	b.n	1b282 <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1b2b4:	2240      	movs	r2, #64	; 0x40
   1b2b6:	e7e4      	b.n	1b282 <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1b2b8:	68e0      	ldr	r0, [r4, #12]
   1b2ba:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1b2bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b2c0:	2300      	movs	r3, #0
   1b2c2:	f002 fe33 	bl	1df2c <z_impl_k_sem_take>
		if (ret != 0) {
   1b2c6:	b168      	cbz	r0, 1b2e4 <i2c_nrfx_twi_transfer+0xe0>
   1b2c8:	4a13      	ldr	r2, [pc, #76]	; (1b318 <i2c_nrfx_twi_transfer+0x114>)
   1b2ca:	4b14      	ldr	r3, [pc, #80]	; (1b31c <i2c_nrfx_twi_transfer+0x118>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1b2cc:	4814      	ldr	r0, [pc, #80]	; (1b320 <i2c_nrfx_twi_transfer+0x11c>)
   1b2ce:	1ad2      	subs	r2, r2, r3
   1b2d0:	08d2      	lsrs	r2, r2, #3
   1b2d2:	0192      	lsls	r2, r2, #6
   1b2d4:	f042 0201 	orr.w	r2, r2, #1
   1b2d8:	4631      	mov	r1, r6
   1b2da:	f004 fd91 	bl	1fe00 <log_1>
			ret = -EIO;
   1b2de:	f06f 0504 	mvn.w	r5, #4
			break;
   1b2e2:	e7db      	b.n	1b29c <i2c_nrfx_twi_transfer+0x98>
		res = get_dev_data(dev)->res;
   1b2e4:	68e3      	ldr	r3, [r4, #12]
   1b2e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1b2e8:	4551      	cmp	r1, sl
   1b2ea:	f105 050c 	add.w	r5, r5, #12
   1b2ee:	d00b      	beq.n	1b308 <i2c_nrfx_twi_transfer+0x104>
   1b2f0:	4a0a      	ldr	r2, [pc, #40]	; (1b31c <i2c_nrfx_twi_transfer+0x118>)
   1b2f2:	4b09      	ldr	r3, [pc, #36]	; (1b318 <i2c_nrfx_twi_transfer+0x114>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1b2f4:	480b      	ldr	r0, [pc, #44]	; (1b324 <i2c_nrfx_twi_transfer+0x120>)
   1b2f6:	1a9b      	subs	r3, r3, r2
   1b2f8:	08db      	lsrs	r3, r3, #3
   1b2fa:	019b      	lsls	r3, r3, #6
   1b2fc:	f043 0301 	orr.w	r3, r3, #1
   1b300:	4632      	mov	r2, r6
   1b302:	f004 fd91 	bl	1fe28 <log_2>
   1b306:	e7ea      	b.n	1b2de <i2c_nrfx_twi_transfer+0xda>
	for (size_t i = 0; i < num_msgs; i++) {
   1b308:	3601      	adds	r6, #1
   1b30a:	e795      	b.n	1b238 <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1b30c:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1b310:	e7c4      	b.n	1b29c <i2c_nrfx_twi_transfer+0x98>
   1b312:	bf00      	nop
   1b314:	0bad000b 	.word	0x0bad000b
   1b318:	00022d58 	.word	0x00022d58
   1b31c:	00022cf0 	.word	0x00022cf0
   1b320:	00024eee 	.word	0x00024eee
   1b324:	00024f18 	.word	0x00024f18
   1b328:	0bad0000 	.word	0x0bad0000

0001b32c <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1b32c:	b510      	push	{r4, lr}
   1b32e:	4604      	mov	r4, r0
   1b330:	2200      	movs	r2, #0
   1b332:	2101      	movs	r1, #1
   1b334:	2004      	movs	r0, #4
   1b336:	f7fa f8e9 	bl	1550c <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1b33a:	6860      	ldr	r0, [r4, #4]
   1b33c:	68e3      	ldr	r3, [r4, #12]
   1b33e:	4a0c      	ldr	r2, [pc, #48]	; (1b370 <twim_1_init+0x44>)
   1b340:	f100 0108 	add.w	r1, r0, #8
   1b344:	f001 fc4c 	bl	1cbe0 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1b348:	4b0a      	ldr	r3, [pc, #40]	; (1b374 <twim_1_init+0x48>)
   1b34a:	4298      	cmp	r0, r3
   1b34c:	d00d      	beq.n	1b36a <twim_1_init+0x3e>
   1b34e:	4b0a      	ldr	r3, [pc, #40]	; (1b378 <twim_1_init+0x4c>)
   1b350:	4a0a      	ldr	r2, [pc, #40]	; (1b37c <twim_1_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1b352:	480b      	ldr	r0, [pc, #44]	; (1b380 <twim_1_init+0x54>)
   1b354:	6821      	ldr	r1, [r4, #0]
   1b356:	1ad2      	subs	r2, r2, r3
   1b358:	08d2      	lsrs	r2, r2, #3
   1b35a:	0192      	lsls	r2, r2, #6
   1b35c:	f042 0201 	orr.w	r2, r2, #1
   1b360:	f004 fd4e 	bl	1fe00 <log_1>
		return -EBUSY;
   1b364:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(1);
   1b368:	bd10      	pop	{r4, pc}
	return 0;
   1b36a:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(1);
   1b36c:	e7fc      	b.n	1b368 <twim_1_init+0x3c>
   1b36e:	bf00      	nop
   1b370:	0001b3d9 	.word	0x0001b3d9
   1b374:	0bad0000 	.word	0x0bad0000
   1b378:	00022cf0 	.word	0x00022cf0
   1b37c:	00022d60 	.word	0x00022d60
   1b380:	00024ebc 	.word	0x00024ebc

0001b384 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1b384:	07ca      	lsls	r2, r1, #31
{
   1b386:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1b388:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1b38a:	d40f      	bmi.n	1b3ac <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1b38c:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1b390:	2a01      	cmp	r2, #1
   1b392:	d00e      	beq.n	1b3b2 <i2c_nrfx_twim_configure+0x2e>
   1b394:	2a02      	cmp	r2, #2
   1b396:	d015      	beq.n	1b3c4 <i2c_nrfx_twim_configure+0x40>
   1b398:	490c      	ldr	r1, [pc, #48]	; (1b3cc <i2c_nrfx_twim_configure+0x48>)
   1b39a:	4b0d      	ldr	r3, [pc, #52]	; (1b3d0 <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1b39c:	480d      	ldr	r0, [pc, #52]	; (1b3d4 <i2c_nrfx_twim_configure+0x50>)
   1b39e:	1ac9      	subs	r1, r1, r3
   1b3a0:	08c9      	lsrs	r1, r1, #3
   1b3a2:	0189      	lsls	r1, r1, #6
   1b3a4:	f041 0101 	orr.w	r1, r1, #1
   1b3a8:	f004 fd1d 	bl	1fde6 <log_0>
		return -EINVAL;
   1b3ac:	f06f 0015 	mvn.w	r0, #21
   1b3b0:	e007      	b.n	1b3c2 <i2c_nrfx_twim_configure+0x3e>
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1b3b2:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1b3b4:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1b3b8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1b3bc:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1b3be:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1b3c0:	6359      	str	r1, [r3, #52]	; 0x34
}
   1b3c2:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1b3c4:	681b      	ldr	r3, [r3, #0]
   1b3c6:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1b3ca:	e7f5      	b.n	1b3b8 <i2c_nrfx_twim_configure+0x34>
   1b3cc:	00022d60 	.word	0x00022d60
   1b3d0:	00022cf0 	.word	0x00022cf0
   1b3d4:	00024edc 	.word	0x00024edc

0001b3d8 <event_handler>:
	switch (p_event->type) {
   1b3d8:	7803      	ldrb	r3, [r0, #0]
   1b3da:	2b01      	cmp	r3, #1
   1b3dc:	d008      	beq.n	1b3f0 <event_handler+0x18>
   1b3de:	2b02      	cmp	r3, #2
   1b3e0:	d008      	beq.n	1b3f4 <event_handler+0x1c>
   1b3e2:	b94b      	cbnz	r3, 1b3f8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1b3e4:	4b05      	ldr	r3, [pc, #20]	; (1b3fc <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b3e6:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1b3e8:	f101 0018 	add.w	r0, r1, #24
   1b3ec:	f002 bd78 	b.w	1dee0 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1b3f0:	4b03      	ldr	r3, [pc, #12]	; (1b400 <event_handler+0x28>)
   1b3f2:	e7f8      	b.n	1b3e6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1b3f4:	4b03      	ldr	r3, [pc, #12]	; (1b404 <event_handler+0x2c>)
   1b3f6:	e7f6      	b.n	1b3e6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b3f8:	4b03      	ldr	r3, [pc, #12]	; (1b408 <event_handler+0x30>)
   1b3fa:	e7f4      	b.n	1b3e6 <event_handler+0xe>
   1b3fc:	0bad0000 	.word	0x0bad0000
   1b400:	0bae0001 	.word	0x0bae0001
   1b404:	0bae0002 	.word	0x0bae0002
   1b408:	0bad0001 	.word	0x0bad0001

0001b40c <i2c_nrfx_twim_transfer>:
{
   1b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1b410:	68c4      	ldr	r4, [r0, #12]
{
   1b412:	b08b      	sub	sp, #44	; 0x2c
   1b414:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1b416:	2214      	movs	r2, #20
{
   1b418:	461d      	mov	r5, r3
   1b41a:	4606      	mov	r6, r0
   1b41c:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1b41e:	eb0d 0002 	add.w	r0, sp, r2
   1b422:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1b424:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   1b428:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   1b42c:	f005 f92d 	bl	2068a <memset>
   1b430:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   1b434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b43c:	4620      	mov	r0, r4
   1b43e:	f002 fd75 	bl	1df2c <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1b442:	68f0      	ldr	r0, [r6, #12]
   1b444:	3018      	adds	r0, #24
   1b446:	2200      	movs	r2, #0
   1b448:	2300      	movs	r3, #0
   1b44a:	f002 fd6f 	bl	1df2c <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   1b44e:	6870      	ldr	r0, [r6, #4]
   1b450:	f001 fc20 	bl	1cc94 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1b454:	2700      	movs	r7, #0
   1b456:	464d      	mov	r5, r9
	uint32_t concat_len = 0;
   1b458:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   1b45a:	455f      	cmp	r7, fp
   1b45c:	d301      	bcc.n	1b462 <i2c_nrfx_twim_transfer+0x56>
   1b45e:	2400      	movs	r4, #0
   1b460:	e049      	b.n	1b4f6 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1b462:	7a29      	ldrb	r1, [r5, #8]
   1b464:	070b      	lsls	r3, r1, #28
   1b466:	f100 80a6 	bmi.w	1b5b6 <i2c_nrfx_twim_transfer+0x1aa>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1b46a:	f1ba 0f00 	cmp.w	sl, #0
   1b46e:	d00d      	beq.n	1b48c <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   1b470:	1c7b      	adds	r3, r7, #1
   1b472:	459b      	cmp	fp, r3
   1b474:	d90a      	bls.n	1b48c <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   1b476:	0788      	lsls	r0, r1, #30
   1b478:	d408      	bmi.n	1b48c <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1b47a:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   1b47c:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   1b480:	f002 0201 	and.w	r2, r2, #1
   1b484:	f003 0304 	and.w	r3, r3, #4
   1b488:	4313      	orrs	r3, r2
   1b48a:	d01f      	beq.n	1b4cc <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   1b48c:	2c00      	cmp	r4, #0
   1b48e:	d13c      	bne.n	1b50a <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1b490:	682b      	ldr	r3, [r5, #0]
   1b492:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   1b494:	686b      	ldr	r3, [r5, #4]
   1b496:	9306      	str	r3, [sp, #24]
   1b498:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1b49a:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1b49c:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1b49e:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1b4a2:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1b4a6:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1b4aa:	a905      	add	r1, sp, #20
   1b4ac:	bf0c      	ite	eq
   1b4ae:	2220      	moveq	r2, #32
   1b4b0:	2200      	movne	r2, #0
   1b4b2:	f001 fc1b 	bl	1ccec <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1b4b6:	4b41      	ldr	r3, [pc, #260]	; (1b5bc <i2c_nrfx_twim_transfer+0x1b0>)
   1b4b8:	4298      	cmp	r0, r3
   1b4ba:	d03a      	beq.n	1b532 <i2c_nrfx_twim_transfer+0x126>
			if (res == NRFX_ERROR_BUSY) {
   1b4bc:	330b      	adds	r3, #11
				ret = -EIO;
   1b4be:	4298      	cmp	r0, r3
   1b4c0:	bf0c      	ite	eq
   1b4c2:	f06f 040f 	mvneq.w	r4, #15
   1b4c6:	f06f 0404 	mvnne.w	r4, #4
   1b4ca:	e014      	b.n	1b4f6 <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1b4cc:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   1b4ce:	686a      	ldr	r2, [r5, #4]
   1b4d0:	1910      	adds	r0, r2, r4
   1b4d2:	4550      	cmp	r0, sl
   1b4d4:	d91b      	bls.n	1b50e <i2c_nrfx_twim_transfer+0x102>
   1b4d6:	493a      	ldr	r1, [pc, #232]	; (1b5c0 <i2c_nrfx_twim_transfer+0x1b4>)
   1b4d8:	4b3a      	ldr	r3, [pc, #232]	; (1b5c4 <i2c_nrfx_twim_transfer+0x1b8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   1b4da:	483b      	ldr	r0, [pc, #236]	; (1b5c8 <i2c_nrfx_twim_transfer+0x1bc>)
   1b4dc:	1a5b      	subs	r3, r3, r1
   1b4de:	08db      	lsrs	r3, r3, #3
   1b4e0:	019b      	lsls	r3, r3, #6
   1b4e2:	f043 0301 	orr.w	r3, r3, #1
   1b4e6:	f8ad 3000 	strh.w	r3, [sp]
   1b4ea:	4621      	mov	r1, r4
   1b4ec:	4653      	mov	r3, sl
   1b4ee:	f004 fcb4 	bl	1fe5a <log_3>
				ret = -ENOSPC;
   1b4f2:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1b4f6:	6870      	ldr	r0, [r6, #4]
   1b4f8:	f001 fbdc 	bl	1ccb4 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1b4fc:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
   1b4fe:	f002 fcef 	bl	1dee0 <z_impl_k_sem_give>
}
   1b502:	4620      	mov	r0, r4
   1b504:	b00b      	add	sp, #44	; 0x2c
   1b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   1b50a:	2300      	movs	r3, #0
   1b50c:	e7df      	b.n	1b4ce <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1b50e:	07c9      	lsls	r1, r1, #31
   1b510:	d406      	bmi.n	1b520 <i2c_nrfx_twim_transfer+0x114>
				memcpy(concat_buf + concat_len,
   1b512:	6829      	ldr	r1, [r5, #0]
   1b514:	9303      	str	r3, [sp, #12]
   1b516:	eb08 0004 	add.w	r0, r8, r4
   1b51a:	f005 f88b 	bl	20634 <memcpy>
   1b51e:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   1b520:	686a      	ldr	r2, [r5, #4]
   1b522:	4414      	add	r4, r2
		if (concat_next) {
   1b524:	bb83      	cbnz	r3, 1b588 <i2c_nrfx_twim_transfer+0x17c>
		if (concat_len == 0) {
   1b526:	2c00      	cmp	r4, #0
   1b528:	d0b2      	beq.n	1b490 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   1b52a:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   1b52e:	9406      	str	r4, [sp, #24]
   1b530:	e7b3      	b.n	1b49a <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1b532:	68f0      	ldr	r0, [r6, #12]
   1b534:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1b536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b53a:	2300      	movs	r3, #0
   1b53c:	f002 fcf6 	bl	1df2c <z_impl_k_sem_take>
		if (ret != 0) {
   1b540:	b168      	cbz	r0, 1b55e <i2c_nrfx_twim_transfer+0x152>
   1b542:	4a20      	ldr	r2, [pc, #128]	; (1b5c4 <i2c_nrfx_twim_transfer+0x1b8>)
   1b544:	4b1e      	ldr	r3, [pc, #120]	; (1b5c0 <i2c_nrfx_twim_transfer+0x1b4>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1b546:	4821      	ldr	r0, [pc, #132]	; (1b5cc <i2c_nrfx_twim_transfer+0x1c0>)
   1b548:	1ad2      	subs	r2, r2, r3
   1b54a:	08d2      	lsrs	r2, r2, #3
   1b54c:	0192      	lsls	r2, r2, #6
   1b54e:	f042 0201 	orr.w	r2, r2, #1
   1b552:	4639      	mov	r1, r7
   1b554:	f004 fc54 	bl	1fe00 <log_1>
			ret = -EIO;
   1b558:	f06f 0404 	mvn.w	r4, #4
			break;
   1b55c:	e7cb      	b.n	1b4f6 <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   1b55e:	68f3      	ldr	r3, [r6, #12]
   1b560:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1b562:	4b16      	ldr	r3, [pc, #88]	; (1b5bc <i2c_nrfx_twim_transfer+0x1b0>)
   1b564:	4299      	cmp	r1, r3
   1b566:	d00b      	beq.n	1b580 <i2c_nrfx_twim_transfer+0x174>
   1b568:	4a15      	ldr	r2, [pc, #84]	; (1b5c0 <i2c_nrfx_twim_transfer+0x1b4>)
   1b56a:	4b16      	ldr	r3, [pc, #88]	; (1b5c4 <i2c_nrfx_twim_transfer+0x1b8>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1b56c:	4818      	ldr	r0, [pc, #96]	; (1b5d0 <i2c_nrfx_twim_transfer+0x1c4>)
   1b56e:	1a9b      	subs	r3, r3, r2
   1b570:	08db      	lsrs	r3, r3, #3
   1b572:	019b      	lsls	r3, r3, #6
   1b574:	f043 0301 	orr.w	r3, r3, #1
   1b578:	463a      	mov	r2, r7
   1b57a:	f004 fc55 	bl	1fe28 <log_2>
   1b57e:	e7eb      	b.n	1b558 <i2c_nrfx_twim_transfer+0x14c>
		if ((msgs[i].flags & I2C_MSG_READ)
   1b580:	7a2b      	ldrb	r3, [r5, #8]
   1b582:	07db      	lsls	r3, r3, #31
   1b584:	d403      	bmi.n	1b58e <i2c_nrfx_twim_transfer+0x182>
		concat_len = 0;
   1b586:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   1b588:	3701      	adds	r7, #1
   1b58a:	350c      	adds	r5, #12
   1b58c:	e765      	b.n	1b45a <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   1b58e:	9b08      	ldr	r3, [sp, #32]
   1b590:	4598      	cmp	r8, r3
   1b592:	d1f8      	bne.n	1b586 <i2c_nrfx_twim_transfer+0x17a>
			while (concat_len >= msgs[j].len) {
   1b594:	230c      	movs	r3, #12
   1b596:	fb03 9307 	mla	r3, r3, r7, r9
   1b59a:	685a      	ldr	r2, [r3, #4]
   1b59c:	4294      	cmp	r4, r2
   1b59e:	f1a3 030c 	sub.w	r3, r3, #12
   1b5a2:	d3f0      	bcc.n	1b586 <i2c_nrfx_twim_transfer+0x17a>
				concat_len -= msgs[j].len;
   1b5a4:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
   1b5a6:	68d8      	ldr	r0, [r3, #12]
   1b5a8:	9303      	str	r3, [sp, #12]
   1b5aa:	eb08 0104 	add.w	r1, r8, r4
   1b5ae:	f005 f841 	bl	20634 <memcpy>
   1b5b2:	9b03      	ldr	r3, [sp, #12]
				j--;
   1b5b4:	e7f1      	b.n	1b59a <i2c_nrfx_twim_transfer+0x18e>
			ret = -ENOTSUP;
   1b5b6:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1b5ba:	e79c      	b.n	1b4f6 <i2c_nrfx_twim_transfer+0xea>
   1b5bc:	0bad0000 	.word	0x0bad0000
   1b5c0:	00022cf0 	.word	0x00022cf0
   1b5c4:	00022d60 	.word	0x00022d60
   1b5c8:	00024f4c 	.word	0x00024f4c
   1b5cc:	00024eee 	.word	0x00024eee
   1b5d0:	00024f18 	.word	0x00024f18

0001b5d4 <adxl345_sample_fetch>:
	val->val2 = 0;
}

static int adxl345_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct adxl345_dev_data *data = dev->data;
   1b5d8:	68c6      	ldr	r6, [r0, #12]
{
   1b5da:	b08b      	sub	sp, #44	; 0x2c
	struct adxl345_sample sample;
	uint8_t samples_count;
	int rc;

	data->sample_number = 0;
   1b5dc:	2500      	movs	r5, #0
	rc = i2c_reg_read_byte(data->i2c_master, data->i2c_addr,
   1b5de:	7a31      	ldrb	r1, [r6, #8]
	data->sample_number = 0;
   1b5e0:	6035      	str	r5, [r6, #0]
{
   1b5e2:	4607      	mov	r7, r0
	rc = i2c_reg_read_byte(data->i2c_master, data->i2c_addr,
   1b5e4:	f10d 0306 	add.w	r3, sp, #6
   1b5e8:	6870      	ldr	r0, [r6, #4]
   1b5ea:	2239      	movs	r2, #57	; 0x39
   1b5ec:	f006 fb9b 	bl	21d26 <i2c_reg_read_byte>
		ADXL345_FIFO_STATUS_REG, &samples_count);
	if (rc < 0) {
   1b5f0:	1e04      	subs	r4, r0, #0
   1b5f2:	da57      	bge.n	1b6a4 <adxl345_sample_fetch+0xd0>
   1b5f4:	4a2f      	ldr	r2, [pc, #188]	; (1b6b4 <adxl345_sample_fetch+0xe0>)
   1b5f6:	4b30      	ldr	r3, [pc, #192]	; (1b6b8 <adxl345_sample_fetch+0xe4>)
		LOG_ERR("Failed to read FIFO status rc = %d\n", rc);
   1b5f8:	4830      	ldr	r0, [pc, #192]	; (1b6bc <adxl345_sample_fetch+0xe8>)
   1b5fa:	1ad2      	subs	r2, r2, r3
   1b5fc:	08d2      	lsrs	r2, r2, #3
   1b5fe:	0192      	lsls	r2, r2, #6
   1b600:	f042 0201 	orr.w	r2, r2, #1
   1b604:	4621      	mov	r1, r4
	__ASSERT_NO_MSG(samples_count <= ARRAY_SIZE(data->bufx));

	for (uint8_t s = 0; s < samples_count; s++) {
		rc = adxl345_read_sample(dev, &sample);
		if (rc < 0) {
			LOG_ERR("Failed to fetch sample rc=%d\n", rc);
   1b606:	f004 fbfb 	bl	1fe00 <log_1>
		data->bufy[s] = sample.y;
		data->bufz[s] = sample.z;
	}

	return samples_count;
}
   1b60a:	4620      	mov	r0, r4
   1b60c:	b00b      	add	sp, #44	; 0x2c
   1b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	raw_x = axis_data[0] | (axis_data[1] << 8);
   1b612:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1b616:	f89d 0008 	ldrb.w	r0, [sp, #8]
	raw_y = axis_data[2] | (axis_data[3] << 8);
   1b61a:	f89d 100a 	ldrb.w	r1, [sp, #10]
	raw_z = axis_data[4] | (axis_data[5] << 8);
   1b61e:	f89d 200c 	ldrb.w	r2, [sp, #12]
	raw_x = axis_data[0] | (axis_data[1] << 8);
   1b622:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	raw_y = axis_data[2] | (axis_data[3] << 8);
   1b626:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b62a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	raw_z = axis_data[4] | (axis_data[5] << 8);
   1b62e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1b632:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		data->bufx[s] = sample.x;
   1b636:	eb06 034b 	add.w	r3, r6, fp, lsl #1
   1b63a:	8158      	strh	r0, [r3, #10]
		data->bufy[s] = sample.y;
   1b63c:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
		data->bufz[s] = sample.z;
   1b640:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	for (uint8_t s = 0; s < samples_count; s++) {
   1b644:	f89d 4006 	ldrb.w	r4, [sp, #6]
   1b648:	fa5f fb85 	uxtb.w	fp, r5
   1b64c:	45a3      	cmp	fp, r4
   1b64e:	d2dc      	bcs.n	1b60a <adxl345_sample_fetch+0x36>
		rc = adxl345_read_sample(dev, &sample);
   1b650:	68fb      	ldr	r3, [r7, #12]
	int rc = i2c_burst_read(data->i2c_master,
   1b652:	f88d 8007 	strb.w	r8, [sp, #7]
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
   1b656:	2200      	movs	r2, #0
   1b658:	6858      	ldr	r0, [r3, #4]
   1b65a:	7a1b      	ldrb	r3, [r3, #8]
   1b65c:	f88d 2018 	strb.w	r2, [sp, #24]

	msg[1].buf = (uint8_t *)read_buf;
   1b660:	aa02      	add	r2, sp, #8
   1b662:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   1b664:	2206      	movs	r2, #6
   1b666:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b668:	2207      	movs	r2, #7
	msg[0].len = num_write;
   1b66a:	e9cd 9a04 	strd	r9, sl, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b66e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   1b672:	6882      	ldr	r2, [r0, #8]
   1b674:	a904      	add	r1, sp, #16
   1b676:	6854      	ldr	r4, [r2, #4]
   1b678:	2202      	movs	r2, #2
   1b67a:	47a0      	blx	r4
	if (rc < 0) {
   1b67c:	1e04      	subs	r4, r0, #0
   1b67e:	f105 0501 	add.w	r5, r5, #1
   1b682:	dac6      	bge.n	1b612 <adxl345_sample_fetch+0x3e>
   1b684:	4b0c      	ldr	r3, [pc, #48]	; (1b6b8 <adxl345_sample_fetch+0xe4>)
   1b686:	4d0b      	ldr	r5, [pc, #44]	; (1b6b4 <adxl345_sample_fetch+0xe0>)
		LOG_ERR("Samples read failed with rc=%d\n", rc);
   1b688:	480d      	ldr	r0, [pc, #52]	; (1b6c0 <adxl345_sample_fetch+0xec>)
   1b68a:	1aed      	subs	r5, r5, r3
   1b68c:	08ed      	lsrs	r5, r5, #3
   1b68e:	01ad      	lsls	r5, r5, #6
   1b690:	f045 0501 	orr.w	r5, r5, #1
   1b694:	462a      	mov	r2, r5
   1b696:	4621      	mov	r1, r4
   1b698:	f004 fbb2 	bl	1fe00 <log_1>
			LOG_ERR("Failed to fetch sample rc=%d\n", rc);
   1b69c:	4809      	ldr	r0, [pc, #36]	; (1b6c4 <adxl345_sample_fetch+0xf0>)
   1b69e:	462a      	mov	r2, r5
   1b6a0:	4621      	mov	r1, r4
   1b6a2:	e7b0      	b.n	1b606 <adxl345_sample_fetch+0x32>
   1b6a4:	f04f 0832 	mov.w	r8, #50	; 0x32
	msg[0].buf = (uint8_t *)write_buf;
   1b6a8:	f10d 0907 	add.w	r9, sp, #7
	msg[0].len = num_write;
   1b6ac:	f04f 0a01 	mov.w	sl, #1
   1b6b0:	e7c8      	b.n	1b644 <adxl345_sample_fetch+0x70>
   1b6b2:	bf00      	nop
   1b6b4:	00022cf0 	.word	0x00022cf0
   1b6b8:	00022cf0 	.word	0x00022cf0
   1b6bc:	00024f82 	.word	0x00024f82
   1b6c0:	00024fa6 	.word	0x00024fa6
   1b6c4:	00024fc6 	.word	0x00024fc6

0001b6c8 <adxl345_init>:
	.sample_fetch = adxl345_sample_fetch,
	.channel_get = adxl345_channel_get,
};

static int adxl345_init(const struct device *dev)
{
   1b6c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int rc;
	struct adxl345_dev_data *data = dev->data;
   1b6ca:	68c5      	ldr	r5, [r0, #12]
	const struct adxl345_dev_config *cfg = dev->config;
   1b6cc:	6846      	ldr	r6, [r0, #4]
	uint8_t dev_id;

	data->sample_number = 0;
   1b6ce:	2400      	movs	r4, #0
	data->i2c_master = device_get_binding(cfg->i2c_master_name);
   1b6d0:	6830      	ldr	r0, [r6, #0]
	data->sample_number = 0;
   1b6d2:	602c      	str	r4, [r5, #0]
   1b6d4:	f001 fd82 	bl	1d1dc <z_impl_device_get_binding>
	data->i2c_addr = cfg->i2c_addr;
   1b6d8:	88b1      	ldrh	r1, [r6, #4]
	data->i2c_master = device_get_binding(cfg->i2c_master_name);
   1b6da:	6068      	str	r0, [r5, #4]
	data->i2c_addr = cfg->i2c_addr;
   1b6dc:	7229      	strb	r1, [r5, #8]

	if (!data->i2c_master) {
   1b6de:	b968      	cbnz	r0, 1b6fc <adxl345_init+0x34>
   1b6e0:	4937      	ldr	r1, [pc, #220]	; (1b7c0 <adxl345_init+0xf8>)
   1b6e2:	4b38      	ldr	r3, [pc, #224]	; (1b7c4 <adxl345_init+0xfc>)
		LOG_ERR("Failed to get I2C master\n");
   1b6e4:	4838      	ldr	r0, [pc, #224]	; (1b7c8 <adxl345_init+0x100>)
   1b6e6:	1ac9      	subs	r1, r1, r3
   1b6e8:	08c9      	lsrs	r1, r1, #3
   1b6ea:	0189      	lsls	r1, r1, #6
   1b6ec:	f041 0101 	orr.w	r1, r1, #1
   1b6f0:	f004 fb79 	bl	1fde6 <log_0>

	rc = i2c_reg_read_byte(data->i2c_master, data->i2c_addr,
		ADXL345_DEVICE_ID_REG, &dev_id);
	if (rc < 0 || dev_id != ADXL345_PART_ID) {
		LOG_ERR("Read PART ID failed: 0x%x\n", rc);
		return -ENODEV;
   1b6f4:	f06f 0012 	mvn.w	r0, #18
		LOG_ERR("Enable measure bit failed\n");
		return -EIO;
	}

	return 0;
}
   1b6f8:	b002      	add	sp, #8
   1b6fa:	bd70      	pop	{r4, r5, r6, pc}
	rc = i2c_reg_read_byte(data->i2c_master, data->i2c_addr,
   1b6fc:	b2c9      	uxtb	r1, r1
   1b6fe:	f10d 0307 	add.w	r3, sp, #7
   1b702:	4622      	mov	r2, r4
   1b704:	f006 fb0f 	bl	21d26 <i2c_reg_read_byte>
	if (rc < 0 || dev_id != ADXL345_PART_ID) {
   1b708:	1e01      	subs	r1, r0, #0
   1b70a:	db03      	blt.n	1b714 <adxl345_init+0x4c>
   1b70c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b710:	2be5      	cmp	r3, #229	; 0xe5
   1b712:	d00a      	beq.n	1b72a <adxl345_init+0x62>
   1b714:	4b2b      	ldr	r3, [pc, #172]	; (1b7c4 <adxl345_init+0xfc>)
   1b716:	4a2a      	ldr	r2, [pc, #168]	; (1b7c0 <adxl345_init+0xf8>)
		LOG_ERR("Read PART ID failed: 0x%x\n", rc);
   1b718:	482c      	ldr	r0, [pc, #176]	; (1b7cc <adxl345_init+0x104>)
   1b71a:	1ad2      	subs	r2, r2, r3
   1b71c:	08d2      	lsrs	r2, r2, #3
   1b71e:	0192      	lsls	r2, r2, #6
   1b720:	f042 0201 	orr.w	r2, r2, #1
   1b724:	f004 fb6c 	bl	1fe00 <log_1>
   1b728:	e7e4      	b.n	1b6f4 <adxl345_init+0x2c>
	rc = i2c_reg_write_byte(data->i2c_master, data->i2c_addr,
   1b72a:	7a29      	ldrb	r1, [r5, #8]
   1b72c:	6868      	ldr	r0, [r5, #4]
   1b72e:	2380      	movs	r3, #128	; 0x80
   1b730:	2238      	movs	r2, #56	; 0x38
   1b732:	f006 fae5 	bl	21d00 <i2c_reg_write_byte>
	if (rc < 0) {
   1b736:	2800      	cmp	r0, #0
   1b738:	da0c      	bge.n	1b754 <adxl345_init+0x8c>
   1b73a:	4921      	ldr	r1, [pc, #132]	; (1b7c0 <adxl345_init+0xf8>)
   1b73c:	4b21      	ldr	r3, [pc, #132]	; (1b7c4 <adxl345_init+0xfc>)
		LOG_ERR("FIFO enable failed\n");
   1b73e:	4824      	ldr	r0, [pc, #144]	; (1b7d0 <adxl345_init+0x108>)
   1b740:	1ac9      	subs	r1, r1, r3
   1b742:	08c9      	lsrs	r1, r1, #3
   1b744:	0189      	lsls	r1, r1, #6
   1b746:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Enable measure bit failed\n");
   1b74a:	f004 fb4c 	bl	1fde6 <log_0>
		return -EIO;
   1b74e:	f06f 0004 	mvn.w	r0, #4
   1b752:	e7d1      	b.n	1b6f8 <adxl345_init+0x30>
	rc = i2c_reg_write_byte(data->i2c_master, data->i2c_addr,
   1b754:	7a29      	ldrb	r1, [r5, #8]
   1b756:	6868      	ldr	r0, [r5, #4]
   1b758:	2303      	movs	r3, #3
   1b75a:	2231      	movs	r2, #49	; 0x31
   1b75c:	f006 fad0 	bl	21d00 <i2c_reg_write_byte>
	if (rc < 0) {
   1b760:	2800      	cmp	r0, #0
   1b762:	da08      	bge.n	1b776 <adxl345_init+0xae>
   1b764:	4916      	ldr	r1, [pc, #88]	; (1b7c0 <adxl345_init+0xf8>)
   1b766:	4b17      	ldr	r3, [pc, #92]	; (1b7c4 <adxl345_init+0xfc>)
		LOG_ERR("Data format set failed\n");
   1b768:	481a      	ldr	r0, [pc, #104]	; (1b7d4 <adxl345_init+0x10c>)
   1b76a:	1ac9      	subs	r1, r1, r3
   1b76c:	08c9      	lsrs	r1, r1, #3
   1b76e:	0189      	lsls	r1, r1, #6
   1b770:	f041 0101 	orr.w	r1, r1, #1
   1b774:	e7e9      	b.n	1b74a <adxl345_init+0x82>
	rc = i2c_reg_write_byte(data->i2c_master, data->i2c_addr,
   1b776:	7a29      	ldrb	r1, [r5, #8]
   1b778:	6868      	ldr	r0, [r5, #4]
   1b77a:	2308      	movs	r3, #8
   1b77c:	222c      	movs	r2, #44	; 0x2c
   1b77e:	f006 fabf 	bl	21d00 <i2c_reg_write_byte>
	if (rc < 0) {
   1b782:	2800      	cmp	r0, #0
   1b784:	da08      	bge.n	1b798 <adxl345_init+0xd0>
   1b786:	490e      	ldr	r1, [pc, #56]	; (1b7c0 <adxl345_init+0xf8>)
   1b788:	4b0e      	ldr	r3, [pc, #56]	; (1b7c4 <adxl345_init+0xfc>)
		LOG_ERR("Rate setting failed\n");
   1b78a:	4813      	ldr	r0, [pc, #76]	; (1b7d8 <adxl345_init+0x110>)
   1b78c:	1ac9      	subs	r1, r1, r3
   1b78e:	08c9      	lsrs	r1, r1, #3
   1b790:	0189      	lsls	r1, r1, #6
   1b792:	f041 0101 	orr.w	r1, r1, #1
   1b796:	e7d8      	b.n	1b74a <adxl345_init+0x82>
	rc = i2c_reg_write_byte(data->i2c_master, data->i2c_addr,
   1b798:	7a29      	ldrb	r1, [r5, #8]
   1b79a:	6868      	ldr	r0, [r5, #4]
   1b79c:	2308      	movs	r3, #8
   1b79e:	222d      	movs	r2, #45	; 0x2d
   1b7a0:	f006 faae 	bl	21d00 <i2c_reg_write_byte>
	if (rc < 0) {
   1b7a4:	2800      	cmp	r0, #0
   1b7a6:	da08      	bge.n	1b7ba <adxl345_init+0xf2>
   1b7a8:	4905      	ldr	r1, [pc, #20]	; (1b7c0 <adxl345_init+0xf8>)
   1b7aa:	4b06      	ldr	r3, [pc, #24]	; (1b7c4 <adxl345_init+0xfc>)
		LOG_ERR("Enable measure bit failed\n");
   1b7ac:	480b      	ldr	r0, [pc, #44]	; (1b7dc <adxl345_init+0x114>)
   1b7ae:	1ac9      	subs	r1, r1, r3
   1b7b0:	08c9      	lsrs	r1, r1, #3
   1b7b2:	0189      	lsls	r1, r1, #6
   1b7b4:	f041 0101 	orr.w	r1, r1, #1
   1b7b8:	e7c7      	b.n	1b74a <adxl345_init+0x82>
	return 0;
   1b7ba:	4620      	mov	r0, r4
   1b7bc:	e79c      	b.n	1b6f8 <adxl345_init+0x30>
   1b7be:	bf00      	nop
   1b7c0:	00022cf0 	.word	0x00022cf0
   1b7c4:	00022cf0 	.word	0x00022cf0
   1b7c8:	00024fe4 	.word	0x00024fe4
   1b7cc:	00024ffe 	.word	0x00024ffe
   1b7d0:	00025019 	.word	0x00025019
   1b7d4:	0002502d 	.word	0x0002502d
   1b7d8:	00025045 	.word	0x00025045
   1b7dc:	0002505a 	.word	0x0002505a

0001b7e0 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   1b7e0:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   1b7e2:	f7f4 fcb8 	bl	10156 <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   1b7e6:	4802      	ldr	r0, [pc, #8]	; (1b7f0 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   1b7e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b7ec:	f002 bb78 	b.w	1dee0 <z_impl_k_sem_give>
   1b7f0:	20002d30 	.word	0x20002d30

0001b7f4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1b7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1b7f8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1b868 <dk_set_leds_state.part.0+0x74>
   1b7fc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1b86c <dk_set_leds_state.part.0+0x78>
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1b800:	4606      	mov	r6, r0
   1b802:	460f      	mov	r7, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1b804:	2500      	movs	r5, #0
   1b806:	f04f 0a01 	mov.w	sl, #1
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1b80a:	fa26 f205 	lsr.w	r2, r6, r5
   1b80e:	fa27 f305 	lsr.w	r3, r7, r5
   1b812:	4313      	orrs	r3, r2
   1b814:	07d9      	lsls	r1, r3, #31
   1b816:	d51b      	bpl.n	1b850 <dk_set_leds_state.part.0+0x5c>
			int err = gpio_pin_set_raw(led_devs[i],
   1b818:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   1b81c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
   1b820:	7919      	ldrb	r1, [r3, #4]
   1b822:	07d3      	lsls	r3, r2, #31
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&port, *(uintptr_t *)&pins, K_SYSCALL_GPIO_PORT_SET_BITS_RAW);
	}
#endif
	compiler_barrier();
   1b824:	fa0a f101 	lsl.w	r1, sl, r1
	return api->port_set_bits_raw(port, pins);
   1b828:	6883      	ldr	r3, [r0, #8]
   1b82a:	bf54      	ite	pl
   1b82c:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b82e:	691b      	ldrmi	r3, [r3, #16]
   1b830:	4798      	blx	r3
   1b832:	4604      	mov	r4, r0
						   led_pins[i].number, val);
			if (err) {
   1b834:	b160      	cbz	r0, 1b850 <dk_set_leds_state.part.0+0x5c>
   1b836:	4909      	ldr	r1, [pc, #36]	; (1b85c <dk_set_leds_state.part.0+0x68>)
   1b838:	4b09      	ldr	r3, [pc, #36]	; (1b860 <dk_set_leds_state.part.0+0x6c>)
				LOG_ERR("Cannot write LED gpio");
   1b83a:	480a      	ldr	r0, [pc, #40]	; (1b864 <dk_set_leds_state.part.0+0x70>)
   1b83c:	1ac9      	subs	r1, r1, r3
   1b83e:	08c9      	lsrs	r1, r1, #3
   1b840:	0189      	lsls	r1, r1, #6
   1b842:	f041 0101 	orr.w	r1, r1, #1
   1b846:	f004 face 	bl	1fde6 <log_0>
			}
		}
	}

	return 0;
}
   1b84a:	4620      	mov	r0, r4
   1b84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1b850:	3501      	adds	r5, #1
   1b852:	2d04      	cmp	r5, #4
   1b854:	d1d9      	bne.n	1b80a <dk_set_leds_state.part.0+0x16>
	return 0;
   1b856:	2400      	movs	r4, #0
   1b858:	e7f7      	b.n	1b84a <dk_set_leds_state.part.0+0x56>
   1b85a:	bf00      	nop
   1b85c:	00022d40 	.word	0x00022d40
   1b860:	00022cf0 	.word	0x00022cf0
   1b864:	00025084 	.word	0x00025084
   1b868:	20002d48 	.word	0x20002d48
   1b86c:	00023360 	.word	0x00023360

0001b870 <dk_leds_init>:
{
   1b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b872:	4d19      	ldr	r5, [pc, #100]	; (1b8d8 <dk_leds_init+0x68>)
   1b874:	4f19      	ldr	r7, [pc, #100]	; (1b8dc <dk_leds_init+0x6c>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1b876:	2600      	movs	r6, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   1b878:	6828      	ldr	r0, [r5, #0]
   1b87a:	f001 fcaf 	bl	1d1dc <z_impl_device_get_binding>
   1b87e:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   1b882:	b968      	cbnz	r0, 1b8a0 <dk_leds_init+0x30>
   1b884:	4b16      	ldr	r3, [pc, #88]	; (1b8e0 <dk_leds_init+0x70>)
   1b886:	4917      	ldr	r1, [pc, #92]	; (1b8e4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   1b888:	4817      	ldr	r0, [pc, #92]	; (1b8e8 <dk_leds_init+0x78>)
   1b88a:	1ac9      	subs	r1, r1, r3
   1b88c:	08c9      	lsrs	r1, r1, #3
   1b88e:	0189      	lsls	r1, r1, #6
   1b890:	f041 0101 	orr.w	r1, r1, #1
   1b894:	f004 faa7 	bl	1fde6 <log_0>
			return -ENODEV;
   1b898:	f06f 0412 	mvn.w	r4, #18
}
   1b89c:	4620      	mov	r0, r4
   1b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1b8a0:	7929      	ldrb	r1, [r5, #4]
   1b8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b8a6:	f006 fabf 	bl	21e28 <gpio_pin_configure>
		if (err) {
   1b8aa:	4604      	mov	r4, r0
   1b8ac:	b150      	cbz	r0, 1b8c4 <dk_leds_init+0x54>
   1b8ae:	4b0c      	ldr	r3, [pc, #48]	; (1b8e0 <dk_leds_init+0x70>)
   1b8b0:	490c      	ldr	r1, [pc, #48]	; (1b8e4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   1b8b2:	480e      	ldr	r0, [pc, #56]	; (1b8ec <dk_leds_init+0x7c>)
   1b8b4:	1ac9      	subs	r1, r1, r3
   1b8b6:	08c9      	lsrs	r1, r1, #3
   1b8b8:	0189      	lsls	r1, r1, #6
   1b8ba:	f041 0101 	orr.w	r1, r1, #1
   1b8be:	f004 fa92 	bl	1fde6 <log_0>
			return err;
   1b8c2:	e7eb      	b.n	1b89c <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1b8c4:	3601      	adds	r6, #1
   1b8c6:	2e04      	cmp	r6, #4
   1b8c8:	f105 0508 	add.w	r5, r5, #8
   1b8cc:	d1d4      	bne.n	1b878 <dk_leds_init+0x8>
}
   1b8ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b8d2:	210f      	movs	r1, #15
   1b8d4:	f7ff bf8e 	b.w	1b7f4 <dk_set_leds_state.part.0>
   1b8d8:	00023360 	.word	0x00023360
   1b8dc:	20002d48 	.word	0x20002d48
   1b8e0:	00022cf0 	.word	0x00022cf0
   1b8e4:	00022d40 	.word	0x00022d40
   1b8e8:	0002509a 	.word	0x0002509a
   1b8ec:	000250b2 	.word	0x000250b2

0001b8f0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   1b8f0:	2804      	cmp	r0, #4
{
   1b8f2:	b510      	push	{r4, lr}
   1b8f4:	4603      	mov	r3, r0
   1b8f6:	460a      	mov	r2, r1
	if (led_idx > ARRAY_SIZE(led_pins)) {
   1b8f8:	d90d      	bls.n	1b916 <dk_set_led+0x26>
   1b8fa:	4b16      	ldr	r3, [pc, #88]	; (1b954 <dk_set_led+0x64>)
   1b8fc:	4916      	ldr	r1, [pc, #88]	; (1b958 <dk_set_led+0x68>)
		LOG_ERR("LED index out of the range");
   1b8fe:	4817      	ldr	r0, [pc, #92]	; (1b95c <dk_set_led+0x6c>)
   1b900:	1ac9      	subs	r1, r1, r3
   1b902:	08c9      	lsrs	r1, r1, #3
   1b904:	0189      	lsls	r1, r1, #6
   1b906:	f041 0101 	orr.w	r1, r1, #1
   1b90a:	f004 fa6c 	bl	1fde6 <log_0>
		return -EINVAL;
   1b90e:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1b912:	4620      	mov	r0, r4
   1b914:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   1b916:	4912      	ldr	r1, [pc, #72]	; (1b960 <dk_set_led+0x70>)
   1b918:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1b91c:	4911      	ldr	r1, [pc, #68]	; (1b964 <dk_set_led+0x74>)
   1b91e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1b922:	7919      	ldrb	r1, [r3, #4]
   1b924:	2301      	movs	r3, #1
   1b926:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   1b92a:	b982      	cbnz	r2, 1b94e <dk_set_led+0x5e>
	return api->port_set_bits_raw(port, pins);
   1b92c:	6883      	ldr	r3, [r0, #8]
   1b92e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b930:	4798      	blx	r3
   1b932:	4604      	mov	r4, r0
	if (err) {
   1b934:	2800      	cmp	r0, #0
   1b936:	d0ec      	beq.n	1b912 <dk_set_led+0x22>
   1b938:	4b06      	ldr	r3, [pc, #24]	; (1b954 <dk_set_led+0x64>)
   1b93a:	4907      	ldr	r1, [pc, #28]	; (1b958 <dk_set_led+0x68>)
		LOG_ERR("Cannot write LED gpio");
   1b93c:	480a      	ldr	r0, [pc, #40]	; (1b968 <dk_set_led+0x78>)
   1b93e:	1ac9      	subs	r1, r1, r3
   1b940:	08c9      	lsrs	r1, r1, #3
   1b942:	0189      	lsls	r1, r1, #6
   1b944:	f041 0101 	orr.w	r1, r1, #1
   1b948:	f004 fa4d 	bl	1fde6 <log_0>
   1b94c:	e7e1      	b.n	1b912 <dk_set_led+0x22>
   1b94e:	6883      	ldr	r3, [r0, #8]
   1b950:	691b      	ldr	r3, [r3, #16]
   1b952:	e7ed      	b.n	1b930 <dk_set_led+0x40>
   1b954:	00022cf0 	.word	0x00022cf0
   1b958:	00022d40 	.word	0x00022d40
   1b95c:	00025118 	.word	0x00025118
   1b960:	20002d48 	.word	0x20002d48
   1b964:	00023360 	.word	0x00023360
   1b968:	00025084 	.word	0x00025084

0001b96c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b96c:	4602      	mov	r2, r0
   1b96e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b970:	4801      	ldr	r0, [pc, #4]	; (1b978 <multithreading_lock_acquire+0xc>)
   1b972:	f002 badb 	b.w	1df2c <z_impl_k_sem_take>
   1b976:	bf00      	nop
   1b978:	20000958 	.word	0x20000958

0001b97c <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   1b97c:	4801      	ldr	r0, [pc, #4]	; (1b984 <multithreading_lock_release+0x8>)
   1b97e:	f002 baaf 	b.w	1dee0 <z_impl_k_sem_give>
   1b982:	bf00      	nop
   1b984:	20000958 	.word	0x20000958

0001b988 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b988:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1b98a:	f7f9 f84f 	bl	14a2c <z_impl_log_panic>
   1b98e:	4b06      	ldr	r3, [pc, #24]	; (1b9a8 <k_sys_fatal_error_handler+0x20>)
   1b990:	4906      	ldr	r1, [pc, #24]	; (1b9ac <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1b992:	4807      	ldr	r0, [pc, #28]	; (1b9b0 <k_sys_fatal_error_handler+0x28>)
   1b994:	1ac9      	subs	r1, r1, r3
   1b996:	08c9      	lsrs	r1, r1, #3
   1b998:	0189      	lsls	r1, r1, #6
   1b99a:	f041 0101 	orr.w	r1, r1, #1
   1b99e:	f004 fa22 	bl	1fde6 <log_0>
	sys_arch_reboot(0);
   1b9a2:	2000      	movs	r0, #0
   1b9a4:	f7fa fa36 	bl	15e14 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1b9a8:	00022cf0 	.word	0x00022cf0
   1b9ac:	00022d48 	.word	0x00022d48
   1b9b0:	00025147 	.word	0x00025147

0001b9b4 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1b9b4:	b538      	push	{r3, r4, r5, lr}
   1b9b6:	4b0b      	ldr	r3, [pc, #44]	; (1b9e4 <sdc_assertion_handler+0x30>)
   1b9b8:	4c0b      	ldr	r4, [pc, #44]	; (1b9e8 <sdc_assertion_handler+0x34>)
   1b9ba:	1ae4      	subs	r4, r4, r3
   1b9bc:	460d      	mov	r5, r1
   1b9be:	08e4      	lsrs	r4, r4, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b9c0:	f7f8 feb2 	bl	14728 <log_strdup>
   1b9c4:	01a4      	lsls	r4, r4, #6
   1b9c6:	f044 0401 	orr.w	r4, r4, #1
   1b9ca:	4601      	mov	r1, r0
   1b9cc:	4623      	mov	r3, r4
   1b9ce:	4807      	ldr	r0, [pc, #28]	; (1b9ec <sdc_assertion_handler+0x38>)
   1b9d0:	462a      	mov	r2, r5
   1b9d2:	f004 fa29 	bl	1fe28 <log_2>
	k_oops();
   1b9d6:	4040      	eors	r0, r0
   1b9d8:	f380 8811 	msr	BASEPRI, r0
   1b9dc:	f04f 0003 	mov.w	r0, #3
   1b9e0:	df02      	svc	2
}
   1b9e2:	bd38      	pop	{r3, r4, r5, pc}
   1b9e4:	00022cf0 	.word	0x00022cf0
   1b9e8:	00022da0 	.word	0x00022da0
   1b9ec:	00025164 	.word	0x00025164

0001b9f0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b9f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b9f2:	4804      	ldr	r0, [pc, #16]	; (1ba04 <hci_driver_init+0x14>)
   1b9f4:	f7fb fcde 	bl	173b4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1b9f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1b9fc:	4802      	ldr	r0, [pc, #8]	; (1ba08 <hci_driver_init+0x18>)
   1b9fe:	f7e9 b8d1 	b.w	4ba4 <sdc_init>
   1ba02:	bf00      	nop
   1ba04:	00023380 	.word	0x00023380
   1ba08:	0001b9b5 	.word	0x0001b9b5

0001ba0c <hci_driver_open>:
{
   1ba0c:	b530      	push	{r4, r5, lr}
   1ba0e:	b08f      	sub	sp, #60	; 0x3c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ba10:	2200      	movs	r2, #0
   1ba12:	2300      	movs	r3, #0
   1ba14:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ba18:	2400      	movs	r4, #0
   1ba1a:	f06f 0309 	mvn.w	r3, #9
   1ba1e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1ba22:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ba26:	4b3e      	ldr	r3, [pc, #248]	; (1bb20 <hci_driver_open+0x114>)
   1ba28:	493e      	ldr	r1, [pc, #248]	; (1bb24 <hci_driver_open+0x118>)
   1ba2a:	9400      	str	r4, [sp, #0]
   1ba2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ba30:	483d      	ldr	r0, [pc, #244]	; (1bb28 <hci_driver_open+0x11c>)
   1ba32:	f002 faef 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ba36:	493d      	ldr	r1, [pc, #244]	; (1bb2c <hci_driver_open+0x120>)
   1ba38:	483b      	ldr	r0, [pc, #236]	; (1bb28 <hci_driver_open+0x11c>)
   1ba3a:	4d3d      	ldr	r5, [pc, #244]	; (1bb30 <hci_driver_open+0x124>)
   1ba3c:	f006 fd92 	bl	22564 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1ba40:	a809      	add	r0, sp, #36	; 0x24
   1ba42:	f7e9 f851 	bl	4ae8 <sdc_build_revision_get>
   1ba46:	4b3b      	ldr	r3, [pc, #236]	; (1bb34 <hci_driver_open+0x128>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1ba48:	483b      	ldr	r0, [pc, #236]	; (1bb38 <hci_driver_open+0x12c>)
   1ba4a:	1aed      	subs	r5, r5, r3
   1ba4c:	08ed      	lsrs	r5, r5, #3
   1ba4e:	01ad      	lsls	r5, r5, #6
   1ba50:	f045 0303 	orr.w	r3, r5, #3
   1ba54:	2214      	movs	r2, #20
   1ba56:	a909      	add	r1, sp, #36	; 0x24
   1ba58:	f004 fa26 	bl	1fea8 <log_hexdump>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba5c:	aa08      	add	r2, sp, #32
   1ba5e:	2101      	movs	r1, #1
   1ba60:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   1ba62:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba66:	f7e9 f84d 	bl	4b04 <sdc_cfg_set>
	if (required_memory < 0) {
   1ba6a:	2800      	cmp	r0, #0
   1ba6c:	db2e      	blt.n	1bacc <hci_driver_open+0xc0>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1ba6e:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba70:	aa08      	add	r2, sp, #32
   1ba72:	2102      	movs	r1, #2
   1ba74:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1ba76:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba7a:	f7e9 f843 	bl	4b04 <sdc_cfg_set>
	if (required_memory < 0) {
   1ba7e:	2800      	cmp	r0, #0
   1ba80:	db24      	blt.n	1bacc <hci_driver_open+0xc0>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ba82:	4b2e      	ldr	r3, [pc, #184]	; (1bb3c <hci_driver_open+0x130>)
   1ba84:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba86:	aa08      	add	r2, sp, #32
   1ba88:	2103      	movs	r1, #3
   1ba8a:	4620      	mov	r0, r4
   1ba8c:	f7e9 f83a 	bl	4b04 <sdc_cfg_set>
	if (required_memory < 0) {
   1ba90:	2800      	cmp	r0, #0
   1ba92:	db1b      	blt.n	1bacc <hci_driver_open+0xc0>
	cfg.event_length.event_length_us =
   1ba94:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ba98:	aa08      	add	r2, sp, #32
   1ba9a:	2104      	movs	r1, #4
   1ba9c:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1ba9e:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1baa0:	f7e9 f830 	bl	4b04 <sdc_cfg_set>
	if (required_memory < 0) {
   1baa4:	2800      	cmp	r0, #0
   1baa6:	db11      	blt.n	1bacc <hci_driver_open+0xc0>
	if (required_memory > sizeof(sdc_mempool)) {
   1baa8:	f640 1104 	movw	r1, #2308	; 0x904
   1baac:	4288      	cmp	r0, r1
   1baae:	dd0f      	ble.n	1bad0 <hci_driver_open+0xc4>
		BT_ERR("Allocated memory too low: %u < %u",
   1bab0:	4602      	mov	r2, r0
   1bab2:	f045 0301 	orr.w	r3, r5, #1
   1bab6:	4822      	ldr	r0, [pc, #136]	; (1bb40 <hci_driver_open+0x134>)
   1bab8:	f004 f9b6 	bl	1fe28 <log_2>
		k_panic();
   1babc:	4040      	eors	r0, r0
   1babe:	f380 8811 	msr	BASEPRI, r0
   1bac2:	f04f 0004 	mov.w	r0, #4
   1bac6:	df02      	svc	2
		return -ENOMEM;
   1bac8:	f06f 000b 	mvn.w	r0, #11
}
   1bacc:	b00f      	add	sp, #60	; 0x3c
   1bace:	bd30      	pop	{r4, r5, pc}
			err = sdc_support_adv();
   1bad0:	f7e9 f8e2 	bl	4c98 <sdc_support_adv>
			if (err) {
   1bad4:	b110      	cbz	r0, 1badc <hci_driver_open+0xd0>
				return -ENOTSUP;
   1bad6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1bada:	e7f7      	b.n	1bacc <hci_driver_open+0xc0>
		err = sdc_support_slave();
   1badc:	f7e9 f914 	bl	4d08 <sdc_support_slave>
		if (err) {
   1bae0:	2800      	cmp	r0, #0
   1bae2:	d1f8      	bne.n	1bad6 <hci_driver_open+0xca>
		err = sdc_support_dle();
   1bae4:	f7e9 f8e6 	bl	4cb4 <sdc_support_dle>
		if (err) {
   1bae8:	2800      	cmp	r0, #0
   1baea:	d1f4      	bne.n	1bad6 <hci_driver_open+0xca>
		err = sdc_support_le_2m_phy();
   1baec:	f7e9 f8f0 	bl	4cd0 <sdc_support_le_2m_phy>
		if (err) {
   1baf0:	2800      	cmp	r0, #0
   1baf2:	d1f0      	bne.n	1bad6 <hci_driver_open+0xca>
		err = sdc_support_le_coded_phy();
   1baf4:	f7e9 f8fa 	bl	4cec <sdc_support_le_coded_phy>
		if (err) {
   1baf8:	2800      	cmp	r0, #0
   1bafa:	d1ec      	bne.n	1bad6 <hci_driver_open+0xca>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1bafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb04:	f7ff ff32 	bl	1b96c <multithreading_lock_acquire>
	if (!err) {
   1bb08:	4604      	mov	r4, r0
   1bb0a:	b930      	cbnz	r0, 1bb1a <hci_driver_open+0x10e>
		err = sdc_enable(host_signal, sdc_mempool);
   1bb0c:	490d      	ldr	r1, [pc, #52]	; (1bb44 <hci_driver_open+0x138>)
   1bb0e:	480e      	ldr	r0, [pc, #56]	; (1bb48 <hci_driver_open+0x13c>)
   1bb10:	f7e9 f824 	bl	4b5c <sdc_enable>
   1bb14:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1bb16:	f7ff ff31 	bl	1b97c <multithreading_lock_release>
	if (err < 0) {
   1bb1a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1bb1e:	e7d5      	b.n	1bacc <hci_driver_open+0xc0>
   1bb20:	0001bb4d 	.word	0x0001bb4d
   1bb24:	200051a0 	.word	0x200051a0
   1bb28:	200022b0 	.word	0x200022b0
   1bb2c:	00025189 	.word	0x00025189
   1bb30:	00022da0 	.word	0x00022da0
   1bb34:	00022cf0 	.word	0x00022cf0
   1bb38:	00025190 	.word	0x00025190
   1bb3c:	0303fbfb 	.word	0x0303fbfb
   1bb40:	000251b7 	.word	0x000251b7
   1bb44:	20003a31 	.word	0x20003a31
   1bb48:	0001bc69 	.word	0x0001bc69

0001bb4c <recv_thread>:
{
   1bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb50:	4b3f      	ldr	r3, [pc, #252]	; (1bc50 <recv_thread+0x104>)
   1bb52:	4e40      	ldr	r6, [pc, #256]	; (1bc54 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1bb54:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1bc64 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1bb58:	4d3f      	ldr	r5, [pc, #252]	; (1bc58 <recv_thread+0x10c>)
   1bb5a:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1bb5c:	2700      	movs	r7, #0
   1bb5e:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1bb60:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1bb62:	b93c      	cbnz	r4, 1bb74 <recv_thread+0x28>
   1bb64:	b937      	cbnz	r7, 1bb74 <recv_thread+0x28>
   1bb66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bb6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb6e:	4640      	mov	r0, r8
   1bb70:	f002 f9dc 	bl	1df2c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bb74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb7c:	f7ff fef6 	bl	1b96c <multithreading_lock_acquire>
	if (!errcode) {
   1bb80:	b160      	cbz	r0, 1bb9c <recv_thread+0x50>
		return false;
   1bb82:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb8c:	f7ff feee 	bl	1b96c <multithreading_lock_acquire>
	if (!errcode) {
   1bb90:	2800      	cmp	r0, #0
   1bb92:	d03a      	beq.n	1bc0a <recv_thread+0xbe>
		return false;
   1bb94:	2700      	movs	r7, #0
	z_impl_k_yield();
   1bb96:	f002 f92d 	bl	1ddf4 <z_impl_k_yield>
}
   1bb9a:	e7e2      	b.n	1bb62 <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1bb9c:	482e      	ldr	r0, [pc, #184]	; (1bc58 <recv_thread+0x10c>)
   1bb9e:	f000 fba3 	bl	1c2e8 <hci_internal_evt_get>
   1bba2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1bba4:	f7ff feea 	bl	1b97c <multithreading_lock_release>
	if (errcode) {
   1bba8:	2c00      	cmp	r4, #0
   1bbaa:	d1ea      	bne.n	1bb82 <recv_thread+0x36>
	switch (hdr->evt) {
   1bbac:	7828      	ldrb	r0, [r5, #0]
   1bbae:	283e      	cmp	r0, #62	; 0x3e
   1bbb0:	d007      	beq.n	1bbc2 <recv_thread+0x76>
   1bbb2:	28ff      	cmp	r0, #255	; 0xff
   1bbb4:	d01c      	beq.n	1bbf0 <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1bbb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bbbe:	2400      	movs	r4, #0
   1bbc0:	e007      	b.n	1bbd2 <recv_thread+0x86>
		switch (me->subevent) {
   1bbc2:	78ab      	ldrb	r3, [r5, #2]
   1bbc4:	2b02      	cmp	r3, #2
   1bbc6:	d001      	beq.n	1bbcc <recv_thread+0x80>
   1bbc8:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1bbca:	d1f4      	bne.n	1bbb6 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1bbcc:	2200      	movs	r2, #0
   1bbce:	2300      	movs	r3, #0
   1bbd0:	2401      	movs	r4, #1
   1bbd2:	4621      	mov	r1, r4
   1bbd4:	f7fa fa50 	bl	16078 <bt_buf_get_evt>
	if (!evt_buf) {
   1bbd8:	4607      	mov	r7, r0
   1bbda:	b960      	cbnz	r0, 1bbf6 <recv_thread+0xaa>
		if (discardable) {
   1bbdc:	2c00      	cmp	r4, #0
   1bbde:	d1d1      	bne.n	1bb84 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1bbe0:	01b1      	lsls	r1, r6, #6
   1bbe2:	481e      	ldr	r0, [pc, #120]	; (1bc5c <recv_thread+0x110>)
   1bbe4:	f041 0101 	orr.w	r1, r1, #1
   1bbe8:	f004 f8fd 	bl	1fde6 <log_0>
	return true;
   1bbec:	2401      	movs	r4, #1
   1bbee:	e7c9      	b.n	1bb84 <recv_thread+0x38>
		switch (subevent) {
   1bbf0:	78ab      	ldrb	r3, [r5, #2]
   1bbf2:	2b80      	cmp	r3, #128	; 0x80
   1bbf4:	e7e9      	b.n	1bbca <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1bbf6:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bbf8:	4629      	mov	r1, r5
   1bbfa:	3202      	adds	r2, #2
   1bbfc:	3008      	adds	r0, #8
   1bbfe:	f005 ff35 	bl	21a6c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1bc02:	4638      	mov	r0, r7
   1bc04:	f7fb fba2 	bl	1734c <bt_recv>
   1bc08:	e7f0      	b.n	1bbec <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1bc0a:	4813      	ldr	r0, [pc, #76]	; (1bc58 <recv_thread+0x10c>)
   1bc0c:	f7f4 fd99 	bl	10742 <sdc_hci_data_get>
   1bc10:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1bc12:	f7ff feb3 	bl	1b97c <multithreading_lock_release>
	if (errcode) {
   1bc16:	2f00      	cmp	r7, #0
   1bc18:	d1bc      	bne.n	1bb94 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1bc1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc22:	2003      	movs	r0, #3
   1bc24:	f7fa f9f2 	bl	1600c <bt_buf_get_rx>
	if (!data_buf) {
   1bc28:	4607      	mov	r7, r0
   1bc2a:	b938      	cbnz	r0, 1bc3c <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1bc2c:	01b1      	lsls	r1, r6, #6
   1bc2e:	480c      	ldr	r0, [pc, #48]	; (1bc60 <recv_thread+0x114>)
   1bc30:	f041 0101 	orr.w	r1, r1, #1
   1bc34:	f004 f8d7 	bl	1fde6 <log_0>
	return true;
   1bc38:	2701      	movs	r7, #1
   1bc3a:	e7ac      	b.n	1bb96 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1bc3c:	886a      	ldrh	r2, [r5, #2]
   1bc3e:	4629      	mov	r1, r5
   1bc40:	3204      	adds	r2, #4
   1bc42:	3008      	adds	r0, #8
   1bc44:	f005 ff12 	bl	21a6c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1bc48:	4638      	mov	r0, r7
   1bc4a:	f7fb fb7f 	bl	1734c <bt_recv>
   1bc4e:	e7f3      	b.n	1bc38 <recv_thread+0xec>
   1bc50:	00022cf0 	.word	0x00022cf0
   1bc54:	00022da0 	.word	0x00022da0
   1bc58:	20003932 	.word	0x20003932
   1bc5c:	000251d9 	.word	0x000251d9
   1bc60:	000251f3 	.word	0x000251f3
   1bc64:	20000970 	.word	0x20000970

0001bc68 <host_signal>:
	z_impl_k_sem_give(sem);
   1bc68:	4801      	ldr	r0, [pc, #4]	; (1bc70 <host_signal+0x8>)
   1bc6a:	f002 b939 	b.w	1dee0 <z_impl_k_sem_give>
   1bc6e:	bf00      	nop
   1bc70:	20000970 	.word	0x20000970

0001bc74 <hci_driver_send>:
{
   1bc74:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1bc76:	8983      	ldrh	r3, [r0, #12]
{
   1bc78:	4605      	mov	r5, r0
	if (!buf->len) {
   1bc7a:	b383      	cbz	r3, 1bcde <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1bc7c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1bc7e:	b1ab      	cbz	r3, 1bcac <hci_driver_send+0x38>
   1bc80:	2b02      	cmp	r3, #2
   1bc82:	d12c      	bne.n	1bcde <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bc84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bc8c:	f7ff fe6e 	bl	1b96c <multithreading_lock_acquire>
	if (!errcode) {
   1bc90:	4604      	mov	r4, r0
   1bc92:	b948      	cbnz	r0, 1bca8 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1bc94:	68a8      	ldr	r0, [r5, #8]
   1bc96:	f7f4 fd61 	bl	1075c <sdc_hci_data_put>
   1bc9a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1bc9c:	f7ff fe6e 	bl	1b97c <multithreading_lock_release>
		if (errcode) {
   1bca0:	b1c4      	cbz	r4, 1bcd4 <hci_driver_send+0x60>
   1bca2:	4810      	ldr	r0, [pc, #64]	; (1bce4 <hci_driver_send+0x70>)
   1bca4:	f002 f91c 	bl	1dee0 <z_impl_k_sem_give>
}
   1bca8:	4620      	mov	r0, r4
   1bcaa:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bcac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bcb4:	f7ff fe5a 	bl	1b96c <multithreading_lock_acquire>
	if (!errcode) {
   1bcb8:	4604      	mov	r4, r0
   1bcba:	2800      	cmp	r0, #0
   1bcbc:	d1f4      	bne.n	1bca8 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1bcbe:	68a8      	ldr	r0, [r5, #8]
   1bcc0:	f000 f812 	bl	1bce8 <hci_internal_cmd_put>
   1bcc4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1bcc6:	f7ff fe59 	bl	1b97c <multithreading_lock_release>
	if (errcode) {
   1bcca:	2c00      	cmp	r4, #0
   1bccc:	d1ec      	bne.n	1bca8 <hci_driver_send+0x34>
   1bcce:	4805      	ldr	r0, [pc, #20]	; (1bce4 <hci_driver_send+0x70>)
   1bcd0:	f002 f906 	bl	1dee0 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1bcd4:	4628      	mov	r0, r5
   1bcd6:	f7ff f833 	bl	1ad40 <net_buf_unref>
   1bcda:	2400      	movs	r4, #0
   1bcdc:	e7e4      	b.n	1bca8 <hci_driver_send+0x34>
	switch (type) {
   1bcde:	f06f 0415 	mvn.w	r4, #21
   1bce2:	e7e1      	b.n	1bca8 <hci_driver_send+0x34>
   1bce4:	20000970 	.word	0x20000970

0001bce8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1bce8:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1bcea:	4c8e      	ldr	r4, [pc, #568]	; (1bf24 <hci_internal_cmd_put+0x23c>)
   1bcec:	7823      	ldrb	r3, [r4, #0]
   1bcee:	2b00      	cmp	r3, #0
   1bcf0:	f040 82f5 	bne.w	1c2de <hci_internal_cmd_put+0x5f6>
	return ((uint16_t)src[1] << 8) | src[0];
   1bcf4:	7843      	ldrb	r3, [r0, #1]
   1bcf6:	7805      	ldrb	r5, [r0, #0]
   1bcf8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1bcfc:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1bd00:	b22e      	sxth	r6, r5
   1bd02:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1bd06:	d20d      	bcs.n	1bd24 <hci_internal_cmd_put+0x3c>
   1bd08:	b17b      	cbz	r3, 1bd2a <hci_internal_cmd_put+0x42>
   1bd0a:	3b01      	subs	r3, #1
   1bd0c:	2b07      	cmp	r3, #7
   1bd0e:	d80c      	bhi.n	1bd2a <hci_internal_cmd_put+0x42>
   1bd10:	e8df f013 	tbh	[pc, r3, lsl #1]
   1bd14:	000b000e 	.word	0x000b000e
   1bd18:	0060002c 	.word	0x0060002c
   1bd1c:	000b000b 	.word	0x000b000b
   1bd20:	010c000b 	.word	0x010c000b
   1bd24:	2b3f      	cmp	r3, #63	; 0x3f
   1bd26:	f000 8233 	beq.w	1c190 <hci_internal_cmd_put+0x4a8>
   1bd2a:	2304      	movs	r3, #4
   1bd2c:	2001      	movs	r0, #1
   1bd2e:	e26a      	b.n	1c206 <hci_internal_cmd_put+0x51e>
	switch (opcode)	{
   1bd30:	f240 4306 	movw	r3, #1030	; 0x406
   1bd34:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bd36:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1bd3a:	d005      	beq.n	1bd48 <hci_internal_cmd_put+0x60>
   1bd3c:	f240 431d 	movw	r3, #1053	; 0x41d
   1bd40:	429e      	cmp	r6, r3
   1bd42:	d010      	beq.n	1bd66 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1bd44:	2001      	movs	r0, #1
   1bd46:	e001      	b.n	1bd4c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1bd48:	f7f4 fe07 	bl	1095a <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1bd4c:	230f      	movs	r3, #15
   1bd4e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1bd50:	2304      	movs	r3, #4
   1bd52:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1bd54:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1bd56:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1bd58:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1bd5a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1bd5e:	2301      	movs	r3, #1
   1bd60:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1bd62:	2000      	movs	r0, #0
}
   1bd64:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1bd66:	f7f4 fdfa 	bl	1095e <sdc_hci_cmd_lc_read_remote_version_information>
   1bd6a:	e7ef      	b.n	1bd4c <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1bd6c:	f640 4363 	movw	r3, #3171	; 0xc63
   1bd70:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bd72:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1bd76:	d025      	beq.n	1bdc4 <hci_internal_cmd_put+0xdc>
   1bd78:	dc0f      	bgt.n	1bd9a <hci_internal_cmd_put+0xb2>
   1bd7a:	f640 4303 	movw	r3, #3075	; 0xc03
   1bd7e:	429e      	cmp	r6, r3
   1bd80:	d018      	beq.n	1bdb4 <hci_internal_cmd_put+0xcc>
   1bd82:	f640 432d 	movw	r3, #3117	; 0xc2d
   1bd86:	429e      	cmp	r6, r3
   1bd88:	d017      	beq.n	1bdba <hci_internal_cmd_put+0xd2>
   1bd8a:	f640 4301 	movw	r3, #3073	; 0xc01
   1bd8e:	429e      	cmp	r6, r3
   1bd90:	d1d8      	bne.n	1bd44 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1bd92:	f7f4 fcff 	bl	10794 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1bd96:	2304      	movs	r3, #4
   1bd98:	e0b8      	b.n	1bf0c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1bd9a:	f640 437b 	movw	r3, #3195	; 0xc7b
   1bd9e:	429e      	cmp	r6, r3
   1bda0:	d013      	beq.n	1bdca <hci_internal_cmd_put+0xe2>
   1bda2:	f640 437c 	movw	r3, #3196	; 0xc7c
   1bda6:	429e      	cmp	r6, r3
   1bda8:	d1cc      	bne.n	1bd44 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1bdaa:	495f      	ldr	r1, [pc, #380]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1bdac:	f7f4 fcfc 	bl	107a8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1bdb0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1bdb2:	e0ab      	b.n	1bf0c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1bdb4:	f7e9 f8ee 	bl	4f94 <sdc_hci_cmd_cb_reset>
   1bdb8:	e7ed      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1bdba:	495b      	ldr	r1, [pc, #364]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1bdbc:	f7f4 fce8 	bl	10790 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1bdc0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1bdc2:	e0a3      	b.n	1bf0c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1bdc4:	f7f4 fceb 	bl	1079e <sdc_hci_cmd_cb_set_event_mask_page_2>
   1bdc8:	e7e5      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1bdca:	4957      	ldr	r1, [pc, #348]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1bdcc:	f7f4 fcde 	bl	1078c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1bdd0:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1bdd2:	e09b      	b.n	1bf0c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1bdd4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1bdd8:	3e01      	subs	r6, #1
   1bdda:	2e08      	cmp	r6, #8
   1bddc:	d8b2      	bhi.n	1bd44 <hci_internal_cmd_put+0x5c>
   1bdde:	a301      	add	r3, pc, #4	; (adr r3, 1bde4 <hci_internal_cmd_put+0xfc>)
   1bde0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1bde4:	0001be09 	.word	0x0001be09
   1bde8:	0001be13 	.word	0x0001be13
   1bdec:	0001beed 	.word	0x0001beed
   1bdf0:	0001bd45 	.word	0x0001bd45
   1bdf4:	0001bd45 	.word	0x0001bd45
   1bdf8:	0001bd45 	.word	0x0001bd45
   1bdfc:	0001bd45 	.word	0x0001bd45
   1be00:	0001bd45 	.word	0x0001bd45
   1be04:	0001bf05 	.word	0x0001bf05
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1be08:	4847      	ldr	r0, [pc, #284]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1be0a:	f7f4 fd5b 	bl	108c4 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1be0e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1be10:	e07c      	b.n	1bf0c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1be12:	4845      	ldr	r0, [pc, #276]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1be14:	222e      	movs	r2, #46	; 0x2e
   1be16:	2100      	movs	r1, #0
   1be18:	f004 fc37 	bl	2068a <memset>
	cmds->hci_disconnect = 1;
   1be1c:	79e3      	ldrb	r3, [r4, #7]
   1be1e:	f043 0320 	orr.w	r3, r3, #32
   1be22:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1be24:	7a63      	ldrb	r3, [r4, #9]
   1be26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1be2a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1be2c:	7b23      	ldrb	r3, [r4, #12]
   1be2e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1be32:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1be34:	7c63      	ldrb	r3, [r4, #17]
   1be36:	f043 0304 	orr.w	r3, r3, #4
   1be3a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1be3c:	7d63      	ldrb	r3, [r4, #21]
   1be3e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1be42:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1be46:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1be48:	7da3      	ldrb	r3, [r4, #22]
   1be4a:	f043 0302 	orr.w	r3, r3, #2
   1be4e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1be50:	7f63      	ldrb	r3, [r4, #29]
   1be52:	f043 0304 	orr.w	r3, r3, #4
   1be56:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1be58:	f894 3020 	ldrb.w	r3, [r4, #32]
   1be5c:	f063 0308 	orn	r3, r3, #8
   1be60:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1be64:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1be68:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1be6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1be70:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1be74:	f063 030c 	orn	r3, r3, #12
   1be78:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1be7c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1be80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1be84:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1be88:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1be8c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1be90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1be94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1be98:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1be9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1bea0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1bea4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1bea8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1beac:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1beb0:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1beb4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1beb8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1bebc:	f063 0301 	orn	r3, r3, #1
   1bec0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1bec4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1bec8:	f043 0301 	orr.w	r3, r3, #1
   1becc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1bed0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1bed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bed8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1bedc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1bee0:	f043 0304 	orr.w	r3, r3, #4
   1bee4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1bee8:	2344      	movs	r3, #68	; 0x44
   1beea:	e0de      	b.n	1c0aa <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1beec:	480e      	ldr	r0, [pc, #56]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1beee:	2208      	movs	r2, #8
   1bef0:	2100      	movs	r1, #0
   1bef2:	f004 fbca 	bl	2068a <memset>
	features->bdedr_not_supported = 1;
   1bef6:	7ae3      	ldrb	r3, [r4, #11]
   1bef8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1befc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1bf00:	72e3      	strb	r3, [r4, #11]
   1bf02:	e0d1      	b.n	1c0a8 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1bf04:	4808      	ldr	r0, [pc, #32]	; (1bf28 <hci_internal_cmd_put+0x240>)
   1bf06:	f7f4 fcdb 	bl	108c0 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1bf0a:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1bf0c:	2801      	cmp	r0, #1
   1bf0e:	f43f af1d 	beq.w	1bd4c <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1bf12:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1bf14:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1bf16:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1bf18:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1bf1a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1bf1c:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1bf1e:	71a0      	strb	r0, [r4, #6]
}
   1bf20:	e71d      	b.n	1bd5e <hci_internal_cmd_put+0x76>
   1bf22:	bf00      	nop
   1bf24:	20004335 	.word	0x20004335
   1bf28:	2000433c 	.word	0x2000433c
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bf2c:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1bf30:	3e01      	subs	r6, #1
   1bf32:	3003      	adds	r0, #3
	switch (opcode)	{
   1bf34:	2e4d      	cmp	r6, #77	; 0x4d
   1bf36:	f63f af05 	bhi.w	1bd44 <hci_internal_cmd_put+0x5c>
   1bf3a:	a301      	add	r3, pc, #4	; (adr r3, 1bf40 <hci_internal_cmd_put+0x258>)
   1bf3c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1bf40:	0001c079 	.word	0x0001c079
   1bf44:	0001c07f 	.word	0x0001c07f
   1bf48:	0001c087 	.word	0x0001c087
   1bf4c:	0001bd45 	.word	0x0001bd45
   1bf50:	0001c0af 	.word	0x0001c0af
   1bf54:	0001c0b5 	.word	0x0001c0b5
   1bf58:	0001c0bb 	.word	0x0001c0bb
   1bf5c:	0001c0c5 	.word	0x0001c0c5
   1bf60:	0001c0cb 	.word	0x0001c0cb
   1bf64:	0001c0d1 	.word	0x0001c0d1
   1bf68:	0001bd45 	.word	0x0001bd45
   1bf6c:	0001bd45 	.word	0x0001bd45
   1bf70:	0001bd45 	.word	0x0001bd45
   1bf74:	0001bd45 	.word	0x0001bd45
   1bf78:	0001c0d7 	.word	0x0001c0d7
   1bf7c:	0001c0df 	.word	0x0001c0df
   1bf80:	0001c0e5 	.word	0x0001c0e5
   1bf84:	0001c0eb 	.word	0x0001c0eb
   1bf88:	0001bd45 	.word	0x0001bd45
   1bf8c:	0001bd45 	.word	0x0001bd45
   1bf90:	0001c0f1 	.word	0x0001c0f1
   1bf94:	0001c0fb 	.word	0x0001c0fb
   1bf98:	0001c101 	.word	0x0001c101
   1bf9c:	0001c10b 	.word	0x0001c10b
   1bfa0:	0001bd45 	.word	0x0001bd45
   1bfa4:	0001c113 	.word	0x0001c113
   1bfa8:	0001c11b 	.word	0x0001c11b
   1bfac:	0001c123 	.word	0x0001c123
   1bfb0:	0001bd45 	.word	0x0001bd45
   1bfb4:	0001bd45 	.word	0x0001bd45
   1bfb8:	0001bd45 	.word	0x0001bd45
   1bfbc:	0001bd45 	.word	0x0001bd45
   1bfc0:	0001bd45 	.word	0x0001bd45
   1bfc4:	0001c12b 	.word	0x0001c12b
   1bfc8:	0001c133 	.word	0x0001c133
   1bfcc:	0001c13b 	.word	0x0001c13b
   1bfd0:	0001bd45 	.word	0x0001bd45
   1bfd4:	0001bd45 	.word	0x0001bd45
   1bfd8:	0001c141 	.word	0x0001c141
   1bfdc:	0001c147 	.word	0x0001c147
   1bfe0:	0001c14d 	.word	0x0001c14d
   1bfe4:	0001c153 	.word	0x0001c153
   1bfe8:	0001bd45 	.word	0x0001bd45
   1bfec:	0001bd45 	.word	0x0001bd45
   1bff0:	0001c15b 	.word	0x0001c15b
   1bff4:	0001c161 	.word	0x0001c161
   1bff8:	0001c167 	.word	0x0001c167
   1bffc:	0001c16f 	.word	0x0001c16f
   1c000:	0001c177 	.word	0x0001c177
   1c004:	0001c17d 	.word	0x0001c17d
   1c008:	0001bd45 	.word	0x0001bd45
   1c00c:	0001bd45 	.word	0x0001bd45
   1c010:	0001bd45 	.word	0x0001bd45
   1c014:	0001bd45 	.word	0x0001bd45
   1c018:	0001bd45 	.word	0x0001bd45
   1c01c:	0001bd45 	.word	0x0001bd45
   1c020:	0001bd45 	.word	0x0001bd45
   1c024:	0001bd45 	.word	0x0001bd45
   1c028:	0001bd45 	.word	0x0001bd45
   1c02c:	0001bd45 	.word	0x0001bd45
   1c030:	0001bd45 	.word	0x0001bd45
   1c034:	0001bd45 	.word	0x0001bd45
   1c038:	0001bd45 	.word	0x0001bd45
   1c03c:	0001bd45 	.word	0x0001bd45
   1c040:	0001bd45 	.word	0x0001bd45
   1c044:	0001bd45 	.word	0x0001bd45
   1c048:	0001bd45 	.word	0x0001bd45
   1c04c:	0001bd45 	.word	0x0001bd45
   1c050:	0001bd45 	.word	0x0001bd45
   1c054:	0001bd45 	.word	0x0001bd45
   1c058:	0001bd45 	.word	0x0001bd45
   1c05c:	0001bd45 	.word	0x0001bd45
   1c060:	0001bd45 	.word	0x0001bd45
   1c064:	0001bd45 	.word	0x0001bd45
   1c068:	0001c183 	.word	0x0001c183
   1c06c:	0001bd45 	.word	0x0001bd45
   1c070:	0001bd45 	.word	0x0001bd45
   1c074:	0001c18b 	.word	0x0001c18b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1c078:	f7f4 fc5e 	bl	10938 <sdc_hci_cmd_le_set_event_mask>
   1c07c:	e68b      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1c07e:	4899      	ldr	r0, [pc, #612]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c080:	f7f4 fc38 	bl	108f4 <sdc_hci_cmd_le_read_buffer_size>
   1c084:	e69c      	b.n	1bdc0 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1c086:	4897      	ldr	r0, [pc, #604]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c088:	2205      	movs	r2, #5
   1c08a:	2100      	movs	r1, #0
   1c08c:	f004 fafd 	bl	2068a <memset>
	features->le_encryption = 1;
   1c090:	79e3      	ldrb	r3, [r4, #7]
   1c092:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1c096:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1c09a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1c09c:	7a23      	ldrb	r3, [r4, #8]
   1c09e:	f023 0349 	bic.w	r3, r3, #73	; 0x49
   1c0a2:	f043 0349 	orr.w	r3, r3, #73	; 0x49
   1c0a6:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1c0a8:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1c0aa:	2000      	movs	r0, #0
   1c0ac:	e731      	b.n	1bf12 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1c0ae:	f7f4 fc4c 	bl	1094a <sdc_hci_cmd_le_set_random_address>
   1c0b2:	e670      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1c0b4:	f7f4 fc3a 	bl	1092c <sdc_hci_cmd_le_set_adv_params>
   1c0b8:	e66d      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1c0ba:	488a      	ldr	r0, [pc, #552]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c0bc:	f7f4 fc18 	bl	108f0 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1c0c0:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1c0c2:	e723      	b.n	1bf0c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1c0c4:	f7f4 fc2e 	bl	10924 <sdc_hci_cmd_le_set_adv_data>
   1c0c8:	e665      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1c0ca:	f7f4 fc42 	bl	10952 <sdc_hci_cmd_le_set_scan_response_data>
   1c0ce:	e662      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1c0d0:	f7f4 fc2a 	bl	10928 <sdc_hci_cmd_le_set_adv_enable>
   1c0d4:	e65f      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1c0d6:	4883      	ldr	r0, [pc, #524]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c0d8:	f7f4 fc1c 	bl	10914 <sdc_hci_cmd_le_read_white_list_size>
   1c0dc:	e7f0      	b.n	1c0c0 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1c0de:	f7f4 fbf9 	bl	108d4 <sdc_hci_cmd_le_clear_white_list>
   1c0e2:	e658      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1c0e4:	f7f4 fbf2 	bl	108cc <sdc_hci_cmd_le_add_device_to_white_list>
   1c0e8:	e655      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1c0ea:	f7f4 fc17 	bl	1091c <sdc_hci_cmd_le_remove_device_from_white_list>
   1c0ee:	e652      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c0f0:	497c      	ldr	r1, [pc, #496]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c0f2:	f7f4 fc01 	bl	108f8 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1c0f6:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c0f8:	e708      	b.n	1bf0c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1c0fa:	f7f4 fc03 	bl	10904 <sdc_hci_cmd_le_read_remote_features>
   1c0fe:	e625      	b.n	1bd4c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c100:	4978      	ldr	r1, [pc, #480]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c102:	f7f4 fbe9 	bl	108d8 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1c106:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c108:	e700      	b.n	1bf0c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1c10a:	4876      	ldr	r0, [pc, #472]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c10c:	f7f4 fbee 	bl	108ec <sdc_hci_cmd_le_rand>
   1c110:	e67d      	b.n	1be0e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1c112:	4974      	ldr	r1, [pc, #464]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c114:	f7f4 fbe6 	bl	108e4 <sdc_hci_cmd_le_long_term_key_request_reply>
   1c118:	e64a      	b.n	1bdb0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1c11a:	4972      	ldr	r1, [pc, #456]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c11c:	f7f4 fbde 	bl	108dc <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1c120:	e646      	b.n	1bdb0 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1c122:	238f      	movs	r3, #143	; 0x8f
   1c124:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1c126:	23c0      	movs	r3, #192	; 0xc0
   1c128:	e6ea      	b.n	1bf00 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1c12a:	496e      	ldr	r1, [pc, #440]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c12c:	f7f4 fc00 	bl	10930 <sdc_hci_cmd_le_set_data_length>
   1c130:	e63e      	b.n	1bdb0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1c132:	486c      	ldr	r0, [pc, #432]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c134:	f7f4 fbea 	bl	1090c <sdc_hci_cmd_le_read_suggested_default_data_length>
   1c138:	e64a      	b.n	1bdd0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1c13a:	f7f4 fc0c 	bl	10956 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1c13e:	e62a      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1c140:	f7f4 fbc2 	bl	108c8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1c144:	e627      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1c146:	f7f4 fbe7 	bl	10918 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1c14a:	e624      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1c14c:	f7f4 fbc0 	bl	108d0 <sdc_hci_cmd_le_clear_resolving_list>
   1c150:	e621      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1c152:	4864      	ldr	r0, [pc, #400]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c154:	f7f4 fbd8 	bl	10908 <sdc_hci_cmd_le_read_resolving_list_size>
   1c158:	e7b2      	b.n	1c0c0 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1c15a:	f7f4 fbe1 	bl	10920 <sdc_hci_cmd_le_set_address_resolution_enable>
   1c15e:	e61a      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1c160:	f7f4 fbf5 	bl	1094e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1c164:	e617      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1c166:	485f      	ldr	r0, [pc, #380]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c168:	f7f4 fbc8 	bl	108fc <sdc_hci_cmd_le_read_max_data_length>
   1c16c:	e64f      	b.n	1be0e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1c16e:	495d      	ldr	r1, [pc, #372]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c170:	f7f4 fbc6 	bl	10900 <sdc_hci_cmd_le_read_phy>
   1c174:	e62c      	b.n	1bdd0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1c176:	f7f4 fbdd 	bl	10934 <sdc_hci_cmd_le_set_default_phy>
   1c17a:	e60c      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1c17c:	f7f4 fbe1 	bl	10942 <sdc_hci_cmd_le_set_phy>
   1c180:	e5e4      	b.n	1bd4c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1c182:	4858      	ldr	r0, [pc, #352]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c184:	f7f4 fbc4 	bl	10910 <sdc_hci_cmd_le_read_transmit_power>
   1c188:	e612      	b.n	1bdb0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1c18a:	f7f4 fbdc 	bl	10946 <sdc_hci_cmd_le_set_privacy_mode>
   1c18e:	e602      	b.n	1bd96 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1c190:	f64f 4309 	movw	r3, #64521	; 0xfc09
   1c194:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1c196:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1c19a:	d81f      	bhi.n	1c1dc <hci_internal_cmd_put+0x4f4>
   1c19c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1c1a0:	f43f add0 	beq.w	1bd44 <hci_internal_cmd_put+0x5c>
   1c1a4:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1c1a8:	3b01      	subs	r3, #1
   1c1aa:	2b08      	cmp	r3, #8
   1c1ac:	f63f adca 	bhi.w	1bd44 <hci_internal_cmd_put+0x5c>
   1c1b0:	a201      	add	r2, pc, #4	; (adr r2, 1c1b8 <hci_internal_cmd_put+0x4d0>)
   1c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c1b6:	bf00      	nop
   1c1b8:	0001c1ff 	.word	0x0001c1ff
   1c1bc:	0001c22d 	.word	0x0001c22d
   1c1c0:	0001bd45 	.word	0x0001bd45
   1c1c4:	0001bd45 	.word	0x0001bd45
   1c1c8:	0001bd45 	.word	0x0001bd45
   1c1cc:	0001c28f 	.word	0x0001c28f
   1c1d0:	0001bd45 	.word	0x0001bd45
   1c1d4:	0001bd45 	.word	0x0001bd45
   1c1d8:	0001c285 	.word	0x0001c285
   1c1dc:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   1c1e0:	b29b      	uxth	r3, r3
   1c1e2:	2b04      	cmp	r3, #4
   1c1e4:	f63f adae 	bhi.w	1bd44 <hci_internal_cmd_put+0x5c>
   1c1e8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1c1ec:	3b01      	subs	r3, #1
   1c1ee:	2b04      	cmp	r3, #4
   1c1f0:	f63f ada8 	bhi.w	1bd44 <hci_internal_cmd_put+0x5c>
   1c1f4:	e8df f003 	tbb	[pc, r3]
   1c1f8:	5855524f 	.word	0x5855524f
   1c1fc:	5b          	.byte	0x5b
   1c1fd:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1c1fe:	4839      	ldr	r0, [pc, #228]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c200:	f7e8 fee0 	bl	4fc4 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1c204:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1c206:	f242 0219 	movw	r2, #8217	; 0x2019
   1c20a:	4296      	cmp	r6, r2
   1c20c:	dc5f      	bgt.n	1c2ce <hci_internal_cmd_put+0x5e6>
   1c20e:	f242 020c 	movw	r2, #8204	; 0x200c
   1c212:	4296      	cmp	r6, r2
   1c214:	dc4e      	bgt.n	1c2b4 <hci_internal_cmd_put+0x5cc>
   1c216:	f240 4206 	movw	r2, #1030	; 0x406
   1c21a:	4296      	cmp	r6, r2
   1c21c:	f43f ad96 	beq.w	1bd4c <hci_internal_cmd_put+0x64>
   1c220:	f240 421d 	movw	r2, #1053	; 0x41d
   1c224:	4296      	cmp	r6, r2
   1c226:	f43f ad91 	beq.w	1bd4c <hci_internal_cmd_put+0x64>
   1c22a:	e66f      	b.n	1bf0c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1c22c:	482d      	ldr	r0, [pc, #180]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c22e:	2202      	movs	r2, #2
   1c230:	2100      	movs	r1, #0
   1c232:	f004 fa2a 	bl	2068a <memset>
	cmds->read_version_info = 1;
   1c236:	79e3      	ldrb	r3, [r4, #7]
   1c238:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1c23c:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1c240:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1c242:	7a23      	ldrb	r3, [r4, #8]
   1c244:	f023 0305 	bic.w	r3, r3, #5
   1c248:	f043 0305 	orr.w	r3, r3, #5
   1c24c:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1c24e:	f242 0319 	movw	r3, #8217	; 0x2019
   1c252:	429e      	cmp	r6, r3
   1c254:	dc0f      	bgt.n	1c276 <hci_internal_cmd_put+0x58e>
   1c256:	f242 030c 	movw	r3, #8204	; 0x200c
   1c25a:	429e      	cmp	r6, r3
   1c25c:	f73f ae44 	bgt.w	1bee8 <hci_internal_cmd_put+0x200>
   1c260:	f240 4306 	movw	r3, #1030	; 0x406
   1c264:	429e      	cmp	r6, r3
   1c266:	d004      	beq.n	1c272 <hci_internal_cmd_put+0x58a>
   1c268:	f240 431d 	movw	r3, #1053	; 0x41d
   1c26c:	429e      	cmp	r6, r3
   1c26e:	f47f ae3b 	bne.w	1bee8 <hci_internal_cmd_put+0x200>
   1c272:	2000      	movs	r0, #0
   1c274:	e56a      	b.n	1bd4c <hci_internal_cmd_put+0x64>
   1c276:	f242 0332 	movw	r3, #8242	; 0x2032
   1c27a:	429e      	cmp	r6, r3
   1c27c:	d0f9      	beq.n	1c272 <hci_internal_cmd_put+0x58a>
   1c27e:	f242 0343 	movw	r3, #8259	; 0x2043
   1c282:	e7f3      	b.n	1c26c <hci_internal_cmd_put+0x584>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1c284:	4817      	ldr	r0, [pc, #92]	; (1c2e4 <hci_internal_cmd_put+0x5fc>)
   1c286:	f7f4 fad2 	bl	1082e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1c28a:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1c28c:	e7bb      	b.n	1c206 <hci_internal_cmd_put+0x51e>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1c28e:	f7f4 fb15 	bl	108bc <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1c292:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1c294:	e7b7      	b.n	1c206 <hci_internal_cmd_put+0x51e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1c296:	f7f4 fabd 	bl	10814 <sdc_hci_cmd_vs_llpm_mode_set>
   1c29a:	e57c      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1c29c:	f7f4 fa8e 	bl	107bc <sdc_hci_cmd_vs_conn_update>
   1c2a0:	e579      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1c2a2:	f7f4 fa83 	bl	107ac <sdc_hci_cmd_vs_conn_event_extend>
   1c2a6:	e576      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1c2a8:	f7f4 fabc 	bl	10824 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1c2ac:	e573      	b.n	1bd96 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1c2ae:	f7f4 faaf 	bl	10810 <sdc_hci_cmd_vs_event_length_set>
   1c2b2:	e570      	b.n	1bd96 <hci_internal_cmd_put+0xae>
   1c2b4:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1c2b8:	3a0d      	subs	r2, #13
   1c2ba:	2101      	movs	r1, #1
   1c2bc:	b292      	uxth	r2, r2
   1c2be:	fa01 f202 	lsl.w	r2, r1, r2
   1c2c2:	f241 2141 	movw	r1, #4673	; 0x1241
   1c2c6:	420a      	tst	r2, r1
   1c2c8:	f43f ae20 	beq.w	1bf0c <hci_internal_cmd_put+0x224>
   1c2cc:	e53e      	b.n	1bd4c <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1c2ce:	f242 0232 	movw	r2, #8242	; 0x2032
   1c2d2:	4296      	cmp	r6, r2
   1c2d4:	f43f ad3a 	beq.w	1bd4c <hci_internal_cmd_put+0x64>
   1c2d8:	f242 0243 	movw	r2, #8259	; 0x2043
   1c2dc:	e7a2      	b.n	1c224 <hci_internal_cmd_put+0x53c>
		return -NRF_EPERM;
   1c2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c2e2:	e53f      	b.n	1bd64 <hci_internal_cmd_put+0x7c>
   1c2e4:	2000433c 	.word	0x2000433c

0001c2e8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1c2e8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1c2ea:	4c07      	ldr	r4, [pc, #28]	; (1c308 <hci_internal_evt_get+0x20>)
   1c2ec:	7823      	ldrb	r3, [r4, #0]
   1c2ee:	b13b      	cbz	r3, 1c300 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1c2f0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1c2f2:	1c61      	adds	r1, r4, #1
   1c2f4:	3202      	adds	r2, #2
   1c2f6:	f004 f99d 	bl	20634 <memcpy>
		cmd_complete_or_status.occurred = false;
   1c2fa:	2000      	movs	r0, #0
   1c2fc:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1c2fe:	bd10      	pop	{r4, pc}
   1c300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1c304:	f7f4 ba35 	b.w	10772 <sdc_hci_evt_get>
   1c308:	20004335 	.word	0x20004335

0001c30c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1c310:	4c0b      	ldr	r4, [pc, #44]	; (1c340 <bt_rand+0x34>)
   1c312:	6823      	ldr	r3, [r4, #0]
{
   1c314:	4605      	mov	r5, r0
   1c316:	460e      	mov	r6, r1
   1c318:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1c31a:	b13b      	cbz	r3, 1c32c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1c31c:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c31e:	6883      	ldr	r3, [r0, #8]
   1c320:	b2b2      	uxth	r2, r6
   1c322:	4629      	mov	r1, r5
   1c324:	681b      	ldr	r3, [r3, #0]
}
   1c326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c32a:	4718      	bx	r3
   1c32c:	4805      	ldr	r0, [pc, #20]	; (1c344 <bt_rand+0x38>)
   1c32e:	f000 ff55 	bl	1d1dc <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c332:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1c334:	2800      	cmp	r0, #0
   1c336:	d1f1      	bne.n	1c31c <bt_rand+0x10>
}
   1c338:	f06f 0012 	mvn.w	r0, #18
   1c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c340:	20002d58 	.word	0x20002d58
   1c344:	00025075 	.word	0x00025075

0001c348 <m_assert_handler>:
	 */
	return 1;
}

static void m_assert_handler(const char *const file, const uint32_t line)
{
   1c348:	b538      	push	{r3, r4, r5, lr}
   1c34a:	4b0b      	ldr	r3, [pc, #44]	; (1c378 <m_assert_handler+0x30>)
   1c34c:	4c0b      	ldr	r4, [pc, #44]	; (1c37c <m_assert_handler+0x34>)
   1c34e:	1ae4      	subs	r4, r4, r3
   1c350:	460d      	mov	r5, r1
   1c352:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1c354:	f7f8 f9e8 	bl	14728 <log_strdup>
   1c358:	01a4      	lsls	r4, r4, #6
   1c35a:	f044 0401 	orr.w	r4, r4, #1
   1c35e:	4601      	mov	r1, r0
   1c360:	4623      	mov	r3, r4
   1c362:	4807      	ldr	r0, [pc, #28]	; (1c380 <m_assert_handler+0x38>)
   1c364:	462a      	mov	r2, r5
   1c366:	f003 fd5f 	bl	1fe28 <log_2>
	k_oops();
   1c36a:	4040      	eors	r0, r0
   1c36c:	f380 8811 	msr	BASEPRI, r0
   1c370:	f04f 0003 	mov.w	r0, #3
   1c374:	df02      	svc	2
}
   1c376:	bd38      	pop	{r3, r4, r5, pc}
   1c378:	00022cf0 	.word	0x00022cf0
   1c37c:	00022d70 	.word	0x00022d70
   1c380:	0002523c 	.word	0x0002523c

0001c384 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1c384:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1c386:	2314      	movs	r3, #20
   1c388:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c38c:	4a10      	ldr	r2, [pc, #64]	; (1c3d0 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1c38e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1c390:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c392:	2119      	movs	r1, #25
   1c394:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1c396:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1c39a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1c39e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c3a2:	f7e8 f987 	bl	46b4 <mpsl_init>
	if (err) {
   1c3a6:	4604      	mov	r4, r0
   1c3a8:	b970      	cbnz	r0, 1c3c8 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c3aa:	4601      	mov	r1, r0
   1c3ac:	462a      	mov	r2, r5
   1c3ae:	2008      	movs	r0, #8
   1c3b0:	f7f9 f8ac 	bl	1550c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c3b4:	462a      	mov	r2, r5
   1c3b6:	4621      	mov	r1, r4
   1c3b8:	200b      	movs	r0, #11
   1c3ba:	f7f9 f8a7 	bl	1550c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c3be:	462a      	mov	r2, r5
   1c3c0:	4621      	mov	r1, r4
   1c3c2:	4628      	mov	r0, r5
   1c3c4:	f7f9 f8a2 	bl	1550c <z_arm_irq_priority_set>
		return err;
	}
#endif

	return 0;
}
   1c3c8:	4620      	mov	r0, r4
   1c3ca:	b003      	add	sp, #12
   1c3cc:	bd30      	pop	{r4, r5, pc}
   1c3ce:	bf00      	nop
   1c3d0:	0001c349 	.word	0x0001c349

0001c3d4 <mpsl_low_prio_irq_handler>:
   1c3d4:	4801      	ldr	r0, [pc, #4]	; (1c3dc <mpsl_low_prio_irq_handler+0x8>)
   1c3d6:	f001 bd83 	b.w	1dee0 <z_impl_k_sem_give>
   1c3da:	bf00      	nop
   1c3dc:	20000988 	.word	0x20000988

0001c3e0 <signal_thread>:
{
   1c3e0:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c3e2:	4c09      	ldr	r4, [pc, #36]	; (1c408 <signal_thread+0x28>)
   1c3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c3ec:	4620      	mov	r0, r4
   1c3ee:	f001 fd9d 	bl	1df2c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c3f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c3fa:	f7ff fab7 	bl	1b96c <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1c3fe:	f7f3 fdb8 	bl	ff72 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1c402:	f7ff fabb 	bl	1b97c <multithreading_lock_release>
	while (true) {
   1c406:	e7ed      	b.n	1c3e4 <signal_thread+0x4>
   1c408:	20000988 	.word	0x20000988

0001c40c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1c40c:	b530      	push	{r4, r5, lr}
   1c40e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c410:	4d0f      	ldr	r5, [pc, #60]	; (1c450 <mpsl_signal_thread_init+0x44>)
   1c412:	4910      	ldr	r1, [pc, #64]	; (1c454 <mpsl_signal_thread_init+0x48>)
   1c414:	2200      	movs	r2, #0
   1c416:	2300      	movs	r3, #0
   1c418:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c41c:	2400      	movs	r4, #0
   1c41e:	f06f 0309 	mvn.w	r3, #9
   1c422:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1c426:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c42a:	4b0b      	ldr	r3, [pc, #44]	; (1c458 <mpsl_signal_thread_init+0x4c>)
   1c42c:	9400      	str	r4, [sp, #0]
   1c42e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c432:	4628      	mov	r0, r5
   1c434:	f001 fdee 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1c438:	4908      	ldr	r1, [pc, #32]	; (1c45c <mpsl_signal_thread_init+0x50>)
   1c43a:	4628      	mov	r0, r5
   1c43c:	f006 f892 	bl	22564 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1c440:	4622      	mov	r2, r4
   1c442:	2104      	movs	r1, #4
   1c444:	2019      	movs	r0, #25
   1c446:	f7f9 f861 	bl	1550c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1c44a:	4620      	mov	r0, r4
   1c44c:	b009      	add	sp, #36	; 0x24
   1c44e:	bd30      	pop	{r4, r5, pc}
   1c450:	20002338 	.word	0x20002338
   1c454:	200055c0 	.word	0x200055c0
   1c458:	0001c3e1 	.word	0x0001c3e1
   1c45c:	00025250 	.word	0x00025250

0001c460 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c460:	4b01      	ldr	r3, [pc, #4]	; (1c468 <mpsl_hfclk_callback+0x8>)
   1c462:	2000      	movs	r0, #0
   1c464:	681b      	ldr	r3, [r3, #0]
   1c466:	4718      	bx	r3
   1c468:	20002d5c 	.word	0x20002d5c

0001c46c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1c46c:	b120      	cbz	r0, 1c478 <nrfx_clock_start+0xc>
   1c46e:	2801      	cmp	r0, #1
   1c470:	d106      	bne.n	1c480 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1c472:	4804      	ldr	r0, [pc, #16]	; (1c484 <nrfx_clock_start+0x18>)
   1c474:	f7e7 bf86 	b.w	4384 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c478:	4b03      	ldr	r3, [pc, #12]	; (1c488 <nrfx_clock_start+0x1c>)
   1c47a:	2001      	movs	r0, #1
   1c47c:	681b      	ldr	r3, [r3, #0]
   1c47e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1c480:	4770      	bx	lr
   1c482:	bf00      	nop
   1c484:	0001c461 	.word	0x0001c461
   1c488:	20002d5c 	.word	0x20002d5c

0001c48c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1c48c:	4b01      	ldr	r3, [pc, #4]	; (1c494 <nrfx_clock_init+0x8>)
   1c48e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1c490:	4801      	ldr	r0, [pc, #4]	; (1c498 <nrfx_clock_init+0xc>)
   1c492:	4770      	bx	lr
   1c494:	20002d5c 	.word	0x20002d5c
   1c498:	0bad0000 	.word	0x0bad0000

0001c49c <__NVIC_SystemReset>:
   1c49c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c4a0:	4905      	ldr	r1, [pc, #20]	; (1c4b8 <__NVIC_SystemReset+0x1c>)
   1c4a2:	4b06      	ldr	r3, [pc, #24]	; (1c4bc <__NVIC_SystemReset+0x20>)
   1c4a4:	68ca      	ldr	r2, [r1, #12]
   1c4a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c4aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c4ac:	60cb      	str	r3, [r1, #12]
   1c4ae:	f3bf 8f4f 	dsb	sy
    __NOP();
   1c4b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c4b4:	e7fd      	b.n	1c4b2 <__NVIC_SystemReset+0x16>
   1c4b6:	bf00      	nop
   1c4b8:	e000ed00 	.word	0xe000ed00
   1c4bc:	05fa0004 	.word	0x05fa0004

0001c4c0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c4c0:	4b06      	ldr	r3, [pc, #24]	; (1c4dc <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c4c2:	681b      	ldr	r3, [r3, #0]
   1c4c4:	2b08      	cmp	r3, #8
   1c4c6:	d106      	bne.n	1c4d6 <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c4c8:	4b05      	ldr	r3, [pc, #20]	; (1c4e0 <nrf52_errata_136+0x20>)
   1c4ca:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c4cc:	2b05      	cmp	r3, #5
   1c4ce:	d802      	bhi.n	1c4d6 <nrf52_errata_136+0x16>
   1c4d0:	4a04      	ldr	r2, [pc, #16]	; (1c4e4 <nrf52_errata_136+0x24>)
   1c4d2:	5cd0      	ldrb	r0, [r2, r3]
   1c4d4:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1c4d6:	2000      	movs	r0, #0
    #endif
}
   1c4d8:	4770      	bx	lr
   1c4da:	bf00      	nop
   1c4dc:	10000130 	.word	0x10000130
   1c4e0:	10000134 	.word	0x10000134
   1c4e4:	00025271 	.word	0x00025271

0001c4e8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c4e8:	4b06      	ldr	r3, [pc, #24]	; (1c504 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c4ea:	681b      	ldr	r3, [r3, #0]
   1c4ec:	2b08      	cmp	r3, #8
   1c4ee:	d106      	bne.n	1c4fe <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c4f0:	4b05      	ldr	r3, [pc, #20]	; (1c508 <nrf52_errata_103+0x20>)
   1c4f2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c4f4:	2b05      	cmp	r3, #5
   1c4f6:	d802      	bhi.n	1c4fe <nrf52_errata_103+0x16>
   1c4f8:	4a04      	ldr	r2, [pc, #16]	; (1c50c <nrf52_errata_103+0x24>)
   1c4fa:	5cd0      	ldrb	r0, [r2, r3]
   1c4fc:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1c4fe:	2000      	movs	r0, #0
    #endif
}
   1c500:	4770      	bx	lr
   1c502:	bf00      	nop
   1c504:	10000130 	.word	0x10000130
   1c508:	10000134 	.word	0x10000134
   1c50c:	00025277 	.word	0x00025277

0001c510 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c510:	4a02      	ldr	r2, [pc, #8]	; (1c51c <nvmc_wait+0xc>)
   1c512:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1c516:	2b00      	cmp	r3, #0
   1c518:	d0fb      	beq.n	1c512 <nvmc_wait+0x2>
}
   1c51a:	4770      	bx	lr
   1c51c:	4001e000 	.word	0x4001e000

0001c520 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c520:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1c522:	f7ff ffcd 	bl	1c4c0 <nrf52_errata_136>
   1c526:	b140      	cbz	r0, 1c53a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1c528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c52c:	2200      	movs	r2, #0
   1c52e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c532:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c536:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1c53a:	f7ff ffc1 	bl	1c4c0 <nrf52_errata_136>
   1c53e:	2800      	cmp	r0, #0
   1c540:	d046      	beq.n	1c5d0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c546:	4b57      	ldr	r3, [pc, #348]	; (1c6a4 <SystemInit+0x184>)
   1c548:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c54c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c550:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c554:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c558:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c55c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c560:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c564:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c568:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c56c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c570:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c574:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c578:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c57c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c580:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c584:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c588:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c58c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c590:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c594:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c598:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c59c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c5a0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c5a4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c5a8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c5ac:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c5b0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c5b4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c5b8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c5bc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c5c0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c5c4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c5c8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c5cc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c5d0:	f7ff ff8a 	bl	1c4e8 <nrf52_errata_103>
   1c5d4:	b110      	cbz	r0, 1c5dc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c5d6:	4b34      	ldr	r3, [pc, #208]	; (1c6a8 <SystemInit+0x188>)
   1c5d8:	4a34      	ldr	r2, [pc, #208]	; (1c6ac <SystemInit+0x18c>)
   1c5da:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c5dc:	f7ff ff84 	bl	1c4e8 <nrf52_errata_103>
   1c5e0:	b118      	cbz	r0, 1c5ea <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c5e2:	4b33      	ldr	r3, [pc, #204]	; (1c6b0 <SystemInit+0x190>)
   1c5e4:	22fb      	movs	r2, #251	; 0xfb
   1c5e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c5ea:	f7ff ff7d 	bl	1c4e8 <nrf52_errata_103>
   1c5ee:	b148      	cbz	r0, 1c604 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c5f0:	4930      	ldr	r1, [pc, #192]	; (1c6b4 <SystemInit+0x194>)
   1c5f2:	4b31      	ldr	r3, [pc, #196]	; (1c6b8 <SystemInit+0x198>)
   1c5f4:	680a      	ldr	r2, [r1, #0]
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	f022 020f 	bic.w	r2, r2, #15
   1c5fc:	f003 030f 	and.w	r3, r3, #15
   1c600:	4313      	orrs	r3, r2
   1c602:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c604:	f7ff ff70 	bl	1c4e8 <nrf52_errata_103>
   1c608:	b118      	cbz	r0, 1c612 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c60a:	4b2c      	ldr	r3, [pc, #176]	; (1c6bc <SystemInit+0x19c>)
   1c60c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c610:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c612:	f7ff ff55 	bl	1c4c0 <nrf52_errata_136>
   1c616:	b148      	cbz	r0, 1c62c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c61c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c620:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c622:	bf44      	itt	mi
   1c624:	f06f 0201 	mvnmi.w	r2, #1
   1c628:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1c62c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1c630:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1c634:	07db      	lsls	r3, r3, #31
   1c636:	d514      	bpl.n	1c662 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c638:	4821      	ldr	r0, [pc, #132]	; (1c6c0 <SystemInit+0x1a0>)
   1c63a:	2301      	movs	r3, #1
   1c63c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1c640:	f7ff ff66 	bl	1c510 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1c644:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1c648:	f023 0301 	bic.w	r3, r3, #1
   1c64c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1c650:	f7ff ff5e 	bl	1c510 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c654:	2300      	movs	r3, #0
   1c656:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1c65a:	f7ff ff59 	bl	1c510 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1c65e:	f7ff ff1d 	bl	1c49c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c662:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1c666:	2b00      	cmp	r3, #0
   1c668:	db03      	blt.n	1c672 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c66a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c66e:	2b00      	cmp	r3, #0
   1c670:	da14      	bge.n	1c69c <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c672:	4913      	ldr	r1, [pc, #76]	; (1c6c0 <SystemInit+0x1a0>)
   1c674:	2301      	movs	r3, #1
   1c676:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c67a:	f7ff ff49 	bl	1c510 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c67e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c682:	2412      	movs	r4, #18
   1c684:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c688:	f7ff ff42 	bl	1c510 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c68c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c690:	f7ff ff3e 	bl	1c510 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c694:	2300      	movs	r3, #0
   1c696:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1c69a:	e7de      	b.n	1c65a <SystemInit+0x13a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c69c:	4b09      	ldr	r3, [pc, #36]	; (1c6c4 <SystemInit+0x1a4>)
   1c69e:	4a0a      	ldr	r2, [pc, #40]	; (1c6c8 <SystemInit+0x1a8>)
   1c6a0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c6a2:	bd10      	pop	{r4, pc}
   1c6a4:	4000c000 	.word	0x4000c000
   1c6a8:	4000568c 	.word	0x4000568c
   1c6ac:	00038148 	.word	0x00038148
   1c6b0:	4000f000 	.word	0x4000f000
   1c6b4:	40000ee4 	.word	0x40000ee4
   1c6b8:	10000258 	.word	0x10000258
   1c6bc:	40029640 	.word	0x40029640
   1c6c0:	4001e000 	.word	0x4001e000
   1c6c4:	2000068c 	.word	0x2000068c
   1c6c8:	03d09000 	.word	0x03d09000

0001c6cc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1c6cc:	2301      	movs	r3, #1
   1c6ce:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1c6d2:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c6d6:	d012      	beq.n	1c6fe <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1c6d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6dc:	f3ef 8111 	mrs	r1, BASEPRI
   1c6e0:	f383 8811 	msr	BASEPRI, r3
   1c6e4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1c6e8:	4a06      	ldr	r2, [pc, #24]	; (1c704 <nrfx_gpiote_channel_free+0x38>)
   1c6ea:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1c6ec:	ea23 0000 	bic.w	r0, r3, r0
   1c6f0:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1c6f2:	f381 8811 	msr	BASEPRI, r1
   1c6f6:	f3bf 8f6f 	isb	sy
   1c6fa:	4803      	ldr	r0, [pc, #12]	; (1c708 <nrfx_gpiote_channel_free+0x3c>)
   1c6fc:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1c6fe:	4803      	ldr	r0, [pc, #12]	; (1c70c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c700:	4770      	bx	lr
   1c702:	bf00      	nop
   1c704:	20002d60 	.word	0x20002d60
   1c708:	0bad0000 	.word	0x0bad0000
   1c70c:	0bad0004 	.word	0x0bad0004

0001c710 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c714:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1c716:	f8df e060 	ldr.w	lr, [pc, #96]	; 1c778 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1c71a:	4816      	ldr	r0, [pc, #88]	; (1c774 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1c71c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1c77c <nrfx_gpiote_channel_alloc+0x6c>
{
   1c720:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1c722:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1c724:	2601      	movs	r6, #1
   1c726:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1c728:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c72c:	f3ef 8c11 	mrs	ip, BASEPRI
   1c730:	f381 8811 	msr	BASEPRI, r1
   1c734:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1c738:	fa22 f103 	lsr.w	r1, r2, r3
   1c73c:	07c9      	lsls	r1, r1, #31
   1c73e:	d50a      	bpl.n	1c756 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1c740:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1c744:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1c748:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1c74a:	bf01      	itttt	eq
   1c74c:	4339      	orreq	r1, r7
   1c74e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1c752:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1c754:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1c756:	f38c 8811 	msr	BASEPRI, ip
   1c75a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1c75e:	4540      	cmp	r0, r8
   1c760:	d005      	beq.n	1c76e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1c762:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1c766:	439a      	bics	r2, r3
   1c768:	f104 0401 	add.w	r4, r4, #1
   1c76c:	d1db      	bne.n	1c726 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c772:	bf00      	nop
   1c774:	0bad0002 	.word	0x0bad0002
   1c778:	20002d60 	.word	0x20002d60
   1c77c:	0bad0000 	.word	0x0bad0000

0001c780 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1c780:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1c782:	4b34      	ldr	r3, [pc, #208]	; (1c854 <twi_rx_start_transfer+0xd4>)
   1c784:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c786:	2300      	movs	r3, #0
   1c788:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1c78c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1c790:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1c794:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1c798:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1c79c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1c7a0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1c7a4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1c7a8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1c7aa:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1c7ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1c7b0:	2b01      	cmp	r3, #1
{
   1c7b2:	4604      	mov	r4, r0
   1c7b4:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1c7b6:	d117      	bne.n	1c7e8 <twi_rx_start_transfer+0x68>
   1c7b8:	6a0b      	ldr	r3, [r1, #32]
   1c7ba:	065b      	lsls	r3, r3, #25
   1c7bc:	d414      	bmi.n	1c7e8 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1c7be:	2302      	movs	r3, #2
   1c7c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7c4:	2301      	movs	r3, #1
   1c7c6:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1c7c8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1c7cc:	2a02      	cmp	r2, #2
   1c7ce:	bf18      	it	ne
   1c7d0:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1c7d2:	682b      	ldr	r3, [r5, #0]
   1c7d4:	b193      	cbz	r3, 1c7fc <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1c7d6:	f240 2386 	movw	r3, #646	; 0x286
   1c7da:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1c7dc:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1c7de:	481e      	ldr	r0, [pc, #120]	; (1c858 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1c7e0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1c7e4:	b003      	add	sp, #12
   1c7e6:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1c7e8:	2301      	movs	r3, #1
   1c7ea:	e7e9      	b.n	1c7c0 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1c7ec:	4629      	mov	r1, r5
   1c7ee:	4620      	mov	r0, r4
   1c7f0:	f005 fb89 	bl	21f06 <twi_transfer>
        while ((hw_timeout > 0) &&
   1c7f4:	b128      	cbz	r0, 1c802 <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1c7f6:	9b01      	ldr	r3, [sp, #4]
   1c7f8:	3b01      	subs	r3, #1
   1c7fa:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1c7fc:	9b01      	ldr	r3, [sp, #4]
   1c7fe:	2b00      	cmp	r3, #0
   1c800:	dcf4      	bgt.n	1c7ec <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1c802:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1c806:	b95b      	cbnz	r3, 1c820 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1c808:	4813      	ldr	r0, [pc, #76]	; (1c858 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1c80a:	9b01      	ldr	r3, [sp, #4]
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	dce9      	bgt.n	1c7e4 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1c810:	2300      	movs	r3, #0
   1c812:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1c816:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1c818:	4810      	ldr	r0, [pc, #64]	; (1c85c <twi_rx_start_transfer+0xdc>)
   1c81a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1c81e:	e7e1      	b.n	1c7e4 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1c820:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1c824:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1c828:	b18b      	cbz	r3, 1c84e <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1c82a:	4a0d      	ldr	r2, [pc, #52]	; (1c860 <twi_rx_start_transfer+0xe0>)
   1c82c:	480b      	ldr	r0, [pc, #44]	; (1c85c <twi_rx_start_transfer+0xdc>)
   1c82e:	f013 0f01 	tst.w	r3, #1
   1c832:	bf18      	it	ne
   1c834:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1c836:	f013 0f02 	tst.w	r3, #2
   1c83a:	f102 0201 	add.w	r2, r2, #1
   1c83e:	bf18      	it	ne
   1c840:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1c842:	f013 0f04 	tst.w	r3, #4
   1c846:	4b07      	ldr	r3, [pc, #28]	; (1c864 <twi_rx_start_transfer+0xe4>)
   1c848:	bf18      	it	ne
   1c84a:	4618      	movne	r0, r3
   1c84c:	e7dd      	b.n	1c80a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1c84e:	4803      	ldr	r0, [pc, #12]	; (1c85c <twi_rx_start_transfer+0xdc>)
   1c850:	e7db      	b.n	1c80a <twi_rx_start_transfer+0x8a>
   1c852:	bf00      	nop
   1c854:	000186a0 	.word	0x000186a0
   1c858:	0bad0000 	.word	0x0bad0000
   1c85c:	0bad0001 	.word	0x0bad0001
   1c860:	0bae0000 	.word	0x0bae0000
   1c864:	0bae0002 	.word	0x0bae0002

0001c868 <twi_tx_start_transfer>:
{
   1c868:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   1c86a:	4b30      	ldr	r3, [pc, #192]	; (1c92c <twi_tx_start_transfer+0xc4>)
   1c86c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c86e:	2300      	movs	r3, #0
   1c870:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1c874:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1c878:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1c87c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1c880:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1c884:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1c888:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1c88c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
   1c890:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   1c894:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1c896:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c89a:	2301      	movs	r3, #1
   1c89c:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1c89e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1c8a2:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1c8a4:	429a      	cmp	r2, r3
   1c8a6:	bf18      	it	ne
   1c8a8:	6083      	strne	r3, [r0, #8]
{
   1c8aa:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   1c8ac:	f005 fb0e 	bl	21ecc <twi_send_byte>
    if (p_cb->handler)
   1c8b0:	682b      	ldr	r3, [r5, #0]
   1c8b2:	b183      	cbz	r3, 1c8d6 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1c8b4:	f240 2386 	movw	r3, #646	; 0x286
   1c8b8:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1c8ba:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1c8bc:	481c      	ldr	r0, [pc, #112]	; (1c930 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1c8be:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1c8c2:	b003      	add	sp, #12
   1c8c4:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1c8c6:	4629      	mov	r1, r5
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f005 fb1c 	bl	21f06 <twi_transfer>
        while ((hw_timeout > 0) &&
   1c8ce:	b128      	cbz	r0, 1c8dc <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1c8d0:	9b01      	ldr	r3, [sp, #4]
   1c8d2:	3b01      	subs	r3, #1
   1c8d4:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1c8d6:	9b01      	ldr	r3, [sp, #4]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	dcf4      	bgt.n	1c8c6 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1c8dc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1c8e0:	b95b      	cbnz	r3, 1c8fa <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1c8e2:	4813      	ldr	r0, [pc, #76]	; (1c930 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1c8e4:	9b01      	ldr	r3, [sp, #4]
   1c8e6:	2b00      	cmp	r3, #0
   1c8e8:	dceb      	bgt.n	1c8c2 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1c8ea:	2300      	movs	r3, #0
   1c8ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1c8f0:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1c8f2:	4810      	ldr	r0, [pc, #64]	; (1c934 <twi_tx_start_transfer+0xcc>)
   1c8f4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1c8f8:	e7e3      	b.n	1c8c2 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1c8fa:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1c8fe:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1c902:	b18b      	cbz	r3, 1c928 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1c904:	4a0c      	ldr	r2, [pc, #48]	; (1c938 <twi_tx_start_transfer+0xd0>)
   1c906:	480b      	ldr	r0, [pc, #44]	; (1c934 <twi_tx_start_transfer+0xcc>)
   1c908:	f013 0f01 	tst.w	r3, #1
   1c90c:	bf18      	it	ne
   1c90e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1c910:	f013 0f02 	tst.w	r3, #2
   1c914:	f102 0201 	add.w	r2, r2, #1
   1c918:	bf18      	it	ne
   1c91a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1c91c:	f013 0f04 	tst.w	r3, #4
   1c920:	4b06      	ldr	r3, [pc, #24]	; (1c93c <twi_tx_start_transfer+0xd4>)
   1c922:	bf18      	it	ne
   1c924:	4618      	movne	r0, r3
   1c926:	e7dd      	b.n	1c8e4 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1c928:	4802      	ldr	r0, [pc, #8]	; (1c934 <twi_tx_start_transfer+0xcc>)
   1c92a:	e7db      	b.n	1c8e4 <twi_tx_start_transfer+0x7c>
   1c92c:	000186a0 	.word	0x000186a0
   1c930:	0bad0000 	.word	0x0bad0000
   1c934:	0bad0001 	.word	0x0bad0001
   1c938:	0bae0000 	.word	0x0bae0000
   1c93c:	0bae0002 	.word	0x0bae0002

0001c940 <nrfx_twi_init>:
{
   1c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1c944:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1c946:	4d28      	ldr	r5, [pc, #160]	; (1c9e8 <nrfx_twi_init+0xa8>)
   1c948:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1c94c:	fb0c fc07 	mul.w	ip, ip, r7
   1c950:	eb05 040c 	add.w	r4, r5, ip
   1c954:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1c958:	2e00      	cmp	r6, #0
   1c95a:	d142      	bne.n	1c9e2 <nrfx_twi_init+0xa2>
    p_cb->int_mask        = 0;
   1c95c:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1c95e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   1c962:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1c966:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1c96a:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   1c96c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1c96e:	7b4b      	ldrb	r3, [r1, #13]
   1c970:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   1c974:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   1c978:	4b1c      	ldr	r3, [pc, #112]	; (1c9ec <nrfx_twi_init+0xac>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1c97a:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1c97c:	ea4f 1c56 	mov.w	ip, r6, lsr #5
        case 1: return NRF_P1;
   1c980:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1c984:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1c988:	bf0c      	ite	eq
   1c98a:	469c      	moveq	ip, r3
   1c98c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c990:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1c994:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1c998:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1c99c:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1c99e:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1c9a2:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   1c9a6:	f1b8 0f01 	cmp.w	r8, #1
   1c9aa:	bf18      	it	ne
   1c9ac:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c9b0:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   1c9b4:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1c9b8:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1c9ba:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1c9be:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1c9c2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1c9c6:	b11a      	cbz	r2, 1c9d0 <nrfx_twi_init+0x90>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1c9c8:	f340 3007 	sbfx	r0, r0, #12, #8
   1c9cc:	f7f8 fd8e 	bl	154ec <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1c9d0:	233c      	movs	r3, #60	; 0x3c
   1c9d2:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1c9d6:	4806      	ldr	r0, [pc, #24]	; (1c9f0 <nrfx_twi_init+0xb0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1c9d8:	2301      	movs	r3, #1
   1c9da:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1c9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1c9e2:	4804      	ldr	r0, [pc, #16]	; (1c9f4 <nrfx_twi_init+0xb4>)
   1c9e4:	e7fb      	b.n	1c9de <nrfx_twi_init+0x9e>
   1c9e6:	bf00      	nop
   1c9e8:	20002dc0 	.word	0x20002dc0
   1c9ec:	50000300 	.word	0x50000300
   1c9f0:	0bad0000 	.word	0x0bad0000
   1c9f4:	0bad0005 	.word	0x0bad0005

0001c9f8 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1c9f8:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1c9fa:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1c9fc:	2105      	movs	r1, #5
   1c9fe:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1ca02:	4a04      	ldr	r2, [pc, #16]	; (1ca14 <nrfx_twi_enable+0x1c>)
   1ca04:	213c      	movs	r1, #60	; 0x3c
   1ca06:	fb01 2303 	mla	r3, r1, r3, r2
   1ca0a:	2202      	movs	r2, #2
   1ca0c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1ca10:	4770      	bx	lr
   1ca12:	bf00      	nop
   1ca14:	20002dc0 	.word	0x20002dc0

0001ca18 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ca18:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1ca1a:	490a      	ldr	r1, [pc, #40]	; (1ca44 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ca1c:	7902      	ldrb	r2, [r0, #4]
   1ca1e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1ca22:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   1ca26:	f021 0103 	bic.w	r1, r1, #3
   1ca2a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ca2e:	2100      	movs	r1, #0
   1ca30:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ca34:	4b04      	ldr	r3, [pc, #16]	; (1ca48 <nrfx_twi_disable+0x30>)
   1ca36:	213c      	movs	r1, #60	; 0x3c
   1ca38:	fb01 3302 	mla	r3, r1, r2, r3
   1ca3c:	2201      	movs	r2, #1
   1ca3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1ca42:	4770      	bx	lr
   1ca44:	00044286 	.word	0x00044286
   1ca48:	20002dc0 	.word	0x20002dc0

0001ca4c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ca50:	4e32      	ldr	r6, [pc, #200]	; (1cb1c <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ca52:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1ca56:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ca5a:	233c      	movs	r3, #60	; 0x3c
   1ca5c:	fb03 6308 	mla	r3, r3, r8, r6
{
   1ca60:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ca62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1ca66:	2b01      	cmp	r3, #1
{
   1ca68:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ca6a:	d104      	bne.n	1ca76 <nrfx_twi_xfer+0x2a>
   1ca6c:	780b      	ldrb	r3, [r1, #0]
   1ca6e:	2b01      	cmp	r3, #1
   1ca70:	d106      	bne.n	1ca80 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   1ca72:	482b      	ldr	r0, [pc, #172]	; (1cb20 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ca74:	e011      	b.n	1ca9a <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1ca76:	2b02      	cmp	r3, #2
   1ca78:	d102      	bne.n	1ca80 <nrfx_twi_xfer+0x34>
   1ca7a:	780b      	ldrb	r3, [r1, #0]
   1ca7c:	2b01      	cmp	r3, #1
   1ca7e:	d1f8      	bne.n	1ca72 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   1ca80:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1ca82:	4b28      	ldr	r3, [pc, #160]	; (1cb24 <nrfx_twi_xfer+0xd8>)
   1ca84:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1ca88:	fb05 6508 	mla	r5, r5, r8, r6
   1ca8c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ca90:	b12b      	cbz	r3, 1ca9e <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ca92:	68ab      	ldr	r3, [r5, #8]
        return err_code;
   1ca94:	4824      	ldr	r0, [pc, #144]	; (1cb28 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   1ca96:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1ca9e:	f087 0304 	eor.w	r3, r7, #4
   1caa2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1caa6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
   1caaa:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1caac:	46a6      	mov	lr, r4
   1caae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1cab2:	f105 0c0c 	add.w	ip, r5, #12
   1cab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1caba:	f8de 3000 	ldr.w	r3, [lr]
   1cabe:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1cac2:	6863      	ldr	r3, [r4, #4]
   1cac4:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1cac6:	68e3      	ldr	r3, [r4, #12]
   1cac8:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
   1caca:	7863      	ldrb	r3, [r4, #1]
   1cacc:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1cad0:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cad2:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1cad6:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cad8:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1cadc:	d019      	beq.n	1cb12 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1cade:	b9b3      	cbnz	r3, 1cb0e <nrfx_twi_xfer+0xc2>
   1cae0:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1cae4:	233c      	movs	r3, #60	; 0x3c
   1cae6:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1caea:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1caec:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1caf0:	4648      	mov	r0, r9
   1caf2:	f7ff feb9 	bl	1c868 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1caf6:	233c      	movs	r3, #60	; 0x3c
   1caf8:	fb03 f808 	mul.w	r8, r3, r8
   1cafc:	eb06 0208 	add.w	r2, r6, r8
   1cb00:	f856 3008 	ldr.w	r3, [r6, r8]
   1cb04:	2b00      	cmp	r3, #0
   1cb06:	d1c8      	bne.n	1ca9a <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   1cb08:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1cb0c:	e7c5      	b.n	1ca9a <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1cb0e:	2701      	movs	r7, #1
   1cb10:	e7e8      	b.n	1cae4 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1cb12:	4651      	mov	r1, sl
   1cb14:	4648      	mov	r0, r9
   1cb16:	f7ff fe33 	bl	1c780 <twi_rx_start_transfer>
   1cb1a:	e7ec      	b.n	1caf6 <nrfx_twi_xfer+0xaa>
   1cb1c:	20002dc0 	.word	0x20002dc0
   1cb20:	0bad0005 	.word	0x0bad0005
   1cb24:	00044286 	.word	0x00044286
   1cb28:	0bad000b 	.word	0x0bad000b

0001cb2c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1cb2e:	4c29      	ldr	r4, [pc, #164]	; (1cbd4 <nrfx_twi_0_irq_handler+0xa8>)
   1cb30:	4829      	ldr	r0, [pc, #164]	; (1cbd8 <nrfx_twi_0_irq_handler+0xac>)
{
   1cb32:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1cb34:	4621      	mov	r1, r4
   1cb36:	f005 f9e6 	bl	21f06 <twi_transfer>
   1cb3a:	46a4      	mov	ip, r4
   1cb3c:	b9d8      	cbnz	r0, 1cb76 <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
   1cb3e:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   1cb42:	6a27      	ldr	r7, [r4, #32]
   1cb44:	b9e6      	cbnz	r6, 1cb80 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1cb46:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1cb48:	1e9a      	subs	r2, r3, #2
   1cb4a:	2a01      	cmp	r2, #1
   1cb4c:	d818      	bhi.n	1cb80 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1cb4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cb50:	69a2      	ldr	r2, [r4, #24]
   1cb52:	4291      	cmp	r1, r2
   1cb54:	d114      	bne.n	1cb80 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1cb56:	69e2      	ldr	r2, [r4, #28]
   1cb58:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1cb5a:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1cb5e:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1cb60:	481d      	ldr	r0, [pc, #116]	; (1cbd8 <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1cb62:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1cb64:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1cb66:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1cb6a:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1cb6e:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1cb70:	d103      	bne.n	1cb7a <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1cb72:	f7ff fe79 	bl	1c868 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1cb76:	b007      	add	sp, #28
   1cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1cb7a:	f7ff fe01 	bl	1c780 <twi_rx_start_transfer>
   1cb7e:	e7fa      	b.n	1cb76 <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
   1cb80:	4d16      	ldr	r5, [pc, #88]	; (1cbdc <nrfx_twi_0_irq_handler+0xb0>)
   1cb82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb84:	ac01      	add	r4, sp, #4
   1cb86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb88:	682b      	ldr	r3, [r5, #0]
   1cb8a:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   1cb8c:	b1f6      	cbz	r6, 1cbcc <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   1cb8e:	4a12      	ldr	r2, [pc, #72]	; (1cbd8 <nrfx_twi_0_irq_handler+0xac>)
   1cb90:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1cb94:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1cb98:	0798      	lsls	r0, r3, #30
   1cb9a:	d50e      	bpl.n	1cbba <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1cb9c:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1cb9e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1cba2:	2300      	movs	r3, #0
   1cba4:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1cba8:	077b      	lsls	r3, r7, #29
   1cbaa:	d501      	bpl.n	1cbb0 <nrfx_twi_0_irq_handler+0x84>
   1cbac:	2e00      	cmp	r6, #0
   1cbae:	d0e2      	beq.n	1cb76 <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
   1cbb0:	e9dc 3100 	ldrd	r3, r1, [ip]
   1cbb4:	4668      	mov	r0, sp
   1cbb6:	4798      	blx	r3
}
   1cbb8:	e7dd      	b.n	1cb76 <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1cbba:	0759      	lsls	r1, r3, #29
   1cbbc:	d501      	bpl.n	1cbc2 <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1cbbe:	2302      	movs	r3, #2
   1cbc0:	e7ed      	b.n	1cb9e <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1cbc2:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1cbc4:	bf4c      	ite	mi
   1cbc6:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1cbc8:	2304      	movpl	r3, #4
   1cbca:	e7e8      	b.n	1cb9e <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
   1cbcc:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1cbd0:	e7e7      	b.n	1cba2 <nrfx_twi_0_irq_handler+0x76>
   1cbd2:	bf00      	nop
   1cbd4:	20002dc0 	.word	0x20002dc0
   1cbd8:	40003000 	.word	0x40003000
   1cbdc:	20002dcc 	.word	0x20002dcc

0001cbe0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   1cbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1cbe4:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1cbe6:	4d27      	ldr	r5, [pc, #156]	; (1cc84 <nrfx_twim_init+0xa4>)
   1cbe8:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1cbec:	fb0c fc06 	mul.w	ip, ip, r6
   1cbf0:	eb05 040c 	add.w	r4, r5, ip
   1cbf4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1cbf8:	2f00      	cmp	r7, #0
   1cbfa:	d140      	bne.n	1cc7e <nrfx_twim_init+0x9e>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   1cbfc:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   1cbfe:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1cc02:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   1cc06:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   1cc08:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1cc0a:	7b4b      	ldrb	r3, [r1, #13]
   1cc0c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
   1cc10:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   1cc14:	4b1c      	ldr	r3, [pc, #112]	; (1cc88 <nrfx_twim_init+0xa8>)
    TWIM_PIN_INIT(p_config->sda);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1cc16:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1cc18:	ea4f 1c57 	mov.w	ip, r7, lsr #5
        case 1: return NRF_P1;
   1cc1c:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1cc20:	f007 041f 	and.w	r4, r7, #31
        case 1: return NRF_P1;
   1cc24:	bf0c      	ite	eq
   1cc26:	469c      	moveq	ip, r3
   1cc28:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc2c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1cc30:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1cc34:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   1cc38:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1cc3a:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1cc3e:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   1cc42:	f1b8 0f01 	cmp.w	r8, #1
   1cc46:	bf18      	it	ne
   1cc48:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc4c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   1cc50:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   1cc54:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1cc56:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1cc5a:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1cc5e:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1cc62:	b11a      	cbz	r2, 1cc6c <nrfx_twim_init+0x8c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1cc64:	f340 3007 	sbfx	r0, r0, #12, #8
   1cc68:	f7f8 fc40 	bl	154ec <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cc6c:	2334      	movs	r3, #52	; 0x34
   1cc6e:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1cc72:	4806      	ldr	r0, [pc, #24]	; (1cc8c <nrfx_twim_init+0xac>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cc74:	2301      	movs	r3, #1
   1cc76:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1cc7e:	4804      	ldr	r0, [pc, #16]	; (1cc90 <nrfx_twim_init+0xb0>)
   1cc80:	e7fb      	b.n	1cc7a <nrfx_twim_init+0x9a>
   1cc82:	bf00      	nop
   1cc84:	20002dfc 	.word	0x20002dfc
   1cc88:	50000300 	.word	0x50000300
   1cc8c:	0bad0000 	.word	0x0bad0000
   1cc90:	0bad0005 	.word	0x0bad0005

0001cc94 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   1cc94:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cc96:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1cc98:	2106      	movs	r1, #6
   1cc9a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1cc9e:	4a04      	ldr	r2, [pc, #16]	; (1ccb0 <nrfx_twim_enable+0x1c>)
   1cca0:	2134      	movs	r1, #52	; 0x34
   1cca2:	fb01 2303 	mla	r3, r1, r3, r2
   1cca6:	2202      	movs	r2, #2
   1cca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1ccac:	4770      	bx	lr
   1ccae:	bf00      	nop
   1ccb0:	20002dfc 	.word	0x20002dfc

0001ccb4 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ccb4:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   1ccb6:	490b      	ldr	r1, [pc, #44]	; (1cce4 <nrfx_twim_disable+0x30>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1ccb8:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1ccba:	2034      	movs	r0, #52	; 0x34
   1ccbc:	fb00 1303 	mla	r3, r0, r3, r1
    p_reg->INTENCLR = mask;
   1ccc0:	4909      	ldr	r1, [pc, #36]	; (1cce8 <nrfx_twim_disable+0x34>)
   1ccc2:	2000      	movs	r0, #0
   1ccc4:	6098      	str	r0, [r3, #8]
   1ccc6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1ccca:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   1ccce:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
   1ccd2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ccd6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ccda:	2201      	movs	r2, #1
   1ccdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   1cce0:	4770      	bx	lr
   1cce2:	bf00      	nop
   1cce4:	20002dfc 	.word	0x20002dfc
   1cce8:	019c0202 	.word	0x019c0202

0001ccec <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1ccec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   1ccf0:	4fb0      	ldr	r7, [pc, #704]	; (1cfb4 <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ccf2:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1ccf6:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   1ccf8:	2634      	movs	r6, #52	; 0x34
   1ccfa:	fb06 760e 	mla	r6, r6, lr, r7
   1ccfe:	2300      	movs	r3, #0
   1cd00:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1cd04:	68cb      	ldr	r3, [r1, #12]
   1cd06:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1cd0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1cd0e:	460d      	mov	r5, r1
   1cd10:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1cd12:	d003      	beq.n	1cd1c <nrfx_twim_xfer+0x30>
        return err_code;
   1cd14:	4ea8      	ldr	r6, [pc, #672]	; (1cfb8 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cd16:	4630      	mov	r0, r6
   1cd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   1cd1c:	4ba7      	ldr	r3, [pc, #668]	; (1cfbc <nrfx_twim_xfer+0x2d0>)
   1cd1e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   1cd22:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1cd26:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1cd2a:	b123      	cbz	r3, 1cd36 <nrfx_twim_xfer+0x4a>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1cd2c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1cd2e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1cd32:	4ea3      	ldr	r6, [pc, #652]	; (1cfc0 <nrfx_twim_xfer+0x2d4>)
   1cd34:	e7ef      	b.n	1cd16 <nrfx_twim_xfer+0x2a>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1cd36:	f012 0f14 	tst.w	r2, #20
   1cd3a:	bf0c      	ite	eq
   1cd3c:	2301      	moveq	r3, #1
   1cd3e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1cd40:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1cd44:	4689      	mov	r9, r1
   1cd46:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1cd4a:	f106 080c 	add.w	r8, r6, #12
   1cd4e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1cd52:	f8d9 3000 	ldr.w	r3, [r9]
   1cd56:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1cd5a:	f3cc 1300 	ubfx	r3, ip, #4, #1
   1cd5e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1cd62:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1cd66:	786b      	ldrb	r3, [r5, #1]
   1cd68:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cd6c:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1cd70:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1cd74:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1cd78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cd7c:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1cd80:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1cd84:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1cd88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1cd8c:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1cd90:	bf18      	it	ne
   1cd92:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1cd94:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1cd98:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1cd9c:	bf18      	it	ne
   1cd9e:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1cda0:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1cda4:	782b      	ldrb	r3, [r5, #0]
   1cda6:	2b03      	cmp	r3, #3
   1cda8:	f200 80b2 	bhi.w	1cf10 <nrfx_twim_xfer+0x224>
   1cdac:	e8df f003 	tbb	[pc, r3]
   1cdb0:	02669d81 	.word	0x02669d81
   1cdb4:	692a      	ldr	r2, [r5, #16]
   1cdb6:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1cdba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cdbe:	d1a9      	bne.n	1cd14 <nrfx_twim_xfer+0x28>
    p_reg->SHORTS = mask;
   1cdc0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cdc4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cdc8:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1cdca:	686b      	ldr	r3, [r5, #4]
   1cdcc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cdd0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdd4:	2300      	movs	r3, #0
   1cdd6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1cdda:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdde:	2101      	movs	r1, #1
   1cde0:	6221      	str	r1, [r4, #32]
   1cde2:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cde4:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1cde8:	2900      	cmp	r1, #0
   1cdea:	d0fb      	beq.n	1cde4 <nrfx_twim_xfer+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdec:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1cdf0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1cdf4:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cdf6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cdfa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1cdfe:	2334      	movs	r3, #52	; 0x34
   1ce00:	fb03 730e 	mla	r3, r3, lr, r7
   1ce04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1ce08:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1ce0a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ce0c:	4e6d      	ldr	r6, [pc, #436]	; (1cfc4 <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1ce0e:	f01c 0f08 	tst.w	ip, #8
   1ce12:	d104      	bne.n	1ce1e <nrfx_twim_xfer+0x132>
   1ce14:	782a      	ldrb	r2, [r5, #0]
   1ce16:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce18:	bf1c      	itt	ne
   1ce1a:	2201      	movne	r2, #1
   1ce1c:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   1ce1e:	2334      	movs	r3, #52	; 0x34
   1ce20:	fb03 f30e 	mul.w	r3, r3, lr
   1ce24:	18fa      	adds	r2, r7, r3
   1ce26:	58fb      	ldr	r3, [r7, r3]
   1ce28:	2b00      	cmp	r3, #0
   1ce2a:	d174      	bne.n	1cf16 <nrfx_twim_xfer+0x22a>
                transmission_finished = true;
   1ce2c:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce2e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1ce32:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1ce36:	2900      	cmp	r1, #0
   1ce38:	f040 8087 	bne.w	1cf4a <nrfx_twim_xfer+0x25e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1ce3c:	3a00      	subs	r2, #0
   1ce3e:	bf18      	it	ne
   1ce40:	2201      	movne	r2, #1
   1ce42:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1ce46:	2900      	cmp	r1, #0
   1ce48:	f000 8085 	beq.w	1cf56 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ce50:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce54:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1ce58:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1ce5c:	b110      	cbz	r0, 1ce64 <nrfx_twim_xfer+0x178>
   1ce5e:	f411 7f00 	tst.w	r1, #512	; 0x200
   1ce62:	d104      	bne.n	1ce6e <nrfx_twim_xfer+0x182>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce64:	6225      	str	r5, [r4, #32]
   1ce66:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1ce68:	2800      	cmp	r0, #0
   1ce6a:	d0e0      	beq.n	1ce2e <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
   1ce6c:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1ce6e:	05c9      	lsls	r1, r1, #23
   1ce70:	d571      	bpl.n	1cf56 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1ce76:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1ce7a:	e7d8      	b.n	1ce2e <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1ce7c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ce7e:	68ea      	ldr	r2, [r5, #12]
   1ce80:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ce84:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1ce88:	692b      	ldr	r3, [r5, #16]
   1ce8a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1ce8e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1ce92:	f47f af3f 	bne.w	1cd14 <nrfx_twim_xfer+0x28>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1ce96:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ce98:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1ce9c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1cea0:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1cea4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1cea8:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1ceaa:	fb03 730e 	mla	r3, r3, lr, r7
   1ceae:	2202      	movs	r2, #2
   1ceb0:	e012      	b.n	1ced8 <nrfx_twim_xfer+0x1ec>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1ceb2:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ceb4:	68ea      	ldr	r2, [r5, #12]
   1ceb6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1ceba:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   1cebe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1cec2:	f04f 0334 	mov.w	r3, #52	; 0x34
   1cec6:	d00b      	beq.n	1cee0 <nrfx_twim_xfer+0x1f4>
    p_reg->SHORTS = mask;
   1cec8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cecc:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1ced0:	fb03 730e 	mla	r3, r3, lr, r7
   1ced4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1ced8:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ceda:	2301      	movs	r3, #1
   1cedc:	6223      	str	r3, [r4, #32]
   1cede:	e794      	b.n	1ce0a <nrfx_twim_xfer+0x11e>
    p_reg->SHORTS = mask;
   1cee0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cee4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   1cee8:	e7df      	b.n	1ceaa <nrfx_twim_xfer+0x1be>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1ceea:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ceec:	68ea      	ldr	r2, [r5, #12]
   1ceee:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cef2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1cef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1cefa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1cefe:	2334      	movs	r3, #52	; 0x34
   1cf00:	fb03 730e 	mla	r3, r3, lr, r7
   1cf04:	2202      	movs	r2, #2
   1cf06:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf08:	2301      	movs	r3, #1
   1cf0a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	e77d      	b.n	1ce0c <nrfx_twim_xfer+0x120>
    switch (p_xfer_desc->type)
   1cf10:	4e2d      	ldr	r6, [pc, #180]	; (1cfc8 <nrfx_twim_xfer+0x2dc>)
   1cf12:	2308      	movs	r3, #8
   1cf14:	e77b      	b.n	1ce0e <nrfx_twim_xfer+0x122>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1cf16:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   1cf1a:	bf1c      	itt	ne
   1cf1c:	2300      	movne	r3, #0
   1cf1e:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1cf20:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1cf24:	d106      	bne.n	1cf34 <nrfx_twim_xfer+0x248>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1cf26:	2334      	movs	r3, #52	; 0x34
   1cf28:	fb03 730e 	mla	r3, r3, lr, r7
   1cf2c:	689a      	ldr	r2, [r3, #8]
   1cf2e:	f042 0202 	orr.w	r2, r2, #2
   1cf32:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1cf34:	2334      	movs	r3, #52	; 0x34
   1cf36:	fb03 770e 	mla	r7, r3, lr, r7
   1cf3a:	68bb      	ldr	r3, [r7, #8]
   1cf3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cf40:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1cf42:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   1cf44:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1cf48:	e6e5      	b.n	1cd16 <nrfx_twim_xfer+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf4a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1cf4e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   1cf52:	2201      	movs	r2, #1
   1cf54:	e775      	b.n	1ce42 <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
   1cf56:	2a00      	cmp	r2, #0
   1cf58:	f43f af69 	beq.w	1ce2e <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
   1cf5c:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1cf5e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1cf62:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1cf66:	fb01 720e 	mla	r2, r1, lr, r7
   1cf6a:	2000      	movs	r0, #0
   1cf6c:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1cf70:	b18b      	cbz	r3, 1cf96 <nrfx_twim_xfer+0x2aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1cf72:	4a16      	ldr	r2, [pc, #88]	; (1cfcc <nrfx_twim_xfer+0x2e0>)
   1cf74:	4e16      	ldr	r6, [pc, #88]	; (1cfd0 <nrfx_twim_xfer+0x2e4>)
   1cf76:	f013 0f01 	tst.w	r3, #1
   1cf7a:	bf18      	it	ne
   1cf7c:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cf7e:	f013 0f02 	tst.w	r3, #2
   1cf82:	f102 0201 	add.w	r2, r2, #1
   1cf86:	bf18      	it	ne
   1cf88:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cf8a:	f013 0f04 	tst.w	r3, #4
   1cf8e:	4b11      	ldr	r3, [pc, #68]	; (1cfd4 <nrfx_twim_xfer+0x2e8>)
   1cf90:	bf18      	it	ne
   1cf92:	461e      	movne	r6, r3
   1cf94:	e6bf      	b.n	1cd16 <nrfx_twim_xfer+0x2a>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1cf96:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1cf9a:	f47f aebc 	bne.w	1cd16 <nrfx_twim_xfer+0x2a>
                !xfer_completeness_check(p_twim, p_cb))
   1cf9e:	fb0e 7101 	mla	r1, lr, r1, r7
   1cfa2:	4620      	mov	r0, r4
   1cfa4:	f005 f83b 	bl	2201e <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1cfa8:	4b09      	ldr	r3, [pc, #36]	; (1cfd0 <nrfx_twim_xfer+0x2e4>)
   1cfaa:	2800      	cmp	r0, #0
   1cfac:	bf08      	it	eq
   1cfae:	461e      	moveq	r6, r3
   1cfb0:	e6b1      	b.n	1cd16 <nrfx_twim_xfer+0x2a>
   1cfb2:	bf00      	nop
   1cfb4:	20002dfc 	.word	0x20002dfc
   1cfb8:	0bad000a 	.word	0x0bad000a
   1cfbc:	019c0202 	.word	0x019c0202
   1cfc0:	0bad000b 	.word	0x0bad000b
   1cfc4:	0bad0000 	.word	0x0bad0000
   1cfc8:	0bad0004 	.word	0x0bad0004
   1cfcc:	0bae0000 	.word	0x0bae0000
   1cfd0:	0bad0001 	.word	0x0bad0001
   1cfd4:	0bae0002 	.word	0x0bae0002

0001cfd8 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
   1cfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cfda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1cfde:	4c5c      	ldr	r4, [pc, #368]	; (1d150 <nrfx_twim_1_irq_handler+0x178>)
   1cfe0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1cfe4:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1cfe6:	b302      	cbz	r2, 1d02a <nrfx_twim_1_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cfe8:	2200      	movs	r2, #0
   1cfea:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1cfee:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cff2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1cff6:	b9c2      	cbnz	r2, 1d02a <nrfx_twim_1_irq_handler+0x52>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1cff8:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1cffa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1cffe:	2202      	movs	r2, #2
   1d000:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1d002:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   1d004:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d008:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1d00c:	b11a      	cbz	r2, 1d016 <nrfx_twim_1_irq_handler+0x3e>
    return p_reg->SHORTS;
   1d00e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1d012:	059f      	lsls	r7, r3, #22
   1d014:	d404      	bmi.n	1d020 <nrfx_twim_1_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1d01a:	2201      	movs	r2, #1
   1d01c:	621a      	str	r2, [r3, #32]
   1d01e:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   1d020:	2301      	movs	r3, #1
   1d022:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
   1d026:	b007      	add	sp, #28
   1d028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d02a:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
   1d02e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1d032:	2b00      	cmp	r3, #0
   1d034:	d055      	beq.n	1d0e2 <nrfx_twim_1_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d036:	2300      	movs	r3, #0
   1d038:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d03c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1d040:	6a23      	ldr	r3, [r4, #32]
   1d042:	065e      	lsls	r6, r3, #25
   1d044:	d40a      	bmi.n	1d05c <nrfx_twim_1_irq_handler+0x84>
   1d046:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1d04a:	b93b      	cbnz	r3, 1d05c <nrfx_twim_1_irq_handler+0x84>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1d04c:	4940      	ldr	r1, [pc, #256]	; (1d150 <nrfx_twim_1_irq_handler+0x178>)
   1d04e:	4628      	mov	r0, r5
   1d050:	f004 ffe5 	bl	2201e <xfer_completeness_check>
   1d054:	f080 0001 	eor.w	r0, r0, #1
   1d058:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1d05c:	6a23      	ldr	r3, [r4, #32]
   1d05e:	f013 0704 	ands.w	r7, r3, #4
   1d062:	d122      	bne.n	1d0aa <nrfx_twim_1_irq_handler+0xd2>
            event.xfer_desc = p_cb->xfer_desc;
   1d064:	4e3b      	ldr	r6, [pc, #236]	; (1d154 <nrfx_twim_1_irq_handler+0x17c>)
   1d066:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   1d06a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d06c:	ad01      	add	r5, sp, #4
   1d06e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d070:	6833      	ldr	r3, [r6, #0]
   1d072:	602b      	str	r3, [r5, #0]
   1d074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1d078:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   1d07c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   1d080:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   1d084:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1d088:	f1bc 0f00 	cmp.w	ip, #0
   1d08c:	d002      	beq.n	1d094 <nrfx_twim_1_irq_handler+0xbc>
   1d08e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1d092:	b152      	cbz	r2, 1d0aa <nrfx_twim_1_irq_handler+0xd2>
    p_reg->SHORTS = mask;
   1d094:	2200      	movs	r2, #0
   1d096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   1d09a:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1d09c:	4a2e      	ldr	r2, [pc, #184]	; (1d158 <nrfx_twim_1_irq_handler+0x180>)
   1d09e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0a2:	4b2e      	ldr	r3, [pc, #184]	; (1d15c <nrfx_twim_1_irq_handler+0x184>)
   1d0a4:	2210      	movs	r2, #16
   1d0a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   1d0aa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1d0ae:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1d0b2:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1d0b6:	0798      	lsls	r0, r3, #30
   1d0b8:	d53c      	bpl.n	1d134 <nrfx_twim_1_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1d0ba:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1d0bc:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1d0c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1d0c4:	b90b      	cbnz	r3, 1d0ca <nrfx_twim_1_irq_handler+0xf2>
        p_cb->busy = false;
   1d0c6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1d0ca:	6a23      	ldr	r3, [r4, #32]
   1d0cc:	075b      	lsls	r3, r3, #29
   1d0ce:	d503      	bpl.n	1d0d8 <nrfx_twim_1_irq_handler+0x100>
   1d0d0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1d0d4:	2b00      	cmp	r3, #0
   1d0d6:	d0a6      	beq.n	1d026 <nrfx_twim_1_irq_handler+0x4e>
        p_cb->handler(&event, p_cb->p_context);
   1d0d8:	e9d4 3100 	ldrd	r3, r1, [r4]
   1d0dc:	4668      	mov	r0, sp
   1d0de:	4798      	blx	r3
}
   1d0e0:	e7a1      	b.n	1d026 <nrfx_twim_1_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0e2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   1d0e6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1d0ea:	7b23      	ldrb	r3, [r4, #12]
   1d0ec:	b983      	cbnz	r3, 1d110 <nrfx_twim_1_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
   1d0ee:	4f19      	ldr	r7, [pc, #100]	; (1d154 <nrfx_twim_1_irq_handler+0x17c>)
   1d0f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1d0f2:	ae01      	add	r6, sp, #4
   1d0f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d0f6:	683b      	ldr	r3, [r7, #0]
   1d0f8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1d0fa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d1d3      	bne.n	1d0aa <nrfx_twim_1_irq_handler+0xd2>
    p_reg->SHORTS = mask;
   1d102:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   1d106:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1d108:	4b13      	ldr	r3, [pc, #76]	; (1d158 <nrfx_twim_1_irq_handler+0x180>)
   1d10a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1d10e:	e7c8      	b.n	1d0a2 <nrfx_twim_1_irq_handler+0xca>
    p_reg->SHORTS = mask;
   1d110:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d114:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1d118:	f240 2302 	movw	r3, #514	; 0x202
   1d11c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1d11e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1d122:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1d126:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1d128:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d12c:	2301      	movs	r3, #1
   1d12e:	60ab      	str	r3, [r5, #8]
   1d130:	622b      	str	r3, [r5, #32]
            return;
   1d132:	e778      	b.n	1d026 <nrfx_twim_1_irq_handler+0x4e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1d134:	0759      	lsls	r1, r3, #29
   1d136:	d501      	bpl.n	1d13c <nrfx_twim_1_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1d138:	2302      	movs	r3, #2
   1d13a:	e7bf      	b.n	1d0bc <nrfx_twim_1_irq_handler+0xe4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1d13c:	07da      	lsls	r2, r3, #31
   1d13e:	d501      	bpl.n	1d144 <nrfx_twim_1_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1d140:	2303      	movs	r3, #3
   1d142:	e7bb      	b.n	1d0bc <nrfx_twim_1_irq_handler+0xe4>
    else if (p_cb->error)
   1d144:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d0b7      	beq.n	1d0bc <nrfx_twim_1_irq_handler+0xe4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1d14c:	2304      	movs	r3, #4
   1d14e:	e7b5      	b.n	1d0bc <nrfx_twim_1_irq_handler+0xe4>
   1d150:	20002dfc 	.word	0x20002dfc
   1d154:	20002e08 	.word	0x20002e08
   1d158:	019c0202 	.word	0x019c0202
   1d15c:	e000e100 	.word	0xe000e100

0001d160 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d162:	4b10      	ldr	r3, [pc, #64]	; (1d1a4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1d164:	4f10      	ldr	r7, [pc, #64]	; (1d1a8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d166:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1d16a:	3001      	adds	r0, #1
   1d16c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1d170:	42ae      	cmp	r6, r5
   1d172:	d800      	bhi.n	1d176 <z_sys_init_run_level+0x16>
		}
	}
}
   1d174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1d176:	e9d5 3400 	ldrd	r3, r4, [r5]
   1d17a:	4620      	mov	r0, r4
   1d17c:	4798      	blx	r3
   1d17e:	b170      	cbz	r0, 1d19e <z_sys_init_run_level+0x3e>
   1d180:	b16c      	cbz	r4, 1d19e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1d182:	1be4      	subs	r4, r4, r7
   1d184:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1d186:	0961      	lsrs	r1, r4, #5
   1d188:	4a08      	ldr	r2, [pc, #32]	; (1d1ac <z_sys_init_run_level+0x4c>)
   1d18a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1d18e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1d192:	2301      	movs	r3, #1
   1d194:	fa03 f404 	lsl.w	r4, r3, r4
   1d198:	4304      	orrs	r4, r0
   1d19a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d19e:	3508      	adds	r5, #8
   1d1a0:	e7e6      	b.n	1d170 <z_sys_init_run_level+0x10>
   1d1a2:	bf00      	nop
   1d1a4:	00023394 	.word	0x00023394
   1d1a8:	200007cc 	.word	0x200007cc
   1d1ac:	2000086c 	.word	0x2000086c

0001d1b0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1d1b0:	4b08      	ldr	r3, [pc, #32]	; (1d1d4 <z_device_ready+0x24>)
   1d1b2:	1ac0      	subs	r0, r0, r3
   1d1b4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1d1b6:	4b08      	ldr	r3, [pc, #32]	; (1d1d8 <z_device_ready+0x28>)
   1d1b8:	0942      	lsrs	r2, r0, #5
   1d1ba:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1d1be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1d1c2:	2301      	movs	r3, #1
   1d1c4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1d1c8:	4210      	tst	r0, r2
}
   1d1ca:	bf0c      	ite	eq
   1d1cc:	4618      	moveq	r0, r3
   1d1ce:	2000      	movne	r0, #0
   1d1d0:	4770      	bx	lr
   1d1d2:	bf00      	nop
   1d1d4:	200007cc 	.word	0x200007cc
   1d1d8:	2000086c 	.word	0x2000086c

0001d1dc <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1d1dc:	4911      	ldr	r1, [pc, #68]	; (1d224 <z_impl_device_get_binding+0x48>)
{
   1d1de:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1d1e0:	4c11      	ldr	r4, [pc, #68]	; (1d228 <z_impl_device_get_binding+0x4c>)
{
   1d1e2:	4605      	mov	r5, r0
   1d1e4:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1d1e6:	428c      	cmp	r4, r1
   1d1e8:	d104      	bne.n	1d1f4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d1ea:	4c0f      	ldr	r4, [pc, #60]	; (1d228 <z_impl_device_get_binding+0x4c>)
   1d1ec:	42b4      	cmp	r4, r6
   1d1ee:	d10a      	bne.n	1d206 <z_impl_device_get_binding+0x2a>
	return NULL;
   1d1f0:	2400      	movs	r4, #0
   1d1f2:	e014      	b.n	1d21e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	f7ff ffdb 	bl	1d1b0 <z_device_ready>
   1d1fa:	b110      	cbz	r0, 1d202 <z_impl_device_get_binding+0x26>
   1d1fc:	6823      	ldr	r3, [r4, #0]
   1d1fe:	42ab      	cmp	r3, r5
   1d200:	d00d      	beq.n	1d21e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d202:	3410      	adds	r4, #16
   1d204:	e7ef      	b.n	1d1e6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1d206:	4620      	mov	r0, r4
   1d208:	f7ff ffd2 	bl	1d1b0 <z_device_ready>
   1d20c:	b908      	cbnz	r0, 1d212 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d20e:	3410      	adds	r4, #16
   1d210:	e7ec      	b.n	1d1ec <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1d212:	6821      	ldr	r1, [r4, #0]
   1d214:	4628      	mov	r0, r5
   1d216:	f003 f9da 	bl	205ce <strcmp>
   1d21a:	2800      	cmp	r0, #0
   1d21c:	d1f7      	bne.n	1d20e <z_impl_device_get_binding+0x32>
}
   1d21e:	4620      	mov	r0, r4
   1d220:	bd70      	pop	{r4, r5, r6, pc}
   1d222:	bf00      	nop
   1d224:	2000086c 	.word	0x2000086c
   1d228:	200007cc 	.word	0x200007cc

0001d22c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1d22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d230:	4606      	mov	r6, r0
   1d232:	460f      	mov	r7, r1
	__asm__ volatile(
   1d234:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d238:	f3ef 8811 	mrs	r8, BASEPRI
   1d23c:	f383 8811 	msr	BASEPRI, r3
   1d240:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1d244:	f000 fe46 	bl	1ded4 <z_impl_k_current_get>
   1d248:	4c1f      	ldr	r4, [pc, #124]	; (1d2c8 <z_fatal_error+0x9c>)
   1d24a:	4b20      	ldr	r3, [pc, #128]	; (1d2cc <z_fatal_error+0xa0>)
   1d24c:	1ae4      	subs	r4, r4, r3
   1d24e:	2e04      	cmp	r6, #4
   1d250:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1d254:	bf96      	itet	ls
   1d256:	4a1e      	ldrls	r2, [pc, #120]	; (1d2d0 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1d258:	4a1e      	ldrhi	r2, [pc, #120]	; (1d2d4 <z_fatal_error+0xa8>)
   1d25a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1d25e:	01a4      	lsls	r4, r4, #6
   1d260:	f044 0301 	orr.w	r3, r4, #1
   1d264:	4605      	mov	r5, r0
   1d266:	f8ad 3000 	strh.w	r3, [sp]
   1d26a:	481b      	ldr	r0, [pc, #108]	; (1d2d8 <z_fatal_error+0xac>)
   1d26c:	2300      	movs	r3, #0
   1d26e:	4631      	mov	r1, r6
   1d270:	f002 fdf3 	bl	1fe5a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1d274:	b147      	cbz	r7, 1d288 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1d276:	69fb      	ldr	r3, [r7, #28]
   1d278:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1d27c:	b123      	cbz	r3, 1d288 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1d27e:	4817      	ldr	r0, [pc, #92]	; (1d2dc <z_fatal_error+0xb0>)
   1d280:	f044 0101 	orr.w	r1, r4, #1
   1d284:	f002 fdaf 	bl	1fde6 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1d288:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1d28c:	b12d      	cbz	r5, 1d29a <z_fatal_error+0x6e>
   1d28e:	4628      	mov	r0, r5
   1d290:	f005 f96b 	bl	2256a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1d294:	b108      	cbz	r0, 1d29a <z_fatal_error+0x6e>
   1d296:	7803      	ldrb	r3, [r0, #0]
   1d298:	b903      	cbnz	r3, 1d29c <z_fatal_error+0x70>
		thread_name = "unknown";
   1d29a:	4811      	ldr	r0, [pc, #68]	; (1d2e0 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1d29c:	f7f7 fa44 	bl	14728 <log_strdup>
   1d2a0:	4623      	mov	r3, r4
   1d2a2:	4602      	mov	r2, r0
   1d2a4:	4629      	mov	r1, r5
   1d2a6:	480f      	ldr	r0, [pc, #60]	; (1d2e4 <z_fatal_error+0xb8>)
   1d2a8:	f002 fdbe 	bl	1fe28 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1d2ac:	4639      	mov	r1, r7
   1d2ae:	4630      	mov	r0, r6
   1d2b0:	f7fe fb6a 	bl	1b988 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1d2b4:	f388 8811 	msr	BASEPRI, r8
   1d2b8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1d2bc:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1d2be:	b002      	add	sp, #8
   1d2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d2c4:	f7f8 bc94 	b.w	15bf0 <z_impl_k_thread_abort>
   1d2c8:	00022d88 	.word	0x00022d88
   1d2cc:	00022cf0 	.word	0x00022cf0
   1d2d0:	000233ac 	.word	0x000233ac
   1d2d4:	0002527d 	.word	0x0002527d
   1d2d8:	0002528b 	.word	0x0002528b
   1d2dc:	000252b3 	.word	0x000252b3
   1d2e0:	0002411b 	.word	0x0002411b
   1d2e4:	000252d4 	.word	0x000252d4

0001d2e8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1d2ea:	4e16      	ldr	r6, [pc, #88]	; (1d344 <idle+0x5c>)
{
   1d2ec:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
   1d2ee:	2700      	movs	r7, #0
	__asm__ volatile(
   1d2f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d2f4:	f3ef 8311 	mrs	r3, BASEPRI
   1d2f8:	f382 8811 	msr	BASEPRI, r2
   1d2fc:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1d300:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1d302:	b188      	cbz	r0, 1d328 <idle+0x40>
			cpu->pending_abort = NULL;
   1d304:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1d306:	f383 8811 	msr	BASEPRI, r3
   1d30a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1d30e:	f000 fc11 	bl	1db34 <z_thread_single_abort>
	__asm__ volatile(
   1d312:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d316:	f3ef 8011 	mrs	r0, BASEPRI
   1d31a:	f383 8811 	msr	BASEPRI, r3
   1d31e:	f3bf 8f6f 	isb	sy
   1d322:	f005 f833 	bl	2238c <z_reschedule_irqlock>
			continue;
   1d326:	e7e3      	b.n	1d2f0 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   1d328:	f005 f9b0 	bl	2268c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1d32c:	2101      	movs	r1, #1
   1d32e:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1d330:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1d332:	bfd8      	it	le
   1d334:	4608      	movle	r0, r1
   1d336:	f005 f9b9 	bl	226ac <z_set_timeout_expiry>
		_kernel.idle = ticks;
   1d33a:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1d33c:	f7f8 f964 	bl	15608 <arch_cpu_idle>
}
   1d340:	e7d6      	b.n	1d2f0 <idle+0x8>
   1d342:	bf00      	nop
   1d344:	20002e30 	.word	0x20002e30

0001d348 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1d348:	4802      	ldr	r0, [pc, #8]	; (1d354 <z_bss_zero+0xc>)
   1d34a:	4a03      	ldr	r2, [pc, #12]	; (1d358 <z_bss_zero+0x10>)
   1d34c:	2100      	movs	r1, #0
   1d34e:	1a12      	subs	r2, r2, r0
   1d350:	f003 b99b 	b.w	2068a <memset>
   1d354:	20000aa8 	.word	0x20000aa8
   1d358:	20004438 	.word	0x20004438

0001d35c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1d35c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   1d35e:	4b0a      	ldr	r3, [pc, #40]	; (1d388 <bg_thread_main+0x2c>)
   1d360:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1d362:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1d364:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1d366:	f7ff fefb 	bl	1d160 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1d36a:	f005 f978 	bl	2265e <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1d36e:	2003      	movs	r0, #3
   1d370:	f7ff fef6 	bl	1d160 <z_sys_init_run_level>

	z_init_static_threads();
   1d374:	f000 fe7a 	bl	1e06c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1d378:	f7f6 fb2a 	bl	139d0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1d37c:	4a03      	ldr	r2, [pc, #12]	; (1d38c <bg_thread_main+0x30>)
   1d37e:	7b13      	ldrb	r3, [r2, #12]
   1d380:	f023 0301 	bic.w	r3, r3, #1
   1d384:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1d386:	bd08      	pop	{r3, pc}
   1d388:	20004435 	.word	0x20004435
   1d38c:	20002448 	.word	0x20002448

0001d390 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1d390:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1d394:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1d396:	f7f7 f92d 	bl	145f4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1d39a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1d490 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1d39e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1d3a2:	4d33      	ldr	r5, [pc, #204]	; (1d470 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1d3a4:	4e33      	ldr	r6, [pc, #204]	; (1d474 <z_cstart+0xe4>)
   1d3a6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d3a8:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1d494 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1d3ac:	4f32      	ldr	r7, [pc, #200]	; (1d478 <z_cstart+0xe8>)
   1d3ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1d3b2:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d3b4:	23e0      	movs	r3, #224	; 0xe0
   1d3b6:	2400      	movs	r4, #0
   1d3b8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1d3bc:	2320      	movs	r3, #32
   1d3be:	77eb      	strb	r3, [r5, #31]
   1d3c0:	762c      	strb	r4, [r5, #24]
   1d3c2:	766c      	strb	r4, [r5, #25]
   1d3c4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1d3c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d3c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1d3cc:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1d3ce:	f7f8 fbed 	bl	15bac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1d3d2:	f7f8 f913 	bl	155fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1d3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d3da:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1d3dc:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1d3de:	4d27      	ldr	r5, [pc, #156]	; (1d47c <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1d3e0:	f240 1301 	movw	r3, #257	; 0x101
   1d3e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1d3e8:	ab06      	add	r3, sp, #24
   1d3ea:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1d3ec:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1d3ee:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1d3f2:	f7ff feb5 	bl	1d160 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1d3f6:	2001      	movs	r0, #1
   1d3f8:	f7ff feb2 	bl	1d160 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d3fc:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1d400:	f000 fcec 	bl	1dddc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d404:	4b1e      	ldr	r3, [pc, #120]	; (1d480 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1d406:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d408:	491e      	ldr	r1, [pc, #120]	; (1d484 <z_cstart+0xf4>)
   1d40a:	9305      	str	r3, [sp, #20]
   1d40c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d410:	4653      	mov	r3, sl
   1d412:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1d416:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1d41a:	9400      	str	r4, [sp, #0]
   1d41c:	4630      	mov	r0, r6
   1d41e:	f000 fdc7 	bl	1dfb0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d422:	7b73      	ldrb	r3, [r6, #13]
   1d424:	4680      	mov	r8, r0
   1d426:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1d42a:	4630      	mov	r0, r6
   1d42c:	7373      	strb	r3, [r6, #13]
   1d42e:	f004 ffef 	bl	22410 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1d432:	230f      	movs	r3, #15
   1d434:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1d438:	4913      	ldr	r1, [pc, #76]	; (1d488 <z_cstart+0xf8>)
   1d43a:	4b14      	ldr	r3, [pc, #80]	; (1d48c <z_cstart+0xfc>)
   1d43c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1d440:	e9cd b404 	strd	fp, r4, [sp, #16]
   1d444:	e9cd 5400 	strd	r5, r4, [sp]
   1d448:	4638      	mov	r0, r7
   1d44a:	f000 fdb1 	bl	1dfb0 <z_setup_new_thread>
   1d44e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1d450:	60ef      	str	r7, [r5, #12]
   1d452:	f023 0304 	bic.w	r3, r3, #4
   1d456:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1d458:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1d45c:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1d460:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1d462:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1d466:	4652      	mov	r2, sl
   1d468:	4641      	mov	r1, r8
   1d46a:	4630      	mov	r0, r6
   1d46c:	f7f8 f8ac 	bl	155c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1d470:	e000ed00 	.word	0xe000ed00
   1d474:	20002448 	.word	0x20002448
   1d478:	200023c0 	.word	0x200023c0
   1d47c:	20002e30 	.word	0x20002e30
   1d480:	00025336 	.word	0x00025336
   1d484:	200059e0 	.word	0x200059e0
   1d488:	20005e00 	.word	0x20005e00
   1d48c:	0001d2e9 	.word	0x0001d2e9
   1d490:	20006780 	.word	0x20006780
   1d494:	0001d35d 	.word	0x0001d35d

0001d498 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1d498:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1d49a:	4c06      	ldr	r4, [pc, #24]	; (1d4b4 <statics_init+0x1c>)
   1d49c:	4d06      	ldr	r5, [pc, #24]	; (1d4b8 <statics_init+0x20>)
   1d49e:	42ac      	cmp	r4, r5
   1d4a0:	d301      	bcc.n	1d4a6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1d4a2:	2000      	movs	r0, #0
   1d4a4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1d4a6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1d4aa:	4620      	mov	r0, r4
   1d4ac:	f004 fde9 	bl	22082 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1d4b0:	3414      	adds	r4, #20
   1d4b2:	e7f4      	b.n	1d49e <statics_init+0x6>
   1d4b4:	200008c4 	.word	0x200008c4
   1d4b8:	200008d8 	.word	0x200008d8

0001d4bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1d4bc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d4be:	4b0e      	ldr	r3, [pc, #56]	; (1d4f8 <init_mem_slab_module+0x3c>)
   1d4c0:	4c0e      	ldr	r4, [pc, #56]	; (1d4fc <init_mem_slab_module+0x40>)
   1d4c2:	42a3      	cmp	r3, r4
   1d4c4:	d301      	bcc.n	1d4ca <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1d4c6:	2000      	movs	r0, #0
	return rc;
}
   1d4c8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d4ca:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1d4ce:	ea41 0200 	orr.w	r2, r1, r0
   1d4d2:	f012 0203 	ands.w	r2, r2, #3
   1d4d6:	d10b      	bne.n	1d4f0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1d4d8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1d4da:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d4dc:	42aa      	cmp	r2, r5
   1d4de:	d101      	bne.n	1d4e4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d4e0:	331c      	adds	r3, #28
   1d4e2:	e7ee      	b.n	1d4c2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1d4e4:	695e      	ldr	r6, [r3, #20]
   1d4e6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d4e8:	3201      	adds	r2, #1
		slab->free_list = p;
   1d4ea:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1d4ec:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1d4ee:	e7f5      	b.n	1d4dc <init_mem_slab_module+0x20>
		return -EINVAL;
   1d4f0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1d4f4:	e7e8      	b.n	1d4c8 <init_mem_slab_module+0xc>
   1d4f6:	bf00      	nop
   1d4f8:	20000870 	.word	0x20000870
   1d4fc:	200008c4 	.word	0x200008c4

0001d500 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1d500:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1d502:	460c      	mov	r4, r1
   1d504:	4616      	mov	r6, r2
   1d506:	461f      	mov	r7, r3
   1d508:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d50c:	f3ef 8111 	mrs	r1, BASEPRI
   1d510:	f383 8811 	msr	BASEPRI, r3
   1d514:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1d518:	6943      	ldr	r3, [r0, #20]
   1d51a:	b15b      	cbz	r3, 1d534 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1d51c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1d51e:	681b      	ldr	r3, [r3, #0]
   1d520:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1d522:	6983      	ldr	r3, [r0, #24]
   1d524:	3301      	adds	r3, #1
   1d526:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1d528:	2000      	movs	r0, #0
	__asm__ volatile(
   1d52a:	f381 8811 	msr	BASEPRI, r1
   1d52e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1d532:	e011      	b.n	1d558 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d534:	ea56 0207 	orrs.w	r2, r6, r7
   1d538:	d103      	bne.n	1d542 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1d53a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1d53c:	f06f 000b 	mvn.w	r0, #11
   1d540:	e7f3      	b.n	1d52a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1d542:	4602      	mov	r2, r0
   1d544:	e9cd 6700 	strd	r6, r7, [sp]
   1d548:	4804      	ldr	r0, [pc, #16]	; (1d55c <k_mem_slab_alloc+0x5c>)
   1d54a:	f000 fbb5 	bl	1dcb8 <z_pend_curr>
		if (result == 0) {
   1d54e:	b918      	cbnz	r0, 1d558 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1d550:	4b03      	ldr	r3, [pc, #12]	; (1d560 <k_mem_slab_alloc+0x60>)
   1d552:	689b      	ldr	r3, [r3, #8]
   1d554:	695b      	ldr	r3, [r3, #20]
   1d556:	6023      	str	r3, [r4, #0]
}
   1d558:	b002      	add	sp, #8
   1d55a:	bdd0      	pop	{r4, r6, r7, pc}
   1d55c:	20004436 	.word	0x20004436
   1d560:	20002e30 	.word	0x20002e30

0001d564 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d566:	4604      	mov	r4, r0
   1d568:	460d      	mov	r5, r1
	__asm__ volatile(
   1d56a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d56e:	f3ef 8611 	mrs	r6, BASEPRI
   1d572:	f383 8811 	msr	BASEPRI, r3
   1d576:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1d57a:	6947      	ldr	r7, [r0, #20]
   1d57c:	b977      	cbnz	r7, 1d59c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1d57e:	f004 ffa2 	bl	224c6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1d582:	b158      	cbz	r0, 1d59c <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1d584:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1d586:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d588:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1d58c:	f004 ff40 	bl	22410 <z_ready_thread>
			z_reschedule(&lock, key);
   1d590:	4631      	mov	r1, r6
   1d592:	4809      	ldr	r0, [pc, #36]	; (1d5b8 <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1d594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1d598:	f000 b946 	b.w	1d828 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1d59c:	682b      	ldr	r3, [r5, #0]
   1d59e:	6962      	ldr	r2, [r4, #20]
   1d5a0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1d5a2:	682b      	ldr	r3, [r5, #0]
   1d5a4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1d5a6:	69a3      	ldr	r3, [r4, #24]
   1d5a8:	3b01      	subs	r3, #1
   1d5aa:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1d5ac:	f386 8811 	msr	BASEPRI, r6
   1d5b0:	f3bf 8f6f 	isb	sy
}
   1d5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d5b6:	bf00      	nop
   1d5b8:	20004436 	.word	0x20004436

0001d5bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d5bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d5c0:	4604      	mov	r4, r0
   1d5c2:	4616      	mov	r6, r2
   1d5c4:	461f      	mov	r7, r3
	__asm__ volatile(
   1d5c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d5ca:	f3ef 8811 	mrs	r8, BASEPRI
   1d5ce:	f383 8811 	msr	BASEPRI, r3
   1d5d2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d5d6:	68c3      	ldr	r3, [r0, #12]
   1d5d8:	4a32      	ldr	r2, [pc, #200]	; (1d6a4 <z_impl_k_mutex_lock+0xe8>)
   1d5da:	b16b      	cbz	r3, 1d5f8 <z_impl_k_mutex_lock+0x3c>
   1d5dc:	6880      	ldr	r0, [r0, #8]
   1d5de:	6891      	ldr	r1, [r2, #8]
   1d5e0:	4288      	cmp	r0, r1
   1d5e2:	d019      	beq.n	1d618 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d5e4:	ea56 0307 	orrs.w	r3, r6, r7
   1d5e8:	d118      	bne.n	1d61c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1d5ea:	f388 8811 	msr	BASEPRI, r8
   1d5ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1d5f2:	f06f 000f 	mvn.w	r0, #15
   1d5f6:	e00c      	b.n	1d612 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1d5f8:	6891      	ldr	r1, [r2, #8]
   1d5fa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d5fe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1d600:	3301      	adds	r3, #1
   1d602:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1d604:	6893      	ldr	r3, [r2, #8]
   1d606:	60a3      	str	r3, [r4, #8]
   1d608:	f388 8811 	msr	BASEPRI, r8
   1d60c:	f3bf 8f6f 	isb	sy
		return 0;
   1d610:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1d612:	b002      	add	sp, #8
   1d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1d618:	6921      	ldr	r1, [r4, #16]
   1d61a:	e7f0      	b.n	1d5fe <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d61c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d620:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1d624:	4299      	cmp	r1, r3
   1d626:	bfa8      	it	ge
   1d628:	4619      	movge	r1, r3
   1d62a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d62e:	428b      	cmp	r3, r1
   1d630:	dd2c      	ble.n	1d68c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1d632:	f000 fb8f 	bl	1dd54 <z_set_prio>
   1d636:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d638:	e9cd 6700 	strd	r6, r7, [sp]
   1d63c:	481a      	ldr	r0, [pc, #104]	; (1d6a8 <z_impl_k_mutex_lock+0xec>)
   1d63e:	4622      	mov	r2, r4
   1d640:	4641      	mov	r1, r8
   1d642:	f000 fb39 	bl	1dcb8 <z_pend_curr>
	if (got_mutex == 0) {
   1d646:	2800      	cmp	r0, #0
   1d648:	d0e3      	beq.n	1d612 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1d64a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d64e:	f3ef 8611 	mrs	r6, BASEPRI
   1d652:	f383 8811 	msr	BASEPRI, r3
   1d656:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d65a:	6823      	ldr	r3, [r4, #0]
   1d65c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d65e:	42a3      	cmp	r3, r4
   1d660:	d007      	beq.n	1d672 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d662:	b133      	cbz	r3, 1d672 <z_impl_k_mutex_lock+0xb6>
   1d664:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d668:	4299      	cmp	r1, r3
   1d66a:	bfa8      	it	ge
   1d66c:	4619      	movge	r1, r3
   1d66e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d672:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d674:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d678:	4299      	cmp	r1, r3
   1d67a:	d109      	bne.n	1d690 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1d67c:	b16d      	cbz	r5, 1d69a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1d67e:	480a      	ldr	r0, [pc, #40]	; (1d6a8 <z_impl_k_mutex_lock+0xec>)
   1d680:	4631      	mov	r1, r6
   1d682:	f000 f8d1 	bl	1d828 <z_reschedule>
	return -EAGAIN;
   1d686:	f06f 000a 	mvn.w	r0, #10
   1d68a:	e7c2      	b.n	1d612 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1d68c:	2500      	movs	r5, #0
   1d68e:	e7d3      	b.n	1d638 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1d690:	f000 fb60 	bl	1dd54 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d694:	2800      	cmp	r0, #0
   1d696:	d1f2      	bne.n	1d67e <z_impl_k_mutex_lock+0xc2>
   1d698:	e7f0      	b.n	1d67c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1d69a:	f386 8811 	msr	BASEPRI, r6
   1d69e:	f3bf 8f6f 	isb	sy
   1d6a2:	e7f0      	b.n	1d686 <z_impl_k_mutex_lock+0xca>
   1d6a4:	20002e30 	.word	0x20002e30
   1d6a8:	20004436 	.word	0x20004436

0001d6ac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1d6ac:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1d6ae:	6883      	ldr	r3, [r0, #8]
{
   1d6b0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1d6b2:	2b00      	cmp	r3, #0
   1d6b4:	d037      	beq.n	1d726 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d6b6:	4a1f      	ldr	r2, [pc, #124]	; (1d734 <z_impl_k_mutex_unlock+0x88>)
   1d6b8:	6892      	ldr	r2, [r2, #8]
   1d6ba:	4293      	cmp	r3, r2
   1d6bc:	d136      	bne.n	1d72c <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1d6be:	7bda      	ldrb	r2, [r3, #15]
   1d6c0:	3a01      	subs	r2, #1
   1d6c2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1d6c4:	68c3      	ldr	r3, [r0, #12]
   1d6c6:	2b01      	cmp	r3, #1
   1d6c8:	d005      	beq.n	1d6d6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d6ca:	3b01      	subs	r3, #1
   1d6cc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1d6ce:	f000 f90f 	bl	1d8f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1d6d2:	2000      	movs	r0, #0
}
   1d6d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d6d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6da:	f3ef 8511 	mrs	r5, BASEPRI
   1d6de:	f383 8811 	msr	BASEPRI, r3
   1d6e2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d6e6:	6901      	ldr	r1, [r0, #16]
   1d6e8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d6ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d6ee:	4299      	cmp	r1, r3
   1d6f0:	d001      	beq.n	1d6f6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1d6f2:	f000 fb2f 	bl	1dd54 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d6f6:	4620      	mov	r0, r4
   1d6f8:	f004 fee5 	bl	224c6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d6fc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d6fe:	b160      	cbz	r0, 1d71a <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d700:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1d704:	6122      	str	r2, [r4, #16]
   1d706:	2200      	movs	r2, #0
   1d708:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1d70c:	f004 fe80 	bl	22410 <z_ready_thread>
		z_reschedule(&lock, key);
   1d710:	4809      	ldr	r0, [pc, #36]	; (1d738 <z_impl_k_mutex_unlock+0x8c>)
   1d712:	4629      	mov	r1, r5
   1d714:	f000 f888 	bl	1d828 <z_reschedule>
   1d718:	e7d9      	b.n	1d6ce <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d71a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1d71c:	f385 8811 	msr	BASEPRI, r5
   1d720:	f3bf 8f6f 	isb	sy
   1d724:	e7d3      	b.n	1d6ce <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d726:	f06f 0015 	mvn.w	r0, #21
   1d72a:	e7d3      	b.n	1d6d4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1d72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d730:	e7d0      	b.n	1d6d4 <z_impl_k_mutex_unlock+0x28>
   1d732:	bf00      	nop
   1d734:	20002e30 	.word	0x20002e30
   1d738:	20004436 	.word	0x20004436

0001d73c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d73c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d73e:	4616      	mov	r6, r2
   1d740:	461f      	mov	r7, r3
	__asm__ volatile(
   1d742:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d746:	f3ef 8511 	mrs	r5, BASEPRI
   1d74a:	f383 8811 	msr	BASEPRI, r3
   1d74e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1d752:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d754:	b19c      	cbz	r4, 1d77e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d756:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d758:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d75a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d75e:	4294      	cmp	r4, r2
	list->head = node;
   1d760:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1d762:	bf08      	it	eq
   1d764:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d766:	2101      	movs	r1, #1
   1d768:	4620      	mov	r0, r4
   1d76a:	f004 fd7d 	bl	22268 <z_queue_node_peek>
   1d76e:	4604      	mov	r4, r0
	__asm__ volatile(
   1d770:	f385 8811 	msr	BASEPRI, r5
   1d774:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d778:	4620      	mov	r0, r4
   1d77a:	b003      	add	sp, #12
   1d77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d77e:	ea56 0307 	orrs.w	r3, r6, r7
   1d782:	d0f5      	beq.n	1d770 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d784:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d788:	e9cd 6700 	strd	r6, r7, [sp]
   1d78c:	4629      	mov	r1, r5
   1d78e:	4610      	mov	r0, r2
   1d790:	f000 fa92 	bl	1dcb8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d794:	2800      	cmp	r0, #0
   1d796:	d1ef      	bne.n	1d778 <z_impl_k_queue_get+0x3c>
   1d798:	4b01      	ldr	r3, [pc, #4]	; (1d7a0 <z_impl_k_queue_get+0x64>)
   1d79a:	689b      	ldr	r3, [r3, #8]
   1d79c:	695c      	ldr	r4, [r3, #20]
   1d79e:	e7eb      	b.n	1d778 <z_impl_k_queue_get+0x3c>
   1d7a0:	20002e30 	.word	0x20002e30

0001d7a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d7a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d7a6:	4c08      	ldr	r4, [pc, #32]	; (1d7c8 <z_reset_time_slice+0x24>)
   1d7a8:	6823      	ldr	r3, [r4, #0]
   1d7aa:	b15b      	cbz	r3, 1d7c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d7ac:	f7f7 fc8e 	bl	150cc <z_clock_elapsed>
   1d7b0:	4603      	mov	r3, r0
   1d7b2:	6820      	ldr	r0, [r4, #0]
   1d7b4:	4a05      	ldr	r2, [pc, #20]	; (1d7cc <z_reset_time_slice+0x28>)
   1d7b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1d7bc:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1d7be:	2100      	movs	r1, #0
   1d7c0:	f004 bf74 	b.w	226ac <z_set_timeout_expiry>
}
   1d7c4:	bd10      	pop	{r4, pc}
   1d7c6:	bf00      	nop
   1d7c8:	20002e6c 	.word	0x20002e6c
   1d7cc:	20002e30 	.word	0x20002e30

0001d7d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7d2:	4605      	mov	r5, r0
   1d7d4:	460c      	mov	r4, r1
	__asm__ volatile(
   1d7d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7da:	f3ef 8611 	mrs	r6, BASEPRI
   1d7de:	f383 8811 	msr	BASEPRI, r3
   1d7e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d7e6:	4b0d      	ldr	r3, [pc, #52]	; (1d81c <k_sched_time_slice_set+0x4c>)
   1d7e8:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d7ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d7ee:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d7f2:	2100      	movs	r1, #0
   1d7f4:	615a      	str	r2, [r3, #20]
   1d7f6:	fbe7 0105 	umlal	r0, r1, r7, r5
   1d7fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d7fe:	2300      	movs	r3, #0
   1d800:	f7e3 fc7e 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d804:	4b06      	ldr	r3, [pc, #24]	; (1d820 <k_sched_time_slice_set+0x50>)
   1d806:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1d808:	4b06      	ldr	r3, [pc, #24]	; (1d824 <k_sched_time_slice_set+0x54>)
   1d80a:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1d80c:	f7ff ffca 	bl	1d7a4 <z_reset_time_slice>
	__asm__ volatile(
   1d810:	f386 8811 	msr	BASEPRI, r6
   1d814:	f3bf 8f6f 	isb	sy
	}
}
   1d818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d81a:	bf00      	nop
   1d81c:	20002e30 	.word	0x20002e30
   1d820:	20002e6c 	.word	0x20002e6c
   1d824:	20002e68 	.word	0x20002e68

0001d828 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d828:	b949      	cbnz	r1, 1d83e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d82a:	f3ef 8005 	mrs	r0, IPSR
   1d82e:	b930      	cbnz	r0, 1d83e <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1d830:	4b05      	ldr	r3, [pc, #20]	; (1d848 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1d832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d834:	689b      	ldr	r3, [r3, #8]
   1d836:	429a      	cmp	r2, r3
   1d838:	d001      	beq.n	1d83e <z_reschedule+0x16>
	ret = arch_swap(key);
   1d83a:	f7f7 be01 	b.w	15440 <arch_swap>
   1d83e:	f381 8811 	msr	BASEPRI, r1
   1d842:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d846:	4770      	bx	lr
   1d848:	20002e30 	.word	0x20002e30

0001d84c <k_sched_lock>:
	__asm__ volatile(
   1d84c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d850:	f3ef 8111 	mrs	r1, BASEPRI
   1d854:	f383 8811 	msr	BASEPRI, r3
   1d858:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1d85c:	4b04      	ldr	r3, [pc, #16]	; (1d870 <k_sched_lock+0x24>)
   1d85e:	689a      	ldr	r2, [r3, #8]
   1d860:	7bd3      	ldrb	r3, [r2, #15]
   1d862:	3b01      	subs	r3, #1
   1d864:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d866:	f381 8811 	msr	BASEPRI, r1
   1d86a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1d86e:	4770      	bx	lr
   1d870:	20002e30 	.word	0x20002e30

0001d874 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1d874:	4b09      	ldr	r3, [pc, #36]	; (1d89c <z_priq_dumb_remove+0x28>)
   1d876:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1d87a:	4282      	cmp	r2, r0
   1d87c:	d105      	bne.n	1d88a <z_priq_dumb_remove+0x16>
   1d87e:	689b      	ldr	r3, [r3, #8]
   1d880:	428b      	cmp	r3, r1
   1d882:	d102      	bne.n	1d88a <z_priq_dumb_remove+0x16>
   1d884:	7b4b      	ldrb	r3, [r1, #13]
   1d886:	06db      	lsls	r3, r3, #27
   1d888:	d106      	bne.n	1d898 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1d88a:	e9d1 3200 	ldrd	r3, r2, [r1]
   1d88e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d890:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d892:	2300      	movs	r3, #0
	node->prev = NULL;
   1d894:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1d898:	4770      	bx	lr
   1d89a:	bf00      	nop
   1d89c:	20002e30 	.word	0x20002e30

0001d8a0 <update_cache>:
{
   1d8a0:	b538      	push	{r3, r4, r5, lr}
   1d8a2:	4c12      	ldr	r4, [pc, #72]	; (1d8ec <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1d8a4:	6923      	ldr	r3, [r4, #16]
   1d8a6:	68a2      	ldr	r2, [r4, #8]
{
   1d8a8:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1d8aa:	b10b      	cbz	r3, 1d8b0 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1d8ac:	68e5      	ldr	r5, [r4, #12]
   1d8ae:	e00c      	b.n	1d8ca <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d8b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1d8b4:	f004 fda2 	bl	223fc <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d8b8:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d8ba:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1d8bc:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1d8be:	bf44      	itt	mi
   1d8c0:	f043 0308 	orrmi.w	r3, r3, #8
   1d8c4:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1d8c6:	2d00      	cmp	r5, #0
   1d8c8:	d0f0      	beq.n	1d8ac <update_cache+0xc>
	if (preempt_ok != 0) {
   1d8ca:	b949      	cbnz	r1, 1d8e0 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1d8cc:	7b53      	ldrb	r3, [r2, #13]
   1d8ce:	06db      	lsls	r3, r3, #27
   1d8d0:	d106      	bne.n	1d8e0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d8d2:	69ab      	ldr	r3, [r5, #24]
   1d8d4:	b923      	cbnz	r3, 1d8e0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d8d6:	89d3      	ldrh	r3, [r2, #14]
   1d8d8:	2b7f      	cmp	r3, #127	; 0x7f
   1d8da:	d901      	bls.n	1d8e0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1d8dc:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1d8de:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1d8e0:	4295      	cmp	r5, r2
   1d8e2:	d001      	beq.n	1d8e8 <update_cache+0x48>
			z_reset_time_slice();
   1d8e4:	f7ff ff5e 	bl	1d7a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d8e8:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1d8ea:	e7f8      	b.n	1d8de <update_cache+0x3e>
   1d8ec:	20002e30 	.word	0x20002e30

0001d8f0 <k_sched_unlock>:
{
   1d8f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d8f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8f6:	f3ef 8411 	mrs	r4, BASEPRI
   1d8fa:	f383 8811 	msr	BASEPRI, r3
   1d8fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d902:	4b08      	ldr	r3, [pc, #32]	; (1d924 <k_sched_unlock+0x34>)
   1d904:	689a      	ldr	r2, [r3, #8]
   1d906:	7bd3      	ldrb	r3, [r2, #15]
   1d908:	3301      	adds	r3, #1
   1d90a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d90c:	2000      	movs	r0, #0
   1d90e:	f7ff ffc7 	bl	1d8a0 <update_cache>
	__asm__ volatile(
   1d912:	f384 8811 	msr	BASEPRI, r4
   1d916:	f3bf 8f6f 	isb	sy
}
   1d91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d91e:	f004 bd41 	b.w	223a4 <z_reschedule_unlocked>
   1d922:	bf00      	nop
   1d924:	20002e30 	.word	0x20002e30

0001d928 <ready_thread>:
{
   1d928:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d92a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d92e:	7b43      	ldrb	r3, [r0, #13]
   1d930:	2a00      	cmp	r2, #0
   1d932:	db2c      	blt.n	1d98e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d934:	06db      	lsls	r3, r3, #27
   1d936:	d12a      	bne.n	1d98e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1d938:	6983      	ldr	r3, [r0, #24]
   1d93a:	bb43      	cbnz	r3, 1d98e <ready_thread+0x66>
	return list->head == list;
   1d93c:	4a15      	ldr	r2, [pc, #84]	; (1d994 <ready_thread+0x6c>)
   1d93e:	4611      	mov	r1, r2
   1d940:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d944:	428c      	cmp	r4, r1
   1d946:	bf18      	it	ne
   1d948:	4623      	movne	r3, r4
   1d94a:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d94c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1d94e:	bf38      	it	cc
   1d950:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d952:	b1b3      	cbz	r3, 1d982 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d954:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d958:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1d95c:	42ae      	cmp	r6, r5
   1d95e:	db03      	blt.n	1d968 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1d960:	42a3      	cmp	r3, r4
   1d962:	d00e      	beq.n	1d982 <ready_thread+0x5a>
   1d964:	681b      	ldr	r3, [r3, #0]
   1d966:	e7f4      	b.n	1d952 <ready_thread+0x2a>
	node->prev = successor->prev;
   1d968:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d96a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1d96e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d970:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1d972:	7b43      	ldrb	r3, [r0, #13]
   1d974:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d978:	7343      	strb	r3, [r0, #13]
}
   1d97a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d97c:	2000      	movs	r0, #0
   1d97e:	f7ff bf8f 	b.w	1d8a0 <update_cache>
	node->prev = list->tail;
   1d982:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1d986:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1d988:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1d98a:	6310      	str	r0, [r2, #48]	; 0x30
}
   1d98c:	e7f1      	b.n	1d972 <ready_thread+0x4a>
}
   1d98e:	bc70      	pop	{r4, r5, r6}
   1d990:	4770      	bx	lr
   1d992:	bf00      	nop
   1d994:	20002e30 	.word	0x20002e30

0001d998 <z_sched_start>:
{
   1d998:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d99a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d99e:	f3ef 8411 	mrs	r4, BASEPRI
   1d9a2:	f382 8811 	msr	BASEPRI, r2
   1d9a6:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d9aa:	7b42      	ldrb	r2, [r0, #13]
   1d9ac:	0751      	lsls	r1, r2, #29
   1d9ae:	d404      	bmi.n	1d9ba <z_sched_start+0x22>
	__asm__ volatile(
   1d9b0:	f384 8811 	msr	BASEPRI, r4
   1d9b4:	f3bf 8f6f 	isb	sy
}
   1d9b8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d9ba:	f022 0204 	bic.w	r2, r2, #4
   1d9be:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d9c0:	f7ff ffb2 	bl	1d928 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d9c4:	4621      	mov	r1, r4
   1d9c6:	4802      	ldr	r0, [pc, #8]	; (1d9d0 <z_sched_start+0x38>)
}
   1d9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d9cc:	f7ff bf2c 	b.w	1d828 <z_reschedule>
   1d9d0:	20004436 	.word	0x20004436

0001d9d4 <move_thread_to_end_of_prio_q>:
{
   1d9d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1d9d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d9da:	2b00      	cmp	r3, #0
{
   1d9dc:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d9de:	da02      	bge.n	1d9e6 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1d9e0:	4817      	ldr	r0, [pc, #92]	; (1da40 <move_thread_to_end_of_prio_q+0x6c>)
   1d9e2:	f7ff ff47 	bl	1d874 <z_priq_dumb_remove>
	return list->head == list;
   1d9e6:	4a17      	ldr	r2, [pc, #92]	; (1da44 <move_thread_to_end_of_prio_q+0x70>)
   1d9e8:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d9ea:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1d9ec:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d9f0:	4283      	cmp	r3, r0
   1d9f2:	bf08      	it	eq
   1d9f4:	2300      	moveq	r3, #0
   1d9f6:	2b00      	cmp	r3, #0
   1d9f8:	bf38      	it	cc
   1d9fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d9fc:	b1d3      	cbz	r3, 1da34 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1d9fe:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1da02:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1da06:	42ae      	cmp	r6, r5
   1da08:	db03      	blt.n	1da12 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1da0a:	42a3      	cmp	r3, r4
   1da0c:	d012      	beq.n	1da34 <move_thread_to_end_of_prio_q+0x60>
   1da0e:	681b      	ldr	r3, [r3, #0]
   1da10:	e7f4      	b.n	1d9fc <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1da12:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1da14:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1da18:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1da1a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1da1c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1da1e:	6890      	ldr	r0, [r2, #8]
   1da20:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1da24:	734b      	strb	r3, [r1, #13]
   1da26:	1a43      	subs	r3, r0, r1
   1da28:	4258      	negs	r0, r3
}
   1da2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1da2e:	4158      	adcs	r0, r3
   1da30:	f7ff bf36 	b.w	1d8a0 <update_cache>
	node->prev = list->tail;
   1da34:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1da38:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1da3a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1da3c:	6311      	str	r1, [r2, #48]	; 0x30
}
   1da3e:	e7ed      	b.n	1da1c <move_thread_to_end_of_prio_q+0x48>
   1da40:	20002e5c 	.word	0x20002e5c
   1da44:	20002e30 	.word	0x20002e30

0001da48 <z_time_slice>:
{
   1da48:	b570      	push	{r4, r5, r6, lr}
   1da4a:	4601      	mov	r1, r0
	__asm__ volatile(
   1da4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da50:	f3ef 8411 	mrs	r4, BASEPRI
   1da54:	f383 8811 	msr	BASEPRI, r3
   1da58:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1da5c:	4b16      	ldr	r3, [pc, #88]	; (1dab8 <z_time_slice+0x70>)
   1da5e:	4a17      	ldr	r2, [pc, #92]	; (1dabc <z_time_slice+0x74>)
   1da60:	6898      	ldr	r0, [r3, #8]
   1da62:	6815      	ldr	r5, [r2, #0]
   1da64:	42a8      	cmp	r0, r5
   1da66:	461d      	mov	r5, r3
   1da68:	d106      	bne.n	1da78 <z_time_slice+0x30>
			z_reset_time_slice();
   1da6a:	f7ff fe9b 	bl	1d7a4 <z_reset_time_slice>
	__asm__ volatile(
   1da6e:	f384 8811 	msr	BASEPRI, r4
   1da72:	f3bf 8f6f 	isb	sy
}
   1da76:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1da78:	2600      	movs	r6, #0
   1da7a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1da7c:	4a10      	ldr	r2, [pc, #64]	; (1dac0 <z_time_slice+0x78>)
   1da7e:	6812      	ldr	r2, [r2, #0]
   1da80:	b1ba      	cbz	r2, 1dab2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1da82:	89c2      	ldrh	r2, [r0, #14]
   1da84:	2a7f      	cmp	r2, #127	; 0x7f
   1da86:	d814      	bhi.n	1dab2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1da88:	7b42      	ldrb	r2, [r0, #13]
   1da8a:	06d2      	lsls	r2, r2, #27
   1da8c:	d111      	bne.n	1dab2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1da8e:	4a0d      	ldr	r2, [pc, #52]	; (1dac4 <z_time_slice+0x7c>)
   1da90:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1da94:	6812      	ldr	r2, [r2, #0]
   1da96:	4296      	cmp	r6, r2
   1da98:	db0b      	blt.n	1dab2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1da9a:	4a0b      	ldr	r2, [pc, #44]	; (1dac8 <z_time_slice+0x80>)
   1da9c:	4290      	cmp	r0, r2
   1da9e:	d008      	beq.n	1dab2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1daa0:	695a      	ldr	r2, [r3, #20]
   1daa2:	428a      	cmp	r2, r1
   1daa4:	dc02      	bgt.n	1daac <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1daa6:	f7ff ff95 	bl	1d9d4 <move_thread_to_end_of_prio_q>
   1daaa:	e7de      	b.n	1da6a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1daac:	1a52      	subs	r2, r2, r1
   1daae:	615a      	str	r2, [r3, #20]
   1dab0:	e7dd      	b.n	1da6e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1dab2:	2300      	movs	r3, #0
   1dab4:	616b      	str	r3, [r5, #20]
   1dab6:	e7da      	b.n	1da6e <z_time_slice+0x26>
   1dab8:	20002e30 	.word	0x20002e30
   1dabc:	20002e64 	.word	0x20002e64
   1dac0:	20002e6c 	.word	0x20002e6c
   1dac4:	20002e68 	.word	0x20002e68
   1dac8:	200023c0 	.word	0x200023c0

0001dacc <z_impl_k_thread_suspend>:
{
   1dacc:	b570      	push	{r4, r5, r6, lr}
   1dace:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1dad0:	3018      	adds	r0, #24
   1dad2:	f004 fdc5 	bl	22660 <z_abort_timeout>
	__asm__ volatile(
   1dad6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dada:	f3ef 8611 	mrs	r6, BASEPRI
   1dade:	f383 8811 	msr	BASEPRI, r3
   1dae2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1dae6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1daea:	2b00      	cmp	r3, #0
   1daec:	da07      	bge.n	1dafe <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1daee:	480f      	ldr	r0, [pc, #60]	; (1db2c <z_impl_k_thread_suspend+0x60>)
   1daf0:	4621      	mov	r1, r4
   1daf2:	f7ff febf 	bl	1d874 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1daf6:	7b63      	ldrb	r3, [r4, #13]
   1daf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dafc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1dafe:	4d0c      	ldr	r5, [pc, #48]	; (1db30 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1db00:	7b63      	ldrb	r3, [r4, #13]
   1db02:	68a8      	ldr	r0, [r5, #8]
   1db04:	f043 0310 	orr.w	r3, r3, #16
   1db08:	7363      	strb	r3, [r4, #13]
   1db0a:	1b03      	subs	r3, r0, r4
   1db0c:	4258      	negs	r0, r3
   1db0e:	4158      	adcs	r0, r3
   1db10:	f7ff fec6 	bl	1d8a0 <update_cache>
	__asm__ volatile(
   1db14:	f386 8811 	msr	BASEPRI, r6
   1db18:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1db1c:	68ab      	ldr	r3, [r5, #8]
   1db1e:	42a3      	cmp	r3, r4
   1db20:	d103      	bne.n	1db2a <z_impl_k_thread_suspend+0x5e>
}
   1db22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1db26:	f004 bc3d 	b.w	223a4 <z_reschedule_unlocked>
}
   1db2a:	bd70      	pop	{r4, r5, r6, pc}
   1db2c:	20002e5c 	.word	0x20002e5c
   1db30:	20002e30 	.word	0x20002e30

0001db34 <z_thread_single_abort>:
{
   1db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db38:	4604      	mov	r4, r0
	__asm__ volatile(
   1db3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db3e:	f3ef 8211 	mrs	r2, BASEPRI
   1db42:	f383 8811 	msr	BASEPRI, r3
   1db46:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1db4a:	7b43      	ldrb	r3, [r0, #13]
   1db4c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1db50:	d005      	beq.n	1db5e <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1db52:	f382 8811 	msr	BASEPRI, r2
   1db56:	f3bf 8f6f 	isb	sy
}
   1db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1db5e:	f043 0320 	orr.w	r3, r3, #32
   1db62:	7343      	strb	r3, [r0, #13]
   1db64:	f382 8811 	msr	BASEPRI, r2
   1db68:	f3bf 8f6f 	isb	sy
   1db6c:	3018      	adds	r0, #24
   1db6e:	f004 fd77 	bl	22660 <z_abort_timeout>
	__asm__ volatile(
   1db72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db76:	f3ef 8611 	mrs	r6, BASEPRI
   1db7a:	f383 8811 	msr	BASEPRI, r3
   1db7e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1db82:	7b63      	ldrb	r3, [r4, #13]
   1db84:	06d8      	lsls	r0, r3, #27
   1db86:	d116      	bne.n	1dbb6 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1db88:	69a2      	ldr	r2, [r4, #24]
   1db8a:	b9a2      	cbnz	r2, 1dbb6 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1db8c:	0619      	lsls	r1, r3, #24
   1db8e:	d507      	bpl.n	1dba0 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1db90:	4826      	ldr	r0, [pc, #152]	; (1dc2c <z_thread_single_abort+0xf8>)
   1db92:	4621      	mov	r1, r4
   1db94:	f7ff fe6e 	bl	1d874 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1db98:	7b63      	ldrb	r3, [r4, #13]
   1db9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1db9e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1dba0:	4b23      	ldr	r3, [pc, #140]	; (1dc30 <z_thread_single_abort+0xfc>)
   1dba2:	6898      	ldr	r0, [r3, #8]
   1dba4:	1b02      	subs	r2, r0, r4
   1dba6:	4250      	negs	r0, r2
   1dba8:	4150      	adcs	r0, r2
   1dbaa:	f7ff fe79 	bl	1d8a0 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1dbae:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1dbb2:	2700      	movs	r7, #0
   1dbb4:	e01e      	b.n	1dbf4 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1dbb6:	079b      	lsls	r3, r3, #30
   1dbb8:	d5f9      	bpl.n	1dbae <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1dbba:	68a0      	ldr	r0, [r4, #8]
   1dbbc:	4621      	mov	r1, r4
   1dbbe:	f7ff fe59 	bl	1d874 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dbc2:	7b63      	ldrb	r3, [r4, #13]
   1dbc4:	f023 0302 	bic.w	r3, r3, #2
   1dbc8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1dbca:	2300      	movs	r3, #0
   1dbcc:	60a3      	str	r3, [r4, #8]
   1dbce:	e7ee      	b.n	1dbae <z_thread_single_abort+0x7a>
   1dbd0:	f105 0018 	add.w	r0, r5, #24
   1dbd4:	f004 fd44 	bl	22660 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1dbd8:	68a8      	ldr	r0, [r5, #8]
   1dbda:	4629      	mov	r1, r5
   1dbdc:	f7ff fe4a 	bl	1d874 <z_priq_dumb_remove>
   1dbe0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1dbe2:	60af      	str	r7, [r5, #8]
   1dbe4:	f023 0302 	bic.w	r3, r3, #2
   1dbe8:	736b      	strb	r3, [r5, #13]
   1dbea:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1dbee:	4628      	mov	r0, r5
   1dbf0:	f7ff fe9a 	bl	1d928 <ready_thread>
	return list->head == list;
   1dbf4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dbf6:	4545      	cmp	r5, r8
   1dbf8:	d001      	beq.n	1dbfe <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1dbfa:	2d00      	cmp	r5, #0
   1dbfc:	d1e8      	bne.n	1dbd0 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1dbfe:	4b0c      	ldr	r3, [pc, #48]	; (1dc30 <z_thread_single_abort+0xfc>)
   1dc00:	689a      	ldr	r2, [r3, #8]
   1dc02:	4b0c      	ldr	r3, [pc, #48]	; (1dc34 <z_thread_single_abort+0x100>)
   1dc04:	429a      	cmp	r2, r3
   1dc06:	d102      	bne.n	1dc0e <z_thread_single_abort+0xda>
			update_cache(1);
   1dc08:	2001      	movs	r0, #1
   1dc0a:	f7ff fe49 	bl	1d8a0 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1dc0e:	7b63      	ldrb	r3, [r4, #13]
   1dc10:	f043 0308 	orr.w	r3, r3, #8
   1dc14:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1dc16:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1dc18:	f386 8811 	msr	BASEPRI, r6
   1dc1c:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1dc20:	2b00      	cmp	r3, #0
   1dc22:	d09a      	beq.n	1db5a <z_thread_single_abort+0x26>
		fn_abort(thread);
   1dc24:	4620      	mov	r0, r4
}
   1dc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1dc2a:	4718      	bx	r3
   1dc2c:	20002e5c 	.word	0x20002e5c
   1dc30:	20002e30 	.word	0x20002e30
   1dc34:	200023c0 	.word	0x200023c0

0001dc38 <unready_thread>:
{
   1dc38:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1dc3a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1dc3e:	2b00      	cmp	r3, #0
{
   1dc40:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1dc42:	da06      	bge.n	1dc52 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1dc44:	4807      	ldr	r0, [pc, #28]	; (1dc64 <unready_thread+0x2c>)
   1dc46:	f7ff fe15 	bl	1d874 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1dc4a:	7b4b      	ldrb	r3, [r1, #13]
   1dc4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc50:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1dc52:	4b05      	ldr	r3, [pc, #20]	; (1dc68 <unready_thread+0x30>)
   1dc54:	6898      	ldr	r0, [r3, #8]
   1dc56:	1a43      	subs	r3, r0, r1
   1dc58:	4258      	negs	r0, r3
   1dc5a:	4158      	adcs	r0, r3
}
   1dc5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1dc60:	f7ff be1e 	b.w	1d8a0 <update_cache>
   1dc64:	20002e5c 	.word	0x20002e5c
   1dc68:	20002e30 	.word	0x20002e30

0001dc6c <pend>:
{
   1dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc70:	4606      	mov	r6, r0
   1dc72:	4614      	mov	r4, r2
   1dc74:	461d      	mov	r5, r3
	__asm__ volatile(
   1dc76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc7a:	f3ef 8711 	mrs	r7, BASEPRI
   1dc7e:	f383 8811 	msr	BASEPRI, r3
   1dc82:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1dc86:	f004 fbf3 	bl	22470 <add_to_waitq_locked>
	__asm__ volatile(
   1dc8a:	f387 8811 	msr	BASEPRI, r7
   1dc8e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dc92:	1c6b      	adds	r3, r5, #1
   1dc94:	bf08      	it	eq
   1dc96:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1dc9a:	d008      	beq.n	1dcae <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1dc9c:	4622      	mov	r2, r4
   1dc9e:	462b      	mov	r3, r5
   1dca0:	f106 0018 	add.w	r0, r6, #24
   1dca4:	4903      	ldr	r1, [pc, #12]	; (1dcb4 <pend+0x48>)
}
   1dca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dcaa:	f000 bb21 	b.w	1e2f0 <z_add_timeout>
   1dcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcb2:	bf00      	nop
   1dcb4:	00022431 	.word	0x00022431

0001dcb8 <z_pend_curr>:
{
   1dcb8:	b510      	push	{r4, lr}
	pending_current = _current;
   1dcba:	4b07      	ldr	r3, [pc, #28]	; (1dcd8 <z_pend_curr+0x20>)
   1dcbc:	6898      	ldr	r0, [r3, #8]
   1dcbe:	4b07      	ldr	r3, [pc, #28]	; (1dcdc <z_pend_curr+0x24>)
{
   1dcc0:	460c      	mov	r4, r1
	pending_current = _current;
   1dcc2:	6018      	str	r0, [r3, #0]
{
   1dcc4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1dcc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dcca:	f7ff ffcf 	bl	1dc6c <pend>
   1dcce:	4620      	mov	r0, r4
}
   1dcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dcd4:	f7f7 bbb4 	b.w	15440 <arch_swap>
   1dcd8:	20002e30 	.word	0x20002e30
   1dcdc:	20002e64 	.word	0x20002e64

0001dce0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1dce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dce4:	4605      	mov	r5, r0
   1dce6:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1dce8:	f004 fcfa 	bl	226e0 <z_tick_get_32>
   1dcec:	4604      	mov	r4, r0
	__asm__ volatile(
   1dcee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dcf2:	f3ef 8811 	mrs	r8, BASEPRI
   1dcf6:	f383 8811 	msr	BASEPRI, r3
   1dcfa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1dcfe:	4e12      	ldr	r6, [pc, #72]	; (1dd48 <z_tick_sleep.part.0+0x68>)
   1dd00:	4b12      	ldr	r3, [pc, #72]	; (1dd4c <z_tick_sleep.part.0+0x6c>)
   1dd02:	68b0      	ldr	r0, [r6, #8]
   1dd04:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1dd06:	f7ff ff97 	bl	1dc38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1dd0a:	68b0      	ldr	r0, [r6, #8]
   1dd0c:	4910      	ldr	r1, [pc, #64]	; (1dd50 <z_tick_sleep.part.0+0x70>)
   1dd0e:	462a      	mov	r2, r5
   1dd10:	463b      	mov	r3, r7
   1dd12:	3018      	adds	r0, #24
   1dd14:	f000 faec 	bl	1e2f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1dd18:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1dd1a:	7b53      	ldrb	r3, [r2, #13]
   1dd1c:	f043 0310 	orr.w	r3, r3, #16
   1dd20:	7353      	strb	r3, [r2, #13]
   1dd22:	4640      	mov	r0, r8
   1dd24:	f7f7 fb8c 	bl	15440 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1dd28:	f004 fcda 	bl	226e0 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1dd2c:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1dd2e:	1a24      	subs	r4, r4, r0
   1dd30:	f04f 0500 	mov.w	r5, #0
   1dd34:	f165 0500 	sbc.w	r5, r5, #0
   1dd38:	2c00      	cmp	r4, #0
   1dd3a:	f175 0300 	sbcs.w	r3, r5, #0
   1dd3e:	bfb8      	it	lt
   1dd40:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1dd42:	4620      	mov	r0, r4
   1dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd48:	20002e30 	.word	0x20002e30
   1dd4c:	20002e64 	.word	0x20002e64
   1dd50:	00022431 	.word	0x00022431

0001dd54 <z_set_prio>:
{
   1dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd58:	4604      	mov	r4, r0
   1dd5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd5e:	f3ef 8811 	mrs	r8, BASEPRI
   1dd62:	f383 8811 	msr	BASEPRI, r3
   1dd66:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1dd6a:	7b43      	ldrb	r3, [r0, #13]
   1dd6c:	06db      	lsls	r3, r3, #27
   1dd6e:	b24e      	sxtb	r6, r1
   1dd70:	d12e      	bne.n	1ddd0 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1dd72:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1dd74:	bb65      	cbnz	r5, 1ddd0 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1dd76:	4f18      	ldr	r7, [pc, #96]	; (1ddd8 <z_set_prio+0x84>)
   1dd78:	4621      	mov	r1, r4
   1dd7a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1dd7e:	f7ff fd79 	bl	1d874 <z_priq_dumb_remove>
	return list->head == list;
   1dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1dd86:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd88:	4283      	cmp	r3, r0
   1dd8a:	bf18      	it	ne
   1dd8c:	461d      	movne	r5, r3
   1dd8e:	2d00      	cmp	r5, #0
   1dd90:	bf38      	it	cc
   1dd92:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dd94:	b1b5      	cbz	r5, 1ddc4 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1dd96:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1dd9a:	42b1      	cmp	r1, r6
   1dd9c:	dc03      	bgt.n	1dda6 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1dd9e:	42aa      	cmp	r2, r5
   1dda0:	d010      	beq.n	1ddc4 <z_set_prio+0x70>
   1dda2:	682d      	ldr	r5, [r5, #0]
   1dda4:	e7f6      	b.n	1dd94 <z_set_prio+0x40>
	node->prev = successor->prev;
   1dda6:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1dda8:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1ddac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ddae:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ddb0:	2001      	movs	r0, #1
   1ddb2:	f7ff fd75 	bl	1d8a0 <update_cache>
   1ddb6:	2001      	movs	r0, #1
	__asm__ volatile(
   1ddb8:	f388 8811 	msr	BASEPRI, r8
   1ddbc:	f3bf 8f6f 	isb	sy
}
   1ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1ddc4:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ddca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ddcc:	633c      	str	r4, [r7, #48]	; 0x30
}
   1ddce:	e7ef      	b.n	1ddb0 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ddd0:	73a6      	strb	r6, [r4, #14]
   1ddd2:	2000      	movs	r0, #0
   1ddd4:	e7f0      	b.n	1ddb8 <z_set_prio+0x64>
   1ddd6:	bf00      	nop
   1ddd8:	20002e30 	.word	0x20002e30

0001dddc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1dddc:	4b04      	ldr	r3, [pc, #16]	; (1ddf0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ddde:	2100      	movs	r1, #0
   1dde0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1dde4:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1dde8:	4608      	mov	r0, r1
   1ddea:	f7ff bcf1 	b.w	1d7d0 <k_sched_time_slice_set>
   1ddee:	bf00      	nop
   1ddf0:	20002e30 	.word	0x20002e30

0001ddf4 <z_impl_k_yield>:
{
   1ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1ddf6:	4c24      	ldr	r4, [pc, #144]	; (1de88 <z_impl_k_yield+0x94>)
   1ddf8:	4b24      	ldr	r3, [pc, #144]	; (1de8c <z_impl_k_yield+0x98>)
   1ddfa:	68a2      	ldr	r2, [r4, #8]
   1ddfc:	429a      	cmp	r2, r3
   1ddfe:	d030      	beq.n	1de62 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1de00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de04:	f3ef 8511 	mrs	r5, BASEPRI
   1de08:	f383 8811 	msr	BASEPRI, r3
   1de0c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1de10:	68a1      	ldr	r1, [r4, #8]
   1de12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1de16:	f7ff fd2d 	bl	1d874 <z_priq_dumb_remove>
	return list->head == list;
   1de1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1de1c:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1de1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de20:	4283      	cmp	r3, r0
   1de22:	bf08      	it	eq
   1de24:	2300      	moveq	r3, #0
   1de26:	2b00      	cmp	r3, #0
   1de28:	bf38      	it	cc
   1de2a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1de2c:	b32b      	cbz	r3, 1de7a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1de2e:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1de32:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1de36:	42b7      	cmp	r7, r6
   1de38:	db03      	blt.n	1de42 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1de3a:	428b      	cmp	r3, r1
   1de3c:	d01d      	beq.n	1de7a <z_impl_k_yield+0x86>
   1de3e:	681b      	ldr	r3, [r3, #0]
   1de40:	e7f4      	b.n	1de2c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1de42:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1de44:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1de48:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1de4a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1de4c:	7b53      	ldrb	r3, [r2, #13]
   1de4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1de52:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1de54:	2001      	movs	r0, #1
   1de56:	f7ff fd23 	bl	1d8a0 <update_cache>
	__asm__ volatile(
   1de5a:	f385 8811 	msr	BASEPRI, r5
   1de5e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1de62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de66:	f3ef 8011 	mrs	r0, BASEPRI
   1de6a:	f383 8811 	msr	BASEPRI, r3
   1de6e:	f3bf 8f6f 	isb	sy
}
   1de72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1de76:	f7f7 bae3 	b.w	15440 <arch_swap>
	node->prev = list->tail;
   1de7a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1de7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1de80:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1de82:	6322      	str	r2, [r4, #48]	; 0x30
}
   1de84:	e7e2      	b.n	1de4c <z_impl_k_yield+0x58>
   1de86:	bf00      	nop
   1de88:	20002e30 	.word	0x20002e30
   1de8c:	200023c0 	.word	0x200023c0

0001de90 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1de90:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1de94:	bf08      	it	eq
   1de96:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1de9a:	b508      	push	{r3, lr}
   1de9c:	4602      	mov	r2, r0
   1de9e:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dea0:	d106      	bne.n	1deb0 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1dea2:	4b0b      	ldr	r3, [pc, #44]	; (1ded0 <z_impl_k_sleep+0x40>)
   1dea4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1dea6:	f7ff fe11 	bl	1dacc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1deaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1deae:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1deb0:	4313      	orrs	r3, r2
   1deb2:	d10a      	bne.n	1deca <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1deb4:	f7ff ff9e 	bl	1ddf4 <z_impl_k_yield>
		return 0;
   1deb8:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
   1deba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1debe:	fb80 2303 	smull	r2, r3, r0, r3
   1dec2:	0bd0      	lsrs	r0, r2, #15
   1dec4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1dec8:	e7f1      	b.n	1deae <z_impl_k_sleep+0x1e>
   1deca:	f7ff ff09 	bl	1dce0 <z_tick_sleep.part.0>
   1dece:	e7f4      	b.n	1deba <z_impl_k_sleep+0x2a>
   1ded0:	20002e30 	.word	0x20002e30

0001ded4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ded4:	4b01      	ldr	r3, [pc, #4]	; (1dedc <z_impl_k_current_get+0x8>)
   1ded6:	6898      	ldr	r0, [r3, #8]
   1ded8:	4770      	bx	lr
   1deda:	bf00      	nop
   1dedc:	20002e30 	.word	0x20002e30

0001dee0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1dee0:	b538      	push	{r3, r4, r5, lr}
   1dee2:	4604      	mov	r4, r0
   1dee4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dee8:	f3ef 8511 	mrs	r5, BASEPRI
   1deec:	f383 8811 	msr	BASEPRI, r3
   1def0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1def4:	f004 fae7 	bl	224c6 <z_unpend_first_thread>

	if (thread != NULL) {
   1def8:	b150      	cbz	r0, 1df10 <z_impl_k_sem_give+0x30>
   1defa:	2200      	movs	r2, #0
   1defc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1df00:	f004 fa86 	bl	22410 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1df04:	4629      	mov	r1, r5
   1df06:	4808      	ldr	r0, [pc, #32]	; (1df28 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1df08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1df0c:	f7ff bc8c 	b.w	1d828 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1df10:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1df14:	429a      	cmp	r2, r3
   1df16:	bf18      	it	ne
   1df18:	3301      	addne	r3, #1
   1df1a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1df1c:	2102      	movs	r1, #2
   1df1e:	f104 0010 	add.w	r0, r4, #16
   1df22:	f004 fd7c 	bl	22a1e <z_handle_obj_poll_events>
}
   1df26:	e7ed      	b.n	1df04 <z_impl_k_sem_give+0x24>
   1df28:	20004436 	.word	0x20004436

0001df2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1df2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1df2e:	4614      	mov	r4, r2
   1df30:	461d      	mov	r5, r3
   1df32:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df36:	f3ef 8111 	mrs	r1, BASEPRI
   1df3a:	f383 8811 	msr	BASEPRI, r3
   1df3e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1df42:	6883      	ldr	r3, [r0, #8]
   1df44:	b143      	cbz	r3, 1df58 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1df46:	3b01      	subs	r3, #1
   1df48:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1df4a:	f381 8811 	msr	BASEPRI, r1
   1df4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1df52:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1df54:	b003      	add	sp, #12
   1df56:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1df58:	ea54 0305 	orrs.w	r3, r4, r5
   1df5c:	d106      	bne.n	1df6c <z_impl_k_sem_take+0x40>
   1df5e:	f381 8811 	msr	BASEPRI, r1
   1df62:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1df66:	f06f 000f 	mvn.w	r0, #15
   1df6a:	e7f3      	b.n	1df54 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1df6c:	4602      	mov	r2, r0
   1df6e:	e9cd 4500 	strd	r4, r5, [sp]
   1df72:	4802      	ldr	r0, [pc, #8]	; (1df7c <z_impl_k_sem_take+0x50>)
   1df74:	f7ff fea0 	bl	1dcb8 <z_pend_curr>
	return ret;
   1df78:	e7ec      	b.n	1df54 <z_impl_k_sem_take+0x28>
   1df7a:	bf00      	nop
   1df7c:	20004436 	.word	0x20004436

0001df80 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1df80:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1df82:	4c08      	ldr	r4, [pc, #32]	; (1dfa4 <k_sys_work_q_init+0x24>)
   1df84:	4908      	ldr	r1, [pc, #32]	; (1dfa8 <k_sys_work_q_init+0x28>)
   1df86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1df8e:	4620      	mov	r0, r4
   1df90:	f000 f8de 	bl	1e150 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1df94:	4905      	ldr	r1, [pc, #20]	; (1dfac <k_sys_work_q_init+0x2c>)
   1df96:	f104 0018 	add.w	r0, r4, #24
   1df9a:	f004 fae3 	bl	22564 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1df9e:	2000      	movs	r0, #0
   1dfa0:	bd10      	pop	{r4, pc}
   1dfa2:	bf00      	nop
   1dfa4:	200024d0 	.word	0x200024d0
   1dfa8:	20006780 	.word	0x20006780
   1dfac:	0002533e 	.word	0x0002533e

0001dfb0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1dfb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1dfb4:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1dfb8:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1dfbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1dfbe:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1dfc0:	2504      	movs	r5, #4
   1dfc2:	7345      	strb	r5, [r0, #13]
{
   1dfc4:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1dfc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1dfc8:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dfca:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1dfcc:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dfce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1dfd0:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dfd2:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1dfd6:	3720      	adds	r7, #32
	node->prev = NULL;
   1dfd8:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1dfdc:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1dfe0:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dfe2:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dfe6:	9202      	str	r2, [sp, #8]
   1dfe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dfea:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1dfec:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dfee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dff0:	9200      	str	r2, [sp, #0]
   1dff2:	4642      	mov	r2, r8
{
   1dff4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dff6:	f7f7 fab1 	bl	1555c <arch_new_thread>
	if (!_current) {
   1dffa:	4b05      	ldr	r3, [pc, #20]	; (1e010 <z_setup_new_thread+0x60>)
   1dffc:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1dffe:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1e002:	b103      	cbz	r3, 1e006 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1e004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1e006:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1e008:	4640      	mov	r0, r8
   1e00a:	b004      	add	sp, #16
   1e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e010:	20002e30 	.word	0x20002e30

0001e014 <z_impl_k_thread_create>:
{
   1e014:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e016:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e018:	2500      	movs	r5, #0
   1e01a:	9505      	str	r5, [sp, #20]
   1e01c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1e01e:	9504      	str	r5, [sp, #16]
   1e020:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1e022:	9503      	str	r5, [sp, #12]
   1e024:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e026:	9502      	str	r5, [sp, #8]
{
   1e028:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e02c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1e02e:	9501      	str	r5, [sp, #4]
   1e030:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e032:	9500      	str	r5, [sp, #0]
{
   1e034:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e036:	f7ff ffbb 	bl	1dfb0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e03a:	1c7b      	adds	r3, r7, #1
   1e03c:	bf08      	it	eq
   1e03e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1e042:	d005      	beq.n	1e050 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e044:	ea56 0307 	orrs.w	r3, r6, r7
   1e048:	d105      	bne.n	1e056 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1e04a:	4620      	mov	r0, r4
   1e04c:	f7ff fca4 	bl	1d998 <z_sched_start>
}
   1e050:	4620      	mov	r0, r4
   1e052:	b007      	add	sp, #28
   1e054:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1e056:	4904      	ldr	r1, [pc, #16]	; (1e068 <z_impl_k_thread_create+0x54>)
   1e058:	4632      	mov	r2, r6
   1e05a:	463b      	mov	r3, r7
   1e05c:	f104 0018 	add.w	r0, r4, #24
   1e060:	f000 f946 	bl	1e2f0 <z_add_timeout>
   1e064:	e7f4      	b.n	1e050 <z_impl_k_thread_create+0x3c>
   1e066:	bf00      	nop
   1e068:	00022431 	.word	0x00022431

0001e06c <z_init_static_threads>:
{
   1e06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1e070:	4e2a      	ldr	r6, [pc, #168]	; (1e11c <z_init_static_threads+0xb0>)
   1e072:	4d2b      	ldr	r5, [pc, #172]	; (1e120 <z_init_static_threads+0xb4>)
{
   1e074:	b086      	sub	sp, #24
   1e076:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1e078:	42b5      	cmp	r5, r6
   1e07a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1e07e:	d310      	bcc.n	1e0a2 <z_init_static_threads+0x36>
	k_sched_lock();
   1e080:	f7ff fbe4 	bl	1d84c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e084:	4c26      	ldr	r4, [pc, #152]	; (1e120 <z_init_static_threads+0xb4>)
   1e086:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1e124 <z_init_static_threads+0xb8>
   1e08a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1e08e:	f240 36e7 	movw	r6, #999	; 0x3e7
   1e092:	2700      	movs	r7, #0
   1e094:	4544      	cmp	r4, r8
   1e096:	d321      	bcc.n	1e0dc <z_init_static_threads+0x70>
}
   1e098:	b006      	add	sp, #24
   1e09a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1e09e:	f7ff bc27 	b.w	1d8f0 <k_sched_unlock>
		z_setup_new_thread(
   1e0a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e0a6:	9305      	str	r3, [sp, #20]
   1e0a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e0ac:	9304      	str	r3, [sp, #16]
   1e0ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e0b2:	9303      	str	r3, [sp, #12]
   1e0b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e0b8:	9302      	str	r3, [sp, #8]
   1e0ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e0be:	9301      	str	r3, [sp, #4]
   1e0c0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e0c4:	9300      	str	r3, [sp, #0]
   1e0c6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e0ca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e0ce:	f7ff ff6f 	bl	1dfb0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e0d2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e0d6:	65dd      	str	r5, [r3, #92]	; 0x5c
   1e0d8:	4625      	mov	r5, r4
   1e0da:	e7cd      	b.n	1e078 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e0dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e0de:	1c5a      	adds	r2, r3, #1
   1e0e0:	d00d      	beq.n	1e0fe <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1e0e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e0e6:	4630      	mov	r0, r6
   1e0e8:	4639      	mov	r1, r7
   1e0ea:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e0ee:	42b9      	cmp	r1, r7
   1e0f0:	bf08      	it	eq
   1e0f2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1e0f4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e0f6:	d104      	bne.n	1e102 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1e0f8:	4628      	mov	r0, r5
   1e0fa:	f7ff fc4d 	bl	1d998 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e0fe:	3430      	adds	r4, #48	; 0x30
   1e100:	e7c8      	b.n	1e094 <z_init_static_threads+0x28>
   1e102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e106:	2300      	movs	r3, #0
   1e108:	f7e2 fffa 	bl	1100 <__aeabi_uldivmod>
   1e10c:	4602      	mov	r2, r0
   1e10e:	460b      	mov	r3, r1
   1e110:	f105 0018 	add.w	r0, r5, #24
   1e114:	4651      	mov	r1, sl
   1e116:	f000 f8eb 	bl	1e2f0 <z_add_timeout>
   1e11a:	e7f0      	b.n	1e0fe <z_init_static_threads+0x92>
   1e11c:	20000870 	.word	0x20000870
   1e120:	20000870 	.word	0x20000870
   1e124:	00022431 	.word	0x00022431

0001e128 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1e128:	b508      	push	{r3, lr}
	__asm__ volatile(
   1e12a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e12e:	f3ef 8411 	mrs	r4, BASEPRI
   1e132:	f383 8811 	msr	BASEPRI, r3
   1e136:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1e13a:	4b04      	ldr	r3, [pc, #16]	; (1e14c <z_self_abort+0x24>)
   1e13c:	6898      	ldr	r0, [r3, #8]
   1e13e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1e140:	f7ff fcc4 	bl	1dacc <z_impl_k_thread_suspend>
   1e144:	4620      	mov	r0, r4
   1e146:	f7f7 f97b 	bl	15440 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e14a:	bf00      	nop
   1e14c:	20002e30 	.word	0x20002e30

0001e150 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e154:	4604      	mov	r4, r0
   1e156:	b088      	sub	sp, #32
   1e158:	460d      	mov	r5, r1
   1e15a:	4616      	mov	r6, r2
   1e15c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1e15e:	f004 f88f 	bl	22280 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1e162:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e166:	2200      	movs	r2, #0
   1e168:	2300      	movs	r3, #0
   1e16a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e16e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1e172:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1e176:	4b07      	ldr	r3, [pc, #28]	; (1e194 <k_work_q_start+0x44>)
   1e178:	9400      	str	r4, [sp, #0]
   1e17a:	4632      	mov	r2, r6
   1e17c:	4629      	mov	r1, r5
   1e17e:	4640      	mov	r0, r8
   1e180:	f7ff ff48 	bl	1e014 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1e184:	4904      	ldr	r1, [pc, #16]	; (1e198 <k_work_q_start+0x48>)
   1e186:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1e188:	b008      	add	sp, #32
   1e18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e18e:	f004 b9e9 	b.w	22564 <z_impl_k_thread_name_set>
   1e192:	bf00      	nop
   1e194:	0001f733 	.word	0x0001f733
   1e198:	00025347 	.word	0x00025347

0001e19c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1e19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e1a0:	4606      	mov	r6, r0
   1e1a2:	460d      	mov	r5, r1
   1e1a4:	4690      	mov	r8, r2
   1e1a6:	4699      	mov	r9, r3
   1e1a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1ac:	f3ef 8711 	mrs	r7, BASEPRI
   1e1b0:	f383 8811 	msr	BASEPRI, r3
   1e1b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1e1b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1e1ba:	b17b      	cbz	r3, 1e1dc <k_delayed_work_submit_to_queue+0x40>
   1e1bc:	4283      	cmp	r3, r0
   1e1be:	d128      	bne.n	1e212 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	f004 f9f1 	bl	225a8 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1e1c6:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1e1ca:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1e1cc:	d008      	beq.n	1e1e0 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1e1ce:	2800      	cmp	r0, #0
   1e1d0:	da07      	bge.n	1e1e2 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1e1d2:	f387 8811 	msr	BASEPRI, r7
   1e1d6:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1e1da:	e00f      	b.n	1e1fc <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1e1dc:	2800      	cmp	r0, #0
   1e1de:	d0ef      	beq.n	1e1c0 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1e1e0:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e1e2:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1e1e6:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e1e8:	d10b      	bne.n	1e202 <k_delayed_work_submit_to_queue+0x66>
   1e1ea:	f387 8811 	msr	BASEPRI, r7
   1e1ee:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1e1f2:	4629      	mov	r1, r5
   1e1f4:	4630      	mov	r0, r6
   1e1f6:	f004 f9ba 	bl	2256e <k_work_submit_to_queue>
		return 0;
   1e1fa:	2400      	movs	r4, #0
}
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1e202:	4905      	ldr	r1, [pc, #20]	; (1e218 <k_delayed_work_submit_to_queue+0x7c>)
   1e204:	4642      	mov	r2, r8
   1e206:	464b      	mov	r3, r9
   1e208:	f105 0010 	add.w	r0, r5, #16
   1e20c:	f000 f870 	bl	1e2f0 <z_add_timeout>
   1e210:	e7df      	b.n	1e1d2 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1e212:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1e216:	e7dc      	b.n	1e1d2 <k_delayed_work_submit_to_queue+0x36>
   1e218:	0002259f 	.word	0x0002259f

0001e21c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1e21c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1e21e:	4806      	ldr	r0, [pc, #24]	; (1e238 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1e220:	4a06      	ldr	r2, [pc, #24]	; (1e23c <z_data_copy+0x20>)
   1e222:	4907      	ldr	r1, [pc, #28]	; (1e240 <z_data_copy+0x24>)
   1e224:	1a12      	subs	r2, r2, r0
   1e226:	f002 fa05 	bl	20634 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1e22e:	4a05      	ldr	r2, [pc, #20]	; (1e244 <z_data_copy+0x28>)
   1e230:	4905      	ldr	r1, [pc, #20]	; (1e248 <z_data_copy+0x2c>)
   1e232:	4806      	ldr	r0, [pc, #24]	; (1e24c <z_data_copy+0x30>)
   1e234:	f002 b9fe 	b.w	20634 <memcpy>
   1e238:	20000000 	.word	0x20000000
   1e23c:	20000aa8 	.word	0x20000aa8
   1e240:	00025354 	.word	0x00025354
   1e244:	00000000 	.word	0x00000000
   1e248:	00025354 	.word	0x00025354
   1e24c:	20000000 	.word	0x20000000

0001e250 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1e250:	4b03      	ldr	r3, [pc, #12]	; (1e260 <elapsed+0x10>)
   1e252:	681b      	ldr	r3, [r3, #0]
   1e254:	b90b      	cbnz	r3, 1e25a <elapsed+0xa>
   1e256:	f7f6 bf39 	b.w	150cc <z_clock_elapsed>
}
   1e25a:	2000      	movs	r0, #0
   1e25c:	4770      	bx	lr
   1e25e:	bf00      	nop
   1e260:	20002e70 	.word	0x20002e70

0001e264 <remove_timeout>:
{
   1e264:	b530      	push	{r4, r5, lr}
   1e266:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e268:	b168      	cbz	r0, 1e286 <remove_timeout+0x22>
   1e26a:	4a0a      	ldr	r2, [pc, #40]	; (1e294 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1e26c:	6852      	ldr	r2, [r2, #4]
   1e26e:	4290      	cmp	r0, r2
   1e270:	d009      	beq.n	1e286 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1e272:	b143      	cbz	r3, 1e286 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1e274:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1e278:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1e27c:	1912      	adds	r2, r2, r4
   1e27e:	eb45 0101 	adc.w	r1, r5, r1
   1e282:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1e286:	6842      	ldr	r2, [r0, #4]
   1e288:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e28a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e28c:	2300      	movs	r3, #0
	node->prev = NULL;
   1e28e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e292:	bd30      	pop	{r4, r5, pc}
   1e294:	20000690 	.word	0x20000690

0001e298 <next_timeout>:

static int32_t next_timeout(void)
{
   1e298:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1e29a:	4b13      	ldr	r3, [pc, #76]	; (1e2e8 <next_timeout+0x50>)
   1e29c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e29e:	429c      	cmp	r4, r3
   1e2a0:	bf08      	it	eq
   1e2a2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1e2a4:	f7ff ffd4 	bl	1e250 <elapsed>
   1e2a8:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1e2aa:	b1bc      	cbz	r4, 1e2dc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1e2ac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1e2b0:	1b40      	subs	r0, r0, r5
   1e2b2:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1e2b6:	2801      	cmp	r0, #1
   1e2b8:	f171 0300 	sbcs.w	r3, r1, #0
   1e2bc:	db11      	blt.n	1e2e2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1e2be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1e2c2:	2300      	movs	r3, #0
   1e2c4:	4282      	cmp	r2, r0
   1e2c6:	eb73 0401 	sbcs.w	r4, r3, r1
   1e2ca:	da00      	bge.n	1e2ce <next_timeout+0x36>
   1e2cc:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1e2ce:	4b07      	ldr	r3, [pc, #28]	; (1e2ec <next_timeout+0x54>)
   1e2d0:	695b      	ldr	r3, [r3, #20]
   1e2d2:	b113      	cbz	r3, 1e2da <next_timeout+0x42>
   1e2d4:	4298      	cmp	r0, r3
   1e2d6:	bfa8      	it	ge
   1e2d8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1e2da:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1e2dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e2e0:	e7f5      	b.n	1e2ce <next_timeout+0x36>
   1e2e2:	2000      	movs	r0, #0
   1e2e4:	e7f3      	b.n	1e2ce <next_timeout+0x36>
   1e2e6:	bf00      	nop
   1e2e8:	20000690 	.word	0x20000690
   1e2ec:	20002e30 	.word	0x20002e30

0001e2f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1e2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2f4:	9101      	str	r1, [sp, #4]
   1e2f6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e2f8:	1c4b      	adds	r3, r1, #1
   1e2fa:	bf08      	it	eq
   1e2fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1e300:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e302:	d071      	beq.n	1e3e8 <z_add_timeout+0xf8>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   1e304:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1e306:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1e30a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1e30e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1e312:	ebb3 0804 	subs.w	r8, r3, r4
   1e316:	eb6b 0905 	sbc.w	r9, fp, r5
   1e31a:	f1b8 0f00 	cmp.w	r8, #0
   1e31e:	f179 0300 	sbcs.w	r3, r9, #0
   1e322:	db0f      	blt.n	1e344 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1e324:	f7ff ff94 	bl	1e250 <elapsed>
   1e328:	4a36      	ldr	r2, [pc, #216]	; (1e404 <z_add_timeout+0x114>)
   1e32a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1e32e:	f06f 0301 	mvn.w	r3, #1
   1e332:	1a5b      	subs	r3, r3, r1
   1e334:	eb6b 020c 	sbc.w	r2, fp, ip
   1e338:	1b1e      	subs	r6, r3, r4
   1e33a:	eb62 0705 	sbc.w	r7, r2, r5
   1e33e:	1a34      	subs	r4, r6, r0
   1e340:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1e344:	9b01      	ldr	r3, [sp, #4]
   1e346:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1e34a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e34e:	f3ef 8611 	mrs	r6, BASEPRI
   1e352:	f383 8811 	msr	BASEPRI, r3
   1e356:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1e35a:	f7ff ff79 	bl	1e250 <elapsed>
	ticks = MAX(1, ticks);
   1e35e:	2c01      	cmp	r4, #1
   1e360:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1e364:	4b28      	ldr	r3, [pc, #160]	; (1e408 <z_add_timeout+0x118>)
   1e366:	bfb8      	it	lt
   1e368:	2401      	movlt	r4, #1
   1e36a:	681a      	ldr	r2, [r3, #0]
   1e36c:	bfb8      	it	lt
   1e36e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1e370:	1824      	adds	r4, r4, r0
   1e372:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e376:	429a      	cmp	r2, r3
   1e378:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1e37c:	d001      	beq.n	1e382 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e37e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1e380:	b952      	cbnz	r2, 1e398 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1e382:	685a      	ldr	r2, [r3, #4]
   1e384:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1e388:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1e38a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1e38e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1e392:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1e396:	e014      	b.n	1e3c2 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1e398:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1e39c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1e3a0:	4544      	cmp	r4, r8
   1e3a2:	eb75 0109 	sbcs.w	r1, r5, r9
   1e3a6:	da22      	bge.n	1e3ee <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
   1e3a8:	ebb8 0004 	subs.w	r0, r8, r4
   1e3ac:	eb69 0105 	sbc.w	r1, r9, r5
   1e3b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1e3b4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1e3b6:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1e3ba:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1e3be:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1e3c2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e3c4:	429a      	cmp	r2, r3
   1e3c6:	d00b      	beq.n	1e3e0 <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1e3c8:	4592      	cmp	sl, r2
   1e3ca:	d109      	bne.n	1e3e0 <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e3cc:	f7ff ff64 	bl	1e298 <next_timeout>

			if (next_time == 0 ||
   1e3d0:	b118      	cbz	r0, 1e3da <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
   1e3d2:	4b0e      	ldr	r3, [pc, #56]	; (1e40c <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   1e3d4:	695b      	ldr	r3, [r3, #20]
   1e3d6:	4283      	cmp	r3, r0
   1e3d8:	d002      	beq.n	1e3e0 <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
   1e3da:	2100      	movs	r1, #0
   1e3dc:	f7f6 fe44 	bl	15068 <z_clock_set_timeout>
	__asm__ volatile(
   1e3e0:	f386 8811 	msr	BASEPRI, r6
   1e3e4:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e3e8:	b003      	add	sp, #12
   1e3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1e3ee:	ebb4 0008 	subs.w	r0, r4, r8
   1e3f2:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1e3f6:	42ba      	cmp	r2, r7
   1e3f8:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1e3fc:	d0c1      	beq.n	1e382 <z_add_timeout+0x92>
   1e3fe:	6812      	ldr	r2, [r2, #0]
   1e400:	e7be      	b.n	1e380 <z_add_timeout+0x90>
   1e402:	bf00      	nop
   1e404:	20002570 	.word	0x20002570
   1e408:	20000690 	.word	0x20000690
   1e40c:	20002e30 	.word	0x20002e30

0001e410 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1e410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e414:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e416:	f7ff fb17 	bl	1da48 <z_time_slice>
	__asm__ volatile(
   1e41a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e41e:	f3ef 8411 	mrs	r4, BASEPRI
   1e422:	f383 8811 	msr	BASEPRI, r3
   1e426:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1e42a:	4d2c      	ldr	r5, [pc, #176]	; (1e4dc <z_clock_announce+0xcc>)
   1e42c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1e4e0 <z_clock_announce+0xd0>
	return list->head == list;
   1e430:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1e4e4 <z_clock_announce+0xd4>
   1e434:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e436:	4651      	mov	r1, sl
   1e438:	f8d5 c000 	ldr.w	ip, [r5]
   1e43c:	f8db 0000 	ldr.w	r0, [fp]
   1e440:	4662      	mov	r2, ip
   1e442:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e444:	4558      	cmp	r0, fp
   1e446:	e9da 8900 	ldrd	r8, r9, [sl]
   1e44a:	e9cd 2300 	strd	r2, r3, [sp]
   1e44e:	d00d      	beq.n	1e46c <z_clock_announce+0x5c>
   1e450:	b160      	cbz	r0, 1e46c <z_clock_announce+0x5c>
   1e452:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1e456:	45b4      	cmp	ip, r6
   1e458:	41bb      	sbcs	r3, r7
   1e45a:	da1e      	bge.n	1e49a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1e45c:	9b00      	ldr	r3, [sp, #0]
   1e45e:	ebb6 0c03 	subs.w	ip, r6, r3
   1e462:	9b01      	ldr	r3, [sp, #4]
   1e464:	eb67 0603 	sbc.w	r6, r7, r3
   1e468:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1e46c:	9b00      	ldr	r3, [sp, #0]
   1e46e:	eb13 0208 	adds.w	r2, r3, r8
   1e472:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1e474:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1e478:	eb43 0309 	adc.w	r3, r3, r9
   1e47c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1e480:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1e482:	f7ff ff09 	bl	1e298 <next_timeout>
   1e486:	4631      	mov	r1, r6
   1e488:	f7f6 fdee 	bl	15068 <z_clock_set_timeout>
	__asm__ volatile(
   1e48c:	f384 8811 	msr	BASEPRI, r4
   1e490:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e494:	b003      	add	sp, #12
   1e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1e49a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1e49e:	f04f 0200 	mov.w	r2, #0
   1e4a2:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1e4a6:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1e4aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1e4ae:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1e4b2:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1e4b6:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1e4b8:	f7ff fed4 	bl	1e264 <remove_timeout>
   1e4bc:	f384 8811 	msr	BASEPRI, r4
   1e4c0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1e4c4:	6883      	ldr	r3, [r0, #8]
   1e4c6:	4798      	blx	r3
	__asm__ volatile(
   1e4c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4cc:	f3ef 8411 	mrs	r4, BASEPRI
   1e4d0:	f383 8811 	msr	BASEPRI, r3
   1e4d4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1e4d8:	4901      	ldr	r1, [pc, #4]	; (1e4e0 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1e4da:	e7ad      	b.n	1e438 <z_clock_announce+0x28>
   1e4dc:	20002e70 	.word	0x20002e70
   1e4e0:	20002570 	.word	0x20002570
   1e4e4:	20000690 	.word	0x20000690

0001e4e8 <z_tick_get>:

int64_t z_tick_get(void)
{
   1e4e8:	b510      	push	{r4, lr}
   1e4ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4ee:	f3ef 8411 	mrs	r4, BASEPRI
   1e4f2:	f383 8811 	msr	BASEPRI, r3
   1e4f6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1e4fa:	f7f6 fde7 	bl	150cc <z_clock_elapsed>
   1e4fe:	4b06      	ldr	r3, [pc, #24]	; (1e518 <z_tick_get+0x30>)
   1e500:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e504:	1812      	adds	r2, r2, r0
   1e506:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1e50a:	f384 8811 	msr	BASEPRI, r4
   1e50e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1e512:	4610      	mov	r0, r2
   1e514:	4619      	mov	r1, r3
   1e516:	bd10      	pop	{r4, pc}
   1e518:	20002570 	.word	0x20002570

0001e51c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e51e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1e522:	1c56      	adds	r6, r2, #1
   1e524:	f143 0700 	adc.w	r7, r3, #0
   1e528:	2f00      	cmp	r7, #0
   1e52a:	bf08      	it	eq
   1e52c:	2e02      	cmpeq	r6, #2
{
   1e52e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e530:	d302      	bcc.n	1e538 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e532:	490c      	ldr	r1, [pc, #48]	; (1e564 <z_timer_expiration_handler+0x48>)
   1e534:	f7ff fedc 	bl	1e2f0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1e538:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e53a:	3301      	adds	r3, #1
   1e53c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1e53e:	6a23      	ldr	r3, [r4, #32]
   1e540:	b10b      	cbz	r3, 1e546 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1e542:	4620      	mov	r0, r4
   1e544:	4798      	blx	r3
	return list->head == list;
   1e546:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e54a:	42a5      	cmp	r5, r4
   1e54c:	d009      	beq.n	1e562 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1e54e:	b145      	cbz	r5, 1e562 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1e550:	4628      	mov	r0, r5
   1e552:	f003 ff0b 	bl	2236c <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1e556:	4628      	mov	r0, r5
   1e558:	f003 ff5a 	bl	22410 <z_ready_thread>
   1e55c:	2300      	movs	r3, #0
   1e55e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1e562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e564:	0001e51d 	.word	0x0001e51d

0001e568 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1e568:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1e56c:	4619      	mov	r1, r3
   1e56e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e570:	1c4c      	adds	r4, r1, #1
{
   1e572:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e574:	bf08      	it	eq
   1e576:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1e57a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e57e:	4680      	mov	r8, r0
   1e580:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e582:	d047      	beq.n	1e614 <z_impl_k_timer_start+0xac>
   1e584:	4614      	mov	r4, r2
   1e586:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1e588:	ea54 0305 	orrs.w	r3, r4, r5
   1e58c:	d016      	beq.n	1e5bc <z_impl_k_timer_start+0x54>
   1e58e:	f06f 0301 	mvn.w	r3, #1
   1e592:	ebb3 0a02 	subs.w	sl, r3, r2
   1e596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e59a:	eb63 0b05 	sbc.w	fp, r3, r5
   1e59e:	f1ba 0f00 	cmp.w	sl, #0
   1e5a2:	f17b 0300 	sbcs.w	r3, fp, #0
   1e5a6:	da09      	bge.n	1e5bc <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1e5a8:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1e5ac:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1e5b0:	2c01      	cmp	r4, #1
   1e5b2:	f175 0300 	sbcs.w	r3, r5, #0
   1e5b6:	bfbc      	itt	lt
   1e5b8:	2401      	movlt	r4, #1
   1e5ba:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e5bc:	f06f 0301 	mvn.w	r3, #1
   1e5c0:	1a1b      	subs	r3, r3, r0
   1e5c2:	9300      	str	r3, [sp, #0]
   1e5c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e5c8:	eb63 0301 	sbc.w	r3, r3, r1
   1e5cc:	9301      	str	r3, [sp, #4]
   1e5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e5d2:	2a00      	cmp	r2, #0
   1e5d4:	f173 0300 	sbcs.w	r3, r3, #0
   1e5d8:	da0c      	bge.n	1e5f4 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e5da:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1e5de:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1e5e2:	f1b8 0f00 	cmp.w	r8, #0
   1e5e6:	f179 0300 	sbcs.w	r3, r9, #0
   1e5ea:	bfbc      	itt	lt
   1e5ec:	f04f 0800 	movlt.w	r8, #0
   1e5f0:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1e5f4:	4630      	mov	r0, r6
   1e5f6:	f004 f833 	bl	22660 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1e5fa:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e5fc:	4907      	ldr	r1, [pc, #28]	; (1e61c <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1e5fe:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e600:	4642      	mov	r2, r8
   1e602:	464b      	mov	r3, r9
   1e604:	4630      	mov	r0, r6
	timer->period = period;
   1e606:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1e60a:	b002      	add	sp, #8
   1e60c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e610:	f7ff be6e 	b.w	1e2f0 <z_add_timeout>
}
   1e614:	b002      	add	sp, #8
   1e616:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1e61a:	bf00      	nop
   1e61c:	0001e51d 	.word	0x0001e51d

0001e620 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e624:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e626:	4b2a      	ldr	r3, [pc, #168]	; (1e6d0 <z_impl_k_poll+0xb0>)
   1e628:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1e62a:	2301      	movs	r3, #1
   1e62c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1e630:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1e634:	ea52 0307 	orrs.w	r3, r2, r7
{
   1e638:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1e63a:	bf0c      	ite	eq
   1e63c:	2301      	moveq	r3, #1
   1e63e:	2300      	movne	r3, #0
   1e640:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1e644:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1e646:	f004 f97a 	bl	2293e <register_events>
   1e64a:	4681      	mov	r9, r0
	__asm__ volatile(
   1e64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e650:	f3ef 8a11 	mrs	sl, BASEPRI
   1e654:	f383 8811 	msr	BASEPRI, r3
   1e658:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e65c:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1e660:	b964      	cbnz	r4, 1e67c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1e662:	4601      	mov	r1, r0
   1e664:	4652      	mov	r2, sl
   1e666:	4640      	mov	r0, r8
   1e668:	f004 f895 	bl	22796 <clear_event_registrations>
	__asm__ volatile(
   1e66c:	f38a 8811 	msr	BASEPRI, sl
   1e670:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1e674:	4620      	mov	r0, r4
   1e676:	b004      	add	sp, #16
   1e678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1e67c:	2300      	movs	r3, #0
   1e67e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e682:	ea56 0307 	orrs.w	r3, r6, r7
   1e686:	d106      	bne.n	1e696 <z_impl_k_poll+0x76>
   1e688:	f38a 8811 	msr	BASEPRI, sl
   1e68c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e690:	f06f 040a 	mvn.w	r4, #10
   1e694:	e7ee      	b.n	1e674 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1e696:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e698:	e9cd 6700 	strd	r6, r7, [sp]
   1e69c:	4651      	mov	r1, sl
   1e69e:	480d      	ldr	r0, [pc, #52]	; (1e6d4 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1e6a0:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e6a4:	f7ff fb08 	bl	1dcb8 <z_pend_curr>
   1e6a8:	4604      	mov	r4, r0
	__asm__ volatile(
   1e6aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6ae:	f3ef 8511 	mrs	r5, BASEPRI
   1e6b2:	f383 8811 	msr	BASEPRI, r3
   1e6b6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1e6ba:	462a      	mov	r2, r5
   1e6bc:	4649      	mov	r1, r9
   1e6be:	4640      	mov	r0, r8
   1e6c0:	f004 f869 	bl	22796 <clear_event_registrations>
	__asm__ volatile(
   1e6c4:	f385 8811 	msr	BASEPRI, r5
   1e6c8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1e6cc:	e7d2      	b.n	1e674 <z_impl_k_poll+0x54>
   1e6ce:	bf00      	nop
   1e6d0:	20002e30 	.word	0x20002e30
   1e6d4:	20004436 	.word	0x20004436

0001e6d8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1e6d8:	b538      	push	{r3, r4, r5, lr}
   1e6da:	4603      	mov	r3, r0
	__asm__ volatile(
   1e6dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e6e0:	f3ef 8511 	mrs	r5, BASEPRI
   1e6e4:	f382 8811 	msr	BASEPRI, r2
   1e6e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1e6ec:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1e6ee:	2101      	movs	r1, #1
   1e6f0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1e6f2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e6f4:	4283      	cmp	r3, r0
   1e6f6:	d106      	bne.n	1e706 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1e6f8:	f385 8811 	msr	BASEPRI, r5
   1e6fc:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1e700:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1e702:	4620      	mov	r0, r4
   1e704:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1e706:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e70a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e70c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e70e:	2300      	movs	r3, #0
	node->prev = NULL;
   1e710:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e714:	f004 f882 	bl	2281c <signal_poll_event>
	z_reschedule(&lock, key);
   1e718:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e71a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1e71c:	4801      	ldr	r0, [pc, #4]	; (1e724 <z_impl_k_poll_signal_raise+0x4c>)
   1e71e:	f7ff f883 	bl	1d828 <z_reschedule>
	return rc;
   1e722:	e7ee      	b.n	1e702 <z_impl_k_poll_signal_raise+0x2a>
   1e724:	20004436 	.word	0x20004436

0001e728 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e728:	b538      	push	{r3, r4, r5, lr}
   1e72a:	4604      	mov	r4, r0
   1e72c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e72e:	f003 ff0f 	bl	22550 <k_is_in_isr>
   1e732:	b950      	cbnz	r0, 1e74a <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e734:	4b06      	ldr	r3, [pc, #24]	; (1e750 <z_thread_aligned_alloc+0x28>)
   1e736:	689b      	ldr	r3, [r3, #8]
   1e738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   1e73a:	b143      	cbz	r3, 1e74e <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   1e73c:	462a      	mov	r2, r5
   1e73e:	4621      	mov	r1, r4
   1e740:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1e742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1e746:	f004 b978 	b.w	22a3a <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1e74a:	4b02      	ldr	r3, [pc, #8]	; (1e754 <z_thread_aligned_alloc+0x2c>)
   1e74c:	e7f6      	b.n	1e73c <z_thread_aligned_alloc+0x14>
}
   1e74e:	bd38      	pop	{r3, r4, r5, pc}
   1e750:	20002e30 	.word	0x20002e30
   1e754:	200008c4 	.word	0x200008c4

0001e758 <nrf_cc3xx_platform_init>:
   1e758:	b510      	push	{r4, lr}
   1e75a:	4c0c      	ldr	r4, [pc, #48]	; (1e78c <nrf_cc3xx_platform_init+0x34>)
   1e75c:	6823      	ldr	r3, [r4, #0]
   1e75e:	b113      	cbz	r3, 1e766 <nrf_cc3xx_platform_init+0xe>
   1e760:	4b0b      	ldr	r3, [pc, #44]	; (1e790 <nrf_cc3xx_platform_init+0x38>)
   1e762:	681b      	ldr	r3, [r3, #0]
   1e764:	b92b      	cbnz	r3, 1e772 <nrf_cc3xx_platform_init+0x1a>
   1e766:	f000 f943 	bl	1e9f0 <CC_LibInit>
   1e76a:	b930      	cbnz	r0, 1e77a <nrf_cc3xx_platform_init+0x22>
   1e76c:	4b08      	ldr	r3, [pc, #32]	; (1e790 <nrf_cc3xx_platform_init+0x38>)
   1e76e:	2201      	movs	r2, #1
   1e770:	601a      	str	r2, [r3, #0]
   1e772:	2301      	movs	r3, #1
   1e774:	6023      	str	r3, [r4, #0]
   1e776:	2000      	movs	r0, #0
   1e778:	bd10      	pop	{r4, pc}
   1e77a:	3801      	subs	r0, #1
   1e77c:	2806      	cmp	r0, #6
   1e77e:	d901      	bls.n	1e784 <nrf_cc3xx_platform_init+0x2c>
   1e780:	4804      	ldr	r0, [pc, #16]	; (1e794 <nrf_cc3xx_platform_init+0x3c>)
   1e782:	bd10      	pop	{r4, pc}
   1e784:	4b04      	ldr	r3, [pc, #16]	; (1e798 <nrf_cc3xx_platform_init+0x40>)
   1e786:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e78a:	bd10      	pop	{r4, pc}
   1e78c:	20003674 	.word	0x20003674
   1e790:	20003678 	.word	0x20003678
   1e794:	ffff8ffe 	.word	0xffff8ffe
   1e798:	000233c0 	.word	0x000233c0

0001e79c <nrf_cc3xx_platform_abort>:
   1e79c:	f3bf 8f4f 	dsb	sy
   1e7a0:	4905      	ldr	r1, [pc, #20]	; (1e7b8 <nrf_cc3xx_platform_abort+0x1c>)
   1e7a2:	4b06      	ldr	r3, [pc, #24]	; (1e7bc <nrf_cc3xx_platform_abort+0x20>)
   1e7a4:	68ca      	ldr	r2, [r1, #12]
   1e7a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e7aa:	4313      	orrs	r3, r2
   1e7ac:	60cb      	str	r3, [r1, #12]
   1e7ae:	f3bf 8f4f 	dsb	sy
   1e7b2:	bf00      	nop
   1e7b4:	e7fd      	b.n	1e7b2 <nrf_cc3xx_platform_abort+0x16>
   1e7b6:	bf00      	nop
   1e7b8:	e000ed00 	.word	0xe000ed00
   1e7bc:	05fa0004 	.word	0x05fa0004

0001e7c0 <CC_PalAbort>:
   1e7c0:	b4f0      	push	{r4, r5, r6, r7}
   1e7c2:	4f09      	ldr	r7, [pc, #36]	; (1e7e8 <CC_PalAbort+0x28>)
   1e7c4:	4e09      	ldr	r6, [pc, #36]	; (1e7ec <CC_PalAbort+0x2c>)
   1e7c6:	4c0a      	ldr	r4, [pc, #40]	; (1e7f0 <CC_PalAbort+0x30>)
   1e7c8:	4a0a      	ldr	r2, [pc, #40]	; (1e7f4 <CC_PalAbort+0x34>)
   1e7ca:	4d0b      	ldr	r5, [pc, #44]	; (1e7f8 <CC_PalAbort+0x38>)
   1e7cc:	490b      	ldr	r1, [pc, #44]	; (1e7fc <CC_PalAbort+0x3c>)
   1e7ce:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1e7d2:	603b      	str	r3, [r7, #0]
   1e7d4:	6852      	ldr	r2, [r2, #4]
   1e7d6:	6033      	str	r3, [r6, #0]
   1e7d8:	6023      	str	r3, [r4, #0]
   1e7da:	2400      	movs	r4, #0
   1e7dc:	602b      	str	r3, [r5, #0]
   1e7de:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1e7e2:	bcf0      	pop	{r4, r5, r6, r7}
   1e7e4:	4710      	bx	r2
   1e7e6:	bf00      	nop
   1e7e8:	5002b400 	.word	0x5002b400
   1e7ec:	5002b404 	.word	0x5002b404
   1e7f0:	5002b408 	.word	0x5002b408
   1e7f4:	20000698 	.word	0x20000698
   1e7f8:	5002b40c 	.word	0x5002b40c
   1e7fc:	5002a000 	.word	0x5002a000

0001e800 <nrf_cc3xx_platform_set_abort>:
   1e800:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e804:	4b01      	ldr	r3, [pc, #4]	; (1e80c <nrf_cc3xx_platform_set_abort+0xc>)
   1e806:	e9c3 1200 	strd	r1, r2, [r3]
   1e80a:	4770      	bx	lr
   1e80c:	20000698 	.word	0x20000698

0001e810 <nrf_cc3xx_platform_entropy_get>:
   1e810:	2990      	cmp	r1, #144	; 0x90
   1e812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e816:	460c      	mov	r4, r1
   1e818:	4607      	mov	r7, r0
   1e81a:	4616      	mov	r6, r2
   1e81c:	d917      	bls.n	1e84e <nrf_cc3xx_platform_entropy_get+0x3e>
   1e81e:	2500      	movs	r5, #0
   1e820:	e003      	b.n	1e82a <nrf_cc3xx_platform_entropy_get+0x1a>
   1e822:	6831      	ldr	r1, [r6, #0]
   1e824:	1a64      	subs	r4, r4, r1
   1e826:	440d      	add	r5, r1
   1e828:	d00e      	beq.n	1e848 <nrf_cc3xx_platform_entropy_get+0x38>
   1e82a:	2c90      	cmp	r4, #144	; 0x90
   1e82c:	4622      	mov	r2, r4
   1e82e:	4633      	mov	r3, r6
   1e830:	bf28      	it	cs
   1e832:	2290      	movcs	r2, #144	; 0x90
   1e834:	1979      	adds	r1, r7, r5
   1e836:	2000      	movs	r0, #0
   1e838:	f000 fd26 	bl	1f288 <mbedtls_hardware_poll>
   1e83c:	2800      	cmp	r0, #0
   1e83e:	d0f0      	beq.n	1e822 <nrf_cc3xx_platform_entropy_get+0x12>
   1e840:	2300      	movs	r3, #0
   1e842:	6033      	str	r3, [r6, #0]
   1e844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e848:	6035      	str	r5, [r6, #0]
   1e84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e84e:	4613      	mov	r3, r2
   1e850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e854:	460a      	mov	r2, r1
   1e856:	4601      	mov	r1, r0
   1e858:	2000      	movs	r0, #0
   1e85a:	f000 bd15 	b.w	1f288 <mbedtls_hardware_poll>
   1e85e:	bf00      	nop

0001e860 <mutex_unlock>:
   1e860:	b148      	cbz	r0, 1e876 <mutex_unlock+0x16>
   1e862:	6843      	ldr	r3, [r0, #4]
   1e864:	b12b      	cbz	r3, 1e872 <mutex_unlock+0x12>
   1e866:	f3bf 8f5f 	dmb	sy
   1e86a:	2300      	movs	r3, #0
   1e86c:	6003      	str	r3, [r0, #0]
   1e86e:	4618      	mov	r0, r3
   1e870:	4770      	bx	lr
   1e872:	4802      	ldr	r0, [pc, #8]	; (1e87c <mutex_unlock+0x1c>)
   1e874:	4770      	bx	lr
   1e876:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e87a:	4770      	bx	lr
   1e87c:	ffff8fea 	.word	0xffff8fea

0001e880 <mutex_free>:
   1e880:	b510      	push	{r4, lr}
   1e882:	4604      	mov	r4, r0
   1e884:	b128      	cbz	r0, 1e892 <mutex_free+0x12>
   1e886:	6863      	ldr	r3, [r4, #4]
   1e888:	b113      	cbz	r3, 1e890 <mutex_free+0x10>
   1e88a:	2300      	movs	r3, #0
   1e88c:	6023      	str	r3, [r4, #0]
   1e88e:	6063      	str	r3, [r4, #4]
   1e890:	bd10      	pop	{r4, pc}
   1e892:	4b02      	ldr	r3, [pc, #8]	; (1e89c <mutex_free+0x1c>)
   1e894:	4802      	ldr	r0, [pc, #8]	; (1e8a0 <mutex_free+0x20>)
   1e896:	685b      	ldr	r3, [r3, #4]
   1e898:	4798      	blx	r3
   1e89a:	e7f4      	b.n	1e886 <mutex_free+0x6>
   1e89c:	20000698 	.word	0x20000698
   1e8a0:	000233dc 	.word	0x000233dc

0001e8a4 <mutex_init>:
   1e8a4:	b510      	push	{r4, lr}
   1e8a6:	4604      	mov	r4, r0
   1e8a8:	b130      	cbz	r0, 1e8b8 <mutex_init+0x14>
   1e8aa:	6863      	ldr	r3, [r4, #4]
   1e8ac:	2200      	movs	r2, #0
   1e8ae:	f043 0301 	orr.w	r3, r3, #1
   1e8b2:	6063      	str	r3, [r4, #4]
   1e8b4:	6022      	str	r2, [r4, #0]
   1e8b6:	bd10      	pop	{r4, pc}
   1e8b8:	4801      	ldr	r0, [pc, #4]	; (1e8c0 <mutex_init+0x1c>)
   1e8ba:	f7ff ff81 	bl	1e7c0 <CC_PalAbort>
   1e8be:	e7f4      	b.n	1e8aa <mutex_init+0x6>
   1e8c0:	00023404 	.word	0x00023404

0001e8c4 <mutex_lock>:
   1e8c4:	b1a0      	cbz	r0, 1e8f0 <mutex_lock+0x2c>
   1e8c6:	6843      	ldr	r3, [r0, #4]
   1e8c8:	b183      	cbz	r3, 1e8ec <mutex_lock+0x28>
   1e8ca:	2201      	movs	r2, #1
   1e8cc:	f3bf 8f5b 	dmb	ish
   1e8d0:	e850 3f00 	ldrex	r3, [r0]
   1e8d4:	e840 2100 	strex	r1, r2, [r0]
   1e8d8:	2900      	cmp	r1, #0
   1e8da:	d1f9      	bne.n	1e8d0 <mutex_lock+0xc>
   1e8dc:	f3bf 8f5b 	dmb	ish
   1e8e0:	2b01      	cmp	r3, #1
   1e8e2:	d0f3      	beq.n	1e8cc <mutex_lock+0x8>
   1e8e4:	f3bf 8f5f 	dmb	sy
   1e8e8:	2000      	movs	r0, #0
   1e8ea:	4770      	bx	lr
   1e8ec:	4802      	ldr	r0, [pc, #8]	; (1e8f8 <mutex_lock+0x34>)
   1e8ee:	4770      	bx	lr
   1e8f0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e8f4:	4770      	bx	lr
   1e8f6:	bf00      	nop
   1e8f8:	ffff8fea 	.word	0xffff8fea

0001e8fc <nrf_cc3xx_platform_set_mutexes>:
   1e8fc:	b470      	push	{r4, r5, r6}
   1e8fe:	e9d0 6500 	ldrd	r6, r5, [r0]
   1e902:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   1e906:	4b09      	ldr	r3, [pc, #36]	; (1e92c <nrf_cc3xx_platform_set_mutexes+0x30>)
   1e908:	e9c3 4202 	strd	r4, r2, [r3, #8]
   1e90c:	e9c3 6500 	strd	r6, r5, [r3]
   1e910:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   1e914:	e9d1 6500 	ldrd	r6, r5, [r1]
   1e918:	4b05      	ldr	r3, [pc, #20]	; (1e930 <nrf_cc3xx_platform_set_mutexes+0x34>)
   1e91a:	690a      	ldr	r2, [r1, #16]
   1e91c:	611a      	str	r2, [r3, #16]
   1e91e:	e9c3 6500 	strd	r6, r5, [r3]
   1e922:	e9c3 4002 	strd	r4, r0, [r3, #8]
   1e926:	bc70      	pop	{r4, r5, r6}
   1e928:	4770      	bx	lr
   1e92a:	bf00      	nop
   1e92c:	200006a8 	.word	0x200006a8
   1e930:	200006b8 	.word	0x200006b8

0001e934 <CC_LibInitRngModule>:
   1e934:	b530      	push	{r4, r5, lr}
   1e936:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1e93a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1e93e:	2100      	movs	r1, #0
   1e940:	a80c      	add	r0, sp, #48	; 0x30
   1e942:	f001 fea2 	bl	2068a <memset>
   1e946:	2100      	movs	r1, #0
   1e948:	a802      	add	r0, sp, #8
   1e94a:	2228      	movs	r2, #40	; 0x28
   1e94c:	9101      	str	r1, [sp, #4]
   1e94e:	f001 fe9c 	bl	2068a <memset>
   1e952:	a802      	add	r0, sp, #8
   1e954:	f000 fcee 	bl	1f334 <RNG_PLAT_SetUserRngParameters>
   1e958:	b120      	cbz	r0, 1e964 <CC_LibInitRngModule+0x30>
   1e95a:	2405      	movs	r4, #5
   1e95c:	4620      	mov	r0, r4
   1e95e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1e962:	bd30      	pop	{r4, r5, pc}
   1e964:	4d1d      	ldr	r5, [pc, #116]	; (1e9dc <CC_LibInitRngModule+0xa8>)
   1e966:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e96a:	6828      	ldr	r0, [r5, #0]
   1e96c:	f000 f918 	bl	1eba0 <CC_PalMutexLock>
   1e970:	4604      	mov	r4, r0
   1e972:	b9e8      	cbnz	r0, 1e9b0 <CC_LibInitRngModule+0x7c>
   1e974:	2000      	movs	r0, #0
   1e976:	f000 f943 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1e97a:	bb58      	cbnz	r0, 1e9d4 <CC_LibInitRngModule+0xa0>
   1e97c:	aa0c      	add	r2, sp, #48	; 0x30
   1e97e:	a902      	add	r1, sp, #8
   1e980:	a801      	add	r0, sp, #4
   1e982:	f000 fc73 	bl	1f26c <LLF_RND_RunTrngStartupTest>
   1e986:	4604      	mov	r4, r0
   1e988:	2001      	movs	r0, #1
   1e98a:	f000 f939 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1e98e:	b9e8      	cbnz	r0, 1e9cc <CC_LibInitRngModule+0x98>
   1e990:	6828      	ldr	r0, [r5, #0]
   1e992:	f000 f90d 	bl	1ebb0 <CC_PalMutexUnlock>
   1e996:	b928      	cbnz	r0, 1e9a4 <CC_LibInitRngModule+0x70>
   1e998:	2c00      	cmp	r4, #0
   1e99a:	d1de      	bne.n	1e95a <CC_LibInitRngModule+0x26>
   1e99c:	4620      	mov	r0, r4
   1e99e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1e9a2:	bd30      	pop	{r4, r5, pc}
   1e9a4:	480e      	ldr	r0, [pc, #56]	; (1e9e0 <CC_LibInitRngModule+0xac>)
   1e9a6:	f7ff ff0b 	bl	1e7c0 <CC_PalAbort>
   1e9aa:	2c00      	cmp	r4, #0
   1e9ac:	d0f6      	beq.n	1e99c <CC_LibInitRngModule+0x68>
   1e9ae:	e7d4      	b.n	1e95a <CC_LibInitRngModule+0x26>
   1e9b0:	480c      	ldr	r0, [pc, #48]	; (1e9e4 <CC_LibInitRngModule+0xb0>)
   1e9b2:	f7ff ff05 	bl	1e7c0 <CC_PalAbort>
   1e9b6:	2c01      	cmp	r4, #1
   1e9b8:	d1dc      	bne.n	1e974 <CC_LibInitRngModule+0x40>
   1e9ba:	6828      	ldr	r0, [r5, #0]
   1e9bc:	f000 f8f8 	bl	1ebb0 <CC_PalMutexUnlock>
   1e9c0:	2800      	cmp	r0, #0
   1e9c2:	d0ca      	beq.n	1e95a <CC_LibInitRngModule+0x26>
   1e9c4:	4806      	ldr	r0, [pc, #24]	; (1e9e0 <CC_LibInitRngModule+0xac>)
   1e9c6:	f7ff fefb 	bl	1e7c0 <CC_PalAbort>
   1e9ca:	e7c6      	b.n	1e95a <CC_LibInitRngModule+0x26>
   1e9cc:	4806      	ldr	r0, [pc, #24]	; (1e9e8 <CC_LibInitRngModule+0xb4>)
   1e9ce:	f7ff fef7 	bl	1e7c0 <CC_PalAbort>
   1e9d2:	e7dd      	b.n	1e990 <CC_LibInitRngModule+0x5c>
   1e9d4:	4805      	ldr	r0, [pc, #20]	; (1e9ec <CC_LibInitRngModule+0xb8>)
   1e9d6:	f7ff fef3 	bl	1e7c0 <CC_PalAbort>
   1e9da:	e7cf      	b.n	1e97c <CC_LibInitRngModule+0x48>
   1e9dc:	200006f4 	.word	0x200006f4
   1e9e0:	00023440 	.word	0x00023440
   1e9e4:	00023428 	.word	0x00023428
   1e9e8:	00023478 	.word	0x00023478
   1e9ec:	00023458 	.word	0x00023458

0001e9f0 <CC_LibInit>:
   1e9f0:	b508      	push	{r3, lr}
   1e9f2:	f000 f83d 	bl	1ea70 <CC_HalInit>
   1e9f6:	b118      	cbz	r0, 1ea00 <CC_LibInit+0x10>
   1e9f8:	f000 f886 	bl	1eb08 <CC_PalTerminate>
   1e9fc:	2003      	movs	r0, #3
   1e9fe:	bd08      	pop	{r3, pc}
   1ea00:	f000 f854 	bl	1eaac <CC_PalInit>
   1ea04:	b9c0      	cbnz	r0, 1ea38 <CC_LibInit+0x48>
   1ea06:	f000 f8fb 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1ea0a:	b9b8      	cbnz	r0, 1ea3c <CC_LibInit+0x4c>
   1ea0c:	4b14      	ldr	r3, [pc, #80]	; (1ea60 <CC_LibInit+0x70>)
   1ea0e:	681b      	ldr	r3, [r3, #0]
   1ea10:	0e1b      	lsrs	r3, r3, #24
   1ea12:	2bf0      	cmp	r3, #240	; 0xf0
   1ea14:	d10a      	bne.n	1ea2c <CC_LibInit+0x3c>
   1ea16:	4a13      	ldr	r2, [pc, #76]	; (1ea64 <CC_LibInit+0x74>)
   1ea18:	4b13      	ldr	r3, [pc, #76]	; (1ea68 <CC_LibInit+0x78>)
   1ea1a:	6812      	ldr	r2, [r2, #0]
   1ea1c:	429a      	cmp	r2, r3
   1ea1e:	d017      	beq.n	1ea50 <CC_LibInit+0x60>
   1ea20:	f000 f828 	bl	1ea74 <CC_HalTerminate>
   1ea24:	f000 f870 	bl	1eb08 <CC_PalTerminate>
   1ea28:	2007      	movs	r0, #7
   1ea2a:	bd08      	pop	{r3, pc}
   1ea2c:	f000 f822 	bl	1ea74 <CC_HalTerminate>
   1ea30:	f000 f86a 	bl	1eb08 <CC_PalTerminate>
   1ea34:	2006      	movs	r0, #6
   1ea36:	bd08      	pop	{r3, pc}
   1ea38:	2004      	movs	r0, #4
   1ea3a:	bd08      	pop	{r3, pc}
   1ea3c:	f000 f81a 	bl	1ea74 <CC_HalTerminate>
   1ea40:	f000 f862 	bl	1eb08 <CC_PalTerminate>
   1ea44:	f7ff ff76 	bl	1e934 <CC_LibInitRngModule>
   1ea48:	2800      	cmp	r0, #0
   1ea4a:	bf18      	it	ne
   1ea4c:	2005      	movne	r0, #5
   1ea4e:	bd08      	pop	{r3, pc}
   1ea50:	2001      	movs	r0, #1
   1ea52:	f000 f8d5 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1ea56:	2800      	cmp	r0, #0
   1ea58:	d1f0      	bne.n	1ea3c <CC_LibInit+0x4c>
   1ea5a:	4b04      	ldr	r3, [pc, #16]	; (1ea6c <CC_LibInit+0x7c>)
   1ea5c:	6018      	str	r0, [r3, #0]
   1ea5e:	e7f1      	b.n	1ea44 <CC_LibInit+0x54>
   1ea60:	5002b928 	.word	0x5002b928
   1ea64:	5002ba24 	.word	0x5002ba24
   1ea68:	20e00000 	.word	0x20e00000
   1ea6c:	5002ba0c 	.word	0x5002ba0c

0001ea70 <CC_HalInit>:
   1ea70:	2000      	movs	r0, #0
   1ea72:	4770      	bx	lr

0001ea74 <CC_HalTerminate>:
   1ea74:	2000      	movs	r0, #0
   1ea76:	4770      	bx	lr

0001ea78 <CC_HalClearInterruptBit>:
   1ea78:	0543      	lsls	r3, r0, #21
   1ea7a:	d503      	bpl.n	1ea84 <CC_HalClearInterruptBit+0xc>
   1ea7c:	4b03      	ldr	r3, [pc, #12]	; (1ea8c <CC_HalClearInterruptBit+0x14>)
   1ea7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ea82:	601a      	str	r2, [r3, #0]
   1ea84:	4b02      	ldr	r3, [pc, #8]	; (1ea90 <CC_HalClearInterruptBit+0x18>)
   1ea86:	6018      	str	r0, [r3, #0]
   1ea88:	4770      	bx	lr
   1ea8a:	bf00      	nop
   1ea8c:	5002b108 	.word	0x5002b108
   1ea90:	5002ba08 	.word	0x5002ba08

0001ea94 <CC_HalMaskInterrupt>:
   1ea94:	4b01      	ldr	r3, [pc, #4]	; (1ea9c <CC_HalMaskInterrupt+0x8>)
   1ea96:	6018      	str	r0, [r3, #0]
   1ea98:	4770      	bx	lr
   1ea9a:	bf00      	nop
   1ea9c:	5002ba04 	.word	0x5002ba04

0001eaa0 <CC_HalWaitInterruptRND>:
   1eaa0:	b108      	cbz	r0, 1eaa6 <CC_HalWaitInterruptRND+0x6>
   1eaa2:	f000 b84f 	b.w	1eb44 <CC_PalWaitInterruptRND>
   1eaa6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1eaaa:	4770      	bx	lr

0001eaac <CC_PalInit>:
   1eaac:	b510      	push	{r4, lr}
   1eaae:	4811      	ldr	r0, [pc, #68]	; (1eaf4 <CC_PalInit+0x48>)
   1eab0:	f000 f862 	bl	1eb78 <CC_PalMutexCreate>
   1eab4:	b100      	cbz	r0, 1eab8 <CC_PalInit+0xc>
   1eab6:	bd10      	pop	{r4, pc}
   1eab8:	480f      	ldr	r0, [pc, #60]	; (1eaf8 <CC_PalInit+0x4c>)
   1eaba:	f000 f85d 	bl	1eb78 <CC_PalMutexCreate>
   1eabe:	2800      	cmp	r0, #0
   1eac0:	d1f9      	bne.n	1eab6 <CC_PalInit+0xa>
   1eac2:	4c0e      	ldr	r4, [pc, #56]	; (1eafc <CC_PalInit+0x50>)
   1eac4:	4620      	mov	r0, r4
   1eac6:	f000 f857 	bl	1eb78 <CC_PalMutexCreate>
   1eaca:	2800      	cmp	r0, #0
   1eacc:	d1f3      	bne.n	1eab6 <CC_PalInit+0xa>
   1eace:	4b0c      	ldr	r3, [pc, #48]	; (1eb00 <CC_PalInit+0x54>)
   1ead0:	480c      	ldr	r0, [pc, #48]	; (1eb04 <CC_PalInit+0x58>)
   1ead2:	601c      	str	r4, [r3, #0]
   1ead4:	f000 f850 	bl	1eb78 <CC_PalMutexCreate>
   1ead8:	4601      	mov	r1, r0
   1eada:	2800      	cmp	r0, #0
   1eadc:	d1eb      	bne.n	1eab6 <CC_PalInit+0xa>
   1eade:	f000 f82d 	bl	1eb3c <CC_PalDmaInit>
   1eae2:	4604      	mov	r4, r0
   1eae4:	b108      	cbz	r0, 1eaea <CC_PalInit+0x3e>
   1eae6:	4620      	mov	r0, r4
   1eae8:	bd10      	pop	{r4, pc}
   1eaea:	f000 f86b 	bl	1ebc4 <CC_PalPowerSaveModeInit>
   1eaee:	4620      	mov	r0, r4
   1eaf0:	e7fa      	b.n	1eae8 <CC_PalInit+0x3c>
   1eaf2:	bf00      	nop
   1eaf4:	200006f0 	.word	0x200006f0
   1eaf8:	200006e4 	.word	0x200006e4
   1eafc:	200006ec 	.word	0x200006ec
   1eb00:	200006f4 	.word	0x200006f4
   1eb04:	200006e8 	.word	0x200006e8

0001eb08 <CC_PalTerminate>:
   1eb08:	b508      	push	{r3, lr}
   1eb0a:	4808      	ldr	r0, [pc, #32]	; (1eb2c <CC_PalTerminate+0x24>)
   1eb0c:	f000 f83e 	bl	1eb8c <CC_PalMutexDestroy>
   1eb10:	4807      	ldr	r0, [pc, #28]	; (1eb30 <CC_PalTerminate+0x28>)
   1eb12:	f000 f83b 	bl	1eb8c <CC_PalMutexDestroy>
   1eb16:	4807      	ldr	r0, [pc, #28]	; (1eb34 <CC_PalTerminate+0x2c>)
   1eb18:	f000 f838 	bl	1eb8c <CC_PalMutexDestroy>
   1eb1c:	4806      	ldr	r0, [pc, #24]	; (1eb38 <CC_PalTerminate+0x30>)
   1eb1e:	f000 f835 	bl	1eb8c <CC_PalMutexDestroy>
   1eb22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1eb26:	f000 b80b 	b.w	1eb40 <CC_PalDmaTerminate>
   1eb2a:	bf00      	nop
   1eb2c:	200006f0 	.word	0x200006f0
   1eb30:	200006e4 	.word	0x200006e4
   1eb34:	200006ec 	.word	0x200006ec
   1eb38:	200006e8 	.word	0x200006e8

0001eb3c <CC_PalDmaInit>:
   1eb3c:	2000      	movs	r0, #0
   1eb3e:	4770      	bx	lr

0001eb40 <CC_PalDmaTerminate>:
   1eb40:	4770      	bx	lr
   1eb42:	bf00      	nop

0001eb44 <CC_PalWaitInterruptRND>:
   1eb44:	b410      	push	{r4}
   1eb46:	4c08      	ldr	r4, [pc, #32]	; (1eb68 <CC_PalWaitInterruptRND+0x24>)
   1eb48:	4602      	mov	r2, r0
   1eb4a:	6823      	ldr	r3, [r4, #0]
   1eb4c:	4213      	tst	r3, r2
   1eb4e:	d0fc      	beq.n	1eb4a <CC_PalWaitInterruptRND+0x6>
   1eb50:	b121      	cbz	r1, 1eb5c <CC_PalWaitInterruptRND+0x18>
   1eb52:	4b06      	ldr	r3, [pc, #24]	; (1eb6c <CC_PalWaitInterruptRND+0x28>)
   1eb54:	4806      	ldr	r0, [pc, #24]	; (1eb70 <CC_PalWaitInterruptRND+0x2c>)
   1eb56:	681b      	ldr	r3, [r3, #0]
   1eb58:	600b      	str	r3, [r1, #0]
   1eb5a:	6003      	str	r3, [r0, #0]
   1eb5c:	4b05      	ldr	r3, [pc, #20]	; (1eb74 <CC_PalWaitInterruptRND+0x30>)
   1eb5e:	601a      	str	r2, [r3, #0]
   1eb60:	2000      	movs	r0, #0
   1eb62:	bc10      	pop	{r4}
   1eb64:	4770      	bx	lr
   1eb66:	bf00      	nop
   1eb68:	5002ba00 	.word	0x5002ba00
   1eb6c:	5002b104 	.word	0x5002b104
   1eb70:	5002b108 	.word	0x5002b108
   1eb74:	5002ba08 	.word	0x5002ba08

0001eb78 <CC_PalMutexCreate>:
   1eb78:	b508      	push	{r3, lr}
   1eb7a:	4b03      	ldr	r3, [pc, #12]	; (1eb88 <CC_PalMutexCreate+0x10>)
   1eb7c:	6802      	ldr	r2, [r0, #0]
   1eb7e:	681b      	ldr	r3, [r3, #0]
   1eb80:	6810      	ldr	r0, [r2, #0]
   1eb82:	4798      	blx	r3
   1eb84:	2000      	movs	r0, #0
   1eb86:	bd08      	pop	{r3, pc}
   1eb88:	200006a8 	.word	0x200006a8

0001eb8c <CC_PalMutexDestroy>:
   1eb8c:	b508      	push	{r3, lr}
   1eb8e:	4b03      	ldr	r3, [pc, #12]	; (1eb9c <CC_PalMutexDestroy+0x10>)
   1eb90:	6802      	ldr	r2, [r0, #0]
   1eb92:	685b      	ldr	r3, [r3, #4]
   1eb94:	6810      	ldr	r0, [r2, #0]
   1eb96:	4798      	blx	r3
   1eb98:	2000      	movs	r0, #0
   1eb9a:	bd08      	pop	{r3, pc}
   1eb9c:	200006a8 	.word	0x200006a8

0001eba0 <CC_PalMutexLock>:
   1eba0:	4b02      	ldr	r3, [pc, #8]	; (1ebac <CC_PalMutexLock+0xc>)
   1eba2:	6802      	ldr	r2, [r0, #0]
   1eba4:	689b      	ldr	r3, [r3, #8]
   1eba6:	6810      	ldr	r0, [r2, #0]
   1eba8:	4718      	bx	r3
   1ebaa:	bf00      	nop
   1ebac:	200006a8 	.word	0x200006a8

0001ebb0 <CC_PalMutexUnlock>:
   1ebb0:	b508      	push	{r3, lr}
   1ebb2:	4b03      	ldr	r3, [pc, #12]	; (1ebc0 <CC_PalMutexUnlock+0x10>)
   1ebb4:	6802      	ldr	r2, [r0, #0]
   1ebb6:	68db      	ldr	r3, [r3, #12]
   1ebb8:	6810      	ldr	r0, [r2, #0]
   1ebba:	4798      	blx	r3
   1ebbc:	2000      	movs	r0, #0
   1ebbe:	bd08      	pop	{r3, pc}
   1ebc0:	200006a8 	.word	0x200006a8

0001ebc4 <CC_PalPowerSaveModeInit>:
   1ebc4:	b570      	push	{r4, r5, r6, lr}
   1ebc6:	4c09      	ldr	r4, [pc, #36]	; (1ebec <CC_PalPowerSaveModeInit+0x28>)
   1ebc8:	4d09      	ldr	r5, [pc, #36]	; (1ebf0 <CC_PalPowerSaveModeInit+0x2c>)
   1ebca:	6920      	ldr	r0, [r4, #16]
   1ebcc:	68ab      	ldr	r3, [r5, #8]
   1ebce:	4798      	blx	r3
   1ebd0:	b118      	cbz	r0, 1ebda <CC_PalPowerSaveModeInit+0x16>
   1ebd2:	4b08      	ldr	r3, [pc, #32]	; (1ebf4 <CC_PalPowerSaveModeInit+0x30>)
   1ebd4:	4808      	ldr	r0, [pc, #32]	; (1ebf8 <CC_PalPowerSaveModeInit+0x34>)
   1ebd6:	685b      	ldr	r3, [r3, #4]
   1ebd8:	4798      	blx	r3
   1ebda:	4a08      	ldr	r2, [pc, #32]	; (1ebfc <CC_PalPowerSaveModeInit+0x38>)
   1ebdc:	68eb      	ldr	r3, [r5, #12]
   1ebde:	6920      	ldr	r0, [r4, #16]
   1ebe0:	2100      	movs	r1, #0
   1ebe2:	6011      	str	r1, [r2, #0]
   1ebe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ebe8:	4718      	bx	r3
   1ebea:	bf00      	nop
   1ebec:	200006b8 	.word	0x200006b8
   1ebf0:	200006a8 	.word	0x200006a8
   1ebf4:	20000698 	.word	0x20000698
   1ebf8:	00023498 	.word	0x00023498
   1ebfc:	2000368c 	.word	0x2000368c

0001ec00 <CC_PalPowerSaveModeSelect>:
   1ec00:	b570      	push	{r4, r5, r6, lr}
   1ec02:	4d1a      	ldr	r5, [pc, #104]	; (1ec6c <CC_PalPowerSaveModeSelect+0x6c>)
   1ec04:	4e1a      	ldr	r6, [pc, #104]	; (1ec70 <CC_PalPowerSaveModeSelect+0x70>)
   1ec06:	4604      	mov	r4, r0
   1ec08:	68b2      	ldr	r2, [r6, #8]
   1ec0a:	6928      	ldr	r0, [r5, #16]
   1ec0c:	4790      	blx	r2
   1ec0e:	b9f0      	cbnz	r0, 1ec4e <CC_PalPowerSaveModeSelect+0x4e>
   1ec10:	b15c      	cbz	r4, 1ec2a <CC_PalPowerSaveModeSelect+0x2a>
   1ec12:	4c18      	ldr	r4, [pc, #96]	; (1ec74 <CC_PalPowerSaveModeSelect+0x74>)
   1ec14:	6823      	ldr	r3, [r4, #0]
   1ec16:	b1ab      	cbz	r3, 1ec44 <CC_PalPowerSaveModeSelect+0x44>
   1ec18:	2b01      	cmp	r3, #1
   1ec1a:	d01a      	beq.n	1ec52 <CC_PalPowerSaveModeSelect+0x52>
   1ec1c:	3b01      	subs	r3, #1
   1ec1e:	6023      	str	r3, [r4, #0]
   1ec20:	6928      	ldr	r0, [r5, #16]
   1ec22:	68f3      	ldr	r3, [r6, #12]
   1ec24:	4798      	blx	r3
   1ec26:	2000      	movs	r0, #0
   1ec28:	bd70      	pop	{r4, r5, r6, pc}
   1ec2a:	4c12      	ldr	r4, [pc, #72]	; (1ec74 <CC_PalPowerSaveModeSelect+0x74>)
   1ec2c:	6821      	ldr	r1, [r4, #0]
   1ec2e:	b939      	cbnz	r1, 1ec40 <CC_PalPowerSaveModeSelect+0x40>
   1ec30:	4b11      	ldr	r3, [pc, #68]	; (1ec78 <CC_PalPowerSaveModeSelect+0x78>)
   1ec32:	4a12      	ldr	r2, [pc, #72]	; (1ec7c <CC_PalPowerSaveModeSelect+0x7c>)
   1ec34:	2001      	movs	r0, #1
   1ec36:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1ec3a:	6813      	ldr	r3, [r2, #0]
   1ec3c:	2b00      	cmp	r3, #0
   1ec3e:	d1fc      	bne.n	1ec3a <CC_PalPowerSaveModeSelect+0x3a>
   1ec40:	3101      	adds	r1, #1
   1ec42:	6021      	str	r1, [r4, #0]
   1ec44:	68f3      	ldr	r3, [r6, #12]
   1ec46:	6928      	ldr	r0, [r5, #16]
   1ec48:	4798      	blx	r3
   1ec4a:	2000      	movs	r0, #0
   1ec4c:	bd70      	pop	{r4, r5, r6, pc}
   1ec4e:	480c      	ldr	r0, [pc, #48]	; (1ec80 <CC_PalPowerSaveModeSelect+0x80>)
   1ec50:	bd70      	pop	{r4, r5, r6, pc}
   1ec52:	4a0a      	ldr	r2, [pc, #40]	; (1ec7c <CC_PalPowerSaveModeSelect+0x7c>)
   1ec54:	6813      	ldr	r3, [r2, #0]
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	d1fc      	bne.n	1ec54 <CC_PalPowerSaveModeSelect+0x54>
   1ec5a:	4a07      	ldr	r2, [pc, #28]	; (1ec78 <CC_PalPowerSaveModeSelect+0x78>)
   1ec5c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1ec60:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1ec64:	f7ff ff16 	bl	1ea94 <CC_HalMaskInterrupt>
   1ec68:	6823      	ldr	r3, [r4, #0]
   1ec6a:	e7d7      	b.n	1ec1c <CC_PalPowerSaveModeSelect+0x1c>
   1ec6c:	200006b8 	.word	0x200006b8
   1ec70:	200006a8 	.word	0x200006a8
   1ec74:	2000368c 	.word	0x2000368c
   1ec78:	5002a000 	.word	0x5002a000
   1ec7c:	5002b910 	.word	0x5002b910
   1ec80:	ffff8fe9 	.word	0xffff8fe9

0001ec84 <startTrngHW>:
   1ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec88:	2800      	cmp	r0, #0
   1ec8a:	d076      	beq.n	1ed7a <startTrngHW+0xf6>
   1ec8c:	460c      	mov	r4, r1
   1ec8e:	2900      	cmp	r1, #0
   1ec90:	d073      	beq.n	1ed7a <startTrngHW+0xf6>
   1ec92:	461d      	mov	r5, r3
   1ec94:	2b00      	cmp	r3, #0
   1ec96:	d070      	beq.n	1ed7a <startTrngHW+0xf6>
   1ec98:	4606      	mov	r6, r0
   1ec9a:	b11a      	cbz	r2, 1eca4 <startTrngHW+0x20>
   1ec9c:	2201      	movs	r2, #1
   1ec9e:	2300      	movs	r3, #0
   1eca0:	602a      	str	r2, [r5, #0]
   1eca2:	6003      	str	r3, [r0, #0]
   1eca4:	682b      	ldr	r3, [r5, #0]
   1eca6:	2b00      	cmp	r3, #0
   1eca8:	d063      	beq.n	1ed72 <startTrngHW+0xee>
   1ecaa:	4629      	mov	r1, r5
   1ecac:	4620      	mov	r0, r4
   1ecae:	f000 fc05 	bl	1f4bc <LLF_RND_GetFastestRosc>
   1ecb2:	4607      	mov	r7, r0
   1ecb4:	2800      	cmp	r0, #0
   1ecb6:	d15d      	bne.n	1ed74 <startTrngHW+0xf0>
   1ecb8:	6828      	ldr	r0, [r5, #0]
   1ecba:	4621      	mov	r1, r4
   1ecbc:	f000 fbe0 	bl	1f480 <LLF_RND_GetRoscSampleCnt>
   1ecc0:	4607      	mov	r7, r0
   1ecc2:	2800      	cmp	r0, #0
   1ecc4:	d156      	bne.n	1ed74 <startTrngHW+0xf0>
   1ecc6:	682b      	ldr	r3, [r5, #0]
   1ecc8:	2b08      	cmp	r3, #8
   1ecca:	d065      	beq.n	1ed98 <startTrngHW+0x114>
   1eccc:	2b04      	cmp	r3, #4
   1ecce:	d066      	beq.n	1ed9e <startTrngHW+0x11a>
   1ecd0:	f1a3 0802 	sub.w	r8, r3, #2
   1ecd4:	fab8 f888 	clz	r8, r8
   1ecd8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1ecdc:	4b31      	ldr	r3, [pc, #196]	; (1eda4 <startTrngHW+0x120>)
   1ecde:	4932      	ldr	r1, [pc, #200]	; (1eda8 <startTrngHW+0x124>)
   1ece0:	4a32      	ldr	r2, [pc, #200]	; (1edac <startTrngHW+0x128>)
   1ece2:	2001      	movs	r0, #1
   1ece4:	6018      	str	r0, [r3, #0]
   1ece6:	469c      	mov	ip, r3
   1ece8:	6008      	str	r0, [r1, #0]
   1ecea:	f8cc 0000 	str.w	r0, [ip]
   1ecee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ecf0:	6013      	str	r3, [r2, #0]
   1ecf2:	6811      	ldr	r1, [r2, #0]
   1ecf4:	428b      	cmp	r3, r1
   1ecf6:	d1f8      	bne.n	1ecea <startTrngHW+0x66>
   1ecf8:	4b2d      	ldr	r3, [pc, #180]	; (1edb0 <startTrngHW+0x12c>)
   1ecfa:	f04f 0900 	mov.w	r9, #0
   1ecfe:	f8c3 9000 	str.w	r9, [r3]
   1ed02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed06:	f7ff feb7 	bl	1ea78 <CC_HalClearInterruptBit>
   1ed0a:	4b2a      	ldr	r3, [pc, #168]	; (1edb4 <startTrngHW+0x130>)
   1ed0c:	4a2a      	ldr	r2, [pc, #168]	; (1edb8 <startTrngHW+0x134>)
   1ed0e:	601a      	str	r2, [r3, #0]
   1ed10:	4648      	mov	r0, r9
   1ed12:	f7ff febf 	bl	1ea94 <CC_HalMaskInterrupt>
   1ed16:	4a29      	ldr	r2, [pc, #164]	; (1edbc <startTrngHW+0x138>)
   1ed18:	4b29      	ldr	r3, [pc, #164]	; (1edc0 <startTrngHW+0x13c>)
   1ed1a:	f8c2 8000 	str.w	r8, [r2]
   1ed1e:	6818      	ldr	r0, [r3, #0]
   1ed20:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1ed24:	f7ff feb6 	bl	1ea94 <CC_HalMaskInterrupt>
   1ed28:	4b26      	ldr	r3, [pc, #152]	; (1edc4 <startTrngHW+0x140>)
   1ed2a:	220a      	movs	r2, #10
   1ed2c:	601a      	str	r2, [r3, #0]
   1ed2e:	9908      	ldr	r1, [sp, #32]
   1ed30:	6923      	ldr	r3, [r4, #16]
   1ed32:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ed34:	2901      	cmp	r1, #1
   1ed36:	d024      	beq.n	1ed82 <startTrngHW+0xfe>
   1ed38:	4923      	ldr	r1, [pc, #140]	; (1edc8 <startTrngHW+0x144>)
   1ed3a:	fba1 1303 	umull	r1, r3, r1, r3
   1ed3e:	091b      	lsrs	r3, r3, #4
   1ed40:	fb03 f302 	mul.w	r3, r3, r2
   1ed44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ed48:	4920      	ldr	r1, [pc, #128]	; (1edcc <startTrngHW+0x148>)
   1ed4a:	4a19      	ldr	r2, [pc, #100]	; (1edb0 <startTrngHW+0x12c>)
   1ed4c:	03db      	lsls	r3, r3, #15
   1ed4e:	099b      	lsrs	r3, r3, #6
   1ed50:	600b      	str	r3, [r1, #0]
   1ed52:	2301      	movs	r3, #1
   1ed54:	6013      	str	r3, [r2, #0]
   1ed56:	6833      	ldr	r3, [r6, #0]
   1ed58:	682a      	ldr	r2, [r5, #0]
   1ed5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ed5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1ed62:	6033      	str	r3, [r6, #0]
   1ed64:	682a      	ldr	r2, [r5, #0]
   1ed66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ed6a:	6033      	str	r3, [r6, #0]
   1ed6c:	4638      	mov	r0, r7
   1ed6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ed72:	4f17      	ldr	r7, [pc, #92]	; (1edd0 <startTrngHW+0x14c>)
   1ed74:	4638      	mov	r0, r7
   1ed76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ed7a:	4f16      	ldr	r7, [pc, #88]	; (1edd4 <startTrngHW+0x150>)
   1ed7c:	4638      	mov	r0, r7
   1ed7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ed82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed86:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1ed8a:	3101      	adds	r1, #1
   1ed8c:	d002      	beq.n	1ed94 <startTrngHW+0x110>
   1ed8e:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1ed92:	e7d1      	b.n	1ed38 <startTrngHW+0xb4>
   1ed94:	2316      	movs	r3, #22
   1ed96:	e7d3      	b.n	1ed40 <startTrngHW+0xbc>
   1ed98:	f04f 0803 	mov.w	r8, #3
   1ed9c:	e79e      	b.n	1ecdc <startTrngHW+0x58>
   1ed9e:	f04f 0802 	mov.w	r8, #2
   1eda2:	e79b      	b.n	1ecdc <startTrngHW+0x58>
   1eda4:	5002b1c4 	.word	0x5002b1c4
   1eda8:	5002b140 	.word	0x5002b140
   1edac:	5002b130 	.word	0x5002b130
   1edb0:	5002b12c 	.word	0x5002b12c
   1edb4:	5002b100 	.word	0x5002b100
   1edb8:	0ffffffe 	.word	0x0ffffffe
   1edbc:	5002b10c 	.word	0x5002b10c
   1edc0:	5002ba04 	.word	0x5002ba04
   1edc4:	5002b138 	.word	0x5002b138
   1edc8:	aaaaaaab 	.word	0xaaaaaaab
   1edcc:	5002b1d8 	.word	0x5002b1d8
   1edd0:	00f10c31 	.word	0x00f10c31
   1edd4:	00f10c35 	.word	0x00f10c35

0001edd8 <LLF_RND_RepetitionCounterTest.part.0>:
   1edd8:	b4f0      	push	{r4, r5, r6, r7}
   1edda:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1edde:	2400      	movs	r4, #0
   1ede0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1ede4:	4626      	mov	r6, r4
   1ede6:	4627      	mov	r7, r4
   1ede8:	e006      	b.n	1edf8 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1edea:	429f      	cmp	r7, r3
   1edec:	d016      	beq.n	1ee1c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1edee:	2601      	movs	r6, #1
   1edf0:	4565      	cmp	r5, ip
   1edf2:	d819      	bhi.n	1ee28 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1edf4:	462c      	mov	r4, r5
   1edf6:	461f      	mov	r7, r3
   1edf8:	0963      	lsrs	r3, r4, #5
   1edfa:	f004 011f 	and.w	r1, r4, #31
   1edfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1ee02:	291f      	cmp	r1, #31
   1ee04:	fa23 f301 	lsr.w	r3, r3, r1
   1ee08:	f104 0501 	add.w	r5, r4, #1
   1ee0c:	bf18      	it	ne
   1ee0e:	f003 0301 	andne.w	r3, r3, #1
   1ee12:	2c00      	cmp	r4, #0
   1ee14:	d1e9      	bne.n	1edea <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1ee16:	2601      	movs	r6, #1
   1ee18:	4635      	mov	r5, r6
   1ee1a:	e7eb      	b.n	1edf4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1ee1c:	3601      	adds	r6, #1
   1ee1e:	4296      	cmp	r6, r2
   1ee20:	d1e6      	bne.n	1edf0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1ee22:	4803      	ldr	r0, [pc, #12]	; (1ee30 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1ee24:	bcf0      	pop	{r4, r5, r6, r7}
   1ee26:	4770      	bx	lr
   1ee28:	2000      	movs	r0, #0
   1ee2a:	bcf0      	pop	{r4, r5, r6, r7}
   1ee2c:	4770      	bx	lr
   1ee2e:	bf00      	nop
   1ee30:	00f10c36 	.word	0x00f10c36

0001ee34 <LLF_RND_AdaptiveProportionTest>:
   1ee34:	2800      	cmp	r0, #0
   1ee36:	d061      	beq.n	1eefc <LLF_RND_AdaptiveProportionTest+0xc8>
   1ee38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee3c:	1e4c      	subs	r4, r1, #1
   1ee3e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1ee42:	d227      	bcs.n	1ee94 <LLF_RND_AdaptiveProportionTest+0x60>
   1ee44:	b333      	cbz	r3, 1ee94 <LLF_RND_AdaptiveProportionTest+0x60>
   1ee46:	b32a      	cbz	r2, 1ee94 <LLF_RND_AdaptiveProportionTest+0x60>
   1ee48:	00cd      	lsls	r5, r1, #3
   1ee4a:	2b01      	cmp	r3, #1
   1ee4c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   1ee50:	d030      	beq.n	1eeb4 <LLF_RND_AdaptiveProportionTest+0x80>
   1ee52:	2100      	movs	r1, #0
   1ee54:	468c      	mov	ip, r1
   1ee56:	460f      	mov	r7, r1
   1ee58:	460e      	mov	r6, r1
   1ee5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1ee5e:	094c      	lsrs	r4, r1, #5
   1ee60:	f001 051f 	and.w	r5, r1, #31
   1ee64:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1ee68:	2d1f      	cmp	r5, #31
   1ee6a:	fa24 f405 	lsr.w	r4, r4, r5
   1ee6e:	bf18      	it	ne
   1ee70:	f004 0401 	andne.w	r4, r4, #1
   1ee74:	b921      	cbnz	r1, 1ee80 <LLF_RND_AdaptiveProportionTest+0x4c>
   1ee76:	2601      	movs	r6, #1
   1ee78:	46b4      	mov	ip, r6
   1ee7a:	4631      	mov	r1, r6
   1ee7c:	4627      	mov	r7, r4
   1ee7e:	e7ee      	b.n	1ee5e <LLF_RND_AdaptiveProportionTest+0x2a>
   1ee80:	42b3      	cmp	r3, r6
   1ee82:	d013      	beq.n	1eeac <LLF_RND_AdaptiveProportionTest+0x78>
   1ee84:	42a7      	cmp	r7, r4
   1ee86:	d101      	bne.n	1ee8c <LLF_RND_AdaptiveProportionTest+0x58>
   1ee88:	f10c 0c01 	add.w	ip, ip, #1
   1ee8c:	4546      	cmp	r6, r8
   1ee8e:	d104      	bne.n	1ee9a <LLF_RND_AdaptiveProportionTest+0x66>
   1ee90:	4562      	cmp	r2, ip
   1ee92:	d202      	bcs.n	1ee9a <LLF_RND_AdaptiveProportionTest+0x66>
   1ee94:	481a      	ldr	r0, [pc, #104]	; (1ef00 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1ee96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee9a:	463c      	mov	r4, r7
   1ee9c:	3101      	adds	r1, #1
   1ee9e:	458e      	cmp	lr, r1
   1eea0:	f106 0601 	add.w	r6, r6, #1
   1eea4:	d2ea      	bcs.n	1ee7c <LLF_RND_AdaptiveProportionTest+0x48>
   1eea6:	2000      	movs	r0, #0
   1eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eeac:	2600      	movs	r6, #0
   1eeae:	f04f 0c01 	mov.w	ip, #1
   1eeb2:	e7f3      	b.n	1ee9c <LLF_RND_AdaptiveProportionTest+0x68>
   1eeb4:	2600      	movs	r6, #0
   1eeb6:	46b4      	mov	ip, r6
   1eeb8:	4637      	mov	r7, r6
   1eeba:	4634      	mov	r4, r6
   1eebc:	0961      	lsrs	r1, r4, #5
   1eebe:	f004 031f 	and.w	r3, r4, #31
   1eec2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1eec6:	2b1f      	cmp	r3, #31
   1eec8:	fa21 f103 	lsr.w	r1, r1, r3
   1eecc:	bf18      	it	ne
   1eece:	f001 0101 	andne.w	r1, r1, #1
   1eed2:	b13c      	cbz	r4, 1eee4 <LLF_RND_AdaptiveProportionTest+0xb0>
   1eed4:	b95f      	cbnz	r7, 1eeee <LLF_RND_AdaptiveProportionTest+0xba>
   1eed6:	458c      	cmp	ip, r1
   1eed8:	d001      	beq.n	1eede <LLF_RND_AdaptiveProportionTest+0xaa>
   1eeda:	4661      	mov	r1, ip
   1eedc:	e008      	b.n	1eef0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1eede:	3601      	adds	r6, #1
   1eee0:	4661      	mov	r1, ip
   1eee2:	e005      	b.n	1eef0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1eee4:	2601      	movs	r6, #1
   1eee6:	4634      	mov	r4, r6
   1eee8:	468c      	mov	ip, r1
   1eeea:	2701      	movs	r7, #1
   1eeec:	e7e6      	b.n	1eebc <LLF_RND_AdaptiveProportionTest+0x88>
   1eeee:	463e      	mov	r6, r7
   1eef0:	42b2      	cmp	r2, r6
   1eef2:	d3cf      	bcc.n	1ee94 <LLF_RND_AdaptiveProportionTest+0x60>
   1eef4:	3401      	adds	r4, #1
   1eef6:	42ac      	cmp	r4, r5
   1eef8:	d1f6      	bne.n	1eee8 <LLF_RND_AdaptiveProportionTest+0xb4>
   1eefa:	e7d4      	b.n	1eea6 <LLF_RND_AdaptiveProportionTest+0x72>
   1eefc:	4800      	ldr	r0, [pc, #0]	; (1ef00 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1eefe:	4770      	bx	lr
   1ef00:	00f10c37 	.word	0x00f10c37

0001ef04 <getTrngSource>:
   1ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef08:	b08d      	sub	sp, #52	; 0x34
   1ef0a:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1ef0e:	4607      	mov	r7, r0
   1ef10:	460c      	mov	r4, r1
   1ef12:	2d00      	cmp	r5, #0
   1ef14:	d14c      	bne.n	1efb0 <getTrngSource+0xac>
   1ef16:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1ef1a:	601e      	str	r6, [r3, #0]
   1ef1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ef1e:	2100      	movs	r1, #0
   1ef20:	6019      	str	r1, [r3, #0]
   1ef22:	2a00      	cmp	r2, #0
   1ef24:	f000 811b 	beq.w	1f15e <getTrngSource+0x25a>
   1ef28:	4a99      	ldr	r2, [pc, #612]	; (1f190 <getTrngSource+0x28c>)
   1ef2a:	4b9a      	ldr	r3, [pc, #616]	; (1f194 <getTrngSource+0x290>)
   1ef2c:	6811      	ldr	r1, [r2, #0]
   1ef2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ef30:	681b      	ldr	r3, [r3, #0]
   1ef32:	429a      	cmp	r2, r3
   1ef34:	d147      	bne.n	1efc6 <getTrngSource+0xc2>
   1ef36:	290a      	cmp	r1, #10
   1ef38:	d145      	bne.n	1efc6 <getTrngSource+0xc2>
   1ef3a:	78fb      	ldrb	r3, [r7, #3]
   1ef3c:	9304      	str	r3, [sp, #16]
   1ef3e:	4b96      	ldr	r3, [pc, #600]	; (1f198 <getTrngSource+0x294>)
   1ef40:	fba3 230a 	umull	r2, r3, r3, sl
   1ef44:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1ef48:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1ef4c:	f106 0208 	add.w	r2, r6, #8
   1ef50:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1ef54:	2304      	movs	r3, #4
   1ef56:	9203      	str	r2, [sp, #12]
   1ef58:	9302      	str	r3, [sp, #8]
   1ef5a:	46b8      	mov	r8, r7
   1ef5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ef5e:	f8c3 a000 	str.w	sl, [r3]
   1ef62:	f1ba 0f00 	cmp.w	sl, #0
   1ef66:	f000 80c0 	beq.w	1f0ea <getTrngSource+0x1e6>
   1ef6a:	9e03      	ldr	r6, [sp, #12]
   1ef6c:	4655      	mov	r5, sl
   1ef6e:	f04f 0900 	mov.w	r9, #0
   1ef72:	f000 fab3 	bl	1f4dc <LLF_RND_TurnOffTrng>
   1ef76:	2300      	movs	r3, #0
   1ef78:	9305      	str	r3, [sp, #20]
   1ef7a:	f1b8 0f00 	cmp.w	r8, #0
   1ef7e:	f000 80e2 	beq.w	1f146 <getTrngSource+0x242>
   1ef82:	2c00      	cmp	r4, #0
   1ef84:	f000 80df 	beq.w	1f146 <getTrngSource+0x242>
   1ef88:	9b04      	ldr	r3, [sp, #16]
   1ef8a:	2b00      	cmp	r3, #0
   1ef8c:	f000 80d9 	beq.w	1f142 <getTrngSource+0x23e>
   1ef90:	a904      	add	r1, sp, #16
   1ef92:	4620      	mov	r0, r4
   1ef94:	f000 fa92 	bl	1f4bc <LLF_RND_GetFastestRosc>
   1ef98:	b1b8      	cbz	r0, 1efca <getTrngSource+0xc6>
   1ef9a:	4b80      	ldr	r3, [pc, #512]	; (1f19c <getTrngSource+0x298>)
   1ef9c:	4298      	cmp	r0, r3
   1ef9e:	f040 80a4 	bne.w	1f0ea <getTrngSource+0x1e6>
   1efa2:	9002      	str	r0, [sp, #8]
   1efa4:	f000 fa9a 	bl	1f4dc <LLF_RND_TurnOffTrng>
   1efa8:	9802      	ldr	r0, [sp, #8]
   1efaa:	b00d      	add	sp, #52	; 0x34
   1efac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1efb4:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1efb8:	3001      	adds	r0, #1
   1efba:	bf14      	ite	ne
   1efbc:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1efc0:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1efc4:	e7a9      	b.n	1ef1a <getTrngSource+0x16>
   1efc6:	4876      	ldr	r0, [pc, #472]	; (1f1a0 <getTrngSource+0x29c>)
   1efc8:	e7eb      	b.n	1efa2 <getTrngSource+0x9e>
   1efca:	9804      	ldr	r0, [sp, #16]
   1efcc:	4621      	mov	r1, r4
   1efce:	f000 fa57 	bl	1f480 <LLF_RND_GetRoscSampleCnt>
   1efd2:	2800      	cmp	r0, #0
   1efd4:	d1e1      	bne.n	1ef9a <getTrngSource+0x96>
   1efd6:	9f04      	ldr	r7, [sp, #16]
   1efd8:	2f08      	cmp	r7, #8
   1efda:	f000 80b6 	beq.w	1f14a <getTrngSource+0x246>
   1efde:	2f04      	cmp	r7, #4
   1efe0:	f000 80b5 	beq.w	1f14e <getTrngSource+0x24a>
   1efe4:	f1a7 0702 	sub.w	r7, r7, #2
   1efe8:	fab7 f787 	clz	r7, r7
   1efec:	097f      	lsrs	r7, r7, #5
   1efee:	496d      	ldr	r1, [pc, #436]	; (1f1a4 <getTrngSource+0x2a0>)
   1eff0:	2301      	movs	r3, #1
   1eff2:	600b      	str	r3, [r1, #0]
   1eff4:	f841 3c84 	str.w	r3, [r1, #-132]
   1eff8:	4619      	mov	r1, r3
   1effa:	4b6a      	ldr	r3, [pc, #424]	; (1f1a4 <getTrngSource+0x2a0>)
   1effc:	4865      	ldr	r0, [pc, #404]	; (1f194 <getTrngSource+0x290>)
   1effe:	6019      	str	r1, [r3, #0]
   1f000:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f002:	6003      	str	r3, [r0, #0]
   1f004:	6800      	ldr	r0, [r0, #0]
   1f006:	4283      	cmp	r3, r0
   1f008:	d1f7      	bne.n	1effa <getTrngSource+0xf6>
   1f00a:	4a67      	ldr	r2, [pc, #412]	; (1f1a8 <getTrngSource+0x2a4>)
   1f00c:	2300      	movs	r3, #0
   1f00e:	6013      	str	r3, [r2, #0]
   1f010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f014:	f7ff fd30 	bl	1ea78 <CC_HalClearInterruptBit>
   1f018:	4864      	ldr	r0, [pc, #400]	; (1f1ac <getTrngSource+0x2a8>)
   1f01a:	4965      	ldr	r1, [pc, #404]	; (1f1b0 <getTrngSource+0x2ac>)
   1f01c:	6001      	str	r1, [r0, #0]
   1f01e:	2300      	movs	r3, #0
   1f020:	4618      	mov	r0, r3
   1f022:	f7ff fd37 	bl	1ea94 <CC_HalMaskInterrupt>
   1f026:	4963      	ldr	r1, [pc, #396]	; (1f1b4 <getTrngSource+0x2b0>)
   1f028:	4b63      	ldr	r3, [pc, #396]	; (1f1b8 <getTrngSource+0x2b4>)
   1f02a:	600f      	str	r7, [r1, #0]
   1f02c:	6818      	ldr	r0, [r3, #0]
   1f02e:	4f5a      	ldr	r7, [pc, #360]	; (1f198 <getTrngSource+0x294>)
   1f030:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1f034:	f7ff fd2e 	bl	1ea94 <CC_HalMaskInterrupt>
   1f038:	4b55      	ldr	r3, [pc, #340]	; (1f190 <getTrngSource+0x28c>)
   1f03a:	4860      	ldr	r0, [pc, #384]	; (1f1bc <getTrngSource+0x2b8>)
   1f03c:	210a      	movs	r1, #10
   1f03e:	6019      	str	r1, [r3, #0]
   1f040:	6921      	ldr	r1, [r4, #16]
   1f042:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f044:	fba7 c101 	umull	ip, r1, r7, r1
   1f048:	0909      	lsrs	r1, r1, #4
   1f04a:	fb03 f301 	mul.w	r3, r3, r1
   1f04e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f052:	03db      	lsls	r3, r3, #15
   1f054:	099b      	lsrs	r3, r3, #6
   1f056:	6003      	str	r3, [r0, #0]
   1f058:	4b53      	ldr	r3, [pc, #332]	; (1f1a8 <getTrngSource+0x2a4>)
   1f05a:	2201      	movs	r2, #1
   1f05c:	601a      	str	r2, [r3, #0]
   1f05e:	9904      	ldr	r1, [sp, #16]
   1f060:	f8d8 2000 	ldr.w	r2, [r8]
   1f064:	020b      	lsls	r3, r1, #8
   1f066:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1f06a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1f06e:	4313      	orrs	r3, r2
   1f070:	f8c8 3000 	str.w	r3, [r8]
   1f074:	a805      	add	r0, sp, #20
   1f076:	f000 f9f3 	bl	1f460 <LLF_RND_WaitRngInterrupt>
   1f07a:	2800      	cmp	r0, #0
   1f07c:	d18d      	bne.n	1ef9a <getTrngSource+0x96>
   1f07e:	4a50      	ldr	r2, [pc, #320]	; (1f1c0 <getTrngSource+0x2bc>)
   1f080:	4b50      	ldr	r3, [pc, #320]	; (1f1c4 <getTrngSource+0x2c0>)
   1f082:	6812      	ldr	r2, [r2, #0]
   1f084:	9206      	str	r2, [sp, #24]
   1f086:	681a      	ldr	r2, [r3, #0]
   1f088:	9207      	str	r2, [sp, #28]
   1f08a:	685a      	ldr	r2, [r3, #4]
   1f08c:	9208      	str	r2, [sp, #32]
   1f08e:	689a      	ldr	r2, [r3, #8]
   1f090:	9209      	str	r2, [sp, #36]	; 0x24
   1f092:	68da      	ldr	r2, [r3, #12]
   1f094:	920a      	str	r2, [sp, #40]	; 0x28
   1f096:	3310      	adds	r3, #16
   1f098:	fba7 2705 	umull	r2, r7, r7, r5
   1f09c:	681b      	ldr	r3, [r3, #0]
   1f09e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f0a0:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1f0a4:	d102      	bne.n	1f0ac <getTrngSource+0x1a8>
   1f0a6:	f1bb 0f00 	cmp.w	fp, #0
   1f0aa:	d141      	bne.n	1f130 <getTrngSource+0x22c>
   1f0ac:	2218      	movs	r2, #24
   1f0ae:	4630      	mov	r0, r6
   1f0b0:	eb0d 0102 	add.w	r1, sp, r2
   1f0b4:	f000 f97a 	bl	1f3ac <CC_PalMemCopyPlat>
   1f0b8:	3d18      	subs	r5, #24
   1f0ba:	3618      	adds	r6, #24
   1f0bc:	f109 0901 	add.w	r9, r9, #1
   1f0c0:	2d00      	cmp	r5, #0
   1f0c2:	f47f af56 	bne.w	1ef72 <getTrngSource+0x6e>
   1f0c6:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1f0ca:	d85d      	bhi.n	1f188 <getTrngSource+0x284>
   1f0cc:	9d03      	ldr	r5, [sp, #12]
   1f0ce:	6962      	ldr	r2, [r4, #20]
   1f0d0:	4651      	mov	r1, sl
   1f0d2:	4628      	mov	r0, r5
   1f0d4:	f7ff fe80 	bl	1edd8 <LLF_RND_RepetitionCounterTest.part.0>
   1f0d8:	2800      	cmp	r0, #0
   1f0da:	d04b      	beq.n	1f174 <getTrngSource+0x270>
   1f0dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1f0de:	2300      	movs	r3, #0
   1f0e0:	6013      	str	r3, [r2, #0]
   1f0e2:	4b2e      	ldr	r3, [pc, #184]	; (1f19c <getTrngSource+0x298>)
   1f0e4:	4298      	cmp	r0, r3
   1f0e6:	f43f af5c 	beq.w	1efa2 <getTrngSource+0x9e>
   1f0ea:	9d04      	ldr	r5, [sp, #16]
   1f0ec:	2d08      	cmp	r5, #8
   1f0ee:	d034      	beq.n	1f15a <getTrngSource+0x256>
   1f0f0:	2200      	movs	r2, #0
   1f0f2:	ab04      	add	r3, sp, #16
   1f0f4:	006d      	lsls	r5, r5, #1
   1f0f6:	9200      	str	r2, [sp, #0]
   1f0f8:	4621      	mov	r1, r4
   1f0fa:	4640      	mov	r0, r8
   1f0fc:	9504      	str	r5, [sp, #16]
   1f0fe:	f7ff fdc1 	bl	1ec84 <startTrngHW>
   1f102:	4b31      	ldr	r3, [pc, #196]	; (1f1c8 <getTrngSource+0x2c4>)
   1f104:	4298      	cmp	r0, r3
   1f106:	d024      	beq.n	1f152 <getTrngSource+0x24e>
   1f108:	2800      	cmp	r0, #0
   1f10a:	f47f af4a 	bne.w	1efa2 <getTrngSource+0x9e>
   1f10e:	f8d8 2000 	ldr.w	r2, [r8]
   1f112:	0a13      	lsrs	r3, r2, #8
   1f114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1f118:	4313      	orrs	r3, r2
   1f11a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f11e:	f8c8 3000 	str.w	r3, [r8]
   1f122:	9b02      	ldr	r3, [sp, #8]
   1f124:	3b01      	subs	r3, #1
   1f126:	9302      	str	r3, [sp, #8]
   1f128:	f47f af18 	bne.w	1ef5c <getTrngSource+0x58>
   1f12c:	2000      	movs	r0, #0
   1f12e:	e738      	b.n	1efa2 <getTrngSource+0x9e>
   1f130:	4630      	mov	r0, r6
   1f132:	465a      	mov	r2, fp
   1f134:	a906      	add	r1, sp, #24
   1f136:	f000 f939 	bl	1f3ac <CC_PalMemCopyPlat>
   1f13a:	eba5 050b 	sub.w	r5, r5, fp
   1f13e:	445e      	add	r6, fp
   1f140:	e7bc      	b.n	1f0bc <getTrngSource+0x1b8>
   1f142:	4821      	ldr	r0, [pc, #132]	; (1f1c8 <getTrngSource+0x2c4>)
   1f144:	e729      	b.n	1ef9a <getTrngSource+0x96>
   1f146:	4821      	ldr	r0, [pc, #132]	; (1f1cc <getTrngSource+0x2c8>)
   1f148:	e727      	b.n	1ef9a <getTrngSource+0x96>
   1f14a:	2703      	movs	r7, #3
   1f14c:	e74f      	b.n	1efee <getTrngSource+0xea>
   1f14e:	2702      	movs	r7, #2
   1f150:	e74d      	b.n	1efee <getTrngSource+0xea>
   1f152:	6a23      	ldr	r3, [r4, #32]
   1f154:	2b00      	cmp	r3, #0
   1f156:	f43f af24 	beq.w	1efa2 <getTrngSource+0x9e>
   1f15a:	481d      	ldr	r0, [pc, #116]	; (1f1d0 <getTrngSource+0x2cc>)
   1f15c:	e721      	b.n	1efa2 <getTrngSource+0x9e>
   1f15e:	9500      	str	r5, [sp, #0]
   1f160:	ab04      	add	r3, sp, #16
   1f162:	2201      	movs	r2, #1
   1f164:	4621      	mov	r1, r4
   1f166:	4638      	mov	r0, r7
   1f168:	f7ff fd8c 	bl	1ec84 <startTrngHW>
   1f16c:	2800      	cmp	r0, #0
   1f16e:	f43f aee6 	beq.w	1ef3e <getTrngSource+0x3a>
   1f172:	e716      	b.n	1efa2 <getTrngSource+0x9e>
   1f174:	69a2      	ldr	r2, [r4, #24]
   1f176:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f17a:	4651      	mov	r1, sl
   1f17c:	4628      	mov	r0, r5
   1f17e:	f7ff fe59 	bl	1ee34 <LLF_RND_AdaptiveProportionTest>
   1f182:	2800      	cmp	r0, #0
   1f184:	d1aa      	bne.n	1f0dc <getTrngSource+0x1d8>
   1f186:	e7d1      	b.n	1f12c <getTrngSource+0x228>
   1f188:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f18a:	601d      	str	r5, [r3, #0]
   1f18c:	e7ad      	b.n	1f0ea <getTrngSource+0x1e6>
   1f18e:	bf00      	nop
   1f190:	5002b138 	.word	0x5002b138
   1f194:	5002b130 	.word	0x5002b130
   1f198:	aaaaaaab 	.word	0xaaaaaaab
   1f19c:	00f10c02 	.word	0x00f10c02
   1f1a0:	00f10c30 	.word	0x00f10c30
   1f1a4:	5002b1c4 	.word	0x5002b1c4
   1f1a8:	5002b12c 	.word	0x5002b12c
   1f1ac:	5002b100 	.word	0x5002b100
   1f1b0:	0ffffffe 	.word	0x0ffffffe
   1f1b4:	5002b10c 	.word	0x5002b10c
   1f1b8:	5002ba04 	.word	0x5002ba04
   1f1bc:	5002b1d8 	.word	0x5002b1d8
   1f1c0:	5002b114 	.word	0x5002b114
   1f1c4:	5002b118 	.word	0x5002b118
   1f1c8:	00f10c31 	.word	0x00f10c31
   1f1cc:	00f10c35 	.word	0x00f10c35
   1f1d0:	00f10c32 	.word	0x00f10c32

0001f1d4 <LLF_RND_GetTrngSource>:
   1f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1d8:	4e1f      	ldr	r6, [pc, #124]	; (1f258 <LLF_RND_GetTrngSource+0x84>)
   1f1da:	b084      	sub	sp, #16
   1f1dc:	4604      	mov	r4, r0
   1f1de:	460d      	mov	r5, r1
   1f1e0:	6830      	ldr	r0, [r6, #0]
   1f1e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1f1e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f1e8:	4690      	mov	r8, r2
   1f1ea:	f7ff fcd9 	bl	1eba0 <CC_PalMutexLock>
   1f1ee:	b9d8      	cbnz	r0, 1f228 <LLF_RND_GetTrngSource+0x54>
   1f1f0:	2000      	movs	r0, #0
   1f1f2:	f7ff fd05 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1f1f6:	b9f8      	cbnz	r0, 1f238 <LLF_RND_GetTrngSource+0x64>
   1f1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f1fa:	9200      	str	r2, [sp, #0]
   1f1fc:	2300      	movs	r3, #0
   1f1fe:	4620      	mov	r0, r4
   1f200:	9302      	str	r3, [sp, #8]
   1f202:	9701      	str	r7, [sp, #4]
   1f204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f206:	4642      	mov	r2, r8
   1f208:	4629      	mov	r1, r5
   1f20a:	f7ff fe7b 	bl	1ef04 <getTrngSource>
   1f20e:	4604      	mov	r4, r0
   1f210:	2001      	movs	r0, #1
   1f212:	f7ff fcf5 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1f216:	b9d0      	cbnz	r0, 1f24e <LLF_RND_GetTrngSource+0x7a>
   1f218:	6830      	ldr	r0, [r6, #0]
   1f21a:	f7ff fcc9 	bl	1ebb0 <CC_PalMutexUnlock>
   1f21e:	b978      	cbnz	r0, 1f240 <LLF_RND_GetTrngSource+0x6c>
   1f220:	4620      	mov	r0, r4
   1f222:	b004      	add	sp, #16
   1f224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f228:	480c      	ldr	r0, [pc, #48]	; (1f25c <LLF_RND_GetTrngSource+0x88>)
   1f22a:	f7ff fac9 	bl	1e7c0 <CC_PalAbort>
   1f22e:	2000      	movs	r0, #0
   1f230:	f7ff fce6 	bl	1ec00 <CC_PalPowerSaveModeSelect>
   1f234:	2800      	cmp	r0, #0
   1f236:	d0df      	beq.n	1f1f8 <LLF_RND_GetTrngSource+0x24>
   1f238:	4809      	ldr	r0, [pc, #36]	; (1f260 <LLF_RND_GetTrngSource+0x8c>)
   1f23a:	f7ff fac1 	bl	1e7c0 <CC_PalAbort>
   1f23e:	e7db      	b.n	1f1f8 <LLF_RND_GetTrngSource+0x24>
   1f240:	4808      	ldr	r0, [pc, #32]	; (1f264 <LLF_RND_GetTrngSource+0x90>)
   1f242:	f7ff fabd 	bl	1e7c0 <CC_PalAbort>
   1f246:	4620      	mov	r0, r4
   1f248:	b004      	add	sp, #16
   1f24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f24e:	4806      	ldr	r0, [pc, #24]	; (1f268 <LLF_RND_GetTrngSource+0x94>)
   1f250:	f7ff fab6 	bl	1e7c0 <CC_PalAbort>
   1f254:	e7e0      	b.n	1f218 <LLF_RND_GetTrngSource+0x44>
   1f256:	bf00      	nop
   1f258:	200006f4 	.word	0x200006f4
   1f25c:	00023428 	.word	0x00023428
   1f260:	00023458 	.word	0x00023458
   1f264:	00023440 	.word	0x00023440
   1f268:	00023478 	.word	0x00023478

0001f26c <LLF_RND_RunTrngStartupTest>:
   1f26c:	b510      	push	{r4, lr}
   1f26e:	b086      	sub	sp, #24
   1f270:	ab05      	add	r3, sp, #20
   1f272:	2401      	movs	r4, #1
   1f274:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1f278:	9300      	str	r3, [sp, #0]
   1f27a:	2200      	movs	r2, #0
   1f27c:	ab04      	add	r3, sp, #16
   1f27e:	f7ff fe41 	bl	1ef04 <getTrngSource>
   1f282:	b006      	add	sp, #24
   1f284:	bd10      	pop	{r4, pc}
   1f286:	bf00      	nop

0001f288 <mbedtls_hardware_poll>:
   1f288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f28c:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   1f290:	460f      	mov	r7, r1
   1f292:	9205      	str	r2, [sp, #20]
   1f294:	2100      	movs	r1, #0
   1f296:	4614      	mov	r4, r2
   1f298:	a812      	add	r0, sp, #72	; 0x48
   1f29a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1f29e:	461e      	mov	r6, r3
   1f2a0:	f001 f9f3 	bl	2068a <memset>
   1f2a4:	2100      	movs	r1, #0
   1f2a6:	a808      	add	r0, sp, #32
   1f2a8:	2228      	movs	r2, #40	; 0x28
   1f2aa:	9106      	str	r1, [sp, #24]
   1f2ac:	f001 f9ed 	bl	2068a <memset>
   1f2b0:	2f00      	cmp	r7, #0
   1f2b2:	d03c      	beq.n	1f32e <mbedtls_hardware_poll+0xa6>
   1f2b4:	2e00      	cmp	r6, #0
   1f2b6:	d03a      	beq.n	1f32e <mbedtls_hardware_poll+0xa6>
   1f2b8:	2c00      	cmp	r4, #0
   1f2ba:	d038      	beq.n	1f32e <mbedtls_hardware_poll+0xa6>
   1f2bc:	2104      	movs	r1, #4
   1f2be:	a806      	add	r0, sp, #24
   1f2c0:	f000 f876 	bl	1f3b0 <CC_PalMemSetZeroPlat>
   1f2c4:	a808      	add	r0, sp, #32
   1f2c6:	2128      	movs	r1, #40	; 0x28
   1f2c8:	f000 f872 	bl	1f3b0 <CC_PalMemSetZeroPlat>
   1f2cc:	a808      	add	r0, sp, #32
   1f2ce:	f000 f831 	bl	1f334 <RNG_PLAT_SetUserRngParameters>
   1f2d2:	b178      	cbz	r0, 1f2f4 <mbedtls_hardware_poll+0x6c>
   1f2d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f2d8:	a812      	add	r0, sp, #72	; 0x48
   1f2da:	f44f 7108 	mov.w	r1, #544	; 0x220
   1f2de:	f000 f90b 	bl	1f4f8 <mbedtls_platform_zeroize>
   1f2e2:	a806      	add	r0, sp, #24
   1f2e4:	2104      	movs	r1, #4
   1f2e6:	f000 f907 	bl	1f4f8 <mbedtls_platform_zeroize>
   1f2ea:	4628      	mov	r0, r5
   1f2ec:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   1f2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2f4:	ab12      	add	r3, sp, #72	; 0x48
   1f2f6:	f10d 081c 	add.w	r8, sp, #28
   1f2fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1f2fe:	9003      	str	r0, [sp, #12]
   1f300:	4602      	mov	r2, r0
   1f302:	ab05      	add	r3, sp, #20
   1f304:	a908      	add	r1, sp, #32
   1f306:	f8cd 8000 	str.w	r8, [sp]
   1f30a:	a806      	add	r0, sp, #24
   1f30c:	f7ff ff62 	bl	1f1d4 <LLF_RND_GetTrngSource>
   1f310:	4605      	mov	r5, r0
   1f312:	2800      	cmp	r0, #0
   1f314:	d1de      	bne.n	1f2d4 <mbedtls_hardware_poll+0x4c>
   1f316:	6833      	ldr	r3, [r6, #0]
   1f318:	42a3      	cmp	r3, r4
   1f31a:	d3db      	bcc.n	1f2d4 <mbedtls_hardware_poll+0x4c>
   1f31c:	f8d8 1000 	ldr.w	r1, [r8]
   1f320:	4638      	mov	r0, r7
   1f322:	3108      	adds	r1, #8
   1f324:	4622      	mov	r2, r4
   1f326:	f000 f841 	bl	1f3ac <CC_PalMemCopyPlat>
   1f32a:	6034      	str	r4, [r6, #0]
   1f32c:	e7d4      	b.n	1f2d8 <mbedtls_hardware_poll+0x50>
   1f32e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f332:	e7da      	b.n	1f2ea <mbedtls_hardware_poll+0x62>

0001f334 <RNG_PLAT_SetUserRngParameters>:
   1f334:	b530      	push	{r4, r5, lr}
   1f336:	b083      	sub	sp, #12
   1f338:	231c      	movs	r3, #28
   1f33a:	a901      	add	r1, sp, #4
   1f33c:	4604      	mov	r4, r0
   1f33e:	9301      	str	r3, [sp, #4]
   1f340:	f000 f83a 	bl	1f3b8 <CC_PalTrngParamGet>
   1f344:	4605      	mov	r5, r0
   1f346:	b938      	cbnz	r0, 1f358 <RNG_PLAT_SetUserRngParameters+0x24>
   1f348:	9b01      	ldr	r3, [sp, #4]
   1f34a:	2b1c      	cmp	r3, #28
   1f34c:	d007      	beq.n	1f35e <RNG_PLAT_SetUserRngParameters+0x2a>
   1f34e:	4d15      	ldr	r5, [pc, #84]	; (1f3a4 <RNG_PLAT_SetUserRngParameters+0x70>)
   1f350:	4620      	mov	r0, r4
   1f352:	211c      	movs	r1, #28
   1f354:	f000 f82c 	bl	1f3b0 <CC_PalMemSetZeroPlat>
   1f358:	4628      	mov	r0, r5
   1f35a:	b003      	add	sp, #12
   1f35c:	bd30      	pop	{r4, r5, pc}
   1f35e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1f362:	2101      	movs	r1, #1
   1f364:	3b00      	subs	r3, #0
   1f366:	bf18      	it	ne
   1f368:	2301      	movne	r3, #1
   1f36a:	61e1      	str	r1, [r4, #28]
   1f36c:	b10a      	cbz	r2, 1f372 <RNG_PLAT_SetUserRngParameters+0x3e>
   1f36e:	f043 0302 	orr.w	r3, r3, #2
   1f372:	68a2      	ldr	r2, [r4, #8]
   1f374:	b932      	cbnz	r2, 1f384 <RNG_PLAT_SetUserRngParameters+0x50>
   1f376:	68e2      	ldr	r2, [r4, #12]
   1f378:	b942      	cbnz	r2, 1f38c <RNG_PLAT_SetUserRngParameters+0x58>
   1f37a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f37e:	b97b      	cbnz	r3, 1f3a0 <RNG_PLAT_SetUserRngParameters+0x6c>
   1f380:	4d09      	ldr	r5, [pc, #36]	; (1f3a8 <RNG_PLAT_SetUserRngParameters+0x74>)
   1f382:	e7e5      	b.n	1f350 <RNG_PLAT_SetUserRngParameters+0x1c>
   1f384:	68e2      	ldr	r2, [r4, #12]
   1f386:	f043 0304 	orr.w	r3, r3, #4
   1f38a:	b13a      	cbz	r2, 1f39c <RNG_PLAT_SetUserRngParameters+0x68>
   1f38c:	f043 0308 	orr.w	r3, r3, #8
   1f390:	2200      	movs	r2, #0
   1f392:	4628      	mov	r0, r5
   1f394:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f398:	b003      	add	sp, #12
   1f39a:	bd30      	pop	{r4, r5, pc}
   1f39c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f3a0:	4615      	mov	r5, r2
   1f3a2:	e7d9      	b.n	1f358 <RNG_PLAT_SetUserRngParameters+0x24>
   1f3a4:	00f00c37 	.word	0x00f00c37
   1f3a8:	00f00c0e 	.word	0x00f00c0e

0001f3ac <CC_PalMemCopyPlat>:
   1f3ac:	f001 b92b 	b.w	20606 <memmove>

0001f3b0 <CC_PalMemSetZeroPlat>:
   1f3b0:	460a      	mov	r2, r1
   1f3b2:	2100      	movs	r1, #0
   1f3b4:	f001 b969 	b.w	2068a <memset>

0001f3b8 <CC_PalTrngParamGet>:
   1f3b8:	b118      	cbz	r0, 1f3c2 <CC_PalTrngParamGet+0xa>
   1f3ba:	b111      	cbz	r1, 1f3c2 <CC_PalTrngParamGet+0xa>
   1f3bc:	680b      	ldr	r3, [r1, #0]
   1f3be:	2b1c      	cmp	r3, #28
   1f3c0:	d001      	beq.n	1f3c6 <CC_PalTrngParamGet+0xe>
   1f3c2:	2001      	movs	r0, #1
   1f3c4:	4770      	bx	lr
   1f3c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f3ca:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1f3ce:	3201      	adds	r2, #1
   1f3d0:	bf14      	ite	ne
   1f3d2:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1f3d6:	f241 225c 	movweq	r2, #4700	; 0x125c
   1f3da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f3de:	6002      	str	r2, [r0, #0]
   1f3e0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1f3e4:	3201      	adds	r2, #1
   1f3e6:	bf14      	ite	ne
   1f3e8:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1f3ec:	f641 1264 	movweq	r2, #6500	; 0x1964
   1f3f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f3f4:	6042      	str	r2, [r0, #4]
   1f3f6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1f3fa:	3201      	adds	r2, #1
   1f3fc:	bf14      	ite	ne
   1f3fe:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1f402:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1f406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f40a:	6082      	str	r2, [r0, #8]
   1f40c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1f410:	3201      	adds	r2, #1
   1f412:	bf14      	ite	ne
   1f414:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1f418:	f241 3288 	movweq	r2, #5000	; 0x1388
   1f41c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f420:	60c2      	str	r2, [r0, #12]
   1f422:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1f426:	3201      	adds	r2, #1
   1f428:	bf14      	ite	ne
   1f42a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1f42e:	2290      	moveq	r2, #144	; 0x90
   1f430:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f434:	6102      	str	r2, [r0, #16]
   1f436:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1f43a:	3201      	adds	r2, #1
   1f43c:	bf14      	ite	ne
   1f43e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1f442:	2251      	moveq	r2, #81	; 0x51
   1f444:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f448:	6142      	str	r2, [r0, #20]
   1f44a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1f44e:	3201      	adds	r2, #1
   1f450:	bf14      	ite	ne
   1f452:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1f456:	f240 3337 	movweq	r3, #823	; 0x337
   1f45a:	6183      	str	r3, [r0, #24]
   1f45c:	2000      	movs	r0, #0
   1f45e:	4770      	bx	lr

0001f460 <LLF_RND_WaitRngInterrupt>:
   1f460:	b508      	push	{r3, lr}
   1f462:	4601      	mov	r1, r0
   1f464:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f468:	f7ff fb1a 	bl	1eaa0 <CC_HalWaitInterruptRND>
   1f46c:	4902      	ldr	r1, [pc, #8]	; (1f478 <LLF_RND_WaitRngInterrupt+0x18>)
   1f46e:	4a03      	ldr	r2, [pc, #12]	; (1f47c <LLF_RND_WaitRngInterrupt+0x1c>)
   1f470:	2300      	movs	r3, #0
   1f472:	600b      	str	r3, [r1, #0]
   1f474:	6013      	str	r3, [r2, #0]
   1f476:	bd08      	pop	{r3, pc}
   1f478:	5002b1c8 	.word	0x5002b1c8
   1f47c:	5002b12c 	.word	0x5002b12c

0001f480 <LLF_RND_GetRoscSampleCnt>:
   1f480:	3801      	subs	r0, #1
   1f482:	2807      	cmp	r0, #7
   1f484:	d805      	bhi.n	1f492 <LLF_RND_GetRoscSampleCnt+0x12>
   1f486:	e8df f000 	tbb	[pc, r0]
   1f48a:	0e0a      	.short	0x0e0a
   1f48c:	04041204 	.word	0x04041204
   1f490:	0604      	.short	0x0604
   1f492:	4809      	ldr	r0, [pc, #36]	; (1f4b8 <LLF_RND_GetRoscSampleCnt+0x38>)
   1f494:	4770      	bx	lr
   1f496:	68cb      	ldr	r3, [r1, #12]
   1f498:	624b      	str	r3, [r1, #36]	; 0x24
   1f49a:	2000      	movs	r0, #0
   1f49c:	4770      	bx	lr
   1f49e:	680b      	ldr	r3, [r1, #0]
   1f4a0:	624b      	str	r3, [r1, #36]	; 0x24
   1f4a2:	2000      	movs	r0, #0
   1f4a4:	4770      	bx	lr
   1f4a6:	684b      	ldr	r3, [r1, #4]
   1f4a8:	624b      	str	r3, [r1, #36]	; 0x24
   1f4aa:	2000      	movs	r0, #0
   1f4ac:	4770      	bx	lr
   1f4ae:	688b      	ldr	r3, [r1, #8]
   1f4b0:	624b      	str	r3, [r1, #36]	; 0x24
   1f4b2:	2000      	movs	r0, #0
   1f4b4:	4770      	bx	lr
   1f4b6:	bf00      	nop
   1f4b8:	00f10c31 	.word	0x00f10c31

0001f4bc <LLF_RND_GetFastestRosc>:
   1f4bc:	680b      	ldr	r3, [r1, #0]
   1f4be:	e002      	b.n	1f4c6 <LLF_RND_GetFastestRosc+0xa>
   1f4c0:	2b08      	cmp	r3, #8
   1f4c2:	600b      	str	r3, [r1, #0]
   1f4c4:	d806      	bhi.n	1f4d4 <LLF_RND_GetFastestRosc+0x18>
   1f4c6:	6a02      	ldr	r2, [r0, #32]
   1f4c8:	4213      	tst	r3, r2
   1f4ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1f4ce:	d0f7      	beq.n	1f4c0 <LLF_RND_GetFastestRosc+0x4>
   1f4d0:	2000      	movs	r0, #0
   1f4d2:	4770      	bx	lr
   1f4d4:	4800      	ldr	r0, [pc, #0]	; (1f4d8 <LLF_RND_GetFastestRosc+0x1c>)
   1f4d6:	4770      	bx	lr
   1f4d8:	00f10c31 	.word	0x00f10c31

0001f4dc <LLF_RND_TurnOffTrng>:
   1f4dc:	4904      	ldr	r1, [pc, #16]	; (1f4f0 <LLF_RND_TurnOffTrng+0x14>)
   1f4de:	4a05      	ldr	r2, [pc, #20]	; (1f4f4 <LLF_RND_TurnOffTrng+0x18>)
   1f4e0:	2300      	movs	r3, #0
   1f4e2:	600b      	str	r3, [r1, #0]
   1f4e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f4e8:	6013      	str	r3, [r2, #0]
   1f4ea:	f7ff bac5 	b.w	1ea78 <CC_HalClearInterruptBit>
   1f4ee:	bf00      	nop
   1f4f0:	5002b12c 	.word	0x5002b12c
   1f4f4:	5002b1c4 	.word	0x5002b1c4

0001f4f8 <mbedtls_platform_zeroize>:
   1f4f8:	b138      	cbz	r0, 1f50a <mbedtls_platform_zeroize+0x12>
   1f4fa:	b131      	cbz	r1, 1f50a <mbedtls_platform_zeroize+0x12>
   1f4fc:	4401      	add	r1, r0
   1f4fe:	2200      	movs	r2, #0
   1f500:	4603      	mov	r3, r0
   1f502:	3001      	adds	r0, #1
   1f504:	4281      	cmp	r1, r0
   1f506:	701a      	strb	r2, [r3, #0]
   1f508:	d1fa      	bne.n	1f500 <mbedtls_platform_zeroize+0x8>
   1f50a:	4770      	bx	lr

0001f50c <le_param_req>:
}
   1f50c:	2001      	movs	r0, #1
   1f50e:	4770      	bx	lr

0001f510 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f510:	4603      	mov	r3, r0
   1f512:	b140      	cbz	r0, 1f526 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f514:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f516:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f51a:	2a02      	cmp	r2, #2
   1f51c:	d006      	beq.n	1f52c <sys_notify_validate+0x1c>
   1f51e:	2a03      	cmp	r2, #3
   1f520:	d004      	beq.n	1f52c <sys_notify_validate+0x1c>
   1f522:	2a01      	cmp	r2, #1
   1f524:	d005      	beq.n	1f532 <sys_notify_validate+0x22>
		return -EINVAL;
   1f526:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f52a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f52c:	681a      	ldr	r2, [r3, #0]
   1f52e:	2a00      	cmp	r2, #0
   1f530:	d0f9      	beq.n	1f526 <sys_notify_validate+0x16>
		notify->result = 0;
   1f532:	2000      	movs	r0, #0
   1f534:	6098      	str	r0, [r3, #8]
   1f536:	4770      	bx	lr

0001f538 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f538:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f53a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f53e:	2a02      	cmp	r2, #2
{
   1f540:	b510      	push	{r4, lr}
   1f542:	4603      	mov	r3, r0
	notify->result = res;
   1f544:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f546:	d00a      	beq.n	1f55e <sys_notify_finalize+0x26>
   1f548:	2a03      	cmp	r2, #3
   1f54a:	d10b      	bne.n	1f564 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f54c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f54e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f550:	2200      	movs	r2, #0
   1f552:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f554:	b108      	cbz	r0, 1f55a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1f556:	f7ff f8bf 	bl	1e6d8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f55a:	4620      	mov	r0, r4
   1f55c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f55e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1f560:	2400      	movs	r4, #0
		break;
   1f562:	e7f5      	b.n	1f550 <sys_notify_finalize+0x18>
	switch (method) {
   1f564:	2400      	movs	r4, #0
   1f566:	4620      	mov	r0, r4
   1f568:	e7f2      	b.n	1f550 <sys_notify_finalize+0x18>

0001f56a <arch_printk_char_out>:
}
   1f56a:	2000      	movs	r0, #0
   1f56c:	4770      	bx	lr

0001f56e <str_out>:
{
   1f56e:	b530      	push	{r4, r5, lr}
   1f570:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f572:	680c      	ldr	r4, [r1, #0]
   1f574:	1c55      	adds	r5, r2, #1
   1f576:	b114      	cbz	r4, 1f57e <str_out+0x10>
   1f578:	684b      	ldr	r3, [r1, #4]
   1f57a:	4293      	cmp	r3, r2
   1f57c:	dc01      	bgt.n	1f582 <str_out+0x14>
		ctx->count++;
   1f57e:	608d      	str	r5, [r1, #8]
}
   1f580:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f582:	3b01      	subs	r3, #1
   1f584:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f586:	bf08      	it	eq
   1f588:	2200      	moveq	r2, #0
   1f58a:	608d      	str	r5, [r1, #8]
   1f58c:	bf0c      	ite	eq
   1f58e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f590:	54a0      	strbne	r0, [r4, r2]
   1f592:	e7f5      	b.n	1f580 <str_out+0x12>

0001f594 <printk>:
{
   1f594:	b40f      	push	{r0, r1, r2, r3}
   1f596:	b507      	push	{r0, r1, r2, lr}
   1f598:	a904      	add	r1, sp, #16
   1f59a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f59e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1f5a0:	f7f4 fb2c 	bl	13bfc <vprintk>
}
   1f5a4:	b003      	add	sp, #12
   1f5a6:	f85d eb04 	ldr.w	lr, [sp], #4
   1f5aa:	b004      	add	sp, #16
   1f5ac:	4770      	bx	lr

0001f5ae <snprintk>:
{
   1f5ae:	b40c      	push	{r2, r3}
   1f5b0:	b507      	push	{r0, r1, r2, lr}
   1f5b2:	ab04      	add	r3, sp, #16
   1f5b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f5b8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f5ba:	f7f4 fb2d 	bl	13c18 <vsnprintk>
}
   1f5be:	b003      	add	sp, #12
   1f5c0:	f85d eb04 	ldr.w	lr, [sp], #4
   1f5c4:	b002      	add	sp, #8
   1f5c6:	4770      	bx	lr

0001f5c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f5c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f5ca:	f013 0307 	ands.w	r3, r3, #7
   1f5ce:	d105      	bne.n	1f5dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f5d0:	6803      	ldr	r3, [r0, #0]
   1f5d2:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1f5d4:	bf0c      	ite	eq
   1f5d6:	2000      	moveq	r0, #0
   1f5d8:	2003      	movne	r0, #3
   1f5da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f5dc:	2b02      	cmp	r3, #2
   1f5de:	d105      	bne.n	1f5ec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f5e0:	8b43      	ldrh	r3, [r0, #26]
   1f5e2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1f5e4:	bf14      	ite	ne
   1f5e6:	2000      	movne	r0, #0
   1f5e8:	2004      	moveq	r0, #4
   1f5ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f5ec:	2b01      	cmp	r3, #1
   1f5ee:	d105      	bne.n	1f5fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f5f0:	6803      	ldr	r3, [r0, #0]
   1f5f2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1f5f4:	bf0c      	ite	eq
   1f5f6:	2000      	moveq	r0, #0
   1f5f8:	2005      	movne	r0, #5
   1f5fa:	4770      	bx	lr
	int evt = EVT_NOP;
   1f5fc:	2000      	movs	r0, #0
}
   1f5fe:	4770      	bx	lr

0001f600 <notify_one>:
{
   1f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f604:	460d      	mov	r5, r1
   1f606:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f608:	4619      	mov	r1, r3
   1f60a:	1d28      	adds	r0, r5, #4
{
   1f60c:	4690      	mov	r8, r2
   1f60e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f610:	f7ff ff92 	bl	1f538 <sys_notify_finalize>
	if (cb) {
   1f614:	4604      	mov	r4, r0
   1f616:	b138      	cbz	r0, 1f628 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f618:	4633      	mov	r3, r6
   1f61a:	4642      	mov	r2, r8
   1f61c:	4629      	mov	r1, r5
   1f61e:	4638      	mov	r0, r7
   1f620:	46a4      	mov	ip, r4
}
   1f622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f626:	4760      	bx	ip
}
   1f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f62c <transition_complete>:
{
   1f62c:	b410      	push	{r4}
	__asm__ volatile(
   1f62e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f632:	f3ef 8211 	mrs	r2, BASEPRI
   1f636:	f384 8811 	msr	BASEPRI, r4
   1f63a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f63e:	6141      	str	r1, [r0, #20]
}
   1f640:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f642:	2101      	movs	r1, #1
   1f644:	f7f4 bafc 	b.w	13c40 <process_event>

0001f648 <validate_args>:
{
   1f648:	b510      	push	{r4, lr}
   1f64a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f64c:	b140      	cbz	r0, 1f660 <validate_args+0x18>
   1f64e:	b139      	cbz	r1, 1f660 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f650:	1d08      	adds	r0, r1, #4
   1f652:	f7ff ff5d 	bl	1f510 <sys_notify_validate>
	if ((rv == 0)
   1f656:	b928      	cbnz	r0, 1f664 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f658:	68a3      	ldr	r3, [r4, #8]
   1f65a:	f033 0303 	bics.w	r3, r3, #3
   1f65e:	d001      	beq.n	1f664 <validate_args+0x1c>
		rv = -EINVAL;
   1f660:	f06f 0015 	mvn.w	r0, #21
}
   1f664:	bd10      	pop	{r4, pc}

0001f666 <onoff_manager_init>:
{
   1f666:	b538      	push	{r3, r4, r5, lr}
   1f668:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f66a:	4605      	mov	r5, r0
   1f66c:	b158      	cbz	r0, 1f686 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f66e:	b151      	cbz	r1, 1f686 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f670:	680b      	ldr	r3, [r1, #0]
   1f672:	b143      	cbz	r3, 1f686 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f674:	684b      	ldr	r3, [r1, #4]
   1f676:	b133      	cbz	r3, 1f686 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f678:	221c      	movs	r2, #28
   1f67a:	2100      	movs	r1, #0
   1f67c:	f001 f805 	bl	2068a <memset>
   1f680:	612c      	str	r4, [r5, #16]
	return 0;
   1f682:	2000      	movs	r0, #0
}
   1f684:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f686:	f06f 0015 	mvn.w	r0, #21
   1f68a:	e7fb      	b.n	1f684 <onoff_manager_init+0x1e>

0001f68c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f68c:	b570      	push	{r4, r5, r6, lr}
   1f68e:	4604      	mov	r4, r0
   1f690:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f692:	f7ff ffd9 	bl	1f648 <validate_args>

	if (rv < 0) {
   1f696:	1e05      	subs	r5, r0, #0
   1f698:	db31      	blt.n	1f6fe <onoff_request+0x72>
   1f69a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f69e:	f3ef 8111 	mrs	r1, BASEPRI
   1f6a2:	f383 8811 	msr	BASEPRI, r3
   1f6a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f6aa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f6ac:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f6ae:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f6b2:	42ab      	cmp	r3, r5
   1f6b4:	f000 0207 	and.w	r2, r0, #7
   1f6b8:	d02e      	beq.n	1f718 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f6ba:	2a02      	cmp	r2, #2
   1f6bc:	d10e      	bne.n	1f6dc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f6be:	3301      	adds	r3, #1
   1f6c0:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f6c2:	4615      	mov	r5, r2
		notify = true;
   1f6c4:	2301      	movs	r3, #1
	__asm__ volatile(
   1f6c6:	f381 8811 	msr	BASEPRI, r1
   1f6ca:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f6ce:	b1b3      	cbz	r3, 1f6fe <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f6d0:	2300      	movs	r3, #0
   1f6d2:	4631      	mov	r1, r6
   1f6d4:	4620      	mov	r0, r4
   1f6d6:	f7ff ff93 	bl	1f600 <notify_one>
   1f6da:	e010      	b.n	1f6fe <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f6dc:	0783      	lsls	r3, r0, #30
   1f6de:	d001      	beq.n	1f6e4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f6e0:	2a06      	cmp	r2, #6
   1f6e2:	d10e      	bne.n	1f702 <onoff_request+0x76>
	parent->next = child;
   1f6e4:	2300      	movs	r3, #0
   1f6e6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1f6e8:	6863      	ldr	r3, [r4, #4]
   1f6ea:	b993      	cbnz	r3, 1f712 <onoff_request+0x86>
	list->head = node;
   1f6ec:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f6f0:	4615      	mov	r5, r2
   1f6f2:	b962      	cbnz	r2, 1f70e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f6f4:	460a      	mov	r2, r1
   1f6f6:	4620      	mov	r0, r4
   1f6f8:	2102      	movs	r1, #2
   1f6fa:	f7f4 faa1 	bl	13c40 <process_event>
		}
	}

	return rv;
}
   1f6fe:	4628      	mov	r0, r5
   1f700:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f702:	2a05      	cmp	r2, #5
   1f704:	bf0c      	ite	eq
   1f706:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1f70a:	f06f 0504 	mvnne.w	r5, #4
   1f70e:	2300      	movs	r3, #0
   1f710:	e7d9      	b.n	1f6c6 <onoff_request+0x3a>
	parent->next = child;
   1f712:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f714:	6066      	str	r6, [r4, #4]
}
   1f716:	e7eb      	b.n	1f6f0 <onoff_request+0x64>
		rv = -EAGAIN;
   1f718:	f06f 050a 	mvn.w	r5, #10
   1f71c:	e7f7      	b.n	1f70e <onoff_request+0x82>

0001f71e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f71e:	4604      	mov	r4, r0
   1f720:	b508      	push	{r3, lr}
   1f722:	4608      	mov	r0, r1
   1f724:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1f726:	461a      	mov	r2, r3
   1f728:	47a0      	blx	r4
	return z_impl_k_current_get();
   1f72a:	f7fe fbd3 	bl	1ded4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1f72e:	f7f6 fa5f 	bl	15bf0 <z_impl_k_thread_abort>

0001f732 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1f732:	b510      	push	{r4, lr}
   1f734:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1f736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f73e:	4620      	mov	r0, r4
   1f740:	f7fd fffc 	bl	1d73c <z_impl_k_queue_get>
   1f744:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1f746:	2800      	cmp	r0, #0
   1f748:	d0f5      	beq.n	1f736 <z_work_q_main+0x4>
   1f74a:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1f74c:	6842      	ldr	r2, [r0, #4]
   1f74e:	f3bf 8f5b 	dmb	ish
   1f752:	e853 1f00 	ldrex	r1, [r3]
   1f756:	f021 0c01 	bic.w	ip, r1, #1
   1f75a:	e843 ce00 	strex	lr, ip, [r3]
   1f75e:	f1be 0f00 	cmp.w	lr, #0
   1f762:	d1f6      	bne.n	1f752 <z_work_q_main+0x20>
   1f764:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1f768:	07cb      	lsls	r3, r1, #31
   1f76a:	d500      	bpl.n	1f76e <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1f76c:	4790      	blx	r2
	z_impl_k_yield();
   1f76e:	f7fe fb41 	bl	1ddf4 <z_impl_k_yield>
   1f772:	e7e0      	b.n	1f736 <z_work_q_main+0x4>

0001f774 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f774:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1f776:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f77a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1f77e:	bf2c      	ite	cs
   1f780:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1f784:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1f788:	4770      	bx	lr

0001f78a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1f78a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1f78e:	6880      	ldr	r0, [r0, #8]
   1f790:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1f794:	bf2c      	ite	cs
   1f796:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1f79a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1f79e:	4770      	bx	lr

0001f7a0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1f7a0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1f7a2:	2201      	movs	r2, #1
   1f7a4:	f7ff ffe6 	bl	1f774 <chunk_field>
}
   1f7a8:	0840      	lsrs	r0, r0, #1
   1f7aa:	bd08      	pop	{r3, pc}

0001f7ac <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f7ac:	6883      	ldr	r3, [r0, #8]
   1f7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1f7b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f7b6:	d308      	bcc.n	1f7ca <set_chunk_used+0x1e>
		if (used) {
   1f7b8:	684b      	ldr	r3, [r1, #4]
   1f7ba:	b11a      	cbz	r2, 1f7c4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f7bc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f7c0:	604b      	str	r3, [r1, #4]
   1f7c2:	4770      	bx	lr
   1f7c4:	f023 0301 	bic.w	r3, r3, #1
   1f7c8:	e7fa      	b.n	1f7c0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1f7ca:	884b      	ldrh	r3, [r1, #2]
   1f7cc:	b11a      	cbz	r2, 1f7d6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f7ce:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f7d2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1f7d4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f7d6:	f023 0301 	bic.w	r3, r3, #1
   1f7da:	e7fa      	b.n	1f7d2 <set_chunk_used+0x26>

0001f7dc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f7dc:	0053      	lsls	r3, r2, #1
   1f7de:	2201      	movs	r2, #1
   1f7e0:	f7ff bfd3 	b.w	1f78a <chunk_set>

0001f7e4 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1f7e4:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f7e6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f7e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1f7ec:	bf2c      	ite	cs
   1f7ee:	2002      	movcs	r0, #2
   1f7f0:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f7f2:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1f7f4:	fab0 f080 	clz	r0, r0
}
   1f7f8:	f1c0 001f 	rsb	r0, r0, #31
   1f7fc:	4770      	bx	lr

0001f7fe <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1f7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f802:	4616      	mov	r6, r2
   1f804:	4604      	mov	r4, r0
   1f806:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f808:	f7ff ffca 	bl	1f7a0 <chunk_size>
   1f80c:	4631      	mov	r1, r6
   1f80e:	4605      	mov	r5, r0
   1f810:	4620      	mov	r0, r4
   1f812:	f7ff ffc5 	bl	1f7a0 <chunk_size>
   1f816:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1f818:	462a      	mov	r2, r5
   1f81a:	4639      	mov	r1, r7
   1f81c:	4620      	mov	r0, r4
   1f81e:	f7ff ffdd 	bl	1f7dc <set_chunk_size>
	return c + chunk_size(h, c);
   1f822:	4631      	mov	r1, r6
   1f824:	4620      	mov	r0, r4
   1f826:	f7ff ffbb 	bl	1f7a0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f82a:	462b      	mov	r3, r5
   1f82c:	1831      	adds	r1, r6, r0
   1f82e:	2200      	movs	r2, #0
   1f830:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1f832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f836:	f7ff bfa8 	b.w	1f78a <chunk_set>

0001f83a <split_chunks>:
{
   1f83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f83e:	4614      	mov	r4, r2
   1f840:	4605      	mov	r5, r0
   1f842:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1f844:	f7ff ffac 	bl	1f7a0 <chunk_size>
	size_t lsz = rc - lc;
   1f848:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1f84c:	1b37      	subs	r7, r6, r4
   1f84e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1f850:	4642      	mov	r2, r8
   1f852:	4631      	mov	r1, r6
   1f854:	4628      	mov	r0, r5
   1f856:	f7ff ffc1 	bl	1f7dc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1f85a:	463a      	mov	r2, r7
   1f85c:	4621      	mov	r1, r4
   1f85e:	4628      	mov	r0, r5
   1f860:	f7ff ffbc 	bl	1f7dc <set_chunk_size>
   1f864:	4643      	mov	r3, r8
   1f866:	2200      	movs	r2, #0
   1f868:	4621      	mov	r1, r4
   1f86a:	4628      	mov	r0, r5
   1f86c:	f7ff ff8d 	bl	1f78a <chunk_set>
	return c + chunk_size(h, c);
   1f870:	4621      	mov	r1, r4
   1f872:	4628      	mov	r0, r5
   1f874:	f7ff ff94 	bl	1f7a0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f878:	463b      	mov	r3, r7
   1f87a:	1821      	adds	r1, r4, r0
   1f87c:	2200      	movs	r2, #0
   1f87e:	4628      	mov	r0, r5
}
   1f880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f884:	f7ff bf81 	b.w	1f78a <chunk_set>

0001f888 <free_list_remove_bidx>:
{
   1f888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f88c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1f88e:	2203      	movs	r2, #3
   1f890:	460e      	mov	r6, r1
   1f892:	4604      	mov	r4, r0
   1f894:	f7ff ff6e 	bl	1f774 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1f898:	4286      	cmp	r6, r0
   1f89a:	4605      	mov	r5, r0
   1f89c:	f107 0804 	add.w	r8, r7, #4
   1f8a0:	d10b      	bne.n	1f8ba <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1f8a2:	2301      	movs	r3, #1
   1f8a4:	fa03 f707 	lsl.w	r7, r3, r7
   1f8a8:	68e3      	ldr	r3, [r4, #12]
   1f8aa:	ea23 0307 	bic.w	r3, r3, r7
   1f8ae:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1f8b0:	2300      	movs	r3, #0
   1f8b2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1f8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1f8ba:	4631      	mov	r1, r6
   1f8bc:	2202      	movs	r2, #2
   1f8be:	4620      	mov	r0, r4
   1f8c0:	f7ff ff58 	bl	1f774 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1f8c4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1f8c6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1f8c8:	4601      	mov	r1, r0
		b->next = second;
   1f8ca:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1f8ce:	4620      	mov	r0, r4
   1f8d0:	2203      	movs	r2, #3
   1f8d2:	f7ff ff5a 	bl	1f78a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1f8d6:	4633      	mov	r3, r6
   1f8d8:	4629      	mov	r1, r5
   1f8da:	4620      	mov	r0, r4
   1f8dc:	2202      	movs	r2, #2
}
   1f8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f8e2:	f7ff bf52 	b.w	1f78a <chunk_set>

0001f8e6 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1f8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f8ea:	4604      	mov	r4, r0
   1f8ec:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1f8ee:	f7ff ff79 	bl	1f7e4 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1f8f2:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1f8f4:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1f8f6:	4620      	mov	r0, r4
   1f8f8:	f7ff ff74 	bl	1f7e4 <bucket_idx>
   1f8fc:	42a8      	cmp	r0, r5
   1f8fe:	da03      	bge.n	1f908 <alloc_chunk+0x22>
		return 0;
   1f900:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1f902:	4630      	mov	r0, r6
   1f904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1f908:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1f90c:	f8da 9010 	ldr.w	r9, [sl, #16]
   1f910:	f1b9 0f00 	cmp.w	r9, #0
   1f914:	d019      	beq.n	1f94a <alloc_chunk+0x64>
   1f916:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1f918:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1f91c:	4620      	mov	r0, r4
   1f91e:	4631      	mov	r1, r6
   1f920:	f7ff ff3e 	bl	1f7a0 <chunk_size>
   1f924:	4540      	cmp	r0, r8
   1f926:	d305      	bcc.n	1f934 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1f928:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1f92a:	4631      	mov	r1, r6
   1f92c:	4620      	mov	r0, r4
   1f92e:	f7ff ffab 	bl	1f888 <free_list_remove_bidx>
		return c;
   1f932:	e7e6      	b.n	1f902 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1f934:	2203      	movs	r2, #3
   1f936:	4631      	mov	r1, r6
   1f938:	4620      	mov	r0, r4
   1f93a:	f7ff ff1b 	bl	1f774 <chunk_field>
		} while (--i && b->next != first);
   1f93e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1f940:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1f944:	d001      	beq.n	1f94a <alloc_chunk+0x64>
   1f946:	4581      	cmp	r9, r0
   1f948:	d1e6      	bne.n	1f918 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1f94a:	68e3      	ldr	r3, [r4, #12]
   1f94c:	3501      	adds	r5, #1
   1f94e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f952:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1f954:	401a      	ands	r2, r3
   1f956:	d0d3      	beq.n	1f900 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1f958:	fa92 f2a2 	rbit	r2, r2
   1f95c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1f960:	1d13      	adds	r3, r2, #4
   1f962:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1f966:	e7e0      	b.n	1f92a <alloc_chunk+0x44>

0001f968 <free_list_add>:
{
   1f968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f96c:	4604      	mov	r4, r0
   1f96e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1f970:	f7ff ff16 	bl	1f7a0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1f974:	68a3      	ldr	r3, [r4, #8]
   1f976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f97a:	4601      	mov	r1, r0
   1f97c:	d301      	bcc.n	1f982 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1f97e:	2801      	cmp	r0, #1
   1f980:	d035      	beq.n	1f9ee <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f982:	4620      	mov	r0, r4
   1f984:	f7ff ff2e 	bl	1f7e4 <bucket_idx>
	if (b->next == 0U) {
   1f988:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1f98c:	6916      	ldr	r6, [r2, #16]
   1f98e:	b99e      	cbnz	r6, 1f9b8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1f990:	2301      	movs	r3, #1
   1f992:	fa03 f000 	lsl.w	r0, r3, r0
   1f996:	68e3      	ldr	r3, [r4, #12]
   1f998:	4303      	orrs	r3, r0
   1f99a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1f99c:	4629      	mov	r1, r5
		b->next = c;
   1f99e:	6115      	str	r5, [r2, #16]
   1f9a0:	462b      	mov	r3, r5
   1f9a2:	2202      	movs	r2, #2
   1f9a4:	4620      	mov	r0, r4
   1f9a6:	f7ff fef0 	bl	1f78a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1f9aa:	2203      	movs	r2, #3
   1f9ac:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1f9ae:	4620      	mov	r0, r4
}
   1f9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f9b4:	f7ff bee9 	b.w	1f78a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1f9b8:	2202      	movs	r2, #2
   1f9ba:	4631      	mov	r1, r6
   1f9bc:	4620      	mov	r0, r4
   1f9be:	f7ff fed9 	bl	1f774 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1f9c2:	2202      	movs	r2, #2
   1f9c4:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1f9c6:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1f9c8:	4629      	mov	r1, r5
   1f9ca:	4620      	mov	r0, r4
   1f9cc:	f7ff fedd 	bl	1f78a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1f9d0:	4633      	mov	r3, r6
   1f9d2:	2203      	movs	r2, #3
   1f9d4:	4629      	mov	r1, r5
   1f9d6:	4620      	mov	r0, r4
   1f9d8:	f7ff fed7 	bl	1f78a <chunk_set>
   1f9dc:	2203      	movs	r2, #3
   1f9de:	4639      	mov	r1, r7
   1f9e0:	462b      	mov	r3, r5
   1f9e2:	4620      	mov	r0, r4
   1f9e4:	f7ff fed1 	bl	1f78a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1f9e8:	2202      	movs	r2, #2
   1f9ea:	4631      	mov	r1, r6
   1f9ec:	e7df      	b.n	1f9ae <free_list_add+0x46>
   1f9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f9f2 <free_list_remove>:
{
   1f9f2:	b538      	push	{r3, r4, r5, lr}
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1f9f8:	f7ff fed2 	bl	1f7a0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1f9fc:	68a3      	ldr	r3, [r4, #8]
   1f9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fa02:	4601      	mov	r1, r0
   1fa04:	d301      	bcc.n	1fa0a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1fa06:	2801      	cmp	r0, #1
   1fa08:	d009      	beq.n	1fa1e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fa0a:	4620      	mov	r0, r4
   1fa0c:	f7ff feea 	bl	1f7e4 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1fa10:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fa12:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fa14:	4620      	mov	r0, r4
}
   1fa16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1fa1a:	f7ff bf35 	b.w	1f888 <free_list_remove_bidx>
}
   1fa1e:	bd38      	pop	{r3, r4, r5, pc}

0001fa20 <free_chunk>:
{
   1fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa22:	460c      	mov	r4, r1
   1fa24:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fa26:	f7ff febb 	bl	1f7a0 <chunk_size>
   1fa2a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fa2c:	2201      	movs	r2, #1
   1fa2e:	4631      	mov	r1, r6
   1fa30:	4628      	mov	r0, r5
   1fa32:	f7ff fe9f 	bl	1f774 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1fa36:	07c3      	lsls	r3, r0, #31
   1fa38:	d40c      	bmi.n	1fa54 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1fa3a:	4631      	mov	r1, r6
   1fa3c:	4628      	mov	r0, r5
   1fa3e:	f7ff ffd8 	bl	1f9f2 <free_list_remove>
	return c + chunk_size(h, c);
   1fa42:	4621      	mov	r1, r4
   1fa44:	4628      	mov	r0, r5
   1fa46:	f7ff feab 	bl	1f7a0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fa4a:	4621      	mov	r1, r4
   1fa4c:	1822      	adds	r2, r4, r0
   1fa4e:	4628      	mov	r0, r5
   1fa50:	f7ff fed5 	bl	1f7fe <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fa54:	2200      	movs	r2, #0
   1fa56:	4621      	mov	r1, r4
   1fa58:	4628      	mov	r0, r5
   1fa5a:	f7ff fe8b 	bl	1f774 <chunk_field>
   1fa5e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fa60:	2201      	movs	r2, #1
   1fa62:	4639      	mov	r1, r7
   1fa64:	4628      	mov	r0, r5
   1fa66:	f7ff fe85 	bl	1f774 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1fa6a:	f010 0601 	ands.w	r6, r0, #1
   1fa6e:	d113      	bne.n	1fa98 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1fa70:	4639      	mov	r1, r7
   1fa72:	4628      	mov	r0, r5
   1fa74:	f7ff ffbd 	bl	1f9f2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fa78:	4621      	mov	r1, r4
   1fa7a:	4632      	mov	r2, r6
   1fa7c:	4628      	mov	r0, r5
   1fa7e:	f7ff fe79 	bl	1f774 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1fa82:	4622      	mov	r2, r4
   1fa84:	1a21      	subs	r1, r4, r0
   1fa86:	4628      	mov	r0, r5
   1fa88:	f7ff feb9 	bl	1f7fe <merge_chunks>
   1fa8c:	4621      	mov	r1, r4
   1fa8e:	4632      	mov	r2, r6
   1fa90:	4628      	mov	r0, r5
   1fa92:	f7ff fe6f 	bl	1f774 <chunk_field>
   1fa96:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1fa98:	4621      	mov	r1, r4
   1fa9a:	4628      	mov	r0, r5
}
   1fa9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1faa0:	f7ff bf62 	b.w	1f968 <free_list_add>

0001faa4 <sys_heap_free>:
{
   1faa4:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1faa6:	b191      	cbz	r1, 1face <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1faa8:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1faaa:	6883      	ldr	r3, [r0, #8]
   1faac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fab0:	bf2c      	ite	cs
   1fab2:	2408      	movcs	r4, #8
   1fab4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fab6:	1b0c      	subs	r4, r1, r4
   1fab8:	1a24      	subs	r4, r4, r0
   1faba:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1fabc:	4621      	mov	r1, r4
   1fabe:	2200      	movs	r2, #0
   1fac0:	f7ff fe74 	bl	1f7ac <set_chunk_used>
	free_chunk(h, c);
   1fac4:	4621      	mov	r1, r4
}
   1fac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1faca:	f7ff bfa9 	b.w	1fa20 <free_chunk>
}
   1face:	bd10      	pop	{r4, pc}

0001fad0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fad0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fad2:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fad4:	b909      	cbnz	r1, 1fada <sys_heap_alloc+0xa>
		return NULL;
   1fad6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1fad8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fada:	68ab      	ldr	r3, [r5, #8]
   1fadc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fae0:	d9f9      	bls.n	1fad6 <sys_heap_alloc+0x6>
   1fae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fae6:	bf2c      	ite	cs
   1fae8:	2208      	movcs	r2, #8
   1faea:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1faec:	1dcc      	adds	r4, r1, #7
   1faee:	4414      	add	r4, r2
   1faf0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1faf2:	4621      	mov	r1, r4
   1faf4:	4628      	mov	r0, r5
   1faf6:	f7ff fef6 	bl	1f8e6 <alloc_chunk>
	if (c == 0U) {
   1fafa:	4606      	mov	r6, r0
   1fafc:	2800      	cmp	r0, #0
   1fafe:	d0ea      	beq.n	1fad6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fb00:	4601      	mov	r1, r0
   1fb02:	4628      	mov	r0, r5
   1fb04:	f7ff fe4c 	bl	1f7a0 <chunk_size>
   1fb08:	42a0      	cmp	r0, r4
   1fb0a:	d909      	bls.n	1fb20 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1fb0c:	4434      	add	r4, r6
   1fb0e:	4631      	mov	r1, r6
   1fb10:	4628      	mov	r0, r5
   1fb12:	4622      	mov	r2, r4
   1fb14:	f7ff fe91 	bl	1f83a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fb18:	4621      	mov	r1, r4
   1fb1a:	4628      	mov	r0, r5
   1fb1c:	f7ff ff24 	bl	1f968 <free_list_add>
	set_chunk_used(h, c, true);
   1fb20:	4628      	mov	r0, r5
   1fb22:	2201      	movs	r2, #1
   1fb24:	4631      	mov	r1, r6
   1fb26:	f7ff fe41 	bl	1f7ac <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1fb2a:	68ab      	ldr	r3, [r5, #8]
   1fb2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fb30:	bf2c      	ite	cs
   1fb32:	2008      	movcs	r0, #8
   1fb34:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fb36:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1fb3a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1fb3c:	e7cc      	b.n	1fad8 <sys_heap_alloc+0x8>

0001fb3e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   1fb42:	6805      	ldr	r5, [r0, #0]
   1fb44:	68ab      	ldr	r3, [r5, #8]
   1fb46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
{
   1fb4a:	4614      	mov	r4, r2
   1fb4c:	bf2c      	ite	cs
   1fb4e:	2208      	movcs	r2, #8
   1fb50:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   1fb52:	4291      	cmp	r1, r2
{
   1fb54:	460f      	mov	r7, r1
	if (align <= chunk_header_bytes(h)) {
   1fb56:	d804      	bhi.n	1fb62 <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   1fb58:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1fb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   1fb5e:	f7ff bfb7 	b.w	1fad0 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fb62:	b91c      	cbnz	r4, 1fb6c <sys_heap_aligned_alloc+0x2e>
		return NULL;
   1fb64:	2600      	movs	r6, #0
}
   1fb66:	4630      	mov	r0, r6
   1fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fb6c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fb70:	d9f8      	bls.n	1fb64 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fb72:	1de1      	adds	r1, r4, #7
   1fb74:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fb76:	08c9      	lsrs	r1, r1, #3
   1fb78:	4628      	mov	r0, r5
   1fb7a:	f7ff feb4 	bl	1f8e6 <alloc_chunk>
	if (c0 == 0) {
   1fb7e:	4680      	mov	r8, r0
   1fb80:	2800      	cmp	r0, #0
   1fb82:	d0ef      	beq.n	1fb64 <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   1fb84:	68ab      	ldr	r3, [r5, #8]
   1fb86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fb8a:	bf2c      	ite	cs
   1fb8c:	2308      	movcs	r3, #8
   1fb8e:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fb90:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1fb94:	1e7a      	subs	r2, r7, #1
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fb96:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1fb98:	427f      	negs	r7, r7
   1fb9a:	4416      	add	r6, r2
   1fb9c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fb9e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fba0:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fba2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fba4:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fba6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fbaa:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   1fbac:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fbb0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fbb4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fbb8:	d208      	bcs.n	1fbcc <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   1fbba:	4601      	mov	r1, r0
   1fbbc:	463a      	mov	r2, r7
   1fbbe:	4628      	mov	r0, r5
   1fbc0:	f7ff fe3b 	bl	1f83a <split_chunks>
		free_list_add(h, c0);
   1fbc4:	4641      	mov	r1, r8
   1fbc6:	4628      	mov	r0, r5
   1fbc8:	f7ff fece 	bl	1f968 <free_list_add>
	return c + chunk_size(h, c);
   1fbcc:	4639      	mov	r1, r7
   1fbce:	4628      	mov	r0, r5
   1fbd0:	f7ff fde6 	bl	1f7a0 <chunk_size>
   1fbd4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fbd6:	4284      	cmp	r4, r0
   1fbd8:	d208      	bcs.n	1fbec <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   1fbda:	4639      	mov	r1, r7
   1fbdc:	4628      	mov	r0, r5
   1fbde:	4622      	mov	r2, r4
   1fbe0:	f7ff fe2b 	bl	1f83a <split_chunks>
		free_list_add(h, c_end);
   1fbe4:	4621      	mov	r1, r4
   1fbe6:	4628      	mov	r0, r5
   1fbe8:	f7ff febe 	bl	1f968 <free_list_add>
	set_chunk_used(h, c, true);
   1fbec:	2201      	movs	r2, #1
   1fbee:	4639      	mov	r1, r7
   1fbf0:	4628      	mov	r0, r5
   1fbf2:	f7ff fddb 	bl	1f7ac <set_chunk_used>
	return mem;
   1fbf6:	e7b6      	b.n	1fb66 <sys_heap_aligned_alloc+0x28>

0001fbf8 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1fbf8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1fbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbfe:	bf2c      	ite	cs
   1fc00:	2508      	movcs	r5, #8
   1fc02:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fc04:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fc06:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fc08:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fc0a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fc0e:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1fc12:	2200      	movs	r2, #0
   1fc14:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1fc16:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1fc18:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1fc1a:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1fc1c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1fc20:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fc22:	4629      	mov	r1, r5
	h->len = buf_sz;
   1fc24:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1fc26:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fc28:	4620      	mov	r0, r4
   1fc2a:	f7ff fddb 	bl	1f7e4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fc2e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fc30:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fc32:	1c41      	adds	r1, r0, #1
   1fc34:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fc36:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1fc3a:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1fc3c:	428b      	cmp	r3, r1
   1fc3e:	db29      	blt.n	1fc94 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1fc40:	4632      	mov	r2, r6
   1fc42:	4620      	mov	r0, r4
   1fc44:	2100      	movs	r1, #0
   1fc46:	f7ff fdc9 	bl	1f7dc <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1fc4a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1fc4c:	4620      	mov	r0, r4
   1fc4e:	2201      	movs	r2, #1
   1fc50:	2100      	movs	r1, #0
   1fc52:	f7ff fdab 	bl	1f7ac <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1fc56:	463a      	mov	r2, r7
   1fc58:	4631      	mov	r1, r6
   1fc5a:	f7ff fdbf 	bl	1f7dc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1fc5e:	4633      	mov	r3, r6
   1fc60:	4631      	mov	r1, r6
   1fc62:	4620      	mov	r0, r4
   1fc64:	2200      	movs	r2, #0
   1fc66:	f7ff fd90 	bl	1f78a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1fc6a:	4629      	mov	r1, r5
   1fc6c:	4620      	mov	r0, r4
   1fc6e:	2200      	movs	r2, #0
   1fc70:	f7ff fdb4 	bl	1f7dc <set_chunk_size>
   1fc74:	463b      	mov	r3, r7
   1fc76:	4629      	mov	r1, r5
   1fc78:	4620      	mov	r0, r4
   1fc7a:	2200      	movs	r2, #0
   1fc7c:	f7ff fd85 	bl	1f78a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1fc80:	4629      	mov	r1, r5
   1fc82:	4620      	mov	r0, r4
   1fc84:	2201      	movs	r2, #1
   1fc86:	f7ff fd91 	bl	1f7ac <set_chunk_used>

	free_list_add(h, chunk0_size);
   1fc8a:	4631      	mov	r1, r6
}
   1fc8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1fc90:	f7ff be6a 	b.w	1f968 <free_list_add>
		h->buckets[i].next = 0;
   1fc94:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fc98:	3301      	adds	r3, #1
   1fc9a:	e7cf      	b.n	1fc3c <sys_heap_init+0x44>

0001fc9c <encode_uint>:
{
   1fc9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fca0:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1fca2:	78d3      	ldrb	r3, [r2, #3]
{
   1fca4:	4614      	mov	r4, r2
	switch (specifier) {
   1fca6:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1fca8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1fcac:	4606      	mov	r6, r0
   1fcae:	460f      	mov	r7, r1
   1fcb0:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1fcb2:	d02d      	beq.n	1fd10 <encode_uint+0x74>
   1fcb4:	d828      	bhi.n	1fd08 <encode_uint+0x6c>
		return 16;
   1fcb6:	2b58      	cmp	r3, #88	; 0x58
   1fcb8:	bf14      	ite	ne
   1fcba:	250a      	movne	r5, #10
   1fcbc:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1fcbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1fcc2:	46aa      	mov	sl, r5
   1fcc4:	f04f 0b00 	mov.w	fp, #0
   1fcc8:	4652      	mov	r2, sl
   1fcca:	465b      	mov	r3, fp
   1fccc:	4630      	mov	r0, r6
   1fcce:	4639      	mov	r1, r7
   1fcd0:	f7e1 fa16 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fcd4:	2a09      	cmp	r2, #9
   1fcd6:	b2d3      	uxtb	r3, r2
   1fcd8:	d81f      	bhi.n	1fd1a <encode_uint+0x7e>
   1fcda:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1fcdc:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fcde:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1fce0:	bf08      	it	eq
   1fce2:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fce4:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1fce8:	d301      	bcc.n	1fcee <encode_uint+0x52>
   1fcea:	45c8      	cmp	r8, r9
   1fcec:	d812      	bhi.n	1fd14 <encode_uint+0x78>
	if (conv->flag_hash) {
   1fcee:	7823      	ldrb	r3, [r4, #0]
   1fcf0:	069b      	lsls	r3, r3, #26
   1fcf2:	d505      	bpl.n	1fd00 <encode_uint+0x64>
		if (radix == 8) {
   1fcf4:	2d08      	cmp	r5, #8
   1fcf6:	d116      	bne.n	1fd26 <encode_uint+0x8a>
			conv->altform_0 = true;
   1fcf8:	78a3      	ldrb	r3, [r4, #2]
   1fcfa:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1fcfe:	70a3      	strb	r3, [r4, #2]
}
   1fd00:	4640      	mov	r0, r8
   1fd02:	b003      	add	sp, #12
   1fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fd08:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fd0c:	2b70      	cmp	r3, #112	; 0x70
   1fd0e:	e7d3      	b.n	1fcb8 <encode_uint+0x1c>
	switch (specifier) {
   1fd10:	2508      	movs	r5, #8
   1fd12:	e7d4      	b.n	1fcbe <encode_uint+0x22>
		value /= radix;
   1fd14:	4606      	mov	r6, r0
   1fd16:	460f      	mov	r7, r1
   1fd18:	e7d6      	b.n	1fcc8 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd1a:	9a01      	ldr	r2, [sp, #4]
   1fd1c:	2a19      	cmp	r2, #25
   1fd1e:	bf94      	ite	ls
   1fd20:	3337      	addls	r3, #55	; 0x37
   1fd22:	3357      	addhi	r3, #87	; 0x57
   1fd24:	e7da      	b.n	1fcdc <encode_uint+0x40>
		} else if (radix == 16) {
   1fd26:	2d10      	cmp	r5, #16
   1fd28:	d1ea      	bne.n	1fd00 <encode_uint+0x64>
			conv->altform_0c = true;
   1fd2a:	78a3      	ldrb	r3, [r4, #2]
   1fd2c:	f043 0310 	orr.w	r3, r3, #16
   1fd30:	e7e5      	b.n	1fcfe <encode_uint+0x62>

0001fd32 <outs>:
{
   1fd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd36:	4607      	mov	r7, r0
   1fd38:	4688      	mov	r8, r1
   1fd3a:	4615      	mov	r5, r2
   1fd3c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1fd3e:	4614      	mov	r4, r2
   1fd40:	42b4      	cmp	r4, r6
   1fd42:	eba4 0005 	sub.w	r0, r4, r5
   1fd46:	d302      	bcc.n	1fd4e <outs+0x1c>
   1fd48:	b93e      	cbnz	r6, 1fd5a <outs+0x28>
   1fd4a:	7823      	ldrb	r3, [r4, #0]
   1fd4c:	b12b      	cbz	r3, 1fd5a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fd4e:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fd52:	4641      	mov	r1, r8
   1fd54:	47b8      	blx	r7
		if (rc < 0) {
   1fd56:	2800      	cmp	r0, #0
   1fd58:	daf2      	bge.n	1fd40 <outs+0xe>
}
   1fd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fd5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1fd5e:	4770      	bx	lr

0001fd60 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1fd60:	2300      	movs	r3, #0
	list->head = NULL;
   1fd62:	e9c0 3300 	strd	r3, r3, [r0]
}
   1fd66:	4770      	bx	lr

0001fd68 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1fd68:	6803      	ldr	r3, [r0, #0]
   1fd6a:	b923      	cbnz	r3, 1fd76 <log_list_add_tail+0xe>
		list->head = msg;
   1fd6c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1fd6e:	2300      	movs	r3, #0
	list->tail = msg;
   1fd70:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1fd72:	600b      	str	r3, [r1, #0]
}
   1fd74:	4770      	bx	lr
		list->tail->next = msg;
   1fd76:	6843      	ldr	r3, [r0, #4]
   1fd78:	6019      	str	r1, [r3, #0]
   1fd7a:	e7f8      	b.n	1fd6e <log_list_add_tail+0x6>

0001fd7c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1fd7c:	6800      	ldr	r0, [r0, #0]
   1fd7e:	4770      	bx	lr

0001fd80 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1fd80:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1fd82:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1fd84:	b108      	cbz	r0, 1fd8a <log_list_head_get+0xa>
		list->head = list->head->next;
   1fd86:	6802      	ldr	r2, [r0, #0]
   1fd88:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1fd8a:	4770      	bx	lr

0001fd8c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1fd8c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1fd8e:	f7f4 fead 	bl	14aec <log_msg_chunk_alloc>

	if (msg != NULL) {
   1fd92:	b118      	cbz	r0, 1fd9c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1fd94:	2301      	movs	r3, #1
   1fd96:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1fd98:	2300      	movs	r3, #0
   1fd9a:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1fd9c:	bd08      	pop	{r3, pc}

0001fd9e <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1fd9e:	f7f5 b9af 	b.w	15100 <z_timer_cycle_get_32>

0001fda2 <dummy_timestamp>:
   1fda2:	2000      	movs	r0, #0
   1fda4:	4770      	bx	lr

0001fda6 <z_log_get_s_mask>:
{
   1fda6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fda8:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1fdaa:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1fdac:	4603      	mov	r3, r0
	bool arm = false;
   1fdae:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1fdb0:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1fdb2:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fdb6:	b10c      	cbz	r4, 1fdbc <z_log_get_s_mask+0x16>
   1fdb8:	428b      	cmp	r3, r1
   1fdba:	d300      	bcc.n	1fdbe <z_log_get_s_mask+0x18>
}
   1fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1fdbe:	2c25      	cmp	r4, #37	; 0x25
   1fdc0:	d102      	bne.n	1fdc8 <z_log_get_s_mask+0x22>
			arm = !arm;
   1fdc2:	f082 0201 	eor.w	r2, r2, #1
   1fdc6:	e7f4      	b.n	1fdb2 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1fdc8:	2a00      	cmp	r2, #0
   1fdca:	d0f2      	beq.n	1fdb2 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1fdcc:	f044 0620 	orr.w	r6, r4, #32
   1fdd0:	3e61      	subs	r6, #97	; 0x61
   1fdd2:	2e19      	cmp	r6, #25
   1fdd4:	d8ed      	bhi.n	1fdb2 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1fdd6:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1fdd8:	bf04      	itt	eq
   1fdda:	fa07 f203 	lsleq.w	r2, r7, r3
   1fdde:	4310      	orreq	r0, r2
			arg++;
   1fde0:	3301      	adds	r3, #1
			arm = false;
   1fde2:	2200      	movs	r2, #0
   1fde4:	e7e5      	b.n	1fdb2 <z_log_get_s_mask+0xc>

0001fde6 <log_0>:
{
   1fde6:	b538      	push	{r3, r4, r5, lr}
   1fde8:	4605      	mov	r5, r0
   1fdea:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1fdec:	f7ff ffce 	bl	1fd8c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fdf0:	b128      	cbz	r0, 1fdfe <log_0+0x18>
		msg->str = str;
   1fdf2:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1fdf4:	4621      	mov	r1, r4
}
   1fdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1fdfa:	f7f4 bd91 	b.w	14920 <msg_finalize>
}
   1fdfe:	bd38      	pop	{r3, r4, r5, pc}

0001fe00 <log_1>:
{
   1fe00:	b570      	push	{r4, r5, r6, lr}
   1fe02:	4606      	mov	r6, r0
   1fe04:	460d      	mov	r5, r1
   1fe06:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fe08:	f7ff ffc0 	bl	1fd8c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fe0c:	b158      	cbz	r0, 1fe26 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1fe0e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1fe10:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1fe12:	2101      	movs	r1, #1
   1fe14:	f361 1207 	bfi	r2, r1, #4, #4
   1fe18:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1fe1a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1fe1c:	4621      	mov	r1, r4
}
   1fe1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1fe22:	f7f4 bd7d 	b.w	14920 <msg_finalize>
}
   1fe26:	bd70      	pop	{r4, r5, r6, pc}

0001fe28 <log_2>:
{
   1fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe2c:	4680      	mov	r8, r0
   1fe2e:	460f      	mov	r7, r1
   1fe30:	4616      	mov	r6, r2
   1fe32:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fe34:	f7ff ffaa 	bl	1fd8c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fe38:	b168      	cbz	r0, 1fe56 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1fe3a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1fe3c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1fe40:	2202      	movs	r2, #2
   1fe42:	f362 1307 	bfi	r3, r2, #4, #4
   1fe46:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1fe48:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1fe4c:	4629      	mov	r1, r5
}
   1fe4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1fe52:	f7f4 bd65 	b.w	14920 <msg_finalize>
}
   1fe56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fe5a <log_3>:
{
   1fe5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fe5e:	4680      	mov	r8, r0
   1fe60:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1fe64:	460f      	mov	r7, r1
   1fe66:	4616      	mov	r6, r2
   1fe68:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fe6a:	f7ff ff8f 	bl	1fd8c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fe6e:	b170      	cbz	r0, 1fe8e <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1fe70:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1fe72:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1fe76:	2203      	movs	r2, #3
   1fe78:	f362 1307 	bfi	r3, r2, #4, #4
   1fe7c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1fe7e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1fe82:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1fe84:	4649      	mov	r1, r9
}
   1fe86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1fe8a:	f7f4 bd49 	b.w	14920 <msg_finalize>
}
   1fe8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fe92 <log_n>:
{
   1fe92:	b510      	push	{r4, lr}
   1fe94:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1fe96:	f000 f849 	bl	1ff2c <log_msg_create_n>
		if (msg == NULL) {
   1fe9a:	b120      	cbz	r0, 1fea6 <log_n+0x14>
		msg_finalize(msg, src_level);
   1fe9c:	4621      	mov	r1, r4
}
   1fe9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1fea2:	f7f4 bd3d 	b.w	14920 <msg_finalize>
}
   1fea6:	bd10      	pop	{r4, pc}

0001fea8 <log_hexdump>:
{
   1fea8:	b510      	push	{r4, lr}
   1feaa:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1feac:	f000 f892 	bl	1ffd4 <log_msg_hexdump_create>
		if (msg == NULL) {
   1feb0:	b120      	cbz	r0, 1febc <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1feb2:	4621      	mov	r1, r4
}
   1feb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1feb8:	f7f4 bd32 	b.w	14920 <msg_finalize>
}
   1febc:	bd10      	pop	{r4, pc}

0001febe <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1febe:	7a40      	ldrb	r0, [r0, #9]
}
   1fec0:	0900      	lsrs	r0, r0, #4
   1fec2:	4770      	bx	lr

0001fec4 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1fec4:	7a43      	ldrb	r3, [r0, #9]
   1fec6:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1feca:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1fece:	d216      	bcs.n	1fefe <log_msg_arg_get+0x3a>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1fed0:	2a03      	cmp	r2, #3
   1fed2:	d803      	bhi.n	1fedc <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1fed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1fed8:	6948      	ldr	r0, [r1, #20]
   1feda:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1fedc:	2901      	cmp	r1, #1
   1fede:	d803      	bhi.n	1fee8 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1fee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1fee4:	6988      	ldr	r0, [r1, #24]
   1fee6:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1fee8:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1feea:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1feec:	2906      	cmp	r1, #6
   1feee:	d803      	bhi.n	1fef8 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1fef0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1fef4:	6848      	ldr	r0, [r1, #4]
   1fef6:	4770      	bx	lr
		cont = cont->next;
   1fef8:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1fefa:	3907      	subs	r1, #7
		cont = cont->next;
   1fefc:	e7f6      	b.n	1feec <log_msg_arg_get+0x28>
		return 0;
   1fefe:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   1ff00:	4770      	bx	lr

0001ff02 <log_msg_put>:
{
   1ff02:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ff04:	1d02      	adds	r2, r0, #4
   1ff06:	f3bf 8f5b 	dmb	ish
   1ff0a:	e852 1f00 	ldrex	r1, [r2]
   1ff0e:	3901      	subs	r1, #1
   1ff10:	e842 1c00 	strex	ip, r1, [r2]
   1ff14:	f1bc 0f00 	cmp.w	ip, #0
   1ff18:	d1f7      	bne.n	1ff0a <log_msg_put+0x8>
   1ff1a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1ff1e:	685b      	ldr	r3, [r3, #4]
   1ff20:	b90b      	cbnz	r3, 1ff26 <log_msg_put+0x24>
		msg_free(msg);
   1ff22:	f7f4 bdf7 	b.w	14b14 <msg_free>
}
   1ff26:	4770      	bx	lr

0001ff28 <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   1ff28:	6900      	ldr	r0, [r0, #16]
   1ff2a:	4770      	bx	lr

0001ff2c <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   1ff2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff30:	4681      	mov	r9, r0
   1ff32:	4688      	mov	r8, r1
   1ff34:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1ff36:	f7f4 fdd9 	bl	14aec <log_msg_chunk_alloc>
	if (msg != NULL) {
   1ff3a:	4604      	mov	r4, r0
   1ff3c:	b330      	cbz	r0, 1ff8c <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1ff3e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1ff40:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ff42:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1ff44:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ff46:	8107      	strh	r7, [r0, #8]
   1ff48:	d909      	bls.n	1ff5e <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1ff4a:	2202      	movs	r2, #2
   1ff4c:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ff4e:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1ff52:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1ff56:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1ff58:	f1ba 0f00 	cmp.w	sl, #0
   1ff5c:	dc0e      	bgt.n	1ff7c <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1ff5e:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1ff60:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1ff64:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ff68:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1ff6a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ff6c:	d818      	bhi.n	1ffa0 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1ff6e:	00aa      	lsls	r2, r5, #2
   1ff70:	4641      	mov	r1, r8
   1ff72:	f104 0014 	add.w	r0, r4, #20
   1ff76:	f000 fb5d 	bl	20634 <memcpy>
	while (nargs != 0U) {
   1ff7a:	e007      	b.n	1ff8c <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1ff7c:	f7f4 fdb6 	bl	14aec <log_msg_chunk_alloc>
		if (cont == NULL) {
   1ff80:	4606      	mov	r6, r0
   1ff82:	b930      	cbnz	r0, 1ff92 <log_msg_create_n+0x66>
			msg_free(msg);
   1ff84:	4620      	mov	r0, r4
   1ff86:	f7f4 fdc5 	bl	14b14 <msg_free>
			return NULL;
   1ff8a:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1ff8c:	4620      	mov	r0, r4
   1ff8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1ff92:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1ff96:	f1aa 0a07 	sub.w	sl, sl, #7
   1ff9a:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1ff9c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1ff9e:	e7db      	b.n	1ff58 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1ffa0:	4641      	mov	r1, r8
   1ffa2:	2208      	movs	r2, #8
   1ffa4:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1ffa8:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1ffaa:	f000 fb43 	bl	20634 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ffae:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1ffb0:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1ffb4:	2d07      	cmp	r5, #7
   1ffb6:	462e      	mov	r6, r5
   1ffb8:	bf28      	it	cs
   1ffba:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1ffbc:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1ffc0:	4641      	mov	r1, r8
   1ffc2:	1d38      	adds	r0, r7, #4
   1ffc4:	464a      	mov	r2, r9
   1ffc6:	f000 fb35 	bl	20634 <memcpy>
	while (nargs != 0U) {
   1ffca:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1ffcc:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1ffce:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1ffd0:	d1f0      	bne.n	1ffb4 <log_msg_create_n+0x88>
   1ffd2:	e7db      	b.n	1ff8c <log_msg_create_n+0x60>

0001ffd4 <log_msg_hexdump_create>:

struct log_msg *log_msg_hexdump_create(const char *str,
				       const uint8_t *data,
				       uint32_t length)
{
   1ffd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct log_msg_cont *cont;
	struct log_msg *msg;
	uint32_t chunk_length;

	/* Saturate length. */
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1ffd8:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1ffdc:	4295      	cmp	r5, r2
{
   1ffde:	4680      	mov	r8, r0
   1ffe0:	460e      	mov	r6, r1
   1ffe2:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1ffe4:	bf28      	it	cs
   1ffe6:	4615      	movcs	r5, r2
		 LOG_MSG_HEXDUMP_MAX_LENGTH : length;

	msg = (struct log_msg *)log_msg_chunk_alloc();
   1ffe8:	f7f4 fd80 	bl	14aec <log_msg_chunk_alloc>
	if (msg == NULL) {
   1ffec:	4604      	mov	r4, r0
   1ffee:	b380      	cbz	r0, 20052 <log_msg_hexdump_create+0x7e>
		return NULL;
	}

	/* all fields reset to 0, reference counter to 1 */
	msg->hdr.ref_cnt = 1;
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1fff0:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.params.hexdump.length = length;
	msg->str = str;
   1fff2:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1fff6:	2301      	movs	r3, #1
   1fff8:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1fffa:	00ab      	lsls	r3, r5, #2
   1fffc:	f043 0301 	orr.w	r3, r3, #1
   20000:	f002 0202 	and.w	r2, r2, #2
   20004:	4313      	orrs	r3, r2


	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20006:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20008:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2000a:	f100 0814 	add.w	r8, r0, #20
   2000e:	d917      	bls.n	20040 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   20010:	2208      	movs	r2, #8
   20012:	4631      	mov	r1, r6
   20014:	3018      	adds	r0, #24
   20016:	f000 fb0d 	bl	20634 <memcpy>
		       data,
		       LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK);
		msg->payload.ext.next = NULL;
		msg->hdr.params.generic.ext = 1;
   2001a:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   2001c:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   2001e:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   20022:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   20024:	7222      	strb	r2, [r4, #8]

		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20026:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20028:	3d08      	subs	r5, #8
		length = 0U;
	}

	prev_cont = &msg->payload.ext.next;

	while (length > 0) {
   2002a:	4699      	mov	r9, r3
   2002c:	b18d      	cbz	r5, 20052 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2002e:	f7f4 fd5d 	bl	14aec <log_msg_chunk_alloc>
		if (cont == NULL) {
   20032:	4607      	mov	r7, r0
   20034:	b980      	cbnz	r0, 20058 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   20036:	4620      	mov	r0, r4
   20038:	f7f4 fd6c 	bl	14b14 <msg_free>
			return NULL;
   2003c:	463c      	mov	r4, r7
   2003e:	e008      	b.n	20052 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   20040:	462a      	mov	r2, r5
   20042:	4631      	mov	r1, r6
   20044:	4640      	mov	r0, r8
   20046:	f000 faf5 	bl	20634 <memcpy>
		msg->hdr.params.generic.ext = 0;
   2004a:	7a23      	ldrb	r3, [r4, #8]
   2004c:	f36f 0341 	bfc	r3, #1, #1
   20050:	7223      	strb	r3, [r4, #8]
		data += chunk_length;
		length -= chunk_length;
	}

	return msg;
}
   20052:	4620      	mov	r0, r4
   20054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   20058:	2d1c      	cmp	r5, #28
   2005a:	462f      	mov	r7, r5
   2005c:	bf28      	it	cs
   2005e:	271c      	movcs	r7, #28
		*prev_cont = cont;
   20060:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20064:	4631      	mov	r1, r6
		cont->next = NULL;
   20066:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   2006a:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   2006c:	463a      	mov	r2, r7
   2006e:	3004      	adds	r0, #4
   20070:	f000 fae0 	bl	20634 <memcpy>
		data += chunk_length;
   20074:	443e      	add	r6, r7
		length -= chunk_length;
   20076:	1bed      	subs	r5, r5, r7
   20078:	e7d8      	b.n	2002c <log_msg_hexdump_create+0x58>

0002007a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2007a:	68c2      	ldr	r2, [r0, #12]
   2007c:	b2cb      	uxtb	r3, r1
   2007e:	210c      	movs	r1, #12
   20080:	fb03 2101 	mla	r1, r3, r1, r2
   20084:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   20086:	f000 0007 	and.w	r0, r0, #7
   2008a:	4770      	bx	lr

0002008c <set_off_state>:
	__asm__ volatile(
   2008c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20090:	f3ef 8211 	mrs	r2, BASEPRI
   20094:	f383 8811 	msr	BASEPRI, r3
   20098:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2009c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2009e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   200a2:	d001      	beq.n	200a8 <set_off_state+0x1c>
   200a4:	428b      	cmp	r3, r1
   200a6:	d107      	bne.n	200b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   200a8:	2301      	movs	r3, #1
   200aa:	6003      	str	r3, [r0, #0]
	int err = 0;
   200ac:	2000      	movs	r0, #0
	__asm__ volatile(
   200ae:	f382 8811 	msr	BASEPRI, r2
   200b2:	f3bf 8f6f 	isb	sy
}
   200b6:	4770      	bx	lr
		err = -EPERM;
   200b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   200bc:	e7f7      	b.n	200ae <set_off_state+0x22>

000200be <set_starting_state>:
{
   200be:	b510      	push	{r4, lr}
	__asm__ volatile(
   200c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   200c4:	f3ef 8211 	mrs	r2, BASEPRI
   200c8:	f383 8811 	msr	BASEPRI, r3
   200cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   200d0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   200d2:	f003 0407 	and.w	r4, r3, #7
   200d6:	2c01      	cmp	r4, #1
   200d8:	d106      	bne.n	200e8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   200da:	6001      	str	r1, [r0, #0]
	int err = 0;
   200dc:	2000      	movs	r0, #0
	__asm__ volatile(
   200de:	f382 8811 	msr	BASEPRI, r2
   200e2:	f3bf 8f6f 	isb	sy
}
   200e6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   200e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   200ec:	428b      	cmp	r3, r1
		err = -EALREADY;
   200ee:	bf14      	ite	ne
   200f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   200f4:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   200f8:	e7f1      	b.n	200de <set_starting_state+0x20>

000200fa <set_on_state>:
	__asm__ volatile(
   200fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   200fe:	f3ef 8211 	mrs	r2, BASEPRI
   20102:	f383 8811 	msr	BASEPRI, r3
   20106:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2010a:	6803      	ldr	r3, [r0, #0]
   2010c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20110:	f043 0302 	orr.w	r3, r3, #2
   20114:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   20116:	f382 8811 	msr	BASEPRI, r2
   2011a:	f3bf 8f6f 	isb	sy
}
   2011e:	4770      	bx	lr

00020120 <onoff_started_callback>:
	return &data->mgr[type];
   20120:	68c0      	ldr	r0, [r0, #12]
{
   20122:	b410      	push	{r4}
	return &data->mgr[type];
   20124:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   20126:	241c      	movs	r4, #28
   20128:	fb03 0004 	mla	r0, r3, r4, r0
   2012c:	2100      	movs	r1, #0
}
   2012e:	bc10      	pop	{r4}
	notify(mgr, 0);
   20130:	4710      	bx	r2

00020132 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20132:	2000      	movs	r0, #0
   20134:	f7fc b99a 	b.w	1c46c <nrfx_clock_start>

00020138 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20138:	2000      	movs	r0, #0
   2013a:	f001 beb5 	b.w	21ea8 <nrfx_clock_stop>

0002013e <blocking_start_callback>:
{
   2013e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20140:	f7fd bece 	b.w	1dee0 <z_impl_k_sem_give>

00020144 <api_stop>:
{
   20144:	b538      	push	{r3, r4, r5, lr}
   20146:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   20148:	240c      	movs	r4, #12
   2014a:	434c      	muls	r4, r1
{
   2014c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2014e:	68c0      	ldr	r0, [r0, #12]
   20150:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20154:	2180      	movs	r1, #128	; 0x80
   20156:	4418      	add	r0, r3
   20158:	f7ff ff98 	bl	2008c <set_off_state>
	if (err < 0) {
   2015c:	2800      	cmp	r0, #0
   2015e:	db04      	blt.n	2016a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   20160:	6869      	ldr	r1, [r5, #4]
   20162:	440c      	add	r4, r1
   20164:	6863      	ldr	r3, [r4, #4]
   20166:	4798      	blx	r3
	return 0;
   20168:	2000      	movs	r0, #0
}
   2016a:	bd38      	pop	{r3, r4, r5, pc}

0002016c <api_start>:
{
   2016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20170:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   20172:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20174:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   20176:	434c      	muls	r4, r1
{
   20178:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2017a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2017e:	2180      	movs	r1, #128	; 0x80
   20180:	4428      	add	r0, r5
{
   20182:	4690      	mov	r8, r2
   20184:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   20186:	f7ff ff9a 	bl	200be <set_starting_state>
	if (err < 0) {
   2018a:	2800      	cmp	r0, #0
   2018c:	db06      	blt.n	2019c <api_start+0x30>
	subdata->cb = cb;
   2018e:	4425      	add	r5, r4
	subdata->user_data = user_data;
   20190:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   20194:	6873      	ldr	r3, [r6, #4]
   20196:	591b      	ldr	r3, [r3, r4]
   20198:	4798      	blx	r3
	return 0;
   2019a:	2000      	movs	r0, #0
}
   2019c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000201a0 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   201a0:	4770      	bx	lr

000201a2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   201a2:	4770      	bx	lr

000201a4 <sys_clock_disable>:
   201a4:	4770      	bx	lr

000201a6 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   201a6:	2000      	movs	r0, #0
   201a8:	f7f4 bd0a 	b.w	14bc0 <sys_reboot>

000201ac <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   201ac:	b538      	push	{r3, r4, r5, lr}
   201ae:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   201b0:	42ab      	cmp	r3, r5
{
   201b2:	4611      	mov	r1, r2
   201b4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   201b6:	d804      	bhi.n	201c2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   201b8:	461a      	mov	r2, r3
   201ba:	f000 fa3b 	bl	20634 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   201be:	4620      	mov	r0, r4
   201c0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   201c2:	2400      	movs	r4, #0
   201c4:	e7fb      	b.n	201be <_copy+0x12>

000201c6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   201c6:	f000 ba60 	b.w	2068a <memset>

000201ca <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   201ca:	09c3      	lsrs	r3, r0, #7
   201cc:	005a      	lsls	r2, r3, #1
   201ce:	4413      	add	r3, r2
   201d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   201d4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   201d8:	b2c0      	uxtb	r0, r0
   201da:	4770      	bx	lr

000201dc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   201dc:	78cb      	ldrb	r3, [r1, #3]
   201de:	7802      	ldrb	r2, [r0, #0]
   201e0:	4053      	eors	r3, r2
   201e2:	7003      	strb	r3, [r0, #0]
   201e4:	884b      	ldrh	r3, [r1, #2]
   201e6:	7842      	ldrb	r2, [r0, #1]
   201e8:	4053      	eors	r3, r2
   201ea:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   201ec:	680a      	ldr	r2, [r1, #0]
   201ee:	7883      	ldrb	r3, [r0, #2]
   201f0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   201f4:	7083      	strb	r3, [r0, #2]
   201f6:	680a      	ldr	r2, [r1, #0]
   201f8:	78c3      	ldrb	r3, [r0, #3]
   201fa:	4053      	eors	r3, r2
   201fc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   201fe:	79cb      	ldrb	r3, [r1, #7]
   20200:	7902      	ldrb	r2, [r0, #4]
   20202:	4053      	eors	r3, r2
   20204:	7103      	strb	r3, [r0, #4]
   20206:	88cb      	ldrh	r3, [r1, #6]
   20208:	7942      	ldrb	r2, [r0, #5]
   2020a:	4053      	eors	r3, r2
   2020c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2020e:	684a      	ldr	r2, [r1, #4]
   20210:	7983      	ldrb	r3, [r0, #6]
   20212:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20216:	7183      	strb	r3, [r0, #6]
   20218:	684a      	ldr	r2, [r1, #4]
   2021a:	79c3      	ldrb	r3, [r0, #7]
   2021c:	4053      	eors	r3, r2
   2021e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20220:	7acb      	ldrb	r3, [r1, #11]
   20222:	7a02      	ldrb	r2, [r0, #8]
   20224:	4053      	eors	r3, r2
   20226:	7203      	strb	r3, [r0, #8]
   20228:	7a42      	ldrb	r2, [r0, #9]
   2022a:	894b      	ldrh	r3, [r1, #10]
   2022c:	4053      	eors	r3, r2
   2022e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20230:	688a      	ldr	r2, [r1, #8]
   20232:	7a83      	ldrb	r3, [r0, #10]
   20234:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20238:	7283      	strb	r3, [r0, #10]
   2023a:	688a      	ldr	r2, [r1, #8]
   2023c:	7ac3      	ldrb	r3, [r0, #11]
   2023e:	4053      	eors	r3, r2
   20240:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   20242:	7bcb      	ldrb	r3, [r1, #15]
   20244:	7b02      	ldrb	r2, [r0, #12]
   20246:	4053      	eors	r3, r2
   20248:	7303      	strb	r3, [r0, #12]
   2024a:	89cb      	ldrh	r3, [r1, #14]
   2024c:	7b42      	ldrb	r2, [r0, #13]
   2024e:	4053      	eors	r3, r2
   20250:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   20252:	68ca      	ldr	r2, [r1, #12]
   20254:	7b83      	ldrb	r3, [r0, #14]
   20256:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2025a:	7383      	strb	r3, [r0, #14]
   2025c:	68ca      	ldr	r2, [r1, #12]
   2025e:	7bc3      	ldrb	r3, [r0, #15]
   20260:	4053      	eors	r3, r2
   20262:	73c3      	strb	r3, [r0, #15]
}
   20264:	4770      	bx	lr

00020266 <shift_rows>:
{
   20266:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20268:	7802      	ldrb	r2, [r0, #0]
   2026a:	f88d 2000 	strb.w	r2, [sp]
   2026e:	7942      	ldrb	r2, [r0, #5]
   20270:	f88d 2001 	strb.w	r2, [sp, #1]
   20274:	7a82      	ldrb	r2, [r0, #10]
   20276:	f88d 2002 	strb.w	r2, [sp, #2]
   2027a:	7bc2      	ldrb	r2, [r0, #15]
   2027c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   20280:	7902      	ldrb	r2, [r0, #4]
   20282:	f88d 2004 	strb.w	r2, [sp, #4]
   20286:	7a42      	ldrb	r2, [r0, #9]
   20288:	f88d 2005 	strb.w	r2, [sp, #5]
   2028c:	7b82      	ldrb	r2, [r0, #14]
   2028e:	f88d 2006 	strb.w	r2, [sp, #6]
   20292:	78c2      	ldrb	r2, [r0, #3]
   20294:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20298:	7a02      	ldrb	r2, [r0, #8]
   2029a:	f88d 2008 	strb.w	r2, [sp, #8]
   2029e:	7b42      	ldrb	r2, [r0, #13]
   202a0:	f88d 2009 	strb.w	r2, [sp, #9]
   202a4:	7882      	ldrb	r2, [r0, #2]
   202a6:	f88d 200a 	strb.w	r2, [sp, #10]
   202aa:	79c2      	ldrb	r2, [r0, #7]
   202ac:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   202b0:	7b02      	ldrb	r2, [r0, #12]
   202b2:	f88d 200c 	strb.w	r2, [sp, #12]
   202b6:	7842      	ldrb	r2, [r0, #1]
   202b8:	7ac3      	ldrb	r3, [r0, #11]
   202ba:	f88d 200d 	strb.w	r2, [sp, #13]
   202be:	7982      	ldrb	r2, [r0, #6]
   202c0:	f88d 200e 	strb.w	r2, [sp, #14]
   202c4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   202c8:	2310      	movs	r3, #16
   202ca:	466a      	mov	r2, sp
   202cc:	4619      	mov	r1, r3
   202ce:	f7ff ff6d 	bl	201ac <_copy>
}
   202d2:	b005      	add	sp, #20
   202d4:	f85d fb04 	ldr.w	pc, [sp], #4

000202d8 <mult_row_column>:
{
   202d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202da:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   202dc:	7808      	ldrb	r0, [r1, #0]
{
   202de:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   202e0:	f7ff ff73 	bl	201ca <_double_byte>
   202e4:	4605      	mov	r5, r0
   202e6:	7860      	ldrb	r0, [r4, #1]
   202e8:	f7ff ff6f 	bl	201ca <_double_byte>
   202ec:	78a2      	ldrb	r2, [r4, #2]
   202ee:	7863      	ldrb	r3, [r4, #1]
   202f0:	4053      	eors	r3, r2
   202f2:	78e2      	ldrb	r2, [r4, #3]
   202f4:	4053      	eors	r3, r2
   202f6:	405d      	eors	r5, r3
   202f8:	4045      	eors	r5, r0
   202fa:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   202fc:	7860      	ldrb	r0, [r4, #1]
   202fe:	7827      	ldrb	r7, [r4, #0]
   20300:	f7ff ff63 	bl	201ca <_double_byte>
   20304:	4605      	mov	r5, r0
   20306:	78a0      	ldrb	r0, [r4, #2]
   20308:	f7ff ff5f 	bl	201ca <_double_byte>
   2030c:	78a3      	ldrb	r3, [r4, #2]
   2030e:	405f      	eors	r7, r3
   20310:	78e3      	ldrb	r3, [r4, #3]
   20312:	405f      	eors	r7, r3
   20314:	407d      	eors	r5, r7
   20316:	4045      	eors	r5, r0
   20318:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2031a:	78a0      	ldrb	r0, [r4, #2]
   2031c:	7865      	ldrb	r5, [r4, #1]
   2031e:	7827      	ldrb	r7, [r4, #0]
   20320:	f7ff ff53 	bl	201ca <_double_byte>
   20324:	406f      	eors	r7, r5
   20326:	4605      	mov	r5, r0
   20328:	78e0      	ldrb	r0, [r4, #3]
   2032a:	f7ff ff4e 	bl	201ca <_double_byte>
   2032e:	78e3      	ldrb	r3, [r4, #3]
   20330:	405f      	eors	r7, r3
   20332:	407d      	eors	r5, r7
   20334:	4045      	eors	r5, r0
   20336:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20338:	7820      	ldrb	r0, [r4, #0]
   2033a:	f7ff ff46 	bl	201ca <_double_byte>
   2033e:	7863      	ldrb	r3, [r4, #1]
   20340:	7825      	ldrb	r5, [r4, #0]
   20342:	405d      	eors	r5, r3
   20344:	78a3      	ldrb	r3, [r4, #2]
   20346:	405d      	eors	r5, r3
   20348:	4045      	eors	r5, r0
   2034a:	78e0      	ldrb	r0, [r4, #3]
   2034c:	f7ff ff3d 	bl	201ca <_double_byte>
   20350:	b2ed      	uxtb	r5, r5
   20352:	4045      	eors	r5, r0
   20354:	70f5      	strb	r5, [r6, #3]
}
   20356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020358 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20358:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2035a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2035c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2035e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20362:	2b00      	cmp	r3, #0
   20364:	bfb4      	ite	lt
   20366:	2387      	movlt	r3, #135	; 0x87
   20368:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2036a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2036e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   20372:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20374:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20378:	d002      	beq.n	20380 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2037a:	7813      	ldrb	r3, [r2, #0]
   2037c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2037e:	e7f4      	b.n	2036a <gf_double+0x12>
	}
}
   20380:	bd10      	pop	{r4, pc}

00020382 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   20382:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20384:	b120      	cbz	r0, 20390 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20386:	2258      	movs	r2, #88	; 0x58
   20388:	2100      	movs	r1, #0
   2038a:	f7ff ff1c 	bl	201c6 <_set>
   2038e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   20390:	bd08      	pop	{r3, pc}

00020392 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   20392:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20394:	4604      	mov	r4, r0
   20396:	b188      	cbz	r0, 203bc <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20398:	2210      	movs	r2, #16
   2039a:	2100      	movs	r1, #0
   2039c:	f7ff ff13 	bl	201c6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   203a0:	2210      	movs	r2, #16
   203a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   203a6:	2100      	movs	r1, #0
   203a8:	f7ff ff0d 	bl	201c6 <_set>
	s->leftover_offset = 0;
   203ac:	2300      	movs	r3, #0
   203ae:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   203b0:	2200      	movs	r2, #0
   203b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   203b6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   203ba:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   203bc:	bd10      	pop	{r4, pc}

000203be <tc_cmac_setup>:
{
   203be:	b570      	push	{r4, r5, r6, lr}
   203c0:	460d      	mov	r5, r1
   203c2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   203c4:	4604      	mov	r4, r0
   203c6:	b310      	cbz	r0, 2040e <tc_cmac_setup+0x50>
   203c8:	b311      	cbz	r1, 20410 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   203ca:	2258      	movs	r2, #88	; 0x58
   203cc:	2100      	movs	r1, #0
   203ce:	f7ff fefa 	bl	201c6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   203d2:	4629      	mov	r1, r5
	s->sched = sched;
   203d4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   203d6:	4630      	mov	r0, r6
   203d8:	f7f4 ff76 	bl	152c8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   203dc:	2210      	movs	r2, #16
   203de:	2100      	movs	r1, #0
   203e0:	4620      	mov	r0, r4
   203e2:	f7ff fef0 	bl	201c6 <_set>
	gf_double (s->K1, s->iv);
   203e6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   203ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   203ec:	4621      	mov	r1, r4
   203ee:	4620      	mov	r0, r4
   203f0:	f7f4 ffbc 	bl	1536c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   203f4:	4621      	mov	r1, r4
   203f6:	4628      	mov	r0, r5
   203f8:	f7ff ffae 	bl	20358 <gf_double>
	gf_double (s->K2, s->K1);
   203fc:	4629      	mov	r1, r5
   203fe:	f104 0020 	add.w	r0, r4, #32
   20402:	f7ff ffa9 	bl	20358 <gf_double>
	tc_cmac_init(s);
   20406:	4620      	mov	r0, r4
   20408:	f7ff ffc3 	bl	20392 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2040c:	2001      	movs	r0, #1
}
   2040e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20410:	4608      	mov	r0, r1
   20412:	e7fc      	b.n	2040e <tc_cmac_setup+0x50>

00020414 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20418:	460d      	mov	r5, r1
   2041a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2041c:	4604      	mov	r4, r0
   2041e:	2800      	cmp	r0, #0
   20420:	d062      	beq.n	204e8 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20422:	b912      	cbnz	r2, 2042a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20424:	2001      	movs	r0, #1
}
   20426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2042a:	2900      	cmp	r1, #0
   2042c:	d05c      	beq.n	204e8 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2042e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20432:	ea50 0301 	orrs.w	r3, r0, r1
   20436:	d057      	beq.n	204e8 <tc_cmac_update+0xd4>
	s->countdown--;
   20438:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   2043c:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   20440:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   20444:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20448:	f1b8 0f00 	cmp.w	r8, #0
   2044c:	d02a      	beq.n	204a4 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2044e:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20452:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20456:	42be      	cmp	r6, r7
   20458:	4420      	add	r0, r4
   2045a:	d208      	bcs.n	2046e <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2045c:	462a      	mov	r2, r5
   2045e:	4633      	mov	r3, r6
   20460:	4631      	mov	r1, r6
   20462:	f7ff fea3 	bl	201ac <_copy>
			s->leftover_offset += data_length;
   20466:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20468:	4432      	add	r2, r6
   2046a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2046c:	e7da      	b.n	20424 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2046e:	463b      	mov	r3, r7
   20470:	462a      	mov	r2, r5
   20472:	4639      	mov	r1, r7
   20474:	f7ff fe9a 	bl	201ac <_copy>
		data_length -= remaining_space;
   20478:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2047a:	2300      	movs	r3, #0
   2047c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2047e:	4446      	add	r6, r8
		data += remaining_space;
   20480:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20482:	1e63      	subs	r3, r4, #1
   20484:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20488:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2048c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20490:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   20492:	ea82 0200 	eor.w	r2, r2, r0
   20496:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20498:	d1f6      	bne.n	20488 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2049a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2049c:	4621      	mov	r1, r4
   2049e:	4620      	mov	r0, r4
   204a0:	f7f4 ff64 	bl	1536c <tc_aes_encrypt>
   204a4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   204a8:	2e10      	cmp	r6, #16
   204aa:	d80a      	bhi.n	204c2 <tc_cmac_update+0xae>
	if (data_length > 0) {
   204ac:	2e00      	cmp	r6, #0
   204ae:	d0b9      	beq.n	20424 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   204b0:	4633      	mov	r3, r6
   204b2:	462a      	mov	r2, r5
   204b4:	4631      	mov	r1, r6
   204b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   204ba:	f7ff fe77 	bl	201ac <_copy>
		s->leftover_offset = data_length;
   204be:	6466      	str	r6, [r4, #68]	; 0x44
   204c0:	e7b0      	b.n	20424 <tc_cmac_update+0x10>
   204c2:	1e63      	subs	r3, r4, #1
   204c4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   204c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   204ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204ce:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   204d0:	ea82 0200 	eor.w	r2, r2, r0
   204d4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204d6:	d1f6      	bne.n	204c6 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   204d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   204da:	4621      	mov	r1, r4
   204dc:	4620      	mov	r0, r4
   204de:	f7f4 ff45 	bl	1536c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   204e2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   204e4:	3e10      	subs	r6, #16
   204e6:	e7df      	b.n	204a8 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   204e8:	2000      	movs	r0, #0
   204ea:	e79c      	b.n	20426 <tc_cmac_update+0x12>

000204ec <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   204ec:	b570      	push	{r4, r5, r6, lr}
   204ee:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   204f0:	4605      	mov	r5, r0
   204f2:	b1e8      	cbz	r0, 20530 <tc_cmac_final+0x44>
   204f4:	b369      	cbz	r1, 20552 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   204f6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   204f8:	2a10      	cmp	r2, #16
   204fa:	d11a      	bne.n	20532 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   204fc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204fe:	1e63      	subs	r3, r4, #1
   20500:	3901      	subs	r1, #1
   20502:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20506:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2050a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2050e:	4072      	eors	r2, r6
   20510:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20514:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20516:	ea82 0206 	eor.w	r2, r2, r6
   2051a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2051c:	d1f3      	bne.n	20506 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2051e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20520:	4621      	mov	r1, r4
   20522:	4628      	mov	r0, r5
   20524:	f7f4 ff22 	bl	1536c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20528:	4620      	mov	r0, r4
   2052a:	f7ff ff2a 	bl	20382 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2052e:	2001      	movs	r0, #1
}
   20530:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20532:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20536:	2100      	movs	r1, #0
   20538:	f1c2 0210 	rsb	r2, r2, #16
   2053c:	4420      	add	r0, r4
   2053e:	f7ff fe42 	bl	201c6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20542:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20544:	4423      	add	r3, r4
   20546:	2280      	movs	r2, #128	; 0x80
   20548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2054c:	f104 0120 	add.w	r1, r4, #32
   20550:	e7d5      	b.n	204fe <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20552:	4608      	mov	r0, r1
   20554:	e7ec      	b.n	20530 <tc_cmac_final+0x44>

00020556 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20556:	2100      	movs	r1, #0
   20558:	2001      	movs	r0, #1
   2055a:	f7f5 b86d 	b.w	15638 <z_arm_fatal_error>

0002055e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2055e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   20560:	6800      	ldr	r0, [r0, #0]
   20562:	f7f5 b869 	b.w	15638 <z_arm_fatal_error>

00020566 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   20566:	b508      	push	{r3, lr}
	handler();
   20568:	f7f5 f89e 	bl	156a8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2056c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   20570:	f7f5 bb24 	b.w	15bbc <z_arm_exc_exit>

00020574 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   20574:	3901      	subs	r1, #1
   20576:	4603      	mov	r3, r0
   20578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2057c:	b90a      	cbnz	r2, 20582 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2057e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   20580:	4770      	bx	lr
		*d = *s;
   20582:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   20586:	e7f7      	b.n	20578 <strcpy+0x4>

00020588 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   20588:	b570      	push	{r4, r5, r6, lr}
   2058a:	3901      	subs	r1, #1
   2058c:	4605      	mov	r5, r0
   2058e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   20590:	b142      	cbz	r2, 205a4 <strncpy+0x1c>
   20592:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   20596:	1e56      	subs	r6, r2, #1
   20598:	b92b      	cbnz	r3, 205a6 <strncpy+0x1e>
   2059a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2059c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   205a0:	42a2      	cmp	r2, r4
   205a2:	d1fb      	bne.n	2059c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   205a4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   205a6:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   205aa:	4632      	mov	r2, r6
   205ac:	e7ef      	b.n	2058e <strncpy+0x6>

000205ae <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   205ae:	4603      	mov	r3, r0
	size_t n = 0;
   205b0:	2000      	movs	r0, #0

	while (*s != '\0') {
   205b2:	5c1a      	ldrb	r2, [r3, r0]
   205b4:	b902      	cbnz	r2, 205b8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   205b6:	4770      	bx	lr
		n++;
   205b8:	3001      	adds	r0, #1
   205ba:	e7fa      	b.n	205b2 <strlen+0x4>

000205bc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   205bc:	4603      	mov	r3, r0
	size_t n = 0;
   205be:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   205c0:	5c1a      	ldrb	r2, [r3, r0]
   205c2:	b10a      	cbz	r2, 205c8 <strnlen+0xc>
   205c4:	4288      	cmp	r0, r1
   205c6:	d100      	bne.n	205ca <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   205c8:	4770      	bx	lr
		n++;
   205ca:	3001      	adds	r0, #1
   205cc:	e7f8      	b.n	205c0 <strnlen+0x4>

000205ce <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   205ce:	1e43      	subs	r3, r0, #1
   205d0:	3901      	subs	r1, #1
   205d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   205d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   205da:	4282      	cmp	r2, r0
   205dc:	d101      	bne.n	205e2 <strcmp+0x14>
   205de:	2a00      	cmp	r2, #0
   205e0:	d1f7      	bne.n	205d2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   205e2:	1a10      	subs	r0, r2, r0
   205e4:	4770      	bx	lr

000205e6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   205e6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   205e8:	b15a      	cbz	r2, 20602 <memcmp+0x1c>
   205ea:	3901      	subs	r1, #1
   205ec:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   205ee:	f810 2b01 	ldrb.w	r2, [r0], #1
   205f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   205f6:	42a0      	cmp	r0, r4
   205f8:	d001      	beq.n	205fe <memcmp+0x18>
   205fa:	429a      	cmp	r2, r3
   205fc:	d0f7      	beq.n	205ee <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   205fe:	1ad0      	subs	r0, r2, r3
}
   20600:	bd10      	pop	{r4, pc}
		return 0;
   20602:	4610      	mov	r0, r2
   20604:	e7fc      	b.n	20600 <memcmp+0x1a>

00020606 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   20606:	1a43      	subs	r3, r0, r1
   20608:	4293      	cmp	r3, r2
{
   2060a:	b510      	push	{r4, lr}
   2060c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   20610:	d308      	bcc.n	20624 <memmove+0x1e>
   20612:	3901      	subs	r1, #1
	char *dest = d;
   20614:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   20616:	429a      	cmp	r2, r3
   20618:	d00b      	beq.n	20632 <memmove+0x2c>
			*dest = *src;
   2061a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2061e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   20622:	e7f8      	b.n	20616 <memmove+0x10>
   20624:	440a      	add	r2, r1
			dest[n] = src[n];
   20626:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2062a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2062e:	428a      	cmp	r2, r1
   20630:	d1f9      	bne.n	20626 <memmove+0x20>
		}
	}

	return d;
}
   20632:	bd10      	pop	{r4, pc}

00020634 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   20634:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   20636:	ea81 0400 	eor.w	r4, r1, r0
   2063a:	07a5      	lsls	r5, r4, #30
   2063c:	4603      	mov	r3, r0
   2063e:	d00b      	beq.n	20658 <memcpy+0x24>
   20640:	3b01      	subs	r3, #1
   20642:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   20644:	4291      	cmp	r1, r2
   20646:	d11b      	bne.n	20680 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   20648:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   2064a:	2a00      	cmp	r2, #0
   2064c:	d0fc      	beq.n	20648 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   2064e:	f811 4b01 	ldrb.w	r4, [r1], #1
   20652:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   20656:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   20658:	079c      	lsls	r4, r3, #30
   2065a:	d1f6      	bne.n	2064a <memcpy+0x16>
   2065c:	f022 0403 	bic.w	r4, r2, #3
   20660:	1f1d      	subs	r5, r3, #4
   20662:	0896      	lsrs	r6, r2, #2
   20664:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   20666:	42b9      	cmp	r1, r7
   20668:	d105      	bne.n	20676 <memcpy+0x42>
   2066a:	f06f 0503 	mvn.w	r5, #3
   2066e:	fb05 2206 	mla	r2, r5, r6, r2
   20672:	4423      	add	r3, r4
   20674:	e7e4      	b.n	20640 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   20676:	f851 cb04 	ldr.w	ip, [r1], #4
   2067a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   2067e:	e7f2      	b.n	20666 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   20680:	f811 4b01 	ldrb.w	r4, [r1], #1
   20684:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   20688:	e7dc      	b.n	20644 <memcpy+0x10>

0002068a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2068a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2068c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2068e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   20690:	079c      	lsls	r4, r3, #30
   20692:	d111      	bne.n	206b8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   20694:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   20698:	f022 0603 	bic.w	r6, r2, #3
   2069c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   206a0:	441e      	add	r6, r3
   206a2:	0894      	lsrs	r4, r2, #2
   206a4:	42b3      	cmp	r3, r6
   206a6:	d10d      	bne.n	206c4 <memset+0x3a>
   206a8:	f06f 0503 	mvn.w	r5, #3
   206ac:	fb05 2204 	mla	r2, r5, r4, r2
   206b0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   206b2:	4293      	cmp	r3, r2
   206b4:	d109      	bne.n	206ca <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   206b6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   206b8:	2a00      	cmp	r2, #0
   206ba:	d0fc      	beq.n	206b6 <memset+0x2c>
		*(d_byte++) = c_byte;
   206bc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   206c0:	3a01      	subs	r2, #1
   206c2:	e7e5      	b.n	20690 <memset+0x6>
		*(d_word++) = c_word;
   206c4:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   206c8:	e7ec      	b.n	206a4 <memset+0x1a>
		*(d_byte++) = c_byte;
   206ca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   206ce:	e7f0      	b.n	206b2 <memset+0x28>

000206d0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   206d0:	f7fb bf26 	b.w	1c520 <SystemInit>

000206d4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   206d4:	b510      	push	{r4, lr}
   206d6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   206d8:	7801      	ldrb	r1, [r0, #0]
   206da:	7822      	ldrb	r2, [r4, #0]
   206dc:	428a      	cmp	r2, r1
{
   206de:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   206e0:	d00e      	beq.n	20700 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   206e2:	4669      	mov	r1, sp
   206e4:	f7f5 fc54 	bl	15f90 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   206e8:	a905      	add	r1, sp, #20
   206ea:	4620      	mov	r0, r4
   206ec:	f7f5 fc50 	bl	15f90 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   206f0:	2210      	movs	r2, #16
   206f2:	f10d 0115 	add.w	r1, sp, #21
   206f6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   206fa:	f7ff ff74 	bl	205e6 <memcmp>
   206fe:	e007      	b.n	20710 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20700:	2a01      	cmp	r2, #1
   20702:	d007      	beq.n	20714 <bt_uuid_cmp+0x40>
   20704:	2a02      	cmp	r2, #2
   20706:	d008      	beq.n	2071a <bt_uuid_cmp+0x46>
   20708:	b95a      	cbnz	r2, 20722 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2070a:	8840      	ldrh	r0, [r0, #2]
   2070c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2070e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20710:	b00a      	add	sp, #40	; 0x28
   20712:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20714:	6840      	ldr	r0, [r0, #4]
   20716:	6863      	ldr	r3, [r4, #4]
   20718:	e7f9      	b.n	2070e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2071a:	2210      	movs	r2, #16
   2071c:	1c61      	adds	r1, r4, #1
   2071e:	3001      	adds	r0, #1
   20720:	e7eb      	b.n	206fa <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20722:	f06f 0015 	mvn.w	r0, #21
   20726:	e7f3      	b.n	20710 <bt_uuid_cmp+0x3c>

00020728 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20728:	2a04      	cmp	r2, #4
{
   2072a:	b538      	push	{r3, r4, r5, lr}
   2072c:	460c      	mov	r4, r1
	switch (data_len) {
   2072e:	d00d      	beq.n	2074c <bt_uuid_create+0x24>
   20730:	2a10      	cmp	r2, #16
   20732:	d019      	beq.n	20768 <bt_uuid_create+0x40>
   20734:	2a02      	cmp	r2, #2
   20736:	f04f 0300 	mov.w	r3, #0
   2073a:	d11b      	bne.n	20774 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2073c:	7003      	strb	r3, [r0, #0]
   2073e:	784a      	ldrb	r2, [r1, #1]
   20740:	780b      	ldrb	r3, [r1, #0]
   20742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20746:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20748:	2001      	movs	r0, #1
}
   2074a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2074c:	2301      	movs	r3, #1
   2074e:	7003      	strb	r3, [r0, #0]
   20750:	78a2      	ldrb	r2, [r4, #2]
   20752:	78c9      	ldrb	r1, [r1, #3]
   20754:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20756:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2075a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2075c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   20760:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20764:	6042      	str	r2, [r0, #4]
		break;
   20766:	e7ef      	b.n	20748 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   20768:	2302      	movs	r3, #2
   2076a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2076e:	f7ff ff61 	bl	20634 <memcpy>
		break;
   20772:	e7e9      	b.n	20748 <bt_uuid_create+0x20>
	switch (data_len) {
   20774:	4618      	mov	r0, r3
   20776:	e7e8      	b.n	2074a <bt_uuid_create+0x22>

00020778 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20778:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2077a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2077c:	2106      	movs	r1, #6
{
   2077e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20780:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20784:	f7fb fdc2 	bl	1c30c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   20788:	b918      	cbnz	r0, 20792 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2078a:	79a3      	ldrb	r3, [r4, #6]
   2078c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20790:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20792:	bd10      	pop	{r4, pc}

00020794 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20794:	280f      	cmp	r0, #15
   20796:	d806      	bhi.n	207a6 <bt_hci_evt_get_flags+0x12>
   20798:	280d      	cmp	r0, #13
   2079a:	d80b      	bhi.n	207b4 <bt_hci_evt_get_flags+0x20>
   2079c:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2079e:	bf14      	ite	ne
   207a0:	2002      	movne	r0, #2
   207a2:	2003      	moveq	r0, #3
   207a4:	4770      	bx	lr
	switch (evt) {
   207a6:	2813      	cmp	r0, #19
   207a8:	d004      	beq.n	207b4 <bt_hci_evt_get_flags+0x20>
   207aa:	281a      	cmp	r0, #26
   207ac:	bf14      	ite	ne
   207ae:	2002      	movne	r0, #2
   207b0:	2001      	moveq	r0, #1
   207b2:	4770      	bx	lr
   207b4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   207b6:	4770      	bx	lr

000207b8 <get_adv_channel_map>:
{
   207b8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   207ba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   207be:	bf0c      	ite	eq
   207c0:	2007      	moveq	r0, #7
   207c2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   207c4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   207c6:	bf48      	it	mi
   207c8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   207cc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   207ce:	bf48      	it	mi
   207d0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   207d4:	4770      	bx	lr

000207d6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   207d6:	f3bf 8f5b 	dmb	ish
   207da:	6800      	ldr	r0, [r0, #0]
   207dc:	f3bf 8f5b 	dmb	ish
}
   207e0:	4770      	bx	lr

000207e2 <bt_addr_le_copy>:
   207e2:	2207      	movs	r2, #7
   207e4:	f7ff bf26 	b.w	20634 <memcpy>

000207e8 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   207e8:	2207      	movs	r2, #7
   207ea:	f7ff befc 	b.w	205e6 <memcmp>

000207ee <atomic_or>:
{
   207ee:	4603      	mov	r3, r0
}
   207f0:	f3bf 8f5b 	dmb	ish
   207f4:	e853 0f00 	ldrex	r0, [r3]
   207f8:	ea40 0201 	orr.w	r2, r0, r1
   207fc:	e843 2c00 	strex	ip, r2, [r3]
   20800:	f1bc 0f00 	cmp.w	ip, #0
   20804:	d1f6      	bne.n	207f4 <atomic_or+0x6>
   20806:	f3bf 8f5b 	dmb	ish
   2080a:	4770      	bx	lr

0002080c <atomic_and>:
{
   2080c:	4603      	mov	r3, r0
}
   2080e:	f3bf 8f5b 	dmb	ish
   20812:	e853 0f00 	ldrex	r0, [r3]
   20816:	ea00 0201 	and.w	r2, r0, r1
   2081a:	e843 2c00 	strex	ip, r2, [r3]
   2081e:	f1bc 0f00 	cmp.w	ip, #0
   20822:	d1f6      	bne.n	20812 <atomic_and+0x6>
   20824:	f3bf 8f5b 	dmb	ish
   20828:	4770      	bx	lr

0002082a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   2082a:	460b      	mov	r3, r1
   2082c:	b410      	push	{r4}
   2082e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   20830:	f001 041f 	and.w	r4, r1, #31
   20834:	2101      	movs	r1, #1
   20836:	40a1      	lsls	r1, r4

	if (val) {
   20838:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2083c:	b112      	cbz	r2, 20844 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   2083e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20840:	f7ff bfd5 	b.w	207ee <atomic_or>
}
   20844:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20846:	43c9      	mvns	r1, r1
   20848:	f7ff bfe0 	b.w	2080c <atomic_and>

0002084c <bt_hci_disconnect>:
{
   2084c:	b570      	push	{r4, r5, r6, lr}
   2084e:	4606      	mov	r6, r0
   20850:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20852:	f240 4006 	movw	r0, #1030	; 0x406
   20856:	2103      	movs	r1, #3
   20858:	f7f6 f88e 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   2085c:	4604      	mov	r4, r0
   2085e:	b168      	cbz	r0, 2087c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   20860:	2103      	movs	r1, #3
   20862:	3008      	adds	r0, #8
   20864:	f001 f8fc 	bl	21a60 <net_buf_simple_add>
	disconn->reason = reason;
   20868:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2086a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2086c:	4621      	mov	r1, r4
   2086e:	2200      	movs	r2, #0
}
   20870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20874:	f240 4006 	movw	r0, #1030	; 0x406
   20878:	f7f6 b8b6 	b.w	169e8 <bt_hci_cmd_send_sync>
}
   2087c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20880:	bd70      	pop	{r4, r5, r6, pc}

00020882 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20882:	8802      	ldrh	r2, [r0, #0]
   20884:	8843      	ldrh	r3, [r0, #2]
   20886:	429a      	cmp	r2, r3
{
   20888:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2088a:	d818      	bhi.n	208be <bt_le_conn_params_valid+0x3c>
   2088c:	2a05      	cmp	r2, #5
   2088e:	d916      	bls.n	208be <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20890:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20894:	d813      	bhi.n	208be <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20896:	8884      	ldrh	r4, [r0, #4]
   20898:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2089c:	d20f      	bcs.n	208be <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2089e:	88c1      	ldrh	r1, [r0, #6]
   208a0:	f1a1 020a 	sub.w	r2, r1, #10
   208a4:	b292      	uxth	r2, r2
   208a6:	f640 4076 	movw	r0, #3190	; 0xc76
   208aa:	4282      	cmp	r2, r0
   208ac:	d807      	bhi.n	208be <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   208ae:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   208b2:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   208b6:	bf34      	ite	cc
   208b8:	2001      	movcc	r0, #1
   208ba:	2000      	movcs	r0, #0
}
   208bc:	bd10      	pop	{r4, pc}
		return false;
   208be:	2000      	movs	r0, #0
   208c0:	e7fc      	b.n	208bc <bt_le_conn_params_valid+0x3a>

000208c2 <bt_le_set_phy>:
{
   208c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   208c6:	4680      	mov	r8, r0
   208c8:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   208ca:	f242 0032 	movw	r0, #8242	; 0x2032
   208ce:	2107      	movs	r1, #7
{
   208d0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   208d4:	4616      	mov	r6, r2
   208d6:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   208d8:	f7f6 f84e 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   208dc:	4604      	mov	r4, r0
   208de:	b190      	cbz	r0, 20906 <bt_le_set_phy+0x44>
   208e0:	2107      	movs	r1, #7
   208e2:	3008      	adds	r0, #8
   208e4:	f001 f8bc 	bl	21a60 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   208e8:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   208ec:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   208ee:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   208f0:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   208f2:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   208f4:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   208f8:	4621      	mov	r1, r4
   208fa:	f242 0032 	movw	r0, #8242	; 0x2032
}
   208fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20902:	f7f6 ba8d 	b.w	16e20 <bt_hci_cmd_send>
}
   20906:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002090e <bt_addr_le_is_bonded>:
}
   2090e:	2000      	movs	r0, #0
   20910:	4770      	bx	lr

00020912 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   20912:	6880      	ldr	r0, [r0, #8]
   20914:	f7f7 bb2a 	b.w	17f6c <enh_conn_complete>

00020918 <le_legacy_conn_complete>:
{
   20918:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2091a:	6881      	ldr	r1, [r0, #8]
{
   2091c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   2091e:	780b      	ldrb	r3, [r1, #0]
   20920:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20924:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   20928:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2092c:	78cb      	ldrb	r3, [r1, #3]
   2092e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20932:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   20936:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2093a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2093e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20942:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   20946:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2094a:	7c4b      	ldrb	r3, [r1, #17]
   2094c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20950:	a803      	add	r0, sp, #12
   20952:	3104      	adds	r1, #4
   20954:	f7ff ff45 	bl	207e2 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   20958:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2095a:	4669      	mov	r1, sp
   2095c:	2206      	movs	r2, #6
   2095e:	f10d 0013 	add.w	r0, sp, #19
   20962:	9400      	str	r4, [sp, #0]
   20964:	f8ad 4004 	strh.w	r4, [sp, #4]
   20968:	f7ff fe64 	bl	20634 <memcpy>
   2096c:	2206      	movs	r2, #6
   2096e:	4669      	mov	r1, sp
   20970:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20974:	9400      	str	r4, [sp, #0]
   20976:	f8ad 4004 	strh.w	r4, [sp, #4]
   2097a:	f7ff fe5b 	bl	20634 <memcpy>
	enh_conn_complete(&enh);
   2097e:	a802      	add	r0, sp, #8
   20980:	f7f7 faf4 	bl	17f6c <enh_conn_complete>
}
   20984:	b00a      	add	sp, #40	; 0x28
   20986:	bd10      	pop	{r4, pc}

00020988 <tx_notify>:
{
   20988:	b570      	push	{r4, r5, r6, lr}
   2098a:	4604      	mov	r4, r0
	__asm__ volatile(
   2098c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20990:	f3ef 8311 	mrs	r3, BASEPRI
   20994:	f382 8811 	msr	BASEPRI, r2
   20998:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2099c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2099e:	b920      	cbnz	r0, 209aa <tx_notify+0x22>
	__asm__ volatile(
   209a0:	f383 8811 	msr	BASEPRI, r3
   209a4:	f3bf 8f6f 	isb	sy
}
   209a8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   209aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   209ac:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   209ae:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   209b0:	4288      	cmp	r0, r1
	list->tail = node;
   209b2:	bf08      	it	eq
   209b4:	6262      	streq	r2, [r4, #36]	; 0x24
   209b6:	f383 8811 	msr	BASEPRI, r3
   209ba:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   209be:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   209c2:	f7f7 fb9f 	bl	18104 <tx_free>
		cb(conn, user_data);
   209c6:	4631      	mov	r1, r6
   209c8:	4620      	mov	r0, r4
   209ca:	47a8      	blx	r5
	while (1) {
   209cc:	e7de      	b.n	2098c <tx_notify+0x4>

000209ce <tx_complete_work>:
	tx_notify(conn);
   209ce:	3828      	subs	r0, #40	; 0x28
   209d0:	f7ff bfda 	b.w	20988 <tx_notify>

000209d4 <bt_conn_new>:
{
   209d4:	b538      	push	{r3, r4, r5, lr}
   209d6:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   209d8:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   209da:	2501      	movs	r5, #1
   209dc:	428b      	cmp	r3, r1
   209de:	d102      	bne.n	209e6 <bt_conn_new+0x12>
		return NULL;
   209e0:	2400      	movs	r4, #0
}
   209e2:	4620      	mov	r0, r4
   209e4:	bd38      	pop	{r3, r4, r5, pc}
   209e6:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   209ea:	f3bf 8f5b 	dmb	ish
   209ee:	e852 0f00 	ldrex	r0, [r2]
   209f2:	2800      	cmp	r0, #0
   209f4:	d104      	bne.n	20a00 <bt_conn_new+0x2c>
   209f6:	e842 5c00 	strex	ip, r5, [r2]
   209fa:	f1bc 0f00 	cmp.w	ip, #0
   209fe:	d1f6      	bne.n	209ee <bt_conn_new+0x1a>
   20a00:	f3bf 8f5b 	dmb	ish
   20a04:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   20a08:	d002      	beq.n	20a10 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   20a0a:	3301      	adds	r3, #1
   20a0c:	4604      	mov	r4, r0
   20a0e:	e7e5      	b.n	209dc <bt_conn_new+0x8>
	if (!conn) {
   20a10:	2c00      	cmp	r4, #0
   20a12:	d0e6      	beq.n	209e2 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   20a14:	22c0      	movs	r2, #192	; 0xc0
   20a16:	2100      	movs	r1, #0
   20a18:	4620      	mov	r0, r4
   20a1a:	f7ff fe36 	bl	2068a <memset>
	return conn;
   20a1e:	e7e0      	b.n	209e2 <bt_conn_new+0xe>

00020a20 <bt_conn_get_security>:
}
   20a20:	2001      	movs	r0, #1
   20a22:	4770      	bx	lr

00020a24 <bt_conn_reset_rx_state>:
{
   20a24:	b510      	push	{r4, lr}
   20a26:	4604      	mov	r4, r0
	if (!conn->rx) {
   20a28:	6900      	ldr	r0, [r0, #16]
   20a2a:	b118      	cbz	r0, 20a34 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20a2c:	f7fa f988 	bl	1ad40 <net_buf_unref>
	conn->rx = NULL;
   20a30:	2300      	movs	r3, #0
   20a32:	6123      	str	r3, [r4, #16]
}
   20a34:	bd10      	pop	{r4, pc}

00020a36 <bt_conn_is_peer_addr_le>:
{
   20a36:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20a38:	7a03      	ldrb	r3, [r0, #8]
   20a3a:	428b      	cmp	r3, r1
{
   20a3c:	4604      	mov	r4, r0
   20a3e:	4615      	mov	r5, r2
	if (id != conn->id) {
   20a40:	d115      	bne.n	20a6e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20a42:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20a46:	2207      	movs	r2, #7
   20a48:	4628      	mov	r0, r5
   20a4a:	f7ff fdcc 	bl	205e6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20a4e:	b180      	cbz	r0, 20a72 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   20a50:	78e3      	ldrb	r3, [r4, #3]
   20a52:	2207      	movs	r2, #7
   20a54:	b943      	cbnz	r3, 20a68 <bt_conn_is_peer_addr_le+0x32>
   20a56:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20a5a:	4628      	mov	r0, r5
   20a5c:	f7ff fdc3 	bl	205e6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20a60:	fab0 f080 	clz	r0, r0
   20a64:	0940      	lsrs	r0, r0, #5
}
   20a66:	bd38      	pop	{r3, r4, r5, pc}
   20a68:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20a6c:	e7f5      	b.n	20a5a <bt_conn_is_peer_addr_le+0x24>
		return false;
   20a6e:	2000      	movs	r0, #0
   20a70:	e7f9      	b.n	20a66 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20a72:	2001      	movs	r0, #1
   20a74:	e7f7      	b.n	20a66 <bt_conn_is_peer_addr_le+0x30>

00020a76 <bt_conn_ref>:
{
   20a76:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20a78:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a7c:	f3bf 8f5b 	dmb	ish
   20a80:	6813      	ldr	r3, [r2, #0]
   20a82:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20a86:	b17b      	cbz	r3, 20aa8 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20a88:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20a8c:	1c59      	adds	r1, r3, #1
   20a8e:	e852 4f00 	ldrex	r4, [r2]
   20a92:	429c      	cmp	r4, r3
   20a94:	d104      	bne.n	20aa0 <bt_conn_ref+0x2a>
   20a96:	e842 1c00 	strex	ip, r1, [r2]
   20a9a:	f1bc 0f00 	cmp.w	ip, #0
   20a9e:	d1f6      	bne.n	20a8e <bt_conn_ref+0x18>
   20aa0:	f3bf 8f5b 	dmb	ish
   20aa4:	d1ea      	bne.n	20a7c <bt_conn_ref+0x6>
}
   20aa6:	bd10      	pop	{r4, pc}
			return NULL;
   20aa8:	4618      	mov	r0, r3
   20aaa:	e7fc      	b.n	20aa6 <bt_conn_ref+0x30>

00020aac <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   20aac:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20ab0:	f3bf 8f5b 	dmb	ish
   20ab4:	e853 2f00 	ldrex	r2, [r3]
   20ab8:	3a01      	subs	r2, #1
   20aba:	e843 2100 	strex	r1, r2, [r3]
   20abe:	2900      	cmp	r1, #0
   20ac0:	d1f8      	bne.n	20ab4 <bt_conn_unref+0x8>
   20ac2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20ac6:	f3bf 8f5b 	dmb	ish
   20aca:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   20ace:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   20ad2:	b90b      	cbnz	r3, 20ad8 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   20ad4:	f7f7 ba14 	b.w	17f00 <bt_le_adv_resume>
}
   20ad8:	4770      	bx	lr

00020ada <conn_lookup_handle>:
{
   20ada:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ade:	4607      	mov	r7, r0
   20ae0:	460e      	mov	r6, r1
   20ae2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20ae4:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20ae6:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   20aea:	42b4      	cmp	r4, r6
   20aec:	d103      	bne.n	20af6 <conn_lookup_handle+0x1c>
	return NULL;
   20aee:	2300      	movs	r3, #0
}
   20af0:	4618      	mov	r0, r3
   20af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20af6:	fb09 7004 	mla	r0, r9, r4, r7
   20afa:	f7ff ffbc 	bl	20a76 <bt_conn_ref>
   20afe:	4603      	mov	r3, r0
		if (!conn) {
   20b00:	b158      	cbz	r0, 20b1a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20b02:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20b04:	2d01      	cmp	r5, #1
   20b06:	d002      	beq.n	20b0e <conn_lookup_handle+0x34>
   20b08:	3d07      	subs	r5, #7
   20b0a:	2d01      	cmp	r5, #1
   20b0c:	d803      	bhi.n	20b16 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20b0e:	881a      	ldrh	r2, [r3, #0]
   20b10:	4542      	cmp	r2, r8
   20b12:	d0ed      	beq.n	20af0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20b14:	4618      	mov	r0, r3
   20b16:	f7ff ffc9 	bl	20aac <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20b1a:	3401      	adds	r4, #1
   20b1c:	e7e5      	b.n	20aea <conn_lookup_handle+0x10>

00020b1e <bt_conn_get_dst>:
}
   20b1e:	3088      	adds	r0, #136	; 0x88
   20b20:	4770      	bx	lr

00020b22 <bt_conn_le_conn_update>:
{
   20b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b24:	4607      	mov	r7, r0
   20b26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20b28:	f242 0013 	movw	r0, #8211	; 0x2013
   20b2c:	210e      	movs	r1, #14
   20b2e:	f7f5 ff23 	bl	16978 <bt_hci_cmd_create>
	if (!buf) {
   20b32:	4606      	mov	r6, r0
   20b34:	b1d0      	cbz	r0, 20b6c <bt_conn_le_conn_update+0x4a>
   20b36:	210e      	movs	r1, #14
   20b38:	3008      	adds	r0, #8
   20b3a:	f000 ff91 	bl	21a60 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20b3e:	220e      	movs	r2, #14
   20b40:	4604      	mov	r4, r0
   20b42:	2100      	movs	r1, #0
   20b44:	f7ff fda1 	bl	2068a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20b48:	883b      	ldrh	r3, [r7, #0]
   20b4a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20b4c:	882b      	ldrh	r3, [r5, #0]
   20b4e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20b50:	886b      	ldrh	r3, [r5, #2]
   20b52:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20b54:	88ab      	ldrh	r3, [r5, #4]
   20b56:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20b58:	88eb      	ldrh	r3, [r5, #6]
   20b5a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20b5c:	4631      	mov	r1, r6
   20b5e:	2200      	movs	r2, #0
}
   20b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20b64:	f242 0013 	movw	r0, #8211	; 0x2013
   20b68:	f7f5 bf3e 	b.w	169e8 <bt_hci_cmd_send_sync>
}
   20b6c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020b72 <l2cap_connected>:
}
   20b72:	4770      	bx	lr

00020b74 <l2cap_disconnected>:
   20b74:	4770      	bx	lr

00020b76 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20b76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   20b78:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20b7a:	b17b      	cbz	r3, 20b9c <bt_l2cap_chan_remove+0x26>
   20b7c:	3b08      	subs	r3, #8
   20b7e:	2200      	movs	r2, #0
   20b80:	b163      	cbz	r3, 20b9c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   20b82:	428b      	cmp	r3, r1
   20b84:	f103 0408 	add.w	r4, r3, #8
   20b88:	d10f      	bne.n	20baa <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   20b8a:	688b      	ldr	r3, [r1, #8]
   20b8c:	b93a      	cbnz	r2, 20b9e <bt_l2cap_chan_remove+0x28>
   20b8e:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   20b90:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   20b92:	4294      	cmp	r4, r2
   20b94:	d100      	bne.n	20b98 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   20b96:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   20b98:	2300      	movs	r3, #0
   20b9a:	608b      	str	r3, [r1, #8]
}
   20b9c:	bd10      	pop	{r4, pc}
   20b9e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20ba0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   20ba2:	429c      	cmp	r4, r3
	list->tail = node;
   20ba4:	bf08      	it	eq
   20ba6:	6502      	streq	r2, [r0, #80]	; 0x50
}
   20ba8:	e7f6      	b.n	20b98 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20baa:	2c00      	cmp	r4, #0
   20bac:	d0f6      	beq.n	20b9c <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20bae:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20bb0:	2b00      	cmp	r3, #0
   20bb2:	d0f3      	beq.n	20b9c <bt_l2cap_chan_remove+0x26>
   20bb4:	3b08      	subs	r3, #8
   20bb6:	4622      	mov	r2, r4
   20bb8:	e7e2      	b.n	20b80 <bt_l2cap_chan_remove+0xa>

00020bba <bt_l2cap_chan_del>:
{
   20bba:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20bbc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   20bc0:	4604      	mov	r4, r0
	if (!chan->conn) {
   20bc2:	b123      	cbz	r3, 20bce <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   20bc4:	686b      	ldr	r3, [r5, #4]
   20bc6:	b103      	cbz	r3, 20bca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20bc8:	4798      	blx	r3
	chan->conn = NULL;
   20bca:	2300      	movs	r3, #0
   20bcc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   20bce:	68e3      	ldr	r3, [r4, #12]
   20bd0:	b10b      	cbz	r3, 20bd6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   20bd2:	4620      	mov	r0, r4
   20bd4:	4798      	blx	r3
	if (ops->released) {
   20bd6:	69eb      	ldr	r3, [r5, #28]
   20bd8:	b11b      	cbz	r3, 20be2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   20bda:	4620      	mov	r0, r4
}
   20bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   20be0:	4718      	bx	r3
}
   20be2:	bd70      	pop	{r4, r5, r6, pc}

00020be4 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20be4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   20be6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20be8:	b18b      	cbz	r3, 20c0e <bt_l2cap_disconnected+0x2a>
   20bea:	f1b3 0008 	subs.w	r0, r3, #8
   20bee:	d00e      	beq.n	20c0e <bt_l2cap_disconnected+0x2a>
   20bf0:	681c      	ldr	r4, [r3, #0]
   20bf2:	b104      	cbz	r4, 20bf6 <bt_l2cap_disconnected+0x12>
   20bf4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20bf6:	f7ff ffe0 	bl	20bba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20bfa:	b144      	cbz	r4, 20c0e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20bfc:	f114 0308 	adds.w	r3, r4, #8
   20c00:	d002      	beq.n	20c08 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c02:	68a3      	ldr	r3, [r4, #8]
   20c04:	b103      	cbz	r3, 20c08 <bt_l2cap_disconnected+0x24>
   20c06:	3b08      	subs	r3, #8
{
   20c08:	4620      	mov	r0, r4
   20c0a:	461c      	mov	r4, r3
   20c0c:	e7f3      	b.n	20bf6 <bt_l2cap_disconnected+0x12>
}
   20c0e:	bd10      	pop	{r4, pc}

00020c10 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20c10:	3104      	adds	r1, #4
   20c12:	f7f7 bf37 	b.w	18a84 <bt_conn_create_pdu_timeout>

00020c16 <bt_l2cap_send_cb>:
{
   20c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c1a:	4614      	mov	r4, r2
   20c1c:	4605      	mov	r5, r0
   20c1e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   20c20:	f102 0008 	add.w	r0, r2, #8
   20c24:	2104      	movs	r1, #4
   20c26:	461e      	mov	r6, r3
   20c28:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20c2c:	f000 ff2f 	bl	21a8e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20c30:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   20c32:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20c34:	3a04      	subs	r2, #4
   20c36:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20c38:	4643      	mov	r3, r8
   20c3a:	4632      	mov	r2, r6
   20c3c:	4621      	mov	r1, r4
   20c3e:	4628      	mov	r0, r5
}
   20c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20c44:	f7f7 bc3c 	b.w	184c0 <bt_conn_send_cb>

00020c48 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c4a:	b160      	cbz	r0, 20c66 <bt_l2cap_le_lookup_tx_cid+0x1e>
   20c4c:	3808      	subs	r0, #8
   20c4e:	b900      	cbnz	r0, 20c52 <bt_l2cap_le_lookup_tx_cid+0xa>
   20c50:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20c52:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   20c56:	428b      	cmp	r3, r1
   20c58:	d005      	beq.n	20c66 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c5a:	f110 0308 	adds.w	r3, r0, #8
   20c5e:	d001      	beq.n	20c64 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c60:	6880      	ldr	r0, [r0, #8]
   20c62:	e7f2      	b.n	20c4a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   20c64:	4618      	mov	r0, r3
}
   20c66:	4770      	bx	lr

00020c68 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20c68:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c6a:	b160      	cbz	r0, 20c86 <bt_l2cap_le_lookup_rx_cid+0x1e>
   20c6c:	3808      	subs	r0, #8
   20c6e:	b900      	cbnz	r0, 20c72 <bt_l2cap_le_lookup_rx_cid+0xa>
   20c70:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20c72:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   20c76:	428b      	cmp	r3, r1
   20c78:	d005      	beq.n	20c86 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20c7a:	f110 0308 	adds.w	r3, r0, #8
   20c7e:	d001      	beq.n	20c84 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c80:	6880      	ldr	r0, [r0, #8]
   20c82:	e7f2      	b.n	20c6a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   20c84:	4618      	mov	r0, r3
}
   20c86:	4770      	bx	lr

00020c88 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20c88:	4770      	bx	lr

00020c8a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20c8a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   20c8c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20c8e:	b128      	cbz	r0, 20c9c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20c90:	6859      	ldr	r1, [r3, #4]
   20c92:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20c94:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20c96:	4288      	cmp	r0, r1
	list->tail = node;
   20c98:	bf08      	it	eq
   20c9a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20c9c:	4770      	bx	lr

00020c9e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20c9e:	4603      	mov	r3, r0
   20ca0:	6800      	ldr	r0, [r0, #0]
   20ca2:	2200      	movs	r2, #0
   20ca4:	b900      	cbnz	r0, 20ca8 <sys_slist_find_and_remove+0xa>
   20ca6:	4770      	bx	lr
   20ca8:	4288      	cmp	r0, r1
   20caa:	d110      	bne.n	20cce <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   20cac:	6808      	ldr	r0, [r1, #0]
   20cae:	b942      	cbnz	r2, 20cc2 <sys_slist_find_and_remove+0x24>
   20cb0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   20cb2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   20cb4:	4291      	cmp	r1, r2
   20cb6:	d100      	bne.n	20cba <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   20cb8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   20cba:	2300      	movs	r3, #0
   20cbc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20cbe:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   20cc0:	4770      	bx	lr
	parent->next = child;
   20cc2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20cc4:	6858      	ldr	r0, [r3, #4]
   20cc6:	4281      	cmp	r1, r0
	list->tail = node;
   20cc8:	bf08      	it	eq
   20cca:	605a      	streq	r2, [r3, #4]
}
   20ccc:	e7f5      	b.n	20cba <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20cce:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20cd0:	6800      	ldr	r0, [r0, #0]
   20cd2:	e7e7      	b.n	20ca4 <sys_slist_find_and_remove+0x6>

00020cd4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20cd4:	4603      	mov	r3, r0
	size_t bytes = 0;
   20cd6:	2000      	movs	r0, #0

	while (buf) {
   20cd8:	b903      	cbnz	r3, 20cdc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20cda:	4770      	bx	lr
		bytes += buf->len;
   20cdc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20cde:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20ce0:	4410      	add	r0, r2
		buf = buf->frags;
   20ce2:	e7f9      	b.n	20cd8 <net_buf_frags_len+0x4>

00020ce4 <att_sent>:
	if (chan->ops->sent) {
   20ce4:	684b      	ldr	r3, [r1, #4]
   20ce6:	695b      	ldr	r3, [r3, #20]
{
   20ce8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20cea:	b103      	cbz	r3, 20cee <att_sent+0xa>
		chan->ops->sent(chan);
   20cec:	4718      	bx	r3
}
   20cee:	4770      	bx	lr

00020cf0 <attr_read_type_cb>:
{
   20cf0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20cf2:	68d4      	ldr	r4, [r2, #12]
   20cf4:	7823      	ldrb	r3, [r4, #0]
   20cf6:	3102      	adds	r1, #2
   20cf8:	b913      	cbnz	r3, 20d00 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20cfa:	7021      	strb	r1, [r4, #0]
	return true;
   20cfc:	2001      	movs	r0, #1
   20cfe:	e006      	b.n	20d0e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20d00:	428b      	cmp	r3, r1
   20d02:	d0fb      	beq.n	20cfc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20d04:	8983      	ldrh	r3, [r0, #12]
   20d06:	3b02      	subs	r3, #2
   20d08:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20d0a:	2000      	movs	r0, #0
   20d0c:	6110      	str	r0, [r2, #16]
}
   20d0e:	bd10      	pop	{r4, pc}

00020d10 <att_prepare_write_req>:
}
   20d10:	2006      	movs	r0, #6
   20d12:	4770      	bx	lr

00020d14 <att_op_get_type>:
	switch (op) {
   20d14:	281e      	cmp	r0, #30
   20d16:	d816      	bhi.n	20d46 <att_op_get_type+0x32>
   20d18:	b308      	cbz	r0, 20d5e <att_op_get_type+0x4a>
   20d1a:	1e43      	subs	r3, r0, #1
   20d1c:	2b1d      	cmp	r3, #29
   20d1e:	d81e      	bhi.n	20d5e <att_op_get_type+0x4a>
   20d20:	e8df f003 	tbb	[pc, r3]
   20d24:	23172317 	.word	0x23172317
   20d28:	23172317 	.word	0x23172317
   20d2c:	23172317 	.word	0x23172317
   20d30:	23172317 	.word	0x23172317
   20d34:	1d172317 	.word	0x1d172317
   20d38:	2317231d 	.word	0x2317231d
   20d3c:	1d191d17 	.word	0x1d191d17
   20d40:	0f1b      	.short	0x0f1b
   20d42:	2004      	movs	r0, #4
   20d44:	4770      	bx	lr
   20d46:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   20d4a:	2b52      	cmp	r3, #82	; 0x52
   20d4c:	d107      	bne.n	20d5e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   20d4e:	2000      	movs	r0, #0
}
   20d50:	4770      	bx	lr
		return ATT_RESPONSE;
   20d52:	2002      	movs	r0, #2
   20d54:	4770      	bx	lr
		return ATT_NOTIFICATION;
   20d56:	2003      	movs	r0, #3
   20d58:	4770      	bx	lr
		return ATT_INDICATION;
   20d5a:	2005      	movs	r0, #5
   20d5c:	4770      	bx	lr
		return ATT_COMMAND;
   20d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
   20d62:	bf0c      	ite	eq
   20d64:	2006      	moveq	r0, #6
   20d66:	2000      	movne	r0, #0
   20d68:	4770      	bx	lr
		return ATT_REQUEST;
   20d6a:	2001      	movs	r0, #1
   20d6c:	4770      	bx	lr

00020d6e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   20d6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20d70:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20d74:	2300      	movs	r3, #0
   20d76:	9300      	str	r3, [sp, #0]
   20d78:	461a      	mov	r2, r3
   20d7a:	f7f9 fc4b 	bl	1a614 <bt_gatt_foreach_attr_type>
				  user_data);
}
   20d7e:	b005      	add	sp, #20
   20d80:	f85d fb04 	ldr.w	pc, [sp], #4

00020d84 <att_chan_read>:
{
   20d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d88:	4680      	mov	r8, r0
   20d8a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20d8c:	4610      	mov	r0, r2
{
   20d8e:	4699      	mov	r9, r3
   20d90:	468b      	mov	fp, r1
   20d92:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20d94:	f7ff ff9e 	bl	20cd4 <net_buf_frags_len>
   20d98:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   20d9c:	4283      	cmp	r3, r0
   20d9e:	d97a      	bls.n	20e96 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   20da0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20da4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   20da6:	4630      	mov	r0, r6
   20da8:	f000 fe38 	bl	21a1c <net_buf_frag_last>
	size_t len, total = 0;
   20dac:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   20db0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20db2:	4630      	mov	r0, r6
   20db4:	f7ff ff8e 	bl	20cd4 <net_buf_frags_len>
   20db8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   20dbc:	f105 0708 	add.w	r7, r5, #8
   20dc0:	1a24      	subs	r4, r4, r0
   20dc2:	4638      	mov	r0, r7
   20dc4:	f000 fe87 	bl	21ad6 <net_buf_simple_tailroom>
   20dc8:	4284      	cmp	r4, r0
   20dca:	d211      	bcs.n	20df0 <att_chan_read+0x6c>
   20dcc:	4630      	mov	r0, r6
   20dce:	f7ff ff81 	bl	20cd4 <net_buf_frags_len>
   20dd2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   20dd6:	1a24      	subs	r4, r4, r0
		if (!len) {
   20dd8:	bb34      	cbnz	r4, 20e28 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   20dda:	79b0      	ldrb	r0, [r6, #6]
   20ddc:	f7f9 fef4 	bl	1abc8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   20de0:	2200      	movs	r2, #0
   20de2:	2300      	movs	r3, #0
   20de4:	f000 fde6 	bl	219b4 <net_buf_alloc_fixed>
			if (!frag) {
   20de8:	4605      	mov	r5, r0
   20dea:	b930      	cbnz	r0, 20dfa <att_chan_read+0x76>
	return total;
   20dec:	4657      	mov	r7, sl
   20dee:	e02c      	b.n	20e4a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   20df0:	4638      	mov	r0, r7
   20df2:	f000 fe70 	bl	21ad6 <net_buf_simple_tailroom>
   20df6:	4604      	mov	r4, r0
   20df8:	e7ee      	b.n	20dd8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   20dfa:	4601      	mov	r1, r0
   20dfc:	4630      	mov	r0, r6
   20dfe:	f000 fe1e 	bl	21a3e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20e02:	4630      	mov	r0, r6
   20e04:	f7ff ff66 	bl	20cd4 <net_buf_frags_len>
   20e08:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   20e0c:	f105 0708 	add.w	r7, r5, #8
   20e10:	1a24      	subs	r4, r4, r0
   20e12:	4638      	mov	r0, r7
   20e14:	f000 fe5f 	bl	21ad6 <net_buf_simple_tailroom>
   20e18:	4284      	cmp	r4, r0
   20e1a:	d21a      	bcs.n	20e52 <att_chan_read+0xce>
   20e1c:	4630      	mov	r0, r6
   20e1e:	f7ff ff59 	bl	20cd4 <net_buf_frags_len>
   20e22:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   20e26:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   20e28:	68a9      	ldr	r1, [r5, #8]
   20e2a:	89aa      	ldrh	r2, [r5, #12]
   20e2c:	f8db 7004 	ldr.w	r7, [fp, #4]
   20e30:	9803      	ldr	r0, [sp, #12]
   20e32:	f8cd 9000 	str.w	r9, [sp]
   20e36:	440a      	add	r2, r1
   20e38:	b2a3      	uxth	r3, r4
   20e3a:	4659      	mov	r1, fp
   20e3c:	47b8      	blx	r7
		if (read < 0) {
   20e3e:	1e07      	subs	r7, r0, #0
   20e40:	da0c      	bge.n	20e5c <att_chan_read+0xd8>
				return total;
   20e42:	f1ba 0f00 	cmp.w	sl, #0
   20e46:	bf18      	it	ne
   20e48:	4657      	movne	r7, sl
}
   20e4a:	4638      	mov	r0, r7
   20e4c:	b005      	add	sp, #20
   20e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e52:	4638      	mov	r0, r7
   20e54:	f000 fe3f 	bl	21ad6 <net_buf_simple_tailroom>
   20e58:	4604      	mov	r4, r0
   20e5a:	e7e5      	b.n	20e28 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   20e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20e5e:	b993      	cbnz	r3, 20e86 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   20e60:	4639      	mov	r1, r7
   20e62:	f105 0008 	add.w	r0, r5, #8
   20e66:	f000 fdfb 	bl	21a60 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20e6a:	4630      	mov	r0, r6
   20e6c:	f7ff ff32 	bl	20cd4 <net_buf_frags_len>
   20e70:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   20e74:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20e76:	4283      	cmp	r3, r0
		total += read;
   20e78:	44ba      	add	sl, r7
		offset += read;
   20e7a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20e7e:	d9b5      	bls.n	20dec <att_chan_read+0x68>
   20e80:	42a7      	cmp	r7, r4
   20e82:	d096      	beq.n	20db2 <att_chan_read+0x2e>
   20e84:	e7b2      	b.n	20dec <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   20e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20e8a:	4639      	mov	r1, r7
   20e8c:	4628      	mov	r0, r5
   20e8e:	4798      	blx	r3
   20e90:	2800      	cmp	r0, #0
   20e92:	d1e5      	bne.n	20e60 <att_chan_read+0xdc>
   20e94:	e7aa      	b.n	20dec <att_chan_read+0x68>
		return 0;
   20e96:	2700      	movs	r7, #0
   20e98:	e7d7      	b.n	20e4a <att_chan_read+0xc6>

00020e9a <find_info_cb>:
{
   20e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   20e9c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   20e9e:	6817      	ldr	r7, [r2, #0]
{
   20ea0:	4605      	mov	r5, r0
   20ea2:	460e      	mov	r6, r1
   20ea4:	4614      	mov	r4, r2
	if (!data->rsp) {
   20ea6:	b963      	cbnz	r3, 20ec2 <find_info_cb+0x28>
   20ea8:	6850      	ldr	r0, [r2, #4]
   20eaa:	2101      	movs	r1, #1
   20eac:	3008      	adds	r0, #8
   20eae:	f000 fdd7 	bl	21a60 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20eb2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20eb4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20eb6:	781b      	ldrb	r3, [r3, #0]
   20eb8:	2b00      	cmp	r3, #0
   20eba:	bf0c      	ite	eq
   20ebc:	2301      	moveq	r3, #1
   20ebe:	2302      	movne	r3, #2
   20ec0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   20ec2:	68a3      	ldr	r3, [r4, #8]
   20ec4:	781b      	ldrb	r3, [r3, #0]
   20ec6:	2b01      	cmp	r3, #1
   20ec8:	d003      	beq.n	20ed2 <find_info_cb+0x38>
   20eca:	2b02      	cmp	r3, #2
   20ecc:	d019      	beq.n	20f02 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   20ece:	2000      	movs	r0, #0
   20ed0:	e016      	b.n	20f00 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   20ed2:	682b      	ldr	r3, [r5, #0]
   20ed4:	781b      	ldrb	r3, [r3, #0]
   20ed6:	2b00      	cmp	r3, #0
   20ed8:	d1f9      	bne.n	20ece <find_info_cb+0x34>
   20eda:	6860      	ldr	r0, [r4, #4]
   20edc:	2104      	movs	r1, #4
   20ede:	3008      	adds	r0, #8
   20ee0:	f000 fdbe 	bl	21a60 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   20ee4:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20ee6:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   20ee8:	885b      	ldrh	r3, [r3, #2]
   20eea:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   20eec:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   20eee:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   20ef0:	899b      	ldrh	r3, [r3, #12]
   20ef2:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   20ef6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20ef8:	2804      	cmp	r0, #4
   20efa:	bf94      	ite	ls
   20efc:	2000      	movls	r0, #0
   20efe:	2001      	movhi	r0, #1
}
   20f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   20f02:	682b      	ldr	r3, [r5, #0]
   20f04:	781b      	ldrb	r3, [r3, #0]
   20f06:	2b02      	cmp	r3, #2
   20f08:	d1e1      	bne.n	20ece <find_info_cb+0x34>
   20f0a:	6860      	ldr	r0, [r4, #4]
   20f0c:	2112      	movs	r1, #18
   20f0e:	3008      	adds	r0, #8
   20f10:	f000 fda6 	bl	21a60 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20f14:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20f16:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20f18:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   20f1a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20f1e:	3101      	adds	r1, #1
   20f20:	f7ff fb88 	bl	20634 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   20f24:	6863      	ldr	r3, [r4, #4]
   20f26:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   20f2a:	899b      	ldrh	r3, [r3, #12]
   20f2c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   20f2e:	2812      	cmp	r0, #18
   20f30:	e7e3      	b.n	20efa <find_info_cb+0x60>

00020f32 <attr_read_group_cb>:
	if (!data->rsp->len) {
   20f32:	68d0      	ldr	r0, [r2, #12]
   20f34:	7803      	ldrb	r3, [r0, #0]
   20f36:	3104      	adds	r1, #4
   20f38:	b913      	cbnz	r3, 20f40 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   20f3a:	7001      	strb	r1, [r0, #0]
	return true;
   20f3c:	2001      	movs	r0, #1
}
   20f3e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   20f40:	428b      	cmp	r3, r1
   20f42:	d0fb      	beq.n	20f3c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   20f44:	6891      	ldr	r1, [r2, #8]
   20f46:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   20f48:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   20f4a:	3b04      	subs	r3, #4
   20f4c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   20f4e:	6110      	str	r0, [r2, #16]
		return false;
   20f50:	4770      	bx	lr

00020f52 <process_queue>:
{
   20f52:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   20f54:	2200      	movs	r2, #0
{
   20f56:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   20f58:	2300      	movs	r3, #0
   20f5a:	4608      	mov	r0, r1
{
   20f5c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   20f5e:	f000 fd2e 	bl	219be <net_buf_get>
	if (buf) {
   20f62:	4605      	mov	r5, r0
   20f64:	b160      	cbz	r0, 20f80 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   20f66:	4601      	mov	r1, r0
   20f68:	2200      	movs	r2, #0
   20f6a:	4620      	mov	r0, r4
   20f6c:	f7f8 f9a8 	bl	192c0 <chan_send>
		if (err) {
   20f70:	4604      	mov	r4, r0
   20f72:	b118      	cbz	r0, 20f7c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   20f74:	4629      	mov	r1, r5
   20f76:	4630      	mov	r0, r6
   20f78:	f001 f999 	bl	222ae <k_queue_prepend>
}
   20f7c:	4620      	mov	r0, r4
   20f7e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   20f80:	f06f 0401 	mvn.w	r4, #1
   20f84:	e7fa      	b.n	20f7c <process_queue+0x2a>

00020f86 <att_exec_write_req>:
   20f86:	2006      	movs	r0, #6
   20f88:	4770      	bx	lr

00020f8a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20f8a:	30c0      	adds	r0, #192	; 0xc0
   20f8c:	f3bf 8f5b 	dmb	ish
   20f90:	e850 3f00 	ldrex	r3, [r0]
   20f94:	f023 0301 	bic.w	r3, r3, #1
   20f98:	e840 3200 	strex	r2, r3, [r0]
   20f9c:	2a00      	cmp	r2, #0
   20f9e:	d1f7      	bne.n	20f90 <chan_rsp_sent+0x6>
   20fa0:	f3bf 8f5b 	dmb	ish
}
   20fa4:	4770      	bx	lr

00020fa6 <chan_cfm_sent>:
   20fa6:	30c0      	adds	r0, #192	; 0xc0
   20fa8:	f3bf 8f5b 	dmb	ish
   20fac:	e850 3f00 	ldrex	r3, [r0]
   20fb0:	f023 0302 	bic.w	r3, r3, #2
   20fb4:	e840 3200 	strex	r2, r3, [r0]
   20fb8:	2a00      	cmp	r2, #0
   20fba:	d1f7      	bne.n	20fac <chan_cfm_sent+0x6>
   20fbc:	f3bf 8f5b 	dmb	ish
}
   20fc0:	4770      	bx	lr

00020fc2 <chan_req_send>:
{
   20fc2:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20fc4:	690e      	ldr	r6, [r1, #16]
{
   20fc6:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20fc8:	4630      	mov	r0, r6
{
   20fca:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20fcc:	f7ff fe82 	bl	20cd4 <net_buf_frags_len>
   20fd0:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   20fd4:	4283      	cmp	r3, r0
   20fd6:	d317      	bcc.n	21008 <chan_req_send+0x46>
	chan->req = req;
   20fd8:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   20fdc:	f106 0008 	add.w	r0, r6, #8
   20fe0:	f000 fd75 	bl	21ace <net_buf_simple_headroom>
	state->len = buf->len;
   20fe4:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   20fe6:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   20fe8:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   20fea:	6920      	ldr	r0, [r4, #16]
   20fec:	f000 fd12 	bl	21a14 <net_buf_ref>
   20ff0:	2200      	movs	r2, #0
   20ff2:	4601      	mov	r1, r0
   20ff4:	4628      	mov	r0, r5
   20ff6:	f7f8 f963 	bl	192c0 <chan_send>
	if (err) {
   20ffa:	4605      	mov	r5, r0
   20ffc:	b110      	cbz	r0, 21004 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   20ffe:	6920      	ldr	r0, [r4, #16]
   21000:	f7f9 fe9e 	bl	1ad40 <net_buf_unref>
}
   21004:	4628      	mov	r0, r5
   21006:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   21008:	f06f 0523 	mvn.w	r5, #35	; 0x23
   2100c:	e7fa      	b.n	21004 <chan_req_send+0x42>

0002100e <bt_att_chan_req_send>:
{
   2100e:	b570      	push	{r4, r5, r6, lr}
   21010:	4604      	mov	r4, r0
   21012:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   21014:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   21018:	2200      	movs	r2, #0
   2101a:	2300      	movs	r3, #0
   2101c:	4630      	mov	r0, r6
   2101e:	f7fc ff85 	bl	1df2c <z_impl_k_sem_take>
   21022:	2800      	cmp	r0, #0
   21024:	db0a      	blt.n	2103c <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   21026:	4620      	mov	r0, r4
   21028:	4629      	mov	r1, r5
   2102a:	f7ff ffca 	bl	20fc2 <chan_req_send>
	if (err < 0) {
   2102e:	1e04      	subs	r4, r0, #0
   21030:	da02      	bge.n	21038 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   21032:	4630      	mov	r0, r6
   21034:	f7fc ff54 	bl	1dee0 <z_impl_k_sem_give>
}
   21038:	4620      	mov	r0, r4
   2103a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2103c:	f06f 040a 	mvn.w	r4, #10
   21040:	e7fa      	b.n	21038 <bt_att_chan_req_send+0x2a>

00021042 <bt_att_status>:
{
   21042:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21044:	f3bf 8f5b 	dmb	ish
   21048:	680b      	ldr	r3, [r1, #0]
   2104a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2104e:	07db      	lsls	r3, r3, #31
{
   21050:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21052:	d519      	bpl.n	21088 <bt_att_status+0x46>
	if (!chan->att) {
   21054:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21058:	b1b0      	cbz	r0, 21088 <bt_att_status+0x46>
	if (chan->req) {
   2105a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2105e:	b99b      	cbnz	r3, 21088 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21060:	3004      	adds	r0, #4
   21062:	f7ff fe12 	bl	20c8a <sys_slist_get>
	if (!node) {
   21066:	4604      	mov	r4, r0
   21068:	b170      	cbz	r0, 21088 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2106a:	4601      	mov	r1, r0
   2106c:	f1a5 0008 	sub.w	r0, r5, #8
   21070:	f7ff ffcd 	bl	2100e <bt_att_chan_req_send>
   21074:	2800      	cmp	r0, #0
   21076:	da07      	bge.n	21088 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21078:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2107c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2107e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21080:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21082:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21084:	b902      	cbnz	r2, 21088 <bt_att_status+0x46>
	list->tail = node;
   21086:	609c      	str	r4, [r3, #8]
}
   21088:	bd38      	pop	{r3, r4, r5, pc}

0002108a <write_cb>:
{
   2108a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2108c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2108e:	4601      	mov	r1, r0
{
   21090:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21092:	222a      	movs	r2, #42	; 0x2a
   21094:	6820      	ldr	r0, [r4, #0]
   21096:	f000 fbc4 	bl	21822 <bt_gatt_check_perm>
   2109a:	4605      	mov	r5, r0
   2109c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2109e:	bb00      	cbnz	r0, 210e2 <write_cb+0x58>
	if (!data->req) {
   210a0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   210a2:	68b7      	ldr	r7, [r6, #8]
   210a4:	68e2      	ldr	r2, [r4, #12]
   210a6:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   210a8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   210aa:	bf14      	ite	ne
   210ac:	2300      	movne	r3, #0
   210ae:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   210b0:	9301      	str	r3, [sp, #4]
   210b2:	8a63      	ldrh	r3, [r4, #18]
   210b4:	9300      	str	r3, [sp, #0]
   210b6:	4631      	mov	r1, r6
   210b8:	8a23      	ldrh	r3, [r4, #16]
   210ba:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   210bc:	1e03      	subs	r3, r0, #0
   210be:	db05      	blt.n	210cc <write_cb+0x42>
   210c0:	8a22      	ldrh	r2, [r4, #16]
   210c2:	4293      	cmp	r3, r2
   210c4:	d10b      	bne.n	210de <write_cb+0x54>
	data->err = 0U;
   210c6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   210c8:	2501      	movs	r5, #1
   210ca:	e005      	b.n	210d8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   210cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   210d0:	d305      	bcc.n	210de <write_cb+0x54>
		return -err;
   210d2:	425b      	negs	r3, r3
   210d4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   210d6:	7523      	strb	r3, [r4, #20]
}
   210d8:	4628      	mov	r0, r5
   210da:	b003      	add	sp, #12
   210dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   210de:	230e      	movs	r3, #14
   210e0:	e7f9      	b.n	210d6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   210e2:	2500      	movs	r5, #0
   210e4:	e7f8      	b.n	210d8 <write_cb+0x4e>

000210e6 <bt_att_sent>:
{
   210e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   210e8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   210ec:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   210f0:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   210f2:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   210f6:	b10b      	cbz	r3, 210fc <bt_att_sent+0x16>
		chan->sent(chan);
   210f8:	4638      	mov	r0, r7
   210fa:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   210fc:	f3bf 8f5b 	dmb	ish
   21100:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   21104:	e853 2f00 	ldrex	r2, [r3]
   21108:	f022 0210 	bic.w	r2, r2, #16
   2110c:	e843 2100 	strex	r1, r2, [r3]
   21110:	2900      	cmp	r1, #0
   21112:	d1f7      	bne.n	21104 <bt_att_sent+0x1e>
   21114:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21118:	b335      	cbz	r5, 21168 <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2111a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2111e:	b98b      	cbnz	r3, 21144 <bt_att_sent+0x5e>
   21120:	686b      	ldr	r3, [r5, #4]
   21122:	b17b      	cbz	r3, 21144 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21124:	1d28      	adds	r0, r5, #4
   21126:	f7ff fdb0 	bl	20c8a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2112a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2112c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2112e:	4638      	mov	r0, r7
   21130:	f7ff ff47 	bl	20fc2 <chan_req_send>
   21134:	2800      	cmp	r0, #0
   21136:	da17      	bge.n	21168 <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   21138:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2113a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2113c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2113e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21140:	b903      	cbnz	r3, 21144 <bt_att_sent+0x5e>
	list->tail = node;
   21142:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   21144:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   21148:	4638      	mov	r0, r7
   2114a:	f7ff ff02 	bl	20f52 <process_queue>
	if (!err) {
   2114e:	b158      	cbz	r0, 21168 <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   21150:	f105 010c 	add.w	r1, r5, #12
   21154:	4638      	mov	r0, r7
   21156:	f7ff fefc 	bl	20f52 <process_queue>
	if (!err) {
   2115a:	b128      	cbz	r0, 21168 <bt_att_sent+0x82>
   2115c:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   21160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21164:	f7fc bebc 	b.w	1dee0 <z_impl_k_sem_give>
   21168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002116a <read_cb>:
{
   2116a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2116e:	f8d2 8000 	ldr.w	r8, [r2]
{
   21172:	4606      	mov	r6, r0
	data->err = 0x00;
   21174:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21176:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2117a:	7317      	strb	r7, [r2, #12]
{
   2117c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2117e:	4631      	mov	r1, r6
   21180:	2215      	movs	r2, #21
   21182:	f000 fb4e 	bl	21822 <bt_gatt_check_perm>
   21186:	4604      	mov	r4, r0
   21188:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2118a:	b9a0      	cbnz	r0, 211b6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2118c:	e9cd 0000 	strd	r0, r0, [sp]
   21190:	88ab      	ldrh	r3, [r5, #4]
   21192:	68aa      	ldr	r2, [r5, #8]
   21194:	4631      	mov	r1, r6
   21196:	4640      	mov	r0, r8
   21198:	f7ff fdf4 	bl	20d84 <att_chan_read>
	if (ret < 0) {
   2119c:	1e03      	subs	r3, r0, #0
   2119e:	da0c      	bge.n	211ba <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   211a0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   211a4:	bf26      	itte	cs
   211a6:	425b      	negcs	r3, r3
   211a8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   211aa:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   211ac:	732b      	strb	r3, [r5, #12]
}
   211ae:	4620      	mov	r0, r4
   211b0:	b002      	add	sp, #8
   211b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   211b6:	463c      	mov	r4, r7
   211b8:	e7f9      	b.n	211ae <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   211ba:	2401      	movs	r4, #1
   211bc:	e7f7      	b.n	211ae <read_cb+0x44>

000211be <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   211be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211c2:	4688      	mov	r8, r1
   211c4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   211c6:	2101      	movs	r1, #1
   211c8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   211ca:	4605      	mov	r5, r0
   211cc:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   211ce:	f7f8 fa25 	bl	1961c <bt_att_chan_create_pdu>
	if (!buf) {
   211d2:	4604      	mov	r4, r0
   211d4:	b170      	cbz	r0, 211f4 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   211d6:	2104      	movs	r1, #4
   211d8:	3008      	adds	r0, #8
   211da:	f000 fc41 	bl	21a60 <net_buf_simple_add>
	rsp->request = req;
   211de:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   211e2:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   211e4:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   211e8:	4621      	mov	r1, r4
   211ea:	4628      	mov	r0, r5
}
   211ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   211f0:	f7f8 b996 	b.w	19520 <bt_att_chan_send_rsp.constprop.0>
}
   211f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000211f8 <att_read_blob_req>:
{
   211f8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   211fa:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   211fc:	8813      	ldrh	r3, [r2, #0]
   211fe:	8852      	ldrh	r2, [r2, #2]
   21200:	9200      	str	r2, [sp, #0]
   21202:	210c      	movs	r1, #12
   21204:	220d      	movs	r2, #13
   21206:	f7f8 fc53 	bl	19ab0 <att_read_rsp>
}
   2120a:	b003      	add	sp, #12
   2120c:	f85d fb04 	ldr.w	pc, [sp], #4

00021210 <att_read_req>:
{
   21210:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21212:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21214:	2200      	movs	r2, #0
   21216:	881b      	ldrh	r3, [r3, #0]
   21218:	9200      	str	r2, [sp, #0]
   2121a:	210a      	movs	r1, #10
   2121c:	220b      	movs	r2, #11
   2121e:	f7f8 fc47 	bl	19ab0 <att_read_rsp>
}
   21222:	b003      	add	sp, #12
   21224:	f85d fb04 	ldr.w	pc, [sp], #4

00021228 <att_mtu_req>:
{
   21228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2122a:	6803      	ldr	r3, [r0, #0]
{
   2122c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2122e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21230:	f3bf 8f5b 	dmb	ish
   21234:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   21238:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2123c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   21240:	071b      	lsls	r3, r3, #28
   21242:	d41e      	bmi.n	21282 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21244:	688b      	ldr	r3, [r1, #8]
   21246:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21248:	2e16      	cmp	r6, #22
   2124a:	d91c      	bls.n	21286 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2124c:	2202      	movs	r2, #2
   2124e:	2103      	movs	r1, #3
   21250:	f7f8 fb32 	bl	198b8 <bt_att_create_pdu>
	if (!pdu) {
   21254:	4607      	mov	r7, r0
   21256:	b1c0      	cbz	r0, 2128a <att_mtu_req+0x62>
   21258:	2102      	movs	r1, #2
   2125a:	3008      	adds	r0, #8
   2125c:	f000 fc00 	bl	21a60 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21260:	f06f 0308 	mvn.w	r3, #8
   21264:	7003      	strb	r3, [r0, #0]
   21266:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21268:	4639      	mov	r1, r7
   2126a:	4628      	mov	r0, r5
   2126c:	f7f8 f958 	bl	19520 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21270:	2ef7      	cmp	r6, #247	; 0xf7
   21272:	bf28      	it	cs
   21274:	26f7      	movcs	r6, #247	; 0xf7
   21276:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2127a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   2127e:	4620      	mov	r0, r4
}
   21280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21282:	2006      	movs	r0, #6
   21284:	e7fc      	b.n	21280 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   21286:	2004      	movs	r0, #4
   21288:	e7fa      	b.n	21280 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   2128a:	200e      	movs	r0, #14
   2128c:	e7f8      	b.n	21280 <att_mtu_req+0x58>

0002128e <bt_att_init>:
	bt_gatt_init();
   2128e:	f7f9 b937 	b.w	1a500 <bt_gatt_init>

00021292 <att_req_destroy>:
{
   21292:	b510      	push	{r4, lr}
   21294:	4604      	mov	r4, r0
	if (req->buf) {
   21296:	6900      	ldr	r0, [r0, #16]
   21298:	b108      	cbz	r0, 2129e <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2129a:	f7f9 fd51 	bl	1ad40 <net_buf_unref>
	if (req->destroy) {
   2129e:	68a3      	ldr	r3, [r4, #8]
   212a0:	b10b      	cbz	r3, 212a6 <att_req_destroy+0x14>
		req->destroy(req);
   212a2:	4620      	mov	r0, r4
   212a4:	4798      	blx	r3
	bt_att_req_free(req);
   212a6:	4620      	mov	r0, r4
}
   212a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   212ac:	f7f8 bd60 	b.w	19d70 <bt_att_req_free>

000212b0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   212b0:	898a      	ldrh	r2, [r1, #12]
   212b2:	6889      	ldr	r1, [r1, #8]
   212b4:	2300      	movs	r3, #0
   212b6:	f7f8 bd67 	b.w	19d88 <att_handle_rsp>

000212ba <att_chan_detach>:
{
   212ba:	b570      	push	{r4, r5, r6, lr}
   212bc:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   212be:	6800      	ldr	r0, [r0, #0]
   212c0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   212c4:	3024      	adds	r0, #36	; 0x24
   212c6:	f7ff fcea 	bl	20c9e <sys_slist_find_and_remove>
   212ca:	2505      	movs	r5, #5
		k_sem_give(&chan->tx_sem);
   212cc:	f504 7688 	add.w	r6, r4, #272	; 0x110
   212d0:	4630      	mov	r0, r6
   212d2:	f7fc fe05 	bl	1dee0 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   212d6:	3d01      	subs	r5, #1
   212d8:	d1fa      	bne.n	212d0 <att_chan_detach+0x16>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   212da:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   212de:	2200      	movs	r2, #0
   212e0:	2300      	movs	r3, #0
   212e2:	4628      	mov	r0, r5
   212e4:	f000 fb6b 	bl	219be <net_buf_get>
   212e8:	4602      	mov	r2, r0
   212ea:	b950      	cbnz	r0, 21302 <att_chan_detach+0x48>
	if (chan->req) {
   212ec:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   212f0:	b123      	cbz	r3, 212fc <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   212f2:	4601      	mov	r1, r0
   212f4:	230e      	movs	r3, #14
   212f6:	4620      	mov	r0, r4
   212f8:	f7f8 fd46 	bl	19d88 <att_handle_rsp>
	chan->att = NULL;
   212fc:	2300      	movs	r3, #0
   212fe:	6023      	str	r3, [r4, #0]
}
   21300:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   21302:	f7f9 fd1d 	bl	1ad40 <net_buf_unref>
   21306:	e7ea      	b.n	212de <att_chan_detach+0x24>

00021308 <bt_att_disconnected>:
{
   21308:	b538      	push	{r3, r4, r5, lr}
   2130a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2130c:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   21310:	f7ff ffd3 	bl	212ba <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   21314:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21316:	b93b      	cbnz	r3, 21328 <bt_att_disconnected+0x20>
	att_reset(att);
   21318:	4628      	mov	r0, r5
   2131a:	f7f8 fdaf 	bl	19e7c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2131e:	6820      	ldr	r0, [r4, #0]
}
   21320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   21324:	f7f9 bbfe 	b.w	1ab24 <bt_gatt_disconnected>
}
   21328:	bd38      	pop	{r3, r4, r5, pc}

0002132a <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2132a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2132e:	4605      	mov	r5, r0
   21330:	460e      	mov	r6, r1
   21332:	4614      	mov	r4, r2
   21334:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21336:	f7f8 f839 	bl	193ac <att_get>
	if (!att) {
   2133a:	4607      	mov	r7, r0
   2133c:	b938      	cbnz	r0, 2134e <bt_att_send+0x24>
		net_buf_unref(buf);
   2133e:	4630      	mov	r0, r6
   21340:	f7f9 fcfe 	bl	1ad40 <net_buf_unref>
		return -ENOTCONN;
   21344:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   21348:	b002      	add	sp, #8
   2134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2134e:	b144      	cbz	r4, 21362 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21350:	f8cd 8000 	str.w	r8, [sp]
   21354:	4623      	mov	r3, r4
   21356:	4632      	mov	r2, r6
   21358:	2104      	movs	r1, #4
   2135a:	4628      	mov	r0, r5
   2135c:	f7ff fc5b 	bl	20c16 <bt_l2cap_send_cb>
   21360:	e7f2      	b.n	21348 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21362:	6a44      	ldr	r4, [r0, #36]	; 0x24
   21364:	b184      	cbz	r4, 21388 <bt_att_send+0x5e>
   21366:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   2136a:	d00f      	beq.n	2138c <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2136c:	6824      	ldr	r4, [r4, #0]
   2136e:	b10c      	cbz	r4, 21374 <bt_att_send+0x4a>
   21370:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   21374:	2000      	movs	r0, #0
   21376:	b95d      	cbnz	r5, 21390 <bt_att_send+0x66>
	if (ret < 0) {
   21378:	b1c8      	cbz	r0, 213ae <bt_att_send+0x84>
		net_buf_put(&att->tx_queue, buf);
   2137a:	f107 000c 	add.w	r0, r7, #12
   2137e:	4631      	mov	r1, r6
   21380:	f000 fb3b 	bl	219fa <net_buf_put>
	return 0;
   21384:	4628      	mov	r0, r5
   21386:	e7df      	b.n	21348 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21388:	4625      	mov	r5, r4
   2138a:	e7f3      	b.n	21374 <bt_att_send+0x4a>
   2138c:	462c      	mov	r4, r5
   2138e:	e7f1      	b.n	21374 <bt_att_send+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   21390:	2200      	movs	r2, #0
   21392:	2300      	movs	r3, #0
   21394:	f505 7088 	add.w	r0, r5, #272	; 0x110
   21398:	f7fc fdc8 	bl	1df2c <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   2139c:	2800      	cmp	r0, #0
   2139e:	db08      	blt.n	213b2 <bt_att_send+0x88>
	return chan_send(chan, buf, cb);
   213a0:	2200      	movs	r2, #0
   213a2:	4631      	mov	r1, r6
   213a4:	4628      	mov	r0, r5
   213a6:	f7f7 ff8b 	bl	192c0 <chan_send>
		if (ret >= 0) {
   213aa:	2800      	cmp	r0, #0
   213ac:	db03      	blt.n	213b6 <bt_att_send+0x8c>
	return 0;
   213ae:	2000      	movs	r0, #0
   213b0:	e7ca      	b.n	21348 <bt_att_send+0x1e>
			return -EAGAIN;
   213b2:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   213b6:	b154      	cbz	r4, 213ce <bt_att_send+0xa4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   213b8:	f514 7296 	adds.w	r2, r4, #300	; 0x12c
   213bc:	d004      	beq.n	213c8 <bt_att_send+0x9e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   213be:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   213c2:	b10a      	cbz	r2, 213c8 <bt_att_send+0x9e>
   213c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
   213c8:	4625      	mov	r5, r4
   213ca:	4614      	mov	r4, r2
   213cc:	e7d3      	b.n	21376 <bt_att_send+0x4c>
   213ce:	4622      	mov	r2, r4
   213d0:	e7fa      	b.n	213c8 <bt_att_send+0x9e>

000213d2 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   213d2:	b570      	push	{r4, r5, r6, lr}
   213d4:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   213d6:	f7f7 ffe9 	bl	193ac <att_get>
	if (!att) {
   213da:	4605      	mov	r5, r0
   213dc:	b930      	cbnz	r0, 213ec <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   213de:	6920      	ldr	r0, [r4, #16]
   213e0:	f7f9 fcae 	bl	1ad40 <net_buf_unref>
		req->buf = NULL;
   213e4:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   213e6:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   213ea:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   213ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
   213ee:	b153      	cbz	r3, 21406 <bt_att_req_send+0x34>
   213f0:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   213f4:	d007      	beq.n	21406 <bt_att_req_send+0x34>
   213f6:	681e      	ldr	r6, [r3, #0]
   213f8:	b10e      	cbz	r6, 213fe <bt_att_req_send+0x2c>
   213fa:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   213fe:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21402:	b143      	cbz	r3, 21416 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21404:	b96e      	cbnz	r6, 21422 <bt_att_req_send+0x50>
	parent->next = child;
   21406:	2000      	movs	r0, #0
   21408:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2140a:	68ab      	ldr	r3, [r5, #8]
   2140c:	b9a3      	cbnz	r3, 21438 <bt_att_req_send+0x66>
	list->head = node;
   2140e:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   21412:	4618      	mov	r0, r3
}
   21414:	e7e9      	b.n	213ea <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   21416:	4621      	mov	r1, r4
   21418:	f7ff fdf9 	bl	2100e <bt_att_chan_req_send>
			if (ret >= 0) {
   2141c:	2800      	cmp	r0, #0
   2141e:	dbf1      	blt.n	21404 <bt_att_req_send+0x32>
   21420:	e7e3      	b.n	213ea <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21422:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   21426:	d004      	beq.n	21432 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21428:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2142c:	b10b      	cbz	r3, 21432 <bt_att_req_send+0x60>
   2142e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   21432:	4630      	mov	r0, r6
   21434:	461e      	mov	r6, r3
   21436:	e7e2      	b.n	213fe <bt_att_req_send+0x2c>
	parent->next = child;
   21438:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2143a:	60ac      	str	r4, [r5, #8]
}
   2143c:	e7d5      	b.n	213ea <bt_att_req_send+0x18>

0002143e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2143e:	6010      	str	r0, [r2, #0]
}
   21440:	2000      	movs	r0, #0
   21442:	4770      	bx	lr

00021444 <gatt_ccc_changed>:
{
   21444:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21446:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21448:	895a      	ldrh	r2, [r3, #10]
   2144a:	428a      	cmp	r2, r1
   2144c:	d003      	beq.n	21456 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2144e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21450:	68db      	ldr	r3, [r3, #12]
   21452:	b103      	cbz	r3, 21456 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21454:	4718      	bx	r3
}
   21456:	4770      	bx	lr

00021458 <gatt_indicate_rsp>:
{
   21458:	b510      	push	{r4, lr}
   2145a:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   2145c:	7da3      	ldrb	r3, [r4, #22]
   2145e:	3b01      	subs	r3, #1
{
   21460:	460a      	mov	r2, r1
	params->_ref--;
   21462:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   21464:	4621      	mov	r1, r4
   21466:	68a3      	ldr	r3, [r4, #8]
   21468:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   2146a:	68e3      	ldr	r3, [r4, #12]
   2146c:	b12b      	cbz	r3, 2147a <gatt_indicate_rsp+0x22>
   2146e:	7da2      	ldrb	r2, [r4, #22]
   21470:	b91a      	cbnz	r2, 2147a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   21472:	4620      	mov	r0, r4
}
   21474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21478:	4718      	bx	r3
}
   2147a:	bd10      	pop	{r4, pc}

0002147c <match_uuid>:
	data->attr = attr;
   2147c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2147e:	8091      	strh	r1, [r2, #4]
}
   21480:	2000      	movs	r0, #0
   21482:	4770      	bx	lr

00021484 <gen_hash_m>:
{
   21484:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21486:	6807      	ldr	r7, [r0, #0]
   21488:	783d      	ldrb	r5, [r7, #0]
{
   2148a:	b089      	sub	sp, #36	; 0x24
   2148c:	4606      	mov	r6, r0
   2148e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21490:	b10d      	cbz	r5, 21496 <gen_hash_m+0x12>
	switch (u16->val) {
   21492:	2501      	movs	r5, #1
   21494:	e014      	b.n	214c0 <gen_hash_m+0x3c>
   21496:	887b      	ldrh	r3, [r7, #2]
   21498:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2149c:	d004      	beq.n	214a8 <gen_hash_m+0x24>
   2149e:	d812      	bhi.n	214c6 <gen_hash_m+0x42>
   214a0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   214a4:	2b03      	cmp	r3, #3
   214a6:	d8f4      	bhi.n	21492 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   214a8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   214ac:	2202      	movs	r2, #2
   214ae:	f10d 010e 	add.w	r1, sp, #14
   214b2:	4620      	mov	r0, r4
   214b4:	f7fe ffae 	bl	20414 <tc_cmac_update>
   214b8:	b9e0      	cbnz	r0, 214f4 <gen_hash_m+0x70>
			state->err = -EINVAL;
   214ba:	f06f 0315 	mvn.w	r3, #21
   214be:	65a3      	str	r3, [r4, #88]	; 0x58
}
   214c0:	4628      	mov	r0, r5
   214c2:	b009      	add	sp, #36	; 0x24
   214c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   214c6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   214ca:	33ff      	adds	r3, #255	; 0xff
   214cc:	b29b      	uxth	r3, r3
   214ce:	2b04      	cmp	r3, #4
   214d0:	d8df      	bhi.n	21492 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   214d2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   214d6:	2202      	movs	r2, #2
   214d8:	f10d 010e 	add.w	r1, sp, #14
   214dc:	4620      	mov	r0, r4
   214de:	f7fe ff99 	bl	20414 <tc_cmac_update>
   214e2:	2800      	cmp	r0, #0
   214e4:	d0e9      	beq.n	214ba <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   214e6:	887b      	ldrh	r3, [r7, #2]
   214e8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   214ec:	2202      	movs	r2, #2
   214ee:	f10d 010e 	add.w	r1, sp, #14
   214f2:	e017      	b.n	21524 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   214f4:	887b      	ldrh	r3, [r7, #2]
   214f6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   214fa:	2202      	movs	r2, #2
   214fc:	f10d 010e 	add.w	r1, sp, #14
   21500:	4620      	mov	r0, r4
   21502:	f7fe ff87 	bl	20414 <tc_cmac_update>
   21506:	2800      	cmp	r0, #0
   21508:	d0d7      	beq.n	214ba <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2150a:	2000      	movs	r0, #0
   2150c:	2310      	movs	r3, #16
   2150e:	eb0d 0203 	add.w	r2, sp, r3
   21512:	6877      	ldr	r7, [r6, #4]
   21514:	9000      	str	r0, [sp, #0]
   21516:	4631      	mov	r1, r6
   21518:	47b8      	blx	r7
		if (len < 0) {
   2151a:	1e02      	subs	r2, r0, #0
   2151c:	da01      	bge.n	21522 <gen_hash_m+0x9e>
			state->err = len;
   2151e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21520:	e7ce      	b.n	214c0 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21522:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21524:	4620      	mov	r0, r4
   21526:	f7fe ff75 	bl	20414 <tc_cmac_update>
   2152a:	2800      	cmp	r0, #0
   2152c:	d1b1      	bne.n	21492 <gen_hash_m+0xe>
   2152e:	e7c4      	b.n	214ba <gen_hash_m+0x36>

00021530 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21530:	2301      	movs	r3, #1
   21532:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21534:	f3bf 8f5b 	dmb	ish
   21538:	e850 2f00 	ldrex	r2, [r0]
   2153c:	431a      	orrs	r2, r3
   2153e:	e840 2100 	strex	r1, r2, [r0]
   21542:	2900      	cmp	r1, #0
   21544:	d1f8      	bne.n	21538 <atomic_set_bit+0x8>
   21546:	f3bf 8f5b 	dmb	ish
}
   2154a:	4770      	bx	lr

0002154c <sc_restore_rsp>:
{
   2154c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2154e:	f7f8 fd77 	bl	1a040 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21552:	b140      	cbz	r0, 21566 <sc_restore_rsp+0x1a>
   21554:	7a03      	ldrb	r3, [r0, #8]
   21556:	07db      	lsls	r3, r3, #31
   21558:	d505      	bpl.n	21566 <sc_restore_rsp+0x1a>
}
   2155a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2155e:	2100      	movs	r1, #0
   21560:	300c      	adds	r0, #12
   21562:	f7ff bfe5 	b.w	21530 <atomic_set_bit>
}
   21566:	bd08      	pop	{r3, pc}

00021568 <find_ccc_cfg>:
{
   21568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2156a:	460c      	mov	r4, r1
   2156c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2156e:	b148      	cbz	r0, 21584 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21570:	7809      	ldrb	r1, [r1, #0]
   21572:	462a      	mov	r2, r5
   21574:	f7ff fa5f 	bl	20a36 <bt_conn_is_peer_addr_le>
   21578:	2800      	cmp	r0, #0
	return NULL;
   2157a:	bf08      	it	eq
   2157c:	2400      	moveq	r4, #0
}
   2157e:	4620      	mov	r0, r4
   21580:	b003      	add	sp, #12
   21582:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21584:	9000      	str	r0, [sp, #0]
   21586:	2207      	movs	r2, #7
   21588:	f8cd 0003 	str.w	r0, [sp, #3]
   2158c:	4669      	mov	r1, sp
   2158e:	4628      	mov	r0, r5
   21590:	f7ff f829 	bl	205e6 <memcmp>
   21594:	2800      	cmp	r0, #0
	return NULL;
   21596:	bf18      	it	ne
   21598:	2400      	movne	r4, #0
   2159a:	e7f0      	b.n	2157e <find_ccc_cfg+0x16>

0002159c <clear_cf_cfg>:
{
   2159c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2159e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   215a0:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   215a2:	2207      	movs	r2, #7
   215a4:	4669      	mov	r1, sp
   215a6:	3001      	adds	r0, #1
   215a8:	9500      	str	r5, [sp, #0]
   215aa:	f8cd 5003 	str.w	r5, [sp, #3]
   215ae:	f7ff f841 	bl	20634 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   215b2:	f104 0008 	add.w	r0, r4, #8
   215b6:	2201      	movs	r2, #1
   215b8:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   215ba:	340c      	adds	r4, #12
   215bc:	f7ff f865 	bl	2068a <memset>
   215c0:	f3bf 8f5b 	dmb	ish
   215c4:	e854 3f00 	ldrex	r3, [r4]
   215c8:	e844 5200 	strex	r2, r5, [r4]
   215cc:	2a00      	cmp	r2, #0
   215ce:	d1f9      	bne.n	215c4 <clear_cf_cfg+0x28>
   215d0:	f3bf 8f5b 	dmb	ish
}
   215d4:	b003      	add	sp, #12
   215d6:	bd30      	pop	{r4, r5, pc}

000215d8 <read_appearance>:
{
   215d8:	b513      	push	{r0, r1, r4, lr}
   215da:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   215de:	4610      	mov	r0, r2
	if (offset > value_len) {
   215e0:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   215e2:	f240 32c2 	movw	r2, #962	; 0x3c2
   215e6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   215ea:	d80d      	bhi.n	21608 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   215ec:	f1c1 0402 	rsb	r4, r1, #2
   215f0:	429c      	cmp	r4, r3
   215f2:	bfa8      	it	ge
   215f4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   215f6:	f10d 0306 	add.w	r3, sp, #6
   215fa:	4622      	mov	r2, r4
   215fc:	4419      	add	r1, r3
   215fe:	f7ff f819 	bl	20634 <memcpy>
}
   21602:	4620      	mov	r0, r4
   21604:	b002      	add	sp, #8
   21606:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21608:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2160c:	e7f9      	b.n	21602 <read_appearance+0x2a>

0002160e <read_name>:
{
   2160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21612:	4698      	mov	r8, r3
   21614:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21618:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2161a:	f7f5 ff4b 	bl	174b4 <bt_get_name>
   2161e:	4607      	mov	r7, r0
				 strlen(name));
   21620:	f7fe ffc5 	bl	205ae <strlen>
	if (offset > value_len) {
   21624:	b283      	uxth	r3, r0
   21626:	42b3      	cmp	r3, r6
   21628:	d30c      	bcc.n	21644 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2162a:	1b9c      	subs	r4, r3, r6
   2162c:	4544      	cmp	r4, r8
   2162e:	bfa8      	it	ge
   21630:	4644      	movge	r4, r8
   21632:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21634:	4622      	mov	r2, r4
   21636:	19b9      	adds	r1, r7, r6
   21638:	4628      	mov	r0, r5
   2163a:	f7fe fffb 	bl	20634 <memcpy>
}
   2163e:	4620      	mov	r0, r4
   21640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21644:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21648:	e7f9      	b.n	2163e <read_name+0x30>

0002164a <bt_gatt_attr_read_ccc>:
{
   2164a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2164c:	68c9      	ldr	r1, [r1, #12]
{
   2164e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21652:	4615      	mov	r5, r2
   21654:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   21656:	f7ff ff87 	bl	21568 <find_ccc_cfg>
	if (cfg) {
   2165a:	b100      	cbz	r0, 2165e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2165c:	8900      	ldrh	r0, [r0, #8]
   2165e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21662:	2e02      	cmp	r6, #2
   21664:	d80e      	bhi.n	21684 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   21666:	f1c6 0402 	rsb	r4, r6, #2
   2166a:	42bc      	cmp	r4, r7
   2166c:	bfa8      	it	ge
   2166e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21670:	f10d 0306 	add.w	r3, sp, #6
   21674:	4622      	mov	r2, r4
   21676:	1999      	adds	r1, r3, r6
   21678:	4628      	mov	r0, r5
   2167a:	f7fe ffdb 	bl	20634 <memcpy>
}
   2167e:	4620      	mov	r0, r4
   21680:	b003      	add	sp, #12
   21682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21684:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21688:	e7f9      	b.n	2167e <bt_gatt_attr_read_ccc+0x34>

0002168a <cf_read>:
{
   2168a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2168c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2168e:	2300      	movs	r3, #0
{
   21690:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21694:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21698:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2169a:	f7f8 fcd1 	bl	1a040 <find_cf_cfg>
	if (cfg) {
   2169e:	b128      	cbz	r0, 216ac <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   216a0:	f100 0108 	add.w	r1, r0, #8
   216a4:	2201      	movs	r2, #1
   216a6:	a801      	add	r0, sp, #4
   216a8:	f7fe ffc4 	bl	20634 <memcpy>
	if (offset > value_len) {
   216ac:	2e01      	cmp	r6, #1
   216ae:	d80d      	bhi.n	216cc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   216b0:	f1c6 0401 	rsb	r4, r6, #1
   216b4:	42bc      	cmp	r4, r7
   216b6:	bfa8      	it	ge
   216b8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   216ba:	ab01      	add	r3, sp, #4
   216bc:	4622      	mov	r2, r4
   216be:	1999      	adds	r1, r3, r6
   216c0:	4628      	mov	r0, r5
   216c2:	f7fe ffb7 	bl	20634 <memcpy>
}
   216c6:	4620      	mov	r0, r4
   216c8:	b003      	add	sp, #12
   216ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   216cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   216d0:	e7f9      	b.n	216c6 <cf_read+0x3c>

000216d2 <bt_gatt_attr_read_service>:
{
   216d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   216d4:	68c9      	ldr	r1, [r1, #12]
{
   216d6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   216da:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   216dc:	780b      	ldrb	r3, [r1, #0]
{
   216de:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   216e0:	b993      	cbnz	r3, 21708 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   216e2:	884b      	ldrh	r3, [r1, #2]
   216e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   216e8:	2d02      	cmp	r5, #2
   216ea:	d819      	bhi.n	21720 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   216ec:	f1c5 0202 	rsb	r2, r5, #2
   216f0:	4294      	cmp	r4, r2
   216f2:	bfa8      	it	ge
   216f4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   216f6:	f10d 0306 	add.w	r3, sp, #6
   216fa:	4622      	mov	r2, r4
   216fc:	1959      	adds	r1, r3, r5
   216fe:	f7fe ff99 	bl	20634 <memcpy>
}
   21702:	4620      	mov	r0, r4
   21704:	b003      	add	sp, #12
   21706:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21708:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2170a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2170e:	d807      	bhi.n	21720 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21710:	f1c5 0210 	rsb	r2, r5, #16
   21714:	4294      	cmp	r4, r2
   21716:	bfa8      	it	ge
   21718:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2171a:	4622      	mov	r2, r4
   2171c:	4429      	add	r1, r5
   2171e:	e7ee      	b.n	216fe <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21720:	f06f 0406 	mvn.w	r4, #6
   21724:	e7ed      	b.n	21702 <bt_gatt_attr_read_service+0x30>

00021726 <sc_clear>:
{
   21726:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21728:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2172c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2172e:	4631      	mov	r1, r6
   21730:	7a00      	ldrb	r0, [r0, #8]
   21732:	f7ff f8ec 	bl	2090e <bt_addr_le_is_bonded>
   21736:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21738:	4631      	mov	r1, r6
   2173a:	f7f8 fc71 	bl	1a020 <find_sc_cfg>
	if (!cfg) {
   2173e:	b128      	cbz	r0, 2174c <sc_clear+0x26>
}
   21740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   21744:	220c      	movs	r2, #12
   21746:	2100      	movs	r1, #0
   21748:	f7fe bf9f 	b.w	2068a <memset>
}
   2174c:	bd70      	pop	{r4, r5, r6, pc}

0002174e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2174e:	2a02      	cmp	r2, #2
{
   21750:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21752:	d108      	bne.n	21766 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21754:	2300      	movs	r3, #0
   21756:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2175a:	461a      	mov	r2, r3
   2175c:	7a00      	ldrb	r0, [r0, #8]
   2175e:	f7f8 fde1 	bl	1a324 <sc_save>
}
   21762:	2002      	movs	r0, #2
   21764:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21766:	f7ff ffde 	bl	21726 <sc_clear>
   2176a:	e7fa      	b.n	21762 <sc_ccc_cfg_write+0x14>

0002176c <bt_gatt_attr_value_handle>:
{
   2176c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2176e:	4604      	mov	r4, r0
   21770:	b910      	cbnz	r0, 21778 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   21772:	2000      	movs	r0, #0
}
   21774:	b002      	add	sp, #8
   21776:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21778:	2300      	movs	r3, #0
   2177a:	f88d 3004 	strb.w	r3, [sp, #4]
   2177e:	6800      	ldr	r0, [r0, #0]
   21780:	f642 0303 	movw	r3, #10243	; 0x2803
   21784:	a901      	add	r1, sp, #4
   21786:	f8ad 3006 	strh.w	r3, [sp, #6]
   2178a:	f7fe ffa3 	bl	206d4 <bt_uuid_cmp>
   2178e:	2800      	cmp	r0, #0
   21790:	d1ef      	bne.n	21772 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   21792:	68e3      	ldr	r3, [r4, #12]
   21794:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   21796:	2800      	cmp	r0, #0
   21798:	d1ec      	bne.n	21774 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2179a:	4620      	mov	r0, r4
   2179c:	f7f8 ff0a 	bl	1a5b4 <bt_gatt_attr_get_handle>
   217a0:	3001      	adds	r0, #1
   217a2:	b280      	uxth	r0, r0
	return handle;
   217a4:	e7e6      	b.n	21774 <bt_gatt_attr_value_handle+0x8>

000217a6 <bt_gatt_attr_read_chrc>:
{
   217a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   217a8:	68cf      	ldr	r7, [r1, #12]
{
   217aa:	b087      	sub	sp, #28
   217ac:	4608      	mov	r0, r1
   217ae:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   217b0:	79bb      	ldrb	r3, [r7, #6]
   217b2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   217b6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   217ba:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   217bc:	f7ff ffd6 	bl	2176c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   217c0:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   217c2:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   217c6:	780b      	ldrb	r3, [r1, #0]
   217c8:	b99b      	cbnz	r3, 217f2 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   217ca:	884b      	ldrh	r3, [r1, #2]
   217cc:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   217d0:	2105      	movs	r1, #5
	if (offset > value_len) {
   217d2:	42b1      	cmp	r1, r6
   217d4:	d315      	bcc.n	21802 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   217d6:	1b89      	subs	r1, r1, r6
   217d8:	42a1      	cmp	r1, r4
   217da:	bfa8      	it	ge
   217dc:	4621      	movge	r1, r4
   217de:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   217e0:	ab01      	add	r3, sp, #4
   217e2:	4622      	mov	r2, r4
   217e4:	1999      	adds	r1, r3, r6
   217e6:	4628      	mov	r0, r5
   217e8:	f7fe ff24 	bl	20634 <memcpy>
}
   217ec:	4620      	mov	r0, r4
   217ee:	b007      	add	sp, #28
   217f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   217f2:	3101      	adds	r1, #1
   217f4:	2210      	movs	r2, #16
   217f6:	f10d 0007 	add.w	r0, sp, #7
   217fa:	f7fe ff1b 	bl	20634 <memcpy>
		value_len += 16U;
   217fe:	2113      	movs	r1, #19
   21800:	e7e7      	b.n	217d2 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21802:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21806:	e7f1      	b.n	217ec <bt_gatt_attr_read_chrc+0x46>

00021808 <bt_gatt_foreach_attr>:
{
   21808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2180a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2180e:	2300      	movs	r3, #0
   21810:	9300      	str	r3, [sp, #0]
   21812:	461a      	mov	r2, r3
   21814:	f7f8 fefe 	bl	1a614 <bt_gatt_foreach_attr_type>
}
   21818:	b005      	add	sp, #20
   2181a:	f85d fb04 	ldr.w	pc, [sp], #4

0002181e <db_hash_process>:
	db_hash_gen(true);
   2181e:	f7f8 bf53 	b.w	1a6c8 <db_hash_gen.isra.0>

00021822 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   21822:	07d3      	lsls	r3, r2, #31
{
   21824:	b510      	push	{r4, lr}
   21826:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21828:	d504      	bpl.n	21834 <bt_gatt_check_perm+0x12>
   2182a:	f014 0f15 	tst.w	r4, #21
   2182e:	d017      	beq.n	21860 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21830:	684b      	ldr	r3, [r1, #4]
   21832:	b1ab      	cbz	r3, 21860 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21834:	0793      	lsls	r3, r2, #30
   21836:	d504      	bpl.n	21842 <bt_gatt_check_perm+0x20>
   21838:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2183c:	d012      	beq.n	21864 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2183e:	688b      	ldr	r3, [r1, #8]
   21840:	b183      	cbz	r3, 21864 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   21842:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21844:	f014 0f30 	tst.w	r4, #48	; 0x30
   21848:	d104      	bne.n	21854 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2184a:	f014 000c 	ands.w	r0, r4, #12
   2184e:	bf18      	it	ne
   21850:	200f      	movne	r0, #15
}
   21852:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21854:	f7ff f8e4 	bl	20a20 <bt_conn_get_security>
   21858:	2802      	cmp	r0, #2
   2185a:	d8f6      	bhi.n	2184a <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2185c:	2005      	movs	r0, #5
   2185e:	e7f8      	b.n	21852 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21860:	2002      	movs	r0, #2
   21862:	e7f6      	b.n	21852 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21864:	2003      	movs	r0, #3
   21866:	e7f4      	b.n	21852 <bt_gatt_check_perm+0x30>

00021868 <bt_gatt_is_subscribed>:
{
   21868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2186a:	7a83      	ldrb	r3, [r0, #10]
   2186c:	2b07      	cmp	r3, #7
{
   2186e:	4606      	mov	r6, r0
   21870:	460c      	mov	r4, r1
   21872:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   21874:	d002      	beq.n	2187c <bt_gatt_is_subscribed+0x14>
		return false;
   21876:	2000      	movs	r0, #0
}
   21878:	b003      	add	sp, #12
   2187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2187c:	2300      	movs	r3, #0
   2187e:	f88d 3004 	strb.w	r3, [sp, #4]
   21882:	6820      	ldr	r0, [r4, #0]
   21884:	f642 0303 	movw	r3, #10243	; 0x2803
   21888:	a901      	add	r1, sp, #4
   2188a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2188e:	f7fe ff21 	bl	206d4 <bt_uuid_cmp>
   21892:	b940      	cbnz	r0, 218a6 <bt_gatt_is_subscribed+0x3e>
		if (!(chrc->properties &
   21894:	68e3      	ldr	r3, [r4, #12]
   21896:	799b      	ldrb	r3, [r3, #6]
   21898:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   2189c:	d0ec      	beq.n	21878 <bt_gatt_is_subscribed+0x10>
		attr = bt_gatt_attr_next(attr);
   2189e:	4620      	mov	r0, r4
   218a0:	f7f8 ff5a 	bl	1a758 <bt_gatt_attr_next>
   218a4:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   218a6:	2300      	movs	r3, #0
   218a8:	6820      	ldr	r0, [r4, #0]
   218aa:	f88d 3004 	strb.w	r3, [sp, #4]
   218ae:	a901      	add	r1, sp, #4
   218b0:	f642 1302 	movw	r3, #10498	; 0x2902
   218b4:	f8ad 3006 	strh.w	r3, [sp, #6]
   218b8:	f7fe ff0c 	bl	206d4 <bt_uuid_cmp>
   218bc:	b118      	cbz	r0, 218c6 <bt_gatt_is_subscribed+0x5e>
		attr = bt_gatt_attr_next(attr);
   218be:	4620      	mov	r0, r4
   218c0:	f7f8 ff4a 	bl	1a758 <bt_gatt_attr_next>
   218c4:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   218c6:	6820      	ldr	r0, [r4, #0]
   218c8:	2500      	movs	r5, #0
   218ca:	f642 1302 	movw	r3, #10498	; 0x2902
   218ce:	a901      	add	r1, sp, #4
   218d0:	f88d 5004 	strb.w	r5, [sp, #4]
   218d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   218d8:	f7fe fefc 	bl	206d4 <bt_uuid_cmp>
   218dc:	2800      	cmp	r0, #0
   218de:	d1ca      	bne.n	21876 <bt_gatt_is_subscribed+0xe>
	ccc = attr->user_data;
   218e0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   218e2:	4622      	mov	r2, r4
   218e4:	4630      	mov	r0, r6
   218e6:	f812 1b01 	ldrb.w	r1, [r2], #1
   218ea:	f7ff f8a4 	bl	20a36 <bt_conn_is_peer_addr_le>
   218ee:	2800      	cmp	r0, #0
   218f0:	d0c1      	beq.n	21876 <bt_gatt_is_subscribed+0xe>
   218f2:	8923      	ldrh	r3, [r4, #8]
   218f4:	421f      	tst	r7, r3
   218f6:	bf14      	ite	ne
   218f8:	2001      	movne	r0, #1
   218fa:	2000      	moveq	r0, #0
   218fc:	e7bc      	b.n	21878 <bt_gatt_is_subscribed+0x10>

000218fe <bt_gatt_change_aware>:
{
   218fe:	b510      	push	{r4, lr}
   21900:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21902:	f7f8 fb9d 	bl	1a040 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21906:	4603      	mov	r3, r0
   21908:	b910      	cbnz	r0, 21910 <bt_gatt_change_aware+0x12>
		return true;
   2190a:	2401      	movs	r4, #1
}
   2190c:	4620      	mov	r0, r4
   2190e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21910:	7a02      	ldrb	r2, [r0, #8]
   21912:	07d2      	lsls	r2, r2, #31
   21914:	d5f9      	bpl.n	2190a <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21916:	f3bf 8f5b 	dmb	ish
   2191a:	68d9      	ldr	r1, [r3, #12]
   2191c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21920:	f011 0101 	ands.w	r1, r1, #1
   21924:	f100 000c 	add.w	r0, r0, #12
   21928:	d1ef      	bne.n	2190a <bt_gatt_change_aware+0xc>
	if (!req) {
   2192a:	2c00      	cmp	r4, #0
   2192c:	d0ee      	beq.n	2190c <bt_gatt_change_aware+0xe>
   2192e:	f3bf 8f5b 	dmb	ish
   21932:	68db      	ldr	r3, [r3, #12]
   21934:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21938:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2193c:	079b      	lsls	r3, r3, #30
   2193e:	d50e      	bpl.n	2195e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21940:	f3bf 8f5b 	dmb	ish
   21944:	e850 3f00 	ldrex	r3, [r0]
   21948:	f023 0302 	bic.w	r3, r3, #2
   2194c:	e840 3200 	strex	r2, r3, [r0]
   21950:	2a00      	cmp	r2, #0
   21952:	d1f7      	bne.n	21944 <bt_gatt_change_aware+0x46>
   21954:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21958:	f7ff fdea 	bl	21530 <atomic_set_bit>
	return false;
   2195c:	e7d6      	b.n	2190c <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2195e:	2101      	movs	r1, #1
   21960:	e7fa      	b.n	21958 <bt_gatt_change_aware+0x5a>

00021962 <bt_smp_recv>:
{
   21962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   21964:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   21966:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   21968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2196c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21970:	4608      	mov	r0, r1
   21972:	f7ff f94d 	bl	20c10 <bt_l2cap_create_pdu_timeout>
   21976:	f100 0608 	add.w	r6, r0, #8
   2197a:	4604      	mov	r4, r0
   2197c:	2101      	movs	r1, #1
   2197e:	4630      	mov	r0, r6
   21980:	f000 f86e 	bl	21a60 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   21984:	2505      	movs	r5, #5
   21986:	7005      	strb	r5, [r0, #0]
   21988:	2101      	movs	r1, #1
   2198a:	4630      	mov	r0, r6
   2198c:	f000 f868 	bl	21a60 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   21990:	7005      	strb	r5, [r0, #0]
   21992:	2500      	movs	r5, #0
   21994:	9500      	str	r5, [sp, #0]
   21996:	462b      	mov	r3, r5
   21998:	4622      	mov	r2, r4
   2199a:	2106      	movs	r1, #6
   2199c:	4638      	mov	r0, r7
   2199e:	f7ff f93a 	bl	20c16 <bt_l2cap_send_cb>
}
   219a2:	4628      	mov	r0, r5
   219a4:	b003      	add	sp, #12
   219a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000219a8 <bt_smp_sign>:
   219a8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   219ac:	4770      	bx	lr

000219ae <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   219ae:	2000      	movs	r0, #0
   219b0:	4770      	bx	lr

000219b2 <fixed_data_unref>:
}
   219b2:	4770      	bx	lr

000219b4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   219b4:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   219b6:	6849      	ldr	r1, [r1, #4]
   219b8:	6809      	ldr	r1, [r1, #0]
   219ba:	f7f9 b935 	b.w	1ac28 <net_buf_alloc_len>

000219be <net_buf_get>:
{
   219be:	b570      	push	{r4, r5, r6, lr}
   219c0:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   219c2:	f7fb febb 	bl	1d73c <z_impl_k_queue_get>
	if (!buf) {
   219c6:	4605      	mov	r5, r0
   219c8:	b128      	cbz	r0, 219d6 <net_buf_get+0x18>
   219ca:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   219cc:	7963      	ldrb	r3, [r4, #5]
   219ce:	f013 0301 	ands.w	r3, r3, #1
   219d2:	d102      	bne.n	219da <net_buf_get+0x1c>
	frag->frags = NULL;
   219d4:	6023      	str	r3, [r4, #0]
}
   219d6:	4628      	mov	r0, r5
   219d8:	bd70      	pop	{r4, r5, r6, pc}
   219da:	2300      	movs	r3, #0
   219dc:	2200      	movs	r2, #0
   219de:	4630      	mov	r0, r6
   219e0:	f7fb feac 	bl	1d73c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   219e4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   219e6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   219e8:	f023 0301 	bic.w	r3, r3, #1
   219ec:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   219ee:	4604      	mov	r4, r0
   219f0:	e7ec      	b.n	219cc <net_buf_get+0xe>

000219f2 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   219f2:	6883      	ldr	r3, [r0, #8]
   219f4:	440b      	add	r3, r1
   219f6:	6003      	str	r3, [r0, #0]
}
   219f8:	4770      	bx	lr

000219fa <net_buf_put>:
{
   219fa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   219fc:	460a      	mov	r2, r1
   219fe:	6814      	ldr	r4, [r2, #0]
   21a00:	b914      	cbnz	r4, 21a08 <net_buf_put+0xe>
}
   21a02:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   21a04:	f000 bc5d 	b.w	222c2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   21a08:	7953      	ldrb	r3, [r2, #5]
   21a0a:	f043 0301 	orr.w	r3, r3, #1
   21a0e:	7153      	strb	r3, [r2, #5]
   21a10:	4622      	mov	r2, r4
   21a12:	e7f4      	b.n	219fe <net_buf_put+0x4>

00021a14 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   21a14:	7902      	ldrb	r2, [r0, #4]
   21a16:	3201      	adds	r2, #1
   21a18:	7102      	strb	r2, [r0, #4]
	return buf;
}
   21a1a:	4770      	bx	lr

00021a1c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   21a1c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   21a1e:	4618      	mov	r0, r3
   21a20:	681b      	ldr	r3, [r3, #0]
   21a22:	2b00      	cmp	r3, #0
   21a24:	d1fb      	bne.n	21a1e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   21a26:	4770      	bx	lr

00021a28 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   21a28:	6802      	ldr	r2, [r0, #0]
{
   21a2a:	b510      	push	{r4, lr}
	if (parent->frags) {
   21a2c:	b12a      	cbz	r2, 21a3a <net_buf_frag_insert+0x12>
   21a2e:	460b      	mov	r3, r1
	while (buf->frags) {
   21a30:	461c      	mov	r4, r3
   21a32:	681b      	ldr	r3, [r3, #0]
   21a34:	2b00      	cmp	r3, #0
   21a36:	d1fb      	bne.n	21a30 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   21a38:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   21a3a:	6001      	str	r1, [r0, #0]
}
   21a3c:	bd10      	pop	{r4, pc}

00021a3e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   21a3e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   21a40:	4604      	mov	r4, r0
   21a42:	b920      	cbnz	r0, 21a4e <net_buf_frag_add+0x10>
	buf->ref++;
   21a44:	790b      	ldrb	r3, [r1, #4]
   21a46:	3301      	adds	r3, #1
   21a48:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   21a4a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   21a4c:	bd10      	pop	{r4, pc}
   21a4e:	4603      	mov	r3, r0
	while (buf->frags) {
   21a50:	4618      	mov	r0, r3
   21a52:	681b      	ldr	r3, [r3, #0]
   21a54:	2b00      	cmp	r3, #0
   21a56:	d1fb      	bne.n	21a50 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   21a58:	f7ff ffe6 	bl	21a28 <net_buf_frag_insert>
   21a5c:	4620      	mov	r0, r4
   21a5e:	e7f5      	b.n	21a4c <net_buf_frag_add+0xe>

00021a60 <net_buf_simple_add>:
	return buf->data + buf->len;
   21a60:	8883      	ldrh	r3, [r0, #4]
   21a62:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   21a64:	4419      	add	r1, r3
   21a66:	8081      	strh	r1, [r0, #4]
	return tail;
}
   21a68:	18d0      	adds	r0, r2, r3
   21a6a:	4770      	bx	lr

00021a6c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   21a6c:	b430      	push	{r4, r5}
   21a6e:	8884      	ldrh	r4, [r0, #4]
   21a70:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   21a72:	18a3      	adds	r3, r4, r2
   21a74:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   21a76:	1928      	adds	r0, r5, r4
}
   21a78:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   21a7a:	f7fe bddb 	b.w	20634 <memcpy>

00021a7e <net_buf_simple_add_u8>:
   21a7e:	8883      	ldrh	r3, [r0, #4]
   21a80:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   21a82:	b510      	push	{r4, lr}
	buf->len += len;
   21a84:	1c5c      	adds	r4, r3, #1
   21a86:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   21a88:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   21a8a:	18d0      	adds	r0, r2, r3
   21a8c:	bd10      	pop	{r4, pc}

00021a8e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   21a8e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   21a90:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   21a92:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   21a94:	1a40      	subs	r0, r0, r1
	buf->len += len;
   21a96:	4411      	add	r1, r2
	buf->data -= len;
   21a98:	6018      	str	r0, [r3, #0]
	buf->len += len;
   21a9a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   21a9c:	4770      	bx	lr

00021a9e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   21a9e:	8882      	ldrh	r2, [r0, #4]
   21aa0:	1a52      	subs	r2, r2, r1
{
   21aa2:	4603      	mov	r3, r0
	buf->len -= len;
   21aa4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   21aa6:	6800      	ldr	r0, [r0, #0]
   21aa8:	4408      	add	r0, r1
   21aaa:	6018      	str	r0, [r3, #0]
}
   21aac:	4770      	bx	lr

00021aae <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   21aae:	4603      	mov	r3, r0
	void *data = buf->data;
   21ab0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   21ab2:	889a      	ldrh	r2, [r3, #4]
   21ab4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   21ab6:	4401      	add	r1, r0
	buf->len -= len;
   21ab8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   21aba:	6019      	str	r1, [r3, #0]

	return data;
}
   21abc:	4770      	bx	lr

00021abe <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   21abe:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   21ac0:	6803      	ldr	r3, [r0, #0]
   21ac2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   21ac4:	2102      	movs	r1, #2
   21ac6:	f7ff ffea 	bl	21a9e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   21aca:	4620      	mov	r0, r4
   21acc:	bd10      	pop	{r4, pc}

00021ace <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   21ace:	6802      	ldr	r2, [r0, #0]
   21ad0:	6880      	ldr	r0, [r0, #8]
}
   21ad2:	1a10      	subs	r0, r2, r0
   21ad4:	4770      	bx	lr

00021ad6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   21ad6:	8883      	ldrh	r3, [r0, #4]
   21ad8:	88c2      	ldrh	r2, [r0, #6]
   21ada:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   21adc:	6803      	ldr	r3, [r0, #0]
   21ade:	6880      	ldr	r0, [r0, #8]
   21ae0:	1a18      	subs	r0, r3, r0
}
   21ae2:	1a10      	subs	r0, r2, r0
   21ae4:	4770      	bx	lr

00021ae6 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   21ae6:	b570      	push	{r4, r5, r6, lr}
   21ae8:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21aea:	6801      	ldr	r1, [r0, #0]
{
   21aec:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21aee:	b189      	cbz	r1, 21b14 <gpio_fire_callbacks+0x2e>
	return node->next;
   21af0:	680c      	ldr	r4, [r1, #0]
   21af2:	2c00      	cmp	r4, #0
   21af4:	bf38      	it	cc
   21af6:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   21af8:	688a      	ldr	r2, [r1, #8]
   21afa:	402a      	ands	r2, r5
   21afc:	d002      	beq.n	21b04 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   21afe:	684b      	ldr	r3, [r1, #4]
   21b00:	4630      	mov	r0, r6
   21b02:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21b04:	b134      	cbz	r4, 21b14 <gpio_fire_callbacks+0x2e>
   21b06:	6823      	ldr	r3, [r4, #0]
   21b08:	2b00      	cmp	r3, #0
   21b0a:	bf38      	it	cc
   21b0c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b0e:	4621      	mov	r1, r4
   21b10:	461c      	mov	r4, r3
   21b12:	e7f1      	b.n	21af8 <gpio_fire_callbacks+0x12>
		}
	}
}
   21b14:	bd70      	pop	{r4, r5, r6, pc}

00021b16 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21b16:	6843      	ldr	r3, [r0, #4]
   21b18:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   21b1a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   21b1e:	600b      	str	r3, [r1, #0]
}
   21b20:	2000      	movs	r0, #0
   21b22:	4770      	bx	lr

00021b24 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21b24:	6843      	ldr	r3, [r0, #4]
   21b26:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   21b28:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   21b2c:	4042      	eors	r2, r0
   21b2e:	400a      	ands	r2, r1
   21b30:	4042      	eors	r2, r0
    p_reg->OUT = value;
   21b32:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   21b36:	2000      	movs	r0, #0
   21b38:	4770      	bx	lr

00021b3a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21b3a:	6843      	ldr	r3, [r0, #4]
   21b3c:	685b      	ldr	r3, [r3, #4]
}
   21b3e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   21b40:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   21b44:	4770      	bx	lr

00021b46 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21b46:	6843      	ldr	r3, [r0, #4]
   21b48:	685b      	ldr	r3, [r3, #4]
}
   21b4a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   21b4c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   21b50:	4770      	bx	lr

00021b52 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21b52:	6843      	ldr	r3, [r0, #4]
   21b54:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   21b56:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   21b5a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   21b5c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   21b60:	2000      	movs	r0, #0
   21b62:	4770      	bx	lr

00021b64 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21b64:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   21b66:	6858      	ldr	r0, [r3, #4]
{
   21b68:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   21b6a:	b158      	cbz	r0, 21b84 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21b6c:	2400      	movs	r4, #0
   21b6e:	4281      	cmp	r1, r0
   21b70:	d113      	bne.n	21b9a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   21b72:	6808      	ldr	r0, [r1, #0]
   21b74:	b95c      	cbnz	r4, 21b8e <gpio_nrfx_manage_callback+0x2a>
   21b76:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   21b78:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   21b7a:	42a1      	cmp	r1, r4
   21b7c:	d100      	bne.n	21b80 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   21b7e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   21b80:	2000      	movs	r0, #0
   21b82:	6008      	str	r0, [r1, #0]
	if (set) {
   21b84:	b972      	cbnz	r2, 21ba4 <gpio_nrfx_manage_callback+0x40>
	return 0;
   21b86:	2000      	movs	r0, #0
}
   21b88:	bd30      	pop	{r4, r5, pc}
   21b8a:	4628      	mov	r0, r5
   21b8c:	e7ef      	b.n	21b6e <gpio_nrfx_manage_callback+0xa>
   21b8e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   21b90:	6898      	ldr	r0, [r3, #8]
   21b92:	4281      	cmp	r1, r0
	list->tail = node;
   21b94:	bf08      	it	eq
   21b96:	609c      	streq	r4, [r3, #8]
}
   21b98:	e7f2      	b.n	21b80 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b9a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21b9c:	4604      	mov	r4, r0
   21b9e:	2d00      	cmp	r5, #0
   21ba0:	d1f3      	bne.n	21b8a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   21ba2:	b13a      	cbz	r2, 21bb4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   21ba4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21ba6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   21ba8:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   21baa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21bac:	2800      	cmp	r0, #0
   21bae:	d1ea      	bne.n	21b86 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   21bb0:	6099      	str	r1, [r3, #8]
}
   21bb2:	e7e9      	b.n	21b88 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   21bb4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21bb8:	e7e6      	b.n	21b88 <gpio_nrfx_manage_callback+0x24>

00021bba <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   21bba:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   21bbc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   21bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   21bc4:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   21bc6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   21bca:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   21bcc:	430a      	orrs	r2, r1
   21bce:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   21bd2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   21bd6:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   21bda:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   21bdc:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   21be0:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   21be2:	2700      	movs	r7, #0
	while (level_pins) {
   21be4:	b914      	cbnz	r4, 21bec <check_level_trigger_pins+0x32>
}
   21be6:	4628      	mov	r0, r5
   21be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   21bec:	4234      	tst	r4, r6
   21bee:	d00a      	beq.n	21c06 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21bf0:	f898 3008 	ldrb.w	r3, [r8, #8]
   21bf4:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   21bf8:	2100      	movs	r1, #0
   21bfa:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   21bfe:	f7f9 f94b 	bl	1ae98 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   21c02:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   21c06:	3701      	adds	r7, #1
		bit <<= 1;
   21c08:	0076      	lsls	r6, r6, #1
   21c0a:	e7eb      	b.n	21be4 <check_level_trigger_pins+0x2a>

00021c0c <cfg_level_pins>:
{
   21c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   21c10:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   21c12:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   21c16:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   21c18:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   21c1c:	4313      	orrs	r3, r2
   21c1e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   21c22:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   21c24:	2500      	movs	r5, #0
	while (level_pins) {
   21c26:	b90c      	cbnz	r4, 21c2c <cfg_level_pins+0x20>
}
   21c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   21c2c:	4226      	tst	r6, r4
   21c2e:	d010      	beq.n	21c52 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   21c30:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21c32:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   21c36:	40e9      	lsrs	r1, r5
   21c38:	f001 0101 	and.w	r1, r1, #1
   21c3c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21c40:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   21c44:	b2c9      	uxtb	r1, r1
   21c46:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   21c4a:	f7f9 f925 	bl	1ae98 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   21c4e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   21c52:	3501      	adds	r5, #1
		bit <<= 1;
   21c54:	0076      	lsls	r6, r6, #1
   21c56:	e7e6      	b.n	21c26 <cfg_level_pins+0x1a>

00021c58 <adxl345_accel_convert>:
	if (sample & BIT(9)) {
   21c58:	058b      	lsls	r3, r1, #22
		sample |= ADXL345_COMPLEMENT;
   21c5a:	bf44      	itt	mi
   21c5c:	ea6f 5181 	mvnmi.w	r1, r1, lsl #22
   21c60:	ea6f 5191 	mvnmi.w	r1, r1, lsr #22
	val->val1 = (sample * 1000) / 32;
   21c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21c68:	fb11 f103 	smulbb	r1, r1, r3
   21c6c:	2900      	cmp	r1, #0
   21c6e:	bfb8      	it	lt
   21c70:	311f      	addlt	r1, #31
   21c72:	1149      	asrs	r1, r1, #5
	val->val2 = 0;
   21c74:	2300      	movs	r3, #0
	val->val1 = (sample * 1000) / 32;
   21c76:	6001      	str	r1, [r0, #0]
	val->val2 = 0;
   21c78:	6043      	str	r3, [r0, #4]
}
   21c7a:	4770      	bx	lr

00021c7c <adxl345_channel_get>:
{
   21c7c:	b510      	push	{r4, lr}
	struct adxl345_dev_data *data = dev->data;
   21c7e:	68c4      	ldr	r4, [r0, #12]
	if (data->sample_number >= ARRAY_SIZE(data->bufx)) {
   21c80:	6823      	ldr	r3, [r4, #0]
   21c82:	2b1f      	cmp	r3, #31
		data->sample_number = 0;
   21c84:	bf84      	itt	hi
   21c86:	2300      	movhi	r3, #0
   21c88:	6023      	strhi	r3, [r4, #0]
	switch (chan) {
   21c8a:	2903      	cmp	r1, #3
   21c8c:	d835      	bhi.n	21cfa <adxl345_channel_get+0x7e>
   21c8e:	e8df f001 	tbb	[pc, r1]
   21c92:	0f02      	.short	0x0f02
   21c94:	1b15      	.short	0x1b15
		adxl345_accel_convert(val, data->bufx[data->sample_number]);
   21c96:	6823      	ldr	r3, [r4, #0]
   21c98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21c9c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
		adxl345_accel_convert(val, data->bufz[data->sample_number]);
   21ca0:	4610      	mov	r0, r2
		adxl345_accel_convert(val,   data->bufz[data->sample_number]);
   21ca2:	f7ff ffd9 	bl	21c58 <adxl345_accel_convert>
		data->sample_number++;
   21ca6:	6823      	ldr	r3, [r4, #0]
   21ca8:	3301      	adds	r3, #1
   21caa:	6023      	str	r3, [r4, #0]
	return 0;
   21cac:	2000      	movs	r0, #0
}
   21cae:	bd10      	pop	{r4, pc}
		adxl345_accel_convert(val, data->bufy[data->sample_number]);
   21cb0:	6823      	ldr	r3, [r4, #0]
   21cb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21cb6:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	; 0x4a
   21cba:	e7f1      	b.n	21ca0 <adxl345_channel_get+0x24>
		adxl345_accel_convert(val, data->bufz[data->sample_number]);
   21cbc:	6823      	ldr	r3, [r4, #0]
   21cbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21cc2:	f9b3 108a 	ldrsh.w	r1, [r3, #138]	; 0x8a
   21cc6:	e7eb      	b.n	21ca0 <adxl345_channel_get+0x24>
		adxl345_accel_convert(val++, data->bufx[data->sample_number]);
   21cc8:	6823      	ldr	r3, [r4, #0]
   21cca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21cce:	4610      	mov	r0, r2
   21cd0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
   21cd4:	f7ff ffc0 	bl	21c58 <adxl345_accel_convert>
		adxl345_accel_convert(val++, data->bufy[data->sample_number]);
   21cd8:	6823      	ldr	r3, [r4, #0]
   21cda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21cde:	f102 0008 	add.w	r0, r2, #8
   21ce2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	; 0x4a
   21ce6:	f7ff ffb7 	bl	21c58 <adxl345_accel_convert>
		adxl345_accel_convert(val,   data->bufz[data->sample_number]);
   21cea:	6823      	ldr	r3, [r4, #0]
   21cec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21cf0:	f102 0010 	add.w	r0, r2, #16
   21cf4:	f9b3 108a 	ldrsh.w	r1, [r3, #138]	; 0x8a
   21cf8:	e7d3      	b.n	21ca2 <adxl345_channel_get+0x26>
	return 0;
   21cfa:	f06f 0022 	mvn.w	r0, #34	; 0x22
   21cfe:	e7d6      	b.n	21cae <adxl345_channel_get+0x32>

00021d00 <i2c_reg_write_byte>:
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
   21d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   21d02:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
   21d06:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   21d08:	f88d 2000 	strb.w	r2, [sp]
	msg.buf = (uint8_t *)buf;
   21d0c:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   21d10:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   21d12:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   21d16:	6883      	ldr	r3, [r0, #8]
   21d18:	2201      	movs	r2, #1
   21d1a:	685c      	ldr	r4, [r3, #4]
   21d1c:	460b      	mov	r3, r1
   21d1e:	a901      	add	r1, sp, #4
   21d20:	47a0      	blx	r4

	return i2c_write(dev, tx_buf, 2, dev_addr);
}
   21d22:	b004      	add	sp, #16
   21d24:	bd10      	pop	{r4, pc}

00021d26 <i2c_reg_read_byte>:
{
   21d26:	b530      	push	{r4, r5, lr}
   21d28:	b089      	sub	sp, #36	; 0x24
	msg[0].flags = I2C_MSG_WRITE;
   21d2a:	2500      	movs	r5, #0
{
   21d2c:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   21d30:	f10d 0207 	add.w	r2, sp, #7
   21d34:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   21d36:	2201      	movs	r2, #1
	msg[1].len = num_read;
   21d38:	e9cd 3205 	strd	r3, r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   21d3c:	2307      	movs	r3, #7
	msg[0].len = num_write;
   21d3e:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   21d40:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   21d44:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   21d48:	6883      	ldr	r3, [r0, #8]
   21d4a:	2202      	movs	r2, #2
   21d4c:	685c      	ldr	r4, [r3, #4]
   21d4e:	460b      	mov	r3, r1
   21d50:	a902      	add	r1, sp, #8
   21d52:	47a0      	blx	r4
}
   21d54:	b009      	add	sp, #36	; 0x24
   21d56:	bd30      	pop	{r4, r5, pc}

00021d58 <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   21d58:	07db      	lsls	r3, r3, #31
{
   21d5a:	b570      	push	{r4, r5, r6, lr}
   21d5c:	460e      	mov	r6, r1
   21d5e:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   21d60:	d40f      	bmi.n	21d82 <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   21d62:	2000      	movs	r0, #0
   21d64:	2100      	movs	r1, #0
   21d66:	f7f9 fe01 	bl	1b96c <multithreading_lock_acquire>
		if (!errcode) {
   21d6a:	4604      	mov	r4, r0
   21d6c:	b938      	cbnz	r0, 21d7e <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   21d6e:	4629      	mov	r1, r5
   21d70:	4630      	mov	r0, r6
   21d72:	f7ee fa0b 	bl	1018c <sdc_soc_rand_vector_poll>
   21d76:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   21d78:	f7f9 fe00 	bl	1b97c <multithreading_lock_release>
	if (!errcode) {
   21d7c:	b184      	cbz	r4, 21da0 <rng_driver_get_entropy_isr+0x48>
}
   21d7e:	4620      	mov	r0, r4
   21d80:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   21d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21d86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21d8a:	f7f9 fdef 	bl	1b96c <multithreading_lock_acquire>
		if (!errcode) {
   21d8e:	4604      	mov	r4, r0
   21d90:	2800      	cmp	r0, #0
   21d92:	d1f4      	bne.n	21d7e <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   21d94:	4629      	mov	r1, r5
   21d96:	4630      	mov	r0, r6
   21d98:	f7ee f9df 	bl	1015a <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   21d9c:	f7f9 fdee 	bl	1b97c <multithreading_lock_release>
		return len;
   21da0:	462c      	mov	r4, r5
   21da2:	e7ec      	b.n	21d7e <rng_driver_get_entropy_isr+0x26>

00021da4 <rng_driver_get_entropy>:
{
   21da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   21da8:	68c7      	ldr	r7, [r0, #12]
{
   21daa:	460e      	mov	r6, r1
	uint32_t bytes_left = len;
   21dac:	4614      	mov	r4, r2
	while (bytes_left > 0) {
   21dae:	b1c4      	cbz	r4, 21de2 <rng_driver_get_entropy+0x3e>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   21db0:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21dbc:	f7f9 fdd6 	bl	1b96c <multithreading_lock_acquire>
			if (errcode) {
   21dc0:	b980      	cbnz	r0, 21de4 <rng_driver_get_entropy+0x40>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   21dc2:	4641      	mov	r1, r8
   21dc4:	4630      	mov	r0, r6
   21dc6:	f7ee f9e1 	bl	1018c <sdc_soc_rand_vector_poll>
   21dca:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   21dcc:	f7f9 fdd6 	bl	1b97c <multithreading_lock_release>
			if (!bytes_read) {
   21dd0:	b955      	cbnz	r5, 21de8 <rng_driver_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   21dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21dda:	4638      	mov	r0, r7
   21ddc:	f7fc f8a6 	bl	1df2c <z_impl_k_sem_take>
		while (bytes_read == 0) {
   21de0:	e7e8      	b.n	21db4 <rng_driver_get_entropy+0x10>
	return 0;
   21de2:	4620      	mov	r0, r4
}
   21de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   21de8:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   21dea:	1b64      	subs	r4, r4, r5
   21dec:	e7df      	b.n	21dae <rng_driver_get_entropy+0xa>

00021dee <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   21dee:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);

	k_sem_init(&rng_dev->sem_sync, 0, 1);
   21df0:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   21df2:	2201      	movs	r2, #1
   21df4:	2100      	movs	r1, #0
   21df6:	f000 fb9b 	bl	22530 <z_impl_k_sem_init>

	IRQ_CONNECT(RNG_IRQn,
   21dfa:	2200      	movs	r2, #0
   21dfc:	2105      	movs	r1, #5
   21dfe:	200d      	movs	r0, #13
   21e00:	f7f3 fb84 	bl	1550c <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   21e04:	2000      	movs	r0, #0
   21e06:	bd08      	pop	{r3, pc}

00021e08 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   21e08:	2000      	movs	r0, #0
   21e0a:	4770      	bx	lr

00021e0c <entropy_cc3xx_rng_get_entropy>:
{
   21e0c:	b513      	push	{r0, r1, r4, lr}
   21e0e:	4614      	mov	r4, r2
   21e10:	4608      	mov	r0, r1
	res = nrf_cc3xx_platform_entropy_get(buffer, length, &olen);
   21e12:	aa01      	add	r2, sp, #4
   21e14:	4621      	mov	r1, r4
   21e16:	f7fc fcfb 	bl	1e810 <nrf_cc3xx_platform_entropy_get>
	if (olen != length) {
   21e1a:	9b01      	ldr	r3, [sp, #4]
   21e1c:	429c      	cmp	r4, r3
}
   21e1e:	bf18      	it	ne
   21e20:	f06f 0015 	mvnne.w	r0, #21
   21e24:	b002      	add	sp, #8
   21e26:	bd10      	pop	{r4, pc}

00021e28 <gpio_pin_configure>:
{
   21e28:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   21e2a:	68c5      	ldr	r5, [r0, #12]
{
   21e2c:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   21e2e:	6883      	ldr	r3, [r0, #8]
   21e30:	681b      	ldr	r3, [r3, #0]
   21e32:	4798      	blx	r3
	if (ret != 0) {
   21e34:	b930      	cbnz	r0, 21e44 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21e36:	2301      	movs	r3, #1
   21e38:	fa03 f104 	lsl.w	r1, r3, r4
   21e3c:	682b      	ldr	r3, [r5, #0]
   21e3e:	ea23 0301 	bic.w	r3, r3, r1
   21e42:	602b      	str	r3, [r5, #0]
}
   21e44:	bd38      	pop	{r3, r4, r5, pc}

00021e46 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   21e46:	2101      	movs	r1, #1
   21e48:	f7f9 bd52 	b.w	1b8f0 <dk_set_led>

00021e4c <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   21e4c:	2100      	movs	r1, #0
   21e4e:	f7f9 bd4f 	b.w	1b8f0 <dk_set_led>

00021e52 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   21e52:	4668      	mov	r0, sp
   21e54:	f020 0107 	bic.w	r1, r0, #7
   21e58:	468d      	mov	sp, r1
   21e5a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   21e5c:	f7e1 fc70 	bl	3740 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   21e60:	f7f3 fb6e 	bl	15540 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   21e64:	f7f3 feaa 	bl	15bbc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   21e68:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   21e6c:	4685      	mov	sp, r0
   21e6e:	4770      	bx	lr

00021e70 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   21e70:	4668      	mov	r0, sp
   21e72:	f020 0107 	bic.w	r1, r0, #7
   21e76:	468d      	mov	sp, r1
   21e78:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   21e7a:	f7e1 fc13 	bl	36a4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   21e7e:	f7f3 fb5f 	bl	15540 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   21e82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   21e86:	4685      	mov	sp, r0
   21e88:	4770      	bx	lr

00021e8a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   21e8a:	4668      	mov	r0, sp
   21e8c:	f020 0107 	bic.w	r1, r0, #7
   21e90:	468d      	mov	sp, r1
   21e92:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   21e94:	f7ed ff95 	bl	fdc2 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   21e98:	f7f3 fb52 	bl	15540 <_arch_isr_direct_pm>
   21e9c:	f7f3 fe8e 	bl	15bbc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   21ea0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   21ea4:	4685      	mov	sp, r0
   21ea6:	4770      	bx	lr

00021ea8 <nrfx_clock_stop>:
	switch (domain) {
   21ea8:	2801      	cmp	r0, #1
   21eaa:	d101      	bne.n	21eb0 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   21eac:	f7e2 ba5c 	b.w	4368 <mpsl_clock_hfclk_release>
}
   21eb0:	4770      	bx	lr

00021eb2 <nrfx_clock_enable>:
}
   21eb2:	4770      	bx	lr

00021eb4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   21eb4:	f7e2 b878 	b.w	3fa8 <MPSL_IRQ_CLOCK_Handler>

00021eb8 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   21eb8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   21eba:	f7f3 f93b 	bl	15134 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   21ebe:	f7f3 f9ed 	bl	1529c <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   21ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   21ec6:	f7fc bc47 	b.w	1e758 <nrf_cc3xx_platform_init>

00021eca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   21eca:	4700      	bx	r0

00021ecc <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   21ecc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   21ece:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   21ed0:	6b48      	ldr	r0, [r1, #52]	; 0x34
   21ed2:	4298      	cmp	r0, r3
{
   21ed4:	b510      	push	{r4, lr}
   21ed6:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   21eda:	d205      	bcs.n	21ee8 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   21edc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   21ede:	5c09      	ldrb	r1, [r1, r0]
   21ee0:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   21ee4:	4618      	mov	r0, r3
}
   21ee6:	e004      	b.n	21ef2 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   21ee8:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   21eec:	b110      	cbz	r0, 21ef4 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21eee:	61d3      	str	r3, [r2, #28]
            return false;
   21ef0:	2000      	movs	r0, #0
}
   21ef2:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   21ef4:	6a0c      	ldr	r4, [r1, #32]
   21ef6:	0664      	lsls	r4, r4, #25
   21ef8:	d503      	bpl.n	21f02 <twi_send_byte+0x36>
   21efa:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   21efc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   21f00:	e7f7      	b.n	21ef2 <twi_send_byte+0x26>
   21f02:	6153      	str	r3, [r2, #20]
   21f04:	e7ee      	b.n	21ee4 <twi_send_byte+0x18>

00021f06 <twi_transfer>:
{
   21f06:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f08:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   21f0c:	4604      	mov	r4, r0
   21f0e:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   21f10:	b12e      	cbz	r6, 21f1e <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f12:	2300      	movs	r3, #0
   21f14:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   21f18:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   21f1c:	2601      	movs	r6, #1
    if (p_cb->error)
   21f1e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   21f22:	b320      	cbz	r0, 21f6e <twi_transfer+0x68>
   21f24:	2300      	movs	r3, #0
   21f26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21f2a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   21f2e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   21f32:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   21f36:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21f3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   21f3e:	2e00      	cmp	r6, #0
   21f40:	d068      	beq.n	22014 <twi_transfer+0x10e>
        if (!p_cb->error)
   21f42:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   21f46:	2300      	movs	r3, #0
   21f48:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   21f4c:	bb88      	cbnz	r0, 21fb2 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   21f4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f50:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   21f52:	429a      	cmp	r2, r3
        return false;
   21f54:	bf1c      	itt	ne
   21f56:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   21f58:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   21f5a:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   21f5e:	bf1c      	itt	ne
   21f60:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   21f64:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   21f68:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   21f6c:	e022      	b.n	21fb4 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f6e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   21f72:	b142      	cbz	r2, 21f86 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f74:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   21f78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f7c:	2301      	movs	r3, #1
   21f7e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   21f80:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   21f84:	e7db      	b.n	21f3e <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f86:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   21f8a:	b1a3      	cbz	r3, 21fb6 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f8c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   21f90:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   21f94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21f96:	3301      	adds	r3, #1
   21f98:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f9a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   21f9e:	b113      	cbz	r3, 21fa6 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21fa0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   21fa4:	e7e8      	b.n	21f78 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   21fa6:	4629      	mov	r1, r5
   21fa8:	4620      	mov	r0, r4
   21faa:	f7ff ff8f 	bl	21ecc <twi_send_byte>
   21fae:	2800      	cmp	r0, #0
   21fb0:	d1c5      	bne.n	21f3e <twi_transfer+0x38>
                    return false;
   21fb2:	2000      	movs	r0, #0
}
   21fb4:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21fb6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   21fba:	2a00      	cmp	r2, #0
   21fbc:	d0bf      	beq.n	21f3e <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21fbe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21fc2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21fc6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   21fca:	b112      	cbz	r2, 21fd2 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21fcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21fd0:	e7d2      	b.n	21f78 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   21fd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21fd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21fd6:	4293      	cmp	r3, r2
   21fd8:	d2b1      	bcs.n	21f3e <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   21fda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   21fdc:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   21fe0:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   21fe2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   21fe4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   21fe6:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   21fe8:	1e51      	subs	r1, r2, #1
   21fea:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   21fec:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   21fee:	d108      	bne.n	22002 <twi_transfer+0xfc>
   21ff0:	6a29      	ldr	r1, [r5, #32]
   21ff2:	0649      	lsls	r1, r1, #25
   21ff4:	d410      	bmi.n	22018 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   21ff6:	2302      	movs	r3, #2
   21ff8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21ffc:	2301      	movs	r3, #1
   21ffe:	6223      	str	r3, [r4, #32]
   22000:	e79d      	b.n	21f3e <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22002:	4293      	cmp	r3, r2
   22004:	d1fa      	bne.n	21ffc <twi_transfer+0xf6>
   22006:	6a2b      	ldr	r3, [r5, #32]
   22008:	065b      	lsls	r3, r3, #25
   2200a:	d598      	bpl.n	21f3e <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   2200c:	2302      	movs	r3, #2
   2200e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   22012:	e7cf      	b.n	21fb4 <twi_transfer+0xae>
    return true;
   22014:	2001      	movs	r0, #1
   22016:	e7cd      	b.n	21fb4 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   22018:	4293      	cmp	r3, r2
   2201a:	d1ef      	bne.n	21ffc <twi_transfer+0xf6>
   2201c:	e7f6      	b.n	2200c <twi_transfer+0x106>

0002201e <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2201e:	7b0a      	ldrb	r2, [r1, #12]
{
   22020:	4603      	mov	r3, r0
   22022:	2a03      	cmp	r2, #3
   22024:	d829      	bhi.n	2207a <xfer_completeness_check+0x5c>
   22026:	e8df f002 	tbb	[pc, r2]
   2202a:	2521      	.short	0x2521
   2202c:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2202e:	688a      	ldr	r2, [r1, #8]
   22030:	0350      	lsls	r0, r2, #13
   22032:	d504      	bpl.n	2203e <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   22034:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   22038:	6908      	ldr	r0, [r1, #16]
   2203a:	4290      	cmp	r0, r2
   2203c:	d107      	bne.n	2204e <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2203e:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   22040:	0352      	lsls	r2, r2, #13
   22042:	d41a      	bmi.n	2207a <xfer_completeness_check+0x5c>
   22044:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22048:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2204a:	4291      	cmp	r1, r2
   2204c:	d015      	beq.n	2207a <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2204e:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22050:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22052:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22056:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2205a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   2205c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22060:	6908      	ldr	r0, [r1, #16]
   22062:	4290      	cmp	r0, r2
   22064:	d1f3      	bne.n	2204e <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   22066:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2206a:	e7ed      	b.n	22048 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   2206c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22070:	6909      	ldr	r1, [r1, #16]
   22072:	e7ea      	b.n	2204a <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   22074:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   22078:	e7fa      	b.n	22070 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2207a:	2001      	movs	r0, #1
}
   2207c:	4770      	bx	lr

0002207e <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   2207e:	f7fe b890 	b.w	201a2 <z_clock_idle_exit>

00022082 <k_heap_init>:
{
   22082:	b410      	push	{r4}
   22084:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22088:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2208c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2208e:	f7fd bdb3 	b.w	1fbf8 <sys_heap_init>

00022092 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22096:	b087      	sub	sp, #28
   22098:	4604      	mov	r4, r0
   2209a:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2209c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   220a0:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   220a2:	f000 fb21 	bl	226e8 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   220a6:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   220aa:	4605      	mov	r5, r0
   220ac:	4688      	mov	r8, r1
	__asm__ volatile(
   220ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   220b2:	f3ef 8b11 	mrs	fp, BASEPRI
   220b6:	f383 8811 	msr	BASEPRI, r3
   220ba:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   220be:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   220c2:	463a      	mov	r2, r7
   220c4:	4631      	mov	r1, r6
   220c6:	4620      	mov	r0, r4
   220c8:	f7fd fd39 	bl	1fb3e <sys_heap_aligned_alloc>
   220cc:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   220ce:	f7fc fa0b 	bl	1e4e8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   220d2:	9b05      	ldr	r3, [sp, #20]
   220d4:	b13b      	cbz	r3, 220e6 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   220d6:	f38b 8811 	msr	BASEPRI, fp
   220da:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   220de:	4618      	mov	r0, r3
   220e0:	b007      	add	sp, #28
   220e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   220e6:	1a2a      	subs	r2, r5, r0
   220e8:	9202      	str	r2, [sp, #8]
   220ea:	eb68 0201 	sbc.w	r2, r8, r1
   220ee:	9203      	str	r2, [sp, #12]
   220f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   220f4:	2901      	cmp	r1, #1
   220f6:	f172 0200 	sbcs.w	r2, r2, #0
   220fa:	dbec      	blt.n	220d6 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   220fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22100:	4659      	mov	r1, fp
   22102:	e9cd 2300 	strd	r2, r3, [sp]
   22106:	4648      	mov	r0, r9
   22108:	4652      	mov	r2, sl
   2210a:	f7fb fdd5 	bl	1dcb8 <z_pend_curr>
	__asm__ volatile(
   2210e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22112:	f3ef 8b11 	mrs	fp, BASEPRI
   22116:	f383 8811 	msr	BASEPRI, r3
   2211a:	f3bf 8f6f 	isb	sy
   2211e:	e7d0      	b.n	220c2 <k_heap_aligned_alloc+0x30>

00022120 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22120:	b538      	push	{r3, r4, r5, lr}
   22122:	4604      	mov	r4, r0
   22124:	f04f 0340 	mov.w	r3, #64	; 0x40
   22128:	f3ef 8511 	mrs	r5, BASEPRI
   2212c:	f383 8811 	msr	BASEPRI, r3
   22130:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22134:	f7fd fcb6 	bl	1faa4 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22138:	f104 000c 	add.w	r0, r4, #12
   2213c:	f000 f9e8 	bl	22510 <z_unpend_all>
   22140:	b130      	cbz	r0, 22150 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22142:	4629      	mov	r1, r5
   22144:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2214c:	f7fb bb6c 	b.w	1d828 <z_reschedule>
	__asm__ volatile(
   22150:	f385 8811 	msr	BASEPRI, r5
   22154:	f3bf 8f6f 	isb	sy
}
   22158:	bd38      	pop	{r3, r4, r5, pc}

0002215a <k_mem_slab_init>:
{
   2215a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2215c:	2400      	movs	r4, #0
   2215e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22160:	ea41 0402 	orr.w	r4, r1, r2
   22164:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22168:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2216c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2216e:	d10c      	bne.n	2218a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22170:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22172:	42a3      	cmp	r3, r4
   22174:	d103      	bne.n	2217e <k_mem_slab_init+0x24>
   22176:	e9c0 0000 	strd	r0, r0, [r0]
}
   2217a:	2000      	movs	r0, #0
}
   2217c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2217e:	6945      	ldr	r5, [r0, #20]
   22180:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22182:	3401      	adds	r4, #1
		slab->free_list = p;
   22184:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22186:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22188:	e7f3      	b.n	22172 <k_mem_slab_init+0x18>
		return -EINVAL;
   2218a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2218e:	e7f5      	b.n	2217c <k_mem_slab_init+0x22>

00022190 <z_impl_k_mutex_init>:
{
   22190:	4603      	mov	r3, r0
	mutex->owner = NULL;
   22192:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   22194:	e9c3 0002 	strd	r0, r0, [r3, #8]
   22198:	e9c3 3300 	strd	r3, r3, [r3]
}
   2219c:	4770      	bx	lr

0002219e <queue_insert>:
{
   2219e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   221a2:	4699      	mov	r9, r3
   221a4:	4604      	mov	r4, r0
   221a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   221aa:	460d      	mov	r5, r1
   221ac:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   221ae:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   221b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   221b6:	f3ef 8711 	mrs	r7, BASEPRI
   221ba:	f382 8811 	msr	BASEPRI, r2
   221be:	f3bf 8f6f 	isb	sy
	if (is_append) {
   221c2:	b103      	cbz	r3, 221c6 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   221c4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   221c6:	4630      	mov	r0, r6
   221c8:	f000 f97d 	bl	224c6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   221cc:	b160      	cbz	r0, 221e8 <queue_insert+0x4a>
   221ce:	2400      	movs	r4, #0
   221d0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   221d4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   221d8:	f000 f91a 	bl	22410 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   221dc:	4630      	mov	r0, r6
   221de:	4639      	mov	r1, r7
   221e0:	f7fb fb22 	bl	1d828 <z_reschedule>
	return 0;
   221e4:	2000      	movs	r0, #0
   221e6:	e00c      	b.n	22202 <queue_insert+0x64>
	if (alloc) {
   221e8:	f1b9 0f00 	cmp.w	r9, #0
   221ec:	d01b      	beq.n	22226 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   221ee:	2108      	movs	r1, #8
   221f0:	f7fc fa9a 	bl	1e728 <z_thread_aligned_alloc>
		if (anode == NULL) {
   221f4:	b938      	cbnz	r0, 22206 <queue_insert+0x68>
	__asm__ volatile(
   221f6:	f387 8811 	msr	BASEPRI, r7
   221fa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   221fe:	f06f 000b 	mvn.w	r0, #11
}
   22202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22206:	2301      	movs	r3, #1
		anode->data = data;
   22208:	f8c0 8004 	str.w	r8, [r0, #4]
   2220c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2220e:	6803      	ldr	r3, [r0, #0]
   22210:	f003 0203 	and.w	r2, r3, #3
   22214:	b95d      	cbnz	r5, 2222e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22216:	6823      	ldr	r3, [r4, #0]
   22218:	4313      	orrs	r3, r2
   2221a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2221c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2221e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22220:	b973      	cbnz	r3, 22240 <queue_insert+0xa2>
	list->tail = node;
   22222:	6060      	str	r0, [r4, #4]
}
   22224:	e00c      	b.n	22240 <queue_insert+0xa2>
	node->next_and_flags = flags;
   22226:	f8c8 9000 	str.w	r9, [r8]
}
   2222a:	4640      	mov	r0, r8
   2222c:	e7ef      	b.n	2220e <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2222e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22230:	f033 0303 	bics.w	r3, r3, #3
   22234:	d110      	bne.n	22258 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22236:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22238:	6862      	ldr	r2, [r4, #4]
   2223a:	b93a      	cbnz	r2, 2224c <queue_insert+0xae>
	list->head = node;
   2223c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22240:	2104      	movs	r1, #4
   22242:	f104 0010 	add.w	r0, r4, #16
   22246:	f000 fbea 	bl	22a1e <z_handle_obj_poll_events>
   2224a:	e7c7      	b.n	221dc <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2224c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2224e:	f003 0303 	and.w	r3, r3, #3
   22252:	4303      	orrs	r3, r0
   22254:	6013      	str	r3, [r2, #0]
   22256:	e7e4      	b.n	22222 <queue_insert+0x84>
   22258:	4313      	orrs	r3, r2
   2225a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2225c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2225e:	f003 0303 	and.w	r3, r3, #3
   22262:	4303      	orrs	r3, r0
   22264:	602b      	str	r3, [r5, #0]
}
   22266:	e7eb      	b.n	22240 <queue_insert+0xa2>

00022268 <z_queue_node_peek>:
{
   22268:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2226a:	4604      	mov	r4, r0
   2226c:	b130      	cbz	r0, 2227c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2226e:	6802      	ldr	r2, [r0, #0]
   22270:	0793      	lsls	r3, r2, #30
   22272:	d003      	beq.n	2227c <z_queue_node_peek+0x14>
		ret = anode->data;
   22274:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22276:	b109      	cbz	r1, 2227c <z_queue_node_peek+0x14>
			k_free(anode);
   22278:	f000 fbfd 	bl	22a76 <k_free>
}
   2227c:	4620      	mov	r0, r4
   2227e:	bd10      	pop	{r4, pc}

00022280 <z_impl_k_queue_init>:
	list->head = NULL;
   22280:	2300      	movs	r3, #0
	list->tail = NULL;
   22282:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22286:	f100 0308 	add.w	r3, r0, #8
   2228a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2228e:	f100 0310 	add.w	r3, r0, #16
   22292:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22296:	4770      	bx	lr

00022298 <k_queue_append>:
{
   22298:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2229a:	2301      	movs	r3, #1
   2229c:	9300      	str	r3, [sp, #0]
   2229e:	2300      	movs	r3, #0
{
   222a0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   222a2:	4619      	mov	r1, r3
   222a4:	f7ff ff7b 	bl	2219e <queue_insert>
}
   222a8:	b003      	add	sp, #12
   222aa:	f85d fb04 	ldr.w	pc, [sp], #4

000222ae <k_queue_prepend>:
{
   222ae:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   222b0:	2300      	movs	r3, #0
{
   222b2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   222b4:	9300      	str	r3, [sp, #0]
   222b6:	4619      	mov	r1, r3
   222b8:	f7ff ff71 	bl	2219e <queue_insert>
}
   222bc:	b003      	add	sp, #12
   222be:	f85d fb04 	ldr.w	pc, [sp], #4

000222c2 <k_queue_append_list>:
{
   222c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222c6:	4605      	mov	r5, r0
   222c8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   222ca:	460c      	mov	r4, r1
   222cc:	b391      	cbz	r1, 22334 <k_queue_append_list+0x72>
   222ce:	b38a      	cbz	r2, 22334 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   222d0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   222d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   222d8:	f3ef 8811 	mrs	r8, BASEPRI
   222dc:	f383 8811 	msr	BASEPRI, r3
   222e0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   222e4:	4638      	mov	r0, r7
   222e6:	f000 f8ee 	bl	224c6 <z_unpend_first_thread>
   222ea:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   222ee:	b920      	cbnz	r0, 222fa <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   222f0:	686b      	ldr	r3, [r5, #4]
   222f2:	b9cb      	cbnz	r3, 22328 <k_queue_append_list+0x66>
	list->head = node;
   222f4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   222f6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   222f8:	e00a      	b.n	22310 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   222fa:	6144      	str	r4, [r0, #20]
   222fc:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   22300:	f000 f886 	bl	22410 <z_ready_thread>
		head = *(void **)head;
   22304:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22306:	4638      	mov	r0, r7
   22308:	f000 f8dd 	bl	224c6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2230c:	2c00      	cmp	r4, #0
   2230e:	d1ee      	bne.n	222ee <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22310:	2104      	movs	r1, #4
   22312:	f105 0010 	add.w	r0, r5, #16
   22316:	f000 fb82 	bl	22a1e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2231a:	4638      	mov	r0, r7
   2231c:	4641      	mov	r1, r8
   2231e:	f7fb fa83 	bl	1d828 <z_reschedule>
	return 0;
   22322:	2000      	movs	r0, #0
}
   22324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22328:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2232a:	f001 0103 	and.w	r1, r1, #3
   2232e:	430c      	orrs	r4, r1
   22330:	601c      	str	r4, [r3, #0]
}
   22332:	e7e0      	b.n	222f6 <k_queue_append_list+0x34>
		return -EINVAL;
   22334:	f06f 0015 	mvn.w	r0, #21
   22338:	e7f4      	b.n	22324 <k_queue_append_list+0x62>

0002233a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2233a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2233e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   22342:	4298      	cmp	r0, r3
   22344:	bfac      	ite	ge
   22346:	2000      	movge	r0, #0
   22348:	2001      	movlt	r0, #1
   2234a:	4770      	bx	lr

0002234c <z_find_first_thread_to_unpend>:
{
   2234c:	b510      	push	{r4, lr}
   2234e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22352:	f3ef 8411 	mrs	r4, BASEPRI
   22356:	f383 8811 	msr	BASEPRI, r3
   2235a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2235e:	f000 f84d 	bl	223fc <z_priq_dumb_best>
	__asm__ volatile(
   22362:	f384 8811 	msr	BASEPRI, r4
   22366:	f3bf 8f6f 	isb	sy
}
   2236a:	bd10      	pop	{r4, pc}

0002236c <z_unpend_thread_no_timeout>:
{
   2236c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2236e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22372:	f3ef 8411 	mrs	r4, BASEPRI
   22376:	f383 8811 	msr	BASEPRI, r3
   2237a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2237e:	f000 f81b 	bl	223b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   22382:	f384 8811 	msr	BASEPRI, r4
   22386:	f3bf 8f6f 	isb	sy
}
   2238a:	bd10      	pop	{r4, pc}

0002238c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2238c:	4603      	mov	r3, r0
   2238e:	b920      	cbnz	r0, 2239a <z_reschedule_irqlock+0xe>
   22390:	f3ef 8205 	mrs	r2, IPSR
   22394:	b90a      	cbnz	r2, 2239a <z_reschedule_irqlock+0xe>
   22396:	f7f3 b853 	b.w	15440 <arch_swap>
   2239a:	f383 8811 	msr	BASEPRI, r3
   2239e:	f3bf 8f6f 	isb	sy
}
   223a2:	4770      	bx	lr

000223a4 <z_reschedule_unlocked>:
	__asm__ volatile(
   223a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   223a8:	f3ef 8011 	mrs	r0, BASEPRI
   223ac:	f383 8811 	msr	BASEPRI, r3
   223b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   223b4:	f7ff bfea 	b.w	2238c <z_reschedule_irqlock>

000223b8 <unpend_thread_no_timeout>:
{
   223b8:	4601      	mov	r1, r0
   223ba:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   223bc:	6880      	ldr	r0, [r0, #8]
   223be:	f7fb fa59 	bl	1d874 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   223c2:	7b4b      	ldrb	r3, [r1, #13]
   223c4:	f023 0302 	bic.w	r3, r3, #2
   223c8:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   223ca:	2300      	movs	r3, #0
   223cc:	608b      	str	r3, [r1, #8]
}
   223ce:	bd08      	pop	{r3, pc}

000223d0 <z_unpend_thread>:
{
   223d0:	b538      	push	{r3, r4, r5, lr}
   223d2:	4604      	mov	r4, r0
   223d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   223d8:	f3ef 8511 	mrs	r5, BASEPRI
   223dc:	f383 8811 	msr	BASEPRI, r3
   223e0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   223e4:	f7ff ffe8 	bl	223b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   223e8:	f385 8811 	msr	BASEPRI, r5
   223ec:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   223f0:	f104 0018 	add.w	r0, r4, #24
}
   223f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   223f8:	f000 b932 	b.w	22660 <z_abort_timeout>

000223fc <z_priq_dumb_best>:
{
   223fc:	4603      	mov	r3, r0
	return list->head == list;
   223fe:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22400:	4283      	cmp	r3, r0
   22402:	d003      	beq.n	2240c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22404:	2800      	cmp	r0, #0
   22406:	bf38      	it	cc
   22408:	2000      	movcc	r0, #0
   2240a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2240c:	2000      	movs	r0, #0
}
   2240e:	4770      	bx	lr

00022410 <z_ready_thread>:
{
   22410:	b510      	push	{r4, lr}
	__asm__ volatile(
   22412:	f04f 0340 	mov.w	r3, #64	; 0x40
   22416:	f3ef 8411 	mrs	r4, BASEPRI
   2241a:	f383 8811 	msr	BASEPRI, r3
   2241e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   22422:	f7fb fa81 	bl	1d928 <ready_thread>
	__asm__ volatile(
   22426:	f384 8811 	msr	BASEPRI, r4
   2242a:	f3bf 8f6f 	isb	sy
}
   2242e:	bd10      	pop	{r4, pc}

00022430 <z_thread_timeout>:
{
   22430:	b570      	push	{r4, r5, r6, lr}
   22432:	4604      	mov	r4, r0
	__asm__ volatile(
   22434:	f04f 0340 	mov.w	r3, #64	; 0x40
   22438:	f3ef 8611 	mrs	r6, BASEPRI
   2243c:	f383 8811 	msr	BASEPRI, r3
   22440:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   22444:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   22448:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   2244c:	b113      	cbz	r3, 22454 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2244e:	4628      	mov	r0, r5
   22450:	f7ff ffb2 	bl	223b8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22454:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22458:	f023 0314 	bic.w	r3, r3, #20
   2245c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   22460:	4628      	mov	r0, r5
   22462:	f7fb fa61 	bl	1d928 <ready_thread>
	__asm__ volatile(
   22466:	f386 8811 	msr	BASEPRI, r6
   2246a:	f3bf 8f6f 	isb	sy
}
   2246e:	bd70      	pop	{r4, r5, r6, pc}

00022470 <add_to_waitq_locked>:
{
   22470:	b538      	push	{r3, r4, r5, lr}
   22472:	4604      	mov	r4, r0
   22474:	460d      	mov	r5, r1
	unready_thread(thread);
   22476:	f7fb fbdf 	bl	1dc38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2247a:	7b63      	ldrb	r3, [r4, #13]
   2247c:	f043 0302 	orr.w	r3, r3, #2
   22480:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22482:	b1c5      	cbz	r5, 224b6 <add_to_waitq_locked+0x46>
	return list->head == list;
   22484:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22486:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22488:	429d      	cmp	r5, r3
   2248a:	bf08      	it	eq
   2248c:	2300      	moveq	r3, #0
   2248e:	2b00      	cmp	r3, #0
   22490:	bf38      	it	cc
   22492:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22494:	b183      	cbz	r3, 224b8 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   22496:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2249a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2249e:	4291      	cmp	r1, r2
   224a0:	db04      	blt.n	224ac <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   224a2:	686a      	ldr	r2, [r5, #4]
   224a4:	429a      	cmp	r2, r3
   224a6:	d007      	beq.n	224b8 <add_to_waitq_locked+0x48>
   224a8:	681b      	ldr	r3, [r3, #0]
   224aa:	e7f3      	b.n	22494 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   224ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   224ae:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   224b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   224b4:	605c      	str	r4, [r3, #4]
}
   224b6:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   224b8:	686b      	ldr	r3, [r5, #4]
   224ba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   224bc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   224be:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   224c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   224c2:	606c      	str	r4, [r5, #4]
   224c4:	e7f7      	b.n	224b6 <add_to_waitq_locked+0x46>

000224c6 <z_unpend_first_thread>:
{
   224c6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   224c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   224cc:	f3ef 8211 	mrs	r2, BASEPRI
   224d0:	f383 8811 	msr	BASEPRI, r3
   224d4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   224d8:	f7ff ff90 	bl	223fc <z_priq_dumb_best>
   224dc:	4604      	mov	r4, r0
	__asm__ volatile(
   224de:	f382 8811 	msr	BASEPRI, r2
   224e2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   224e6:	b188      	cbz	r0, 2250c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   224e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   224ec:	f3ef 8511 	mrs	r5, BASEPRI
   224f0:	f383 8811 	msr	BASEPRI, r3
   224f4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   224f8:	f7ff ff5e 	bl	223b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   224fc:	f385 8811 	msr	BASEPRI, r5
   22500:	f3bf 8f6f 	isb	sy
   22504:	f104 0018 	add.w	r0, r4, #24
   22508:	f000 f8aa 	bl	22660 <z_abort_timeout>
}
   2250c:	4620      	mov	r0, r4
   2250e:	bd38      	pop	{r3, r4, r5, pc}

00022510 <z_unpend_all>:
{
   22510:	b538      	push	{r3, r4, r5, lr}
   22512:	4605      	mov	r5, r0
	int need_sched = 0;
   22514:	2000      	movs	r0, #0
	return list->head == list;
   22516:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22518:	42a5      	cmp	r5, r4
   2251a:	d000      	beq.n	2251e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2251c:	b904      	cbnz	r4, 22520 <z_unpend_all+0x10>
}
   2251e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22520:	4620      	mov	r0, r4
   22522:	f7ff ff55 	bl	223d0 <z_unpend_thread>
		z_ready_thread(thread);
   22526:	4620      	mov	r0, r4
   22528:	f7ff ff72 	bl	22410 <z_ready_thread>
		need_sched = 1;
   2252c:	2001      	movs	r0, #1
   2252e:	e7f2      	b.n	22516 <z_unpend_all+0x6>

00022530 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   22530:	b15a      	cbz	r2, 2254a <z_impl_k_sem_init+0x1a>
   22532:	428a      	cmp	r2, r1
   22534:	d309      	bcc.n	2254a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22536:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2253a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2253e:	e9c0 0000 	strd	r0, r0, [r0]
   22542:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22546:	2000      	movs	r0, #0
   22548:	4770      	bx	lr
		return -EINVAL;
   2254a:	f06f 0015 	mvn.w	r0, #21
}
   2254e:	4770      	bx	lr

00022550 <k_is_in_isr>:
   22550:	f3ef 8005 	mrs	r0, IPSR
}
   22554:	3800      	subs	r0, #0
   22556:	bf18      	it	ne
   22558:	2001      	movne	r0, #1
   2255a:	4770      	bx	lr

0002255c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2255c:	b108      	cbz	r0, 22562 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2255e:	f7f3 bc6f 	b.w	15e40 <arch_busy_wait>
}
   22562:	4770      	bx	lr

00022564 <z_impl_k_thread_name_set>:
}
   22564:	f06f 0046 	mvn.w	r0, #70	; 0x46
   22568:	4770      	bx	lr

0002256a <k_thread_name_get>:
}
   2256a:	2000      	movs	r0, #0
   2256c:	4770      	bx	lr

0002256e <k_work_submit_to_queue>:
{
   2256e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22570:	f101 0308 	add.w	r3, r1, #8
   22574:	f3bf 8f5b 	dmb	ish
   22578:	e853 2f00 	ldrex	r2, [r3]
   2257c:	f042 0c01 	orr.w	ip, r2, #1
   22580:	e843 ce00 	strex	lr, ip, [r3]
   22584:	f1be 0f00 	cmp.w	lr, #0
   22588:	d1f6      	bne.n	22578 <k_work_submit_to_queue+0xa>
   2258a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2258e:	07d3      	lsls	r3, r2, #31
   22590:	d403      	bmi.n	2259a <k_work_submit_to_queue+0x2c>
}
   22592:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22596:	f7ff be7f 	b.w	22298 <k_queue_append>
}
   2259a:	f85d fb04 	ldr.w	pc, [sp], #4

0002259e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2259e:	f1a0 0110 	sub.w	r1, r0, #16
   225a2:	6980      	ldr	r0, [r0, #24]
   225a4:	f7ff bfe3 	b.w	2256e <k_work_submit_to_queue>

000225a8 <work_cancel>:
{
   225a8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   225aa:	f3bf 8f5b 	dmb	ish
   225ae:	6883      	ldr	r3, [r0, #8]
   225b0:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   225b4:	07db      	lsls	r3, r3, #31
{
   225b6:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   225b8:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   225bc:	d532      	bpl.n	22624 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   225be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   225c0:	6813      	ldr	r3, [r2, #0]
   225c2:	2100      	movs	r1, #0
   225c4:	b913      	cbnz	r3, 225cc <work_cancel+0x24>
			return -EINVAL;
   225c6:	f06f 0015 	mvn.w	r0, #21
}
   225ca:	bd70      	pop	{r4, r5, r6, pc}
   225cc:	429c      	cmp	r4, r3
   225ce:	d124      	bne.n	2261a <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   225d0:	6823      	ldr	r3, [r4, #0]
   225d2:	6856      	ldr	r6, [r2, #4]
   225d4:	f023 0003 	bic.w	r0, r3, #3
   225d8:	b9b1      	cbnz	r1, 22608 <work_cancel+0x60>
   225da:	42b4      	cmp	r4, r6
	list->head = node;
   225dc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   225de:	d100      	bne.n	225e2 <work_cancel+0x3a>
	list->tail = node;
   225e0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   225e2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   225e4:	f003 0303 	and.w	r3, r3, #3
   225e8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   225ea:	2000      	movs	r0, #0
   225ec:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   225ee:	f3bf 8f5b 	dmb	ish
   225f2:	e855 3f00 	ldrex	r3, [r5]
   225f6:	f023 0301 	bic.w	r3, r3, #1
   225fa:	e845 3200 	strex	r2, r3, [r5]
   225fe:	2a00      	cmp	r2, #0
   22600:	d1f7      	bne.n	225f2 <work_cancel+0x4a>
   22602:	f3bf 8f5b 	dmb	ish
   22606:	e7e0      	b.n	225ca <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22608:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2260a:	f003 0303 	and.w	r3, r3, #3
   2260e:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   22610:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   22612:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22614:	bf08      	it	eq
   22616:	6051      	streq	r1, [r2, #4]
}
   22618:	e7e3      	b.n	225e2 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2261a:	6818      	ldr	r0, [r3, #0]
   2261c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2261e:	f020 0303 	bic.w	r3, r0, #3
   22622:	e7cf      	b.n	225c4 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   22624:	3010      	adds	r0, #16
   22626:	f000 f81b 	bl	22660 <z_abort_timeout>
		if (err) {
   2262a:	2800      	cmp	r0, #0
   2262c:	d0dd      	beq.n	225ea <work_cancel+0x42>
			return -EALREADY;
   2262e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   22632:	e7ca      	b.n	225ca <work_cancel+0x22>

00022634 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22634:	b510      	push	{r4, lr}
	__asm__ volatile(
   22636:	f04f 0240 	mov.w	r2, #64	; 0x40
   2263a:	f3ef 8411 	mrs	r4, BASEPRI
   2263e:	f382 8811 	msr	BASEPRI, r2
   22642:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   22646:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22648:	b133      	cbz	r3, 22658 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   2264a:	f7ff ffad 	bl	225a8 <work_cancel>
	__asm__ volatile(
   2264e:	f384 8811 	msr	BASEPRI, r4
   22652:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   22656:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22658:	f06f 0015 	mvn.w	r0, #21
   2265c:	e7f7      	b.n	2264e <k_delayed_work_cancel+0x1a>

0002265e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2265e:	4770      	bx	lr

00022660 <z_abort_timeout>:
{
   22660:	b510      	push	{r4, lr}
	__asm__ volatile(
   22662:	f04f 0240 	mov.w	r2, #64	; 0x40
   22666:	f3ef 8411 	mrs	r4, BASEPRI
   2266a:	f382 8811 	msr	BASEPRI, r2
   2266e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22672:	6803      	ldr	r3, [r0, #0]
   22674:	b13b      	cbz	r3, 22686 <z_abort_timeout+0x26>
			remove_timeout(to);
   22676:	f7fb fdf5 	bl	1e264 <remove_timeout>
			ret = 0;
   2267a:	2000      	movs	r0, #0
	__asm__ volatile(
   2267c:	f384 8811 	msr	BASEPRI, r4
   22680:	f3bf 8f6f 	isb	sy
}
   22684:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22686:	f06f 0015 	mvn.w	r0, #21
   2268a:	e7f7      	b.n	2267c <z_abort_timeout+0x1c>

0002268c <z_get_next_timeout_expiry>:
{
   2268c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2268e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22692:	f3ef 8411 	mrs	r4, BASEPRI
   22696:	f383 8811 	msr	BASEPRI, r3
   2269a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2269e:	f7fb fdfb 	bl	1e298 <next_timeout>
	__asm__ volatile(
   226a2:	f384 8811 	msr	BASEPRI, r4
   226a6:	f3bf 8f6f 	isb	sy
}
   226aa:	bd10      	pop	{r4, pc}

000226ac <z_set_timeout_expiry>:
{
   226ac:	b570      	push	{r4, r5, r6, lr}
   226ae:	4604      	mov	r4, r0
   226b0:	460d      	mov	r5, r1
	__asm__ volatile(
   226b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   226b6:	f3ef 8611 	mrs	r6, BASEPRI
   226ba:	f383 8811 	msr	BASEPRI, r3
   226be:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   226c2:	f7fb fde9 	bl	1e298 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   226c6:	2801      	cmp	r0, #1
   226c8:	dd05      	ble.n	226d6 <z_set_timeout_expiry+0x2a>
   226ca:	42a0      	cmp	r0, r4
   226cc:	dd03      	ble.n	226d6 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   226ce:	4629      	mov	r1, r5
   226d0:	4620      	mov	r0, r4
   226d2:	f7f2 fcc9 	bl	15068 <z_clock_set_timeout>
	__asm__ volatile(
   226d6:	f386 8811 	msr	BASEPRI, r6
   226da:	f3bf 8f6f 	isb	sy
}
   226de:	bd70      	pop	{r4, r5, r6, pc}

000226e0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   226e0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   226e2:	f7fb ff01 	bl	1e4e8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   226e6:	bd08      	pop	{r3, pc}

000226e8 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   226e8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   226ea:	1c4b      	adds	r3, r1, #1
   226ec:	bf08      	it	eq
   226ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   226f2:	4604      	mov	r4, r0
   226f4:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   226f6:	d013      	beq.n	22720 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   226f8:	ea54 0105 	orrs.w	r1, r4, r5
   226fc:	d103      	bne.n	22706 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   226fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   22702:	f7fb bef1 	b.w	1e4e8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22706:	f06f 0101 	mvn.w	r1, #1
   2270a:	1a0a      	subs	r2, r1, r0
   2270c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22710:	eb61 0305 	sbc.w	r3, r1, r5
   22714:	2a00      	cmp	r2, #0
   22716:	f173 0100 	sbcs.w	r1, r3, #0
   2271a:	db02      	blt.n	22722 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2271c:	4610      	mov	r0, r2
   2271e:	4619      	mov	r1, r3
}
   22720:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   22722:	f7fb fee1 	bl	1e4e8 <z_tick_get>
   22726:	2c01      	cmp	r4, #1
   22728:	f175 0300 	sbcs.w	r3, r5, #0
   2272c:	bfbc      	itt	lt
   2272e:	2401      	movlt	r4, #1
   22730:	2500      	movlt	r5, #0
   22732:	1820      	adds	r0, r4, r0
   22734:	eb45 0101 	adc.w	r1, r5, r1
   22738:	e7f2      	b.n	22720 <z_timeout_end_calc+0x38>

0002273a <k_timer_init>:
	timer->status = 0U;
   2273a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2273c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   22740:	f100 0218 	add.w	r2, r0, #24
   22744:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   22748:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2274c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2274e:	6343      	str	r3, [r0, #52]	; 0x34
}
   22750:	4770      	bx	lr

00022752 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   22752:	b510      	push	{r4, lr}
   22754:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   22756:	f7ff ff83 	bl	22660 <z_abort_timeout>

	if (inactive) {
   2275a:	b9d8      	cbnz	r0, 22794 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2275c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2275e:	b10b      	cbz	r3, 22764 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   22760:	4620      	mov	r0, r4
   22762:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   22764:	f104 0018 	add.w	r0, r4, #24
   22768:	2100      	movs	r1, #0
   2276a:	f7ff fdef 	bl	2234c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2276e:	4604      	mov	r4, r0
   22770:	b180      	cbz	r0, 22794 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   22772:	f7ff fdfb 	bl	2236c <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   22776:	4620      	mov	r0, r4
   22778:	f7ff fe4a 	bl	22410 <z_ready_thread>
	__asm__ volatile(
   2277c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22780:	f3ef 8011 	mrs	r0, BASEPRI
   22784:	f383 8811 	msr	BASEPRI, r3
   22788:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2278c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   22790:	f7ff bdfc 	b.w	2238c <z_reschedule_irqlock>
   22794:	bd10      	pop	{r4, pc}

00022796 <clear_event_registrations>:
	while (num_events--) {
   22796:	2314      	movs	r3, #20
{
   22798:	b530      	push	{r4, r5, lr}
   2279a:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2279e:	2400      	movs	r4, #0
	while (num_events--) {
   227a0:	4281      	cmp	r1, r0
   227a2:	d100      	bne.n	227a6 <clear_event_registrations+0x10>
}
   227a4:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   227a6:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   227aa:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   227ae:	f003 030f 	and.w	r3, r3, #15
   227b2:	2b02      	cmp	r3, #2
   227b4:	d80a      	bhi.n	227cc <clear_event_registrations+0x36>
   227b6:	b15b      	cbz	r3, 227d0 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   227b8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   227bc:	b143      	cbz	r3, 227d0 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   227be:	f851 5c10 	ldr.w	r5, [r1, #-16]
   227c2:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   227c4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   227c6:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   227ca:	e001      	b.n	227d0 <clear_event_registrations+0x3a>
	switch (event->type) {
   227cc:	2b04      	cmp	r3, #4
   227ce:	d0f3      	beq.n	227b8 <clear_event_registrations+0x22>
	__asm__ volatile(
   227d0:	f382 8811 	msr	BASEPRI, r2
   227d4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   227d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   227dc:	f3ef 8211 	mrs	r2, BASEPRI
   227e0:	f383 8811 	msr	BASEPRI, r3
   227e4:	f3bf 8f6f 	isb	sy
   227e8:	3914      	subs	r1, #20
   227ea:	e7d9      	b.n	227a0 <clear_event_registrations+0xa>

000227ec <k_work_submit_to_queue>:
{
   227ec:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   227ee:	f101 0308 	add.w	r3, r1, #8
   227f2:	f3bf 8f5b 	dmb	ish
   227f6:	e853 2f00 	ldrex	r2, [r3]
   227fa:	f042 0c01 	orr.w	ip, r2, #1
   227fe:	e843 ce00 	strex	lr, ip, [r3]
   22802:	f1be 0f00 	cmp.w	lr, #0
   22806:	d1f6      	bne.n	227f6 <k_work_submit_to_queue+0xa>
   22808:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2280c:	07d3      	lsls	r3, r2, #31
   2280e:	d403      	bmi.n	22818 <k_work_submit_to_queue+0x2c>
}
   22810:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22814:	f7ff bd40 	b.w	22298 <k_queue_append>
}
   22818:	f85d fb04 	ldr.w	pc, [sp], #4

0002281c <signal_poll_event>:
{
   2281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   22820:	6884      	ldr	r4, [r0, #8]
{
   22822:	4605      	mov	r5, r0
   22824:	460e      	mov	r6, r1
	if (poller) {
   22826:	b144      	cbz	r4, 2283a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   22828:	7863      	ldrb	r3, [r4, #1]
   2282a:	2b01      	cmp	r3, #1
   2282c:	d138      	bne.n	228a0 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2282e:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   22832:	f013 0302 	ands.w	r3, r3, #2
   22836:	d10a      	bne.n	2284e <signal_poll_event+0x32>
		poller->is_polling = false;
   22838:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2283a:	68eb      	ldr	r3, [r5, #12]
   2283c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   22840:	430e      	orrs	r6, r1
	event->poller = NULL;
   22842:	2000      	movs	r0, #0
	event->state |= state;
   22844:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   22848:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2284a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2284c:	e00d      	b.n	2286a <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2284e:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   22852:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22856:	f06f 0001 	mvn.w	r0, #1
   2285a:	428b      	cmp	r3, r1
   2285c:	bf08      	it	eq
   2285e:	4282      	cmpeq	r2, r0
   22860:	d105      	bne.n	2286e <signal_poll_event+0x52>
		poller->is_polling = false;
   22862:	2300      	movs	r3, #0
   22864:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   22866:	f06f 000a 	mvn.w	r0, #10
}
   2286a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2286e:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   22872:	4640      	mov	r0, r8
   22874:	f7ff fdac 	bl	223d0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22878:	2e08      	cmp	r6, #8
   2287a:	bf0c      	ite	eq
   2287c:	f06f 0303 	mvneq.w	r3, #3
   22880:	2300      	movne	r3, #0
   22882:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22884:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   22888:	06db      	lsls	r3, r3, #27
   2288a:	d102      	bne.n	22892 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2288c:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   22890:	b10f      	cbz	r7, 22896 <signal_poll_event+0x7a>
		poller->is_polling = false;
   22892:	2300      	movs	r3, #0
   22894:	e7d0      	b.n	22838 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   22896:	4640      	mov	r0, r8
   22898:	f7ff fdba 	bl	22410 <z_ready_thread>
		poller->is_polling = false;
   2289c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2289e:	e7cc      	b.n	2283a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   228a0:	2b02      	cmp	r3, #2
   228a2:	d1f6      	bne.n	22892 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   228a4:	7823      	ldrb	r3, [r4, #0]
   228a6:	2b00      	cmp	r3, #0
   228a8:	d0c7      	beq.n	2283a <signal_poll_event+0x1e>
   228aa:	f854 7c04 	ldr.w	r7, [r4, #-4]
   228ae:	2f00      	cmp	r7, #0
   228b0:	d0f4      	beq.n	2289c <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   228b2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   228b6:	f1a4 0910 	sub.w	r9, r4, #16
   228ba:	f104 0010 	add.w	r0, r4, #16
   228be:	f7ff fecf 	bl	22660 <z_abort_timeout>
		twork->poll_result = 0;
   228c2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   228c6:	4649      	mov	r1, r9
   228c8:	4638      	mov	r0, r7
   228ca:	f7ff ff8f 	bl	227ec <k_work_submit_to_queue>
		poller->is_polling = false;
   228ce:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   228d2:	e7b2      	b.n	2283a <signal_poll_event+0x1e>

000228d4 <add_event>:
{
   228d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228d6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   228d8:	e9d0 2300 	ldrd	r2, r3, [r0]
   228dc:	4290      	cmp	r0, r2
   228de:	4604      	mov	r4, r0
   228e0:	460d      	mov	r5, r1
   228e2:	d106      	bne.n	228f2 <add_event+0x1e>
	node->prev = list->tail;
   228e4:	6863      	ldr	r3, [r4, #4]
   228e6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   228e8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   228ea:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   228ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
   228ee:	6065      	str	r5, [r4, #4]
}
   228f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   228f2:	2b00      	cmp	r3, #0
   228f4:	d0f6      	beq.n	228e4 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   228f6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   228f8:	b100      	cbz	r0, 228fc <add_event+0x28>
   228fa:	3864      	subs	r0, #100	; 0x64
   228fc:	b107      	cbz	r7, 22900 <add_event+0x2c>
   228fe:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   22900:	4639      	mov	r1, r7
   22902:	f7ff fd1a 	bl	2233a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   22906:	2800      	cmp	r0, #0
   22908:	d1ec      	bne.n	228e4 <add_event+0x10>
	return list->head == list;
   2290a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2290c:	42b4      	cmp	r4, r6
   2290e:	d0e9      	beq.n	228e4 <add_event+0x10>
   22910:	2e00      	cmp	r6, #0
   22912:	bf38      	it	cc
   22914:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22916:	2e00      	cmp	r6, #0
   22918:	d0e4      	beq.n	228e4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2291a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2291c:	b101      	cbz	r1, 22920 <add_event+0x4c>
   2291e:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   22920:	4638      	mov	r0, r7
   22922:	f7ff fd0a 	bl	2233a <z_is_t1_higher_prio_than_t2>
   22926:	b128      	cbz	r0, 22934 <add_event+0x60>
	node->prev = successor->prev;
   22928:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2292a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2292e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22930:	6075      	str	r5, [r6, #4]
			return;
   22932:	e7dd      	b.n	228f0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   22934:	6863      	ldr	r3, [r4, #4]
   22936:	42b3      	cmp	r3, r6
   22938:	d0d4      	beq.n	228e4 <add_event+0x10>
   2293a:	6836      	ldr	r6, [r6, #0]
   2293c:	e7eb      	b.n	22916 <add_event+0x42>

0002293e <register_events>:
{
   2293e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   22942:	f04f 0a00 	mov.w	sl, #0
{
   22946:	460e      	mov	r6, r1
   22948:	4614      	mov	r4, r2
   2294a:	461f      	mov	r7, r3
   2294c:	4683      	mov	fp, r0
	int events_registered = 0;
   2294e:	4655      	mov	r5, sl
	event->poller = NULL;
   22950:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   22952:	45b2      	cmp	sl, r6
   22954:	db02      	blt.n	2295c <register_events+0x1e>
}
   22956:	4628      	mov	r0, r5
   22958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2295c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22960:	f3ef 8911 	mrs	r9, BASEPRI
   22964:	f383 8811 	msr	BASEPRI, r3
   22968:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2296c:	f89b 200d 	ldrb.w	r2, [fp, #13]
   22970:	f002 020f 	and.w	r2, r2, #15
   22974:	2a02      	cmp	r2, #2
   22976:	d006      	beq.n	22986 <register_events+0x48>
   22978:	2a04      	cmp	r2, #4
   2297a:	d008      	beq.n	2298e <register_events+0x50>
   2297c:	2a01      	cmp	r2, #1
   2297e:	d120      	bne.n	229c2 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   22980:	f8db 3010 	ldr.w	r3, [fp, #16]
   22984:	e001      	b.n	2298a <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   22986:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2298a:	689b      	ldr	r3, [r3, #8]
   2298c:	e002      	b.n	22994 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2298e:	f8db 3010 	ldr.w	r3, [fp, #16]
   22992:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   22994:	b1ab      	cbz	r3, 229c2 <register_events+0x84>
	event->state |= state;
   22996:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2299a:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2299e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   229a2:	430a      	orrs	r2, r1
   229a4:	f362 3310 	bfi	r3, r2, #12, #5
   229a8:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   229ac:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   229b0:	f389 8811 	msr	BASEPRI, r9
   229b4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   229b8:	f10a 0a01 	add.w	sl, sl, #1
   229bc:	f10b 0b14 	add.w	fp, fp, #20
   229c0:	e7c7      	b.n	22952 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   229c2:	2f00      	cmp	r7, #0
   229c4:	d1f4      	bne.n	229b0 <register_events+0x72>
   229c6:	7823      	ldrb	r3, [r4, #0]
   229c8:	2b00      	cmp	r3, #0
   229ca:	d0f1      	beq.n	229b0 <register_events+0x72>
	switch (event->type) {
   229cc:	f89b 300d 	ldrb.w	r3, [fp, #13]
   229d0:	f003 030f 	and.w	r3, r3, #15
   229d4:	2b02      	cmp	r3, #2
   229d6:	d008      	beq.n	229ea <register_events+0xac>
   229d8:	2b04      	cmp	r3, #4
   229da:	d006      	beq.n	229ea <register_events+0xac>
   229dc:	2b01      	cmp	r3, #1
   229de:	d10b      	bne.n	229f8 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   229e0:	f8db 0010 	ldr.w	r0, [fp, #16]
   229e4:	4622      	mov	r2, r4
   229e6:	4659      	mov	r1, fp
   229e8:	e004      	b.n	229f4 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   229ea:	f8db 0010 	ldr.w	r0, [fp, #16]
   229ee:	4622      	mov	r2, r4
   229f0:	4659      	mov	r1, fp
   229f2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   229f4:	f7ff ff6e 	bl	228d4 <add_event>
	event->poller = poller;
   229f8:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   229fc:	3501      	adds	r5, #1
   229fe:	e7d7      	b.n	229b0 <register_events+0x72>

00022a00 <k_poll_event_init>:
{
   22a00:	b510      	push	{r4, lr}
	event->type = type;
   22a02:	0452      	lsls	r2, r2, #17
   22a04:	0209      	lsls	r1, r1, #8
   22a06:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   22a0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   22a0e:	430a      	orrs	r2, r1
   22a10:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   22a12:	2400      	movs	r4, #0
	event->type = type;
   22a14:	430a      	orrs	r2, r1
	event->obj = obj;
   22a16:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   22a1a:	6084      	str	r4, [r0, #8]
}
   22a1c:	bd10      	pop	{r4, pc}

00022a1e <z_handle_obj_poll_events>:
{
   22a1e:	4603      	mov	r3, r0
	return list->head == list;
   22a20:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   22a22:	4283      	cmp	r3, r0
   22a24:	d008      	beq.n	22a38 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   22a26:	e9d0 3200 	ldrd	r3, r2, [r0]
   22a2a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22a2c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22a2e:	2300      	movs	r3, #0
	node->prev = NULL;
   22a30:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   22a34:	f7ff bef2 	b.w	2281c <signal_poll_event>
}
   22a38:	4770      	bx	lr

00022a3a <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   22a3a:	2904      	cmp	r1, #4
{
   22a3c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   22a40:	460d      	mov	r5, r1
   22a42:	bf38      	it	cc
   22a44:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22a46:	1952      	adds	r2, r2, r5
{
   22a48:	4606      	mov	r6, r0
   22a4a:	d209      	bcs.n	22a60 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   22a4c:	f04f 0800 	mov.w	r8, #0
   22a50:	f04f 0900 	mov.w	r9, #0
   22a54:	e9cd 8900 	strd	r8, r9, [sp]
   22a58:	f7ff fb1b 	bl	22092 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22a5c:	4604      	mov	r4, r0
   22a5e:	b918      	cbnz	r0, 22a68 <z_heap_aligned_alloc+0x2e>
		return NULL;
   22a60:	2000      	movs	r0, #0
}
   22a62:	b002      	add	sp, #8
   22a64:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   22a68:	462a      	mov	r2, r5
   22a6a:	21ff      	movs	r1, #255	; 0xff
   22a6c:	f7fd fe0d 	bl	2068a <memset>
	*heap_ref = heap;
   22a70:	6026      	str	r6, [r4, #0]
	return mem + excess;
   22a72:	1960      	adds	r0, r4, r5
   22a74:	e7f5      	b.n	22a62 <z_heap_aligned_alloc+0x28>

00022a76 <k_free>:
	if (ptr != NULL) {
   22a76:	b138      	cbz	r0, 22a88 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   22a78:	1f03      	subs	r3, r0, #4
   22a7a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   22a7c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   22a80:	1c42      	adds	r2, r0, #1
   22a82:	d0fa      	beq.n	22a7a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   22a84:	f7ff bb4c 	b.w	22120 <k_heap_free>
}
   22a88:	4770      	bx	lr

00022a8a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   22a8a:	4770      	bx	lr
