
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	2002c5b8 	.word	0x2002c5b8
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	00004285 	.word	0x00004285
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	00019107 	.word	0x00019107
   c:	000042b5 	.word	0x000042b5
  10:	000042b5 	.word	0x000042b5
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	000042b5 	.word	0x000042b5
  18:	000042b5 	.word	0x000042b5
	post_ops_done = 0;
  1c:	000042b5 	.word	0x000042b5
	...
	pm_power_state_set(pm_state);
  2c:	00004059 	.word	0x00004059
	if (!post_ops_done) {
  30:	000042b5 	.word	0x000042b5
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	00004001 	.word	0x00004001
		pm_state_notify(false);
  3c:	000188f7 	.word	0x000188f7

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
	return pm_policy_mgr(ticks);
}
  50:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 **********************/

void _lv_gc_clear_roots(void)
{
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
  60:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  70:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  80:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  90:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  a0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  b0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  c0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  d0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  e0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
  f0:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 100:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 110:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 120:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 130:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 140:	00004245 00004245 00004245 00004245     EB..EB..EB..EB..
 150:	00004245                                EB..

Disassembly of section text:

00000158 <__aeabi_frsub>:
     158:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__addsf3>
     15e:	bf00      	nop

00000160 <__aeabi_fsub>:
     160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000164 <__addsf3>:
     164:	0042      	lsls	r2, r0, #1
     166:	bf1f      	itttt	ne
     168:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     16c:	ea92 0f03 	teqne	r2, r3
     170:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     174:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     178:	d06a      	beq.n	250 <CONFIG_SRAM_SIZE+0x90>
     17a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     17e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     182:	bfc1      	itttt	gt
     184:	18d2      	addgt	r2, r2, r3
     186:	4041      	eorgt	r1, r0
     188:	4048      	eorgt	r0, r1
     18a:	4041      	eorgt	r1, r0
     18c:	bfb8      	it	lt
     18e:	425b      	neglt	r3, r3
     190:	2b19      	cmp	r3, #25
     192:	bf88      	it	hi
     194:	4770      	bxhi	lr
     196:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     19a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     19e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     1a2:	bf18      	it	ne
     1a4:	4240      	negne	r0, r0
     1a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     1b2:	bf18      	it	ne
     1b4:	4249      	negne	r1, r1
     1b6:	ea92 0f03 	teq	r2, r3
     1ba:	d03f      	beq.n	23c <CONFIG_SRAM_SIZE+0x7c>
     1bc:	f1a2 0201 	sub.w	r2, r2, #1
     1c0:	fa41 fc03 	asr.w	ip, r1, r3
     1c4:	eb10 000c 	adds.w	r0, r0, ip
     1c8:	f1c3 0320 	rsb	r3, r3, #32
     1cc:	fa01 f103 	lsl.w	r1, r1, r3
     1d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     1d4:	d502      	bpl.n	1dc <CONFIG_SRAM_SIZE+0x1c>
     1d6:	4249      	negs	r1, r1
     1d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     1dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     1e0:	d313      	bcc.n	20a <CONFIG_SRAM_SIZE+0x4a>
     1e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     1e6:	d306      	bcc.n	1f6 <CONFIG_SRAM_SIZE+0x36>
     1e8:	0840      	lsrs	r0, r0, #1
     1ea:	ea4f 0131 	mov.w	r1, r1, rrx
     1ee:	f102 0201 	add.w	r2, r2, #1
     1f2:	2afe      	cmp	r2, #254	; 0xfe
     1f4:	d251      	bcs.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     1f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1fe:	bf08      	it	eq
     200:	f020 0001 	biceq.w	r0, r0, #1
     204:	ea40 0003 	orr.w	r0, r0, r3
     208:	4770      	bx	lr
     20a:	0049      	lsls	r1, r1, #1
     20c:	eb40 0000 	adc.w	r0, r0, r0
     210:	3a01      	subs	r2, #1
     212:	bf28      	it	cs
     214:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     218:	d2ed      	bcs.n	1f6 <CONFIG_SRAM_SIZE+0x36>
     21a:	fab0 fc80 	clz	ip, r0
     21e:	f1ac 0c08 	sub.w	ip, ip, #8
     222:	ebb2 020c 	subs.w	r2, r2, ip
     226:	fa00 f00c 	lsl.w	r0, r0, ip
     22a:	bfaa      	itet	ge
     22c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     230:	4252      	neglt	r2, r2
     232:	4318      	orrge	r0, r3
     234:	bfbc      	itt	lt
     236:	40d0      	lsrlt	r0, r2
     238:	4318      	orrlt	r0, r3
     23a:	4770      	bx	lr
     23c:	f092 0f00 	teq	r2, #0
     240:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     244:	bf06      	itte	eq
     246:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     24a:	3201      	addeq	r2, #1
     24c:	3b01      	subne	r3, #1
     24e:	e7b5      	b.n	1bc <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x2c>
     250:	ea4f 0341 	mov.w	r3, r1, lsl #1
     254:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     258:	bf18      	it	ne
     25a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     25e:	d021      	beq.n	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     260:	ea92 0f03 	teq	r2, r3
     264:	d004      	beq.n	270 <CONFIG_SRAM_SIZE+0xb0>
     266:	f092 0f00 	teq	r2, #0
     26a:	bf08      	it	eq
     26c:	4608      	moveq	r0, r1
     26e:	4770      	bx	lr
     270:	ea90 0f01 	teq	r0, r1
     274:	bf1c      	itt	ne
     276:	2000      	movne	r0, #0
     278:	4770      	bxne	lr
     27a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     27e:	d104      	bne.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     280:	0040      	lsls	r0, r0, #1
     282:	bf28      	it	cs
     284:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     288:	4770      	bx	lr
     28a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     28e:	bf3c      	itt	cc
     290:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     294:	4770      	bxcc	lr
     296:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     29a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     29e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2a2:	4770      	bx	lr
     2a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2a8:	bf16      	itet	ne
     2aa:	4608      	movne	r0, r1
     2ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2b0:	4601      	movne	r1, r0
     2b2:	0242      	lsls	r2, r0, #9
     2b4:	bf06      	itte	eq
     2b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     2ba:	ea90 0f01 	teqeq	r0, r1
     2be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     2c2:	4770      	bx	lr

000002c4 <__aeabi_ui2f>:
     2c4:	f04f 0300 	mov.w	r3, #0
     2c8:	e004      	b.n	2d4 <__aeabi_i2f+0x8>
     2ca:	bf00      	nop

000002cc <__aeabi_i2f>:
     2cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     2d0:	bf48      	it	mi
     2d2:	4240      	negmi	r0, r0
     2d4:	ea5f 0c00 	movs.w	ip, r0
     2d8:	bf08      	it	eq
     2da:	4770      	bxeq	lr
     2dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     2e0:	4601      	mov	r1, r0
     2e2:	f04f 0000 	mov.w	r0, #0
     2e6:	e01c      	b.n	322 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x22>

000002e8 <__aeabi_ul2f>:
     2e8:	ea50 0201 	orrs.w	r2, r0, r1
     2ec:	bf08      	it	eq
     2ee:	4770      	bxeq	lr
     2f0:	f04f 0300 	mov.w	r3, #0
     2f4:	e00a      	b.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	bf00      	nop

000002f8 <__aeabi_l2f>:
     2f8:	ea50 0201 	orrs.w	r2, r0, r1
     2fc:	bf08      	it	eq
     2fe:	4770      	bxeq	lr
     300:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     304:	d502      	bpl.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     306:	4240      	negs	r0, r0
     308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     30c:	ea5f 0c01 	movs.w	ip, r1
     310:	bf02      	ittt	eq
     312:	4684      	moveq	ip, r0
     314:	4601      	moveq	r1, r0
     316:	2000      	moveq	r0, #0
     318:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     31c:	bf08      	it	eq
     31e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     322:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     326:	fabc f28c 	clz	r2, ip
     32a:	3a08      	subs	r2, #8
     32c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     330:	db10      	blt.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     332:	fa01 fc02 	lsl.w	ip, r1, r2
     336:	4463      	add	r3, ip
     338:	fa00 fc02 	lsl.w	ip, r0, r2
     33c:	f1c2 0220 	rsb	r2, r2, #32
     340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     344:	fa20 f202 	lsr.w	r2, r0, r2
     348:	eb43 0002 	adc.w	r0, r3, r2
     34c:	bf08      	it	eq
     34e:	f020 0001 	biceq.w	r0, r0, #1
     352:	4770      	bx	lr
     354:	f102 0220 	add.w	r2, r2, #32
     358:	fa01 fc02 	lsl.w	ip, r1, r2
     35c:	f1c2 0220 	rsb	r2, r2, #32
     360:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     364:	fa21 f202 	lsr.w	r2, r1, r2
     368:	eb43 0002 	adc.w	r0, r3, r2
     36c:	bf08      	it	eq
     36e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     372:	4770      	bx	lr

00000374 <__aeabi_fmul>:
     374:	f04f 0cff 	mov.w	ip, #255	; 0xff
     378:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     37c:	bf1e      	ittt	ne
     37e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     382:	ea92 0f0c 	teqne	r2, ip
     386:	ea93 0f0c 	teqne	r3, ip
     38a:	d06f      	beq.n	46c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     38c:	441a      	add	r2, r3
     38e:	ea80 0c01 	eor.w	ip, r0, r1
     392:	0240      	lsls	r0, r0, #9
     394:	bf18      	it	ne
     396:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     39a:	d01e      	beq.n	3da <__aeabi_fmul+0x66>
     39c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     3a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     3a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     3a8:	fba0 3101 	umull	r3, r1, r0, r1
     3ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     3b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     3b4:	bf3e      	ittt	cc
     3b6:	0049      	lslcc	r1, r1, #1
     3b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     3bc:	005b      	lslcc	r3, r3, #1
     3be:	ea40 0001 	orr.w	r0, r0, r1
     3c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     3c6:	2afd      	cmp	r2, #253	; 0xfd
     3c8:	d81d      	bhi.n	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     3ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     3d2:	bf08      	it	eq
     3d4:	f020 0001 	biceq.w	r0, r0, #1
     3d8:	4770      	bx	lr
     3da:	f090 0f00 	teq	r0, #0
     3de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     3e2:	bf08      	it	eq
     3e4:	0249      	lsleq	r1, r1, #9
     3e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     3ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     3ee:	3a7f      	subs	r2, #127	; 0x7f
     3f0:	bfc2      	ittt	gt
     3f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     3f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     3fa:	4770      	bxgt	lr
     3fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     400:	f04f 0300 	mov.w	r3, #0
     404:	3a01      	subs	r2, #1
     406:	dc5d      	bgt.n	4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x78>
     408:	f112 0f19 	cmn.w	r2, #25
     40c:	bfdc      	itt	le
     40e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     412:	4770      	bxle	lr
     414:	f1c2 0200 	rsb	r2, r2, #0
     418:	0041      	lsls	r1, r0, #1
     41a:	fa21 f102 	lsr.w	r1, r1, r2
     41e:	f1c2 0220 	rsb	r2, r2, #32
     422:	fa00 fc02 	lsl.w	ip, r0, r2
     426:	ea5f 0031 	movs.w	r0, r1, rrx
     42a:	f140 0000 	adc.w	r0, r0, #0
     42e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     432:	bf08      	it	eq
     434:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     438:	4770      	bx	lr
     43a:	f092 0f00 	teq	r2, #0
     43e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     442:	bf02      	ittt	eq
     444:	0040      	lsleq	r0, r0, #1
     446:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     44a:	3a01      	subeq	r2, #1
     44c:	d0f9      	beq.n	442 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     44e:	ea40 000c 	orr.w	r0, r0, ip
     452:	f093 0f00 	teq	r3, #0
     456:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     45a:	bf02      	ittt	eq
     45c:	0049      	lsleq	r1, r1, #1
     45e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     462:	3b01      	subeq	r3, #1
     464:	d0f9      	beq.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     466:	ea41 010c 	orr.w	r1, r1, ip
     46a:	e78f      	b.n	38c <__aeabi_fmul+0x18>
     46c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     470:	ea92 0f0c 	teq	r2, ip
     474:	bf18      	it	ne
     476:	ea93 0f0c 	teqne	r3, ip
     47a:	d00a      	beq.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x46>
     47c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     480:	bf18      	it	ne
     482:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     486:	d1d8      	bne.n	43a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     488:	ea80 0001 	eor.w	r0, r0, r1
     48c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     490:	4770      	bx	lr
     492:	f090 0f00 	teq	r0, #0
     496:	bf17      	itett	ne
     498:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     49c:	4608      	moveq	r0, r1
     49e:	f091 0f00 	teqne	r1, #0
     4a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     4a6:	d014      	beq.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     4a8:	ea92 0f0c 	teq	r2, ip
     4ac:	d101      	bne.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x66>
     4ae:	0242      	lsls	r2, r0, #9
     4b0:	d10f      	bne.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     4b2:	ea93 0f0c 	teq	r3, ip
     4b6:	d103      	bne.n	4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>
     4b8:	024b      	lsls	r3, r1, #9
     4ba:	bf18      	it	ne
     4bc:	4608      	movne	r0, r1
     4be:	d108      	bne.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     4c0:	ea80 0001 	eor.w	r0, r0, r1
     4c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     4c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     4cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4d0:	4770      	bx	lr
     4d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     4d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     4da:	4770      	bx	lr

000004dc <__aeabi_fdiv>:
     4dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     4e4:	bf1e      	ittt	ne
     4e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     4ea:	ea92 0f0c 	teqne	r2, ip
     4ee:	ea93 0f0c 	teqne	r3, ip
     4f2:	d069      	beq.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
     4f4:	eba2 0203 	sub.w	r2, r2, r3
     4f8:	ea80 0c01 	eor.w	ip, r0, r1
     4fc:	0249      	lsls	r1, r1, #9
     4fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
     502:	d037      	beq.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
     504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     508:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     50c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     510:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     514:	428b      	cmp	r3, r1
     516:	bf38      	it	cc
     518:	005b      	lslcc	r3, r3, #1
     51a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     51e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     522:	428b      	cmp	r3, r1
     524:	bf24      	itt	cs
     526:	1a5b      	subcs	r3, r3, r1
     528:	ea40 000c 	orrcs.w	r0, r0, ip
     52c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     530:	bf24      	itt	cs
     532:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     536:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     53a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     53e:	bf24      	itt	cs
     540:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     544:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     548:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     54c:	bf24      	itt	cs
     54e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     552:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     556:	011b      	lsls	r3, r3, #4
     558:	bf18      	it	ne
     55a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     55e:	d1e0      	bne.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     560:	2afd      	cmp	r2, #253	; 0xfd
     562:	f63f af50 	bhi.w	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     566:	428b      	cmp	r3, r1
     568:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     56c:	bf08      	it	eq
     56e:	f020 0001 	biceq.w	r0, r0, #1
     572:	4770      	bx	lr
     574:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     578:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     57c:	327f      	adds	r2, #127	; 0x7f
     57e:	bfc2      	ittt	gt
     580:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     584:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     588:	4770      	bxgt	lr
     58a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     58e:	f04f 0300 	mov.w	r3, #0
     592:	3a01      	subs	r2, #1
     594:	e737      	b.n	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     596:	f092 0f00 	teq	r2, #0
     59a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     59e:	bf02      	ittt	eq
     5a0:	0040      	lsleq	r0, r0, #1
     5a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     5a6:	3a01      	subeq	r2, #1
     5a8:	d0f9      	beq.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
     5aa:	ea40 000c 	orr.w	r0, r0, ip
     5ae:	f093 0f00 	teq	r3, #0
     5b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     5b6:	bf02      	ittt	eq
     5b8:	0049      	lsleq	r1, r1, #1
     5ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     5be:	3b01      	subeq	r3, #1
     5c0:	d0f9      	beq.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
     5c2:	ea41 010c 	orr.w	r1, r1, ip
     5c6:	e795      	b.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     5c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     5cc:	ea92 0f0c 	teq	r2, ip
     5d0:	d108      	bne.n	5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>
     5d2:	0242      	lsls	r2, r0, #9
     5d4:	f47f af7d 	bne.w	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     5d8:	ea93 0f0c 	teq	r3, ip
     5dc:	f47f af70 	bne.w	4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>
     5e0:	4608      	mov	r0, r1
     5e2:	e776      	b.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     5e4:	ea93 0f0c 	teq	r3, ip
     5e8:	d104      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     5ea:	024b      	lsls	r3, r1, #9
     5ec:	f43f af4c 	beq.w	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>
     5f0:	4608      	mov	r0, r1
     5f2:	e76e      	b.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     5f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5f8:	bf18      	it	ne
     5fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5fe:	d1ca      	bne.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     600:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     604:	f47f af5c 	bne.w	4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>
     608:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     60c:	f47f af3c 	bne.w	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>
     610:	e75f      	b.n	4d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x86>
     612:	bf00      	nop

00000614 <__aeabi_f2uiz>:
     614:	0042      	lsls	r2, r0, #1
     616:	d20e      	bcs.n	636 <__aeabi_f2uiz+0x22>
     618:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     61c:	d30b      	bcc.n	636 <__aeabi_f2uiz+0x22>
     61e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     622:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     626:	d409      	bmi.n	63c <__aeabi_f2uiz+0x28>
     628:	ea4f 2300 	mov.w	r3, r0, lsl #8
     62c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     630:	fa23 f002 	lsr.w	r0, r3, r2
     634:	4770      	bx	lr
     636:	f04f 0000 	mov.w	r0, #0
     63a:	4770      	bx	lr
     63c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     640:	d101      	bne.n	646 <__aeabi_f2uiz+0x32>
     642:	0242      	lsls	r2, r0, #9
     644:	d102      	bne.n	64c <__aeabi_f2uiz+0x38>
     646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     64a:	4770      	bx	lr
     64c:	f04f 0000 	mov.w	r0, #0
     650:	4770      	bx	lr
     652:	bf00      	nop

00000654 <__aeabi_uldivmod>:
     654:	b953      	cbnz	r3, 66c <__aeabi_uldivmod+0x18>
     656:	b94a      	cbnz	r2, 66c <__aeabi_uldivmod+0x18>
     658:	2900      	cmp	r1, #0
     65a:	bf08      	it	eq
     65c:	2800      	cmpeq	r0, #0
     65e:	bf1c      	itt	ne
     660:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     664:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     668:	f000 b970 	b.w	94c <__aeabi_idiv0>
     66c:	f1ad 0c08 	sub.w	ip, sp, #8
     670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     674:	f000 f806 	bl	684 <__udivmoddi4>
     678:	f8dd e004 	ldr.w	lr, [sp, #4]
     67c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     680:	b004      	add	sp, #16
     682:	4770      	bx	lr

00000684 <__udivmoddi4>:
     684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     688:	9e08      	ldr	r6, [sp, #32]
     68a:	460d      	mov	r5, r1
     68c:	4604      	mov	r4, r0
     68e:	468a      	mov	sl, r1
     690:	2b00      	cmp	r3, #0
     692:	d17f      	bne.n	794 <__udivmoddi4+0x110>
     694:	428a      	cmp	r2, r1
     696:	4617      	mov	r7, r2
     698:	d941      	bls.n	71e <__udivmoddi4+0x9a>
     69a:	fab2 f282 	clz	r2, r2
     69e:	b14a      	cbz	r2, 6b4 <__udivmoddi4+0x30>
     6a0:	f1c2 0120 	rsb	r1, r2, #32
     6a4:	fa05 f302 	lsl.w	r3, r5, r2
     6a8:	4097      	lsls	r7, r2
     6aa:	4094      	lsls	r4, r2
     6ac:	fa20 f101 	lsr.w	r1, r0, r1
     6b0:	ea41 0a03 	orr.w	sl, r1, r3
     6b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     6b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     6bc:	fa1f f987 	uxth.w	r9, r7
     6c0:	fbba fef8 	udiv	lr, sl, r8
     6c4:	fb08 a31e 	mls	r3, r8, lr, sl
     6c8:	fb0e f109 	mul.w	r1, lr, r9
     6cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     6d0:	4299      	cmp	r1, r3
     6d2:	d906      	bls.n	6e2 <__udivmoddi4+0x5e>
     6d4:	18fb      	adds	r3, r7, r3
     6d6:	d202      	bcs.n	6de <__udivmoddi4+0x5a>
     6d8:	4299      	cmp	r1, r3
     6da:	f200 8124 	bhi.w	926 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x126>
     6de:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     6e2:	1a59      	subs	r1, r3, r1
     6e4:	b2a3      	uxth	r3, r4
     6e6:	fbb1 f0f8 	udiv	r0, r1, r8
     6ea:	fb08 1110 	mls	r1, r8, r0, r1
     6ee:	fb00 f909 	mul.w	r9, r0, r9
     6f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     6f6:	45a1      	cmp	r9, r4
     6f8:	d905      	bls.n	706 <__udivmoddi4+0x82>
     6fa:	193c      	adds	r4, r7, r4
     6fc:	d202      	bcs.n	704 <__udivmoddi4+0x80>
     6fe:	45a1      	cmp	r9, r4
     700:	f200 810e 	bhi.w	920 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x120>
     704:	3801      	subs	r0, #1
     706:	eba4 0409 	sub.w	r4, r4, r9
     70a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     70e:	2100      	movs	r1, #0
     710:	b11e      	cbz	r6, 71a <__udivmoddi4+0x96>
     712:	40d4      	lsrs	r4, r2
     714:	2300      	movs	r3, #0
     716:	e9c6 4300 	strd	r4, r3, [r6]
     71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     71e:	b902      	cbnz	r2, 722 <__udivmoddi4+0x9e>
     720:	deff      	udf	#255	; 0xff
     722:	fab2 f282 	clz	r2, r2
     726:	2a00      	cmp	r2, #0
     728:	d14f      	bne.n	7ca <__udivmoddi4+0x146>
     72a:	1bcb      	subs	r3, r1, r7
     72c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     730:	fa1f f887 	uxth.w	r8, r7
     734:	2101      	movs	r1, #1
     736:	0c25      	lsrs	r5, r4, #16
     738:	fbb3 fcfe 	udiv	ip, r3, lr
     73c:	fb0e 301c 	mls	r0, lr, ip, r3
     740:	462b      	mov	r3, r5
     742:	fb08 f90c 	mul.w	r9, r8, ip
     746:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     74a:	45a9      	cmp	r9, r5
     74c:	d90a      	bls.n	764 <__udivmoddi4+0xe0>
     74e:	197d      	adds	r5, r7, r5
     750:	bf2c      	ite	cs
     752:	2301      	movcs	r3, #1
     754:	2300      	movcc	r3, #0
     756:	45a9      	cmp	r9, r5
     758:	d902      	bls.n	760 <__udivmoddi4+0xdc>
     75a:	2b00      	cmp	r3, #0
     75c:	f000 80d9 	beq.w	912 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x112>
     760:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     764:	eba5 0509 	sub.w	r5, r5, r9
     768:	b2a3      	uxth	r3, r4
     76a:	fbb5 f0fe 	udiv	r0, r5, lr
     76e:	fb0e 5510 	mls	r5, lr, r0, r5
     772:	fb08 f800 	mul.w	r8, r8, r0
     776:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     77a:	45a0      	cmp	r8, r4
     77c:	d905      	bls.n	78a <__udivmoddi4+0x106>
     77e:	193c      	adds	r4, r7, r4
     780:	d202      	bcs.n	788 <__udivmoddi4+0x104>
     782:	45a0      	cmp	r8, r4
     784:	f200 80c9 	bhi.w	91a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x11a>
     788:	3801      	subs	r0, #1
     78a:	eba4 0408 	sub.w	r4, r4, r8
     78e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     792:	e7bd      	b.n	710 <__udivmoddi4+0x8c>
     794:	428b      	cmp	r3, r1
     796:	d908      	bls.n	7aa <__udivmoddi4+0x126>
     798:	2e00      	cmp	r6, #0
     79a:	f000 80b1 	beq.w	900 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x100>
     79e:	2100      	movs	r1, #0
     7a0:	e9c6 0500 	strd	r0, r5, [r6]
     7a4:	4608      	mov	r0, r1
     7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     7aa:	fab3 f183 	clz	r1, r3
     7ae:	2900      	cmp	r1, #0
     7b0:	d146      	bne.n	840 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40>
     7b2:	42ab      	cmp	r3, r5
     7b4:	f0c0 80a7 	bcc.w	906 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x106>
     7b8:	4282      	cmp	r2, r0
     7ba:	f240 80a4 	bls.w	906 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x106>
     7be:	4608      	mov	r0, r1
     7c0:	2e00      	cmp	r6, #0
     7c2:	d0aa      	beq.n	71a <__udivmoddi4+0x96>
     7c4:	e9c6 4a00 	strd	r4, sl, [r6]
     7c8:	e7a7      	b.n	71a <__udivmoddi4+0x96>
     7ca:	f1c2 0020 	rsb	r0, r2, #32
     7ce:	4097      	lsls	r7, r2
     7d0:	fa01 f302 	lsl.w	r3, r1, r2
     7d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     7d8:	40c1      	lsrs	r1, r0
     7da:	fa24 f500 	lsr.w	r5, r4, r0
     7de:	fa1f f887 	uxth.w	r8, r7
     7e2:	4094      	lsls	r4, r2
     7e4:	431d      	orrs	r5, r3
     7e6:	fbb1 f0fe 	udiv	r0, r1, lr
     7ea:	0c2b      	lsrs	r3, r5, #16
     7ec:	fb0e 1110 	mls	r1, lr, r0, r1
     7f0:	fb00 fc08 	mul.w	ip, r0, r8
     7f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     7f8:	459c      	cmp	ip, r3
     7fa:	d909      	bls.n	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     7fc:	18fb      	adds	r3, r7, r3
     7fe:	bf2c      	ite	cs
     800:	2101      	movcs	r1, #1
     802:	2100      	movcc	r1, #0
     804:	459c      	cmp	ip, r3
     806:	d902      	bls.n	80e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe>
     808:	2900      	cmp	r1, #0
     80a:	f000 8095 	beq.w	938 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x138>
     80e:	3801      	subs	r0, #1
     810:	eba3 030c 	sub.w	r3, r3, ip
     814:	b2ad      	uxth	r5, r5
     816:	fbb3 f1fe 	udiv	r1, r3, lr
     81a:	fb0e 3311 	mls	r3, lr, r1, r3
     81e:	fb01 fc08 	mul.w	ip, r1, r8
     822:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     826:	45ac      	cmp	ip, r5
     828:	d905      	bls.n	836 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36>
     82a:	197d      	adds	r5, r7, r5
     82c:	d202      	bcs.n	834 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x34>
     82e:	45ac      	cmp	ip, r5
     830:	f200 8089 	bhi.w	946 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x146>
     834:	3901      	subs	r1, #1
     836:	eba5 030c 	sub.w	r3, r5, ip
     83a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     83e:	e77a      	b.n	736 <__udivmoddi4+0xb2>
     840:	f1c1 0420 	rsb	r4, r1, #32
     844:	408b      	lsls	r3, r1
     846:	fa02 f701 	lsl.w	r7, r2, r1
     84a:	fa05 fc01 	lsl.w	ip, r5, r1
     84e:	40e2      	lsrs	r2, r4
     850:	fa20 f804 	lsr.w	r8, r0, r4
     854:	40e5      	lsrs	r5, r4
     856:	fa00 fe01 	lsl.w	lr, r0, r1
     85a:	4313      	orrs	r3, r2
     85c:	ea48 020c 	orr.w	r2, r8, ip
     860:	ea4f 4813 	mov.w	r8, r3, lsr #16
     864:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     868:	fa1f f983 	uxth.w	r9, r3
     86c:	fbb5 faf8 	udiv	sl, r5, r8
     870:	fb08 551a 	mls	r5, r8, sl, r5
     874:	fb0a f009 	mul.w	r0, sl, r9
     878:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     87c:	4560      	cmp	r0, ip
     87e:	d90a      	bls.n	896 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x96>
     880:	eb13 0c0c 	adds.w	ip, r3, ip
     884:	bf2c      	ite	cs
     886:	2501      	movcs	r5, #1
     888:	2500      	movcc	r5, #0
     88a:	4560      	cmp	r0, ip
     88c:	d901      	bls.n	892 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x92>
     88e:	2d00      	cmp	r5, #0
     890:	d055      	beq.n	93e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x13e>
     892:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     896:	ebac 0c00 	sub.w	ip, ip, r0
     89a:	b292      	uxth	r2, r2
     89c:	fbbc f0f8 	udiv	r0, ip, r8
     8a0:	fb08 cc10 	mls	ip, r8, r0, ip
     8a4:	fb00 f909 	mul.w	r9, r0, r9
     8a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     8ac:	45e1      	cmp	r9, ip
     8ae:	d905      	bls.n	8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>
     8b0:	eb13 0c0c 	adds.w	ip, r3, ip
     8b4:	d201      	bcs.n	8ba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xba>
     8b6:	45e1      	cmp	r9, ip
     8b8:	d83b      	bhi.n	932 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x132>
     8ba:	3801      	subs	r0, #1
     8bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     8c0:	ebac 0c09 	sub.w	ip, ip, r9
     8c4:	fba0 8907 	umull	r8, r9, r0, r7
     8c8:	45cc      	cmp	ip, r9
     8ca:	4645      	mov	r5, r8
     8cc:	464a      	mov	r2, r9
     8ce:	d302      	bcc.n	8d6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd6>
     8d0:	d106      	bne.n	8e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe0>
     8d2:	45c6      	cmp	lr, r8
     8d4:	d204      	bcs.n	8e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe0>
     8d6:	3801      	subs	r0, #1
     8d8:	ebb8 0507 	subs.w	r5, r8, r7
     8dc:	eb69 0203 	sbc.w	r2, r9, r3
     8e0:	b32e      	cbz	r6, 92e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x12e>
     8e2:	ebbe 0305 	subs.w	r3, lr, r5
     8e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     8ea:	fa23 f201 	lsr.w	r2, r3, r1
     8ee:	fa0c f404 	lsl.w	r4, ip, r4
     8f2:	fa2c f301 	lsr.w	r3, ip, r1
     8f6:	2100      	movs	r1, #0
     8f8:	4314      	orrs	r4, r2
     8fa:	e9c6 4300 	strd	r4, r3, [r6]
     8fe:	e70c      	b.n	71a <__udivmoddi4+0x96>
     900:	4631      	mov	r1, r6
     902:	4630      	mov	r0, r6
     904:	e709      	b.n	71a <__udivmoddi4+0x96>
     906:	1a84      	subs	r4, r0, r2
     908:	eb65 0303 	sbc.w	r3, r5, r3
     90c:	2001      	movs	r0, #1
     90e:	469a      	mov	sl, r3
     910:	e756      	b.n	7c0 <__udivmoddi4+0x13c>
     912:	f1ac 0c02 	sub.w	ip, ip, #2
     916:	443d      	add	r5, r7
     918:	e724      	b.n	764 <__udivmoddi4+0xe0>
     91a:	3802      	subs	r0, #2
     91c:	443c      	add	r4, r7
     91e:	e734      	b.n	78a <__udivmoddi4+0x106>
     920:	3802      	subs	r0, #2
     922:	443c      	add	r4, r7
     924:	e6ef      	b.n	706 <__udivmoddi4+0x82>
     926:	f1ae 0e02 	sub.w	lr, lr, #2
     92a:	443b      	add	r3, r7
     92c:	e6d9      	b.n	6e2 <__udivmoddi4+0x5e>
     92e:	4631      	mov	r1, r6
     930:	e6f3      	b.n	71a <__udivmoddi4+0x96>
     932:	3802      	subs	r0, #2
     934:	449c      	add	ip, r3
     936:	e7c1      	b.n	8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>
     938:	3802      	subs	r0, #2
     93a:	443b      	add	r3, r7
     93c:	e768      	b.n	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     93e:	f1aa 0a02 	sub.w	sl, sl, #2
     942:	449c      	add	ip, r3
     944:	e7a7      	b.n	896 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x96>
     946:	3902      	subs	r1, #2
     948:	443d      	add	r5, r7
     94a:	e774      	b.n	836 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36>

0000094c <__aeabi_idiv0>:
     94c:	4770      	bx	lr
     94e:	bf00      	nop

00000950 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     950:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     952:	4d67      	ldr	r5, [pc, #412]	; (af0 <hci_init+0x1a0>)
{
     954:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     956:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
     95a:	6899      	ldr	r1, [r3, #8]
     95c:	f011 0101 	ands.w	r1, r1, #1
     960:	d11e      	bne.n	9a0 <hci_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     962:	f640 4003 	movw	r0, #3075	; 0xc03
     966:	aa01      	add	r2, sp, #4
     968:	f004 ff9e 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     96c:	4604      	mov	r4, r0
     96e:	2800      	cmp	r0, #0
     970:	f040 80ba 	bne.w	ae8 <hci_init+0x198>
		hci_reset_complete(rsp);
     974:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
     976:	689b      	ldr	r3, [r3, #8]
	if (status) {
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	b973      	cbnz	r3, 99a <hci_init+0x4a>
	scan_dev_found_cb = NULL;
     97c:	4a5d      	ldr	r2, [pc, #372]	; (af4 <hci_init+0x1a4>)
     97e:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     980:	f105 0394 	add.w	r3, r5, #148	; 0x94
     984:	4618      	mov	r0, r3
     986:	f018 fea7 	bl	196d8 <atomic_get>
     98a:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     98e:	e8d3 2fef 	ldaex	r2, [r3]
     992:	e8c3 0fe1 	stlex	r1, r0, [r3]
     996:	2900      	cmp	r1, #0
     998:	d1f9      	bne.n	98e <hci_init+0x3e>
		net_buf_unref(rsp);
     99a:	9801      	ldr	r0, [sp, #4]
     99c:	f00b ffaa 	bl	c8f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     9a0:	2100      	movs	r1, #0
     9a2:	f241 0003 	movw	r0, #4099	; 0x1003
     9a6:	aa01      	add	r2, sp, #4
     9a8:	f004 ff7e 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     9ac:	4604      	mov	r4, r0
     9ae:	2800      	cmp	r0, #0
     9b0:	f040 809a 	bne.w	ae8 <hci_init+0x198>
	read_local_features_complete(rsp);
     9b4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     9b6:	2208      	movs	r2, #8
     9b8:	6899      	ldr	r1, [r3, #8]
     9ba:	484f      	ldr	r0, [pc, #316]	; (af8 <hci_init+0x1a8>)
     9bc:	3101      	adds	r1, #1
     9be:	f018 fc23 	bl	19208 <memcpy>
	net_buf_unref(rsp);
     9c2:	9801      	ldr	r0, [sp, #4]
     9c4:	f00b ff96 	bl	c8f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     9c8:	4621      	mov	r1, r4
     9ca:	f241 0001 	movw	r0, #4097	; 0x1001
     9ce:	aa01      	add	r2, sp, #4
     9d0:	f004 ff6a 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     9d4:	4604      	mov	r4, r0
     9d6:	2800      	cmp	r0, #0
     9d8:	f040 8086 	bne.w	ae8 <hci_init+0x198>
	read_local_ver_complete(rsp);
     9dc:	9801      	ldr	r0, [sp, #4]
     9de:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     9e0:	785a      	ldrb	r2, [r3, #1]
     9e2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     9e6:	78d9      	ldrb	r1, [r3, #3]
     9e8:	789a      	ldrb	r2, [r3, #2]
     9ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     9ee:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     9f0:	791a      	ldrb	r2, [r3, #4]
     9f2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     9f6:	7a19      	ldrb	r1, [r3, #8]
     9f8:	79da      	ldrb	r2, [r3, #7]
     9fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     9fe:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     a00:	795a      	ldrb	r2, [r3, #5]
     a02:	799b      	ldrb	r3, [r3, #6]
     a04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     a08:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     a0a:	f00b ff73 	bl	c8f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     a0e:	4621      	mov	r1, r4
     a10:	f241 0002 	movw	r0, #4098	; 0x1002
     a14:	aa01      	add	r2, sp, #4
     a16:	f004 ff47 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     a1a:	4604      	mov	r4, r0
     a1c:	2800      	cmp	r0, #0
     a1e:	d163      	bne.n	ae8 <hci_init+0x198>
	read_supported_commands_complete(rsp);
     a20:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     a22:	2240      	movs	r2, #64	; 0x40
     a24:	6899      	ldr	r1, [r3, #8]
     a26:	4835      	ldr	r0, [pc, #212]	; (afc <hci_init+0x1ac>)
     a28:	3101      	adds	r1, #1
     a2a:	f018 fbed 	bl	19208 <memcpy>
	net_buf_unref(rsp);
     a2e:	9801      	ldr	r0, [sp, #4]
     a30:	f00b ff60 	bl	c8f4 <net_buf_unref>
		err = prng_init();
     a34:	f006 fcca 	bl	73cc <prng_init>
		if (err) {
     a38:	4604      	mov	r4, r0
     a3a:	2800      	cmp	r0, #0
     a3c:	d154      	bne.n	ae8 <hci_init+0x198>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
     a3e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
     a42:	069b      	lsls	r3, r3, #26
     a44:	d41a      	bmi.n	a7c <hci_init+0x12c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     a46:	492e      	ldr	r1, [pc, #184]	; (b00 <hci_init+0x1b0>)
     a48:	4b2e      	ldr	r3, [pc, #184]	; (b04 <hci_init+0x1b4>)
		BT_WARN("Controller to host flow control not supported");
     a4a:	482f      	ldr	r0, [pc, #188]	; (b08 <hci_init+0x1b8>)
     a4c:	1ac9      	subs	r1, r1, r3
     a4e:	08c9      	lsrs	r1, r1, #3
     a50:	0189      	lsls	r1, r1, #6
     a52:	f041 0102 	orr.w	r1, r1, #2
     a56:	f017 fa39 	bl	17ecc <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
     a5a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     a5e:	065f      	lsls	r7, r3, #25
     a60:	d456      	bmi.n	b10 <hci_init+0x1c0>
     a62:	4b28      	ldr	r3, [pc, #160]	; (b04 <hci_init+0x1b4>)
     a64:	4926      	ldr	r1, [pc, #152]	; (b00 <hci_init+0x1b0>)
		BT_ERR("Non-LE capable controller detected!");
     a66:	4829      	ldr	r0, [pc, #164]	; (b0c <hci_init+0x1bc>)
     a68:	1ac9      	subs	r1, r1, r3
     a6a:	08c9      	lsrs	r1, r1, #3
     a6c:	0189      	lsls	r1, r1, #6
     a6e:	f041 0101 	orr.w	r1, r1, #1
     a72:	f017 fa2b 	bl	17ecc <log_0>
		return -ENODEV;
     a76:	f06f 0412 	mvn.w	r4, #18
     a7a:	e035      	b.n	ae8 <hci_init+0x198>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
     a7c:	2107      	movs	r1, #7
     a7e:	f640 4033 	movw	r0, #3123	; 0xc33
     a82:	f004 fed9 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
     a86:	4607      	mov	r7, r0
     a88:	b910      	cbnz	r0, a90 <hci_init+0x140>
		return -ENOBUFS;
     a8a:	f06f 0436 	mvn.w	r4, #54	; 0x36
     a8e:	e02b      	b.n	ae8 <hci_init+0x198>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     a90:	2107      	movs	r1, #7
     a92:	3008      	adds	r0, #8
     a94:	f01a fe7b 	bl	1b78e <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
     a98:	4621      	mov	r1, r4
     a9a:	2207      	movs	r2, #7
     a9c:	4606      	mov	r6, r0
     a9e:	f018 fbde 	bl	1925e <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     aa2:	f06f 0304 	mvn.w	r3, #4
     aa6:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     aa8:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     aaa:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     aac:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     aae:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     ab0:	4639      	mov	r1, r7
     ab2:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     ab6:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     ab8:	f004 fef6 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     abc:	4604      	mov	r4, r0
     abe:	b998      	cbnz	r0, ae8 <hci_init+0x198>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
     ac0:	2101      	movs	r1, #1
     ac2:	f640 4031 	movw	r0, #3121	; 0xc31
     ac6:	f004 feb7 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
     aca:	4606      	mov	r6, r0
     acc:	2800      	cmp	r0, #0
     ace:	d0dc      	beq.n	a8a <hci_init+0x13a>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
     ad0:	2101      	movs	r1, #1
     ad2:	f018 fe07 	bl	196e4 <net_buf_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
     ad6:	4622      	mov	r2, r4
     ad8:	4631      	mov	r1, r6
     ada:	f640 4031 	movw	r0, #3121	; 0xc31
     ade:	f004 fee3 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     ae2:	4604      	mov	r4, r0
     ae4:	2800      	cmp	r0, #0
     ae6:	d0b8      	beq.n	a5a <hci_init+0x10a>
			return err;
		}
	}

	return 0;
}
     ae8:	4620      	mov	r0, r4
     aea:	b007      	add	sp, #28
     aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aee:	bf00      	nop
     af0:	20000000 	.word	0x20000000
     af4:	20025a0c 	.word	0x20025a0c
     af8:	2000003c 	.word	0x2000003c
     afc:	20000044 	.word	0x20000044
     b00:	00023314 	.word	0x00023314
     b04:	000232ec 	.word	0x000232ec
     b08:	00025ba4 	.word	0x00025ba4
     b0c:	00025bd2 	.word	0x00025bd2
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     b10:	2100      	movs	r1, #0
     b12:	f242 0003 	movw	r0, #8195	; 0x2003
     b16:	aa01      	add	r2, sp, #4
     b18:	f004 fec6 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     b1c:	4604      	mov	r4, r0
     b1e:	2800      	cmp	r0, #0
     b20:	d1e2      	bne.n	ae8 <hci_init+0x198>
	read_le_features_complete(rsp);
     b22:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     b24:	2208      	movs	r2, #8
     b26:	6899      	ldr	r1, [r3, #8]
     b28:	48c1      	ldr	r0, [pc, #772]	; (e30 <hci_init+0x4e0>)
     b2a:	3101      	adds	r1, #1
     b2c:	f018 fb6c 	bl	19208 <memcpy>
	net_buf_unref(rsp);
     b30:	9801      	ldr	r0, [sp, #4]
     b32:	f00b fedf 	bl	c8f4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     b36:	4621      	mov	r1, r4
     b38:	f242 0002 	movw	r0, #8194	; 0x2002
     b3c:	aa01      	add	r2, sp, #4
     b3e:	f004 feb3 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     b42:	4604      	mov	r4, r0
     b44:	2800      	cmp	r0, #0
     b46:	d1cf      	bne.n	ae8 <hci_init+0x198>
		le_read_buffer_size_complete(rsp);
     b48:	9b01      	ldr	r3, [sp, #4]
     b4a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     b4c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     b50:	b291      	uxth	r1, r2
     b52:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
     b56:	b121      	cbz	r1, b62 <hci_init+0x212>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     b58:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     b5a:	48b6      	ldr	r0, [pc, #728]	; (e34 <hci_init+0x4e4>)
     b5c:	4611      	mov	r1, r2
     b5e:	f021 ff52 	bl	22a06 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     b62:	9801      	ldr	r0, [sp, #4]
     b64:	f00b fec6 	bl	c8f4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     b68:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     b6c:	f016 0620 	ands.w	r6, r6, #32
     b70:	f000 80d6 	beq.w	d20 <hci_init+0x3d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     b74:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     b78:	071e      	lsls	r6, r3, #28
     b7a:	d511      	bpl.n	ba0 <hci_init+0x250>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     b7c:	2100      	movs	r1, #0
     b7e:	f242 001c 	movw	r0, #8220	; 0x201c
     b82:	aa01      	add	r2, sp, #4
     b84:	f004 fe90 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     b88:	4604      	mov	r4, r0
     b8a:	2800      	cmp	r0, #0
     b8c:	d1ac      	bne.n	ae8 <hci_init+0x198>
		le_read_supp_states_complete(rsp);
     b8e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     b90:	6883      	ldr	r3, [r0, #8]
     b92:	f853 2f01 	ldr.w	r2, [r3, #1]!
     b96:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     b98:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
     b9c:	f00b feaa 	bl	c8f4 <net_buf_unref>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     ba0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     ba4:	065c      	lsls	r4, r3, #25
     ba6:	d50f      	bpl.n	bc8 <hci_init+0x278>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     ba8:	2100      	movs	r1, #0
     baa:	f242 002a 	movw	r0, #8234	; 0x202a
     bae:	aa01      	add	r2, sp, #4
     bb0:	f004 fe7a 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     bb4:	4604      	mov	r4, r0
     bb6:	2800      	cmp	r0, #0
     bb8:	d196      	bne.n	ae8 <hci_init+0x198>
		le_read_resolving_list_size_complete(rsp);
     bba:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     bbc:	6883      	ldr	r3, [r0, #8]
     bbe:	785b      	ldrb	r3, [r3, #1]
     bc0:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
     bc4:	f00b fe96 	bl	c8f4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     bc8:	2108      	movs	r1, #8
     bca:	f242 0001 	movw	r0, #8193	; 0x2001
     bce:	f004 fe33 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
     bd2:	4604      	mov	r4, r0
     bd4:	2800      	cmp	r0, #0
     bd6:	f43f af58 	beq.w	a8a <hci_init+0x13a>
     bda:	2108      	movs	r1, #8
     bdc:	4408      	add	r0, r1
     bde:	f01a fdd6 	bl	1b78e <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     be2:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     be6:	f240 2302 	movw	r3, #514	; 0x202
     bea:	f011 0f40 	tst.w	r1, #64	; 0x40
     bee:	bf08      	it	eq
     bf0:	2303      	moveq	r3, #3
     bf2:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     bf4:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     bf6:	bf4c      	ite	mi
     bf8:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     bfc:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     c00:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     c04:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     c06:	bf48      	it	mi
     c08:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     c0c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     c10:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     c14:	bf18      	it	ne
     c16:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     c1a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     c1e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     c20:	bf48      	it	mi
     c22:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     c26:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     c28:	bf08      	it	eq
     c2a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     c2e:	2100      	movs	r1, #0
     c30:	f018 fd8d 	bl	1974e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     c34:	4621      	mov	r1, r4
     c36:	2200      	movs	r2, #0
     c38:	f242 0001 	movw	r0, #8193	; 0x2001
     c3c:	f004 fe34 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     c40:	4604      	mov	r4, r0
     c42:	2800      	cmp	r0, #0
     c44:	f47f af50 	bne.w	ae8 <hci_init+0x198>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     c48:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     c4c:	0698      	lsls	r0, r3, #26
     c4e:	d41e      	bmi.n	c8e <hci_init+0x33e>
	if (bt_dev.le.acl_mtu) {
     c50:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
     c54:	b9d9      	cbnz	r1, c8e <hci_init+0x33e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     c56:	f241 0005 	movw	r0, #4101	; 0x1005
     c5a:	aa01      	add	r2, sp, #4
     c5c:	f004 fe24 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     c60:	4604      	mov	r4, r0
     c62:	2800      	cmp	r0, #0
     c64:	f47f af40 	bne.w	ae8 <hci_init+0x198>
	if (bt_dev.le.acl_mtu) {
     c68:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
     c6c:	b963      	cbnz	r3, c88 <hci_init+0x338>
	read_buffer_size_complete(rsp);
     c6e:	9b01      	ldr	r3, [sp, #4]
     c70:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     c72:	785a      	ldrb	r2, [r3, #1]
     c74:	7899      	ldrb	r1, [r3, #2]
     c76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     c7a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     c7e:	889a      	ldrh	r2, [r3, #4]
     c80:	486c      	ldr	r0, [pc, #432]	; (e34 <hci_init+0x4e4>)
     c82:	4611      	mov	r1, r2
     c84:	f021 febf 	bl	22a06 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     c88:	9801      	ldr	r0, [sp, #4]
     c8a:	f00b fe33 	bl	c8f4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     c8e:	2108      	movs	r1, #8
     c90:	f640 4001 	movw	r0, #3073	; 0xc01
     c94:	f004 fdd0 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
     c98:	4604      	mov	r4, r0
     c9a:	2800      	cmp	r0, #0
     c9c:	f43f aef5 	beq.w	a8a <hci_init+0x13a>
     ca0:	2108      	movs	r1, #8
     ca2:	4408      	add	r0, r1
     ca4:	f01a fd73 	bl	1b78e <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     ca8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     cac:	4602      	mov	r2, r0
     cae:	07d9      	lsls	r1, r3, #31
     cb0:	d551      	bpl.n	d56 <hci_init+0x406>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     cb2:	a15d      	add	r1, pc, #372	; (adr r1, e28 <hci_init+0x4d8>)
     cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     cb8:	f018 fd49 	bl	1974e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     cbc:	4621      	mov	r1, r4
     cbe:	2200      	movs	r2, #0
     cc0:	f640 4001 	movw	r0, #3073	; 0xc01
     cc4:	f004 fdf0 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     cc8:	4604      	mov	r4, r0
     cca:	2800      	cmp	r0, #0
     ccc:	f47f af0c 	bne.w	ae8 <hci_init+0x198>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     cd0:	4601      	mov	r1, r0
     cd2:	466a      	mov	r2, sp
     cd4:	f64f 4001 	movw	r0, #64513	; 0xfc01
     cd8:	f004 fde6 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     cdc:	4e56      	ldr	r6, [pc, #344]	; (e38 <hci_init+0x4e8>)
     cde:	4b57      	ldr	r3, [pc, #348]	; (e3c <hci_init+0x4ec>)
     ce0:	1af6      	subs	r6, r6, r3
     ce2:	08f6      	lsrs	r6, r6, #3
     ce4:	01b6      	lsls	r6, r6, #6
     ce6:	2800      	cmp	r0, #0
     ce8:	d039      	beq.n	d5e <hci_init+0x40e>
		BT_WARN("Vendor HCI extensions not available");
     cea:	4855      	ldr	r0, [pc, #340]	; (e40 <hci_init+0x4f0>)
     cec:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     cf0:	f017 f8ec 	bl	17ecc <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     cf4:	79eb      	ldrb	r3, [r5, #7]
     cf6:	2b00      	cmp	r3, #0
     cf8:	f47f aef6 	bne.w	ae8 <hci_init+0x198>
		bt_setup_public_id_addr();
     cfc:	f006 f882 	bl	6e04 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     d00:	79eb      	ldrb	r3, [r5, #7]
     d02:	2b00      	cmp	r3, #0
     d04:	f47f aef0 	bne.w	ae8 <hci_init+0x198>
		err = bt_setup_random_id_addr();
     d08:	f006 f926 	bl	6f58 <bt_setup_random_id_addr>
		if (err) {
     d0c:	4604      	mov	r4, r0
     d0e:	2800      	cmp	r0, #0
     d10:	f000 80bb 	beq.w	e8a <hci_init+0x53a>
			BT_ERR("Unable to set identity address");
     d14:	484b      	ldr	r0, [pc, #300]	; (e44 <hci_init+0x4f4>)
     d16:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
     d1a:	f017 f8d7 	bl	17ecc <log_0>
			return err;
     d1e:	e6e3      	b.n	ae8 <hci_init+0x198>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     d20:	2102      	movs	r1, #2
     d22:	f640 406d 	movw	r0, #3181	; 0xc6d
     d26:	f004 fd87 	bl	5838 <bt_hci_cmd_create>
		if (!buf) {
     d2a:	4604      	mov	r4, r0
     d2c:	2800      	cmp	r0, #0
     d2e:	f43f aeac 	beq.w	a8a <hci_init+0x13a>
     d32:	2102      	movs	r1, #2
     d34:	3008      	adds	r0, #8
     d36:	f01a fd2a 	bl	1b78e <net_buf_simple_add>
		cp_le->le = 0x01;
     d3a:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     d3c:	4621      	mov	r1, r4
		cp_le->le = 0x01;
     d3e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     d40:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     d42:	4632      	mov	r2, r6
     d44:	f640 406d 	movw	r0, #3181	; 0xc6d
     d48:	f004 fdae 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     d4c:	4604      	mov	r4, r0
     d4e:	2800      	cmp	r0, #0
     d50:	f43f af10 	beq.w	b74 <hci_init+0x224>
     d54:	e6c8      	b.n	ae8 <hci_init+0x198>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     d56:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     d5a:	483b      	ldr	r0, [pc, #236]	; (e48 <hci_init+0x4f8>)
     d5c:	e7ac      	b.n	cb8 <hci_init+0x368>
	rp.info = (void *)rsp->data;
     d5e:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
     d60:	483a      	ldr	r0, [pc, #232]	; (e4c <hci_init+0x4fc>)
	rp.info = (void *)rsp->data;
     d62:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     d64:	f046 0303 	orr.w	r3, r6, #3
     d68:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     d6c:	2a03      	cmp	r2, #3
		return plat_str[platform];
     d6e:	bf96      	itet	ls
     d70:	4937      	ldrls	r1, [pc, #220]	; (e50 <hci_init+0x500>)
	return "unknown";
     d72:	4938      	ldrhi	r1, [pc, #224]	; (e54 <hci_init+0x504>)
		return plat_str[platform];
     d74:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     d78:	f017 f8c9 	bl	17f0e <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     d7c:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     d80:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     d84:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     d86:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     d8a:	d12e      	bne.n	dea <hci_init+0x49a>
	if (variant < ARRAY_SIZE(nordic_str)) {
     d8c:	2a03      	cmp	r2, #3
     d8e:	d82c      	bhi.n	dea <hci_init+0x49a>
		return nordic_str[variant];
     d90:	4931      	ldr	r1, [pc, #196]	; (e58 <hci_init+0x508>)
     d92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     d96:	4831      	ldr	r0, [pc, #196]	; (e5c <hci_init+0x50c>)
     d98:	f017 f8b9 	bl	17f0e <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     d9c:	797a      	ldrb	r2, [r7, #5]
     d9e:	f046 0303 	orr.w	r3, r6, #3
	if (variant < ARRAY_SIZE(var_str)) {
     da2:	2a03      	cmp	r2, #3
		return var_str[variant];
     da4:	bf96      	itet	ls
     da6:	492e      	ldrls	r1, [pc, #184]	; (e60 <hci_init+0x510>)
	return "unknown";
     da8:	492a      	ldrhi	r1, [pc, #168]	; (e54 <hci_init+0x504>)
		return var_str[variant];
     daa:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     dae:	482d      	ldr	r0, [pc, #180]	; (e64 <hci_init+0x514>)
     db0:	e9cd 1201 	strd	r1, r2, [sp, #4]
     db4:	79ba      	ldrb	r2, [r7, #6]
     db6:	a901      	add	r1, sp, #4
     db8:	9203      	str	r2, [sp, #12]
     dba:	f8b7 2007 	ldrh.w	r2, [r7, #7]
     dbe:	9204      	str	r2, [sp, #16]
     dc0:	f8d7 2009 	ldr.w	r2, [r7, #9]
     dc4:	9205      	str	r2, [sp, #20]
     dc6:	2205      	movs	r2, #5
     dc8:	f017 f8d6 	bl	17f78 <log_n>
	net_buf_unref(rsp);
     dcc:	9800      	ldr	r0, [sp, #0]
     dce:	f00b fd91 	bl	c8f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     dd2:	466a      	mov	r2, sp
     dd4:	2100      	movs	r1, #0
     dd6:	f64f 4002 	movw	r0, #64514	; 0xfc02
     dda:	f004 fd65 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
     dde:	4607      	mov	r7, r0
     de0:	b128      	cbz	r0, dee <hci_init+0x49e>
		BT_WARN("Failed to read supported vendor commands");
     de2:	4821      	ldr	r0, [pc, #132]	; (e68 <hci_init+0x518>)
     de4:	f046 0102 	orr.w	r1, r6, #2
     de8:	e782      	b.n	cf0 <hci_init+0x3a0>
		return "unknown";
     dea:	491a      	ldr	r1, [pc, #104]	; (e54 <hci_init+0x504>)
     dec:	e7d3      	b.n	d96 <hci_init+0x446>
	rp.cmds = (void *)rsp->data;
     dee:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     df0:	2202      	movs	r2, #2
     df2:	6899      	ldr	r1, [r3, #8]
     df4:	481d      	ldr	r0, [pc, #116]	; (e6c <hci_init+0x51c>)
     df6:	3101      	adds	r1, #1
     df8:	f018 fa06 	bl	19208 <memcpy>
	net_buf_unref(rsp);
     dfc:	9800      	ldr	r0, [sp, #0]
     dfe:	f00b fd79 	bl	c8f4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     e02:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
     e06:	075b      	lsls	r3, r3, #29
     e08:	f57f af74 	bpl.w	cf4 <hci_init+0x3a4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     e0c:	466a      	mov	r2, sp
     e0e:	4639      	mov	r1, r7
     e10:	f64f 4003 	movw	r0, #64515	; 0xfc03
     e14:	f004 fd48 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
     e18:	b360      	cbz	r0, e74 <hci_init+0x524>
			BT_WARN("Failed to read supported vendor features");
     e1a:	4815      	ldr	r0, [pc, #84]	; (e70 <hci_init+0x520>)
     e1c:	f046 0102 	orr.w	r1, r6, #2
     e20:	e766      	b.n	cf0 <hci_init+0x3a0>
     e22:	bf00      	nop
     e24:	f3af 8000 	nop.w
     e28:	02008890 	.word	0x02008890
     e2c:	20008000 	.word	0x20008000
     e30:	20000098 	.word	0x20000098
     e34:	200000c8 	.word	0x200000c8
     e38:	00023314 	.word	0x00023314
     e3c:	000232ec 	.word	0x000232ec
     e40:	00025bf6 	.word	0x00025bf6
     e44:	00025cca 	.word	0x00025cca
     e48:	02008810 	.word	0x02008810
     e4c:	00025c1a 	.word	0x00025c1a
     e50:	00023874 	.word	0x00023874
     e54:	00025430 	.word	0x00025430
     e58:	00023834 	.word	0x00023834
     e5c:	00025c33 	.word	0x00025c33
     e60:	000238ac 	.word	0x000238ac
     e64:	00025c4b 	.word	0x00025c4b
     e68:	00025c78 	.word	0x00025c78
     e6c:	20000085 	.word	0x20000085
     e70:	00025ca1 	.word	0x00025ca1
		memcpy(bt_dev.vs_features, rp.feat->features,
     e74:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
     e76:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
     e78:	4809      	ldr	r0, [pc, #36]	; (ea0 <hci_init+0x550>)
     e7a:	6899      	ldr	r1, [r3, #8]
     e7c:	4411      	add	r1, r2
     e7e:	f018 f9c3 	bl	19208 <memcpy>
		net_buf_unref(rsp);
     e82:	9800      	ldr	r0, [sp, #0]
     e84:	f00b fd36 	bl	c8f4 <net_buf_unref>
     e88:	e734      	b.n	cf4 <hci_init+0x3a4>
		err = set_random_address(&bt_dev.id_addr[0].a);
     e8a:	4806      	ldr	r0, [pc, #24]	; (ea4 <hci_init+0x554>)
     e8c:	f004 fd84 	bl	5998 <set_random_address>
		if (err) {
     e90:	4604      	mov	r4, r0
     e92:	2800      	cmp	r0, #0
     e94:	f43f ae28 	beq.w	ae8 <hci_init+0x198>
			BT_ERR("Unable to set random address");
     e98:	4803      	ldr	r0, [pc, #12]	; (ea8 <hci_init+0x558>)
     e9a:	f046 0101 	orr.w	r1, r6, #1
     e9e:	e73c      	b.n	d1a <hci_init+0x3ca>
     ea0:	20000084 	.word	0x20000084
     ea4:	20000001 	.word	0x20000001
     ea8:	00025ce9 	.word	0x00025ce9

00000eac <exchange_func>:
}

static void exchange_func(struct bt_conn *conn, uint8_t att_err,
                          struct bt_gatt_exchange_params *params)
{
        printk("MTU exchange %s\n", att_err == 0 ? "successful" : "failed");
     eac:	4a04      	ldr	r2, [pc, #16]	; (ec0 <exchange_func+0x14>)
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <exchange_func+0x18>)
     eb0:	4805      	ldr	r0, [pc, #20]	; (ec8 <exchange_func+0x1c>)
     eb2:	2900      	cmp	r1, #0
     eb4:	bf0c      	ite	eq
     eb6:	4611      	moveq	r1, r2
     eb8:	4619      	movne	r1, r3
     eba:	f016 bbe0 	b.w	1767e <printk>
     ebe:	bf00      	nop
     ec0:	00024124 	.word	0x00024124
     ec4:	00026640 	.word	0x00026640
     ec8:	0002412f 	.word	0x0002412f

00000ecc <discover_func>:


static uint8_t discover_func(struct bt_conn *conn,
                 const struct bt_gatt_attr *attr,
                 struct bt_gatt_discover_params *params)
{
     ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ed0:	4606      	mov	r6, r0
     ed2:	4615      	mov	r5, r2
    int err;

    if (!attr) {
     ed4:	460c      	mov	r4, r1
{
     ed6:	b08c      	sub	sp, #48	; 0x30
    if (!attr) {
     ed8:	b959      	cbnz	r1, ef2 <discover_func+0x26>
        printk("Discover complete\n");
     eda:	4849      	ldr	r0, [pc, #292]	; (1000 <CONFIG_MAIN_STACK_SIZE>)
     edc:	f016 fbcf 	bl	1767e <printk>
        (void)memset(params, 0, sizeof(*params));
     ee0:	2214      	movs	r2, #20
     ee2:	4621      	mov	r1, r4
     ee4:	4628      	mov	r0, r5
     ee6:	f018 f9ba 	bl	1925e <memset>

        return BT_GATT_ITER_STOP;
    }

    return BT_GATT_ITER_STOP;
}
     eea:	2000      	movs	r0, #0
     eec:	b00c      	add	sp, #48	; 0x30
     eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printk("[ATTRIBUTE] handle %u\n", attr->handle);
     ef2:	8a09      	ldrh	r1, [r1, #16]
     ef4:	4843      	ldr	r0, [pc, #268]	; (1004 <CONFIG_MAIN_STACK_SIZE+0x4>)
     ef6:	f016 fbc2 	bl	1767e <printk>
    if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_ACC_SERVICE)) {
     efa:	aa02      	add	r2, sp, #8
     efc:	4696      	mov	lr, r2
     efe:	4d42      	ldr	r5, [pc, #264]	; (1008 <CONFIG_MAIN_STACK_SIZE+0x8>)
     f00:	4b42      	ldr	r3, [pc, #264]	; (100c <CONFIG_MAIN_STACK_SIZE+0xc>)
     f02:	f8d5 c000 	ldr.w	ip, [r5]
     f06:	f103 0810 	add.w	r8, r3, #16
     f0a:	4617      	mov	r7, r2
     f0c:	6818      	ldr	r0, [r3, #0]
     f0e:	6859      	ldr	r1, [r3, #4]
     f10:	3308      	adds	r3, #8
     f12:	c703      	stmia	r7!, {r0, r1}
     f14:	4543      	cmp	r3, r8
     f16:	463a      	mov	r2, r7
     f18:	d1f7      	bne.n	f0a <discover_func+0x3e>
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	4671      	mov	r1, lr
     f1e:	703b      	strb	r3, [r7, #0]
     f20:	4660      	mov	r0, ip
     f22:	f018 fb67 	bl	195f4 <bt_uuid_cmp>
     f26:	4f3a      	ldr	r7, [pc, #232]	; (1010 <CONFIG_MAIN_STACK_SIZE+0x10>)
     f28:	bb28      	cbnz	r0, f76 <discover_func+0xaa>
        memcpy(&uuid, BT_UUID_ACC_SERVICE_TX, sizeof(uuid));
     f2a:	f1a7 0310 	sub.w	r3, r7, #16
     f2e:	aa07      	add	r2, sp, #28
     f30:	4694      	mov	ip, r2
     f32:	6818      	ldr	r0, [r3, #0]
     f34:	6859      	ldr	r1, [r3, #4]
     f36:	3308      	adds	r3, #8
     f38:	e8ac 0003 	stmia.w	ip!, {r0, r1}
     f3c:	42bb      	cmp	r3, r7
     f3e:	4662      	mov	r2, ip
     f40:	d1f6      	bne.n	f30 <discover_func+0x64>
     f42:	781b      	ldrb	r3, [r3, #0]
     f44:	4f33      	ldr	r7, [pc, #204]	; (1014 <CONFIG_MAIN_STACK_SIZE+0x14>)
     f46:	f88c 3000 	strb.w	r3, [ip]
     f4a:	2211      	movs	r2, #17
     f4c:	4638      	mov	r0, r7
     f4e:	a907      	add	r1, sp, #28
     f50:	f018 f95a 	bl	19208 <memcpy>
        discover_params.start_handle = attr->handle + 1;
     f54:	8a23      	ldrh	r3, [r4, #16]
        discover_params.uuid = &uuid.uuid;
     f56:	602f      	str	r7, [r5, #0]
        discover_params.start_handle = attr->handle + 1;
     f58:	3301      	adds	r3, #1
     f5a:	812b      	strh	r3, [r5, #8]
        discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
     f5c:	2303      	movs	r3, #3
     f5e:	742b      	strb	r3, [r5, #16]
        err = bt_gatt_discover(conn, &discover_params);
     f60:	4929      	ldr	r1, [pc, #164]	; (1008 <CONFIG_MAIN_STACK_SIZE+0x8>)
     f62:	4630      	mov	r0, r6
     f64:	f009 fa5a 	bl	a41c <bt_gatt_discover>
        if (err) {
     f68:	4601      	mov	r1, r0
     f6a:	2800      	cmp	r0, #0
     f6c:	d0bd      	beq.n	eea <discover_func+0x1e>
            printk("Discover failed (err %d)\n", err);
     f6e:	482a      	ldr	r0, [pc, #168]	; (1018 <CONFIG_MAIN_STACK_SIZE+0x18>)
            printk("[SUBSCRIBED] %u\n",  attr->handle);
     f70:	f016 fb85 	bl	1767e <printk>
        return BT_GATT_ITER_STOP;
     f74:	e7b9      	b.n	eea <discover_func+0x1e>
    } else if (!bt_uuid_cmp(discover_params.uuid,
     f76:	f8d5 e000 	ldr.w	lr, [r5]
                BT_UUID_ACC_SERVICE_TX)) {
     f7a:	f1a7 0310 	sub.w	r3, r7, #16
     f7e:	aa07      	add	r2, sp, #28
     f80:	4694      	mov	ip, r2
     f82:	6818      	ldr	r0, [r3, #0]
     f84:	6859      	ldr	r1, [r3, #4]
     f86:	3308      	adds	r3, #8
     f88:	e8ac 0003 	stmia.w	ip!, {r0, r1}
     f8c:	42bb      	cmp	r3, r7
     f8e:	4662      	mov	r2, ip
     f90:	d1f6      	bne.n	f80 <discover_func+0xb4>
     f92:	781b      	ldrb	r3, [r3, #0]
    } else if (!bt_uuid_cmp(discover_params.uuid,
     f94:	4670      	mov	r0, lr
                BT_UUID_ACC_SERVICE_TX)) {
     f96:	f88c 3000 	strb.w	r3, [ip]
    } else if (!bt_uuid_cmp(discover_params.uuid,
     f9a:	a907      	add	r1, sp, #28
     f9c:	f018 fb2a 	bl	195f4 <bt_uuid_cmp>
     fa0:	4f1e      	ldr	r7, [pc, #120]	; (101c <CONFIG_MAIN_STACK_SIZE+0x1c>)
     fa2:	b9c0      	cbnz	r0, fd6 <discover_func+0x10a>
        memcpy(&uuid, BT_UUID_GATT_CCC, sizeof(uuid));
     fa4:	f642 1302 	movw	r3, #10498	; 0x2902
     fa8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1014 <CONFIG_MAIN_STACK_SIZE+0x14>
     fac:	2211      	movs	r2, #17
     fae:	f88d 0004 	strb.w	r0, [sp, #4]
     fb2:	a901      	add	r1, sp, #4
     fb4:	4640      	mov	r0, r8
     fb6:	f8ad 3006 	strh.w	r3, [sp, #6]
     fba:	f018 f925 	bl	19208 <memcpy>
        discover_params.start_handle = attr->handle + 2;
     fbe:	8a23      	ldrh	r3, [r4, #16]
        subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
     fc0:	4620      	mov	r0, r4
        discover_params.start_handle = attr->handle + 2;
     fc2:	3302      	adds	r3, #2
     fc4:	812b      	strh	r3, [r5, #8]
        discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
     fc6:	2304      	movs	r3, #4
        discover_params.uuid = &uuid.uuid;
     fc8:	f8c5 8000 	str.w	r8, [r5]
        discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
     fcc:	742b      	strb	r3, [r5, #16]
        subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
     fce:	f019 fd64 	bl	1aa9a <bt_gatt_attr_value_handle>
     fd2:	8138      	strh	r0, [r7, #8]
     fd4:	e7c4      	b.n	f60 <discover_func+0x94>
        subscribe_params.notify = notify_func;
     fd6:	4b12      	ldr	r3, [pc, #72]	; (1020 <CONFIG_MAIN_STACK_SIZE+0x20>)
        err = bt_gatt_subscribe(conn, &subscribe_params);
     fd8:	4639      	mov	r1, r7
        subscribe_params.notify = notify_func;
     fda:	603b      	str	r3, [r7, #0]
        subscribe_params.value = BT_GATT_CCC_NOTIFY;
     fdc:	2301      	movs	r3, #1
     fde:	81bb      	strh	r3, [r7, #12]
        subscribe_params.ccc_handle = attr->handle;
     fe0:	8a23      	ldrh	r3, [r4, #16]
        err = bt_gatt_subscribe(conn, &subscribe_params);
     fe2:	4630      	mov	r0, r6
        subscribe_params.ccc_handle = attr->handle;
     fe4:	817b      	strh	r3, [r7, #10]
        err = bt_gatt_subscribe(conn, &subscribe_params);
     fe6:	f019 fe46 	bl	1ac76 <bt_gatt_subscribe>
        if (err && err != -EALREADY) {
     fea:	4601      	mov	r1, r0
     fec:	b120      	cbz	r0, ff8 <discover_func+0x12c>
     fee:	f110 0f45 	cmn.w	r0, #69	; 0x45
     ff2:	d001      	beq.n	ff8 <discover_func+0x12c>
            printk("Subscribe failed (err %d)\n", err);
     ff4:	480b      	ldr	r0, [pc, #44]	; (1024 <CONFIG_MAIN_STACK_SIZE+0x24>)
     ff6:	e7bb      	b.n	f70 <discover_func+0xa4>
            printk("[SUBSCRIBED] %u\n",  attr->handle);
     ff8:	8a21      	ldrh	r1, [r4, #16]
     ffa:	480b      	ldr	r0, [pc, #44]	; (1028 <CONFIG_MAIN_STACK_SIZE+0x28>)
     ffc:	e7b8      	b.n	f70 <discover_func+0xa4>
     ffe:	bf00      	nop
    1000:	00024140 	.word	0x00024140
    1004:	00024153 	.word	0x00024153
    1008:	200011a4 	.word	0x200011a4
    100c:	00023400 	.word	0x00023400
    1010:	00023421 	.word	0x00023421
    1014:	200004c8 	.word	0x200004c8
    1018:	0002416a 	.word	0x0002416a
    101c:	200011bc 	.word	0x200011bc
    1020:	00001075 	.word	0x00001075
    1024:	00024184 	.word	0x00024184
    1028:	0002419f 	.word	0x0002419f

0000102c <start_scan>:
        bt_data_parse(ad, eir_found, (void *)addr);
    }
}

static void start_scan(void)
{
    102c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int err;

    /* Use active scanning and disable duplicate filtering to handle any
     * devices that might update their advertising data at runtime. */
    struct bt_le_scan_param scan_param = {
    102e:	2214      	movs	r2, #20
    1030:	2100      	movs	r1, #0
    1032:	a801      	add	r0, sp, #4
    1034:	f018 f913 	bl	1925e <memset>
    1038:	2301      	movs	r3, #1
    103a:	f88d 3004 	strb.w	r3, [sp, #4]
    103e:	4b09      	ldr	r3, [pc, #36]	; (1064 <start_scan+0x38>)
        .options    = BT_LE_SCAN_OPT_NONE,
        .interval   = BT_GAP_SCAN_FAST_INTERVAL,
        .window     = BT_GAP_SCAN_FAST_WINDOW,
    };

    err = bt_le_scan_start(&scan_param, device_found);
    1040:	4909      	ldr	r1, [pc, #36]	; (1068 <start_scan+0x3c>)
    1042:	a801      	add	r0, sp, #4
    struct bt_le_scan_param scan_param = {
    1044:	9303      	str	r3, [sp, #12]
    err = bt_le_scan_start(&scan_param, device_found);
    1046:	f006 f865 	bl	7114 <bt_le_scan_start>
    if (err) {
    104a:	4601      	mov	r1, r0
    104c:	b128      	cbz	r0, 105a <start_scan+0x2e>
        printk("Scanning failed to start (err %d)\n", err);
    104e:	4807      	ldr	r0, [pc, #28]	; (106c <start_scan+0x40>)
    1050:	f016 fb15 	bl	1767e <printk>
        return;
    }

    printk("Scanning successfully started\n");
}
    1054:	b007      	add	sp, #28
    1056:	f85d fb04 	ldr.w	pc, [sp], #4
    printk("Scanning successfully started\n");
    105a:	4805      	ldr	r0, [pc, #20]	; (1070 <start_scan+0x44>)
    105c:	f016 fb0f 	bl	1767e <printk>
    1060:	e7f8      	b.n	1054 <start_scan+0x28>
    1062:	bf00      	nop
    1064:	00300060 	.word	0x00300060
    1068:	0000120d 	.word	0x0000120d
    106c:	000241b0 	.word	0x000241b0
    1070:	000241d3 	.word	0x000241d3

00001074 <notify_func>:
{
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	460e      	mov	r6, r1
    1078:	461d      	mov	r5, r3
    if (!payload) {
    107a:	4614      	mov	r4, r2
{
    107c:	b08c      	sub	sp, #48	; 0x30
    if (!payload) {
    107e:	b932      	cbnz	r2, 108e <notify_func+0x1a>
        printk("[UNSUBSCRIBED]\n");
    1080:	4811      	ldr	r0, [pc, #68]	; (10c8 <notify_func+0x54>)
    1082:	f016 fafc 	bl	1767e <printk>
        return BT_GATT_ITER_STOP;
    1086:	4620      	mov	r0, r4
        params->value_handle = 0U;
    1088:	8134      	strh	r4, [r6, #8]
}
    108a:	b00c      	add	sp, #48	; 0x30
    108c:	bd70      	pop	{r4, r5, r6, pc}
    printk("[NOTIFICATION] payload %p length %u\n", payload, length);
    108e:	461a      	mov	r2, r3
    1090:	4621      	mov	r1, r4
    1092:	480e      	ldr	r0, [pc, #56]	; (10cc <notify_func+0x58>)
    1094:	f016 faf3 	bl	1767e <printk>
    if (length == 2) {
    1098:	2d02      	cmp	r5, #2
    109a:	d108      	bne.n	10ae <notify_func+0x3a>
        uint16_t code = data[0] | (data[1] << 8);
    109c:	7861      	ldrb	r1, [r4, #1]
    109e:	7823      	ldrb	r3, [r4, #0]
        printk("Error: %d\n", code);
    10a0:	480b      	ldr	r0, [pc, #44]	; (10d0 <notify_func+0x5c>)
    10a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    10a6:	f016 faea 	bl	1767e <printk>
    return BT_GATT_ITER_CONTINUE;
    10aa:	2001      	movs	r0, #1
    10ac:	e7ed      	b.n	108a <notify_func+0x16>
        struct k_mbox_msg send_msg = {
    10ae:	222c      	movs	r2, #44	; 0x2c
    10b0:	2100      	movs	r1, #0
    10b2:	a801      	add	r0, sp, #4
    10b4:	f018 f8d3 	bl	1925e <memset>
        k_mbox_async_put(&my_mailbox, &send_msg, NULL);
    10b8:	2200      	movs	r2, #0
    10ba:	4806      	ldr	r0, [pc, #24]	; (10d4 <notify_func+0x60>)
    10bc:	a901      	add	r1, sp, #4
        struct k_mbox_msg send_msg = {
    10be:	9502      	str	r5, [sp, #8]
    10c0:	9404      	str	r4, [sp, #16]
        k_mbox_async_put(&my_mailbox, &send_msg, NULL);
    10c2:	f014 ff13 	bl	15eec <k_mbox_async_put>
    10c6:	e7f0      	b.n	10aa <notify_func+0x36>
    10c8:	000241f2 	.word	0x000241f2
    10cc:	00024202 	.word	0x00024202
    10d0:	00024227 	.word	0x00024227
    10d4:	20000670 	.word	0x20000670

000010d8 <eir_found>:
{
    10d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10dc:	b086      	sub	sp, #24
    10de:	4604      	mov	r4, r0
    printk("[AD]: %u data_len %u\n", data->type, data->data_len);
    10e0:	7842      	ldrb	r2, [r0, #1]
{
    10e2:	4688      	mov	r8, r1
    10e4:	af00      	add	r7, sp, #0
    printk("[AD]: %u data_len %u\n", data->type, data->data_len);
    10e6:	7801      	ldrb	r1, [r0, #0]
    10e8:	4823      	ldr	r0, [pc, #140]	; (1178 <eir_found+0xa0>)
    10ea:	f016 fac8 	bl	1767e <printk>
    if ( data->type == BT_DATA_NAME_COMPLETE) {
    10ee:	7823      	ldrb	r3, [r4, #0]
    10f0:	2b09      	cmp	r3, #9
    10f2:	d13f      	bne.n	1174 <eir_found+0x9c>
        uint8_t name[data->data_len+1];
    10f4:	7862      	ldrb	r2, [r4, #1]
    if ( data->type == BT_DATA_NAME_COMPLETE) {
    10f6:	466d      	mov	r5, sp
        uint8_t name[data->data_len+1];
    10f8:	f102 0308 	add.w	r3, r2, #8
    10fc:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
    1100:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(name, data->data, data->data_len);
    1104:	6861      	ldr	r1, [r4, #4]
    1106:	4668      	mov	r0, sp
    1108:	f018 f87e 	bl	19208 <memcpy>
            name[data->data_len] = 0;
    110c:	2200      	movs	r2, #0
    110e:	7863      	ldrb	r3, [r4, #1]
        if (strcmp(name, "PERI_ACC")) {
    1110:	4668      	mov	r0, sp
    1112:	491a      	ldr	r1, [pc, #104]	; (117c <eir_found+0xa4>)
            name[data->data_len] = 0;
    1114:	f80d 2003 	strb.w	r2, [sp, r3]
        uint8_t name[data->data_len+1];
    1118:	466e      	mov	r6, sp
        if (strcmp(name, "PERI_ACC")) {
    111a:	f018 f84a 	bl	191b2 <strcmp>
    111e:	b930      	cbnz	r0, 112e <eir_found+0x56>
        int err = bt_le_scan_stop();
    1120:	f006 f856 	bl	71d0 <bt_le_scan_stop>
        if (err) {
    1124:	4601      	mov	r1, r0
    1126:	b120      	cbz	r0, 1132 <eir_found+0x5a>
            printk("Stop LE scan failed (err %d)\n", err);
    1128:	4815      	ldr	r0, [pc, #84]	; (1180 <eir_found+0xa8>)
    112a:	f016 faa8 	bl	1767e <printk>
            return true;
    112e:	2001      	movs	r0, #1
    1130:	e01b      	b.n	116a <eir_found+0x92>
        param = BT_LE_CONN_PARAM_DEFAULT;
    1132:	463a      	mov	r2, r7
    1134:	4b13      	ldr	r3, [pc, #76]	; (1184 <eir_found+0xac>)
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	6859      	ldr	r1, [r3, #4]
        err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    113a:	330a      	adds	r3, #10
        param = BT_LE_CONN_PARAM_DEFAULT;
    113c:	c203      	stmia	r2!, {r0, r1}
        err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    113e:	4614      	mov	r4, r2
    1140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1146:	4621      	mov	r1, r4
    1148:	463a      	mov	r2, r7
    114a:	4640      	mov	r0, r8
    114c:	4b0e      	ldr	r3, [pc, #56]	; (1188 <eir_found+0xb0>)
    114e:	f006 fdf1 	bl	7d34 <bt_conn_le_create>
        if (err) {
    1152:	4601      	mov	r1, r0
    1154:	b120      	cbz	r0, 1160 <eir_found+0x88>
            printk("Create conn failed (err %d)\n", err);
    1156:	480d      	ldr	r0, [pc, #52]	; (118c <eir_found+0xb4>)
    1158:	f016 fa91 	bl	1767e <printk>
            start_scan();
    115c:	f7ff ff66 	bl	102c <start_scan>
        printk("Found:  %s\n", name);
    1160:	480b      	ldr	r0, [pc, #44]	; (1190 <eir_found+0xb8>)
    1162:	4631      	mov	r1, r6
    1164:	f016 fa8b 	bl	1767e <printk>
        return false;
    1168:	2000      	movs	r0, #0
    116a:	46ad      	mov	sp, r5
}
    116c:	3718      	adds	r7, #24
    116e:	46bd      	mov	sp, r7
    1170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    1174:	2001      	movs	r0, #1
    1176:	e7f9      	b.n	116c <eir_found+0x94>
    1178:	00024232 	.word	0x00024232
    117c:	00024248 	.word	0x00024248
    1180:	00024251 	.word	0x00024251
    1184:	00023422 	.word	0x00023422
    1188:	200011a0 	.word	0x200011a0
    118c:	0002426f 	.word	0x0002426f
    1190:	0002428c 	.word	0x0002428c

00001194 <bt_addr_le_to_str.constprop.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1194:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1196:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1198:	b08a      	sub	sp, #40	; 0x28
    119a:	4604      	mov	r4, r0
    119c:	460e      	mov	r6, r1
    119e:	ad07      	add	r5, sp, #28
    11a0:	2b03      	cmp	r3, #3
    11a2:	d820      	bhi.n	11e6 <bt_addr_le_to_str.constprop.0+0x52>
    11a4:	e8df f003 	tbb	[pc, r3]
    11a8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    11ac:	4911      	ldr	r1, [pc, #68]	; (11f4 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    11ae:	4628      	mov	r0, r5
    11b0:	f017 ffd2 	bl	19158 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    11b4:	7863      	ldrb	r3, [r4, #1]
    11b6:	211e      	movs	r1, #30
    11b8:	9304      	str	r3, [sp, #16]
    11ba:	78a3      	ldrb	r3, [r4, #2]
    11bc:	4630      	mov	r0, r6
    11be:	9303      	str	r3, [sp, #12]
    11c0:	78e3      	ldrb	r3, [r4, #3]
    11c2:	4a0d      	ldr	r2, [pc, #52]	; (11f8 <bt_addr_le_to_str.constprop.0+0x64>)
    11c4:	9302      	str	r3, [sp, #8]
    11c6:	7923      	ldrb	r3, [r4, #4]
    11c8:	9505      	str	r5, [sp, #20]
    11ca:	9301      	str	r3, [sp, #4]
    11cc:	7963      	ldrb	r3, [r4, #5]
    11ce:	9300      	str	r3, [sp, #0]
    11d0:	79a3      	ldrb	r3, [r4, #6]
    11d2:	f016 fa61 	bl	17698 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    11d6:	b00a      	add	sp, #40	; 0x28
    11d8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    11da:	4908      	ldr	r1, [pc, #32]	; (11fc <bt_addr_le_to_str.constprop.0+0x68>)
    11dc:	e7e7      	b.n	11ae <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    11de:	4908      	ldr	r1, [pc, #32]	; (1200 <bt_addr_le_to_str.constprop.0+0x6c>)
    11e0:	e7e5      	b.n	11ae <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    11e2:	4908      	ldr	r1, [pc, #32]	; (1204 <bt_addr_le_to_str.constprop.0+0x70>)
    11e4:	e7e3      	b.n	11ae <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    11e6:	210a      	movs	r1, #10
    11e8:	4628      	mov	r0, r5
    11ea:	4a07      	ldr	r2, [pc, #28]	; (1208 <bt_addr_le_to_str.constprop.0+0x74>)
    11ec:	f016 fa54 	bl	17698 <snprintk>
		break;
    11f0:	e7e0      	b.n	11b4 <bt_addr_le_to_str.constprop.0+0x20>
    11f2:	bf00      	nop
    11f4:	00024298 	.word	0x00024298
    11f8:	000242ba 	.word	0x000242ba
    11fc:	0002429f 	.word	0x0002429f
    1200:	000242a6 	.word	0x000242a6
    1204:	000242b0 	.word	0x000242b0
    1208:	000267b2 	.word	0x000267b2

0000120c <device_found>:
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	4615      	mov	r5, r2
    1210:	460f      	mov	r7, r1
    1212:	461c      	mov	r4, r3
    1214:	b08b      	sub	sp, #44	; 0x2c
    bt_addr_le_to_str(addr, dev, sizeof(dev));
    1216:	a902      	add	r1, sp, #8
{
    1218:	4606      	mov	r6, r0
    bt_addr_le_to_str(addr, dev, sizeof(dev));
    121a:	f7ff ffbb 	bl	1194 <bt_addr_le_to_str.constprop.0>
    printk("[DEVICE]: %s, AD evt type %u, AD data len %u, RSSI %i\n",
    121e:	462a      	mov	r2, r5
    1220:	88a3      	ldrh	r3, [r4, #4]
    1222:	4807      	ldr	r0, [pc, #28]	; (1240 <device_found+0x34>)
    1224:	9700      	str	r7, [sp, #0]
    1226:	a902      	add	r1, sp, #8
    1228:	f016 fa29 	bl	1767e <printk>
    if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    122c:	2d01      	cmp	r5, #1
    122e:	d804      	bhi.n	123a <device_found+0x2e>
        bt_data_parse(ad, eir_found, (void *)addr);
    1230:	4632      	mov	r2, r6
    1232:	4620      	mov	r0, r4
    1234:	4903      	ldr	r1, [pc, #12]	; (1244 <device_found+0x38>)
    1236:	f005 f855 	bl	62e4 <bt_data_parse>
}
    123a:	b00b      	add	sp, #44	; 0x2c
    123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    123e:	bf00      	nop
    1240:	000242dd 	.word	0x000242dd
    1244:	000010d9 	.word	0x000010d9

00001248 <connected>:

static void connected(struct bt_conn *conn, uint8_t conn_err)
{
    1248:	b5f0      	push	{r4, r5, r6, r7, lr}
    124a:	460e      	mov	r6, r1
    124c:	b08f      	sub	sp, #60	; 0x3c
    124e:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    int err;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    1250:	f018 fd44 	bl	19cdc <bt_conn_get_dst>
    1254:	a906      	add	r1, sp, #24
    1256:	f7ff ff9d 	bl	1194 <bt_addr_le_to_str.constprop.0>

    if (conn_err) {
    125a:	4d2f      	ldr	r5, [pc, #188]	; (1318 <connected+0xd0>)
    125c:	b16e      	cbz	r6, 127a <connected+0x32>
        printk("Failed to connect to %s (%u)\n", addr, conn_err);
    125e:	4632      	mov	r2, r6
    1260:	482e      	ldr	r0, [pc, #184]	; (131c <connected+0xd4>)
    1262:	a906      	add	r1, sp, #24
    1264:	f016 fa0b 	bl	1767e <printk>

        bt_conn_unref(default_conn);
    1268:	6828      	ldr	r0, [r5, #0]
    126a:	f018 fd34 	bl	19cd6 <bt_conn_unref>
        default_conn = NULL;
    126e:	2300      	movs	r3, #0
    1270:	602b      	str	r3, [r5, #0]

        start_scan();
    1272:	f7ff fedb 	bl	102c <start_scan>
        } else {
            printk("LE data length update OK\n");
        }

    }
}
    1276:	b00f      	add	sp, #60	; 0x3c
    1278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printk("Connected: %s\n", addr);
    127a:	4829      	ldr	r0, [pc, #164]	; (1320 <connected+0xd8>)
    127c:	a906      	add	r1, sp, #24
    127e:	f016 f9fe 	bl	1767e <printk>
    if (conn == default_conn) {
    1282:	682b      	ldr	r3, [r5, #0]
    1284:	42a3      	cmp	r3, r4
    1286:	d1f6      	bne.n	1276 <connected+0x2e>
        memcpy(&uuid, BT_UUID_ACC_SERVICE, sizeof(uuid));
    1288:	aa01      	add	r2, sp, #4
    128a:	4617      	mov	r7, r2
    128c:	4b25      	ldr	r3, [pc, #148]	; (1324 <connected+0xdc>)
    128e:	f103 0c10 	add.w	ip, r3, #16
    1292:	4616      	mov	r6, r2
    1294:	6818      	ldr	r0, [r3, #0]
    1296:	6859      	ldr	r1, [r3, #4]
    1298:	3308      	adds	r3, #8
    129a:	c603      	stmia	r6!, {r0, r1}
    129c:	4563      	cmp	r3, ip
    129e:	4632      	mov	r2, r6
    12a0:	d1f7      	bne.n	1292 <connected+0x4a>
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	2211      	movs	r2, #17
    12a6:	7033      	strb	r3, [r6, #0]
    12a8:	4e1f      	ldr	r6, [pc, #124]	; (1328 <connected+0xe0>)
    12aa:	4639      	mov	r1, r7
    12ac:	4630      	mov	r0, r6
    12ae:	f017 ffab 	bl	19208 <memcpy>
        discover_params.uuid = &uuid.uuid;
    12b2:	491e      	ldr	r1, [pc, #120]	; (132c <connected+0xe4>)
        discover_params.func = discover_func;
    12b4:	4b1e      	ldr	r3, [pc, #120]	; (1330 <connected+0xe8>)
        err = bt_gatt_discover(default_conn, &discover_params);
    12b6:	6828      	ldr	r0, [r5, #0]
        discover_params.func = discover_func;
    12b8:	604b      	str	r3, [r1, #4]
        discover_params.start_handle = 0x0001;
    12ba:	2301      	movs	r3, #1
    12bc:	810b      	strh	r3, [r1, #8]
        discover_params.end_handle = 0xffff;
    12be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12c2:	81cb      	strh	r3, [r1, #14]
        discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    12c4:	2300      	movs	r3, #0
        discover_params.uuid = &uuid.uuid;
    12c6:	600e      	str	r6, [r1, #0]
        discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    12c8:	740b      	strb	r3, [r1, #16]
        err = bt_gatt_discover(default_conn, &discover_params);
    12ca:	f009 f8a7 	bl	a41c <bt_gatt_discover>
        if (err) {
    12ce:	4601      	mov	r1, r0
    12d0:	b118      	cbz	r0, 12da <connected+0x92>
            printk("Discover failed(err %d)\n", err);
    12d2:	4818      	ldr	r0, [pc, #96]	; (1334 <connected+0xec>)
            printk("LE data length update failed: %d", err);
    12d4:	f016 f9d3 	bl	1767e <printk>
    12d8:	e7cd      	b.n	1276 <connected+0x2e>
        exchange_params.func = exchange_func;
    12da:	4917      	ldr	r1, [pc, #92]	; (1338 <connected+0xf0>)
    12dc:	4b17      	ldr	r3, [pc, #92]	; (133c <connected+0xf4>)
        err = bt_gatt_exchange_mtu(conn, &exchange_params);
    12de:	4620      	mov	r0, r4
        exchange_params.func = exchange_func;
    12e0:	600b      	str	r3, [r1, #0]
        err = bt_gatt_exchange_mtu(conn, &exchange_params);
    12e2:	f009 f875 	bl	a3d0 <bt_gatt_exchange_mtu>
        if (err) {
    12e6:	4601      	mov	r1, r0
    12e8:	b168      	cbz	r0, 1306 <connected+0xbe>
            printk("MTU exchange failed (err %d)\n", err);
    12ea:	4815      	ldr	r0, [pc, #84]	; (1340 <connected+0xf8>)
    12ec:	f016 f9c7 	bl	1767e <printk>
        struct bt_conn_le_data_len_param data_len = {
    12f0:	4b14      	ldr	r3, [pc, #80]	; (1344 <connected+0xfc>)
        err = bt_conn_le_data_len_update(conn, &data_len);
    12f2:	4669      	mov	r1, sp
        struct bt_conn_le_data_len_param data_len = {
    12f4:	6818      	ldr	r0, [r3, #0]
    12f6:	9000      	str	r0, [sp, #0]
        err = bt_conn_le_data_len_update(conn, &data_len);
    12f8:	4620      	mov	r0, r4
    12fa:	f018 fcf1 	bl	19ce0 <bt_conn_le_data_len_update>
        if (err) {
    12fe:	4601      	mov	r1, r0
    1300:	b128      	cbz	r0, 130e <connected+0xc6>
            printk("LE data length update failed: %d", err);
    1302:	4811      	ldr	r0, [pc, #68]	; (1348 <connected+0x100>)
    1304:	e7e6      	b.n	12d4 <connected+0x8c>
            printk("MTU exchange pending\n");
    1306:	4811      	ldr	r0, [pc, #68]	; (134c <connected+0x104>)
    1308:	f016 f9b9 	bl	1767e <printk>
    130c:	e7f0      	b.n	12f0 <connected+0xa8>
            printk("LE data length update OK\n");
    130e:	4810      	ldr	r0, [pc, #64]	; (1350 <connected+0x108>)
    1310:	f016 f9b5 	bl	1767e <printk>
    1314:	e7af      	b.n	1276 <connected+0x2e>
    1316:	bf00      	nop
    1318:	200011a0 	.word	0x200011a0
    131c:	00024314 	.word	0x00024314
    1320:	00024332 	.word	0x00024332
    1324:	00023400 	.word	0x00023400
    1328:	200004c8 	.word	0x200004c8
    132c:	200011a4 	.word	0x200011a4
    1330:	00000ecd 	.word	0x00000ecd
    1334:	00024341 	.word	0x00024341
    1338:	200011b8 	.word	0x200011b8
    133c:	00000ead 	.word	0x00000ead
    1340:	0002435a 	.word	0x0002435a
    1344:	0002343c 	.word	0x0002343c
    1348:	0002438e 	.word	0x0002438e
    134c:	00024378 	.word	0x00024378
    1350:	000243af 	.word	0x000243af

00001354 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    1354:	b530      	push	{r4, r5, lr}
    1356:	460d      	mov	r5, r1
    1358:	4604      	mov	r4, r0
    135a:	b089      	sub	sp, #36	; 0x24
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    135c:	f018 fcbe 	bl	19cdc <bt_conn_get_dst>
    1360:	4669      	mov	r1, sp
    1362:	f7ff ff17 	bl	1194 <bt_addr_le_to_str.constprop.0>

    printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    1366:	462a      	mov	r2, r5

    if (default_conn != conn) {
    1368:	4d07      	ldr	r5, [pc, #28]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    136a:	4808      	ldr	r0, [pc, #32]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
    136c:	4669      	mov	r1, sp
    136e:	f016 f986 	bl	1767e <printk>
    if (default_conn != conn) {
    1372:	6828      	ldr	r0, [r5, #0]
    1374:	42a0      	cmp	r0, r4
    1376:	d105      	bne.n	1384 <disconnected+0x30>
        return;
    }

    bt_conn_unref(default_conn);
    1378:	f018 fcad 	bl	19cd6 <bt_conn_unref>
    default_conn = NULL;
    137c:	2300      	movs	r3, #0
    137e:	602b      	str	r3, [r5, #0]

    start_scan();
    1380:	f7ff fe54 	bl	102c <start_scan>
}
    1384:	b009      	add	sp, #36	; 0x24
    1386:	bd30      	pop	{r4, r5, pc}
    1388:	200011a0 	.word	0x200011a0
    138c:	000243c9 	.word	0x000243c9

00001390 <chart_init>:
    //lv_obj_align(data_label, NULL, LV_ALIGN_CENTER, -35, 0);
    //lv_obj_add_style(data_label, LV_LABEL_PART_MAIN, &style_label_value);
}

void chart_init(struct chart_type *chart)
{   
    1390:	b513      	push	{r0, r1, r4, lr}
    1392:	4604      	mov	r4, r0
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
    1394:	f011 f8ba 	bl	1250c <lv_disp_get_default>
    1398:	f00d fad6 	bl	e948 <lv_disp_get_scr_act>
    /* Create a chart */
    chart->chart_obj = lv_chart_create(lv_scr_act(), NULL);
    139c:	2100      	movs	r1, #0
    139e:	f013 ffd3 	bl	15348 <lv_chart_create>
    lv_obj_set_size(chart->chart_obj, 300, 200);
    13a2:	22c8      	movs	r2, #200	; 0xc8
    chart->chart_obj = lv_chart_create(lv_scr_act(), NULL);
    13a4:	6020      	str	r0, [r4, #0]
    lv_obj_set_size(chart->chart_obj, 300, 200);
    13a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
    13aa:	f01a febc 	bl	1c126 <lv_obj_set_size>
    lv_obj_align(chart->chart_obj, NULL, LV_ALIGN_CENTER, 0, 0);
    13ae:	2300      	movs	r3, #0
    13b0:	6820      	ldr	r0, [r4, #0]
    13b2:	4619      	mov	r1, r3
    13b4:	461a      	mov	r2, r3
    13b6:	9300      	str	r3, [sp, #0]
    13b8:	f01a fe90 	bl	1c0dc <lv_obj_align>
    lv_chart_set_type(chart->chart_obj, LV_CHART_TYPE_LINE);   /*Show lines and points too*/
    13bc:	6820      	ldr	r0, [r4, #0]
    13be:	2101      	movs	r1, #1
    13c0:	f020 fc73 	bl	21caa <lv_chart_set_type>
    
    /*Add two data series*/
    chart->series[0] = lv_chart_add_series(chart->chart_obj, LV_COLOR_RED);
    13c4:	4908      	ldr	r1, [pc, #32]	; (13e8 <chart_init+0x58>)
    13c6:	6820      	ldr	r0, [r4, #0]
    13c8:	f020 fc44 	bl	21c54 <lv_chart_add_series>
    chart->series[1] = lv_chart_add_series(chart->chart_obj, LV_COLOR_GREEN);
    13cc:	4907      	ldr	r1, [pc, #28]	; (13ec <chart_init+0x5c>)
    chart->series[0] = lv_chart_add_series(chart->chart_obj, LV_COLOR_RED);
    13ce:	6060      	str	r0, [r4, #4]
    chart->series[1] = lv_chart_add_series(chart->chart_obj, LV_COLOR_GREEN);
    13d0:	6820      	ldr	r0, [r4, #0]
    13d2:	f020 fc3f 	bl	21c54 <lv_chart_add_series>
    chart->series[2] = lv_chart_add_series(chart->chart_obj, LV_COLOR_BLUE);
    13d6:	4906      	ldr	r1, [pc, #24]	; (13f0 <chart_init+0x60>)
    chart->series[1] = lv_chart_add_series(chart->chart_obj, LV_COLOR_GREEN);
    13d8:	60a0      	str	r0, [r4, #8]
    chart->series[2] = lv_chart_add_series(chart->chart_obj, LV_COLOR_BLUE);
    13da:	6820      	ldr	r0, [r4, #0]
    13dc:	f020 fc3a 	bl	21c54 <lv_chart_add_series>
    13e0:	60e0      	str	r0, [r4, #12]
}
    13e2:	b002      	add	sp, #8
    13e4:	bd10      	pop	{r4, pc}
    13e6:	bf00      	nop
    13e8:	ffff0000 	.word	0xffff0000
    13ec:	ff008000 	.word	0xff008000
    13f0:	ff0000ff 	.word	0xff0000ff

000013f4 <main>:
        lv_chart_refresh(chart->chart_obj);
    }
}

void main(void)
{
    13f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int err = bt_enable(NULL);
    13f8:	2000      	movs	r0, #0
{
    13fa:	b0bd      	sub	sp, #244	; 0xf4
    int err = bt_enable(NULL);
    13fc:	f005 fdd8 	bl	6fb0 <bt_enable>

    if (err) {
    1400:	4604      	mov	r4, r0
    1402:	b130      	cbz	r0, 1412 <main+0x1e>
        printk("Bluetooth init failed (err %d)\n", err);
    1404:	4601      	mov	r1, r0
    1406:	4848      	ldr	r0, [pc, #288]	; (1528 <main+0x134>)

    const struct device *display_dev;
    display_dev = device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);

    if (display_dev == NULL) {
        printk("%s device not found.  Aborting test.", CONFIG_LVGL_DISPLAY_DEV_NAME);
    1408:	f016 f939 	bl	1767e <printk>
            chart_update(&acc_chart, data, refresh);
        }
        lv_task_handler();
        //k_sleep(K_MSEC(5));
    }
}
    140c:	b03d      	add	sp, #244	; 0xf4
    140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printk("Bluetooth initialized\n");
    1412:	4846      	ldr	r0, [pc, #280]	; (152c <main+0x138>)
    1414:	f016 f933 	bl	1767e <printk>
    bt_conn_cb_register(&conn_callbacks);
    1418:	4845      	ldr	r0, [pc, #276]	; (1530 <main+0x13c>)
    141a:	f006 f979 	bl	7710 <bt_conn_cb_register>
    start_scan();
    141e:	f7ff fe05 	bl	102c <start_scan>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1422:	4844      	ldr	r0, [pc, #272]	; (1534 <main+0x140>)
    1424:	f014 fb32 	bl	15a8c <z_impl_device_get_binding>
        printk("%s device not found.  Aborting test.", CONFIG_LVGL_DISPLAY_DEV_NAME);
    1428:	4942      	ldr	r1, [pc, #264]	; (1534 <main+0x140>)
    if (display_dev == NULL) {
    142a:	4605      	mov	r5, r0
    142c:	b908      	cbnz	r0, 1432 <main+0x3e>
        printk("%s device not found.  Aborting test.", CONFIG_LVGL_DISPLAY_DEV_NAME);
    142e:	4842      	ldr	r0, [pc, #264]	; (1538 <main+0x144>)
    1430:	e7ea      	b.n	1408 <main+0x14>
    printk("Display %s initialized\n", CONFIG_LVGL_DISPLAY_DEV_NAME);
    1432:	4842      	ldr	r0, [pc, #264]	; (153c <main+0x148>)
    1434:	f016 f923 	bl	1767e <printk>
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
    1438:	68ab      	ldr	r3, [r5, #8]
    143a:	4628      	mov	r0, r5
    143c:	685b      	ldr	r3, [r3, #4]
    143e:	4798      	blx	r3
    chart_init(&acc_chart);
    1440:	a807      	add	r0, sp, #28
    1442:	f7ff ffa5 	bl	1390 <chart_init>
            data[0] = 100 + ((x-1200)/24.f);
    1446:	4f3e      	ldr	r7, [pc, #248]	; (1540 <main+0x14c>)
    1448:	f8df 8100 	ldr.w	r8, [pc, #256]	; 154c <main+0x158>
        recv_msg.size = 150;
    144c:	2396      	movs	r3, #150	; 0x96
        k_mbox_get(&my_mailbox, &recv_msg, buffer, K_FOREVER);
    144e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        recv_msg.size = 150;
    1452:	930c      	str	r3, [sp, #48]	; 0x30
        k_mbox_get(&my_mailbox, &recv_msg, buffer, K_FOREVER);
    1454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        recv_msg.rx_source_thread = K_ANY;
    1458:	2600      	movs	r6, #0
        k_mbox_get(&my_mailbox, &recv_msg, buffer, K_FOREVER);
    145a:	e9cd 2300 	strd	r2, r3, [sp]
    145e:	a90b      	add	r1, sp, #44	; 0x2c
    1460:	aa16      	add	r2, sp, #88	; 0x58
    1462:	4838      	ldr	r0, [pc, #224]	; (1544 <main+0x150>)
        recv_msg.rx_source_thread = K_ANY;
    1464:	9612      	str	r6, [sp, #72]	; 0x48
        k_mbox_get(&my_mailbox, &recv_msg, buffer, K_FOREVER);
    1466:	f014 fd71 	bl	15f4c <k_mbox_get>
        printf("size=%d\n", recv_msg.size);
    146a:	990c      	ldr	r1, [sp, #48]	; 0x30
    146c:	4836      	ldr	r0, [pc, #216]	; (1548 <main+0x154>)
    146e:	f003 fb53 	bl	4b18 <printf>
            printf("%d, %d, %d\n", x, y, z);
    1472:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1550 <main+0x15c>
    1476:	ad16      	add	r5, sp, #88	; 0x58
    1478:	f10d 09ee 	add.w	r9, sp, #238	; 0xee
            x = buffer[i+0] | (buffer[i+1] << 8);
    147c:	786b      	ldrb	r3, [r5, #1]
    147e:	7829      	ldrb	r1, [r5, #0]
            y = buffer[i+2] | (buffer[i+3] << 8);
    1480:	78aa      	ldrb	r2, [r5, #2]
            x = buffer[i+0] | (buffer[i+1] << 8);
    1482:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
            y = buffer[i+2] | (buffer[i+3] << 8);
    1486:	78eb      	ldrb	r3, [r5, #3]
            z = buffer[i+4] | (buffer[i+5] << 8);
    1488:	f895 b004 	ldrb.w	fp, [r5, #4]
            y = buffer[i+2] | (buffer[i+3] << 8);
    148c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
            z = buffer[i+4] | (buffer[i+5] << 8);
    1490:	796b      	ldrb	r3, [r5, #5]
            printf("%d, %d, %d\n", x, y, z);
    1492:	b212      	sxth	r2, r2
            z = buffer[i+4] | (buffer[i+5] << 8);
    1494:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
            printf("%d, %d, %d\n", x, y, z);
    1498:	fa0f fb8b 	sxth.w	fp, fp
    149c:	465b      	mov	r3, fp
    149e:	b209      	sxth	r1, r1
    14a0:	4650      	mov	r0, sl
    14a2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    14a6:	f003 fb37 	bl	4b18 <printf>
            data[0] = 100 + ((x-1200)/24.f);
    14aa:	9902      	ldr	r1, [sp, #8]
            if (++count == 25) {
    14ac:	3401      	adds	r4, #1
            data[0] = 100 + ((x-1200)/24.f);
    14ae:	f5a1 6096 	sub.w	r0, r1, #1200	; 0x4b0
    14b2:	f7fe ff0b 	bl	2cc <__aeabi_i2f>
    14b6:	4639      	mov	r1, r7
    14b8:	f7ff f810 	bl	4dc <__aeabi_fdiv>
    14bc:	4641      	mov	r1, r8
    14be:	f7fe fe51 	bl	164 <__addsf3>
    14c2:	f7ff f8a7 	bl	614 <__aeabi_f2uiz>
            data[1] = 100 + ((y-1200)/24.f);
    14c6:	9a03      	ldr	r2, [sp, #12]
            data[0] = 100 + ((x-1200)/24.f);
    14c8:	f8ad 0014 	strh.w	r0, [sp, #20]
            data[1] = 100 + ((y-1200)/24.f);
    14cc:	f5a2 6096 	sub.w	r0, r2, #1200	; 0x4b0
    14d0:	f7fe fefc 	bl	2cc <__aeabi_i2f>
    14d4:	4639      	mov	r1, r7
    14d6:	f7ff f801 	bl	4dc <__aeabi_fdiv>
    14da:	4641      	mov	r1, r8
    14dc:	f7fe fe42 	bl	164 <__addsf3>
    14e0:	f7ff f898 	bl	614 <__aeabi_f2uiz>
    14e4:	f8ad 0016 	strh.w	r0, [sp, #22]
            data[2] = 100 + ((z-1200)/24.f);
    14e8:	f5ab 6096 	sub.w	r0, fp, #1200	; 0x4b0
    14ec:	f7fe feee 	bl	2cc <__aeabi_i2f>
    14f0:	4639      	mov	r1, r7
    14f2:	f7fe fff3 	bl	4dc <__aeabi_fdiv>
    14f6:	4641      	mov	r1, r8
    14f8:	f7fe fe34 	bl	164 <__addsf3>
            if (++count == 25) {
    14fc:	b2e4      	uxtb	r4, r4
            data[2] = 100 + ((z-1200)/24.f);
    14fe:	f7ff f889 	bl	614 <__aeabi_f2uiz>
            if (++count == 25) {
    1502:	2c19      	cmp	r4, #25
                refresh = true;
    1504:	bf08      	it	eq
    1506:	2601      	moveq	r6, #1
            data[2] = 100 + ((z-1200)/24.f);
    1508:	f8ad 0018 	strh.w	r0, [sp, #24]
            chart_update(&acc_chart, data, refresh);
    150c:	4632      	mov	r2, r6
    150e:	a905      	add	r1, sp, #20
    1510:	a807      	add	r0, sp, #28
    1512:	f105 0506 	add.w	r5, r5, #6
                count = 0;
    1516:	bf08      	it	eq
    1518:	2400      	moveq	r4, #0
            chart_update(&acc_chart, data, refresh);
    151a:	f016 f851 	bl	175c0 <chart_update>
        for (uint8_t i = 0; i < 150; i += 6) {
    151e:	45a9      	cmp	r9, r5
    1520:	d1ac      	bne.n	147c <main+0x88>
        lv_task_handler();
    1522:	f011 fc4d 	bl	12dc0 <lv_task_handler>
    while (1) {
    1526:	e791      	b.n	144c <main+0x58>
    1528:	000243eb 	.word	0x000243eb
    152c:	0002440b 	.word	0x0002440b
    1530:	20000138 	.word	0x20000138
    1534:	00024422 	.word	0x00024422
    1538:	0002442a 	.word	0x0002442a
    153c:	0002444f 	.word	0x0002444f
    1540:	41c00000 	.word	0x41c00000
    1544:	20000670 	.word	0x20000670
    1548:	00024467 	.word	0x00024467
    154c:	42c80000 	.word	0x42c80000
    1550:	00024470 	.word	0x00024470

00001554 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1554:	680b      	ldr	r3, [r1, #0]
    1556:	3301      	adds	r3, #1
    1558:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    155a:	4b01      	ldr	r3, [pc, #4]	; (1560 <char_out+0xc>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	4718      	bx	r3
    1560:	20000158 	.word	0x20000158

00001564 <__printk_hook_install>:
	_char_out = fn;
    1564:	4b01      	ldr	r3, [pc, #4]	; (156c <__printk_hook_install+0x8>)
    1566:	6018      	str	r0, [r3, #0]
}
    1568:	4770      	bx	lr
    156a:	bf00      	nop
    156c:	20000158 	.word	0x20000158

00001570 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1570:	b507      	push	{r0, r1, r2, lr}
    1572:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1574:	2100      	movs	r1, #0
{
    1576:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1578:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    157a:	4803      	ldr	r0, [pc, #12]	; (1588 <vprintk+0x18>)
    157c:	a901      	add	r1, sp, #4
    157e:	f000 f8ff 	bl	1780 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1582:	b003      	add	sp, #12
    1584:	f85d fb04 	ldr.w	pc, [sp], #4
    1588:	00001555 	.word	0x00001555

0000158c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    158c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    158e:	2500      	movs	r5, #0
{
    1590:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1592:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1596:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    1598:	a901      	add	r1, sp, #4
    159a:	4805      	ldr	r0, [pc, #20]	; (15b0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    159c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    159e:	f000 f8ef 	bl	1780 <cbvprintf>

	if (ctx.count < ctx.max) {
    15a2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    15a6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    15a8:	bfb8      	it	lt
    15aa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    15ac:	b005      	add	sp, #20
    15ae:	bd30      	pop	{r4, r5, pc}
    15b0:	00017659 	.word	0x00017659

000015b4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    15b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15b8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    15bc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    15be:	f019 0808 	ands.w	r8, r9, #8
{
    15c2:	4693      	mov	fp, r2
	if (processing) {
    15c4:	d00d      	beq.n	15e2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    15c6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    15c8:	bf0c      	ite	eq
    15ca:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    15ce:	f049 0920 	orrne.w	r9, r9, #32
    15d2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    15d6:	f38b 8811 	msr	BASEPRI, fp
    15da:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    15de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15e2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    15e6:	2902      	cmp	r1, #2
    15e8:	d107      	bne.n	15fa <process_event+0x46>
			evt = process_recheck(mgr);
    15ea:	4620      	mov	r0, r4
    15ec:	f016 f861 	bl	176b2 <process_recheck>
		if (evt == EVT_NOP) {
    15f0:	2800      	cmp	r0, #0
    15f2:	d0f0      	beq.n	15d6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    15f4:	2801      	cmp	r0, #1
    15f6:	8b23      	ldrh	r3, [r4, #24]
    15f8:	d150      	bne.n	169c <process_event+0xe8>
			res = mgr->last_res;
    15fa:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15fc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    15fe:	2f00      	cmp	r7, #0
    1600:	da15      	bge.n	162e <process_event+0x7a>
		*clients = mgr->clients;
    1602:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1604:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1608:	e9c4 8800 	strd	r8, r8, [r4]
    160c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1610:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1612:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1614:	8b21      	ldrh	r1, [r4, #24]
    1616:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    161a:	45ca      	cmp	sl, r9
    161c:	d002      	beq.n	1624 <process_event+0x70>
		if (do_monitors
    161e:	68a3      	ldr	r3, [r4, #8]
    1620:	2b00      	cmp	r3, #0
    1622:	d15c      	bne.n	16de <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1624:	b90d      	cbnz	r5, 162a <process_event+0x76>
		    || (transit != NULL)) {
    1626:	2e00      	cmp	r6, #0
    1628:	d074      	beq.n	1714 <process_event+0x160>
    162a:	2300      	movs	r3, #0
    162c:	e058      	b.n	16e0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    162e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1632:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1634:	2a01      	cmp	r2, #1
    1636:	d820      	bhi.n	167a <process_event+0xc6>
		*clients = mgr->clients;
    1638:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    163c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    163e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1640:	b289      	uxth	r1, r1
	list->tail = NULL;
    1642:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1646:	d10c      	bne.n	1662 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1648:	2d00      	cmp	r5, #0
    164a:	462b      	mov	r3, r5
    164c:	bf38      	it	cc
    164e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1650:	b12b      	cbz	r3, 165e <process_event+0xaa>
				mgr->refs += 1U;
    1652:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	3201      	adds	r2, #1
    1658:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    165a:	2b00      	cmp	r3, #0
    165c:	d1f8      	bne.n	1650 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    165e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1662:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1664:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1666:	f016 f824 	bl	176b2 <process_recheck>
    166a:	4606      	mov	r6, r0
    166c:	2800      	cmp	r0, #0
    166e:	d0d1      	beq.n	1614 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1670:	8b23      	ldrh	r3, [r4, #24]
    1672:	f043 0320 	orr.w	r3, r3, #32
    1676:	8323      	strh	r3, [r4, #24]
    1678:	e7cb      	b.n	1612 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    167a:	2b04      	cmp	r3, #4
    167c:	d10c      	bne.n	1698 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    167e:	f021 0107 	bic.w	r1, r1, #7
    1682:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1684:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1686:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1688:	f016 f813 	bl	176b2 <process_recheck>
    168c:	4605      	mov	r5, r0
    168e:	2800      	cmp	r0, #0
    1690:	d0bf      	beq.n	1612 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1692:	f041 0120 	orr.w	r1, r1, #32
    1696:	8321      	strh	r1, [r4, #24]
    1698:	2500      	movs	r5, #0
    169a:	e7ba      	b.n	1612 <process_event+0x5e>
		} else if (evt == EVT_START) {
    169c:	2803      	cmp	r0, #3
    169e:	d109      	bne.n	16b4 <process_event+0x100>
			transit = mgr->transitions->start;
    16a0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    16a6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a8:	f043 0306 	orr.w	r3, r3, #6
}
    16ac:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    16ae:	8323      	strh	r3, [r4, #24]
		res = 0;
    16b0:	462f      	mov	r7, r5
    16b2:	e7af      	b.n	1614 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    16b4:	2804      	cmp	r0, #4
    16b6:	d106      	bne.n	16c6 <process_event+0x112>
			transit = mgr->transitions->stop;
    16b8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16ba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    16be:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16c0:	f043 0304 	orr.w	r3, r3, #4
    16c4:	e7f2      	b.n	16ac <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    16c6:	2805      	cmp	r0, #5
    16c8:	d106      	bne.n	16d8 <process_event+0x124>
			transit = mgr->transitions->reset;
    16ca:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16cc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    16d0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16d2:	f043 0305 	orr.w	r3, r3, #5
    16d6:	e7e9      	b.n	16ac <process_event+0xf8>
    16d8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    16da:	462e      	mov	r6, r5
    16dc:	e7e8      	b.n	16b0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    16de:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    16e4:	8321      	strh	r1, [r4, #24]
    16e6:	f38b 8811 	msr	BASEPRI, fp
    16ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16ee:	bb03      	cbnz	r3, 1732 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    16f0:	2d00      	cmp	r5, #0
    16f2:	d133      	bne.n	175c <process_event+0x1a8>
			if (transit != NULL) {
    16f4:	b116      	cbz	r6, 16fc <process_event+0x148>
				transit(mgr, transition_complete);
    16f6:	4620      	mov	r0, r4
    16f8:	4920      	ldr	r1, [pc, #128]	; (177c <process_event+0x1c8>)
    16fa:	47b0      	blx	r6
	__asm__ volatile(
    16fc:	f04f 0320 	mov.w	r3, #32
    1700:	f3ef 8b11 	mrs	fp, BASEPRI
    1704:	f383 8811 	msr	BASEPRI, r3
    1708:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    170c:	8b23      	ldrh	r3, [r4, #24]
    170e:	f023 0308 	bic.w	r3, r3, #8
    1712:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1714:	8b23      	ldrh	r3, [r4, #24]
    1716:	06da      	lsls	r2, r3, #27
    1718:	d528      	bpl.n	176c <process_event+0x1b8>
			evt = EVT_COMPLETE;
    171a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    171c:	f023 0310 	bic.w	r3, r3, #16
    1720:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1722:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1726:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    172a:	2900      	cmp	r1, #0
    172c:	f47f af5b 	bne.w	15e6 <process_event+0x32>
out:
    1730:	e751      	b.n	15d6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1732:	68a1      	ldr	r1, [r4, #8]
    1734:	2900      	cmp	r1, #0
    1736:	d0db      	beq.n	16f0 <process_event+0x13c>
	return node->next;
    1738:	680b      	ldr	r3, [r1, #0]
    173a:	2b00      	cmp	r3, #0
    173c:	bf38      	it	cc
    173e:	2300      	movcc	r3, #0
    1740:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    1742:	4652      	mov	r2, sl
    1744:	463b      	mov	r3, r7
    1746:	4620      	mov	r0, r4
    1748:	f8d1 b004 	ldr.w	fp, [r1, #4]
    174c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    174e:	f1b9 0f00 	cmp.w	r9, #0
    1752:	d0cd      	beq.n	16f0 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1754:	4649      	mov	r1, r9
    1756:	f8d9 3000 	ldr.w	r3, [r9]
    175a:	e7ee      	b.n	173a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    175c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    175e:	463b      	mov	r3, r7
    1760:	4652      	mov	r2, sl
    1762:	4620      	mov	r0, r4
    1764:	682d      	ldr	r5, [r5, #0]
    1766:	f015 ffc0 	bl	176ea <notify_one>
    176a:	e7c1      	b.n	16f0 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    176c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1770:	bf1e      	ittt	ne
    1772:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    1776:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1778:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    177a:	e7d2      	b.n	1722 <process_event+0x16e>
    177c:	00017717 	.word	0x00017717

00001780 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1784:	468b      	mov	fp, r1
    1786:	4692      	mov	sl, r2
    1788:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    178a:	2500      	movs	r5, #0
{
    178c:	b091      	sub	sp, #68	; 0x44
    178e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1790:	f89a 0000 	ldrb.w	r0, [sl]
    1794:	b908      	cbnz	r0, 179a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1796:	4628      	mov	r0, r5
    1798:	e35e      	b.n	1e58 <cbvprintf+0x6d8>
		if (*fp != '%') {
    179a:	2825      	cmp	r0, #37	; 0x25
    179c:	f10a 0701 	add.w	r7, sl, #1
    17a0:	d007      	beq.n	17b2 <cbvprintf+0x32>
			OUTC('%');
    17a2:	4659      	mov	r1, fp
    17a4:	9b02      	ldr	r3, [sp, #8]
    17a6:	4798      	blx	r3
    17a8:	2800      	cmp	r0, #0
    17aa:	f2c0 8355 	blt.w	1e58 <cbvprintf+0x6d8>
    17ae:	3501      	adds	r5, #1
			break;
    17b0:	e210      	b.n	1bd4 <cbvprintf+0x454>
		} state = {
    17b2:	2218      	movs	r2, #24
    17b4:	2100      	movs	r1, #0
    17b6:	a80a      	add	r0, sp, #40	; 0x28
    17b8:	f017 fd51 	bl	1925e <memset>
	if (*sp == '%') {
    17bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    17c0:	2b25      	cmp	r3, #37	; 0x25
    17c2:	d078      	beq.n	18b6 <cbvprintf+0x136>
    17c4:	2200      	movs	r2, #0
    17c6:	4694      	mov	ip, r2
    17c8:	4616      	mov	r6, r2
    17ca:	4696      	mov	lr, r2
    17cc:	4610      	mov	r0, r2
    17ce:	4639      	mov	r1, r7
		switch (*sp) {
    17d0:	f817 3b01 	ldrb.w	r3, [r7], #1
    17d4:	2b2b      	cmp	r3, #43	; 0x2b
    17d6:	f000 809d 	beq.w	1914 <cbvprintf+0x194>
    17da:	f200 8094 	bhi.w	1906 <cbvprintf+0x186>
    17de:	2b20      	cmp	r3, #32
    17e0:	f000 809b 	beq.w	191a <cbvprintf+0x19a>
    17e4:	2b23      	cmp	r3, #35	; 0x23
    17e6:	f000 809a 	beq.w	191e <cbvprintf+0x19e>
    17ea:	b128      	cbz	r0, 17f8 <cbvprintf+0x78>
    17ec:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    17f0:	f040 0004 	orr.w	r0, r0, #4
    17f4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    17f8:	f1be 0f00 	cmp.w	lr, #0
    17fc:	d005      	beq.n	180a <cbvprintf+0x8a>
    17fe:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1802:	f040 0008 	orr.w	r0, r0, #8
    1806:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    180a:	b12e      	cbz	r6, 1818 <cbvprintf+0x98>
    180c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1810:	f040 0010 	orr.w	r0, r0, #16
    1814:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1818:	f1bc 0f00 	cmp.w	ip, #0
    181c:	d005      	beq.n	182a <cbvprintf+0xaa>
    181e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1822:	f040 0020 	orr.w	r0, r0, #32
    1826:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    182a:	b12a      	cbz	r2, 1838 <cbvprintf+0xb8>
    182c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1834:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1838:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    183c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1840:	2844      	cmp	r0, #68	; 0x44
    1842:	d103      	bne.n	184c <cbvprintf+0xcc>
		conv->flag_zero = false;
    1844:	f36f 1286 	bfc	r2, #6, #1
    1848:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    184c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1850:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1856:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    185a:	d17b      	bne.n	1954 <cbvprintf+0x1d4>
		conv->width_star = true;
    185c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1860:	1c4b      	adds	r3, r1, #1
    1862:	f042 0201 	orr.w	r2, r2, #1
    1866:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    186a:	781a      	ldrb	r2, [r3, #0]
    186c:	2a2e      	cmp	r2, #46	; 0x2e
    186e:	bf0c      	ite	eq
    1870:	2101      	moveq	r1, #1
    1872:	2100      	movne	r1, #0
    1874:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1878:	f361 0241 	bfi	r2, r1, #1, #1
    187c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1880:	d174      	bne.n	196c <cbvprintf+0x1ec>
	if (*sp == '*') {
    1882:	785a      	ldrb	r2, [r3, #1]
    1884:	2a2a      	cmp	r2, #42	; 0x2a
    1886:	d06a      	beq.n	195e <cbvprintf+0x1de>
	size_t val = 0;
    1888:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    188a:	260a      	movs	r6, #10
    188c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    188e:	4618      	mov	r0, r3
    1890:	f810 2b01 	ldrb.w	r2, [r0], #1
    1894:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1898:	2f09      	cmp	r7, #9
    189a:	f240 808e 	bls.w	19ba <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    189e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    18a2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    18a4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    18a8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    18ac:	f361 0241 	bfi	r2, r1, #1, #1
    18b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    18b4:	e05a      	b.n	196c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    18b6:	f10a 0702 	add.w	r7, sl, #2
    18ba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    18be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    18c2:	07d9      	lsls	r1, r3, #31
    18c4:	f140 8149 	bpl.w	1b5a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    18c8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    18cc:	f1b9 0f00 	cmp.w	r9, #0
    18d0:	da07      	bge.n	18e2 <cbvprintf+0x162>
				conv->flag_dash = true;
    18d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    18d6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    18da:	f042 0204 	orr.w	r2, r2, #4
    18de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    18e2:	075a      	lsls	r2, r3, #29
    18e4:	f140 8142 	bpl.w	1b6c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    18e8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    18ec:	f1b8 0f00 	cmp.w	r8, #0
    18f0:	f280 8141 	bge.w	1b76 <cbvprintf+0x3f6>
				conv->prec_present = false;
    18f4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    18f8:	f36f 0341 	bfc	r3, #1, #1
    18fc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1900:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1904:	e137      	b.n	1b76 <cbvprintf+0x3f6>
		switch (*sp) {
    1906:	2b2d      	cmp	r3, #45	; 0x2d
    1908:	d00c      	beq.n	1924 <cbvprintf+0x1a4>
    190a:	2b30      	cmp	r3, #48	; 0x30
    190c:	f47f af6d 	bne.w	17ea <cbvprintf+0x6a>
			conv->flag_zero = true;
    1910:	2201      	movs	r2, #1
	} while (loop);
    1912:	e75c      	b.n	17ce <cbvprintf+0x4e>
			conv->flag_plus = true;
    1914:	f04f 0e01 	mov.w	lr, #1
    1918:	e759      	b.n	17ce <cbvprintf+0x4e>
			conv->flag_space = true;
    191a:	2601      	movs	r6, #1
    191c:	e757      	b.n	17ce <cbvprintf+0x4e>
			conv->flag_hash = true;
    191e:	f04f 0c01 	mov.w	ip, #1
    1922:	e754      	b.n	17ce <cbvprintf+0x4e>
		switch (*sp) {
    1924:	2001      	movs	r0, #1
    1926:	e752      	b.n	17ce <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1928:	4633      	mov	r3, r6
    192a:	fb0c 0202 	mla	r2, ip, r2, r0
    192e:	3a30      	subs	r2, #48	; 0x30
    1930:	461e      	mov	r6, r3
    1932:	f816 0b01 	ldrb.w	r0, [r6], #1
    1936:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    193a:	2f09      	cmp	r7, #9
    193c:	d9f4      	bls.n	1928 <cbvprintf+0x1a8>
	if (sp != wp) {
    193e:	4299      	cmp	r1, r3
    1940:	d093      	beq.n	186a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1942:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1946:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1948:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    194a:	f362 0141 	bfi	r1, r2, #1, #1
    194e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1952:	e78a      	b.n	186a <cbvprintf+0xea>
    1954:	460b      	mov	r3, r1
	size_t val = 0;
    1956:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1958:	f04f 0c0a 	mov.w	ip, #10
    195c:	e7e8      	b.n	1930 <cbvprintf+0x1b0>
		conv->prec_star = true;
    195e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1962:	3302      	adds	r3, #2
		conv->prec_star = true;
    1964:	f042 0204 	orr.w	r2, r2, #4
    1968:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    196c:	461f      	mov	r7, r3
    196e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1972:	2a6c      	cmp	r2, #108	; 0x6c
    1974:	d041      	beq.n	19fa <cbvprintf+0x27a>
    1976:	d825      	bhi.n	19c4 <cbvprintf+0x244>
    1978:	2a68      	cmp	r2, #104	; 0x68
    197a:	d02b      	beq.n	19d4 <cbvprintf+0x254>
    197c:	2a6a      	cmp	r2, #106	; 0x6a
    197e:	d046      	beq.n	1a0e <cbvprintf+0x28e>
    1980:	2a4c      	cmp	r2, #76	; 0x4c
    1982:	d04c      	beq.n	1a1e <cbvprintf+0x29e>
    1984:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1986:	f817 2b01 	ldrb.w	r2, [r7], #1
    198a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    198e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1990:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1994:	f200 80d9 	bhi.w	1b4a <cbvprintf+0x3ca>
    1998:	2a57      	cmp	r2, #87	; 0x57
    199a:	d84d      	bhi.n	1a38 <cbvprintf+0x2b8>
    199c:	2a41      	cmp	r2, #65	; 0x41
    199e:	d003      	beq.n	19a8 <cbvprintf+0x228>
    19a0:	3a45      	subs	r2, #69	; 0x45
    19a2:	2a02      	cmp	r2, #2
    19a4:	f200 80d1 	bhi.w	1b4a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    19a8:	2204      	movs	r2, #4
    19aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    19ae:	f362 0302 	bfi	r3, r2, #0, #3
    19b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    19b6:	2301      	movs	r3, #1
			break;
    19b8:	e09e      	b.n	1af8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    19ba:	fb06 2101 	mla	r1, r6, r1, r2
    19be:	4603      	mov	r3, r0
    19c0:	3930      	subs	r1, #48	; 0x30
    19c2:	e764      	b.n	188e <cbvprintf+0x10e>
	switch (*sp) {
    19c4:	2a74      	cmp	r2, #116	; 0x74
    19c6:	d026      	beq.n	1a16 <cbvprintf+0x296>
    19c8:	2a7a      	cmp	r2, #122	; 0x7a
    19ca:	d1db      	bne.n	1984 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    19cc:	2206      	movs	r2, #6
    19ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    19d2:	e00d      	b.n	19f0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    19d4:	785a      	ldrb	r2, [r3, #1]
    19d6:	2a68      	cmp	r2, #104	; 0x68
    19d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    19dc:	d106      	bne.n	19ec <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    19de:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    19e0:	f361 02c6 	bfi	r2, r1, #3, #4
    19e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    19e8:	1c9f      	adds	r7, r3, #2
    19ea:	e7cc      	b.n	1986 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    19ec:	4613      	mov	r3, r2
    19ee:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    19f0:	f362 03c6 	bfi	r3, r2, #3, #4
    19f4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    19f8:	e7c5      	b.n	1986 <cbvprintf+0x206>
		if (*++sp == 'l') {
    19fa:	785a      	ldrb	r2, [r3, #1]
    19fc:	2a6c      	cmp	r2, #108	; 0x6c
    19fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a02:	d101      	bne.n	1a08 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1a04:	2104      	movs	r1, #4
    1a06:	e7eb      	b.n	19e0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1a08:	4613      	mov	r3, r2
    1a0a:	2203      	movs	r2, #3
    1a0c:	e7f0      	b.n	19f0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1a0e:	2205      	movs	r2, #5
    1a10:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a14:	e7ec      	b.n	19f0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1a16:	2207      	movs	r2, #7
    1a18:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a1c:	e7e8      	b.n	19f0 <cbvprintf+0x270>
		conv->unsupported = true;
    1a1e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1a22:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1a26:	f023 0302 	bic.w	r3, r3, #2
    1a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1a2e:	f043 0302 	orr.w	r3, r3, #2
    1a32:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1a36:	e7a6      	b.n	1986 <cbvprintf+0x206>
    1a38:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1a3c:	2920      	cmp	r1, #32
    1a3e:	f200 8084 	bhi.w	1b4a <cbvprintf+0x3ca>
    1a42:	a001      	add	r0, pc, #4	; (adr r0, 1a48 <cbvprintf+0x2c8>)
    1a44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1a48:	00001b0d 	.word	0x00001b0d
    1a4c:	00001b4b 	.word	0x00001b4b
    1a50:	00001b4b 	.word	0x00001b4b
    1a54:	00001b4b 	.word	0x00001b4b
    1a58:	00001b4b 	.word	0x00001b4b
    1a5c:	00001b4b 	.word	0x00001b4b
    1a60:	00001b4b 	.word	0x00001b4b
    1a64:	00001b4b 	.word	0x00001b4b
    1a68:	00001b4b 	.word	0x00001b4b
    1a6c:	000019a9 	.word	0x000019a9
    1a70:	00001b4b 	.word	0x00001b4b
    1a74:	00001b0d 	.word	0x00001b0d
    1a78:	00001acd 	.word	0x00001acd
    1a7c:	000019a9 	.word	0x000019a9
    1a80:	000019a9 	.word	0x000019a9
    1a84:	000019a9 	.word	0x000019a9
    1a88:	00001b4b 	.word	0x00001b4b
    1a8c:	00001acd 	.word	0x00001acd
    1a90:	00001b4b 	.word	0x00001b4b
    1a94:	00001b4b 	.word	0x00001b4b
    1a98:	00001b4b 	.word	0x00001b4b
    1a9c:	00001b4b 	.word	0x00001b4b
    1aa0:	00001b15 	.word	0x00001b15
    1aa4:	00001b0d 	.word	0x00001b0d
    1aa8:	00001b31 	.word	0x00001b31
    1aac:	00001b4b 	.word	0x00001b4b
    1ab0:	00001b4b 	.word	0x00001b4b
    1ab4:	00001b31 	.word	0x00001b31
    1ab8:	00001b4b 	.word	0x00001b4b
    1abc:	00001b0d 	.word	0x00001b0d
    1ac0:	00001b4b 	.word	0x00001b4b
    1ac4:	00001b4b 	.word	0x00001b4b
    1ac8:	00001b0d 	.word	0x00001b0d
		conv->specifier_cat = SPECIFIER_SINT;
    1acc:	2001      	movs	r0, #1
    1ace:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ad2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1ad6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ada:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1adc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1ae0:	bf02      	ittt	eq
    1ae2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1ae6:	f041 0101 	orreq.w	r1, r1, #1
    1aea:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1aee:	2a63      	cmp	r2, #99	; 0x63
    1af0:	d131      	bne.n	1b56 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1af2:	3b00      	subs	r3, #0
    1af4:	bf18      	it	ne
    1af6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1af8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1afc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1b00:	430b      	orrs	r3, r1
    1b02:	f363 0241 	bfi	r2, r3, #1, #1
    1b06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1b0a:	e6d8      	b.n	18be <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1b0c:	2002      	movs	r0, #2
    1b0e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1b12:	e7de      	b.n	1ad2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1b14:	2103      	movs	r1, #3
    1b16:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1b1e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1b22:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b26:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1b28:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b2c:	4143      	adcs	r3, r0
    1b2e:	e7e3      	b.n	1af8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1b30:	2103      	movs	r1, #3
    1b32:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1b36:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1b3a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1b3e:	bf14      	ite	ne
    1b40:	2301      	movne	r3, #1
    1b42:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    1b44:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1b48:	e7d6      	b.n	1af8 <cbvprintf+0x378>
		conv->invalid = true;
    1b4a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1b4e:	f043 0301 	orr.w	r3, r3, #1
    1b52:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1b56:	2300      	movs	r3, #0
    1b58:	e7ce      	b.n	1af8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1b5a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1b5e:	2a00      	cmp	r2, #0
		int width = -1;
    1b60:	bfac      	ite	ge
    1b62:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
    1b66:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    1b6a:	e6ba      	b.n	18e2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1b6c:	079b      	lsls	r3, r3, #30
    1b6e:	f57f aec7 	bpl.w	1900 <cbvprintf+0x180>
			precision = conv->prec_value;
    1b72:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    1b76:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1b78:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1b7c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    1b80:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    1b84:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1b88:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1b8a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1b8e:	d136      	bne.n	1bfe <cbvprintf+0x47e>
			switch (length_mod) {
    1b90:	1ed3      	subs	r3, r2, #3
    1b92:	2b04      	cmp	r3, #4
    1b94:	d820      	bhi.n	1bd8 <cbvprintf+0x458>
    1b96:	e8df f003 	tbb	[pc, r3]
    1b9a:	0703      	.short	0x0703
    1b9c:	1f07      	.short	0x1f07
    1b9e:	1f          	.byte	0x1f
    1b9f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1ba0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1ba4:	17c1      	asrs	r1, r0, #31
    1ba6:	e004      	b.n	1bb2 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1ba8:	3407      	adds	r4, #7
    1baa:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1bae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1bb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1bb6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1bba:	f013 0603 	ands.w	r6, r3, #3
    1bbe:	d054      	beq.n	1c6a <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1bc0:	463b      	mov	r3, r7
    1bc2:	4652      	mov	r2, sl
    1bc4:	4659      	mov	r1, fp
    1bc6:	9802      	ldr	r0, [sp, #8]
    1bc8:	f016 f924 	bl	17e14 <outs>
    1bcc:	2800      	cmp	r0, #0
    1bce:	f2c0 8143 	blt.w	1e58 <cbvprintf+0x6d8>
    1bd2:	4405      	add	r5, r0
			continue;
    1bd4:	46ba      	mov	sl, r7
    1bd6:	e5db      	b.n	1790 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1bd8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1bdc:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1bde:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1be6:	d105      	bne.n	1bf4 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    1be8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1bec:	930a      	str	r3, [sp, #40]	; 0x28
    1bee:	2300      	movs	r3, #0
    1bf0:	930b      	str	r3, [sp, #44]	; 0x2c
    1bf2:	e7e0      	b.n	1bb6 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1bf4:	2a02      	cmp	r2, #2
    1bf6:	d1de      	bne.n	1bb6 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    1bf8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1bfc:	e7d2      	b.n	1ba4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1bfe:	2b02      	cmp	r3, #2
    1c00:	d123      	bne.n	1c4a <cbvprintf+0x4ca>
			switch (length_mod) {
    1c02:	1ed3      	subs	r3, r2, #3
    1c04:	2b04      	cmp	r3, #4
    1c06:	d813      	bhi.n	1c30 <cbvprintf+0x4b0>
    1c08:	e8df f003 	tbb	[pc, r3]
    1c0c:	120a0a03 	.word	0x120a0a03
    1c10:	12          	.byte	0x12
    1c11:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    1c12:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
    1c14:	6820      	ldr	r0, [r4, #0]
    1c16:	1d23      	adds	r3, r4, #4
    1c18:	900a      	str	r0, [sp, #40]	; 0x28
    1c1a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1c1c:	461c      	mov	r4, r3
    1c1e:	e7ca      	b.n	1bb6 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1c20:	3407      	adds	r4, #7
    1c22:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1c26:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1c2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1c2e:	e7f5      	b.n	1c1c <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1c30:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1c34:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1c36:	930a      	str	r3, [sp, #40]	; 0x28
    1c38:	f04f 0300 	mov.w	r3, #0
    1c3c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1c3e:	d0d3      	beq.n	1be8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1c40:	2a02      	cmp	r2, #2
    1c42:	d1b8      	bne.n	1bb6 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1c44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1c48:	e7d0      	b.n	1bec <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1c4a:	2b04      	cmp	r3, #4
    1c4c:	d107      	bne.n	1c5e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1c4e:	3407      	adds	r4, #7
    1c50:	f024 0407 	bic.w	r4, r4, #7
    1c54:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1c58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1c5c:	e7ab      	b.n	1bb6 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1c5e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1c60:	bf04      	itt	eq
    1c62:	f854 3b04 	ldreq.w	r3, [r4], #4
    1c66:	930a      	streq	r3, [sp, #40]	; 0x28
    1c68:	e7a5      	b.n	1bb6 <cbvprintf+0x436>
		switch (conv->specifier) {
    1c6a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1c6e:	2878      	cmp	r0, #120	; 0x78
    1c70:	d8b0      	bhi.n	1bd4 <cbvprintf+0x454>
    1c72:	2862      	cmp	r0, #98	; 0x62
    1c74:	d822      	bhi.n	1cbc <cbvprintf+0x53c>
    1c76:	2825      	cmp	r0, #37	; 0x25
    1c78:	f43f ad93 	beq.w	17a2 <cbvprintf+0x22>
    1c7c:	2858      	cmp	r0, #88	; 0x58
    1c7e:	d1a9      	bne.n	1bd4 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1c84:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1c88:	9300      	str	r3, [sp, #0]
    1c8a:	aa0c      	add	r2, sp, #48	; 0x30
    1c8c:	ab04      	add	r3, sp, #16
    1c8e:	f016 f876 	bl	17d7e <encode_uint>
    1c92:	4682      	mov	sl, r0
			if (precision >= 0) {
    1c94:	f1b8 0f00 	cmp.w	r8, #0
    1c98:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1c9c:	db0c      	blt.n	1cb8 <cbvprintf+0x538>
				conv->flag_zero = false;
    1c9e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1ca2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1ca6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1caa:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1cac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1cb0:	d902      	bls.n	1cb8 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1cb2:	eba8 0303 	sub.w	r3, r8, r3
    1cb6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1cb8:	4680      	mov	r8, r0
    1cba:	e03d      	b.n	1d38 <cbvprintf+0x5b8>
    1cbc:	3863      	subs	r0, #99	; 0x63
    1cbe:	2815      	cmp	r0, #21
    1cc0:	d888      	bhi.n	1bd4 <cbvprintf+0x454>
    1cc2:	a101      	add	r1, pc, #4	; (adr r1, 1cc8 <cbvprintf+0x548>)
    1cc4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1cc8:	00001d49 	.word	0x00001d49
    1ccc:	00001dad 	.word	0x00001dad
    1cd0:	00001bd5 	.word	0x00001bd5
    1cd4:	00001bd5 	.word	0x00001bd5
    1cd8:	00001bd5 	.word	0x00001bd5
    1cdc:	00001bd5 	.word	0x00001bd5
    1ce0:	00001dad 	.word	0x00001dad
    1ce4:	00001bd5 	.word	0x00001bd5
    1ce8:	00001bd5 	.word	0x00001bd5
    1cec:	00001bd5 	.word	0x00001bd5
    1cf0:	00001bd5 	.word	0x00001bd5
    1cf4:	00001e0b 	.word	0x00001e0b
    1cf8:	00001dd9 	.word	0x00001dd9
    1cfc:	00001ddd 	.word	0x00001ddd
    1d00:	00001bd5 	.word	0x00001bd5
    1d04:	00001bd5 	.word	0x00001bd5
    1d08:	00001d21 	.word	0x00001d21
    1d0c:	00001bd5 	.word	0x00001bd5
    1d10:	00001dd9 	.word	0x00001dd9
    1d14:	00001bd5 	.word	0x00001bd5
    1d18:	00001bd5 	.word	0x00001bd5
    1d1c:	00001dd9 	.word	0x00001dd9
			if (precision >= 0) {
    1d20:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1d24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1d28:	db0a      	blt.n	1d40 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1d2a:	4641      	mov	r1, r8
    1d2c:	4650      	mov	r0, sl
    1d2e:	f017 fa37 	bl	191a0 <strnlen>
		char sign = 0;
    1d32:	2600      	movs	r6, #0
			bpe = bps + len;
    1d34:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    1d38:	f1ba 0f00 	cmp.w	sl, #0
    1d3c:	d10c      	bne.n	1d58 <cbvprintf+0x5d8>
    1d3e:	e749      	b.n	1bd4 <cbvprintf+0x454>
				len = strlen(bps);
    1d40:	4650      	mov	r0, sl
    1d42:	f017 fa26 	bl	19192 <strlen>
    1d46:	e7f4      	b.n	1d32 <cbvprintf+0x5b2>
			break;
    1d48:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    1d4c:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1d50:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    1d54:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1d58:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1d5c:	b106      	cbz	r6, 1d60 <cbvprintf+0x5e0>
			nj_len += 1U;
    1d5e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1d60:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1d64:	06d0      	lsls	r0, r2, #27
    1d66:	d56b      	bpl.n	1e40 <cbvprintf+0x6c0>
			nj_len += 2U;
    1d68:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1d6a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1d6c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1d6e:	bf48      	it	mi
    1d70:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1d72:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1d74:	bf48      	it	mi
    1d76:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1d78:	f1b9 0f00 	cmp.w	r9, #0
    1d7c:	dd79      	ble.n	1e72 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1d7e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1d82:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1d86:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1d8a:	9303      	str	r3, [sp, #12]
    1d8c:	0753      	lsls	r3, r2, #29
    1d8e:	d470      	bmi.n	1e72 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1d90:	0650      	lsls	r0, r2, #25
    1d92:	d564      	bpl.n	1e5e <cbvprintf+0x6de>
					if (sign != 0) {
    1d94:	b146      	cbz	r6, 1da8 <cbvprintf+0x628>
						OUTC(sign);
    1d96:	4659      	mov	r1, fp
    1d98:	4630      	mov	r0, r6
    1d9a:	9b02      	ldr	r3, [sp, #8]
    1d9c:	4798      	blx	r3
    1d9e:	2800      	cmp	r0, #0
    1da0:	db5a      	blt.n	1e58 <cbvprintf+0x6d8>
						sign = 0;
    1da2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1da4:	3501      	adds	r5, #1
						sign = 0;
    1da6:	461e      	mov	r6, r3
					pad = '0';
    1da8:	2330      	movs	r3, #48	; 0x30
    1daa:	e059      	b.n	1e60 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1dac:	071e      	lsls	r6, r3, #28
    1dae:	d411      	bmi.n	1dd4 <cbvprintf+0x654>
				sign = ' ';
    1db0:	f013 0610 	ands.w	r6, r3, #16
    1db4:	bf18      	it	ne
    1db6:	2620      	movne	r6, #32
			if (value->sint < 0) {
    1db8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    1dbc:	2a00      	cmp	r2, #0
    1dbe:	f173 0100 	sbcs.w	r1, r3, #0
    1dc2:	f6bf af5d 	bge.w	1c80 <cbvprintf+0x500>
				value->uint = (uint_value_type)-value->sint;
    1dc6:	4252      	negs	r2, r2
    1dc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    1dcc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    1dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1dd2:	e755      	b.n	1c80 <cbvprintf+0x500>
				sign = '+';
    1dd4:	262b      	movs	r6, #43	; 0x2b
    1dd6:	e7ef      	b.n	1db8 <cbvprintf+0x638>
		switch (conv->specifier) {
    1dd8:	2600      	movs	r6, #0
    1dda:	e751      	b.n	1c80 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1ddc:	980a      	ldr	r0, [sp, #40]	; 0x28
    1dde:	b348      	cbz	r0, 1e34 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1de0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1de4:	9300      	str	r3, [sp, #0]
    1de6:	2100      	movs	r1, #0
    1de8:	ab04      	add	r3, sp, #16
    1dea:	aa0c      	add	r2, sp, #48	; 0x30
    1dec:	f015 ffc7 	bl	17d7e <encode_uint>
				conv->altform_0c = true;
    1df0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1df4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1df6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1dfa:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1dfe:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    1e02:	2600      	movs	r6, #0
				conv->altform_0c = true;
    1e04:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1e08:	e744      	b.n	1c94 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1e0c:	2a07      	cmp	r2, #7
    1e0e:	f63f aee1 	bhi.w	1bd4 <cbvprintf+0x454>
    1e12:	e8df f002 	tbb	[pc, r2]
    1e16:	040d      	.short	0x040d
    1e18:	08080d06 	.word	0x08080d06
    1e1c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1e1e:	701d      	strb	r5, [r3, #0]
		break;
    1e20:	e6d8      	b.n	1bd4 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1e22:	801d      	strh	r5, [r3, #0]
		break;
    1e24:	e6d6      	b.n	1bd4 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1e26:	4628      	mov	r0, r5
    1e28:	17e9      	asrs	r1, r5, #31
    1e2a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1e2e:	e6d1      	b.n	1bd4 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1e30:	601d      	str	r5, [r3, #0]
		break;
    1e32:	e6cf      	b.n	1bd4 <cbvprintf+0x454>
			bpe = bps + 5;
    1e34:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1efc <cbvprintf+0x77c>
    1e38:	4606      	mov	r6, r0
			bps = "(nil)";
    1e3a:	f1a8 0a05 	sub.w	sl, r8, #5
    1e3e:	e78b      	b.n	1d58 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1e40:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1e42:	bf48      	it	mi
    1e44:	3301      	addmi	r3, #1
    1e46:	e790      	b.n	1d6a <cbvprintf+0x5ea>
					OUTC(pad);
    1e48:	4618      	mov	r0, r3
    1e4a:	9303      	str	r3, [sp, #12]
    1e4c:	4659      	mov	r1, fp
    1e4e:	9b02      	ldr	r3, [sp, #8]
    1e50:	4798      	blx	r3
    1e52:	2800      	cmp	r0, #0
    1e54:	9b03      	ldr	r3, [sp, #12]
    1e56:	da04      	bge.n	1e62 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    1e58:	b011      	add	sp, #68	; 0x44
    1e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1e5e:	2320      	movs	r3, #32
    1e60:	444d      	add	r5, r9
    1e62:	464a      	mov	r2, r9
				while (width-- > 0) {
    1e64:	2a00      	cmp	r2, #0
    1e66:	eba5 0109 	sub.w	r1, r5, r9
    1e6a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1e6e:	dceb      	bgt.n	1e48 <cbvprintf+0x6c8>
    1e70:	460d      	mov	r5, r1
		if (sign != 0) {
    1e72:	b136      	cbz	r6, 1e82 <cbvprintf+0x702>
			OUTC(sign);
    1e74:	4659      	mov	r1, fp
    1e76:	4630      	mov	r0, r6
    1e78:	9b02      	ldr	r3, [sp, #8]
    1e7a:	4798      	blx	r3
    1e7c:	2800      	cmp	r0, #0
    1e7e:	dbeb      	blt.n	1e58 <cbvprintf+0x6d8>
    1e80:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1e82:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1e86:	06d9      	lsls	r1, r3, #27
    1e88:	d401      	bmi.n	1e8e <cbvprintf+0x70e>
    1e8a:	071a      	lsls	r2, r3, #28
    1e8c:	d506      	bpl.n	1e9c <cbvprintf+0x71c>
				OUTC('0');
    1e8e:	4659      	mov	r1, fp
    1e90:	2030      	movs	r0, #48	; 0x30
    1e92:	9b02      	ldr	r3, [sp, #8]
    1e94:	4798      	blx	r3
    1e96:	2800      	cmp	r0, #0
    1e98:	dbde      	blt.n	1e58 <cbvprintf+0x6d8>
    1e9a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1e9c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ea0:	06db      	lsls	r3, r3, #27
    1ea2:	d507      	bpl.n	1eb4 <cbvprintf+0x734>
				OUTC(conv->specifier);
    1ea4:	4659      	mov	r1, fp
    1ea6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1eaa:	9b02      	ldr	r3, [sp, #8]
    1eac:	4798      	blx	r3
    1eae:	2800      	cmp	r0, #0
    1eb0:	dbd2      	blt.n	1e58 <cbvprintf+0x6d8>
    1eb2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1eb4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1eb6:	442e      	add	r6, r5
    1eb8:	1b73      	subs	r3, r6, r5
    1eba:	2b00      	cmp	r3, #0
    1ebc:	dc16      	bgt.n	1eec <cbvprintf+0x76c>
			OUTS(bps, bpe);
    1ebe:	4643      	mov	r3, r8
    1ec0:	4652      	mov	r2, sl
    1ec2:	4659      	mov	r1, fp
    1ec4:	9802      	ldr	r0, [sp, #8]
    1ec6:	f015 ffa5 	bl	17e14 <outs>
    1eca:	2800      	cmp	r0, #0
    1ecc:	dbc4      	blt.n	1e58 <cbvprintf+0x6d8>
    1ece:	4405      	add	r5, r0
		while (width > 0) {
    1ed0:	44a9      	add	r9, r5
    1ed2:	eba9 0305 	sub.w	r3, r9, r5
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	f77f ae7c 	ble.w	1bd4 <cbvprintf+0x454>
			OUTC(' ');
    1edc:	4659      	mov	r1, fp
    1ede:	2020      	movs	r0, #32
    1ee0:	9b02      	ldr	r3, [sp, #8]
    1ee2:	4798      	blx	r3
    1ee4:	2800      	cmp	r0, #0
    1ee6:	dbb7      	blt.n	1e58 <cbvprintf+0x6d8>
    1ee8:	3501      	adds	r5, #1
			--width;
    1eea:	e7f2      	b.n	1ed2 <cbvprintf+0x752>
				OUTC('0');
    1eec:	4659      	mov	r1, fp
    1eee:	2030      	movs	r0, #48	; 0x30
    1ef0:	9b02      	ldr	r3, [sp, #8]
    1ef2:	4798      	blx	r3
    1ef4:	2800      	cmp	r0, #0
    1ef6:	dbaf      	blt.n	1e58 <cbvprintf+0x6d8>
    1ef8:	3501      	adds	r5, #1
    1efa:	e7dd      	b.n	1eb8 <cbvprintf+0x738>
    1efc:	00024481 	.word	0x00024481

00001f00 <check_erratum19>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1f00:	4b13      	ldr	r3, [pc, #76]	; (1f50 <check_erratum19+0x50>)
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	!defined(CONFIG_NRF5340_CPUAPP_ERRATUM19)

static int check_erratum19(const struct device *arg)
{
    1f02:	b510      	push	{r4, lr}
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	2b07      	cmp	r3, #7
    1f08:	d120      	bne.n	1f4c <check_erratum19+0x4c>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1f0a:	4b12      	ldr	r3, [pc, #72]	; (1f54 <check_erratum19+0x54>)
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	3b02      	subs	r3, #2
    1f10:	2b03      	cmp	r3, #3
    1f12:	d81b      	bhi.n	1f4c <check_erratum19+0x4c>
	ARG_UNUSED(arg);
	if (nrf53_errata_19()) {
    1f14:	4a10      	ldr	r2, [pc, #64]	; (1f58 <check_erratum19+0x58>)
    1f16:	5cd3      	ldrb	r3, [r2, r3]
    1f18:	b1c3      	cbz	r3, 1f4c <check_erratum19+0x4c>
    1f1a:	4b10      	ldr	r3, [pc, #64]	; (1f5c <check_erratum19+0x5c>)
    1f1c:	4c10      	ldr	r4, [pc, #64]	; (1f60 <check_erratum19+0x60>)
		LOG_ERR("This device is affected by nRF53 Erratum 19,");
    1f1e:	4811      	ldr	r0, [pc, #68]	; (1f64 <check_erratum19+0x64>)
    1f20:	1ae4      	subs	r4, r4, r3
    1f22:	08e4      	lsrs	r4, r4, #3
    1f24:	01a4      	lsls	r4, r4, #6
    1f26:	f044 0401 	orr.w	r4, r4, #1
    1f2a:	4621      	mov	r1, r4
    1f2c:	f015 ffce 	bl	17ecc <log_0>
		LOG_ERR("but workarounds have not been enabled.");
    1f30:	4621      	mov	r1, r4
    1f32:	480d      	ldr	r0, [pc, #52]	; (1f68 <check_erratum19+0x68>)
    1f34:	f015 ffca 	bl	17ecc <log_0>
		LOG_ERR("See CONFIG_NRF5340_CPUAPP_ERRATUM19.");
    1f38:	4621      	mov	r1, r4
    1f3a:	480c      	ldr	r0, [pc, #48]	; (1f6c <check_erratum19+0x6c>)
    1f3c:	f015 ffc6 	bl	17ecc <log_0>
		k_panic();
    1f40:	4040      	eors	r0, r0
    1f42:	f380 8811 	msr	BASEPRI, r0
    1f46:	f04f 0004 	mov.w	r0, #4
    1f4a:	df02      	svc	2
	}

	return 0;
}
    1f4c:	2000      	movs	r0, #0
    1f4e:	bd10      	pop	{r4, pc}
    1f50:	00ff0130 	.word	0x00ff0130
    1f54:	00ff0134 	.word	0x00ff0134
    1f58:	000244ff 	.word	0x000244ff
    1f5c:	000232ec 	.word	0x000232ec
    1f60:	000233d4 	.word	0x000233d4
    1f64:	00024482 	.word	0x00024482
    1f68:	000244af 	.word	0x000244af
    1f6c:	000244d6 	.word	0x000244d6

00001f70 <nrf_gpio_pin_mcu_select.constprop.0>:
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    1f70:	4b09      	ldr	r3, [pc, #36]	; (1f98 <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
    1f72:	490a      	ldr	r1, [pc, #40]	; (1f9c <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f74:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    1f78:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1f7a:	2801      	cmp	r0, #1
    1f7c:	bf08      	it	eq
    1f7e:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1f80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1f88:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1f8c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    1f90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop
    1f98:	50842500 	.word	0x50842500
    1f9c:	50842800 	.word	0x50842800

00001fa0 <nordicsemi_nrf53_init>:
{
    1fa0:	b570      	push	{r4, r5, r6, lr}
    1fa2:	f04f 0320 	mov.w	r3, #32
    1fa6:	f3ef 8611 	mrs	r6, BASEPRI
    1faa:	f383 8811 	msr	BASEPRI, r3
    1fae:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1fb2:	2401      	movs	r4, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1fb4:	4d0b      	ldr	r5, [pc, #44]	; (1fe4 <nordicsemi_nrf53_init+0x44>)
    1fb6:	4b0c      	ldr	r3, [pc, #48]	; (1fe8 <nordicsemi_nrf53_init+0x48>)
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1fb8:	2000      	movs	r0, #0
    1fba:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    1fbe:	f8c5 46d0 	str.w	r4, [r5, #1744]	; 0x6d0
    1fc2:	f7ff ffd5 	bl	1f70 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1fc6:	4620      	mov	r0, r4
    1fc8:	f7ff ffd2 	bl	1f70 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1fcc:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1fd0:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1fd4:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    1fd8:	f386 8811 	msr	BASEPRI, r6
    1fdc:	f3bf 8f6f 	isb	sy
}
    1fe0:	2000      	movs	r0, #0
    1fe2:	bd70      	pop	{r4, r5, r6, pc}
    1fe4:	50004000 	.word	0x50004000
    1fe8:	50001000 	.word	0x50001000

00001fec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1fec:	b148      	cbz	r0, 2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1fee:	4b05      	ldr	r3, [pc, #20]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    1ff0:	681a      	ldr	r2, [r3, #0]
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1ff4:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1ff8:	4b04      	ldr	r3, [pc, #16]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    delay_cycles(cycles);
    1ffa:	4350      	muls	r0, r2
    1ffc:	f043 0301 	orr.w	r3, r3, #1
    2000:	4718      	bx	r3
}
    2002:	4770      	bx	lr
    2004:	20000390 	.word	0x20000390
    2008:	000f4240 	.word	0x000f4240
    200c:	000234f0 	.word	0x000234f0

00002010 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2010:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2012:	2200      	movs	r2, #0
{
    2014:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2016:	490f      	ldr	r1, [pc, #60]	; (2054 <enable_logger+0x44>)
    2018:	480f      	ldr	r0, [pc, #60]	; (2058 <enable_logger+0x48>)
    201a:	f020 fe27 	bl	22c6c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    201e:	2200      	movs	r2, #0
    2020:	2300      	movs	r3, #0
    2022:	2400      	movs	r4, #0
    2024:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2028:	230e      	movs	r3, #14
    202a:	4d0c      	ldr	r5, [pc, #48]	; (205c <enable_logger+0x4c>)
    202c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2030:	f44f 7240 	mov.w	r2, #768	; 0x300
    2034:	4628      	mov	r0, r5
    2036:	e9cd 4401 	strd	r4, r4, [sp, #4]
    203a:	4b09      	ldr	r3, [pc, #36]	; (2060 <enable_logger+0x50>)
    203c:	4909      	ldr	r1, [pc, #36]	; (2064 <enable_logger+0x54>)
    203e:	9400      	str	r4, [sp, #0]
    2040:	f014 fdbe 	bl	16bc0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    2044:	4908      	ldr	r1, [pc, #32]	; (2068 <enable_logger+0x58>)
    2046:	4628      	mov	r0, r5
    2048:	f020 fd26 	bl	22a98 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    204c:	4620      	mov	r0, r4
    204e:	b009      	add	sp, #36	; 0x24
    2050:	bd30      	pop	{r4, r5, pc}
    2052:	bf00      	nop
    2054:	0000206d 	.word	0x0000206d
    2058:	200007e0 	.word	0x200007e0
    205c:	20000818 	.word	0x20000818
    2060:	00002455 	.word	0x00002455
    2064:	2002a188 	.word	0x2002a188
    2068:	00024503 	.word	0x00024503

0000206c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    206c:	4801      	ldr	r0, [pc, #4]	; (2074 <log_process_thread_timer_expiry_fn+0x8>)
    206e:	f014 bcd9 	b.w	16a24 <z_impl_k_sem_give>
    2072:	bf00      	nop
    2074:	20000680 	.word	0x20000680

00002078 <log_core_init>:
{
    2078:	b508      	push	{r3, lr}
		log_msg_pool_init();
    207a:	f000 fa49 	bl	2510 <log_msg_pool_init>
		log_list_init(&list);
    207e:	4809      	ldr	r0, [pc, #36]	; (20a4 <log_core_init+0x2c>)
    2080:	f015 fee1 	bl	17e46 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2084:	2304      	movs	r3, #4
    2086:	2228      	movs	r2, #40	; 0x28
    2088:	4907      	ldr	r1, [pc, #28]	; (20a8 <log_core_init+0x30>)
    208a:	4808      	ldr	r0, [pc, #32]	; (20ac <log_core_init+0x34>)
    208c:	f020 face 	bl	2262c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    2090:	4b07      	ldr	r3, [pc, #28]	; (20b0 <log_core_init+0x38>)
    2092:	4a08      	ldr	r2, [pc, #32]	; (20b4 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    2094:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    2098:	601a      	str	r2, [r3, #0]
}
    209a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    209e:	f000 bc7f 	b.w	29a0 <log_output_timestamp_freq_set>
    20a2:	bf00      	nop
    20a4:	200011e0 	.word	0x200011e0
    20a8:	2002d708 	.word	0x2002d708
    20ac:	200011e8 	.word	0x200011e8
    20b0:	2000015c 	.word	0x2000015c
    20b4:	00017e85 	.word	0x00017e85

000020b8 <dropped_notify>:
{
    20b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ba:	2500      	movs	r5, #0
    20bc:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <dropped_notify+0x38>)
    20be:	e8d3 7fef 	ldaex	r7, [r3]
    20c2:	e8c3 5fe2 	stlex	r2, r5, [r3]
    20c6:	2a00      	cmp	r2, #0
    20c8:	d1f9      	bne.n	20be <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    20ca:	4c0a      	ldr	r4, [pc, #40]	; (20f4 <dropped_notify+0x3c>)
    20cc:	4e0a      	ldr	r6, [pc, #40]	; (20f8 <dropped_notify+0x40>)
    20ce:	1b36      	subs	r6, r6, r4
    20d0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    20d2:	42b5      	cmp	r5, r6
    20d4:	db00      	blt.n	20d8 <dropped_notify+0x20>
}
    20d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    20d8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    20da:	795b      	ldrb	r3, [r3, #5]
    20dc:	b12b      	cbz	r3, 20ea <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    20de:	6823      	ldr	r3, [r4, #0]
    20e0:	68db      	ldr	r3, [r3, #12]
    20e2:	b113      	cbz	r3, 20ea <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    20e4:	4639      	mov	r1, r7
    20e6:	4620      	mov	r0, r4
    20e8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    20ea:	3501      	adds	r5, #1
    20ec:	3410      	adds	r4, #16
    20ee:	e7f0      	b.n	20d2 <dropped_notify+0x1a>
    20f0:	200011d8 	.word	0x200011d8
    20f4:	000233ec 	.word	0x000233ec
    20f8:	000233fc 	.word	0x000233fc

000020fc <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    20fc:	4b04      	ldr	r3, [pc, #16]	; (2110 <log_dropped+0x14>)
    20fe:	e8d3 2fef 	ldaex	r2, [r3]
    2102:	3201      	adds	r2, #1
    2104:	e8c3 2fe1 	stlex	r1, r2, [r3]
    2108:	2900      	cmp	r1, #0
    210a:	d1f8      	bne.n	20fe <log_dropped+0x2>
}
    210c:	4770      	bx	lr
    210e:	bf00      	nop
    2110:	200011d8 	.word	0x200011d8

00002114 <log_source_name_get>:
    2114:	4a04      	ldr	r2, [pc, #16]	; (2128 <log_source_name_get+0x14>)
    2116:	4b05      	ldr	r3, [pc, #20]	; (212c <log_source_name_get+0x18>)
    2118:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    211a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    211e:	bf34      	ite	cc
    2120:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2124:	2000      	movcs	r0, #0
}
    2126:	4770      	bx	lr
    2128:	000232ec 	.word	0x000232ec
    212c:	000233ec 	.word	0x000233ec

00002130 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2130:	4b09      	ldr	r3, [pc, #36]	; (2158 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    2132:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    2134:	1ac3      	subs	r3, r0, r3
    2136:	111b      	asrs	r3, r3, #4
    2138:	3301      	adds	r3, #1
{
    213a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    213c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    213e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    2140:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    2142:	4c06      	ldr	r4, [pc, #24]	; (215c <log_backend_enable+0x2c>)
    2144:	715a      	strb	r2, [r3, #5]
    2146:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    2148:	6019      	str	r1, [r3, #0]
    214a:	b912      	cbnz	r2, 2152 <log_backend_enable+0x22>
    214c:	4804      	ldr	r0, [pc, #16]	; (2160 <log_backend_enable+0x30>)
    214e:	f014 fc69 	bl	16a24 <z_impl_k_sem_give>
	backend_attached = true;
    2152:	2301      	movs	r3, #1
    2154:	7023      	strb	r3, [r4, #0]
}
    2156:	bd10      	pop	{r4, pc}
    2158:	000233ec 	.word	0x000233ec
    215c:	20029f64 	.word	0x20029f64
    2160:	20000680 	.word	0x20000680

00002164 <log_init>:
{
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	4b0f      	ldr	r3, [pc, #60]	; (21a4 <log_init+0x40>)
    2168:	e8d3 5fef 	ldaex	r5, [r3]
    216c:	1c6a      	adds	r2, r5, #1
    216e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    2172:	2900      	cmp	r1, #0
    2174:	d1f8      	bne.n	2168 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    2176:	b92d      	cbnz	r5, 2184 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    2178:	4c0b      	ldr	r4, [pc, #44]	; (21a8 <log_init+0x44>)
    217a:	4e0c      	ldr	r6, [pc, #48]	; (21ac <log_init+0x48>)
    217c:	1b36      	subs	r6, r6, r4
    217e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2180:	42b5      	cmp	r5, r6
    2182:	db00      	blt.n	2186 <log_init+0x22>
}
    2184:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2186:	7b23      	ldrb	r3, [r4, #12]
    2188:	b143      	cbz	r3, 219c <log_init+0x38>
			if (backend->api->init != NULL) {
    218a:	6823      	ldr	r3, [r4, #0]
    218c:	695b      	ldr	r3, [r3, #20]
    218e:	b103      	cbz	r3, 2192 <log_init+0x2e>
				backend->api->init();
    2190:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    2192:	2204      	movs	r2, #4
    2194:	2100      	movs	r1, #0
    2196:	4620      	mov	r0, r4
    2198:	f7ff ffca 	bl	2130 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    219c:	3501      	adds	r5, #1
    219e:	3410      	adds	r4, #16
    21a0:	e7ee      	b.n	2180 <log_init+0x1c>
    21a2:	bf00      	nop
    21a4:	200011dc 	.word	0x200011dc
    21a8:	000233ec 	.word	0x000233ec
    21ac:	000233fc 	.word	0x000233fc

000021b0 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    21b0:	4b14      	ldr	r3, [pc, #80]	; (2204 <log_strdup+0x54>)
{
    21b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    21b4:	4298      	cmp	r0, r3
{
    21b6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    21b8:	d302      	bcc.n	21c0 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    21ba:	4b13      	ldr	r3, [pc, #76]	; (2208 <log_strdup+0x58>)
    21bc:	4298      	cmp	r0, r3
    21be:	d31c      	bcc.n	21fa <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    21c0:	2200      	movs	r2, #0
    21c2:	2300      	movs	r3, #0
    21c4:	4811      	ldr	r0, [pc, #68]	; (220c <log_strdup+0x5c>)
    21c6:	a901      	add	r1, sp, #4
    21c8:	f013 ff3c 	bl	16044 <k_mem_slab_alloc>
	if (err != 0) {
    21cc:	4605      	mov	r5, r0
    21ce:	b9b8      	cbnz	r0, 2200 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    21d0:	2201      	movs	r2, #1
    21d2:	9b01      	ldr	r3, [sp, #4]
    21d4:	e8d3 1fef 	ldaex	r1, [r3]
    21d8:	e8c3 2fe0 	stlex	r0, r2, [r3]
    21dc:	2800      	cmp	r0, #0
    21de:	d1f9      	bne.n	21d4 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    21e0:	9801      	ldr	r0, [sp, #4]
    21e2:	4621      	mov	r1, r4
    21e4:	221f      	movs	r2, #31
    21e6:	3004      	adds	r0, #4
    21e8:	f016 ffc0 	bl	1916c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    21ec:	237e      	movs	r3, #126	; 0x7e
    21ee:	9c01      	ldr	r4, [sp, #4]
    21f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    21f4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    21f8:	3404      	adds	r4, #4
}
    21fa:	4620      	mov	r0, r4
    21fc:	b003      	add	sp, #12
    21fe:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2200:	4c03      	ldr	r4, [pc, #12]	; (2210 <log_strdup+0x60>)
    2202:	e7fa      	b.n	21fa <log_strdup+0x4a>
    2204:	00022fc0 	.word	0x00022fc0
    2208:	00027f10 	.word	0x00027f10
    220c:	200011e8 	.word	0x200011e8
    2210:	0002450b 	.word	0x0002450b

00002214 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2214:	b148      	cbz	r0, 222a <log_is_strdup+0x16>
    2216:	4b05      	ldr	r3, [pc, #20]	; (222c <log_is_strdup+0x18>)
    2218:	4298      	cmp	r0, r3
    221a:	d305      	bcc.n	2228 <log_is_strdup+0x14>
    221c:	33a0      	adds	r3, #160	; 0xa0
    221e:	4298      	cmp	r0, r3
    2220:	bf2c      	ite	cs
    2222:	2000      	movcs	r0, #0
    2224:	2001      	movcc	r0, #1
    2226:	4770      	bx	lr
    2228:	2000      	movs	r0, #0
}
    222a:	4770      	bx	lr
    222c:	2002d708 	.word	0x2002d708

00002230 <z_impl_log_process>:
{
    2230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2234:	4b4a      	ldr	r3, [pc, #296]	; (2360 <z_impl_log_process+0x130>)
{
    2236:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2238:	781b      	ldrb	r3, [r3, #0]
{
    223a:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    223c:	b903      	cbnz	r3, 2240 <z_impl_log_process+0x10>
    223e:	b340      	cbz	r0, 2292 <z_impl_log_process+0x62>
	__asm__ volatile(
    2240:	f04f 0320 	mov.w	r3, #32
    2244:	f3ef 8611 	mrs	r6, BASEPRI
    2248:	f383 8811 	msr	BASEPRI, r3
    224c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    2250:	4844      	ldr	r0, [pc, #272]	; (2364 <z_impl_log_process+0x134>)
    2252:	f015 fe08 	bl	17e66 <log_list_head_get>
    2256:	4605      	mov	r5, r0
	__asm__ volatile(
    2258:	f386 8811 	msr	BASEPRI, r6
    225c:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    2260:	b158      	cbz	r0, 227a <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2262:	4b41      	ldr	r3, [pc, #260]	; (2368 <z_impl_log_process+0x138>)
    2264:	e8d3 2fef 	ldaex	r2, [r3]
    2268:	3a01      	subs	r2, #1
    226a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    226e:	2900      	cmp	r1, #0
    2270:	d1f8      	bne.n	2264 <z_impl_log_process+0x34>
	if (!bypass) {
    2272:	b194      	cbz	r4, 229a <z_impl_log_process+0x6a>
	log_msg_put(msg);
    2274:	4628      	mov	r0, r5
    2276:	f015 ff0b 	bl	18090 <log_msg_put>
	if (!bypass && dropped_cnt) {
    227a:	b924      	cbnz	r4, 2286 <z_impl_log_process+0x56>
    227c:	4b3b      	ldr	r3, [pc, #236]	; (236c <z_impl_log_process+0x13c>)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	b10b      	cbz	r3, 2286 <z_impl_log_process+0x56>
		dropped_notify();
    2282:	f7ff ff19 	bl	20b8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2286:	4837      	ldr	r0, [pc, #220]	; (2364 <z_impl_log_process+0x134>)
    2288:	f015 fdeb 	bl	17e62 <log_list_head_peek>
    228c:	1e04      	subs	r4, r0, #0
    228e:	bf18      	it	ne
    2290:	2401      	movne	r4, #1
}
    2292:	4620      	mov	r0, r4
    2294:	b005      	add	sp, #20
    2296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    229a:	4b35      	ldr	r3, [pc, #212]	; (2370 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	b9cb      	cbnz	r3, 22d4 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    22a0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    22a2:	07db      	lsls	r3, r3, #31
    22a4:	d416      	bmi.n	22d4 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    22a6:	f015 ff02 	bl	180ae <log_msg_str_get>
    22aa:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    22ac:	4628      	mov	r0, r5
    22ae:	f015 fecd 	bl	1804c <log_msg_nargs_get>
    22b2:	4601      	mov	r1, r0
    22b4:	4640      	mov	r0, r8
    22b6:	f015 fde9 	bl	17e8c <z_log_get_s_mask>
    22ba:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    22bc:	4f2d      	ldr	r7, [pc, #180]	; (2374 <z_impl_log_process+0x144>)
    22be:	4b2e      	ldr	r3, [pc, #184]	; (2378 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    22c0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 2394 <z_impl_log_process+0x164>
    22c4:	1bdb      	subs	r3, r3, r7
    22c6:	08db      	lsrs	r3, r3, #3
    22c8:	9303      	str	r3, [sp, #12]
    22ca:	4b2c      	ldr	r3, [pc, #176]	; (237c <z_impl_log_process+0x14c>)
    22cc:	1bdb      	subs	r3, r3, r7
    22ce:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    22d2:	b936      	cbnz	r6, 22e2 <z_impl_log_process+0xb2>
    22d4:	4e2a      	ldr	r6, [pc, #168]	; (2380 <z_impl_log_process+0x150>)
    22d6:	4f2b      	ldr	r7, [pc, #172]	; (2384 <z_impl_log_process+0x154>)
    22d8:	f04f 0800 	mov.w	r8, #0
    22dc:	1bbf      	subs	r7, r7, r6
    22de:	113f      	asrs	r7, r7, #4
    22e0:	e03a      	b.n	2358 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    22e2:	fab6 f186 	clz	r1, r6
    22e6:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    22ea:	4649      	mov	r1, r9
    22ec:	4628      	mov	r0, r5
    22ee:	f015 feb0 	bl	18052 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    22f2:	4b25      	ldr	r3, [pc, #148]	; (2388 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    22f4:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    22f6:	4298      	cmp	r0, r3
    22f8:	d302      	bcc.n	2300 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    22fa:	4b24      	ldr	r3, [pc, #144]	; (238c <z_impl_log_process+0x15c>)
    22fc:	4298      	cmp	r0, r3
    22fe:	d31a      	bcc.n	2336 <z_impl_log_process+0x106>
    2300:	4608      	mov	r0, r1
    2302:	f7ff ff87 	bl	2214 <log_is_strdup>
    2306:	4602      	mov	r2, r0
    2308:	b9a8      	cbnz	r0, 2336 <z_impl_log_process+0x106>
    230a:	4b21      	ldr	r3, [pc, #132]	; (2390 <z_impl_log_process+0x160>)
    230c:	4299      	cmp	r1, r3
    230e:	d012      	beq.n	2336 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    2310:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2312:	9903      	ldr	r1, [sp, #12]
    2314:	f3c3 1389 	ubfx	r3, r3, #6, #10
    2318:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    231a:	bf38      	it	cc
    231c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2320:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2324:	f043 0301 	orr.w	r3, r3, #1
    2328:	f8ad 3000 	strh.w	r3, [sp]
    232c:	4649      	mov	r1, r9
    232e:	4643      	mov	r3, r8
    2330:	4658      	mov	r0, fp
    2332:	f015 fe05 	bl	17f40 <log_3>
		mask &= ~BIT(idx);
    2336:	2101      	movs	r1, #1
    2338:	fa01 f109 	lsl.w	r1, r1, r9
    233c:	ea26 0601 	bic.w	r6, r6, r1
    2340:	e7c7      	b.n	22d2 <z_impl_log_process+0xa2>
	return backend->cb->active;
    2342:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2344:	795b      	ldrb	r3, [r3, #5]
    2346:	b123      	cbz	r3, 2352 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    2348:	6833      	ldr	r3, [r6, #0]
    234a:	4629      	mov	r1, r5
    234c:	4630      	mov	r0, r6
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2352:	f108 0801 	add.w	r8, r8, #1
    2356:	3610      	adds	r6, #16
    2358:	45b8      	cmp	r8, r7
    235a:	dbf2      	blt.n	2342 <z_impl_log_process+0x112>
    235c:	e78a      	b.n	2274 <z_impl_log_process+0x44>
    235e:	bf00      	nop
    2360:	20029f64 	.word	0x20029f64
    2364:	200011e0 	.word	0x200011e0
    2368:	200011d4 	.word	0x200011d4
    236c:	200011d8 	.word	0x200011d8
    2370:	20029f65 	.word	0x20029f65
    2374:	000232ec 	.word	0x000232ec
    2378:	000233ec 	.word	0x000233ec
    237c:	0002338c 	.word	0x0002338c
    2380:	000233ec 	.word	0x000233ec
    2384:	000233fc 	.word	0x000233fc
    2388:	00022fc0 	.word	0x00022fc0
    238c:	00027f10 	.word	0x00027f10
    2390:	0002450b 	.word	0x0002450b
    2394:	00024525 	.word	0x00024525

00002398 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2398:	4b27      	ldr	r3, [pc, #156]	; (2438 <msg_finalize+0xa0>)
{
    239a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    239c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    239e:	8141      	strh	r1, [r0, #10]
{
    23a0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    23a2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    23a4:	4d25      	ldr	r5, [pc, #148]	; (243c <msg_finalize+0xa4>)
    23a6:	60e0      	str	r0, [r4, #12]
    23a8:	e8d5 3fef 	ldaex	r3, [r5]
    23ac:	3301      	adds	r3, #1
    23ae:	e8c5 3fe2 	stlex	r2, r3, [r5]
    23b2:	2a00      	cmp	r2, #0
    23b4:	d1f8      	bne.n	23a8 <msg_finalize+0x10>
	__asm__ volatile(
    23b6:	f04f 0320 	mov.w	r3, #32
    23ba:	f3ef 8611 	mrs	r6, BASEPRI
    23be:	f383 8811 	msr	BASEPRI, r3
    23c2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    23c6:	481e      	ldr	r0, [pc, #120]	; (2440 <msg_finalize+0xa8>)
    23c8:	4621      	mov	r1, r4
    23ca:	f015 fd40 	bl	17e4e <log_list_add_tail>
	__asm__ volatile(
    23ce:	f386 8811 	msr	BASEPRI, r6
    23d2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    23d6:	4b1b      	ldr	r3, [pc, #108]	; (2444 <msg_finalize+0xac>)
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	b183      	cbz	r3, 23fe <msg_finalize+0x66>
	__asm__ volatile(
    23dc:	f04f 0320 	mov.w	r3, #32
    23e0:	f3ef 8411 	mrs	r4, BASEPRI
    23e4:	f383 8811 	msr	BASEPRI, r3
    23e8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    23ec:	2000      	movs	r0, #0
    23ee:	f7ff ff1f 	bl	2230 <z_impl_log_process>
	__asm__ volatile(
    23f2:	f384 8811 	msr	BASEPRI, r4
    23f6:	f3bf 8f6f 	isb	sy
}
    23fa:	b002      	add	sp, #8
    23fc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    23fe:	4a12      	ldr	r2, [pc, #72]	; (2448 <msg_finalize+0xb0>)
    2400:	682b      	ldr	r3, [r5, #0]
    2402:	6812      	ldr	r2, [r2, #0]
    2404:	2a00      	cmp	r2, #0
    2406:	d0f8      	beq.n	23fa <msg_finalize+0x62>
    2408:	2b01      	cmp	r3, #1
    240a:	d10a      	bne.n	2422 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    240c:	2200      	movs	r2, #0
    240e:	2300      	movs	r3, #0
    2410:	480e      	ldr	r0, [pc, #56]	; (244c <msg_finalize+0xb4>)
    2412:	e9cd 2300 	strd	r2, r3, [sp]
    2416:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    241a:	2300      	movs	r3, #0
    241c:	f014 fe82 	bl	17124 <z_impl_k_timer_start>
    2420:	e7eb      	b.n	23fa <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2422:	2b0a      	cmp	r3, #10
    2424:	d1e9      	bne.n	23fa <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    2426:	4809      	ldr	r0, [pc, #36]	; (244c <msg_finalize+0xb4>)
    2428:	f020 fc2c 	bl	22c84 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    242c:	4808      	ldr	r0, [pc, #32]	; (2450 <msg_finalize+0xb8>)
}
    242e:	b002      	add	sp, #8
    2430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2434:	f014 baf6 	b.w	16a24 <z_impl_k_sem_give>
    2438:	2000015c 	.word	0x2000015c
    243c:	200011d4 	.word	0x200011d4
    2440:	200011e0 	.word	0x200011e0
    2444:	20029f65 	.word	0x20029f65
    2448:	20001204 	.word	0x20001204
    244c:	200007e0 	.word	0x200007e0
    2450:	20000680 	.word	0x20000680

00002454 <log_process_thread_func>:
{
    2454:	b510      	push	{r4, lr}
	log_init();
    2456:	f7ff fe85 	bl	2164 <log_init>
	return z_impl_k_current_get();
    245a:	f014 fadd 	bl	16a18 <z_impl_k_current_get>
	proc_tid = process_tid;
    245e:	4b0c      	ldr	r3, [pc, #48]	; (2490 <log_process_thread_func+0x3c>)
    2460:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2462:	b130      	cbz	r0, 2472 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2464:	4b0b      	ldr	r3, [pc, #44]	; (2494 <log_process_thread_func+0x40>)
	    process_tid &&
    2466:	681b      	ldr	r3, [r3, #0]
    2468:	2b09      	cmp	r3, #9
    246a:	dd02      	ble.n	2472 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    246c:	480a      	ldr	r0, [pc, #40]	; (2498 <log_process_thread_func+0x44>)
    246e:	f014 fad9 	bl	16a24 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2472:	4c09      	ldr	r4, [pc, #36]	; (2498 <log_process_thread_func+0x44>)
    2474:	2000      	movs	r0, #0
    2476:	f7ff fedb 	bl	2230 <z_impl_log_process>
		if (log_process(false) == false) {
    247a:	2800      	cmp	r0, #0
    247c:	d1fa      	bne.n	2474 <log_process_thread_func+0x20>
    247e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2486:	4620      	mov	r0, r4
    2488:	f014 faf2 	bl	16a70 <z_impl_k_sem_take>
    248c:	e7f2      	b.n	2474 <log_process_thread_func+0x20>
    248e:	bf00      	nop
    2490:	20001204 	.word	0x20001204
    2494:	200011d4 	.word	0x200011d4
    2498:	20000680 	.word	0x20000680

0000249c <z_impl_log_panic>:
{
    249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    249e:	4f0e      	ldr	r7, [pc, #56]	; (24d8 <z_impl_log_panic+0x3c>)
    24a0:	783d      	ldrb	r5, [r7, #0]
    24a2:	b975      	cbnz	r5, 24c2 <z_impl_log_panic+0x26>
	log_init();
    24a4:	f7ff fe5e 	bl	2164 <log_init>
	return __log_backends_end - __log_backends_start;
    24a8:	4c0c      	ldr	r4, [pc, #48]	; (24dc <z_impl_log_panic+0x40>)
    24aa:	4e0d      	ldr	r6, [pc, #52]	; (24e0 <z_impl_log_panic+0x44>)
    24ac:	1b36      	subs	r6, r6, r4
    24ae:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    24b0:	42b5      	cmp	r5, r6
    24b2:	db07      	blt.n	24c4 <z_impl_log_panic+0x28>
    24b4:	2000      	movs	r0, #0
    24b6:	f7ff febb 	bl	2230 <z_impl_log_process>
		while (log_process(false) == true) {
    24ba:	2800      	cmp	r0, #0
    24bc:	d1fa      	bne.n	24b4 <z_impl_log_panic+0x18>
	panic_mode = true;
    24be:	2301      	movs	r3, #1
    24c0:	703b      	strb	r3, [r7, #0]
}
    24c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    24c4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    24c6:	795b      	ldrb	r3, [r3, #5]
    24c8:	b11b      	cbz	r3, 24d2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    24ca:	6823      	ldr	r3, [r4, #0]
    24cc:	4620      	mov	r0, r4
    24ce:	691b      	ldr	r3, [r3, #16]
    24d0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    24d2:	3501      	adds	r5, #1
    24d4:	3410      	adds	r4, #16
    24d6:	e7eb      	b.n	24b0 <z_impl_log_panic+0x14>
    24d8:	20029f65 	.word	0x20029f65
    24dc:	000233ec 	.word	0x000233ec
    24e0:	000233fc 	.word	0x000233fc

000024e4 <log_free>:
{
    24e4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    24e6:	3804      	subs	r0, #4
    24e8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    24ea:	e8d0 3fef 	ldaex	r3, [r0]
    24ee:	1e5a      	subs	r2, r3, #1
    24f0:	e8c0 2fe1 	stlex	r1, r2, [r0]
    24f4:	2900      	cmp	r1, #0
    24f6:	d1f8      	bne.n	24ea <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    24f8:	2b01      	cmp	r3, #1
    24fa:	d103      	bne.n	2504 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    24fc:	4803      	ldr	r0, [pc, #12]	; (250c <log_free+0x28>)
    24fe:	a901      	add	r1, sp, #4
    2500:	f013 fdd2 	bl	160a8 <k_mem_slab_free>
}
    2504:	b003      	add	sp, #12
    2506:	f85d fb04 	ldr.w	pc, [sp], #4
    250a:	bf00      	nop
    250c:	200011e8 	.word	0x200011e8

00002510 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2510:	2320      	movs	r3, #32
    2512:	4902      	ldr	r1, [pc, #8]	; (251c <log_msg_pool_init+0xc>)
    2514:	461a      	mov	r2, r3
    2516:	4802      	ldr	r0, [pc, #8]	; (2520 <log_msg_pool_init+0x10>)
    2518:	f020 b888 	b.w	2262c <k_mem_slab_init>
    251c:	2002d7a8 	.word	0x2002d7a8
    2520:	20001208 	.word	0x20001208

00002524 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    2524:	2300      	movs	r3, #0
{
    2526:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2528:	4d09      	ldr	r5, [pc, #36]	; (2550 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    252a:	9301      	str	r3, [sp, #4]
    252c:	2001      	movs	r0, #1
    252e:	f7ff fe7f 	bl	2230 <z_impl_log_process>
    2532:	4604      	mov	r4, r0
			log_dropped();
    2534:	f7ff fde2 	bl	20fc <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2538:	2200      	movs	r2, #0
    253a:	2300      	movs	r3, #0
    253c:	4628      	mov	r0, r5
    253e:	a901      	add	r1, sp, #4
    2540:	f013 fd80 	bl	16044 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2544:	b108      	cbz	r0, 254a <log_msg_no_space_handle+0x26>
    2546:	2c00      	cmp	r4, #0
    2548:	d1f0      	bne.n	252c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    254a:	9801      	ldr	r0, [sp, #4]
    254c:	b003      	add	sp, #12
    254e:	bd30      	pop	{r4, r5, pc}
    2550:	20001208 	.word	0x20001208

00002554 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    2554:	2300      	movs	r3, #0
{
    2556:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2558:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    255a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    255c:	4806      	ldr	r0, [pc, #24]	; (2578 <log_msg_chunk_alloc+0x24>)
    255e:	2300      	movs	r3, #0
    2560:	a901      	add	r1, sp, #4
    2562:	f013 fd6f 	bl	16044 <k_mem_slab_alloc>
	if (err != 0) {
    2566:	b110      	cbz	r0, 256e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2568:	f7ff ffdc 	bl	2524 <log_msg_no_space_handle>
    256c:	9001      	str	r0, [sp, #4]
}
    256e:	9801      	ldr	r0, [sp, #4]
    2570:	b003      	add	sp, #12
    2572:	f85d fb04 	ldr.w	pc, [sp], #4
    2576:	bf00      	nop
    2578:	20001208 	.word	0x20001208

0000257c <msg_free>:
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    257e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2580:	7a45      	ldrb	r5, [r0, #9]
{
    2582:	b085      	sub	sp, #20
    2584:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2586:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    2588:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    258c:	d41c      	bmi.n	25c8 <msg_free+0x4c>
    258e:	b1dd      	cbz	r5, 25c8 <msg_free+0x4c>
		uint32_t smask = 0;
    2590:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    2592:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2594:	4631      	mov	r1, r6
    2596:	9801      	ldr	r0, [sp, #4]
    2598:	f015 fd5b 	bl	18052 <log_msg_arg_get>
    259c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    259e:	f7ff fe39 	bl	2214 <log_is_strdup>
    25a2:	b170      	cbz	r0, 25c2 <msg_free+0x46>
				if (smask == 0) {
    25a4:	b934      	cbnz	r4, 25b4 <msg_free+0x38>
					smask = z_log_get_s_mask(
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	4629      	mov	r1, r5
    25aa:	6918      	ldr	r0, [r3, #16]
    25ac:	f015 fc6e 	bl	17e8c <z_log_get_s_mask>
					if (smask == 0) {
    25b0:	4604      	mov	r4, r0
    25b2:	b148      	cbz	r0, 25c8 <msg_free+0x4c>
				if (smask & BIT(i)) {
    25b4:	fa24 f306 	lsr.w	r3, r4, r6
    25b8:	07d9      	lsls	r1, r3, #31
    25ba:	d502      	bpl.n	25c2 <msg_free+0x46>
					log_free(buf);
    25bc:	4638      	mov	r0, r7
    25be:	f7ff ff91 	bl	24e4 <log_free>
		for (i = 0; i < nargs; i++) {
    25c2:	3601      	adds	r6, #1
    25c4:	42ae      	cmp	r6, r5
    25c6:	d3e5      	bcc.n	2594 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    25c8:	9b01      	ldr	r3, [sp, #4]
    25ca:	7a1a      	ldrb	r2, [r3, #8]
    25cc:	0792      	lsls	r2, r2, #30
    25ce:	d504      	bpl.n	25da <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    25d0:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    25d2:	4c08      	ldr	r4, [pc, #32]	; (25f4 <msg_free+0x78>)
    25d4:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    25d6:	9b03      	ldr	r3, [sp, #12]
    25d8:	b92b      	cbnz	r3, 25e6 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    25da:	4806      	ldr	r0, [pc, #24]	; (25f4 <msg_free+0x78>)
    25dc:	a901      	add	r1, sp, #4
    25de:	f013 fd63 	bl	160a8 <k_mem_slab_free>
}
    25e2:	b005      	add	sp, #20
    25e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    25e6:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    25e8:	4620      	mov	r0, r4
    25ea:	a903      	add	r1, sp, #12
    25ec:	f013 fd5c 	bl	160a8 <k_mem_slab_free>
		cont = next;
    25f0:	9503      	str	r5, [sp, #12]
    25f2:	e7f0      	b.n	25d6 <msg_free+0x5a>
    25f4:	20001208 	.word	0x20001208

000025f8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    25f8:	b40e      	push	{r1, r2, r3}
    25fa:	b503      	push	{r0, r1, lr}
    25fc:	ab03      	add	r3, sp, #12
    25fe:	f853 2b04 	ldr.w	r2, [r3], #4
    2602:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    2604:	4804      	ldr	r0, [pc, #16]	; (2618 <print_formatted+0x20>)
	va_start(args, fmt);
    2606:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    2608:	f7ff f8ba 	bl	1780 <cbvprintf>
	va_end(args);

	return length;
}
    260c:	b002      	add	sp, #8
    260e:	f85d eb04 	ldr.w	lr, [sp], #4
    2612:	b003      	add	sp, #12
    2614:	4770      	bx	lr
    2616:	bf00      	nop
    2618:	00018457 	.word	0x00018457

0000261c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    261c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    2620:	f011 0402 	ands.w	r4, r1, #2
{
    2624:	b085      	sub	sp, #20
    2626:	4690      	mov	r8, r2
    2628:	4606      	mov	r6, r0
    262a:	461a      	mov	r2, r3
    262c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2630:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2634:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    2638:	d007      	beq.n	264a <prefix_print+0x2e>
	if (!format) {
    263a:	f011 0f44 	tst.w	r1, #68	; 0x44
    263e:	d137      	bne.n	26b0 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    2640:	4932      	ldr	r1, [pc, #200]	; (270c <prefix_print+0xf0>)
    2642:	f7ff ffd9 	bl	25f8 <print_formatted>
			length = print_formatted(log_output,
    2646:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    2648:	460c      	mov	r4, r1
	if (color) {
    264a:	f1b9 0f00 	cmp.w	r9, #0
    264e:	d00a      	beq.n	2666 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    2650:	4b2f      	ldr	r3, [pc, #188]	; (2710 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    2652:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    2654:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    2658:	4b2e      	ldr	r3, [pc, #184]	; (2714 <prefix_print+0xf8>)
    265a:	492f      	ldr	r1, [pc, #188]	; (2718 <prefix_print+0xfc>)
    265c:	2a00      	cmp	r2, #0
    265e:	bf08      	it	eq
    2660:	461a      	moveq	r2, r3
    2662:	f7ff ffc9 	bl	25f8 <print_formatted>
	if (level_on) {
    2666:	b13d      	cbz	r5, 2678 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    2668:	4b2c      	ldr	r3, [pc, #176]	; (271c <prefix_print+0x100>)
    266a:	4630      	mov	r0, r6
    266c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    2670:	492b      	ldr	r1, [pc, #172]	; (2720 <prefix_print+0x104>)
    2672:	f7ff ffc1 	bl	25f8 <print_formatted>
    2676:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    2678:	f1b8 0f00 	cmp.w	r8, #0
    267c:	d043      	beq.n	2706 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    267e:	2301      	movs	r3, #1
    2680:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    2684:	4b27      	ldr	r3, [pc, #156]	; (2724 <prefix_print+0x108>)
    2686:	f017 0f10 	tst.w	r7, #16
    268a:	4f27      	ldr	r7, [pc, #156]	; (2728 <prefix_print+0x10c>)
    268c:	bf18      	it	ne
    268e:	461f      	movne	r7, r3
    2690:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    2694:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2698:	f7ff fd3c 	bl	2114 <log_source_name_get>
    269c:	4639      	mov	r1, r7
    269e:	4602      	mov	r2, r0
    26a0:	4630      	mov	r0, r6
    26a2:	f7ff ffa9 	bl	25f8 <print_formatted>
    26a6:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    26a8:	4420      	add	r0, r4
    26aa:	b005      	add	sp, #20
    26ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    26b0:	4b1e      	ldr	r3, [pc, #120]	; (272c <prefix_print+0x110>)
    26b2:	6819      	ldr	r1, [r3, #0]
    26b4:	2900      	cmp	r1, #0
    26b6:	d0c7      	beq.n	2648 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    26b8:	4b1d      	ldr	r3, [pc, #116]	; (2730 <prefix_print+0x114>)
    26ba:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    26be:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    26c0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    26c4:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
    26c8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    26cc:	fbb4 f2fe 	udiv	r2, r4, lr
    26d0:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    26d4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    26d8:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26dc:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    26e0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26e4:	fb01 441b 	mls	r4, r1, fp, r4
    26e8:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    26ec:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26f0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    26f4:	e9cd b101 	strd	fp, r1, [sp, #4]
    26f8:	fb0a e113 	mls	r1, sl, r3, lr
    26fc:	9100      	str	r1, [sp, #0]
    26fe:	490d      	ldr	r1, [pc, #52]	; (2734 <prefix_print+0x118>)
    2700:	f7ff ff7a 	bl	25f8 <print_formatted>
    2704:	e79f      	b.n	2646 <prefix_print+0x2a>
	total += print_formatted(log_output,
    2706:	4f08      	ldr	r7, [pc, #32]	; (2728 <prefix_print+0x10c>)
    2708:	e7c2      	b.n	2690 <prefix_print+0x74>
    270a:	bf00      	nop
    270c:	00024576 	.word	0x00024576
    2710:	000234f8 	.word	0x000234f8
    2714:	00024568 	.word	0x00024568
    2718:	00025a7b 	.word	0x00025a7b
    271c:	0002350c 	.word	0x0002350c
    2720:	0002459b 	.word	0x0002459b
    2724:	00024572 	.word	0x00024572
    2728:	0002456d 	.word	0x0002456d
    272c:	20001224 	.word	0x20001224
    2730:	20001228 	.word	0x20001228
    2734:	0002457f 	.word	0x0002457f

00002738 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    2738:	b538      	push	{r3, r4, r5, lr}
    273a:	460c      	mov	r4, r1
	if (color) {
    273c:	07e1      	lsls	r1, r4, #31
{
    273e:	4605      	mov	r5, r0
	if (color) {
    2740:	d503      	bpl.n	274a <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    2742:	4a08      	ldr	r2, [pc, #32]	; (2764 <postfix_print+0x2c>)
    2744:	4908      	ldr	r1, [pc, #32]	; (2768 <postfix_print+0x30>)
    2746:	f7ff ff57 	bl	25f8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    274a:	06e2      	lsls	r2, r4, #27
    274c:	d408      	bmi.n	2760 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    274e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2750:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    2752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    2756:	bf4c      	ite	mi
    2758:	4904      	ldrmi	r1, [pc, #16]	; (276c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    275a:	4905      	ldrpl	r1, [pc, #20]	; (2770 <postfix_print+0x38>)
    275c:	f7ff bf4c 	b.w	25f8 <print_formatted>
}
    2760:	bd38      	pop	{r3, r4, r5, pc}
    2762:	bf00      	nop
    2764:	00024568 	.word	0x00024568
    2768:	00025a7b 	.word	0x00025a7b
    276c:	000245a2 	.word	0x000245a2
    2770:	000245a1 	.word	0x000245a1

00002774 <hexdump_line_print>:
{
    2774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2778:	461d      	mov	r5, r3
    277a:	9b08      	ldr	r3, [sp, #32]
    277c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    277e:	06da      	lsls	r2, r3, #27
{
    2780:	4604      	mov	r4, r0
    2782:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2784:	d405      	bmi.n	2792 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2786:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2788:	bf4c      	ite	mi
    278a:	492a      	ldrmi	r1, [pc, #168]	; (2834 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    278c:	492a      	ldrpl	r1, [pc, #168]	; (2838 <hexdump_line_print+0xc4>)
    278e:	f7ff ff33 	bl	25f8 <print_formatted>
{
    2792:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    2796:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2840 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    279a:	45a8      	cmp	r8, r5
    279c:	db2a      	blt.n	27f4 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    279e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    27a0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2844 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    27a4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2848 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    27a8:	f8df a094 	ldr.w	sl, [pc, #148]	; 2840 <hexdump_line_print+0xcc>
		if (i < length) {
    27ac:	42bd      	cmp	r5, r7
    27ae:	d22f      	bcs.n	2810 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    27b0:	4649      	mov	r1, r9
    27b2:	4620      	mov	r0, r4
    27b4:	5d72      	ldrb	r2, [r6, r5]
    27b6:	f7ff ff1f 	bl	25f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27ba:	3501      	adds	r5, #1
    27bc:	2d10      	cmp	r5, #16
    27be:	d120      	bne.n	2802 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    27c0:	4620      	mov	r0, r4
    27c2:	491e      	ldr	r1, [pc, #120]	; (283c <hexdump_line_print+0xc8>)
    27c4:	f7ff ff18 	bl	25f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27c8:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    27ca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2840 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    27ce:	f8df 907c 	ldr.w	r9, [pc, #124]	; 284c <hexdump_line_print+0xd8>
		if (i < length) {
    27d2:	42af      	cmp	r7, r5
    27d4:	d928      	bls.n	2828 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    27d6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    27d8:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    27da:	f1a2 0320 	sub.w	r3, r2, #32
    27de:	2b5f      	cmp	r3, #95	; 0x5f
    27e0:	bf28      	it	cs
    27e2:	222e      	movcs	r2, #46	; 0x2e
    27e4:	4620      	mov	r0, r4
    27e6:	f7ff ff07 	bl	25f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27ea:	3501      	adds	r5, #1
    27ec:	2d10      	cmp	r5, #16
    27ee:	d114      	bne.n	281a <hexdump_line_print+0xa6>
}
    27f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    27f4:	4649      	mov	r1, r9
    27f6:	4620      	mov	r0, r4
    27f8:	f7ff fefe 	bl	25f8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    27fc:	f108 0801 	add.w	r8, r8, #1
    2800:	e7cb      	b.n	279a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2802:	076a      	lsls	r2, r5, #29
    2804:	d1d2      	bne.n	27ac <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    2806:	4651      	mov	r1, sl
    2808:	4620      	mov	r0, r4
    280a:	f7ff fef5 	bl	25f8 <print_formatted>
    280e:	e7cd      	b.n	27ac <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    2810:	4641      	mov	r1, r8
    2812:	4620      	mov	r0, r4
    2814:	f7ff fef0 	bl	25f8 <print_formatted>
    2818:	e7cf      	b.n	27ba <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    281a:	076b      	lsls	r3, r5, #29
    281c:	d1d9      	bne.n	27d2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    281e:	4641      	mov	r1, r8
    2820:	4620      	mov	r0, r4
    2822:	f7ff fee9 	bl	25f8 <print_formatted>
    2826:	e7d4      	b.n	27d2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    2828:	4641      	mov	r1, r8
    282a:	4620      	mov	r0, r4
    282c:	f7ff fee4 	bl	25f8 <print_formatted>
    2830:	e7db      	b.n	27ea <hexdump_line_print+0x76>
    2832:	bf00      	nop
    2834:	000245a2 	.word	0x000245a2
    2838:	000245a1 	.word	0x000245a1
    283c:	000245aa 	.word	0x000245aa
    2840:	00026ceb 	.word	0x00026ceb
    2844:	00026ce9 	.word	0x00026ce9
    2848:	000245a4 	.word	0x000245a4
    284c:	000245ac 	.word	0x000245ac

00002850 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2854:	7a8b      	ldrb	r3, [r1, #10]
    2856:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2858:	f013 0807 	ands.w	r8, r3, #7
{
    285c:	4605      	mov	r5, r0
    285e:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2860:	7a0a      	ldrb	r2, [r1, #8]
    2862:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    2864:	d021      	beq.n	28aa <log_output_msg_process+0x5a>
    2866:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    2868:	8949      	ldrh	r1, [r1, #10]
    286a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    286e:	f3c1 1189 	ubfx	r1, r1, #6, #10
    2872:	e9cd 8300 	strd	r8, r3, [sp]
    2876:	9102      	str	r1, [sp, #8]
    2878:	68f3      	ldr	r3, [r6, #12]
    287a:	4639      	mov	r1, r7
    287c:	f002 0201 	and.w	r2, r2, #1
    2880:	f7ff fecc 	bl	261c <prefix_print>
    2884:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2886:	7a34      	ldrb	r4, [r6, #8]
    2888:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    288a:	f014 0401 	ands.w	r4, r4, #1
    288e:	d00e      	beq.n	28ae <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    2890:	4629      	mov	r1, r5
    2892:	4630      	mov	r0, r6
    2894:	f015 fc75 	bl	18182 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    2898:	f1b8 0f00 	cmp.w	r8, #0
    289c:	d02b      	beq.n	28f6 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    289e:	4642      	mov	r2, r8
    28a0:	4639      	mov	r1, r7
    28a2:	4628      	mov	r0, r5
    28a4:	f7ff ff48 	bl	2738 <postfix_print>
    28a8:	e025      	b.n	28f6 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    28aa:	46c1      	mov	r9, r8
    28ac:	e7eb      	b.n	2886 <log_output_msg_process+0x36>
	} else if (raw_string) {
    28ae:	f1b8 0f00 	cmp.w	r8, #0
    28b2:	d126      	bne.n	2902 <log_output_msg_process+0xb2>
	size_t offset = 0;
    28b4:	4627      	mov	r7, r4
		length = log_output->size;
    28b6:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    28b8:	aa06      	add	r2, sp, #24
		length = log_output->size;
    28ba:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    28bc:	4630      	mov	r0, r6
    28be:	463b      	mov	r3, r7
    28c0:	68a9      	ldr	r1, [r5, #8]
    28c2:	f015 fc4a 	bl	1815a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    28c6:	9a06      	ldr	r2, [sp, #24]
    28c8:	686b      	ldr	r3, [r5, #4]
    28ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    28cc:	b13a      	cbz	r2, 28de <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    28ce:	68ab      	ldr	r3, [r5, #8]
    28d0:	4413      	add	r3, r2
    28d2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    28d6:	f1a4 030a 	sub.w	r3, r4, #10
    28da:	425c      	negs	r4, r3
    28dc:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    28de:	4628      	mov	r0, r5
    28e0:	f015 fdac 	bl	1843c <log_output_flush>
		offset += length;
    28e4:	9b06      	ldr	r3, [sp, #24]
    28e6:	441f      	add	r7, r3
	} while (length > 0);
    28e8:	2b00      	cmp	r3, #0
    28ea:	d1e4      	bne.n	28b6 <log_output_msg_process+0x66>
	if (eol) {
    28ec:	b11c      	cbz	r4, 28f6 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    28ee:	4628      	mov	r0, r5
    28f0:	4913      	ldr	r1, [pc, #76]	; (2940 <log_output_msg_process+0xf0>)
    28f2:	f7ff fe81 	bl	25f8 <print_formatted>
	}

	log_output_flush(log_output);
    28f6:	4628      	mov	r0, r5
    28f8:	f015 fda0 	bl	1843c <log_output_flush>
}
    28fc:	b00a      	add	sp, #40	; 0x28
    28fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2902:	4630      	mov	r0, r6
    2904:	f015 fbd3 	bl	180ae <log_msg_str_get>
    2908:	490e      	ldr	r1, [pc, #56]	; (2944 <log_output_msg_process+0xf4>)
    290a:	4602      	mov	r2, r0
    290c:	4628      	mov	r0, r5
    290e:	f7ff fe73 	bl	25f8 <print_formatted>
		length = sizeof(buf);
    2912:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2916:	aa05      	add	r2, sp, #20
    2918:	4623      	mov	r3, r4
    291a:	4630      	mov	r0, r6
    291c:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    291e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2922:	f015 fc1a 	bl	1815a <log_msg_hexdump_data_get>
		if (length) {
    2926:	9a05      	ldr	r2, [sp, #20]
    2928:	2a00      	cmp	r2, #0
    292a:	d0b8      	beq.n	289e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    292c:	464b      	mov	r3, r9
    292e:	4628      	mov	r0, r5
    2930:	9700      	str	r7, [sp, #0]
    2932:	a906      	add	r1, sp, #24
    2934:	f7ff ff1e 	bl	2774 <hexdump_line_print>
			offset += length;
    2938:	9b05      	ldr	r3, [sp, #20]
    293a:	441c      	add	r4, r3
		length = sizeof(buf);
    293c:	e7eb      	b.n	2916 <log_output_msg_process+0xc6>
    293e:	bf00      	nop
    2940:	000245af 	.word	0x000245af
    2944:	00025a7b 	.word	0x00025a7b

00002948 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2948:	f242 730f 	movw	r3, #9999	; 0x270f
{
    294c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    294e:	428b      	cmp	r3, r1
    2950:	bf28      	it	cs
    2952:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    2954:	6805      	ldr	r5, [r0, #0]
{
    2956:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2958:	2105      	movs	r1, #5
    295a:	4668      	mov	r0, sp
    295c:	4a0d      	ldr	r2, [pc, #52]	; (2994 <log_output_dropped_process+0x4c>)
    295e:	f014 fe9b 	bl	17698 <snprintk>
    2962:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2964:	6863      	ldr	r3, [r4, #4]
    2966:	4628      	mov	r0, r5
    2968:	220b      	movs	r2, #11
    296a:	685b      	ldr	r3, [r3, #4]
    296c:	490a      	ldr	r1, [pc, #40]	; (2998 <log_output_dropped_process+0x50>)
    296e:	f015 fbfb 	bl	18168 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    2972:	6863      	ldr	r3, [r4, #4]
    2974:	4632      	mov	r2, r6
    2976:	4669      	mov	r1, sp
    2978:	4628      	mov	r0, r5
    297a:	685b      	ldr	r3, [r3, #4]
    297c:	f015 fbf4 	bl	18168 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2980:	6863      	ldr	r3, [r4, #4]
    2982:	221b      	movs	r2, #27
    2984:	4628      	mov	r0, r5
    2986:	685b      	ldr	r3, [r3, #4]
    2988:	4904      	ldr	r1, [pc, #16]	; (299c <log_output_dropped_process+0x54>)
    298a:	f015 fbed 	bl	18168 <buffer_write>
		     log_output->control_block->ctx);
}
    298e:	b002      	add	sp, #8
    2990:	bd70      	pop	{r4, r5, r6, pc}
    2992:	bf00      	nop
    2994:	000263d5 	.word	0x000263d5
    2998:	000245ed 	.word	0x000245ed
    299c:	000245d1 	.word	0x000245d1

000029a0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    29a0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    29a2:	2100      	movs	r1, #0
	timestamp_div = 1U;
    29a4:	4a07      	ldr	r2, [pc, #28]	; (29c4 <log_output_timestamp_freq_set+0x24>)
{
    29a6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    29a8:	4c07      	ldr	r4, [pc, #28]	; (29c8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    29aa:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    29ac:	42a0      	cmp	r0, r4
    29ae:	d804      	bhi.n	29ba <log_output_timestamp_freq_set+0x1a>
    29b0:	b101      	cbz	r1, 29b4 <log_output_timestamp_freq_set+0x14>
    29b2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    29b4:	4b05      	ldr	r3, [pc, #20]	; (29cc <log_output_timestamp_freq_set+0x2c>)
    29b6:	6018      	str	r0, [r3, #0]
}
    29b8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    29ba:	2101      	movs	r1, #1
		frequency /= 2U;
    29bc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    29be:	005b      	lsls	r3, r3, #1
    29c0:	e7f4      	b.n	29ac <log_output_timestamp_freq_set+0xc>
    29c2:	bf00      	nop
    29c4:	20001228 	.word	0x20001228
    29c8:	000f4240 	.word	0x000f4240
    29cc:	20001224 	.word	0x20001224

000029d0 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    29d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29d2:	460d      	mov	r5, r1
    29d4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    29d6:	4f06      	ldr	r7, [pc, #24]	; (29f0 <char_out+0x20>)
    29d8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    29da:	42b4      	cmp	r4, r6
    29dc:	d101      	bne.n	29e2 <char_out+0x12>
	}

	return length;
}
    29de:	4628      	mov	r0, r5
    29e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    29e2:	6838      	ldr	r0, [r7, #0]
    29e4:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    29e8:	6883      	ldr	r3, [r0, #8]
    29ea:	685b      	ldr	r3, [r3, #4]
    29ec:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    29ee:	e7f4      	b.n	29da <char_out+0xa>
    29f0:	20001240 	.word	0x20001240

000029f4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    29f4:	4801      	ldr	r0, [pc, #4]	; (29fc <panic+0x8>)
    29f6:	f015 bd21 	b.w	1843c <log_output_flush>
    29fa:	bf00      	nop
    29fc:	00023538 	.word	0x00023538

00002a00 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    2a00:	4801      	ldr	r0, [pc, #4]	; (2a08 <dropped+0x8>)
    2a02:	f7ff bfa1 	b.w	2948 <log_output_dropped_process>
    2a06:	bf00      	nop
    2a08:	00023538 	.word	0x00023538

00002a0c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    2a0c:	b508      	push	{r3, lr}
    2a0e:	4803      	ldr	r0, [pc, #12]	; (2a1c <log_backend_uart_init+0x10>)
    2a10:	f013 f83c 	bl	15a8c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2a14:	4b02      	ldr	r3, [pc, #8]	; (2a20 <log_backend_uart_init+0x14>)
    2a16:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    2a18:	bd08      	pop	{r3, pc}
    2a1a:	bf00      	nop
    2a1c:	000245f9 	.word	0x000245f9
    2a20:	20001240 	.word	0x20001240

00002a24 <put>:
{
    2a24:	b510      	push	{r4, lr}
    2a26:	460c      	mov	r4, r1
	log_msg_get(msg);
    2a28:	4608      	mov	r0, r1
    2a2a:	f015 fb06 	bl	1803a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    2a2e:	4621      	mov	r1, r4
    2a30:	4804      	ldr	r0, [pc, #16]	; (2a44 <put+0x20>)
    2a32:	220f      	movs	r2, #15
    2a34:	f7ff ff0c 	bl	2850 <log_output_msg_process>
	log_msg_put(msg);
    2a38:	4620      	mov	r0, r4
}
    2a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a3e:	f015 bb27 	b.w	18090 <log_msg_put>
    2a42:	bf00      	nop
    2a44:	00023538 	.word	0x00023538

00002a48 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    2a48:	4b01      	ldr	r3, [pc, #4]	; (2a50 <virtio_set_status+0x8>)
    2a4a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop
    2a50:	20070000 	.word	0x20070000

00002a54 <init_status_flag>:
    2a54:	2000      	movs	r0, #0
    2a56:	4b01      	ldr	r3, [pc, #4]	; (2a5c <init_status_flag+0x8>)
    2a58:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    2a5a:	4770      	bx	lr
    2a5c:	20070000 	.word	0x20070000

00002a60 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    2a60:	4b01      	ldr	r3, [pc, #4]	; (2a68 <ipm_callback_process+0x8>)
    2a62:	6818      	ldr	r0, [r3, #0]
    2a64:	f01f bbb6 	b.w	221d4 <virtqueue_notification>
    2a68:	20001254 	.word	0x20001254

00002a6c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2a6c:	4b0d      	ldr	r3, [pc, #52]	; (2aa4 <virtio_notify+0x38>)
{
    2a6e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2a70:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    2a72:	2300      	movs	r3, #0
    2a74:	6882      	ldr	r2, [r0, #8]
    2a76:	9300      	str	r3, [sp, #0]
    2a78:	4619      	mov	r1, r3
    2a7a:	6814      	ldr	r4, [r2, #0]
    2a7c:	461a      	mov	r2, r3
    2a7e:	47a0      	blx	r4
	if (status != 0) {
    2a80:	4601      	mov	r1, r0
    2a82:	b160      	cbz	r0, 2a9e <virtio_notify+0x32>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2a84:	4b08      	ldr	r3, [pc, #32]	; (2aa8 <virtio_notify+0x3c>)
    2a86:	4a09      	ldr	r2, [pc, #36]	; (2aac <virtio_notify+0x40>)
		LOG_ERR("ipm_send failed to notify: %d", status);
    2a88:	4809      	ldr	r0, [pc, #36]	; (2ab0 <virtio_notify+0x44>)
    2a8a:	1ad2      	subs	r2, r2, r3
    2a8c:	08d2      	lsrs	r2, r2, #3
    2a8e:	0192      	lsls	r2, r2, #6
    2a90:	f042 0201 	orr.w	r2, r2, #1
}
    2a94:	b002      	add	sp, #8
    2a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    2a9a:	f015 ba24 	b.w	17ee6 <log_1>
}
    2a9e:	b002      	add	sp, #8
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	bf00      	nop
    2aa4:	20001244 	.word	0x20001244
    2aa8:	000232ec 	.word	0x000232ec
    2aac:	000233c4 	.word	0x000233c4
    2ab0:	00024611 	.word	0x00024611

00002ab4 <ipm_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ab4:	4907      	ldr	r1, [pc, #28]	; (2ad4 <ipm_callback+0x20>)
    2ab6:	e8d1 3fef 	ldaex	r3, [r1]
    2aba:	f043 0201 	orr.w	r2, r3, #1
    2abe:	e8c1 2fe0 	stlex	r0, r2, [r1]
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d1f7      	bne.n	2ab6 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2ac6:	07db      	lsls	r3, r3, #31
    2ac8:	d403      	bmi.n	2ad2 <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    2aca:	4803      	ldr	r0, [pc, #12]	; (2ad8 <ipm_callback+0x24>)
    2acc:	3908      	subs	r1, #8
    2ace:	f01f be4c 	b.w	2276a <k_queue_append>
}
    2ad2:	4770      	bx	lr
    2ad4:	20001250 	.word	0x20001250
    2ad8:	200008a0 	.word	0x200008a0

00002adc <rpmsg_backend_init>:
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2ade:	4b5f      	ldr	r3, [pc, #380]	; (2c5c <rpmsg_backend_init+0x180>)
{
    2ae0:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2ae2:	9302      	str	r3, [sp, #8]
    2ae4:	2306      	movs	r3, #6
{
    2ae6:	4606      	mov	r6, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2ae8:	f88d 300c 	strb.w	r3, [sp, #12]
{
    2aec:	460d      	mov	r5, r1
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    2aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2af6:	495a      	ldr	r1, [pc, #360]	; (2c60 <rpmsg_backend_init+0x184>)
    2af8:	485a      	ldr	r0, [pc, #360]	; (2c64 <rpmsg_backend_init+0x188>)
    2afa:	f014 f8ff 	bl	16cfc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    2afe:	495a      	ldr	r1, [pc, #360]	; (2c68 <rpmsg_backend_init+0x18c>)
    2b00:	485a      	ldr	r0, [pc, #360]	; (2c6c <rpmsg_backend_init+0x190>)
    2b02:	f01f ffc9 	bl	22a98 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    2b06:	2200      	movs	r2, #0
    2b08:	4b59      	ldr	r3, [pc, #356]	; (2c70 <rpmsg_backend_init+0x194>)
    2b0a:	495a      	ldr	r1, [pc, #360]	; (2c74 <rpmsg_backend_init+0x198>)
	err = metal_init(&metal_params);
    2b0c:	a802      	add	r0, sp, #8
    2b0e:	e9c3 1201 	strd	r1, r2, [r3, #4]
    2b12:	601a      	str	r2, [r3, #0]
    2b14:	f00b fed2 	bl	e8bc <metal_init>
	if (err) {
    2b18:	4604      	mov	r4, r0
    2b1a:	b168      	cbz	r0, 2b38 <rpmsg_backend_init+0x5c>
    2b1c:	4a56      	ldr	r2, [pc, #344]	; (2c78 <rpmsg_backend_init+0x19c>)
    2b1e:	4b57      	ldr	r3, [pc, #348]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_init: failed - error code %d", err);
    2b20:	4601      	mov	r1, r0
    2b22:	1ad2      	subs	r2, r2, r3
    2b24:	08d2      	lsrs	r2, r2, #3
    2b26:	0192      	lsls	r2, r2, #6
    2b28:	4855      	ldr	r0, [pc, #340]	; (2c80 <rpmsg_backend_init+0x1a4>)
    2b2a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Couldn't register shared memory device: %d", err);
    2b2e:	f015 f9da 	bl	17ee6 <log_1>
}
    2b32:	4620      	mov	r0, r4
    2b34:	b005      	add	sp, #20
    2b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    2b38:	4852      	ldr	r0, [pc, #328]	; (2c84 <rpmsg_backend_init+0x1a8>)
    2b3a:	f00b fe9f 	bl	e87c <metal_register_generic_device>
	if (err) {
    2b3e:	4604      	mov	r4, r0
    2b40:	b148      	cbz	r0, 2b56 <rpmsg_backend_init+0x7a>
    2b42:	4a4d      	ldr	r2, [pc, #308]	; (2c78 <rpmsg_backend_init+0x19c>)
    2b44:	4b4d      	ldr	r3, [pc, #308]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    2b46:	4601      	mov	r1, r0
    2b48:	1ad2      	subs	r2, r2, r3
    2b4a:	08d2      	lsrs	r2, r2, #3
    2b4c:	0192      	lsls	r2, r2, #6
    2b4e:	484e      	ldr	r0, [pc, #312]	; (2c88 <rpmsg_backend_init+0x1ac>)
    2b50:	f042 0201 	orr.w	r2, r2, #1
    2b54:	e7eb      	b.n	2b2e <rpmsg_backend_init+0x52>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    2b56:	494d      	ldr	r1, [pc, #308]	; (2c8c <rpmsg_backend_init+0x1b0>)
    2b58:	484d      	ldr	r0, [pc, #308]	; (2c90 <rpmsg_backend_init+0x1b4>)
    2b5a:	aa01      	add	r2, sp, #4
    2b5c:	f019 f8c8 	bl	1bcf0 <metal_device_open>
	if (err) {
    2b60:	4604      	mov	r4, r0
    2b62:	b148      	cbz	r0, 2b78 <rpmsg_backend_init+0x9c>
    2b64:	4a44      	ldr	r2, [pc, #272]	; (2c78 <rpmsg_backend_init+0x19c>)
    2b66:	4b45      	ldr	r3, [pc, #276]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("metal_device_open failed: %d", err);
    2b68:	4601      	mov	r1, r0
    2b6a:	1ad2      	subs	r2, r2, r3
    2b6c:	08d2      	lsrs	r2, r2, #3
    2b6e:	0192      	lsls	r2, r2, #6
    2b70:	4848      	ldr	r0, [pc, #288]	; (2c94 <rpmsg_backend_init+0x1b8>)
    2b72:	f042 0201 	orr.w	r2, r2, #1
    2b76:	e7da      	b.n	2b2e <rpmsg_backend_init+0x52>
	*io = metal_device_io_region(device, 0);
    2b78:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    2b7a:	689a      	ldr	r2, [r3, #8]
    2b7c:	b95a      	cbnz	r2, 2b96 <rpmsg_backend_init+0xba>
    2b7e:	6030      	str	r0, [r6, #0]
    2b80:	4b3e      	ldr	r3, [pc, #248]	; (2c7c <rpmsg_backend_init+0x1a0>)
    2b82:	493d      	ldr	r1, [pc, #244]	; (2c78 <rpmsg_backend_init+0x19c>)
		LOG_ERR("metal_device_io_region failed to get region");
    2b84:	4844      	ldr	r0, [pc, #272]	; (2c98 <rpmsg_backend_init+0x1bc>)
    2b86:	1ac9      	subs	r1, r1, r3
    2b88:	08c9      	lsrs	r1, r1, #3
    2b8a:	0189      	lsls	r1, r1, #6
    2b8c:	f041 0101 	orr.w	r1, r1, #1
    2b90:	f015 f99c 	bl	17ecc <log_0>
		return err;
    2b94:	e7cd      	b.n	2b32 <rpmsg_backend_init+0x56>
    2b96:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    2b98:	6033      	str	r3, [r6, #0]
	if (!*io) {
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d0f0      	beq.n	2b80 <rpmsg_backend_init+0xa4>
    2b9e:	483f      	ldr	r0, [pc, #252]	; (2c9c <rpmsg_backend_init+0x1c0>)
    2ba0:	f012 ff74 	bl	15a8c <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    2ba4:	4f3e      	ldr	r7, [pc, #248]	; (2ca0 <rpmsg_backend_init+0x1c4>)
    2ba6:	6038      	str	r0, [r7, #0]
    2ba8:	483e      	ldr	r0, [pc, #248]	; (2ca4 <rpmsg_backend_init+0x1c8>)
    2baa:	f012 ff6f 	bl	15a8c <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    2bae:	683a      	ldr	r2, [r7, #0]
    2bb0:	b962      	cbnz	r2, 2bcc <rpmsg_backend_init+0xf0>
    2bb2:	4931      	ldr	r1, [pc, #196]	; (2c78 <rpmsg_backend_init+0x19c>)
    2bb4:	4b31      	ldr	r3, [pc, #196]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get TX IPM device handle");
    2bb6:	483c      	ldr	r0, [pc, #240]	; (2ca8 <rpmsg_backend_init+0x1cc>)
    2bb8:	1ac9      	subs	r1, r1, r3
    2bba:	08c9      	lsrs	r1, r1, #3
    2bbc:	0189      	lsls	r1, r1, #6
    2bbe:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Could not get RX IPM device handle");
    2bc2:	f015 f983 	bl	17ecc <log_0>
		return -ENODEV;
    2bc6:	f06f 0412 	mvn.w	r4, #18
    2bca:	e7b2      	b.n	2b32 <rpmsg_backend_init+0x56>
	if (!ipm_rx_handle) {
    2bcc:	b940      	cbnz	r0, 2be0 <rpmsg_backend_init+0x104>
    2bce:	492a      	ldr	r1, [pc, #168]	; (2c78 <rpmsg_backend_init+0x19c>)
    2bd0:	4b2a      	ldr	r3, [pc, #168]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("Could not get RX IPM device handle");
    2bd2:	4836      	ldr	r0, [pc, #216]	; (2cac <rpmsg_backend_init+0x1d0>)
    2bd4:	1ac9      	subs	r1, r1, r3
    2bd6:	08c9      	lsrs	r1, r1, #3
    2bd8:	0189      	lsls	r1, r1, #6
    2bda:	f041 0101 	orr.w	r1, r1, #1
    2bde:	e7f0      	b.n	2bc2 <rpmsg_backend_init+0xe6>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    2be0:	6883      	ldr	r3, [r0, #8]
    2be2:	4622      	mov	r2, r4
    2be4:	685b      	ldr	r3, [r3, #4]
    2be6:	4932      	ldr	r1, [pc, #200]	; (2cb0 <rpmsg_backend_init+0x1d4>)
    2be8:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    2bea:	f015 fc50 	bl	1848e <virtqueue_allocate.constprop.0>
    2bee:	4f31      	ldr	r7, [pc, #196]	; (2cb4 <rpmsg_backend_init+0x1d8>)
    2bf0:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    2bf2:	b960      	cbnz	r0, 2c0e <rpmsg_backend_init+0x132>
    2bf4:	4920      	ldr	r1, [pc, #128]	; (2c78 <rpmsg_backend_init+0x19c>)
    2bf6:	4b21      	ldr	r3, [pc, #132]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    2bf8:	482f      	ldr	r0, [pc, #188]	; (2cb8 <rpmsg_backend_init+0x1dc>)
    2bfa:	1ac9      	subs	r1, r1, r3
    2bfc:	08c9      	lsrs	r1, r1, #3
    2bfe:	0189      	lsls	r1, r1, #6
    2c00:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    2c04:	f015 f962 	bl	17ecc <log_0>
		return -ENOMEM;
    2c08:	f06f 040b 	mvn.w	r4, #11
    2c0c:	e791      	b.n	2b32 <rpmsg_backend_init+0x56>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    2c0e:	f015 fc3e 	bl	1848e <virtqueue_allocate.constprop.0>
    2c12:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    2c14:	b940      	cbnz	r0, 2c28 <rpmsg_backend_init+0x14c>
    2c16:	4918      	ldr	r1, [pc, #96]	; (2c78 <rpmsg_backend_init+0x19c>)
    2c18:	4b18      	ldr	r3, [pc, #96]	; (2c7c <rpmsg_backend_init+0x1a0>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    2c1a:	4828      	ldr	r0, [pc, #160]	; (2cbc <rpmsg_backend_init+0x1e0>)
    2c1c:	1ac9      	subs	r1, r1, r3
    2c1e:	08c9      	lsrs	r1, r1, #3
    2c20:	0189      	lsls	r1, r1, #6
    2c22:	f041 0101 	orr.w	r1, r1, #1
    2c26:	e7ed      	b.n	2c04 <rpmsg_backend_init+0x128>
	rvrings[0].io = *io;
    2c28:	6832      	ldr	r2, [r6, #0]
    2c2a:	4b25      	ldr	r3, [pc, #148]	; (2cc0 <rpmsg_backend_init+0x1e4>)
	rvrings[0].info.num_descs = VRING_SIZE;
    2c2c:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    2c2e:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2c30:	4a24      	ldr	r2, [pc, #144]	; (2cc4 <rpmsg_backend_init+0x1e8>)
	rvrings[0].vq = vq[0];
    2c32:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2c34:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2c36:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    2c38:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2c3a:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    2c3c:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    2c3e:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    2c40:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    2c42:	4e21      	ldr	r6, [pc, #132]	; (2cc8 <rpmsg_backend_init+0x1ec>)
	vdev->vrings_num = VRING_COUNT;
    2c44:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    2c46:	4a21      	ldr	r2, [pc, #132]	; (2ccc <rpmsg_backend_init+0x1f0>)
	rvrings[1].info.num_descs = VRING_SIZE;
    2c48:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    2c4a:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    2c4c:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    2c4e:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    2c50:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    2c52:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    2c54:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    2c56:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    2c58:	e76b      	b.n	2b32 <rpmsg_backend_init+0x56>
    2c5a:	bf00      	nop
    2c5c:	0000e90d 	.word	0x0000e90d
    2c60:	2002a488 	.word	0x2002a488
    2c64:	200008a0 	.word	0x200008a0
    2c68:	0002462f 	.word	0x0002462f
    2c6c:	200008b8 	.word	0x200008b8
    2c70:	20001248 	.word	0x20001248
    2c74:	00002a61 	.word	0x00002a61
    2c78:	000233c4 	.word	0x000233c4
    2c7c:	000232ec 	.word	0x000232ec
    2c80:	0002463a 	.word	0x0002463a
    2c84:	20000190 	.word	0x20000190
    2c88:	0002465d 	.word	0x0002465d
    2c8c:	00024688 	.word	0x00024688
    2c90:	00024692 	.word	0x00024692
    2c94:	0002469a 	.word	0x0002469a
    2c98:	000246b7 	.word	0x000246b7
    2c9c:	00026a0c 	.word	0x00026a0c
    2ca0:	20001244 	.word	0x20001244
    2ca4:	000246e3 	.word	0x000246e3
    2ca8:	000246e9 	.word	0x000246e9
    2cac:	0002470c 	.word	0x0002470c
    2cb0:	00002ab5 	.word	0x00002ab5
    2cb4:	20001254 	.word	0x20001254
    2cb8:	0002472f 	.word	0x0002472f
    2cbc:	00024758 	.word	0x00024758
    2cc0:	20000160 	.word	0x20000160
    2cc4:	2007fc00 	.word	0x2007fc00
    2cc8:	2007f800 	.word	0x2007f800
    2ccc:	00023548 	.word	0x00023548

00002cd0 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    2cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2cd4:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    2cd6:	4c22      	ldr	r4, [pc, #136]	; (2d60 <ns_bind_cb+0x90>)
{
    2cd8:	4606      	mov	r6, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    2cda:	6821      	ldr	r1, [r4, #0]
    2cdc:	4628      	mov	r0, r5
{
    2cde:	4617      	mov	r7, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    2ce0:	f016 fa67 	bl	191b2 <strcmp>
    2ce4:	46a0      	mov	r8, r4
    2ce6:	b198      	cbz	r0, 2d10 <ns_bind_cb+0x40>
    2ce8:	4628      	mov	r0, r5
    2cea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2cec:	f016 fa61 	bl	191b2 <strcmp>
    2cf0:	b168      	cbz	r0, 2d0e <ns_bind_cb+0x3e>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    2cf2:	4629      	mov	r1, r5
    2cf4:	4b1b      	ldr	r3, [pc, #108]	; (2d64 <ns_bind_cb+0x94>)
    2cf6:	4a1c      	ldr	r2, [pc, #112]	; (2d68 <ns_bind_cb+0x98>)
    2cf8:	481c      	ldr	r0, [pc, #112]	; (2d6c <ns_bind_cb+0x9c>)
    2cfa:	1ad2      	subs	r2, r2, r3
    2cfc:	08d2      	lsrs	r2, r2, #3
    2cfe:	0192      	lsls	r2, r2, #6
    2d00:	f042 0201 	orr.w	r2, r2, #1
}
    2d04:	b004      	add	sp, #16
    2d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    2d0a:	f015 b8ec 	b.w	17ee6 <log_1>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    2d0e:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    2d10:	244c      	movs	r4, #76	; 0x4c
    2d12:	4344      	muls	r4, r0
    2d14:	4b16      	ldr	r3, [pc, #88]	; (2d70 <ns_bind_cb+0xa0>)
    2d16:	f104 0008 	add.w	r0, r4, #8
    2d1a:	9302      	str	r3, [sp, #8]
    2d1c:	4444      	add	r4, r8
    2d1e:	6863      	ldr	r3, [r4, #4]
    2d20:	462a      	mov	r2, r5
    2d22:	e9cd 7300 	strd	r7, r3, [sp]
    2d26:	4631      	mov	r1, r6
    2d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d2c:	4440      	add	r0, r8
    2d2e:	f012 fc53 	bl	155d8 <rpmsg_create_ept>
			if (err != 0) {
    2d32:	4602      	mov	r2, r0
    2d34:	b168      	cbz	r0, 2d52 <ns_bind_cb+0x82>
    2d36:	490b      	ldr	r1, [pc, #44]	; (2d64 <ns_bind_cb+0x94>)
    2d38:	4b0b      	ldr	r3, [pc, #44]	; (2d68 <ns_bind_cb+0x98>)
				LOG_ERR("Creating remote endpoint %s"
    2d3a:	480e      	ldr	r0, [pc, #56]	; (2d74 <ns_bind_cb+0xa4>)
    2d3c:	1a5b      	subs	r3, r3, r1
    2d3e:	4629      	mov	r1, r5
    2d40:	08db      	lsrs	r3, r3, #3
    2d42:	019b      	lsls	r3, r3, #6
    2d44:	f043 0301 	orr.w	r3, r3, #1
}
    2d48:	b004      	add	sp, #16
    2d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    2d4e:	f015 b8de 	b.w	17f0e <log_2>
				endpoints[i].bound = true;
    2d52:	2301      	movs	r3, #1
    2d54:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    2d58:	b004      	add	sp, #16
    2d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d5e:	bf00      	nop
    2d60:	2000125c 	.word	0x2000125c
    2d64:	000232ec 	.word	0x000232ec
    2d68:	000233cc 	.word	0x000233cc
    2d6c:	0002478f 	.word	0x0002478f
    2d70:	000184a9 	.word	0x000184a9
    2d74:	000247b9 	.word	0x000247b9

00002d78 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    2d78:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    2d7a:	4d19      	ldr	r5, [pc, #100]	; (2de0 <rpmsg_service_init+0x68>)
    2d7c:	4919      	ldr	r1, [pc, #100]	; (2de4 <rpmsg_service_init+0x6c>)
    2d7e:	4628      	mov	r0, r5
    2d80:	f7ff feac 	bl	2adc <rpmsg_backend_init>
	if (err) {
    2d84:	4604      	mov	r4, r0
    2d86:	b168      	cbz	r0, 2da4 <rpmsg_service_init+0x2c>
    2d88:	4a17      	ldr	r2, [pc, #92]	; (2de8 <rpmsg_service_init+0x70>)
    2d8a:	4b18      	ldr	r3, [pc, #96]	; (2dec <rpmsg_service_init+0x74>)
		LOG_ERR("RPMsg backend init failed with error %d", err);
    2d8c:	4601      	mov	r1, r0
    2d8e:	1ad2      	subs	r2, r2, r3
    2d90:	08d2      	lsrs	r2, r2, #3
    2d92:	0192      	lsls	r2, r2, #6
    2d94:	4816      	ldr	r0, [pc, #88]	; (2df0 <rpmsg_service_init+0x78>)
    2d96:	f042 0201 	orr.w	r2, r2, #1
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    2d9a:	f015 f8a4 	bl	17ee6 <log_1>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    2d9e:	4620      	mov	r0, r4
    2da0:	b003      	add	sp, #12
    2da2:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    2da4:	4c13      	ldr	r4, [pc, #76]	; (2df4 <rpmsg_service_init+0x7c>)
    2da6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    2daa:	4620      	mov	r0, r4
    2dac:	4912      	ldr	r1, [pc, #72]	; (2df8 <rpmsg_service_init+0x80>)
    2dae:	f01f fb88 	bl	224c2 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    2db2:	9400      	str	r4, [sp, #0]
    2db4:	682b      	ldr	r3, [r5, #0]
    2db6:	4a11      	ldr	r2, [pc, #68]	; (2dfc <rpmsg_service_init+0x84>)
    2db8:	490a      	ldr	r1, [pc, #40]	; (2de4 <rpmsg_service_init+0x6c>)
    2dba:	4811      	ldr	r0, [pc, #68]	; (2e00 <rpmsg_service_init+0x88>)
    2dbc:	f012 fd46 	bl	1584c <rpmsg_init_vdev>
	if (err) {
    2dc0:	4604      	mov	r4, r0
    2dc2:	b148      	cbz	r0, 2dd8 <rpmsg_service_init+0x60>
    2dc4:	4a08      	ldr	r2, [pc, #32]	; (2de8 <rpmsg_service_init+0x70>)
    2dc6:	4b09      	ldr	r3, [pc, #36]	; (2dec <rpmsg_service_init+0x74>)
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    2dc8:	4601      	mov	r1, r0
    2dca:	1ad2      	subs	r2, r2, r3
    2dcc:	08d2      	lsrs	r2, r2, #3
    2dce:	0192      	lsls	r2, r2, #6
    2dd0:	480c      	ldr	r0, [pc, #48]	; (2e04 <rpmsg_service_init+0x8c>)
    2dd2:	f042 0201 	orr.w	r2, r2, #1
    2dd6:	e7e0      	b.n	2d9a <rpmsg_service_init+0x22>
	ep_crt_started = true;
    2dd8:	2201      	movs	r2, #1
    2dda:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <rpmsg_service_init+0x90>)
    2ddc:	701a      	strb	r2, [r3, #0]
	return 0;
    2dde:	e7de      	b.n	2d9e <rpmsg_service_init+0x26>
    2de0:	200012f4 	.word	0x200012f4
    2de4:	20000940 	.word	0x20000940
    2de8:	000233cc 	.word	0x000233cc
    2dec:	000232ec 	.word	0x000232ec
    2df0:	000247ea 	.word	0x000247ea
    2df4:	20001388 	.word	0x20001388
    2df8:	20070400 	.word	0x20070400
    2dfc:	00002cd1 	.word	0x00002cd1
    2e00:	200012f8 	.word	0x200012f8
    2e04:	00024812 	.word	0x00024812
    2e08:	20029f67 	.word	0x20029f67

00002e0c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    2e0c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    2e0e:	4b11      	ldr	r3, [pc, #68]	; (2e54 <rpmsg_service_register_endpoint+0x48>)
{
    2e10:	4604      	mov	r4, r0
	if (ep_crt_started) {
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	b9d3      	cbnz	r3, 2e4c <rpmsg_service_register_endpoint+0x40>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    2e16:	4b10      	ldr	r3, [pc, #64]	; (2e58 <rpmsg_service_register_endpoint+0x4c>)
    2e18:	6818      	ldr	r0, [r3, #0]
    2e1a:	461a      	mov	r2, r3
    2e1c:	b180      	cbz	r0, 2e40 <rpmsg_service_register_endpoint+0x34>
    2e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2e20:	b16b      	cbz	r3, 2e3e <rpmsg_service_register_endpoint+0x32>
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <rpmsg_service_register_endpoint+0x50>)
    2e24:	4a0e      	ldr	r2, [pc, #56]	; (2e60 <rpmsg_service_register_endpoint+0x54>)

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    2e26:	480f      	ldr	r0, [pc, #60]	; (2e64 <rpmsg_service_register_endpoint+0x58>)
    2e28:	1ad2      	subs	r2, r2, r3
    2e2a:	08d2      	lsrs	r2, r2, #3
    2e2c:	0192      	lsls	r2, r2, #6
    2e2e:	4621      	mov	r1, r4
    2e30:	f042 0201 	orr.w	r2, r2, #1
    2e34:	f015 f857 	bl	17ee6 <log_1>

	return -ENOMEM;
    2e38:	f06f 000b 	mvn.w	r0, #11
}
    2e3c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    2e3e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    2e40:	234c      	movs	r3, #76	; 0x4c
    2e42:	4343      	muls	r3, r0
    2e44:	18d5      	adds	r5, r2, r3
    2e46:	50d4      	str	r4, [r2, r3]
			endpoints[i].cb = cb;
    2e48:	6069      	str	r1, [r5, #4]
			return i;
    2e4a:	e7f7      	b.n	2e3c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
    2e4c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    2e50:	e7f4      	b.n	2e3c <rpmsg_service_register_endpoint+0x30>
    2e52:	bf00      	nop
    2e54:	20029f67 	.word	0x20029f67
    2e58:	2000125c 	.word	0x2000125c
    2e5c:	000232ec 	.word	0x000232ec
    2e60:	000233cc 	.word	0x000233cc
    2e64:	0002482c 	.word	0x0002482c

00002e68 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    2e68:	224c      	movs	r2, #76	; 0x4c
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <rpmsg_service_endpoint_is_bound+0x10>)
    2e6c:	fb02 3000 	mla	r0, r2, r0, r3
    2e70:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
    2e74:	4770      	bx	lr
    2e76:	bf00      	nop
    2e78:	2000125c 	.word	0x2000125c

00002e7c <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    2e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    2e7e:	244c      	movs	r4, #76	; 0x4c
    2e80:	460b      	mov	r3, r1
    2e82:	2101      	movs	r1, #1
    2e84:	4344      	muls	r4, r0
    2e86:	e9cd 2100 	strd	r2, r1, [sp]
    2e8a:	4d05      	ldr	r5, [pc, #20]	; (2ea0 <rpmsg_service_send+0x24>)
    2e8c:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    2e8e:	3408      	adds	r4, #8
    2e90:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    2e94:	1928      	adds	r0, r5, r4
    2e96:	f012 fb8d 	bl	155b4 <rpmsg_send_offchannel_raw>
}
    2e9a:	b003      	add	sp, #12
    2e9c:	bd30      	pop	{r4, r5, pc}
    2e9e:	bf00      	nop
    2ea0:	2000125c 	.word	0x2000125c

00002ea4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    2ea4:	4604      	mov	r4, r0
    2ea6:	b508      	push	{r3, lr}
	__asm__ volatile(
    2ea8:	f04f 0220 	mov.w	r2, #32
    2eac:	f3ef 8311 	mrs	r3, BASEPRI
    2eb0:	f382 8811 	msr	BASEPRI, r2
    2eb4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    2eb8:	f015 fd1f 	bl	188fa <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    2ebc:	4620      	mov	r0, r4
    2ebe:	f001 fc27 	bl	4710 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2ec2:	4803      	ldr	r0, [pc, #12]	; (2ed0 <sys_reboot+0x2c>)
    2ec4:	f014 fbdb 	bl	1767e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2ec8:	f001 f946 	bl	4158 <arch_cpu_idle>
    2ecc:	e7fc      	b.n	2ec8 <sys_reboot+0x24>
    2ece:	bf00      	nop
    2ed0:	00024866 	.word	0x00024866

00002ed4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2ed4:	b510      	push	{r4, lr}
    2ed6:	4807      	ldr	r0, [pc, #28]	; (2ef4 <uart_console_init+0x20>)
    2ed8:	f012 fdd8 	bl	15a8c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    2edc:	4c06      	ldr	r4, [pc, #24]	; (2ef8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2ede:	4b07      	ldr	r3, [pc, #28]	; (2efc <uart_console_init+0x28>)
    2ee0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    2ee2:	4620      	mov	r0, r4
    2ee4:	f001 fdf4 	bl	4ad0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2ee8:	4620      	mov	r0, r4
    2eea:	f7fe fb3b 	bl	1564 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    2eee:	2000      	movs	r0, #0
    2ef0:	bd10      	pop	{r4, pc}
    2ef2:	bf00      	nop
    2ef4:	000245f9 	.word	0x000245f9
    2ef8:	00002f01 	.word	0x00002f01
    2efc:	20001394 	.word	0x20001394

00002f00 <console_out>:
	if ('\n' == c) {
    2f00:	280a      	cmp	r0, #10
{
    2f02:	b538      	push	{r3, r4, r5, lr}
    2f04:	4604      	mov	r4, r0
    2f06:	4d07      	ldr	r5, [pc, #28]	; (2f24 <console_out+0x24>)
	if ('\n' == c) {
    2f08:	d104      	bne.n	2f14 <console_out+0x14>
    2f0a:	6828      	ldr	r0, [r5, #0]
    2f0c:	6883      	ldr	r3, [r0, #8]
    2f0e:	210d      	movs	r1, #13
    2f10:	685b      	ldr	r3, [r3, #4]
    2f12:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2f14:	6828      	ldr	r0, [r5, #0]
    2f16:	6883      	ldr	r3, [r0, #8]
    2f18:	b2e1      	uxtb	r1, r4
    2f1a:	685b      	ldr	r3, [r3, #4]
    2f1c:	4798      	blx	r3
}
    2f1e:	4620      	mov	r0, r4
    2f20:	bd38      	pop	{r3, r4, r5, pc}
    2f22:	bf00      	nop
    2f24:	20001394 	.word	0x20001394

00002f28 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2f28:	b570      	push	{r4, r5, r6, lr}
    2f2a:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    2f2c:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    2f2e:	480d      	ldr	r0, [pc, #52]	; (2f64 <onoff_stop+0x3c>)
{
    2f30:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2f32:	1a23      	subs	r3, r4, r0
    2f34:	109a      	asrs	r2, r3, #2
    2f36:	4b0c      	ldr	r3, [pc, #48]	; (2f68 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    2f38:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2f3a:	4353      	muls	r3, r2
    2f3c:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    2f3e:	435d      	muls	r5, r3
    2f40:	f105 0378 	add.w	r3, r5, #120	; 0x78
    2f44:	4418      	add	r0, r3
    2f46:	f015 faba 	bl	184be <set_off_state>
	if (err < 0) {
    2f4a:	1e01      	subs	r1, r0, #0
    2f4c:	db04      	blt.n	2f58 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2f4e:	4b07      	ldr	r3, [pc, #28]	; (2f6c <onoff_stop+0x44>)
    2f50:	442b      	add	r3, r5
    2f52:	685b      	ldr	r3, [r3, #4]
    2f54:	4798      	blx	r3
	return 0;
    2f56:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2f58:	4620      	mov	r0, r4
    2f5a:	4633      	mov	r3, r6
}
    2f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2f60:	4718      	bx	r3
    2f62:	bf00      	nop
    2f64:	200013a8 	.word	0x200013a8
    2f68:	b6db6db7 	.word	0xb6db6db7
    2f6c:	00023580 	.word	0x00023580

00002f70 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2f74:	4c0f      	ldr	r4, [pc, #60]	; (2fb4 <onoff_start+0x44>)
    2f76:	4d10      	ldr	r5, [pc, #64]	; (2fb8 <onoff_start+0x48>)
    2f78:	1b03      	subs	r3, r0, r4
    2f7a:	109b      	asrs	r3, r3, #2
    2f7c:	435d      	muls	r5, r3
    2f7e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    2f80:	250c      	movs	r5, #12
    2f82:	435d      	muls	r5, r3
{
    2f84:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    2f86:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
    2f8a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    2f8c:	4420      	add	r0, r4
    2f8e:	2140      	movs	r1, #64	; 0x40
    2f90:	f015 faae 	bl	184f0 <set_starting_state>
	if (err < 0) {
    2f94:	1e01      	subs	r1, r0, #0
    2f96:	db08      	blt.n	2faa <onoff_start+0x3a>
	subdata->cb = cb;
    2f98:	4b08      	ldr	r3, [pc, #32]	; (2fbc <onoff_start+0x4c>)
    2f9a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    2f9c:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    2fa0:	4b07      	ldr	r3, [pc, #28]	; (2fc0 <onoff_start+0x50>)
    2fa2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2fa8:	4718      	bx	r3
		notify(mgr, err);
    2faa:	4638      	mov	r0, r7
    2fac:	4633      	mov	r3, r6
}
    2fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2fb2:	4718      	bx	r3
    2fb4:	200013a8 	.word	0x200013a8
    2fb8:	b6db6db7 	.word	0xb6db6db7
    2fbc:	00018553 	.word	0x00018553
    2fc0:	00023580 	.word	0x00023580

00002fc4 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    2fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2fc8:	2200      	movs	r2, #0
    2fca:	2101      	movs	r1, #1
{
    2fcc:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2fce:	2005      	movs	r0, #5
    2fd0:	f001 f870 	bl	40b4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2fd4:	2005      	movs	r0, #5
    2fd6:	f001 f84f 	bl	4078 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2fda:	4811      	ldr	r0, [pc, #68]	; (3020 <clk_init+0x5c>)
    2fdc:	f00a fd98 	bl	db10 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2fe0:	4b10      	ldr	r3, [pc, #64]	; (3024 <clk_init+0x60>)
    2fe2:	4298      	cmp	r0, r3
    2fe4:	d119      	bne.n	301a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2fe6:	f018 fe1e 	bl	1bc26 <nrfx_clock_enable>
    2fea:	2400      	movs	r4, #0
	return &data->mgr[type];
    2fec:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2ff0:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2ff2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 3028 <clk_init+0x64>
						get_sub_data(dev, i);
    2ff6:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2ff8:	4649      	mov	r1, r9
    2ffa:	fb08 5004 	mla	r0, r8, r4, r5
    2ffe:	f014 fba7 	bl	17750 <onoff_manager_init>
		if (err < 0) {
    3002:	2800      	cmp	r0, #0
    3004:	db07      	blt.n	3016 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3006:	2301      	movs	r3, #1
    3008:	fb07 5504 	mla	r5, r7, r4, r5
    300c:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
    300e:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3010:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    3012:	d1f0      	bne.n	2ff6 <clk_init+0x32>
	}

	return 0;
    3014:	2000      	movs	r0, #0
}
    3016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    301a:	f06f 0004 	mvn.w	r0, #4
    301e:	e7fa      	b.n	3016 <clk_init+0x52>
    3020:	00003061 	.word	0x00003061
    3024:	0bad0000 	.word	0x0bad0000
    3028:	000235b0 	.word	0x000235b0

0000302c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    302c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    302e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    3030:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    3032:	434b      	muls	r3, r1
    3034:	4808      	ldr	r0, [pc, #32]	; (3058 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    3036:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3038:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    303a:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    303c:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    3040:	4418      	add	r0, r3
	sub_data->cb = NULL;
    3042:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    3044:	f015 fa72 	bl	1852c <set_on_state>
	if (callback) {
    3048:	b12d      	cbz	r5, 3056 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    304a:	4632      	mov	r2, r6
    304c:	462b      	mov	r3, r5
}
    304e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3052:	4802      	ldr	r0, [pc, #8]	; (305c <clkstarted_handle.constprop.0+0x30>)
    3054:	4718      	bx	r3
}
    3056:	bd70      	pop	{r4, r5, r6, pc}
    3058:	200013a8 	.word	0x200013a8
    305c:	200004dc 	.word	0x200004dc

00003060 <clock_event_handler>:
	switch (event) {
    3060:	2805      	cmp	r0, #5
    3062:	d811      	bhi.n	3088 <clock_event_handler+0x28>
    3064:	e8df f000 	tbb	[pc, r0]
    3068:	10100e03 	.word	0x10100e03
    306c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    306e:	4b07      	ldr	r3, [pc, #28]	; (308c <clock_event_handler+0x2c>)
    3070:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3072:	f010 0007 	ands.w	r0, r0, #7
    3076:	d107      	bne.n	3088 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3078:	f7ff bfd8 	b.w	302c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    307c:	2002      	movs	r0, #2
    307e:	e7fb      	b.n	3078 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    3080:	2003      	movs	r0, #3
    3082:	e7f9      	b.n	3078 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3084:	2001      	movs	r0, #1
    3086:	e7f7      	b.n	3078 <clock_event_handler+0x18>
}
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	200013a8 	.word	0x200013a8

00003090 <generic_hfclk_start>:
{
    3090:	b508      	push	{r3, lr}
    3092:	f04f 0320 	mov.w	r3, #32
    3096:	f3ef 8111 	mrs	r1, BASEPRI
    309a:	f383 8811 	msr	BASEPRI, r3
    309e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    30a2:	4a12      	ldr	r2, [pc, #72]	; (30ec <generic_hfclk_start+0x5c>)
    30a4:	6813      	ldr	r3, [r2, #0]
    30a6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    30aa:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    30ae:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    30b0:	d00c      	beq.n	30cc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    30b2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    30b6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    30ba:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    30be:	f013 0301 	ands.w	r3, r3, #1
    30c2:	d003      	beq.n	30cc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    30c4:	480a      	ldr	r0, [pc, #40]	; (30f0 <generic_hfclk_start+0x60>)
    30c6:	f015 fa31 	bl	1852c <set_on_state>
			already_started = true;
    30ca:	2301      	movs	r3, #1
	__asm__ volatile(
    30cc:	f381 8811 	msr	BASEPRI, r1
    30d0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    30d4:	b123      	cbz	r3, 30e0 <generic_hfclk_start+0x50>
}
    30d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    30da:	2000      	movs	r0, #0
    30dc:	f7ff bfa6 	b.w	302c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    30e0:	2001      	movs	r0, #1
}
    30e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    30e6:	f00a bd23 	b.w	db30 <nrfx_clock_start>
    30ea:	bf00      	nop
    30ec:	20001448 	.word	0x20001448
    30f0:	20001420 	.word	0x20001420

000030f4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30f4:	4b07      	ldr	r3, [pc, #28]	; (3114 <generic_hfclk_stop+0x20>)
    30f6:	e8d3 2fef 	ldaex	r2, [r3]
    30fa:	f022 0102 	bic.w	r1, r2, #2
    30fe:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3102:	2800      	cmp	r0, #0
    3104:	d1f7      	bne.n	30f6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3106:	07d3      	lsls	r3, r2, #31
    3108:	d402      	bmi.n	3110 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    310a:	2001      	movs	r0, #1
    310c:	f00a bd64 	b.w	dbd8 <nrfx_clock_stop>
}
    3110:	4770      	bx	lr
    3112:	bf00      	nop
    3114:	20001448 	.word	0x20001448

00003118 <api_blocking_start>:
{
    3118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    311a:	2200      	movs	r2, #0
    311c:	2301      	movs	r3, #1
    311e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3122:	ab04      	add	r3, sp, #16
    3124:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3128:	4a09      	ldr	r2, [pc, #36]	; (3150 <api_blocking_start+0x38>)
    312a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    312c:	f8cd d000 	str.w	sp, [sp]
    3130:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3134:	f015 fa3f 	bl	185b6 <api_start>
	if (err < 0) {
    3138:	2800      	cmp	r0, #0
    313a:	db05      	blt.n	3148 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    313c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3140:	2300      	movs	r3, #0
    3142:	4668      	mov	r0, sp
    3144:	f013 fc94 	bl	16a70 <z_impl_k_sem_take>
}
    3148:	b007      	add	sp, #28
    314a:	f85d fb04 	ldr.w	pc, [sp], #4
    314e:	bf00      	nop
    3150:	00018589 	.word	0x00018589

00003154 <z_nrf_clock_control_lf_on>:
{
    3154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3158:	2201      	movs	r2, #1
    315a:	4606      	mov	r6, r0
    315c:	4939      	ldr	r1, [pc, #228]	; (3244 <z_nrf_clock_control_lf_on+0xf0>)
    315e:	e8d1 3fef 	ldaex	r3, [r1]
    3162:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3166:	2800      	cmp	r0, #0
    3168:	d1f9      	bne.n	315e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    316a:	b933      	cbnz	r3, 317a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    316c:	4936      	ldr	r1, [pc, #216]	; (3248 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    316e:	4837      	ldr	r0, [pc, #220]	; (324c <z_nrf_clock_control_lf_on+0xf8>)
    3170:	604b      	str	r3, [r1, #4]
    3172:	60cb      	str	r3, [r1, #12]
    3174:	608a      	str	r2, [r1, #8]
    3176:	f014 fafe 	bl	17776 <onoff_request>
	switch (start_mode) {
    317a:	1e73      	subs	r3, r6, #1
    317c:	2b01      	cmp	r3, #1
    317e:	d832      	bhi.n	31e6 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3180:	2e01      	cmp	r6, #1
    3182:	d107      	bne.n	3194 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3184:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3188:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    318c:	f003 0303 	and.w	r3, r3, #3
    3190:	2b02      	cmp	r3, #2
    3192:	d028      	beq.n	31e6 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3194:	f01f fc76 	bl	22a84 <k_is_in_isr>
    3198:	4604      	mov	r4, r0
    319a:	b918      	cbnz	r0, 31a4 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    319c:	4b2c      	ldr	r3, [pc, #176]	; (3250 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d147      	bne.n	3234 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    31a4:	f04f 0320 	mov.w	r3, #32
    31a8:	f3ef 8511 	mrs	r5, BASEPRI
    31ac:	f383 8811 	msr	BASEPRI, r3
    31b0:	f3bf 8f6f 	isb	sy
    31b4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31b6:	4f27      	ldr	r7, [pc, #156]	; (3254 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31b8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3258 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31bc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 325c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    31c0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    31c4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    31c8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    31cc:	03d2      	lsls	r2, r2, #15
    31ce:	d50c      	bpl.n	31ea <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    31d0:	f003 0303 	and.w	r3, r3, #3
    31d4:	2b02      	cmp	r3, #2
    31d6:	d001      	beq.n	31dc <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    31d8:	2e01      	cmp	r6, #1
    31da:	d106      	bne.n	31ea <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    31dc:	b324      	cbz	r4, 3228 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    31de:	f385 8811 	msr	BASEPRI, r5
    31e2:	f3bf 8f6f 	isb	sy
}
    31e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    31ea:	b1c4      	cbz	r4, 321e <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    31ec:	4628      	mov	r0, r5
    31ee:	f000 ffc1 	bl	4174 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    31f2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    31f6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    31fa:	b2db      	uxtb	r3, r3
    31fc:	2b01      	cmp	r3, #1
    31fe:	d1df      	bne.n	31c0 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3200:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3202:	2900      	cmp	r1, #0
    3204:	d0dc      	beq.n	31c0 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3206:	2100      	movs	r1, #0
    3208:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    320a:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    320c:	2102      	movs	r1, #2
    320e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    3212:	2220      	movs	r2, #32
    3214:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3218:	f8c9 3000 	str.w	r3, [r9]
}
    321c:	e7d0      	b.n	31c0 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    321e:	2100      	movs	r1, #0
    3220:	2021      	movs	r0, #33	; 0x21
    3222:	f013 fbd7 	bl	169d4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3226:	e7e4      	b.n	31f2 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    3228:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    322c:	2202      	movs	r2, #2
    322e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3232:	e7d8      	b.n	31e6 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    3234:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3238:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    323a:	4605      	mov	r5, r0
    323c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    3240:	e7b9      	b.n	31b6 <z_nrf_clock_control_lf_on+0x62>
    3242:	bf00      	nop
    3244:	2000144c 	.word	0x2000144c
    3248:	20001398 	.word	0x20001398
    324c:	200013c4 	.word	0x200013c4
    3250:	2002a186 	.word	0x2002a186
    3254:	50005104 	.word	0x50005104
    3258:	e000e100 	.word	0xe000e100
    325c:	50005008 	.word	0x50005008

00003260 <ili9xxx_set_contrast>:
	return -ENOTSUP;
}

static int ili9xxx_set_contrast(const struct device *dev,
				const uint8_t contrast)
{
    3260:	b508      	push	{r3, lr}
    3262:	4906      	ldr	r1, [pc, #24]	; (327c <ili9xxx_set_contrast+0x1c>)
    3264:	4b06      	ldr	r3, [pc, #24]	; (3280 <ili9xxx_set_contrast+0x20>)
	LOG_ERR("Set contrast not supported");
    3266:	4807      	ldr	r0, [pc, #28]	; (3284 <ili9xxx_set_contrast+0x24>)
    3268:	1ac9      	subs	r1, r1, r3
    326a:	08c9      	lsrs	r1, r1, #3
    326c:	0189      	lsls	r1, r1, #6
    326e:	f041 0101 	orr.w	r1, r1, #1
    3272:	f014 fe2b 	bl	17ecc <log_0>
	return -ENOTSUP;
}
    3276:	f06f 0022 	mvn.w	r0, #34	; 0x22
    327a:	bd08      	pop	{r3, pc}
    327c:	0002335c 	.word	0x0002335c
    3280:	000232ec 	.word	0x000232ec
    3284:	000248c4 	.word	0x000248c4

00003288 <ili9xxx_set_brightness>:
{
    3288:	b508      	push	{r3, lr}
    328a:	4906      	ldr	r1, [pc, #24]	; (32a4 <ili9xxx_set_brightness+0x1c>)
    328c:	4b06      	ldr	r3, [pc, #24]	; (32a8 <ili9xxx_set_brightness+0x20>)
	LOG_ERR("Set brightness not implemented");
    328e:	4807      	ldr	r0, [pc, #28]	; (32ac <ili9xxx_set_brightness+0x24>)
    3290:	1ac9      	subs	r1, r1, r3
    3292:	08c9      	lsrs	r1, r1, #3
    3294:	0189      	lsls	r1, r1, #6
    3296:	f041 0101 	orr.w	r1, r1, #1
    329a:	f014 fe17 	bl	17ecc <log_0>
}
    329e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    32a2:	bd08      	pop	{r3, pc}
    32a4:	0002335c 	.word	0x0002335c
    32a8:	000232ec 	.word	0x000232ec
    32ac:	000248df 	.word	0x000248df

000032b0 <ili9xxx_get_framebuffer>:
{
    32b0:	b508      	push	{r3, lr}
    32b2:	4906      	ldr	r1, [pc, #24]	; (32cc <ili9xxx_get_framebuffer+0x1c>)
    32b4:	4b06      	ldr	r3, [pc, #24]	; (32d0 <ili9xxx_get_framebuffer+0x20>)
	LOG_ERR("Direct framebuffer access not supported");
    32b6:	4807      	ldr	r0, [pc, #28]	; (32d4 <ili9xxx_get_framebuffer+0x24>)
    32b8:	1ac9      	subs	r1, r1, r3
    32ba:	08c9      	lsrs	r1, r1, #3
    32bc:	0189      	lsls	r1, r1, #6
    32be:	f041 0101 	orr.w	r1, r1, #1
    32c2:	f014 fe03 	bl	17ecc <log_0>
}
    32c6:	2000      	movs	r0, #0
    32c8:	bd08      	pop	{r3, pc}
    32ca:	bf00      	nop
    32cc:	0002335c 	.word	0x0002335c
    32d0:	000232ec 	.word	0x000232ec
    32d4:	000248fe 	.word	0x000248fe

000032d8 <ili9xxx_read>:
{
    32d8:	b508      	push	{r3, lr}
    32da:	4906      	ldr	r1, [pc, #24]	; (32f4 <ili9xxx_read+0x1c>)
    32dc:	4b06      	ldr	r3, [pc, #24]	; (32f8 <ili9xxx_read+0x20>)
	LOG_ERR("Reading not supported");
    32de:	4807      	ldr	r0, [pc, #28]	; (32fc <ili9xxx_read+0x24>)
    32e0:	1ac9      	subs	r1, r1, r3
    32e2:	08c9      	lsrs	r1, r1, #3
    32e4:	0189      	lsls	r1, r1, #6
    32e6:	f041 0101 	orr.w	r1, r1, #1
    32ea:	f014 fdef 	bl	17ecc <log_0>
}
    32ee:	f06f 0022 	mvn.w	r0, #34	; 0x22
    32f2:	bd08      	pop	{r3, pc}
    32f4:	0002335c 	.word	0x0002335c
    32f8:	000232ec 	.word	0x000232ec
    32fc:	00024926 	.word	0x00024926

00003300 <ili9xxx_set_pixel_format>:

	int r;
	uint8_t tx_data;
	uint8_t bytes_per_pixel;

	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3300:	2910      	cmp	r1, #16
{
    3302:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3304:	460c      	mov	r4, r1
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
    3306:	68c5      	ldr	r5, [r0, #12]
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3308:	d111      	bne.n	332e <ili9xxx_set_pixel_format+0x2e>
		bytes_per_pixel = 2U;
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
    330a:	2355      	movs	r3, #85	; 0x55
		bytes_per_pixel = 2U;
    330c:	2602      	movs	r6, #2
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
    330e:	f88d 3007 	strb.w	r3, [sp, #7]
	} else {
		LOG_ERR("Unsupported pixel format");
		return -ENOTSUP;
	}

	r = ili9xxx_transmit(dev, ILI9XXX_PIXSET, &tx_data, 1U);
    3312:	2301      	movs	r3, #1
    3314:	213a      	movs	r1, #58	; 0x3a
    3316:	f10d 0207 	add.w	r2, sp, #7
    331a:	f015 f9ae 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
    331e:	2800      	cmp	r0, #0
	}

	data->pixel_format = pixel_format;
	data->bytes_per_pixel = bytes_per_pixel;

	return 0;
    3320:	bfa2      	ittt	ge
    3322:	2000      	movge	r0, #0
	data->pixel_format = pixel_format;
    3324:	f885 4025 	strbge.w	r4, [r5, #37]	; 0x25
	data->bytes_per_pixel = bytes_per_pixel;
    3328:	f885 6024 	strbge.w	r6, [r5, #36]	; 0x24
	return 0;
    332c:	e012      	b.n	3354 <ili9xxx_set_pixel_format+0x54>
	} else if (pixel_format == PIXEL_FORMAT_RGB_888) {
    332e:	2901      	cmp	r1, #1
    3330:	d104      	bne.n	333c <ili9xxx_set_pixel_format+0x3c>
		tx_data = ILI9XXX_PIXSET_MCU_18_BIT | ILI9XXX_PIXSET_RGB_18_BIT;
    3332:	2366      	movs	r3, #102	; 0x66
		bytes_per_pixel = 3U;
    3334:	2603      	movs	r6, #3
		tx_data = ILI9XXX_PIXSET_MCU_18_BIT | ILI9XXX_PIXSET_RGB_18_BIT;
    3336:	f88d 3007 	strb.w	r3, [sp, #7]
    333a:	e7ea      	b.n	3312 <ili9xxx_set_pixel_format+0x12>
    333c:	4b06      	ldr	r3, [pc, #24]	; (3358 <ili9xxx_set_pixel_format+0x58>)
    333e:	4907      	ldr	r1, [pc, #28]	; (335c <ili9xxx_set_pixel_format+0x5c>)
		LOG_ERR("Unsupported pixel format");
    3340:	4807      	ldr	r0, [pc, #28]	; (3360 <ili9xxx_set_pixel_format+0x60>)
    3342:	1ac9      	subs	r1, r1, r3
    3344:	08c9      	lsrs	r1, r1, #3
    3346:	0189      	lsls	r1, r1, #6
    3348:	f041 0101 	orr.w	r1, r1, #1
    334c:	f014 fdbe 	bl	17ecc <log_0>
		return -ENOTSUP;
    3350:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    3354:	b002      	add	sp, #8
    3356:	bd70      	pop	{r4, r5, r6, pc}
    3358:	000232ec 	.word	0x000232ec
    335c:	0002335c 	.word	0x0002335c
    3360:	0002493c 	.word	0x0002493c

00003364 <ili9xxx_init>:

	return 0;
}

static int ili9xxx_init(const struct device *dev)
{
    3364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct ili9xxx_config *config =
    3366:	6845      	ldr	r5, [r0, #4]
{
    3368:	4606      	mov	r6, r0
		(struct ili9xxx_config *)dev->config;
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
    336a:	68c7      	ldr	r7, [r0, #12]

	int r;

	data->spi_dev = device_get_binding(config->spi_name);
    336c:	6828      	ldr	r0, [r5, #0]
    336e:	f012 fb8d 	bl	15a8c <z_impl_device_get_binding>
    3372:	60b8      	str	r0, [r7, #8]
	if (data->spi_dev == NULL) {
    3374:	b970      	cbnz	r0, 3394 <ili9xxx_init+0x30>
    3376:	4a64      	ldr	r2, [pc, #400]	; (3508 <ili9xxx_init+0x1a4>)
    3378:	4b64      	ldr	r3, [pc, #400]	; (350c <ili9xxx_init+0x1a8>)
		LOG_ERR("Could not get SPI device %s", config->spi_name);
    337a:	6829      	ldr	r1, [r5, #0]
    337c:	1ad2      	subs	r2, r2, r3
    337e:	08d2      	lsrs	r2, r2, #3
    3380:	0192      	lsls	r2, r2, #6
    3382:	4863      	ldr	r0, [pc, #396]	; (3510 <ili9xxx_init+0x1ac>)
    3384:	f042 0201 	orr.w	r2, r2, #1
		data->spi_config.cs = &data->cs_ctrl;
	}

	data->command_data_gpio = device_get_binding(config->cmd_data_label);
	if (data->command_data_gpio == NULL) {
		LOG_ERR("Could not get command/data GPIO port %s",
    3388:	f014 fdad 	bl	17ee6 <log_1>
			config->cmd_data_label);
		return -ENODEV;
    338c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Could not exit sleep mode (%d)", r);
		return r;
	}

	return 0;
}
    3390:	4620      	mov	r0, r4
    3392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data->spi_config.frequency = config->spi_max_freq;
    3394:	68ab      	ldr	r3, [r5, #8]
	data->cs_ctrl.gpio_dev = device_get_binding(config->spi_cs_label);
    3396:	68e8      	ldr	r0, [r5, #12]
	data->spi_config.frequency = config->spi_max_freq;
    3398:	60fb      	str	r3, [r7, #12]
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8U);
    339a:	f44f 7380 	mov.w	r3, #256	; 0x100
    339e:	823b      	strh	r3, [r7, #16]
	data->spi_config.slave = config->spi_addr;
    33a0:	88ab      	ldrh	r3, [r5, #4]
    33a2:	827b      	strh	r3, [r7, #18]
    33a4:	f012 fb72 	bl	15a8c <z_impl_device_get_binding>
	data->cs_ctrl.gpio_dev = device_get_binding(config->spi_cs_label);
    33a8:	61b8      	str	r0, [r7, #24]
	if (data->cs_ctrl.gpio_dev != NULL) {
    33aa:	b150      	cbz	r0, 33c2 <ili9xxx_init+0x5e>
		data->cs_ctrl.gpio_pin = config->spi_cs_pin;
    33ac:	7c2b      	ldrb	r3, [r5, #16]
    33ae:	f887 3020 	strb.w	r3, [r7, #32]
		data->cs_ctrl.gpio_dt_flags = config->spi_cs_flags;
    33b2:	7c6b      	ldrb	r3, [r5, #17]
    33b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		data->cs_ctrl.delay = 0U;
    33b8:	2300      	movs	r3, #0
    33ba:	61fb      	str	r3, [r7, #28]
		data->spi_config.cs = &data->cs_ctrl;
    33bc:	f107 0318 	add.w	r3, r7, #24
    33c0:	617b      	str	r3, [r7, #20]
	data->command_data_gpio = device_get_binding(config->cmd_data_label);
    33c2:	6968      	ldr	r0, [r5, #20]
    33c4:	f012 fb62 	bl	15a8c <z_impl_device_get_binding>
    33c8:	6078      	str	r0, [r7, #4]
	if (data->command_data_gpio == NULL) {
    33ca:	b948      	cbnz	r0, 33e0 <ili9xxx_init+0x7c>
    33cc:	4a4e      	ldr	r2, [pc, #312]	; (3508 <ili9xxx_init+0x1a4>)
    33ce:	4b4f      	ldr	r3, [pc, #316]	; (350c <ili9xxx_init+0x1a8>)
		LOG_ERR("Could not get command/data GPIO port %s",
    33d0:	6969      	ldr	r1, [r5, #20]
    33d2:	1ad2      	subs	r2, r2, r3
    33d4:	08d2      	lsrs	r2, r2, #3
    33d6:	0192      	lsls	r2, r2, #6
    33d8:	484e      	ldr	r0, [pc, #312]	; (3514 <ili9xxx_init+0x1b0>)
    33da:	f042 0201 	orr.w	r2, r2, #1
    33de:	e7d3      	b.n	3388 <ili9xxx_init+0x24>
			       GPIO_OUTPUT | config->cmd_data_flags);
    33e0:	7e6a      	ldrb	r2, [r5, #25]
	r = gpio_pin_configure(data->command_data_gpio, config->cmd_data_pin,
    33e2:	7e29      	ldrb	r1, [r5, #24]
    33e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    33e8:	f015 f8ff 	bl	185ea <gpio_pin_configure>
	if (r < 0) {
    33ec:	1e04      	subs	r4, r0, #0
    33ee:	da0b      	bge.n	3408 <ili9xxx_init+0xa4>
		LOG_ERR("Could not configure command/data GPIO (%d)", r);
    33f0:	4621      	mov	r1, r4
    33f2:	4a45      	ldr	r2, [pc, #276]	; (3508 <ili9xxx_init+0x1a4>)
    33f4:	4b45      	ldr	r3, [pc, #276]	; (350c <ili9xxx_init+0x1a8>)
    33f6:	4848      	ldr	r0, [pc, #288]	; (3518 <ili9xxx_init+0x1b4>)
    33f8:	1ad2      	subs	r2, r2, r3
    33fa:	08d2      	lsrs	r2, r2, #3
    33fc:	0192      	lsls	r2, r2, #6
    33fe:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not exit sleep mode (%d)", r);
    3402:	f014 fd70 	bl	17ee6 <log_1>
		return r;
    3406:	e7c3      	b.n	3390 <ili9xxx_init+0x2c>
	data->reset_gpio = device_get_binding(config->reset_label);
    3408:	69e8      	ldr	r0, [r5, #28]
    340a:	f012 fb3f 	bl	15a8c <z_impl_device_get_binding>
    340e:	6038      	str	r0, [r7, #0]
	if (data->reset_gpio != NULL) {
    3410:	b198      	cbz	r0, 343a <ili9xxx_init+0xd6>
					       config->reset_flags);
    3412:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
		r = gpio_pin_configure(data->reset_gpio, config->reset_pin,
    3416:	f895 1020 	ldrb.w	r1, [r5, #32]
    341a:	f442 52b0 	orr.w	r2, r2, #5632	; 0x1600
    341e:	f015 f8e4 	bl	185ea <gpio_pin_configure>
		if (r < 0) {
    3422:	1e04      	subs	r4, r0, #0
    3424:	da09      	bge.n	343a <ili9xxx_init+0xd6>
    3426:	4a38      	ldr	r2, [pc, #224]	; (3508 <ili9xxx_init+0x1a4>)
    3428:	4b38      	ldr	r3, [pc, #224]	; (350c <ili9xxx_init+0x1a8>)
			LOG_ERR("Could not configure reset GPIO (%d)", r);
    342a:	4621      	mov	r1, r4
    342c:	1ad2      	subs	r2, r2, r3
    342e:	08d2      	lsrs	r2, r2, #3
    3430:	0192      	lsls	r2, r2, #6
    3432:	483a      	ldr	r0, [pc, #232]	; (351c <ili9xxx_init+0x1b8>)
    3434:	f042 0201 	orr.w	r2, r2, #1
    3438:	e7e3      	b.n	3402 <ili9xxx_init+0x9e>
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
    343a:	68f4      	ldr	r4, [r6, #12]
	if (data->reset_gpio == NULL) {
    343c:	6820      	ldr	r0, [r4, #0]
    343e:	b198      	cbz	r0, 3468 <ili9xxx_init+0x104>
	const struct ili9xxx_config *config =
    3440:	6875      	ldr	r5, [r6, #4]
	gpio_pin_set(data->reset_gpio, config->reset_pin, 1);
    3442:	2201      	movs	r2, #1
    3444:	f895 1020 	ldrb.w	r1, [r5, #32]
    3448:	f015 f8ec 	bl	18624 <gpio_pin_set>
    344c:	2100      	movs	r1, #0
    344e:	2021      	movs	r0, #33	; 0x21
    3450:	f013 fac0 	bl	169d4 <z_impl_k_sleep>
	gpio_pin_set(data->reset_gpio, config->reset_pin, 0);
    3454:	2200      	movs	r2, #0
    3456:	f895 1020 	ldrb.w	r1, [r5, #32]
    345a:	6820      	ldr	r0, [r4, #0]
    345c:	f015 f8e2 	bl	18624 <gpio_pin_set>
    3460:	20a4      	movs	r0, #164	; 0xa4
    3462:	2100      	movs	r1, #0
    3464:	f013 fab6 	bl	169d4 <z_impl_k_sleep>
	const struct ili9xxx_config *config =
    3468:	6875      	ldr	r5, [r6, #4]
	r = ili9xxx_set_pixel_format(dev, pixel_format);
    346a:	4630      	mov	r0, r6
	if (config->pixel_format == ILI9XXX_PIXEL_FORMAT_RGB565) {
    346c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
		pixel_format = PIXEL_FORMAT_RGB_888;
    3470:	2b00      	cmp	r3, #0
	r = ili9xxx_set_pixel_format(dev, pixel_format);
    3472:	bf0c      	ite	eq
    3474:	2110      	moveq	r1, #16
    3476:	2101      	movne	r1, #1
    3478:	f7ff ff42 	bl	3300 <ili9xxx_set_pixel_format>
	if (r < 0) {
    347c:	1e04      	subs	r4, r0, #0
    347e:	db14      	blt.n	34aa <ili9xxx_init+0x146>
	if (config->rotation == 0U) {
    3480:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
    3482:	b129      	cbz	r1, 3490 <ili9xxx_init+0x12c>
	} else if (config->rotation == 90U) {
    3484:	295a      	cmp	r1, #90	; 0x5a
    3486:	d01a      	beq.n	34be <ili9xxx_init+0x15a>
		orientation = DISPLAY_ORIENTATION_ROTATED_270;
    3488:	29b4      	cmp	r1, #180	; 0xb4
    348a:	bf0c      	ite	eq
    348c:	2102      	moveq	r1, #2
    348e:	2103      	movne	r1, #3
	r = ili9xxx_set_orientation(dev, orientation);
    3490:	4630      	mov	r0, r6
    3492:	f015 f929 	bl	186e8 <ili9xxx_set_orientation>
	if (r < 0) {
    3496:	1e04      	subs	r4, r0, #0
    3498:	db07      	blt.n	34aa <ili9xxx_init+0x146>
	if (config->inversion) {
    349a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    349e:	b983      	cbnz	r3, 34c2 <ili9xxx_init+0x15e>
	r = config->regs_init_fn(dev);
    34a0:	4630      	mov	r0, r6
    34a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    34a4:	4798      	blx	r3
	if (r < 0) {
    34a6:	1e04      	subs	r4, r0, #0
    34a8:	da14      	bge.n	34d4 <ili9xxx_init+0x170>
    34aa:	4a17      	ldr	r2, [pc, #92]	; (3508 <ili9xxx_init+0x1a4>)
    34ac:	4b17      	ldr	r3, [pc, #92]	; (350c <ili9xxx_init+0x1a8>)
		LOG_ERR("Could not configure display (%d)", r);
    34ae:	4621      	mov	r1, r4
    34b0:	1ad2      	subs	r2, r2, r3
    34b2:	08d2      	lsrs	r2, r2, #3
    34b4:	0192      	lsls	r2, r2, #6
    34b6:	481a      	ldr	r0, [pc, #104]	; (3520 <ili9xxx_init+0x1bc>)
    34b8:	f042 0201 	orr.w	r2, r2, #1
    34bc:	e7a1      	b.n	3402 <ili9xxx_init+0x9e>
		orientation = DISPLAY_ORIENTATION_ROTATED_90;
    34be:	2101      	movs	r1, #1
    34c0:	e7e6      	b.n	3490 <ili9xxx_init+0x12c>
		r = ili9xxx_transmit(dev, ILI9XXX_DINVON, NULL, 0U);
    34c2:	2300      	movs	r3, #0
    34c4:	2121      	movs	r1, #33	; 0x21
    34c6:	461a      	mov	r2, r3
    34c8:	4630      	mov	r0, r6
    34ca:	f015 f8d6 	bl	1867a <ili9xxx_transmit>
		if (r < 0) {
    34ce:	1e04      	subs	r4, r0, #0
    34d0:	dae6      	bge.n	34a0 <ili9xxx_init+0x13c>
    34d2:	e7ea      	b.n	34aa <ili9xxx_init+0x146>
	r = ili9xxx_transmit(dev, ILI9XXX_SLPOUT, NULL, 0);
    34d4:	2300      	movs	r3, #0
    34d6:	2111      	movs	r1, #17
    34d8:	461a      	mov	r2, r3
    34da:	4630      	mov	r0, r6
    34dc:	f015 f8cd 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
    34e0:	1e04      	subs	r4, r0, #0
    34e2:	db06      	blt.n	34f2 <ili9xxx_init+0x18e>
    34e4:	f640 705d 	movw	r0, #3933	; 0xf5d
    34e8:	2100      	movs	r1, #0
    34ea:	f013 fa73 	bl	169d4 <z_impl_k_sleep>
	return 0;
    34ee:	2400      	movs	r4, #0
    34f0:	e74e      	b.n	3390 <ili9xxx_init+0x2c>
    34f2:	4a05      	ldr	r2, [pc, #20]	; (3508 <ili9xxx_init+0x1a4>)
    34f4:	4b05      	ldr	r3, [pc, #20]	; (350c <ili9xxx_init+0x1a8>)
		LOG_ERR("Could not exit sleep mode (%d)", r);
    34f6:	4621      	mov	r1, r4
    34f8:	1ad2      	subs	r2, r2, r3
    34fa:	08d2      	lsrs	r2, r2, #3
    34fc:	0192      	lsls	r2, r2, #6
    34fe:	4809      	ldr	r0, [pc, #36]	; (3524 <ili9xxx_init+0x1c0>)
    3500:	f042 0201 	orr.w	r2, r2, #1
    3504:	e77d      	b.n	3402 <ili9xxx_init+0x9e>
    3506:	bf00      	nop
    3508:	0002335c 	.word	0x0002335c
    350c:	000232ec 	.word	0x000232ec
    3510:	00024955 	.word	0x00024955
    3514:	00024971 	.word	0x00024971
    3518:	00024999 	.word	0x00024999
    351c:	000249c4 	.word	0x000249c4
    3520:	000249e8 	.word	0x000249e8
    3524:	00024a09 	.word	0x00024a09

00003528 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    3528:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    352a:	f000 f95b 	bl	37e4 <bt_rpmsg_platform_init>
	if (err < 0) {
    352e:	1e04      	subs	r4, r0, #0
    3530:	da0c      	bge.n	354c <bt_rpmsg_init+0x24>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    3532:	4621      	mov	r1, r4
    3534:	4a0d      	ldr	r2, [pc, #52]	; (356c <bt_rpmsg_init+0x44>)
    3536:	4b0e      	ldr	r3, [pc, #56]	; (3570 <bt_rpmsg_init+0x48>)
    3538:	480e      	ldr	r0, [pc, #56]	; (3574 <bt_rpmsg_init+0x4c>)
    353a:	1ad2      	subs	r2, r2, r3
    353c:	08d2      	lsrs	r2, r2, #3
    353e:	0192      	lsls	r2, r2, #6
    3540:	f042 0201 	orr.w	r2, r2, #1
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    3544:	f014 fccf 	bl	17ee6 <log_1>
	}

	return err;
}
    3548:	4620      	mov	r0, r4
    354a:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    354c:	480a      	ldr	r0, [pc, #40]	; (3578 <bt_rpmsg_init+0x50>)
    354e:	f003 fb8b 	bl	6c68 <bt_hci_driver_register>
	if (err < 0) {
    3552:	1e04      	subs	r4, r0, #0
    3554:	daf8      	bge.n	3548 <bt_rpmsg_init+0x20>
    3556:	4a05      	ldr	r2, [pc, #20]	; (356c <bt_rpmsg_init+0x44>)
    3558:	4b05      	ldr	r3, [pc, #20]	; (3570 <bt_rpmsg_init+0x48>)
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    355a:	4621      	mov	r1, r4
    355c:	1ad2      	subs	r2, r2, r3
    355e:	08d2      	lsrs	r2, r2, #3
    3560:	0192      	lsls	r2, r2, #6
    3562:	4806      	ldr	r0, [pc, #24]	; (357c <bt_rpmsg_init+0x54>)
    3564:	f042 0201 	orr.w	r2, r2, #1
    3568:	e7ec      	b.n	3544 <bt_rpmsg_init+0x1c>
    356a:	bf00      	nop
    356c:	0002331c 	.word	0x0002331c
    3570:	000232ec 	.word	0x000232ec
    3574:	00024a7f 	.word	0x00024a7f
    3578:	00023618 	.word	0x00023618
    357c:	00024aa6 	.word	0x00024aa6

00003580 <bt_rpmsg_send>:
{
    3580:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    3582:	7d01      	ldrb	r1, [r0, #20]
    3584:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3586:	2902      	cmp	r1, #2
    3588:	d012      	beq.n	35b0 <bt_rpmsg_send+0x30>
    358a:	2904      	cmp	r1, #4
    358c:	d00f      	beq.n	35ae <bt_rpmsg_send+0x2e>
    358e:	b309      	cbz	r1, 35d4 <bt_rpmsg_send+0x54>
    3590:	4a11      	ldr	r2, [pc, #68]	; (35d8 <bt_rpmsg_send+0x58>)
    3592:	4b12      	ldr	r3, [pc, #72]	; (35dc <bt_rpmsg_send+0x5c>)
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    3594:	4812      	ldr	r0, [pc, #72]	; (35e0 <bt_rpmsg_send+0x60>)
    3596:	1ad2      	subs	r2, r2, r3
    3598:	08d2      	lsrs	r2, r2, #3
    359a:	0192      	lsls	r2, r2, #6
    359c:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send (err %d)", err);
    35a0:	f014 fca1 	bl	17ee6 <log_1>
	net_buf_unref(buf);
    35a4:	4620      	mov	r0, r4
    35a6:	f009 f9a5 	bl	c8f4 <net_buf_unref>
}
    35aa:	2000      	movs	r0, #0
    35ac:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    35ae:	2105      	movs	r1, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    35b0:	f104 0008 	add.w	r0, r4, #8
    35b4:	f018 f914 	bl	1b7e0 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    35b8:	4620      	mov	r0, r4
    35ba:	f000 f939 	bl	3830 <bt_rpmsg_platform_send>
	if (err < 0) {
    35be:	1e01      	subs	r1, r0, #0
    35c0:	daf0      	bge.n	35a4 <bt_rpmsg_send+0x24>
    35c2:	4a05      	ldr	r2, [pc, #20]	; (35d8 <bt_rpmsg_send+0x58>)
    35c4:	4b05      	ldr	r3, [pc, #20]	; (35dc <bt_rpmsg_send+0x5c>)
		BT_ERR("Failed to send (err %d)", err);
    35c6:	4807      	ldr	r0, [pc, #28]	; (35e4 <bt_rpmsg_send+0x64>)
    35c8:	1ad2      	subs	r2, r2, r3
    35ca:	08d2      	lsrs	r2, r2, #3
    35cc:	0192      	lsls	r2, r2, #6
    35ce:	f042 0201 	orr.w	r2, r2, #1
    35d2:	e7e5      	b.n	35a0 <bt_rpmsg_send+0x20>
	switch (bt_buf_get_type(buf)) {
    35d4:	2101      	movs	r1, #1
    35d6:	e7eb      	b.n	35b0 <bt_rpmsg_send+0x30>
    35d8:	0002331c 	.word	0x0002331c
    35dc:	000232ec 	.word	0x000232ec
    35e0:	00024ad0 	.word	0x00024ad0
    35e4:	00024ae0 	.word	0x00024ae0

000035e8 <bt_rpmsg_rx>:
{
    35e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    35ec:	4680      	mov	r8, r0
{
    35ee:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    35f0:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    35f4:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    35f6:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    35f8:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
	switch (pkt_indicator) {
    35fc:	d010      	beq.n	3620 <bt_rpmsg_rx+0x38>
    35fe:	2805      	cmp	r0, #5
    3600:	f000 8093 	beq.w	372a <bt_rpmsg_rx+0x142>
    3604:	2802      	cmp	r0, #2
    3606:	f040 80c9 	bne.w	379c <bt_rpmsg_rx+0x1b4>
	if (remaining < sizeof(hdr)) {
    360a:	2b03      	cmp	r3, #3
    360c:	d85c      	bhi.n	36c8 <bt_rpmsg_rx+0xe0>
    360e:	4969      	ldr	r1, [pc, #420]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3610:	4b69      	ldr	r3, [pc, #420]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ACL header");
    3612:	486a      	ldr	r0, [pc, #424]	; (37bc <bt_rpmsg_rx+0x1d4>)
    3614:	1ac9      	subs	r1, r1, r3
    3616:	08c9      	lsrs	r1, r1, #3
    3618:	0189      	lsls	r1, r1, #6
    361a:	f041 0101 	orr.w	r1, r1, #1
    361e:	e009      	b.n	3634 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    3620:	2b01      	cmp	r3, #1
    3622:	d80c      	bhi.n	363e <bt_rpmsg_rx+0x56>
    3624:	4963      	ldr	r1, [pc, #396]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3626:	4b64      	ldr	r3, [pc, #400]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for event header");
    3628:	4865      	ldr	r0, [pc, #404]	; (37c0 <bt_rpmsg_rx+0x1d8>)
    362a:	1ac9      	subs	r1, r1, r3
    362c:	08c9      	lsrs	r1, r1, #3
    362e:	0189      	lsls	r1, r1, #6
    3630:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Event payload length is not correct");
    3634:	f014 fc4a 	bl	17ecc <log_0>
}
    3638:	b002      	add	sp, #8
    363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    363e:	7873      	ldrb	r3, [r6, #1]
    3640:	2b3e      	cmp	r3, #62	; 0x3e
    3642:	d119      	bne.n	3678 <bt_rpmsg_rx+0x90>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    3644:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    3646:	2f02      	cmp	r7, #2
    3648:	d018      	beq.n	367c <bt_rpmsg_rx+0x94>
    364a:	f1a7 030d 	sub.w	r3, r7, #13
    364e:	425f      	negs	r7, r3
    3650:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    3652:	2202      	movs	r2, #2
    3654:	4641      	mov	r1, r8
    3656:	a801      	add	r0, sp, #4
    3658:	f015 fdd6 	bl	19208 <memcpy>
	if (remaining != hdr.len) {
    365c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    3660:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    3662:	429d      	cmp	r5, r3
    3664:	d00c      	beq.n	3680 <bt_rpmsg_rx+0x98>
    3666:	4953      	ldr	r1, [pc, #332]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3668:	4b53      	ldr	r3, [pc, #332]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Event payload length is not correct");
    366a:	4856      	ldr	r0, [pc, #344]	; (37c4 <bt_rpmsg_rx+0x1dc>)
    366c:	1ac9      	subs	r1, r1, r3
    366e:	08c9      	lsrs	r1, r1, #3
    3670:	0189      	lsls	r1, r1, #6
    3672:	f041 0101 	orr.w	r1, r1, #1
    3676:	e7dd      	b.n	3634 <bt_rpmsg_rx+0x4c>
		return false;
    3678:	2700      	movs	r7, #0
    367a:	e7ea      	b.n	3652 <bt_rpmsg_rx+0x6a>
			return true;
    367c:	2701      	movs	r7, #1
    367e:	e7e8      	b.n	3652 <bt_rpmsg_rx+0x6a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    3680:	2200      	movs	r2, #0
    3682:	2300      	movs	r3, #0
    3684:	4639      	mov	r1, r7
    3686:	f89d 0004 	ldrb.w	r0, [sp, #4]
    368a:	f001 fc57 	bl	4f3c <bt_buf_get_evt>
	if (!buf) {
    368e:	4604      	mov	r4, r0
    3690:	b950      	cbnz	r0, 36a8 <bt_rpmsg_rx+0xc0>
		if (discardable) {
    3692:	2f00      	cmp	r7, #0
    3694:	d1d0      	bne.n	3638 <bt_rpmsg_rx+0x50>
    3696:	4947      	ldr	r1, [pc, #284]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3698:	4b47      	ldr	r3, [pc, #284]	; (37b8 <bt_rpmsg_rx+0x1d0>)
			BT_ERR("No available event buffers!");
    369a:	484b      	ldr	r0, [pc, #300]	; (37c8 <bt_rpmsg_rx+0x1e0>)
    369c:	1ac9      	subs	r1, r1, r3
    369e:	08c9      	lsrs	r1, r1, #3
    36a0:	0189      	lsls	r1, r1, #6
    36a2:	f041 0101 	orr.w	r1, r1, #1
    36a6:	e7c5      	b.n	3634 <bt_rpmsg_rx+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    36a8:	f100 0708 	add.w	r7, r0, #8
    36ac:	2202      	movs	r2, #2
    36ae:	a901      	add	r1, sp, #4
    36b0:	4638      	mov	r0, r7
    36b2:	f018 f872 	bl	1b79a <net_buf_simple_add_mem>
    36b6:	462a      	mov	r2, r5
    36b8:	1cf1      	adds	r1, r6, #3
    36ba:	4638      	mov	r0, r7
    36bc:	f018 f86d 	bl	1b79a <net_buf_simple_add_mem>
		bt_recv(buf);
    36c0:	4620      	mov	r0, r4
    36c2:	f003 fa9d 	bl	6c00 <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    36c6:	e7b7      	b.n	3638 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    36c8:	2200      	movs	r2, #0
    36ca:	2300      	movs	r3, #0
    36cc:	2003      	movs	r0, #3
    36ce:	f001 fbf9 	bl	4ec4 <bt_buf_get_rx>
	if (buf) {
    36d2:	4604      	mov	r4, r0
    36d4:	b300      	cbz	r0, 3718 <bt_rpmsg_rx+0x130>
		memcpy((void *)&hdr, data, sizeof(hdr));
    36d6:	2204      	movs	r2, #4
    36d8:	4641      	mov	r1, r8
    36da:	eb0d 0002 	add.w	r0, sp, r2
    36de:	f015 fd93 	bl	19208 <memcpy>
    36e2:	2204      	movs	r2, #4
    36e4:	f104 0708 	add.w	r7, r4, #8
    36e8:	4638      	mov	r0, r7
    36ea:	eb0d 0102 	add.w	r1, sp, r2
    36ee:	f018 f854 	bl	1b79a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    36f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    36f6:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    36f8:	429d      	cmp	r5, r3
    36fa:	d04c      	beq.n	3796 <bt_rpmsg_rx+0x1ae>
    36fc:	492d      	ldr	r1, [pc, #180]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    36fe:	4b2e      	ldr	r3, [pc, #184]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ACL payload length is not correct");
    3700:	4832      	ldr	r0, [pc, #200]	; (37cc <bt_rpmsg_rx+0x1e4>)
    3702:	1ac9      	subs	r1, r1, r3
    3704:	08c9      	lsrs	r1, r1, #3
    3706:	0189      	lsls	r1, r1, #6
    3708:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("ISO payload length is not correct");
    370c:	f014 fbde 	bl	17ecc <log_0>
		net_buf_unref(buf);
    3710:	4620      	mov	r0, r4
    3712:	f009 f8ef 	bl	c8f4 <net_buf_unref>
	if (buf) {
    3716:	e78f      	b.n	3638 <bt_rpmsg_rx+0x50>
    3718:	4926      	ldr	r1, [pc, #152]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    371a:	4b27      	ldr	r3, [pc, #156]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ACL buffers!");
    371c:	482c      	ldr	r0, [pc, #176]	; (37d0 <bt_rpmsg_rx+0x1e8>)
    371e:	1ac9      	subs	r1, r1, r3
    3720:	08c9      	lsrs	r1, r1, #3
    3722:	0189      	lsls	r1, r1, #6
    3724:	f041 0101 	orr.w	r1, r1, #1
    3728:	e784      	b.n	3634 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
    372a:	2b03      	cmp	r3, #3
    372c:	d808      	bhi.n	3740 <bt_rpmsg_rx+0x158>
    372e:	4921      	ldr	r1, [pc, #132]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3730:	4b21      	ldr	r3, [pc, #132]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ISO header");
    3732:	4828      	ldr	r0, [pc, #160]	; (37d4 <bt_rpmsg_rx+0x1ec>)
    3734:	1ac9      	subs	r1, r1, r3
    3736:	08c9      	lsrs	r1, r1, #3
    3738:	0189      	lsls	r1, r1, #6
    373a:	f041 0101 	orr.w	r1, r1, #1
    373e:	e779      	b.n	3634 <bt_rpmsg_rx+0x4c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    3740:	2200      	movs	r2, #0
    3742:	2300      	movs	r3, #0
    3744:	f001 fbbe 	bl	4ec4 <bt_buf_get_rx>
	if (buf) {
    3748:	4604      	mov	r4, r0
    374a:	b1d8      	cbz	r0, 3784 <bt_rpmsg_rx+0x19c>
		memcpy((void *)&hdr, data, sizeof(hdr));
    374c:	2204      	movs	r2, #4
    374e:	4641      	mov	r1, r8
    3750:	eb0d 0002 	add.w	r0, sp, r2
    3754:	f015 fd58 	bl	19208 <memcpy>
    3758:	2204      	movs	r2, #4
    375a:	f104 0708 	add.w	r7, r4, #8
    375e:	4638      	mov	r0, r7
    3760:	eb0d 0102 	add.w	r1, sp, r2
    3764:	f018 f819 	bl	1b79a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    3768:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    376c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    376e:	429d      	cmp	r5, r3
    3770:	d011      	beq.n	3796 <bt_rpmsg_rx+0x1ae>
    3772:	4910      	ldr	r1, [pc, #64]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3774:	4b10      	ldr	r3, [pc, #64]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ISO payload length is not correct");
    3776:	4818      	ldr	r0, [pc, #96]	; (37d8 <bt_rpmsg_rx+0x1f0>)
    3778:	1ac9      	subs	r1, r1, r3
    377a:	08c9      	lsrs	r1, r1, #3
    377c:	0189      	lsls	r1, r1, #6
    377e:	f041 0101 	orr.w	r1, r1, #1
    3782:	e7c3      	b.n	370c <bt_rpmsg_rx+0x124>
    3784:	490b      	ldr	r1, [pc, #44]	; (37b4 <bt_rpmsg_rx+0x1cc>)
    3786:	4b0c      	ldr	r3, [pc, #48]	; (37b8 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ISO buffers!");
    3788:	4814      	ldr	r0, [pc, #80]	; (37dc <bt_rpmsg_rx+0x1f4>)
    378a:	1ac9      	subs	r1, r1, r3
    378c:	08c9      	lsrs	r1, r1, #3
    378e:	0189      	lsls	r1, r1, #6
    3790:	f041 0101 	orr.w	r1, r1, #1
    3794:	e74e      	b.n	3634 <bt_rpmsg_rx+0x4c>
    3796:	462a      	mov	r2, r5
    3798:	1d71      	adds	r1, r6, #5
    379a:	e78e      	b.n	36ba <bt_rpmsg_rx+0xd2>
    379c:	4b06      	ldr	r3, [pc, #24]	; (37b8 <bt_rpmsg_rx+0x1d0>)
    379e:	4a05      	ldr	r2, [pc, #20]	; (37b4 <bt_rpmsg_rx+0x1cc>)
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    37a0:	4601      	mov	r1, r0
    37a2:	1ad2      	subs	r2, r2, r3
    37a4:	08d2      	lsrs	r2, r2, #3
    37a6:	0192      	lsls	r2, r2, #6
    37a8:	480d      	ldr	r0, [pc, #52]	; (37e0 <bt_rpmsg_rx+0x1f8>)
    37aa:	f042 0201 	orr.w	r2, r2, #1
    37ae:	f014 fb9a 	bl	17ee6 <log_1>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    37b2:	e741      	b.n	3638 <bt_rpmsg_rx+0x50>
    37b4:	0002331c 	.word	0x0002331c
    37b8:	000232ec 	.word	0x000232ec
    37bc:	00024b59 	.word	0x00024b59
    37c0:	00024af8 	.word	0x00024af8
    37c4:	00024b19 	.word	0x00024b19
    37c8:	00024b3d 	.word	0x00024b3d
    37cc:	00024b92 	.word	0x00024b92
    37d0:	00024b78 	.word	0x00024b78
    37d4:	00024bb4 	.word	0x00024bb4
    37d8:	00024bed 	.word	0x00024bed
    37dc:	00024bd3 	.word	0x00024bd3
    37e0:	00024c0f 	.word	0x00024c0f

000037e4 <bt_rpmsg_platform_init>:

int bt_rpmsg_platform_init(void)
{
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    37e4:	490b      	ldr	r1, [pc, #44]	; (3814 <bt_rpmsg_platform_init+0x30>)
{
    37e6:	b508      	push	{r3, lr}
	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    37e8:	480b      	ldr	r0, [pc, #44]	; (3818 <bt_rpmsg_platform_init+0x34>)
    37ea:	f7ff fb0f 	bl	2e0c <rpmsg_service_register_endpoint>

	if (err < 0) {
    37ee:	1e01      	subs	r1, r0, #0
    37f0:	da0b      	bge.n	380a <bt_rpmsg_platform_init+0x26>
    37f2:	4b0a      	ldr	r3, [pc, #40]	; (381c <bt_rpmsg_platform_init+0x38>)
    37f4:	4a0a      	ldr	r2, [pc, #40]	; (3820 <bt_rpmsg_platform_init+0x3c>)
		LOG_ERR("Registering endpoint failed with %d", err);
    37f6:	480b      	ldr	r0, [pc, #44]	; (3824 <bt_rpmsg_platform_init+0x40>)
    37f8:	1ad2      	subs	r2, r2, r3
    37fa:	08d2      	lsrs	r2, r2, #3
    37fc:	0192      	lsls	r2, r2, #6
    37fe:	f042 0201 	orr.w	r2, r2, #1
    3802:	f014 fb70 	bl	17ee6 <log_1>
		return RPMSG_ERR_INIT;
    3806:	4808      	ldr	r0, [pc, #32]	; (3828 <bt_rpmsg_platform_init+0x44>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    3808:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    380a:	4b08      	ldr	r3, [pc, #32]	; (382c <bt_rpmsg_platform_init+0x48>)
	return RPMSG_SUCCESS;
    380c:	2000      	movs	r0, #0
	endpoint_id = err;
    380e:	6019      	str	r1, [r3, #0]
	return RPMSG_SUCCESS;
    3810:	e7fa      	b.n	3808 <bt_rpmsg_platform_init+0x24>
    3812:	bf00      	nop
    3814:	000188e9 	.word	0x000188e9
    3818:	00024c37 	.word	0x00024c37
    381c:	000232ec 	.word	0x000232ec
    3820:	00023324 	.word	0x00023324
    3824:	00024c42 	.word	0x00024c42
    3828:	fffff82a 	.word	0xfffff82a
    382c:	20001478 	.word	0x20001478

00003830 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    3830:	4b02      	ldr	r3, [pc, #8]	; (383c <bt_rpmsg_platform_send+0xc>)
    3832:	8982      	ldrh	r2, [r0, #12]
    3834:	6881      	ldr	r1, [r0, #8]
    3836:	6818      	ldr	r0, [r3, #0]
    3838:	f7ff bb20 	b.w	2e7c <rpmsg_service_send>
    383c:	20001478 	.word	0x20001478

00003840 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    3840:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    3842:	4b02      	ldr	r3, [pc, #8]	; (384c <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    3844:	6818      	ldr	r0, [r3, #0]
    3846:	f7ff fb0f 	bl	2e68 <rpmsg_service_endpoint_is_bound>
}
    384a:	bd08      	pop	{r3, pc}
    384c:	20001478 	.word	0x20001478

00003850 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3850:	4a04      	ldr	r2, [pc, #16]	; (3864 <sys_clock_timeout_handler+0x14>)
    3852:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3854:	1ac8      	subs	r0, r1, r3
    3856:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    385a:	4403      	add	r3, r0
    385c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    385e:	f013 bbb7 	b.w	16fd0 <z_clock_announce>
    3862:	bf00      	nop
    3864:	20001488 	.word	0x20001488

00003868 <set_absolute_alarm>:
{
    3868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    386c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3870:	f04f 0900 	mov.w	r9, #0
    3874:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3876:	f100 0450 	add.w	r4, r0, #80	; 0x50
    387a:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    387e:	00a4      	lsls	r4, r4, #2
    3880:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    3884:	b2a4      	uxth	r4, r4
    3886:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    388a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    388e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 38fc <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3892:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3896:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    389a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    389c:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    38a0:	eba3 030a 	sub.w	r3, r3, sl
    38a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    38a8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    38ac:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    38ae:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    38b2:	d102      	bne.n	38ba <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    38b4:	2013      	movs	r0, #19
    38b6:	f01f f8eb 	bl	22a90 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    38ba:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    38be:	1aab      	subs	r3, r5, r2
    38c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    38c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    38c8:	bf88      	it	hi
    38ca:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38cc:	f8c4 9000 	str.w	r9, [r4]
    38d0:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    38d2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    38d6:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    38da:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    38de:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    38e2:	459a      	cmp	sl, r3
    38e4:	d006      	beq.n	38f4 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    38e6:	1aeb      	subs	r3, r5, r3
    38e8:	3b02      	subs	r3, #2
    38ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    38ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    38f2:	d801      	bhi.n	38f8 <set_absolute_alarm+0x90>
}
    38f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    38f8:	462b      	mov	r3, r5
    38fa:	e7cf      	b.n	389c <set_absolute_alarm+0x34>
    38fc:	50015000 	.word	0x50015000

00003900 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3902:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3904:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3906:	4e0f      	ldr	r6, [pc, #60]	; (3944 <rtc_nrf_isr+0x44>)
    3908:	4b0f      	ldr	r3, [pc, #60]	; (3948 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    390a:	4a10      	ldr	r2, [pc, #64]	; (394c <rtc_nrf_isr+0x4c>)
    390c:	4618      	mov	r0, r3
    390e:	681d      	ldr	r5, [r3, #0]
    3910:	b104      	cbz	r4, 3914 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3914:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    3918:	03c9      	lsls	r1, r1, #15
    391a:	d5fa      	bpl.n	3912 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    391c:	6831      	ldr	r1, [r6, #0]
    391e:	2900      	cmp	r1, #0
    3920:	d0f7      	beq.n	3912 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3922:	6034      	str	r4, [r6, #0]
    3924:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3926:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    392a:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    392e:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    3930:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    3934:	b125      	cbz	r5, 3940 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    3936:	2000      	movs	r0, #0
    3938:	685a      	ldr	r2, [r3, #4]
    393a:	601f      	str	r7, [r3, #0]
    393c:	47a8      	blx	r5
    393e:	e7e3      	b.n	3908 <rtc_nrf_isr+0x8>
    3940:	6005      	str	r5, [r0, #0]
}
    3942:	e7e6      	b.n	3912 <rtc_nrf_isr+0x12>
    3944:	50015140 	.word	0x50015140
    3948:	2000147c 	.word	0x2000147c
    394c:	50015000 	.word	0x50015000

00003950 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    3950:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    3952:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    3954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3958:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    395c:	4d0d      	ldr	r5, [pc, #52]	; (3994 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    395e:	2101      	movs	r1, #1
    3960:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    3964:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3968:	4b0b      	ldr	r3, [pc, #44]	; (3998 <z_clock_driver_init+0x48>)
    396a:	2015      	movs	r0, #21
    396c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3970:	4622      	mov	r2, r4
    3972:	f000 fb9f 	bl	40b4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3976:	2015      	movs	r0, #21
    3978:	f000 fb7e 	bl	4078 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    397c:	2301      	movs	r3, #1
    397e:	4a07      	ldr	r2, [pc, #28]	; (399c <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3980:	2002      	movs	r0, #2
    3982:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    3984:	4a06      	ldr	r2, [pc, #24]	; (39a0 <z_clock_driver_init+0x50>)
    3986:	602b      	str	r3, [r5, #0]
    3988:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    398a:	f7ff fbe3 	bl	3154 <z_nrf_clock_control_lf_on>

	return 0;
}
    398e:	4620      	mov	r0, r4
    3990:	bd38      	pop	{r3, r4, r5, pc}
    3992:	bf00      	nop
    3994:	50015000 	.word	0x50015000
    3998:	e000e100 	.word	0xe000e100
    399c:	50015008 	.word	0x50015008
    39a0:	20001484 	.word	0x20001484

000039a4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    39a4:	4b13      	ldr	r3, [pc, #76]	; (39f4 <z_clock_set_timeout+0x50>)
    39a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    39aa:	bf08      	it	eq
    39ac:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39ae:	3801      	subs	r0, #1
    39b0:	2800      	cmp	r0, #0
    39b2:	dd1c      	ble.n	39ee <z_clock_set_timeout+0x4a>
    39b4:	4298      	cmp	r0, r3
    39b6:	bfa8      	it	ge
    39b8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    39ba:	4b0f      	ldr	r3, [pc, #60]	; (39f8 <z_clock_set_timeout+0x54>)
    39bc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <z_clock_set_timeout+0x58>)
    39c2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    39c4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    39c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    39ca:	bf18      	it	ne
    39cc:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    39ce:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    39d2:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    39d4:	4a0a      	ldr	r2, [pc, #40]	; (3a00 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    39d6:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    39d8:	480a      	ldr	r0, [pc, #40]	; (3a04 <z_clock_set_timeout+0x60>)
    39da:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    39dc:	2000      	movs	r0, #0
    39de:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    39e0:	4a04      	ldr	r2, [pc, #16]	; (39f4 <z_clock_set_timeout+0x50>)
    39e2:	4293      	cmp	r3, r2
    39e4:	bf94      	ite	ls
    39e6:	18c9      	addls	r1, r1, r3
    39e8:	1889      	addhi	r1, r1, r2
    39ea:	f7ff bf3d 	b.w	3868 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39ee:	2000      	movs	r0, #0
    39f0:	e7e3      	b.n	39ba <z_clock_set_timeout+0x16>
    39f2:	bf00      	nop
    39f4:	007fffff 	.word	0x007fffff
    39f8:	50015000 	.word	0x50015000
    39fc:	20001488 	.word	0x20001488
    3a00:	2000147c 	.word	0x2000147c
    3a04:	00003851 	.word	0x00003851

00003a08 <z_clock_elapsed>:
	__asm__ volatile(
    3a08:	f04f 0220 	mov.w	r2, #32
    3a0c:	f3ef 8311 	mrs	r3, BASEPRI
    3a10:	f382 8811 	msr	BASEPRI, r2
    3a14:	f3bf 8f6f 	isb	sy
    3a18:	4a06      	ldr	r2, [pc, #24]	; (3a34 <z_clock_elapsed+0x2c>)
    3a1a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    3a1e:	4a06      	ldr	r2, [pc, #24]	; (3a38 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    3a20:	6812      	ldr	r2, [r2, #0]
    3a22:	1a80      	subs	r0, r0, r2
    3a24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    3a28:	f383 8811 	msr	BASEPRI, r3
    3a2c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop
    3a34:	50015000 	.word	0x50015000
    3a38:	20001488 	.word	0x20001488

00003a3c <z_timer_cycle_get_32>:
	__asm__ volatile(
    3a3c:	f04f 0320 	mov.w	r3, #32
    3a40:	f3ef 8211 	mrs	r2, BASEPRI
    3a44:	f383 8811 	msr	BASEPRI, r3
    3a48:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    3a4c:	4906      	ldr	r1, [pc, #24]	; (3a68 <z_timer_cycle_get_32+0x2c>)
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <z_timer_cycle_get_32+0x30>)
    3a50:	6808      	ldr	r0, [r1, #0]
    3a52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    3a56:	f382 8811 	msr	BASEPRI, r2
    3a5a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    3a5e:	1a1b      	subs	r3, r3, r0
    3a60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    3a64:	4418      	add	r0, r3
    3a66:	4770      	bx	lr
    3a68:	20001488 	.word	0x20001488
    3a6c:	50015000 	.word	0x50015000

00003a70 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3a70:	4801      	ldr	r0, [pc, #4]	; (3a78 <nrf_cc3xx_platform_abort_init+0x8>)
    3a72:	f013 bca5 	b.w	173c0 <nrf_cc3xx_platform_set_abort>
    3a76:	bf00      	nop
    3a78:	0002362c 	.word	0x0002362c

00003a7c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a7c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a7e:	b308      	cbz	r0, 3ac4 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a80:	6843      	ldr	r3, [r0, #4]
    3a82:	2b04      	cmp	r3, #4
    3a84:	d007      	beq.n	3a96 <mutex_unlock_platform+0x1a>
    3a86:	2b08      	cmp	r3, #8
    3a88:	d013      	beq.n	3ab2 <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a8a:	b1f3      	cbz	r3, 3aca <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3a8c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3a8e:	f012 fbaf 	bl	161f0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3a92:	2000      	movs	r0, #0
    3a94:	e00c      	b.n	3ab0 <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a96:	2200      	movs	r2, #0
    3a98:	6803      	ldr	r3, [r0, #0]
    3a9a:	e8d3 1fef 	ldaex	r1, [r3]
    3a9e:	2901      	cmp	r1, #1
    3aa0:	d103      	bne.n	3aaa <mutex_unlock_platform+0x2e>
    3aa2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d1f7      	bne.n	3a9a <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3aaa:	4809      	ldr	r0, [pc, #36]	; (3ad0 <mutex_unlock_platform+0x54>)
    3aac:	bf08      	it	eq
    3aae:	4610      	moveq	r0, r2
    }
}
    3ab0:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3ab2:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3ab4:	2000      	movs	r0, #0
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	4a06      	ldr	r2, [pc, #24]	; (3ad4 <mutex_unlock_platform+0x58>)
    3aba:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3abe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3ac2:	e7f5      	b.n	3ab0 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ac4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3ac8:	e7f2      	b.n	3ab0 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3aca:	4803      	ldr	r0, [pc, #12]	; (3ad8 <mutex_unlock_platform+0x5c>)
    3acc:	e7f0      	b.n	3ab0 <mutex_unlock_platform+0x34>
    3ace:	bf00      	nop
    3ad0:	ffff8fe9 	.word	0xffff8fe9
    3ad4:	50030000 	.word	0x50030000
    3ad8:	ffff8fea 	.word	0xffff8fea

00003adc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3adc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3ade:	4604      	mov	r4, r0
    3ae0:	b918      	cbnz	r0, 3aea <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3ae2:	4b0d      	ldr	r3, [pc, #52]	; (3b18 <mutex_free_platform+0x3c>)
    3ae4:	480d      	ldr	r0, [pc, #52]	; (3b1c <mutex_free_platform+0x40>)
    3ae6:	685b      	ldr	r3, [r3, #4]
    3ae8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3aea:	6861      	ldr	r1, [r4, #4]
    3aec:	2908      	cmp	r1, #8
    3aee:	d00d      	beq.n	3b0c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3af0:	f031 0304 	bics.w	r3, r1, #4
    3af4:	d00a      	beq.n	3b0c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3af6:	f011 0102 	ands.w	r1, r1, #2
    3afa:	d008      	beq.n	3b0e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3afc:	4621      	mov	r1, r4
    3afe:	4808      	ldr	r0, [pc, #32]	; (3b20 <mutex_free_platform+0x44>)
    3b00:	f012 fad2 	bl	160a8 <k_mem_slab_free>
        mutex->mutex = NULL;
    3b04:	2300      	movs	r3, #0
    3b06:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3b08:	2300      	movs	r3, #0
    3b0a:	6063      	str	r3, [r4, #4]
}
    3b0c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b0e:	2214      	movs	r2, #20
    3b10:	6820      	ldr	r0, [r4, #0]
    3b12:	f015 fba4 	bl	1925e <memset>
    3b16:	e7f7      	b.n	3b08 <mutex_free_platform+0x2c>
    3b18:	20000418 	.word	0x20000418
    3b1c:	00024c84 	.word	0x00024c84
    3b20:	2000148c 	.word	0x2000148c

00003b24 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b24:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b26:	4604      	mov	r4, r0
    3b28:	b918      	cbnz	r0, 3b32 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3b2a:	4b16      	ldr	r3, [pc, #88]	; (3b84 <mutex_init_platform+0x60>)
    3b2c:	4816      	ldr	r0, [pc, #88]	; (3b88 <mutex_init_platform+0x64>)
    3b2e:	685b      	ldr	r3, [r3, #4]
    3b30:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b32:	6863      	ldr	r3, [r4, #4]
    3b34:	2b04      	cmp	r3, #4
    3b36:	d023      	beq.n	3b80 <mutex_init_platform+0x5c>
    3b38:	2b08      	cmp	r3, #8
    3b3a:	d021      	beq.n	3b80 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b3c:	b9cb      	cbnz	r3, 3b72 <mutex_init_platform+0x4e>
    3b3e:	6823      	ldr	r3, [r4, #0]
    3b40:	b9bb      	cbnz	r3, 3b72 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b4a:	4621      	mov	r1, r4
    3b4c:	480f      	ldr	r0, [pc, #60]	; (3b8c <mutex_init_platform+0x68>)
    3b4e:	f012 fa79 	bl	16044 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3b52:	b908      	cbnz	r0, 3b58 <mutex_init_platform+0x34>
    3b54:	6823      	ldr	r3, [r4, #0]
    3b56:	b91b      	cbnz	r3, 3b60 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3b58:	4b0a      	ldr	r3, [pc, #40]	; (3b84 <mutex_init_platform+0x60>)
    3b5a:	480d      	ldr	r0, [pc, #52]	; (3b90 <mutex_init_platform+0x6c>)
    3b5c:	685b      	ldr	r3, [r3, #4]
    3b5e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b60:	2214      	movs	r2, #20
    3b62:	2100      	movs	r1, #0
    3b64:	6820      	ldr	r0, [r4, #0]
    3b66:	f015 fb7a 	bl	1925e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b6a:	6863      	ldr	r3, [r4, #4]
    3b6c:	f043 0302 	orr.w	r3, r3, #2
    3b70:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3b72:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3b74:	f01e fd75 	bl	22662 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3b78:	6863      	ldr	r3, [r4, #4]
    3b7a:	f043 0301 	orr.w	r3, r3, #1
    3b7e:	6063      	str	r3, [r4, #4]
}
    3b80:	bd10      	pop	{r4, pc}
    3b82:	bf00      	nop
    3b84:	20000418 	.word	0x20000418
    3b88:	00024c84 	.word	0x00024c84
    3b8c:	2000148c 	.word	0x2000148c
    3b90:	00024caa 	.word	0x00024caa

00003b94 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b94:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    3b96:	b340      	cbz	r0, 3bea <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    3b98:	6843      	ldr	r3, [r0, #4]
    3b9a:	2b04      	cmp	r3, #4
    3b9c:	d00b      	beq.n	3bb6 <mutex_lock_platform+0x22>
    3b9e:	2b08      	cmp	r3, #8
    3ba0:	d016      	beq.n	3bd0 <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ba2:	b303      	cbz	r3, 3be6 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ba4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bae:	f012 faa7 	bl	16100 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3bb2:	b158      	cbz	r0, 3bcc <mutex_lock_platform+0x38>
    3bb4:	e015      	b.n	3be2 <mutex_lock_platform+0x4e>
    3bb6:	2201      	movs	r2, #1
    3bb8:	6803      	ldr	r3, [r0, #0]
    3bba:	e8d3 1fef 	ldaex	r1, [r3]
    3bbe:	2900      	cmp	r1, #0
    3bc0:	d103      	bne.n	3bca <mutex_lock_platform+0x36>
    3bc2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3bc6:	2800      	cmp	r0, #0
    3bc8:	d1f7      	bne.n	3bba <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bca:	d10a      	bne.n	3be2 <mutex_lock_platform+0x4e>
    3bcc:	2000      	movs	r0, #0
}
    3bce:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3bd0:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3bd2:	4a07      	ldr	r2, [pc, #28]	; (3bf0 <mutex_lock_platform+0x5c>)
    3bd4:	781b      	ldrb	r3, [r3, #0]
    3bd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bde:	2b00      	cmp	r3, #0
    3be0:	d0f4      	beq.n	3bcc <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3be2:	4804      	ldr	r0, [pc, #16]	; (3bf4 <mutex_lock_platform+0x60>)
    3be4:	e7f3      	b.n	3bce <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3be6:	4804      	ldr	r0, [pc, #16]	; (3bf8 <mutex_lock_platform+0x64>)
    3be8:	e7f1      	b.n	3bce <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3bea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3bee:	e7ee      	b.n	3bce <mutex_lock_platform+0x3a>
    3bf0:	50030000 	.word	0x50030000
    3bf4:	ffff8fe9 	.word	0xffff8fe9
    3bf8:	ffff8fea 	.word	0xffff8fea

00003bfc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3bfc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3bfe:	4906      	ldr	r1, [pc, #24]	; (3c18 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3c00:	2340      	movs	r3, #64	; 0x40
    3c02:	2214      	movs	r2, #20
    3c04:	4805      	ldr	r0, [pc, #20]	; (3c1c <nrf_cc3xx_platform_mutex_init+0x20>)
    3c06:	f01e fd11 	bl	2262c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3c0e:	4904      	ldr	r1, [pc, #16]	; (3c20 <nrf_cc3xx_platform_mutex_init+0x24>)
    3c10:	4804      	ldr	r0, [pc, #16]	; (3c24 <nrf_cc3xx_platform_mutex_init+0x28>)
    3c12:	f013 bc27 	b.w	17464 <nrf_cc3xx_platform_set_mutexes>
    3c16:	bf00      	nop
    3c18:	200014a8 	.word	0x200014a8
    3c1c:	2000148c 	.word	0x2000148c
    3c20:	00023644 	.word	0x00023644
    3c24:	00023634 	.word	0x00023634

00003c28 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c2a:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    3c2c:	4e26      	ldr	r6, [pc, #152]	; (3cc8 <tc_aes128_set_encrypt_key+0xa0>)
{
    3c2e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3c30:	ad01      	add	r5, sp, #4
{
    3c32:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3c34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3c40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3c44:	4638      	mov	r0, r7
    3c46:	2f00      	cmp	r7, #0
    3c48:	d039      	beq.n	3cbe <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3c4a:	2c00      	cmp	r4, #0
    3c4c:	d039      	beq.n	3cc2 <tc_aes128_set_encrypt_key+0x9a>
    3c4e:	1f38      	subs	r0, r7, #4
    3c50:	4602      	mov	r2, r0
    3c52:	4621      	mov	r1, r4
    3c54:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c56:	784b      	ldrb	r3, [r1, #1]
    3c58:	780d      	ldrb	r5, [r1, #0]
    3c5a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3c5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3c60:	78cd      	ldrb	r5, [r1, #3]
    3c62:	3104      	adds	r1, #4
    3c64:	432b      	orrs	r3, r5
    3c66:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    3c6a:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3c6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c70:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3c74:	d1ef      	bne.n	3c56 <tc_aes128_set_encrypt_key+0x2e>
    3c76:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c78:	4c14      	ldr	r4, [pc, #80]	; (3ccc <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    3c7a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3c7c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3c7e:	d116      	bne.n	3cae <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c80:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3c84:	5ca5      	ldrb	r5, [r4, r2]
    3c86:	0e1a      	lsrs	r2, r3, #24
    3c88:	5ca2      	ldrb	r2, [r4, r2]
    3c8a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3c8e:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3c92:	5d65      	ldrb	r5, [r4, r5]
    3c94:	b2db      	uxtb	r3, r3
    3c96:	5ce3      	ldrb	r3, [r4, r3]
    3c98:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3c9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3ca0:	ad0c      	add	r5, sp, #48	; 0x30
    3ca2:	f021 0303 	bic.w	r3, r1, #3
    3ca6:	442b      	add	r3, r5
    3ca8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3cac:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3cae:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cb2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3cb4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cb6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3cb8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3cba:	d1de      	bne.n	3c7a <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    3cbc:	2001      	movs	r0, #1
}
    3cbe:	b00d      	add	sp, #52	; 0x34
    3cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3cc2:	4620      	mov	r0, r4
    3cc4:	e7fb      	b.n	3cbe <tc_aes128_set_encrypt_key+0x96>
    3cc6:	bf00      	nop
    3cc8:	00023440 	.word	0x00023440
    3ccc:	00024cd7 	.word	0x00024cd7

00003cd0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cd4:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3cd6:	4606      	mov	r6, r0
{
    3cd8:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    3cda:	2800      	cmp	r0, #0
    3cdc:	d058      	beq.n	3d90 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3cde:	2900      	cmp	r1, #0
    3ce0:	d059      	beq.n	3d96 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3ce2:	2a00      	cmp	r2, #0
    3ce4:	d059      	beq.n	3d9a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3ce6:	2310      	movs	r3, #16
    3ce8:	460a      	mov	r2, r1
    3cea:	4668      	mov	r0, sp
    3cec:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    3cee:	4c2c      	ldr	r4, [pc, #176]	; (3da0 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    3cf0:	f014 fe07 	bl	18902 <_copy>
	add_round_key(state, s->words);
    3cf4:	4629      	mov	r1, r5
    3cf6:	4668      	mov	r0, sp
    3cf8:	f014 fe1b 	bl	18932 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3cfc:	46a1      	mov	r9, r4
    3cfe:	f105 0710 	add.w	r7, r5, #16
    3d02:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    3d04:	46e8      	mov	r8, sp
{
    3d06:	466a      	mov	r2, sp
    3d08:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    3d0a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d0c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3d0e:	5c61      	ldrb	r1, [r4, r1]
    3d10:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3d14:	d1f9      	bne.n	3d0a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    3d16:	4668      	mov	r0, sp
    3d18:	f014 fe50 	bl	189bc <shift_rows>
	mult_row_column(t, s);
    3d1c:	4669      	mov	r1, sp
    3d1e:	a804      	add	r0, sp, #16
    3d20:	f014 fe85 	bl	18a2e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3d24:	a901      	add	r1, sp, #4
    3d26:	a805      	add	r0, sp, #20
    3d28:	f014 fe81 	bl	18a2e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3d2c:	a902      	add	r1, sp, #8
    3d2e:	a806      	add	r0, sp, #24
    3d30:	f014 fe7d 	bl	18a2e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3d34:	a903      	add	r1, sp, #12
    3d36:	a807      	add	r0, sp, #28
    3d38:	f014 fe79 	bl	18a2e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3d3c:	2310      	movs	r3, #16
    3d3e:	4668      	mov	r0, sp
    3d40:	4619      	mov	r1, r3
    3d42:	eb0d 0203 	add.w	r2, sp, r3
    3d46:	f014 fddc 	bl	18902 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3d4a:	4639      	mov	r1, r7
    3d4c:	4668      	mov	r0, sp
    3d4e:	3710      	adds	r7, #16
    3d50:	f014 fdef 	bl	18932 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3d54:	42af      	cmp	r7, r5
    3d56:	d1d5      	bne.n	3d04 <tc_aes_encrypt+0x34>
    3d58:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    3d5a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d5e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    3d60:	f819 3003 	ldrb.w	r3, [r9, r3]
    3d64:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3d68:	d1f7      	bne.n	3d5a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    3d6a:	4668      	mov	r0, sp
    3d6c:	f014 fe26 	bl	189bc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    3d70:	4629      	mov	r1, r5
    3d72:	4668      	mov	r0, sp
    3d74:	f014 fddd 	bl	18932 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3d78:	2310      	movs	r3, #16
    3d7a:	466a      	mov	r2, sp
    3d7c:	4619      	mov	r1, r3
    3d7e:	4630      	mov	r0, r6
    3d80:	f014 fdbf 	bl	18902 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3d84:	4668      	mov	r0, sp
    3d86:	2210      	movs	r2, #16
    3d88:	4621      	mov	r1, r4
    3d8a:	f014 fdc7 	bl	1891c <_set>

	return TC_CRYPTO_SUCCESS;
    3d8e:	2001      	movs	r0, #1
}
    3d90:	b009      	add	sp, #36	; 0x24
    3d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    3d96:	4608      	mov	r0, r1
    3d98:	e7fa      	b.n	3d90 <tc_aes_encrypt+0xc0>
    3d9a:	4610      	mov	r0, r2
    3d9c:	e7f8      	b.n	3d90 <tc_aes_encrypt+0xc0>
    3d9e:	bf00      	nop
    3da0:	00024cd7 	.word	0x00024cd7

00003da4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    3da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3da8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3daa:	6803      	ldr	r3, [r0, #0]
{
    3dac:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dae:	9303      	str	r3, [sp, #12]
    3db0:	6843      	ldr	r3, [r0, #4]
    3db2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 3f6c <compress+0x1c8>
    3db6:	9304      	str	r3, [sp, #16]
    3db8:	6883      	ldr	r3, [r0, #8]
    3dba:	9c03      	ldr	r4, [sp, #12]
    3dbc:	9305      	str	r3, [sp, #20]
    3dbe:	68c3      	ldr	r3, [r0, #12]
{
    3dc0:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dc2:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3dc4:	6903      	ldr	r3, [r0, #16]
    3dc6:	9307      	str	r3, [sp, #28]
    3dc8:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dca:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3dce:	9308      	str	r3, [sp, #32]
    3dd0:	6983      	ldr	r3, [r0, #24]
    3dd2:	9309      	str	r3, [sp, #36]	; 0x24
    3dd4:	69c3      	ldr	r3, [r0, #28]
    3dd6:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    3dda:	4698      	mov	r8, r3
    3ddc:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3dde:	9b05      	ldr	r3, [sp, #20]
    3de0:	9301      	str	r3, [sp, #4]
    3de2:	9b04      	ldr	r3, [sp, #16]
    3de4:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    3de6:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    3de8:	9e01      	ldr	r6, [sp, #4]
    3dea:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    3dec:	ab0c      	add	r3, sp, #48	; 0x30
    3dee:	ba2d      	rev	r5, r5
    3df0:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    3df2:	f85a 3b04 	ldr.w	r3, [sl], #4
    3df6:	3704      	adds	r7, #4
    3df8:	eb05 0903 	add.w	r9, r5, r3
    3dfc:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3e00:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    3e04:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    3e08:	444d      	add	r5, r9
    3e0a:	ea2b 0302 	bic.w	r3, fp, r2
    3e0e:	ea02 090c 	and.w	r9, r2, ip
    3e12:	ea83 0309 	eor.w	r3, r3, r9
    3e16:	442b      	add	r3, r5
    3e18:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    3e1a:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    3e1e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    3e22:	404d      	eors	r5, r1
    3e24:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    3e28:	4025      	ands	r5, r4
    3e2a:	ea01 0906 	and.w	r9, r1, r6
    3e2e:	ea85 0509 	eor.w	r5, r5, r9
    3e32:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    3e36:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    3e38:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    3e3a:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    3e3e:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    3e40:	46b6      	mov	lr, r6
    3e42:	46d8      	mov	r8, fp
    3e44:	f040 8081 	bne.w	3f4a <compress+0x1a6>
    3e48:	f04f 0a10 	mov.w	sl, #16
    3e4c:	4946      	ldr	r1, [pc, #280]	; (3f68 <compress+0x1c4>)
    3e4e:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    3e50:	4651      	mov	r1, sl
    3e52:	f10a 0a01 	add.w	sl, sl, #1
    3e56:	ae1c      	add	r6, sp, #112	; 0x70
    3e58:	f00a 070f 	and.w	r7, sl, #15
    3e5c:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    3e60:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e64:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    3e68:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    3e6c:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e70:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    3e72:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    3e74:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e78:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    3e7c:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e7e:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    3e82:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    3e86:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e8a:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    3e8e:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e92:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    3e96:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3e9a:	4431      	add	r1, r6
		s0 = sigma0(s0);
    3e9c:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    3e9e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    3ea2:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    3ea6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    3eaa:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3eae:	4441      	add	r1, r8
    3eb0:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3eb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3eb4:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    3eb8:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ebc:	ea05 0802 	and.w	r8, r5, r2
    3ec0:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    3ec4:	ea2c 0705 	bic.w	r7, ip, r5
    3ec8:	f856 eb04 	ldr.w	lr, [r6], #4
    3ecc:	ea87 0708 	eor.w	r7, r7, r8
    3ed0:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    3ed4:	444f      	add	r7, r9
    3ed6:	4477      	add	r7, lr
    3ed8:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    3eda:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3edc:	4439      	add	r1, r7
    3ede:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    3ee0:	ea04 0e06 	and.w	lr, r4, r6
    3ee4:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    3ee8:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    3eea:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    3eee:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    3ef0:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    3ef4:	ea0b 0b03 	and.w	fp, fp, r3
    3ef8:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    3efc:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    3efe:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    3f02:	9e00      	ldr	r6, [sp, #0]
    3f04:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    3f06:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    3f0a:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    3f0c:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    3f0e:	9601      	str	r6, [sp, #4]
    3f10:	d123      	bne.n	3f5a <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    3f12:	9e03      	ldr	r6, [sp, #12]
    3f14:	440e      	add	r6, r1
    3f16:	9904      	ldr	r1, [sp, #16]
    3f18:	6006      	str	r6, [r0, #0]
    3f1a:	4419      	add	r1, r3
    3f1c:	9b05      	ldr	r3, [sp, #20]
    3f1e:	6041      	str	r1, [r0, #4]
    3f20:	4423      	add	r3, r4
    3f22:	9900      	ldr	r1, [sp, #0]
    3f24:	6083      	str	r3, [r0, #8]
    3f26:	9b06      	ldr	r3, [sp, #24]
    3f28:	440b      	add	r3, r1
    3f2a:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    3f2c:	9b07      	ldr	r3, [sp, #28]
    3f2e:	4443      	add	r3, r8
    3f30:	6103      	str	r3, [r0, #16]
    3f32:	9b08      	ldr	r3, [sp, #32]
    3f34:	442b      	add	r3, r5
    3f36:	6143      	str	r3, [r0, #20]
    3f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f3a:	4413      	add	r3, r2
    3f3c:	6183      	str	r3, [r0, #24]
    3f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f40:	4463      	add	r3, ip
    3f42:	61c3      	str	r3, [r0, #28]
}
    3f44:	b01d      	add	sp, #116	; 0x74
    3f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f4a:	9900      	ldr	r1, [sp, #0]
    3f4c:	46e3      	mov	fp, ip
    3f4e:	e9cd 4100 	strd	r4, r1, [sp]
    3f52:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    3f54:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3f56:	462a      	mov	r2, r5
    3f58:	e745      	b.n	3de6 <compress+0x42>
    3f5a:	4694      	mov	ip, r2
    3f5c:	9400      	str	r4, [sp, #0]
    3f5e:	462a      	mov	r2, r5
    3f60:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3f62:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    3f64:	460b      	mov	r3, r1
    3f66:	e773      	b.n	3e50 <compress+0xac>
    3f68:	00023698 	.word	0x00023698
    3f6c:	00023658 	.word	0x00023658

00003f70 <tc_sha256_init>:
{
    3f70:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    3f72:	4604      	mov	r4, r0
    3f74:	b1c8      	cbz	r0, 3faa <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    3f76:	2270      	movs	r2, #112	; 0x70
    3f78:	2100      	movs	r1, #0
    3f7a:	f014 fccf 	bl	1891c <_set>
	s->iv[1] = 0xbb67ae85;
    3f7e:	4b0b      	ldr	r3, [pc, #44]	; (3fac <tc_sha256_init+0x3c>)
    3f80:	4a0b      	ldr	r2, [pc, #44]	; (3fb0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    3f82:	490c      	ldr	r1, [pc, #48]	; (3fb4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    3f84:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    3f88:	4b0b      	ldr	r3, [pc, #44]	; (3fb8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    3f8a:	480c      	ldr	r0, [pc, #48]	; (3fbc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    3f8c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    3f90:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <tc_sha256_init+0x50>)
    3f92:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    3f96:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    3f98:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <tc_sha256_init+0x54>)
    3f9a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    3f9c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3fa0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3fa4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    3fa8:	61e3      	str	r3, [r4, #28]
}
    3faa:	bd10      	pop	{r4, pc}
    3fac:	bb67ae85 	.word	0xbb67ae85
    3fb0:	6a09e667 	.word	0x6a09e667
    3fb4:	3c6ef372 	.word	0x3c6ef372
    3fb8:	a54ff53a 	.word	0xa54ff53a
    3fbc:	510e527f 	.word	0x510e527f
    3fc0:	9b05688c 	.word	0x9b05688c
    3fc4:	1f83d9ab 	.word	0x1f83d9ab

00003fc8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3fc8:	4a0a      	ldr	r2, [pc, #40]	; (3ff4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3fca:	490b      	ldr	r1, [pc, #44]	; (3ff8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3fcc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3fce:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3fd0:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
    3fd2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fd6:	4909      	ldr	r1, [pc, #36]	; (3ffc <arch_swap+0x34>)
    3fd8:	684b      	ldr	r3, [r1, #4]
    3fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3fde:	604b      	str	r3, [r1, #4]
    3fe0:	2300      	movs	r3, #0
    3fe2:	f383 8811 	msr	BASEPRI, r3
    3fe6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3fea:	6893      	ldr	r3, [r2, #8]
}
    3fec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    3ff0:	4770      	bx	lr
    3ff2:	bf00      	nop
    3ff4:	20025eec 	.word	0x20025eec
    3ff8:	00024080 	.word	0x00024080
    3ffc:	e000ed00 	.word	0xe000ed00

00004000 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4000:	4913      	ldr	r1, [pc, #76]	; (4050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4002:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4004:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    4008:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    400a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    400e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4012:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4014:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4018:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    401c:	4f0d      	ldr	r7, [pc, #52]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    401e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4022:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    4024:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4026:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4028:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    402a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    402c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    402e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4032:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    4036:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    403a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    403e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    4042:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    4044:	f015 f857 	bl	190f6 <configure_builtin_stack_guard>
    pop {r2, lr}
    4048:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    404c:	4770      	bx	lr
    404e:	0000      	.short	0x0000
    ldr r1, =_kernel
    4050:	20025eec 	.word	0x20025eec
    ldr v4, =_SCS_ICSR
    4054:	e000ed04 	.word	0xe000ed04

00004058 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4058:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    405c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    405e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4062:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4066:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4068:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    406c:	2902      	cmp	r1, #2
    beq _oops
    406e:	d0ff      	beq.n	4070 <_oops>

00004070 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4070:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4072:	f015 f844 	bl	190fe <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4076:	bd01      	pop	{r0, pc}

00004078 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4078:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    407a:	2b00      	cmp	r3, #0
    407c:	db08      	blt.n	4090 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    407e:	2201      	movs	r2, #1
    4080:	f000 001f 	and.w	r0, r0, #31
    4084:	fa02 f000 	lsl.w	r0, r2, r0
    4088:	4a02      	ldr	r2, [pc, #8]	; (4094 <arch_irq_enable+0x1c>)
    408a:	095b      	lsrs	r3, r3, #5
    408c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4090:	4770      	bx	lr
    4092:	bf00      	nop
    4094:	e000e100 	.word	0xe000e100

00004098 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4098:	4b05      	ldr	r3, [pc, #20]	; (40b0 <arch_irq_is_enabled+0x18>)
    409a:	0942      	lsrs	r2, r0, #5
    409c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    40a0:	2301      	movs	r3, #1
    40a2:	f000 001f 	and.w	r0, r0, #31
    40a6:	fa03 f000 	lsl.w	r0, r3, r0
}
    40aa:	4010      	ands	r0, r2
    40ac:	4770      	bx	lr
    40ae:	bf00      	nop
    40b0:	e000e100 	.word	0xe000e100

000040b4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    40b4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    40b6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    40b8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40bc:	bfac      	ite	ge
    40be:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40c2:	4b06      	ldrlt	r3, [pc, #24]	; (40dc <z_arm_irq_priority_set+0x28>)
    40c4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    40c8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40ca:	bfab      	itete	ge
    40cc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d8:	5419      	strblt	r1, [r3, r0]
}
    40da:	4770      	bx	lr
    40dc:	e000ed14 	.word	0xe000ed14

000040e0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    40e0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    40e4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    40e6:	490b      	ldr	r1, [pc, #44]	; (4114 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    40e8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    40ec:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    40ee:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    40f2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    40f6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    40f8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    40fc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4104:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4108:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    410a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    410c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    410e:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	00017809 	.word	0x00017809

00004118 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4118:	4604      	mov	r4, r0
    411a:	b508      	push	{r3, lr}
    411c:	460e      	mov	r6, r1
    411e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    4120:	f000 fb36 	bl	4790 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4124:	4b08      	ldr	r3, [pc, #32]	; (4148 <arch_switch_to_main_thread+0x30>)
    4126:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4128:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    412a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    412e:	4628      	mov	r0, r5
    4130:	f386 8809 	msr	PSP, r6
    4134:	2100      	movs	r1, #0
    4136:	b663      	cpsie	if
    4138:	f381 8811 	msr	BASEPRI, r1
    413c:	f3bf 8f6f 	isb	sy
    4140:	2200      	movs	r2, #0
    4142:	2300      	movs	r3, #0
    4144:	f013 fb60 	bl	17808 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4148:	20025eec 	.word	0x20025eec

0000414c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    414c:	4901      	ldr	r1, [pc, #4]	; (4154 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    414e:	2210      	movs	r2, #16
	str	r2, [r1]
    4150:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4152:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4154:	e000ed10 	.word	0xe000ed10

00004158 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4158:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    415a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    415c:	f380 8811 	msr	BASEPRI, r0
	isb
    4160:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4164:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4168:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    416a:	b662      	cpsie	i
	isb
    416c:	f3bf 8f6f 	isb	sy

	bx	lr
    4170:	4770      	bx	lr
    4172:	bf00      	nop

00004174 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4174:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4176:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4178:	f381 8811 	msr	BASEPRI, r1

	wfe
    417c:	bf20      	wfe

	msr	BASEPRI, r0
    417e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4182:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4184:	4770      	bx	lr
    4186:	bf00      	nop

00004188 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4188:	b573      	push	{r0, r1, r4, r5, r6, lr}
    418a:	4606      	mov	r6, r0

	if (esf != NULL) {
    418c:	460c      	mov	r4, r1
    418e:	b301      	cbz	r1, 41d2 <z_arm_fatal_error+0x4a>
    4190:	4b13      	ldr	r3, [pc, #76]	; (41e0 <z_arm_fatal_error+0x58>)
    4192:	4d14      	ldr	r5, [pc, #80]	; (41e4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4194:	4814      	ldr	r0, [pc, #80]	; (41e8 <z_arm_fatal_error+0x60>)
    4196:	1aed      	subs	r5, r5, r3
    4198:	08ed      	lsrs	r5, r5, #3
    419a:	01ad      	lsls	r5, r5, #6
    419c:	f045 0501 	orr.w	r5, r5, #1
    41a0:	f8ad 5000 	strh.w	r5, [sp]
    41a4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    41a8:	6809      	ldr	r1, [r1, #0]
    41aa:	f013 fec9 	bl	17f40 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    41ae:	f8ad 5000 	strh.w	r5, [sp]
    41b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    41b6:	68e1      	ldr	r1, [r4, #12]
    41b8:	480c      	ldr	r0, [pc, #48]	; (41ec <z_arm_fatal_error+0x64>)
    41ba:	f013 fec1 	bl	17f40 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    41be:	462a      	mov	r2, r5
    41c0:	69e1      	ldr	r1, [r4, #28]
    41c2:	480b      	ldr	r0, [pc, #44]	; (41f0 <z_arm_fatal_error+0x68>)
    41c4:	f013 fe8f 	bl	17ee6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    41c8:	462a      	mov	r2, r5
    41ca:	69a1      	ldr	r1, [r4, #24]
    41cc:	4809      	ldr	r0, [pc, #36]	; (41f4 <z_arm_fatal_error+0x6c>)
    41ce:	f013 fe8a 	bl	17ee6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    41d2:	4621      	mov	r1, r4
    41d4:	4630      	mov	r0, r6
}
    41d6:	b002      	add	sp, #8
    41d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    41dc:	f011 bc7e 	b.w	15adc <z_fatal_error>
    41e0:	000232ec 	.word	0x000232ec
    41e4:	000233b4 	.word	0x000233b4
    41e8:	00024dd7 	.word	0x00024dd7
    41ec:	00024e06 	.word	0x00024e06
    41f0:	00024e35 	.word	0x00024e35
    41f4:	00024e44 	.word	0x00024e44

000041f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    41f8:	bf30      	wfi
    b z_SysNmiOnReset
    41fa:	f7ff bffd 	b.w	41f8 <z_SysNmiOnReset>
    41fe:	bf00      	nop

00004200 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4200:	4a0e      	ldr	r2, [pc, #56]	; (423c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4202:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4204:	4b0e      	ldr	r3, [pc, #56]	; (4240 <z_arm_prep_c+0x40>)
    4206:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    420a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    420c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4210:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4214:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4218:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    421c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4220:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4224:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4228:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    422c:	f011 fce8 	bl	15c00 <z_bss_zero>
	z_data_copy();
    4230:	f012 fdd6 	bl	16de0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4234:	f000 fa7e 	bl	4734 <z_arm_interrupt_init>
	z_cstart();
    4238:	f011 fd06 	bl	15c48 <z_cstart>
    423c:	00000000 	.word	0x00000000
    4240:	e000ed00 	.word	0xe000ed00

00004244 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4244:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4246:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4248:	4a0b      	ldr	r2, [pc, #44]	; (4278 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    424a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    424c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    424e:	bf1e      	ittt	ne
	movne	r1, #0
    4250:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4252:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    4254:	f01e f93a 	blne	224cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4258:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    425a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    425e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4262:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4266:	4905      	ldr	r1, [pc, #20]	; (427c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4268:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    426a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    426c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    426e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4272:	4903      	ldr	r1, [pc, #12]	; (4280 <_isr_wrapper+0x3c>)
	bx r1
    4274:	4708      	bx	r1
    4276:	0000      	.short	0x0000
	ldr r2, =_kernel
    4278:	20025eec 	.word	0x20025eec
	ldr r1, =_sw_isr_table
    427c:	00023090 	.word	0x00023090
	ldr r1, =z_arm_int_exit
    4280:	000046f5 	.word	0x000046f5

00004284 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4284:	f013 fddd 	bl	17e42 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4288:	2020      	movs	r0, #32
    msr BASEPRI, r0
    428a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    428e:	4808      	ldr	r0, [pc, #32]	; (42b0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4290:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4294:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4296:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    429a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    429e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    42a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    42a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    42a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    42aa:	f7ff ffa9 	bl	4200 <z_arm_prep_c>
    42ae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    42b0:	2002c6f8 	.word	0x2002c6f8

000042b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    42b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    42b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    42bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    42be:	4672      	mov	r2, lr
	bl z_arm_fault
    42c0:	f000 f940 	bl	4544 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    42c4:	bd01      	pop	{r0, pc}
    42c6:	bf00      	nop

000042c8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	4b28      	ldr	r3, [pc, #160]	; (436c <usage_fault.isra.0+0xa4>)
    42cc:	4c28      	ldr	r4, [pc, #160]	; (4370 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42ce:	4d29      	ldr	r5, [pc, #164]	; (4374 <usage_fault.isra.0+0xac>)
    42d0:	1ae4      	subs	r4, r4, r3
    42d2:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    42d4:	01a4      	lsls	r4, r4, #6
    42d6:	f044 0601 	orr.w	r6, r4, #1
    42da:	4631      	mov	r1, r6
    42dc:	4826      	ldr	r0, [pc, #152]	; (4378 <usage_fault.isra.0+0xb0>)
    42de:	f013 fdf5 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    42e4:	0193      	lsls	r3, r2, #6
    42e6:	d503      	bpl.n	42f0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    42e8:	4631      	mov	r1, r6
    42ea:	4824      	ldr	r0, [pc, #144]	; (437c <usage_fault.isra.0+0xb4>)
    42ec:	f013 fdee 	bl	17ecc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    42f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    42f2:	01dd      	lsls	r5, r3, #7
    42f4:	d504      	bpl.n	4300 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    42f6:	4822      	ldr	r0, [pc, #136]	; (4380 <usage_fault.isra.0+0xb8>)
    42f8:	f044 0101 	orr.w	r1, r4, #1
    42fc:	f013 fde6 	bl	17ecc <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    4300:	4d1c      	ldr	r5, [pc, #112]	; (4374 <usage_fault.isra.0+0xac>)
    4302:	6aae      	ldr	r6, [r5, #40]	; 0x28
    4304:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    4308:	d005      	beq.n	4316 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    430a:	481e      	ldr	r0, [pc, #120]	; (4384 <usage_fault.isra.0+0xbc>)
    430c:	f044 0101 	orr.w	r1, r4, #1
    4310:	f013 fddc 	bl	17ecc <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    4314:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4316:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4318:	0318      	lsls	r0, r3, #12
    431a:	d504      	bpl.n	4326 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    431c:	481a      	ldr	r0, [pc, #104]	; (4388 <usage_fault.isra.0+0xc0>)
    431e:	f044 0101 	orr.w	r1, r4, #1
    4322:	f013 fdd3 	bl	17ecc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4326:	4d13      	ldr	r5, [pc, #76]	; (4374 <usage_fault.isra.0+0xac>)
    4328:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    432a:	0351      	lsls	r1, r2, #13
    432c:	d504      	bpl.n	4338 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    432e:	4817      	ldr	r0, [pc, #92]	; (438c <usage_fault.isra.0+0xc4>)
    4330:	f044 0101 	orr.w	r1, r4, #1
    4334:	f013 fdca 	bl	17ecc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4338:	6aab      	ldr	r3, [r5, #40]	; 0x28
    433a:	039a      	lsls	r2, r3, #14
    433c:	d504      	bpl.n	4348 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    433e:	4814      	ldr	r0, [pc, #80]	; (4390 <usage_fault.isra.0+0xc8>)
    4340:	f044 0101 	orr.w	r1, r4, #1
    4344:	f013 fdc2 	bl	17ecc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4348:	4d0a      	ldr	r5, [pc, #40]	; (4374 <usage_fault.isra.0+0xac>)
    434a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    434c:	03db      	lsls	r3, r3, #15
    434e:	d504      	bpl.n	435a <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4350:	4810      	ldr	r0, [pc, #64]	; (4394 <usage_fault.isra.0+0xcc>)
    4352:	f044 0101 	orr.w	r1, r4, #1
    4356:	f013 fdb9 	bl	17ecc <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    435a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    435c:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    435e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4362:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4366:	62ab      	str	r3, [r5, #40]	; 0x28
}
    4368:	bd70      	pop	{r4, r5, r6, pc}
    436a:	bf00      	nop
    436c:	000232ec 	.word	0x000232ec
    4370:	000233b4 	.word	0x000233b4
    4374:	e000ed00 	.word	0xe000ed00
    4378:	00024e72 	.word	0x00024e72
    437c:	00024e8a 	.word	0x00024e8a
    4380:	00024e9d 	.word	0x00024e9d
    4384:	00024eb7 	.word	0x00024eb7
    4388:	00024ee1 	.word	0x00024ee1
    438c:	00024eff 	.word	0x00024eff
    4390:	00024f24 	.word	0x00024f24
    4394:	00024f3e 	.word	0x00024f3e

00004398 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    439c:	4b28      	ldr	r3, [pc, #160]	; (4440 <mem_manage_fault.isra.0+0xa8>)
    439e:	4c29      	ldr	r4, [pc, #164]	; (4444 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43a0:	4d29      	ldr	r5, [pc, #164]	; (4448 <mem_manage_fault.isra.0+0xb0>)
    43a2:	1ae4      	subs	r4, r4, r3
    43a4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    43a6:	01a4      	lsls	r4, r4, #6
    43a8:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    43ac:	4607      	mov	r7, r0
    43ae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    43b0:	4826      	ldr	r0, [pc, #152]	; (444c <mem_manage_fault.isra.0+0xb4>)
    43b2:	4641      	mov	r1, r8
    43b4:	f013 fd8a 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    43ba:	06d0      	lsls	r0, r2, #27
    43bc:	d503      	bpl.n	43c6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    43be:	4641      	mov	r1, r8
    43c0:	4823      	ldr	r0, [pc, #140]	; (4450 <mem_manage_fault.isra.0+0xb8>)
    43c2:	f013 fd83 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    43c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43c8:	0719      	lsls	r1, r3, #28
    43ca:	d504      	bpl.n	43d6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    43cc:	4821      	ldr	r0, [pc, #132]	; (4454 <mem_manage_fault.isra.0+0xbc>)
    43ce:	f044 0101 	orr.w	r1, r4, #1
    43d2:	f013 fd7b 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43d6:	4d1c      	ldr	r5, [pc, #112]	; (4448 <mem_manage_fault.isra.0+0xb0>)
    43d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43da:	079a      	lsls	r2, r3, #30
    43dc:	d512      	bpl.n	4404 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    43de:	f044 0801 	orr.w	r8, r4, #1
    43e2:	4641      	mov	r1, r8
    43e4:	481c      	ldr	r0, [pc, #112]	; (4458 <mem_manage_fault.isra.0+0xc0>)
    43e6:	f013 fd71 	bl	17ecc <log_0>
		uint32_t temp = SCB->MMFAR;
    43ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    43ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ee:	061b      	lsls	r3, r3, #24
    43f0:	d508      	bpl.n	4404 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    43f2:	4642      	mov	r2, r8
    43f4:	4819      	ldr	r0, [pc, #100]	; (445c <mem_manage_fault.isra.0+0xc4>)
    43f6:	f013 fd76 	bl	17ee6 <log_1>
			if (from_hard_fault) {
    43fa:	b11f      	cbz	r7, 4404 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    43fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4402:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4404:	4d10      	ldr	r5, [pc, #64]	; (4448 <mem_manage_fault.isra.0+0xb0>)
    4406:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4408:	07d0      	lsls	r0, r2, #31
    440a:	d504      	bpl.n	4416 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    440c:	4814      	ldr	r0, [pc, #80]	; (4460 <mem_manage_fault.isra.0+0xc8>)
    440e:	f044 0101 	orr.w	r1, r4, #1
    4412:	f013 fd5b 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4416:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4418:	0699      	lsls	r1, r3, #26
    441a:	d504      	bpl.n	4426 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    441c:	4811      	ldr	r0, [pc, #68]	; (4464 <mem_manage_fault.isra.0+0xcc>)
    441e:	f044 0101 	orr.w	r1, r4, #1
    4422:	f013 fd53 	bl	17ecc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    4426:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4428:	4b07      	ldr	r3, [pc, #28]	; (4448 <mem_manage_fault.isra.0+0xb0>)
    442a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    442c:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    442e:	bf58      	it	pl
    4430:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4434:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4438:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    443a:	7030      	strb	r0, [r6, #0]
}
    443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4440:	000232ec 	.word	0x000232ec
    4444:	000233b4 	.word	0x000233b4
    4448:	e000ed00 	.word	0xe000ed00
    444c:	00024f69 	.word	0x00024f69
    4450:	00024f7f 	.word	0x00024f7f
    4454:	00024fb2 	.word	0x00024fb2
    4458:	00024fc5 	.word	0x00024fc5
    445c:	00024fdd 	.word	0x00024fdd
    4460:	00024ff3 	.word	0x00024ff3
    4464:	00025012 	.word	0x00025012

00004468 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    446c:	4b2a      	ldr	r3, [pc, #168]	; (4518 <bus_fault.isra.0+0xb0>)
    446e:	4c2b      	ldr	r4, [pc, #172]	; (451c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4470:	4d2b      	ldr	r5, [pc, #172]	; (4520 <bus_fault.isra.0+0xb8>)
    4472:	1ae4      	subs	r4, r4, r3
    4474:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    4476:	01a4      	lsls	r4, r4, #6
    4478:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    447c:	4607      	mov	r7, r0
    447e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4480:	4828      	ldr	r0, [pc, #160]	; (4524 <bus_fault.isra.0+0xbc>)
    4482:	4641      	mov	r1, r8
    4484:	f013 fd22 	bl	17ecc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4488:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    448a:	04d1      	lsls	r1, r2, #19
    448c:	d503      	bpl.n	4496 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    448e:	4641      	mov	r1, r8
    4490:	4825      	ldr	r0, [pc, #148]	; (4528 <bus_fault.isra.0+0xc0>)
    4492:	f013 fd1b 	bl	17ecc <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4496:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4498:	051a      	lsls	r2, r3, #20
    449a:	d504      	bpl.n	44a6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    449c:	4823      	ldr	r0, [pc, #140]	; (452c <bus_fault.isra.0+0xc4>)
    449e:	f044 0101 	orr.w	r1, r4, #1
    44a2:	f013 fd13 	bl	17ecc <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    44a6:	4d1e      	ldr	r5, [pc, #120]	; (4520 <bus_fault.isra.0+0xb8>)
    44a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44aa:	059b      	lsls	r3, r3, #22
    44ac:	d512      	bpl.n	44d4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    44ae:	f044 0801 	orr.w	r8, r4, #1
    44b2:	4641      	mov	r1, r8
    44b4:	481e      	ldr	r0, [pc, #120]	; (4530 <bus_fault.isra.0+0xc8>)
    44b6:	f013 fd09 	bl	17ecc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    44ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    44bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44be:	0418      	lsls	r0, r3, #16
    44c0:	d508      	bpl.n	44d4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    44c2:	4642      	mov	r2, r8
    44c4:	481b      	ldr	r0, [pc, #108]	; (4534 <bus_fault.isra.0+0xcc>)
    44c6:	f013 fd0e 	bl	17ee6 <log_1>
			if (from_hard_fault) {
    44ca:	b11f      	cbz	r7, 44d4 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    44cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    44d2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    44d4:	4d12      	ldr	r5, [pc, #72]	; (4520 <bus_fault.isra.0+0xb8>)
    44d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44d8:	0559      	lsls	r1, r3, #21
    44da:	d504      	bpl.n	44e6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    44dc:	4816      	ldr	r0, [pc, #88]	; (4538 <bus_fault.isra.0+0xd0>)
    44de:	f044 0101 	orr.w	r1, r4, #1
    44e2:	f013 fcf3 	bl	17ecc <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    44e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44e8:	05da      	lsls	r2, r3, #23
    44ea:	d50d      	bpl.n	4508 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    44ec:	4813      	ldr	r0, [pc, #76]	; (453c <bus_fault.isra.0+0xd4>)
    44ee:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    44f2:	f013 fceb 	bl	17ecc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    44f6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    44f8:	4a09      	ldr	r2, [pc, #36]	; (4520 <bus_fault.isra.0+0xb8>)
    44fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44fc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4500:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4502:	7030      	strb	r0, [r6, #0]
}
    4504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4508:	6aab      	ldr	r3, [r5, #40]	; 0x28
    450a:	049b      	lsls	r3, r3, #18
    450c:	d5f3      	bpl.n	44f6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    450e:	480c      	ldr	r0, [pc, #48]	; (4540 <bus_fault.isra.0+0xd8>)
    4510:	f044 0101 	orr.w	r1, r4, #1
    4514:	e7ed      	b.n	44f2 <bus_fault.isra.0+0x8a>
    4516:	bf00      	nop
    4518:	000232ec 	.word	0x000232ec
    451c:	000233b4 	.word	0x000233b4
    4520:	e000ed00 	.word	0xe000ed00
    4524:	00025041 	.word	0x00025041
    4528:	00025057 	.word	0x00025057
    452c:	00024fb2 	.word	0x00024fb2
    4530:	00025068 	.word	0x00025068
    4534:	00025081 	.word	0x00025081
    4538:	00025096 	.word	0x00025096
    453c:	000250b1 	.word	0x000250b1
    4540:	00025012 	.word	0x00025012

00004544 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4548:	4b56      	ldr	r3, [pc, #344]	; (46a4 <z_arm_fault+0x160>)
{
    454a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    454c:	685e      	ldr	r6, [r3, #4]
    454e:	2500      	movs	r5, #0
{
    4550:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4552:	f3c6 0408 	ubfx	r4, r6, #0, #9
    4556:	f385 8811 	msr	BASEPRI, r5
    455a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    455e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4562:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4566:	d10d      	bne.n	4584 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4568:	f002 030c 	and.w	r3, r2, #12
    456c:	2b08      	cmp	r3, #8
    456e:	d10b      	bne.n	4588 <z_arm_fault+0x44>
    4570:	494d      	ldr	r1, [pc, #308]	; (46a8 <z_arm_fault+0x164>)
    4572:	4b4e      	ldr	r3, [pc, #312]	; (46ac <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4574:	484e      	ldr	r0, [pc, #312]	; (46b0 <z_arm_fault+0x16c>)
    4576:	1ac9      	subs	r1, r1, r3
    4578:	08c9      	lsrs	r1, r1, #3
    457a:	0189      	lsls	r1, r1, #6
    457c:	f041 0101 	orr.w	r1, r1, #1
    4580:	f013 fca4 	bl	17ecc <log_0>
		return NULL;
    4584:	462f      	mov	r7, r5
    4586:	e003      	b.n	4590 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4588:	0712      	lsls	r2, r2, #28
    458a:	d401      	bmi.n	4590 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    458c:	4607      	mov	r7, r0
			*nested_exc = true;
    458e:	2501      	movs	r5, #1
	*recoverable = false;
    4590:	2300      	movs	r3, #0
    4592:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4596:	1ee3      	subs	r3, r4, #3
    4598:	2b09      	cmp	r3, #9
    459a:	d86a      	bhi.n	4672 <z_arm_fault+0x12e>
    459c:	e8df f003 	tbb	[pc, r3]
    45a0:	3c5c5805 	.word	0x3c5c5805
    45a4:	69696969 	.word	0x69696969
    45a8:	6069      	.short	0x6069
	*recoverable = false;
    45aa:	f04f 0800 	mov.w	r8, #0
    45ae:	4b3f      	ldr	r3, [pc, #252]	; (46ac <z_arm_fault+0x168>)
    45b0:	4e3d      	ldr	r6, [pc, #244]	; (46a8 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    45b2:	4840      	ldr	r0, [pc, #256]	; (46b4 <z_arm_fault+0x170>)
    45b4:	1af6      	subs	r6, r6, r3
    45b6:	08f6      	lsrs	r6, r6, #3
    45b8:	01b6      	lsls	r6, r6, #6
    45ba:	f046 0601 	orr.w	r6, r6, #1
    45be:	4631      	mov	r1, r6
    45c0:	f013 fc84 	bl	17ecc <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45c4:	4b37      	ldr	r3, [pc, #220]	; (46a4 <z_arm_fault+0x160>)
	*recoverable = false;
    45c6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    45cc:	f014 0402 	ands.w	r4, r4, #2
    45d0:	d005      	beq.n	45de <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    45d2:	4631      	mov	r1, r6
    45d4:	4838      	ldr	r0, [pc, #224]	; (46b8 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
    45d6:	f013 fc79 	bl	17ecc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    45da:	2400      	movs	r4, #0
}
    45dc:	e01f      	b.n	461e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    45de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45e0:	005b      	lsls	r3, r3, #1
    45e2:	d51c      	bpl.n	461e <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    45e4:	4631      	mov	r1, r6
    45e6:	4835      	ldr	r0, [pc, #212]	; (46bc <z_arm_fault+0x178>)
    45e8:	f013 fc70 	bl	17ecc <log_0>
		if (SCB_MMFSR != 0) {
    45ec:	4b34      	ldr	r3, [pc, #208]	; (46c0 <z_arm_fault+0x17c>)
    45ee:	781b      	ldrb	r3, [r3, #0]
    45f0:	b12b      	cbz	r3, 45fe <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    45f2:	2001      	movs	r0, #1
    45f4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    45f8:	f7ff fece 	bl	4398 <mem_manage_fault.isra.0>
    45fc:	e00e      	b.n	461c <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    45fe:	4b31      	ldr	r3, [pc, #196]	; (46c4 <z_arm_fault+0x180>)
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	b12b      	cbz	r3, 4610 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    4604:	2001      	movs	r0, #1
    4606:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    460a:	f7ff ff2d 	bl	4468 <bus_fault.isra.0>
    460e:	e005      	b.n	461c <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    4610:	4b2d      	ldr	r3, [pc, #180]	; (46c8 <z_arm_fault+0x184>)
    4612:	881b      	ldrh	r3, [r3, #0]
    4614:	b29b      	uxth	r3, r3
    4616:	b113      	cbz	r3, 461e <z_arm_fault+0xda>
			reason = usage_fault(esf);
    4618:	f7ff fe56 	bl	42c8 <usage_fault.isra.0>
    461c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    461e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4622:	b993      	cbnz	r3, 464a <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4624:	2220      	movs	r2, #32
    4626:	4639      	mov	r1, r7
    4628:	a802      	add	r0, sp, #8
    462a:	f014 fded 	bl	19208 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4630:	b39d      	cbz	r5, 469a <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4632:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4636:	b922      	cbnz	r2, 4642 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4638:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    463c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4640:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4642:	4620      	mov	r0, r4
    4644:	a902      	add	r1, sp, #8
    4646:	f7ff fd9f 	bl	4188 <z_arm_fatal_error>
}
    464a:	b00a      	add	sp, #40	; 0x28
    464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4650:	2000      	movs	r0, #0
    4652:	f10d 0107 	add.w	r1, sp, #7
    4656:	e7cf      	b.n	45f8 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    4658:	2000      	movs	r0, #0
    465a:	f10d 0107 	add.w	r1, sp, #7
    465e:	e7d4      	b.n	460a <z_arm_fault+0xc6>
    4660:	4911      	ldr	r1, [pc, #68]	; (46a8 <z_arm_fault+0x164>)
    4662:	4b12      	ldr	r3, [pc, #72]	; (46ac <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    4664:	4819      	ldr	r0, [pc, #100]	; (46cc <z_arm_fault+0x188>)
    4666:	1ac9      	subs	r1, r1, r3
    4668:	08c9      	lsrs	r1, r1, #3
    466a:	0189      	lsls	r1, r1, #6
    466c:	f041 0101 	orr.w	r1, r1, #1
    4670:	e7b1      	b.n	45d6 <z_arm_fault+0x92>
    4672:	4a0e      	ldr	r2, [pc, #56]	; (46ac <z_arm_fault+0x168>)
    4674:	4b0c      	ldr	r3, [pc, #48]	; (46a8 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    4676:	4816      	ldr	r0, [pc, #88]	; (46d0 <z_arm_fault+0x18c>)
    4678:	1a9b      	subs	r3, r3, r2
    467a:	08db      	lsrs	r3, r3, #3
    467c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4680:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4684:	4913      	ldr	r1, [pc, #76]	; (46d4 <z_arm_fault+0x190>)
    4686:	f043 0301 	orr.w	r3, r3, #1
    468a:	bf18      	it	ne
    468c:	4601      	movne	r1, r0
    468e:	f1a4 0210 	sub.w	r2, r4, #16
    4692:	4811      	ldr	r0, [pc, #68]	; (46d8 <z_arm_fault+0x194>)
    4694:	f013 fc3b 	bl	17f0e <log_2>
    4698:	e79f      	b.n	45da <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    469a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    469e:	f023 0301 	bic.w	r3, r3, #1
    46a2:	e7cd      	b.n	4640 <z_arm_fault+0xfc>
    46a4:	e000ed00 	.word	0xe000ed00
    46a8:	000233b4 	.word	0x000233b4
    46ac:	000232ec 	.word	0x000232ec
    46b0:	000250c9 	.word	0x000250c9
    46b4:	000250f4 	.word	0x000250f4
    46b8:	0002510b 	.word	0x0002510b
    46bc:	0002512c 	.word	0x0002512c
    46c0:	e000ed28 	.word	0xe000ed28
    46c4:	e000ed29 	.word	0xe000ed29
    46c8:	e000ed2a 	.word	0xe000ed2a
    46cc:	0002514b 	.word	0x0002514b
    46d0:	00025196 	.word	0x00025196
    46d4:	00025181 	.word	0x00025181
    46d8:	000251af 	.word	0x000251af

000046dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    46dc:	4b04      	ldr	r3, [pc, #16]	; (46f0 <z_arm_fault_init+0x14>)
    46de:	695a      	ldr	r2, [r3, #20]
    46e0:	f042 0210 	orr.w	r2, r2, #16
    46e4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    46e6:	695a      	ldr	r2, [r3, #20]
    46e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    46ec:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    46ee:	4770      	bx	lr
    46f0:	e000ed00 	.word	0xe000ed00

000046f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    46f4:	4b04      	ldr	r3, [pc, #16]	; (4708 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    46f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    46f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    46fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    46fc:	d003      	beq.n	4706 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    46fe:	4903      	ldr	r1, [pc, #12]	; (470c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4704:	600a      	str	r2, [r1, #0]

00004706 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4706:	4770      	bx	lr
	ldr r3, =_kernel
    4708:	20025eec 	.word	0x20025eec
	ldr r1, =_SCS_ICSR
    470c:	e000ed04 	.word	0xe000ed04

00004710 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4710:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4714:	4905      	ldr	r1, [pc, #20]	; (472c <sys_arch_reboot+0x1c>)
    4716:	4b06      	ldr	r3, [pc, #24]	; (4730 <sys_arch_reboot+0x20>)
    4718:	68ca      	ldr	r2, [r1, #12]
    471a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    471e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4720:	60cb      	str	r3, [r1, #12]
    4722:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4726:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4728:	e7fd      	b.n	4726 <sys_arch_reboot+0x16>
    472a:	bf00      	nop
    472c:	e000ed00 	.word	0xe000ed00
    4730:	05fa0004 	.word	0x05fa0004

00004734 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4734:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4736:	2120      	movs	r1, #32
    4738:	4803      	ldr	r0, [pc, #12]	; (4748 <z_arm_interrupt_init+0x14>)
    473a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    473c:	3301      	adds	r3, #1
    473e:	2b45      	cmp	r3, #69	; 0x45
    4740:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4744:	d1f9      	bne.n	473a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4746:	4770      	bx	lr
    4748:	e000e100 	.word	0xe000e100

0000474c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    474c:	b508      	push	{r3, lr}
	if (_current == thread) {
    474e:	4b0e      	ldr	r3, [pc, #56]	; (4788 <z_impl_k_thread_abort+0x3c>)
    4750:	689b      	ldr	r3, [r3, #8]
    4752:	4283      	cmp	r3, r0
    4754:	d107      	bne.n	4766 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4756:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    475a:	b193      	cbz	r3, 4782 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    475c:	4a0b      	ldr	r2, [pc, #44]	; (478c <z_impl_k_thread_abort+0x40>)
    475e:	6853      	ldr	r3, [r2, #4]
    4760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4764:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    4766:	f011 ff87 	bl	16678 <z_thread_single_abort>
	__asm__ volatile(
    476a:	f04f 0320 	mov.w	r3, #32
    476e:	f3ef 8011 	mrs	r0, BASEPRI
    4772:	f383 8811 	msr	BASEPRI, r3
    4776:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    477a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    477e:	f01e b86e 	b.w	2285e <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4782:	f012 faa7 	bl	16cd4 <z_self_abort>
    4786:	bf00      	nop
    4788:	20025eec 	.word	0x20025eec
    478c:	e000ed00 	.word	0xe000ed00

00004790 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4792:	4c09      	ldr	r4, [pc, #36]	; (47b8 <z_arm_configure_static_mpu_regions+0x28>)
    4794:	4a09      	ldr	r2, [pc, #36]	; (47bc <z_arm_configure_static_mpu_regions+0x2c>)
    4796:	4623      	mov	r3, r4
    4798:	2101      	movs	r1, #1
    479a:	4809      	ldr	r0, [pc, #36]	; (47c0 <z_arm_configure_static_mpu_regions+0x30>)
    479c:	f000 f938 	bl	4a10 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47a0:	2300      	movs	r3, #0
    47a2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    47a4:	4b07      	ldr	r3, [pc, #28]	; (47c4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47a6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    47a8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47aa:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47ac:	9301      	str	r3, [sp, #4]
    47ae:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47b0:	f000 f938 	bl	4a24 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    47b4:	b004      	add	sp, #16
    47b6:	bd10      	pop	{r4, pc}
    47b8:	20070000 	.word	0x20070000
    47bc:	20000000 	.word	0x20000000
    47c0:	00023758 	.word	0x00023758
    47c4:	200007e0 	.word	0x200007e0

000047c8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    47c8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    47ca:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    47cc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    47ce:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    47d2:	f004 031f 	and.w	r3, r4, #31
    47d6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    47d8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    47da:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    47dc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    47e0:	4904      	ldr	r1, [pc, #16]	; (47f4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    47e2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    47e6:	f043 0301 	orr.w	r3, r3, #1
    47ea:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    47ec:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    47ee:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    47f0:	bd10      	pop	{r4, pc}
    47f2:	bf00      	nop
    47f4:	e000ed90 	.word	0xe000ed90

000047f8 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    47f8:	2807      	cmp	r0, #7
{
    47fa:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
    47fc:	d90d      	bls.n	481a <region_allocate_and_init+0x22>
    47fe:	4b08      	ldr	r3, [pc, #32]	; (4820 <region_allocate_and_init+0x28>)
    4800:	4a08      	ldr	r2, [pc, #32]	; (4824 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4802:	4601      	mov	r1, r0
    4804:	1ad2      	subs	r2, r2, r3
    4806:	08d2      	lsrs	r2, r2, #3
    4808:	0192      	lsls	r2, r2, #6
    480a:	4807      	ldr	r0, [pc, #28]	; (4828 <region_allocate_and_init+0x30>)
    480c:	f042 0201 	orr.w	r2, r2, #1
    4810:	f013 fb69 	bl	17ee6 <log_1>
		return -EINVAL;
    4814:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    4818:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    481a:	f7ff ffd5 	bl	47c8 <region_init>
	return index;
    481e:	e7fb      	b.n	4818 <region_allocate_and_init+0x20>
    4820:	000232ec 	.word	0x000232ec
    4824:	0002339c 	.word	0x0002339c
    4828:	000251c6 	.word	0x000251c6

0000482c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4830:	4689      	mov	r9, r1
    4832:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4834:	4606      	mov	r6, r0
    4836:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    483a:	4d54      	ldr	r5, [pc, #336]	; (498c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    483c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    483e:	45c8      	cmp	r8, r9
    4840:	da33      	bge.n	48aa <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
    4842:	f8d6 a004 	ldr.w	sl, [r6, #4]
    4846:	f1ba 0f00 	cmp.w	sl, #0
    484a:	d04d      	beq.n	48e8 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
    484c:	f1ba 0f1f 	cmp.w	sl, #31
    4850:	d91e      	bls.n	4890 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
    4852:	f01a 0f1f 	tst.w	sl, #31
    4856:	d11b      	bne.n	4890 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
    4858:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    485c:	f01b 0f1f 	tst.w	fp, #31
    4860:	d116      	bne.n	4890 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4862:	4658      	mov	r0, fp
    4864:	f014 fc6f 	bl	19146 <arm_cmse_mpu_region_get>
    4868:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    486a:	eb0a 000b 	add.w	r0, sl, fp
    486e:	3801      	subs	r0, #1
    4870:	f014 fc69 	bl	19146 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4874:	4287      	cmp	r7, r0
    4876:	d01c      	beq.n	48b2 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
    4878:	f06f 0715 	mvn.w	r7, #21
    487c:	4a44      	ldr	r2, [pc, #272]	; (4990 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    487e:	4b45      	ldr	r3, [pc, #276]	; (4994 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    4880:	4639      	mov	r1, r7
    4882:	1ad2      	subs	r2, r2, r3
    4884:	08d2      	lsrs	r2, r2, #3
    4886:	0192      	lsls	r2, r2, #6
    4888:	4843      	ldr	r0, [pc, #268]	; (4998 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    488a:	f042 0201 	orr.w	r2, r2, #1
    488e:	e008      	b.n	48a2 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4890:	4641      	mov	r1, r8
    4892:	4a3f      	ldr	r2, [pc, #252]	; (4990 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    4894:	4b3f      	ldr	r3, [pc, #252]	; (4994 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    4896:	4841      	ldr	r0, [pc, #260]	; (499c <mpu_configure_regions_and_partition.constprop.0+0x170>)
    4898:	1ad2      	subs	r2, r2, r3
    489a:	08d2      	lsrs	r2, r2, #3
    489c:	0192      	lsls	r2, r2, #6
    489e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    48a2:	f013 fb20 	bl	17ee6 <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    48a6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    48aa:	4620      	mov	r0, r4
    48ac:	b005      	add	sp, #20
    48ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    48b2:	f117 0f16 	cmn.w	r7, #22
    48b6:	d0e1      	beq.n	487c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    48b8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    48ba:	42bb      	cmp	r3, r7
    48bc:	dbde      	blt.n	487c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    48be:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    48c0:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    48c2:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    48c4:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    48c6:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    48ca:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    48ce:	e9d6 3200 	ldrd	r3, r2, [r6]
    48d2:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    48d4:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    48d6:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    48da:	d11a      	bne.n	4912 <mpu_configure_regions_and_partition.constprop.0+0xe6>
    48dc:	45d3      	cmp	fp, sl
    48de:	d107      	bne.n	48f0 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
    48e0:	4631      	mov	r1, r6
    48e2:	b2f8      	uxtb	r0, r7
    48e4:	f014 fc16 	bl	19114 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    48e8:	f108 0801 	add.w	r8, r8, #1
    48ec:	360c      	adds	r6, #12
    48ee:	e7a6      	b.n	483e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    48f0:	4631      	mov	r1, r6
	MPU->RNR = index;
    48f2:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    48f4:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    48f6:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    48fa:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    48fe:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4900:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    4902:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    4904:	f014 fc06 	bl	19114 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4908:	f110 0f16 	cmn.w	r0, #22
    490c:	d0cb      	beq.n	48a6 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
    490e:	1c44      	adds	r4, r0, #1
    4910:	e7ea      	b.n	48e8 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
    4912:	3b01      	subs	r3, #1
    4914:	45d3      	cmp	fp, sl
    4916:	b2e0      	uxtb	r0, r4
    4918:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    491c:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
    491e:	d106      	bne.n	492e <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4920:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4922:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4924:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4928:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    492a:	612b      	str	r3, [r5, #16]
			reg_index =
    492c:	e7ea      	b.n	4904 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    492e:	6929      	ldr	r1, [r5, #16]
    4930:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4934:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4936:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4938:	4631      	mov	r1, r6
    493a:	f014 fbeb 	bl	19114 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    493e:	f110 0f16 	cmn.w	r0, #22
    4942:	d0b0      	beq.n	48a6 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
    4944:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
    4946:	68ea      	ldr	r2, [r5, #12]
    4948:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    494c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    4950:	f362 0304 	bfi	r3, r2, #0, #5
    4954:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4958:	692b      	ldr	r3, [r5, #16]
    495a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    495e:	085b      	lsrs	r3, r3, #1
    4960:	f363 1247 	bfi	r2, r3, #5, #3
    4964:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    4968:	e9d6 3200 	ldrd	r3, r2, [r6]
    496c:	4413      	add	r3, r2
    496e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    4970:	f023 031f 	bic.w	r3, r3, #31
    4974:	445b      	add	r3, fp
    4976:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    497a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    497c:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    4980:	4669      	mov	r1, sp
    4982:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    4984:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    4986:	f7ff ff37 	bl	47f8 <region_allocate_and_init>
    498a:	e7bd      	b.n	4908 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    498c:	e000ed90 	.word	0xe000ed90
    4990:	0002339c 	.word	0x0002339c
    4994:	000232ec 	.word	0x000232ec
    4998:	0002520f 	.word	0x0002520f
    499c:	000251ec 	.word	0x000251ec

000049a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    49a0:	2205      	movs	r2, #5
    49a2:	4b03      	ldr	r3, [pc, #12]	; (49b0 <arm_core_mpu_enable+0x10>)
    49a4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    49a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49aa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    49ae:	4770      	bx	lr
    49b0:	e000ed90 	.word	0xe000ed90

000049b4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    49b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    49b8:	2200      	movs	r2, #0
    49ba:	4b01      	ldr	r3, [pc, #4]	; (49c0 <arm_core_mpu_disable+0xc>)
    49bc:	605a      	str	r2, [r3, #4]
}
    49be:	4770      	bx	lr
    49c0:	e000ed90 	.word	0xe000ed90

000049c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    49c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    49c6:	4c0e      	ldr	r4, [pc, #56]	; (4a00 <arm_mpu_init+0x3c>)
    49c8:	6825      	ldr	r5, [r4, #0]
    49ca:	2d08      	cmp	r5, #8
    49cc:	d814      	bhi.n	49f8 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    49ce:	f7ff fff1 	bl	49b4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    49d2:	2000      	movs	r0, #0
	MPU->MAIR0 =
    49d4:	4b0b      	ldr	r3, [pc, #44]	; (4a04 <arm_mpu_init+0x40>)
    49d6:	4a0c      	ldr	r2, [pc, #48]	; (4a08 <arm_mpu_init+0x44>)
    49d8:	631a      	str	r2, [r3, #48]	; 0x30
    49da:	4285      	cmp	r5, r0
    49dc:	d105      	bne.n	49ea <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    49de:	4b0b      	ldr	r3, [pc, #44]	; (4a0c <arm_mpu_init+0x48>)
    49e0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    49e2:	f7ff ffdd 	bl	49a0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    49e6:	2000      	movs	r0, #0
}
    49e8:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    49ea:	6861      	ldr	r1, [r4, #4]
    49ec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    49f0:	f7ff feea 	bl	47c8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    49f4:	3001      	adds	r0, #1
    49f6:	e7f0      	b.n	49da <arm_mpu_init+0x16>
		return -1;
    49f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49fc:	e7f4      	b.n	49e8 <arm_mpu_init+0x24>
    49fe:	bf00      	nop
    4a00:	00023764 	.word	0x00023764
    4a04:	e000ed90 	.word	0xe000ed90
    4a08:	0044ffaa 	.word	0x0044ffaa
    4a0c:	20029f68 	.word	0x20029f68

00004a10 <arm_core_mpu_configure_static_mpu_regions>:
{
    4a10:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4a12:	4c03      	ldr	r4, [pc, #12]	; (4a20 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4a14:	7822      	ldrb	r2, [r4, #0]
    4a16:	f7ff ff09 	bl	482c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4a1a:	7020      	strb	r0, [r4, #0]
}
    4a1c:	bd10      	pop	{r4, pc}
    4a1e:	bf00      	nop
    4a20:	20029f68 	.word	0x20029f68

00004a24 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    4a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a28:	4d26      	ldr	r5, [pc, #152]	; (4ac4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    4a2a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4a2c:	4606      	mov	r6, r0
    4a2e:	f04f 0800 	mov.w	r8, #0
    4a32:	46ab      	mov	fp, r5
	MPU->RNR = index;
    4a34:	4f24      	ldr	r7, [pc, #144]	; (4ac8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4a36:	45d0      	cmp	r8, sl
    4a38:	da1b      	bge.n	4a72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    4a3a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    4a3e:	f1b9 0f00 	cmp.w	r9, #0
    4a42:	d039      	beq.n	4ab8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4a44:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a46:	4608      	mov	r0, r1
    4a48:	9101      	str	r1, [sp, #4]
    4a4a:	f014 fb7c 	bl	19146 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a4e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a50:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a52:	eb09 0001 	add.w	r0, r9, r1
    4a56:	3801      	subs	r0, #1
    4a58:	f014 fb75 	bl	19146 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4a5c:	4284      	cmp	r4, r0
    4a5e:	f04f 0214 	mov.w	r2, #20
    4a62:	4b1a      	ldr	r3, [pc, #104]	; (4acc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    4a64:	d008      	beq.n	4a78 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    4a66:	f06f 0315 	mvn.w	r3, #21
    4a6a:	fb02 f808 	mul.w	r8, r2, r8
    4a6e:	f84b 3008 	str.w	r3, [fp, r8]
}
    4a72:	b003      	add	sp, #12
    4a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4a78:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    4a7c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    4a7e:	d0f8      	beq.n	4a72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4a80:	7819      	ldrb	r1, [r3, #0]
    4a82:	42a1      	cmp	r1, r4
    4a84:	ddf5      	ble.n	4a72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    4a86:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    4a8a:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    4a8c:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    4a8e:	68fc      	ldr	r4, [r7, #12]
    4a90:	f100 0108 	add.w	r1, r0, #8
    4a94:	7b00      	ldrb	r0, [r0, #12]
    4a96:	f364 0004 	bfi	r0, r4, #0, #5
    4a9a:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4a9c:	6938      	ldr	r0, [r7, #16]
    4a9e:	790c      	ldrb	r4, [r1, #4]
    4aa0:	0840      	lsrs	r0, r0, #1
    4aa2:	f360 1447 	bfi	r4, r0, #5, #3
    4aa6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4aa8:	68f9      	ldr	r1, [r7, #12]
    4aaa:	f021 011f 	bic.w	r1, r1, #31
    4aae:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4ab0:	6939      	ldr	r1, [r7, #16]
    4ab2:	f021 011f 	bic.w	r1, r1, #31
    4ab6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4ab8:	f108 0801 	add.w	r8, r8, #1
    4abc:	3514      	adds	r5, #20
    4abe:	360c      	adds	r6, #12
    4ac0:	e7b9      	b.n	4a36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    4ac2:	bf00      	nop
    4ac4:	200019a8 	.word	0x200019a8
    4ac8:	e000ed90 	.word	0xe000ed90
    4acc:	20029f68 	.word	0x20029f68

00004ad0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4ad0:	4b01      	ldr	r3, [pc, #4]	; (4ad8 <__stdout_hook_install+0x8>)
    4ad2:	6018      	str	r0, [r3, #0]
}
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	20000208 	.word	0x20000208

00004adc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4adc:	3902      	subs	r1, #2
    4ade:	2901      	cmp	r1, #1
    4ae0:	d802      	bhi.n	4ae8 <z_impl_zephyr_fputc+0xc>
    4ae2:	4b03      	ldr	r3, [pc, #12]	; (4af0 <z_impl_zephyr_fputc+0x14>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	4718      	bx	r3
}
    4ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4aec:	4770      	bx	lr
    4aee:	bf00      	nop
    4af0:	20000208 	.word	0x20000208

00004af4 <vsnprintf>:
	return r;
}

int vsnprintf(char *_MLIBC_RESTRICT s, size_t len,
	      const char *_MLIBC_RESTRICT format, va_list vargs)
{
    4af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    4af6:	b909      	cbnz	r1, 4afc <vsnprintf+0x8>
		s = &dummy; /* write final NUL to dummy, can't change * *s */
    4af8:	f10d 0007 	add.w	r0, sp, #7
	}

	p.ptr = s;
	p.len = (int) len;
    4afc:	e9cd 0102 	strd	r0, r1, [sp, #8]

	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    4b00:	a902      	add	r1, sp, #8
    4b02:	4804      	ldr	r0, [pc, #16]	; (4b14 <vsnprintf+0x20>)
    4b04:	f7fc fe3c 	bl	1780 <cbvprintf>

	*(p.ptr) = 0;
    4b08:	2200      	movs	r2, #0
    4b0a:	9b02      	ldr	r3, [sp, #8]
    4b0c:	701a      	strb	r2, [r3, #0]
	return r;
}
    4b0e:	b005      	add	sp, #20
    4b10:	f85d fb04 	ldr.w	pc, [sp], #4
    4b14:	000192af 	.word	0x000192af

00004b18 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    4b18:	b40f      	push	{r0, r1, r2, r3}
    4b1a:	b507      	push	{r0, r1, r2, lr}
    4b1c:	ab04      	add	r3, sp, #16
    4b1e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    4b22:	2102      	movs	r1, #2
    4b24:	4804      	ldr	r0, [pc, #16]	; (4b38 <printf+0x20>)
	va_start(vargs, format);
    4b26:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    4b28:	f7fc fe2a 	bl	1780 <cbvprintf>
	va_end(vargs);

	return r;
}
    4b2c:	b003      	add	sp, #12
    4b2e:	f85d eb04 	ldr.w	lr, [sp], #4
    4b32:	b004      	add	sp, #16
    4b34:	4770      	bx	lr
    4b36:	bf00      	nop
    4b38:	000192ab 	.word	0x000192ab

00004b3c <lvgl_log>:
#endif /* CONFIG_LVGL_BUFFER_ALLOC_STATIC */

#if CONFIG_LVGL_LOG_LEVEL != 0
static void lvgl_log(lv_log_level_t level, const char *file, uint32_t line,
		const char *func, const char *dsc)
{
    4b3c:	4601      	mov	r1, r0
	 * * LOG_LEVEL_ERR 1
	 * * LOG_LEVEL_WRN 2
	 * * LOG_LEVEL_INF 3
	 * * LOG_LEVEL_DBG 4
	 */
	uint8_t zephyr_level = LOG_LEVEL_DBG - level;
    4b3e:	f1c1 0104 	rsb	r1, r1, #4
    4b42:	b2c9      	uxtb	r1, r1
{
    4b44:	b510      	push	{r4, lr}

	ARG_UNUSED(file);
	ARG_UNUSED(line);
	ARG_UNUSED(func);

	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4b46:	2903      	cmp	r1, #3
{
    4b48:	9802      	ldr	r0, [sp, #8]
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4b4a:	d81c      	bhi.n	4b86 <lvgl_log+0x4a>
    4b4c:	4b0e      	ldr	r3, [pc, #56]	; (4b88 <lvgl_log+0x4c>)
    4b4e:	4a0f      	ldr	r2, [pc, #60]	; (4b8c <lvgl_log+0x50>)
    4b50:	f001 0407 	and.w	r4, r1, #7
    4b54:	1a9b      	subs	r3, r3, r2
    4b56:	08db      	lsrs	r3, r3, #3
    4b58:	2904      	cmp	r1, #4
    4b5a:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
    4b5e:	d109      	bne.n	4b74 <lvgl_log+0x38>
    4b60:	f7fd fb26 	bl	21b0 <log_strdup>
    4b64:	4623      	mov	r3, r4
}
    4b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4b6a:	4602      	mov	r2, r0
    4b6c:	4908      	ldr	r1, [pc, #32]	; (4b90 <lvgl_log+0x54>)
    4b6e:	4809      	ldr	r0, [pc, #36]	; (4b94 <lvgl_log+0x58>)
    4b70:	f013 b9cd 	b.w	17f0e <log_2>
    4b74:	f7fd fb1c 	bl	21b0 <log_strdup>
    4b78:	4622      	mov	r2, r4
}
    4b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4b7e:	4601      	mov	r1, r0
    4b80:	4805      	ldr	r0, [pc, #20]	; (4b98 <lvgl_log+0x5c>)
    4b82:	f013 b9b0 	b.w	17ee6 <log_1>
}
    4b86:	bd10      	pop	{r4, pc}
    4b88:	00023394 	.word	0x00023394
    4b8c:	000232ec 	.word	0x000232ec
    4b90:	000252e3 	.word	0x000252e3
    4b94:	00025a66 	.word	0x00025a66
    4b98:	00025a7b 	.word	0x00025a7b

00004b9c <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_POINTER_KSCAN */

static int lvgl_init(const struct device *dev)
{
    4b9c:	b510      	push	{r4, lr}
    4b9e:	b090      	sub	sp, #64	; 0x40
    4ba0:	483b      	ldr	r0, [pc, #236]	; (4c90 <lvgl_init+0xf4>)
    4ba2:	f010 ff73 	bl	15a8c <z_impl_device_get_binding>
	const struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	int err = 0;
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    4ba6:	4604      	mov	r4, r0
    4ba8:	b970      	cbnz	r0, 4bc8 <lvgl_init+0x2c>
    4baa:	4b3a      	ldr	r3, [pc, #232]	; (4c94 <lvgl_init+0xf8>)
    4bac:	493a      	ldr	r1, [pc, #232]	; (4c98 <lvgl_init+0xfc>)
		LOG_ERR("Display device not found.");
    4bae:	483b      	ldr	r0, [pc, #236]	; (4c9c <lvgl_init+0x100>)
    4bb0:	1ac9      	subs	r1, r1, r3
    4bb2:	08c9      	lsrs	r1, r1, #3
    4bb4:	0189      	lsls	r1, r1, #6
    4bb6:	f041 0101 	orr.w	r1, r1, #1
    4bba:	f013 f987 	bl	17ecc <log_0>
		return -ENODEV;
    4bbe:	f06f 0412 	mvn.w	r4, #18
#ifdef CONFIG_LVGL_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LVGL_POINTER_KSCAN */

	return 0;
}
    4bc2:	4620      	mov	r0, r4
    4bc4:	b010      	add	sp, #64	; 0x40
    4bc6:	bd10      	pop	{r4, pc}
	lv_log_register_print_cb(lvgl_log);
    4bc8:	4835      	ldr	r0, [pc, #212]	; (4ca0 <lvgl_init+0x104>)
    4bca:	f00d fef1 	bl	129b0 <lv_log_register_print_cb>
	lv_init();
    4bce:	f009 fff5 	bl	ebbc <lv_init>
	lv_disp_drv_init(&disp_drv);
    4bd2:	a804      	add	r0, sp, #16
    4bd4:	f00d fc7c 	bl	124d0 <lv_disp_drv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
    4bd8:	68a3      	ldr	r3, [r4, #8]
    4bda:	4669      	mov	r1, sp
    4bdc:	69db      	ldr	r3, [r3, #28]
    4bde:	4620      	mov	r0, r4
	disp_drv.user_data = (void *) display_dev;
    4be0:	940f      	str	r4, [sp, #60]	; 0x3c
    4be2:	4798      	blx	r3
	if (cap.x_resolution <= CONFIG_LVGL_HOR_RES_MAX) {
    4be4:	f8bd 3000 	ldrh.w	r3, [sp]
    4be8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    4bec:	d824      	bhi.n	4c38 <lvgl_init+0x9c>
	int err = 0;
    4bee:	2400      	movs	r4, #0
		disp_drv->hor_res = cap.x_resolution;
    4bf0:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cap.y_resolution <= CONFIG_LVGL_VER_RES_MAX) {
    4bf4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4bf8:	2bf0      	cmp	r3, #240	; 0xf0
    4bfa:	d82a      	bhi.n	4c52 <lvgl_init+0xb6>
		disp_drv->ver_res = cap.y_resolution;
    4bfc:	f8ad 3012 	strh.w	r3, [sp, #18]
	disp_drv->buffer = &disp_buf;
    4c00:	4828      	ldr	r0, [pc, #160]	; (4ca4 <lvgl_init+0x108>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4c02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4c06:	2200      	movs	r2, #0
    4c08:	4927      	ldr	r1, [pc, #156]	; (4ca8 <lvgl_init+0x10c>)
	disp_drv->buffer = &disp_buf;
    4c0a:	9005      	str	r0, [sp, #20]
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4c0c:	f01c f96b 	bl	20ee6 <lv_disp_buf_init>
	if (err != 0) {
    4c10:	2c00      	cmp	r4, #0
    4c12:	d1d6      	bne.n	4bc2 <lvgl_init+0x26>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    4c14:	a804      	add	r0, sp, #16
    4c16:	f000 f851 	bl	4cbc <set_lvgl_rendering_cb>
    4c1a:	4604      	mov	r4, r0
    4c1c:	b330      	cbz	r0, 4c6c <lvgl_init+0xd0>
    4c1e:	4b1d      	ldr	r3, [pc, #116]	; (4c94 <lvgl_init+0xf8>)
    4c20:	491d      	ldr	r1, [pc, #116]	; (4c98 <lvgl_init+0xfc>)
		LOG_ERR("Display not supported.");
    4c22:	4822      	ldr	r0, [pc, #136]	; (4cac <lvgl_init+0x110>)
    4c24:	1ac9      	subs	r1, r1, r3
    4c26:	08c9      	lsrs	r1, r1, #3
    4c28:	0189      	lsls	r1, r1, #6
    4c2a:	f041 0101 	orr.w	r1, r1, #1
    4c2e:	f013 f94d 	bl	17ecc <log_0>
		return -ENOTSUP;
    4c32:	f06f 0422 	mvn.w	r4, #34	; 0x22
    4c36:	e7c4      	b.n	4bc2 <lvgl_init+0x26>
    4c38:	4b16      	ldr	r3, [pc, #88]	; (4c94 <lvgl_init+0xf8>)
    4c3a:	4917      	ldr	r1, [pc, #92]	; (4c98 <lvgl_init+0xfc>)
		LOG_ERR("Horizontal resolution is larger than maximum");
    4c3c:	481c      	ldr	r0, [pc, #112]	; (4cb0 <lvgl_init+0x114>)
    4c3e:	1ac9      	subs	r1, r1, r3
    4c40:	08c9      	lsrs	r1, r1, #3
    4c42:	0189      	lsls	r1, r1, #6
    4c44:	f041 0101 	orr.w	r1, r1, #1
    4c48:	f013 f940 	bl	17ecc <log_0>
		err = -ENOTSUP;
    4c4c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    4c50:	e7d0      	b.n	4bf4 <lvgl_init+0x58>
    4c52:	4b10      	ldr	r3, [pc, #64]	; (4c94 <lvgl_init+0xf8>)
    4c54:	4910      	ldr	r1, [pc, #64]	; (4c98 <lvgl_init+0xfc>)
		LOG_ERR("Vertical resolution is larger than maximum");
    4c56:	4817      	ldr	r0, [pc, #92]	; (4cb4 <lvgl_init+0x118>)
    4c58:	1ac9      	subs	r1, r1, r3
    4c5a:	08c9      	lsrs	r1, r1, #3
    4c5c:	0189      	lsls	r1, r1, #6
    4c5e:	f041 0101 	orr.w	r1, r1, #1
    4c62:	f013 f933 	bl	17ecc <log_0>
		err = -ENOTSUP;
    4c66:	f06f 0422 	mvn.w	r4, #34	; 0x22
    4c6a:	e7c9      	b.n	4c00 <lvgl_init+0x64>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
    4c6c:	a804      	add	r0, sp, #16
    4c6e:	f00d fcaf 	bl	125d0 <lv_disp_drv_register>
    4c72:	2800      	cmp	r0, #0
    4c74:	d1a5      	bne.n	4bc2 <lvgl_init+0x26>
    4c76:	4b07      	ldr	r3, [pc, #28]	; (4c94 <lvgl_init+0xf8>)
    4c78:	4907      	ldr	r1, [pc, #28]	; (4c98 <lvgl_init+0xfc>)
		LOG_ERR("Failed to register display device.");
    4c7a:	480f      	ldr	r0, [pc, #60]	; (4cb8 <lvgl_init+0x11c>)
    4c7c:	1ac9      	subs	r1, r1, r3
    4c7e:	08c9      	lsrs	r1, r1, #3
    4c80:	0189      	lsls	r1, r1, #6
    4c82:	f041 0101 	orr.w	r1, r1, #1
    4c86:	f013 f921 	bl	17ecc <log_0>
		return -EPERM;
    4c8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4c8e:	e798      	b.n	4bc2 <lvgl_init+0x26>
    4c90:	00024422 	.word	0x00024422
    4c94:	000232ec 	.word	0x000232ec
    4c98:	00023394 	.word	0x00023394
    4c9c:	00025232 	.word	0x00025232
    4ca0:	00004b3d 	.word	0x00004b3d
    4ca4:	200259bc 	.word	0x200259bc
    4ca8:	200019bc 	.word	0x200019bc
    4cac:	000252a4 	.word	0x000252a4
    4cb0:	0002524c 	.word	0x0002524c
    4cb4:	00025279 	.word	0x00025279
    4cb8:	000252bb 	.word	0x000252bb

00004cbc <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    4cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4cbe:	4604      	mov	r4, r0
	int err = 0;
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
    4cc0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4cc2:	4669      	mov	r1, sp
    4cc4:	6883      	ldr	r3, [r0, #8]
    4cc6:	69db      	ldr	r3, [r3, #28]
    4cc8:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    4cca:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4cce:	2b08      	cmp	r3, #8
    4cd0:	d80a      	bhi.n	4ce8 <set_lvgl_rendering_cb+0x2c>
    4cd2:	b16b      	cbz	r3, 4cf0 <set_lvgl_rendering_cb+0x34>
    4cd4:	3b01      	subs	r3, #1
    4cd6:	2200      	movs	r2, #0
    4cd8:	2b07      	cmp	r3, #7
    4cda:	d809      	bhi.n	4cf0 <set_lvgl_rendering_cb+0x34>
    4cdc:	e8df f003 	tbb	[pc, r3]
    4ce0:	23082316 	.word	0x23082316
    4ce4:	0f080808 	.word	0x0f080808
    4ce8:	2b10      	cmp	r3, #16
    4cea:	d015      	beq.n	4d18 <set_lvgl_rendering_cb+0x5c>
    4cec:	2b20      	cmp	r3, #32
    4cee:	d013      	beq.n	4d18 <set_lvgl_rendering_cb+0x5c>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
		break;
	default:
		disp_drv->flush_cb = NULL;
    4cf0:	2300      	movs	r3, #0
		disp_drv->rounder_cb = NULL;
		disp_drv->set_px_cb = NULL;
		err = -ENOTSUP;
    4cf2:	f06f 0022 	mvn.w	r0, #34	; 0x22
		disp_drv->rounder_cb = NULL;
    4cf6:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    4cfa:	6163      	str	r3, [r4, #20]
		break;

	}

	return err;
    4cfc:	e004      	b.n	4d08 <set_lvgl_rendering_cb+0x4c>
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    4cfe:	4b0d      	ldr	r3, [pc, #52]	; (4d34 <set_lvgl_rendering_cb+0x78>)
		disp_drv->set_px_cb = NULL;
    4d00:	6162      	str	r2, [r4, #20]
		disp_drv->rounder_cb = NULL;
    4d02:	e9c4 3203 	strd	r3, r2, [r4, #12]
	int err = 0;
    4d06:	2000      	movs	r0, #0
}
    4d08:	b004      	add	sp, #16
    4d0a:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    4d0c:	4b0a      	ldr	r3, [pc, #40]	; (4d38 <set_lvgl_rendering_cb+0x7c>)
		disp_drv->rounder_cb = NULL;
    4d0e:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4d12:	4b0a      	ldr	r3, [pc, #40]	; (4d3c <set_lvgl_rendering_cb+0x80>)
    4d14:	6163      	str	r3, [r4, #20]
    4d16:	e7f6      	b.n	4d06 <set_lvgl_rendering_cb+0x4a>
		disp_drv->rounder_cb = NULL;
    4d18:	2000      	movs	r0, #0
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    4d1a:	4b09      	ldr	r3, [pc, #36]	; (4d40 <set_lvgl_rendering_cb+0x84>)
		disp_drv->rounder_cb = NULL;
    4d1c:	6120      	str	r0, [r4, #16]
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    4d1e:	60e3      	str	r3, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_16bit;
    4d20:	4b08      	ldr	r3, [pc, #32]	; (4d44 <set_lvgl_rendering_cb+0x88>)
    4d22:	6163      	str	r3, [r4, #20]
		break;
    4d24:	e7f0      	b.n	4d08 <set_lvgl_rendering_cb+0x4c>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    4d26:	4b08      	ldr	r3, [pc, #32]	; (4d48 <set_lvgl_rendering_cb+0x8c>)
    4d28:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    4d2a:	4b08      	ldr	r3, [pc, #32]	; (4d4c <set_lvgl_rendering_cb+0x90>)
    4d2c:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    4d2e:	4b08      	ldr	r3, [pc, #32]	; (4d50 <set_lvgl_rendering_cb+0x94>)
    4d30:	e7f0      	b.n	4d14 <set_lvgl_rendering_cb+0x58>
    4d32:	bf00      	nop
    4d34:	0001955d 	.word	0x0001955d
    4d38:	00019489 	.word	0x00019489
    4d3c:	000194d7 	.word	0x000194d7
    4d40:	00019417 	.word	0x00019417
    4d44:	00019463 	.word	0x00019463
    4d48:	000192cf 	.word	0x000192cf
    4d4c:	000193df 	.word	0x000193df
    4d50:	00019349 	.word	0x00019349

00004d54 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4d58:	4a09      	ldr	r2, [pc, #36]	; (4d80 <remoteproc_mgr_boot+0x2c>)
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    4d5a:	2000      	movs	r0, #0
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4d5c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    4d60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    4d64:	f842 3cd4 	str.w	r3, [r2, #-212]
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    4d68:	f842 3cd8 	str.w	r3, [r2, #-216]
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    4d6c:	2210      	movs	r2, #16
    4d6e:	4b05      	ldr	r3, [pc, #20]	; (4d84 <remoteproc_mgr_boot+0x30>)
    4d70:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    4d74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d78:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	50842800 	.word	0x50842800
    4d84:	50003000 	.word	0x50003000

00004d88 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4d88:	4b0e      	ldr	r3, [pc, #56]	; (4dc4 <bt_hex_real+0x3c>)
    4d8a:	2940      	cmp	r1, #64	; 0x40
    4d8c:	bf28      	it	cs
    4d8e:	2140      	movcs	r1, #64	; 0x40
{
    4d90:	b570      	push	{r4, r5, r6, lr}
    4d92:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4d94:	4c0c      	ldr	r4, [pc, #48]	; (4dc8 <bt_hex_real+0x40>)
    4d96:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    4d98:	42b0      	cmp	r0, r6
    4d9a:	f103 0302 	add.w	r3, r3, #2
    4d9e:	d104      	bne.n	4daa <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4da0:	2300      	movs	r3, #0
    4da2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4da6:	4807      	ldr	r0, [pc, #28]	; (4dc4 <bt_hex_real+0x3c>)
    4da8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4daa:	7802      	ldrb	r2, [r0, #0]
    4dac:	0912      	lsrs	r2, r2, #4
    4dae:	5ca2      	ldrb	r2, [r4, r2]
    4db0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4db4:	f810 2b01 	ldrb.w	r2, [r0], #1
    4db8:	f002 020f 	and.w	r2, r2, #15
    4dbc:	5ca2      	ldrb	r2, [r4, r2]
    4dbe:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4dc2:	e7e9      	b.n	4d98 <bt_hex_real+0x10>
    4dc4:	20029f69 	.word	0x20029f69
    4dc8:	00025315 	.word	0x00025315

00004dcc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4dcc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    4dce:	7803      	ldrb	r3, [r0, #0]
    4dd0:	b08b      	sub	sp, #44	; 0x2c
    4dd2:	4604      	mov	r4, r0
    4dd4:	ad07      	add	r5, sp, #28
    4dd6:	2b03      	cmp	r3, #3
    4dd8:	d821      	bhi.n	4e1e <bt_addr_le_str_real+0x52>
    4dda:	e8df f003 	tbb	[pc, r3]
    4dde:	1a02      	.short	0x1a02
    4de0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    4de2:	4912      	ldr	r1, [pc, #72]	; (4e2c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    4de4:	4628      	mov	r0, r5
    4de6:	f014 f9b7 	bl	19158 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4dea:	7863      	ldrb	r3, [r4, #1]
    4dec:	211e      	movs	r1, #30
    4dee:	9304      	str	r3, [sp, #16]
    4df0:	78a3      	ldrb	r3, [r4, #2]
    4df2:	4a0f      	ldr	r2, [pc, #60]	; (4e30 <bt_addr_le_str_real+0x64>)
    4df4:	9303      	str	r3, [sp, #12]
    4df6:	78e3      	ldrb	r3, [r4, #3]
    4df8:	9505      	str	r5, [sp, #20]
    4dfa:	9302      	str	r3, [sp, #8]
    4dfc:	7923      	ldrb	r3, [r4, #4]
    4dfe:	480d      	ldr	r0, [pc, #52]	; (4e34 <bt_addr_le_str_real+0x68>)
    4e00:	9301      	str	r3, [sp, #4]
    4e02:	7963      	ldrb	r3, [r4, #5]
    4e04:	9300      	str	r3, [sp, #0]
    4e06:	79a3      	ldrb	r3, [r4, #6]
    4e08:	f012 fc46 	bl	17698 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4e0c:	4809      	ldr	r0, [pc, #36]	; (4e34 <bt_addr_le_str_real+0x68>)
    4e0e:	b00b      	add	sp, #44	; 0x2c
    4e10:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4e12:	4909      	ldr	r1, [pc, #36]	; (4e38 <bt_addr_le_str_real+0x6c>)
    4e14:	e7e6      	b.n	4de4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    4e16:	4909      	ldr	r1, [pc, #36]	; (4e3c <bt_addr_le_str_real+0x70>)
    4e18:	e7e4      	b.n	4de4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4e1a:	4909      	ldr	r1, [pc, #36]	; (4e40 <bt_addr_le_str_real+0x74>)
    4e1c:	e7e2      	b.n	4de4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4e1e:	210a      	movs	r1, #10
    4e20:	4628      	mov	r0, r5
    4e22:	4a08      	ldr	r2, [pc, #32]	; (4e44 <bt_addr_le_str_real+0x78>)
    4e24:	f012 fc38 	bl	17698 <snprintk>
		break;
    4e28:	e7df      	b.n	4dea <bt_addr_le_str_real+0x1e>
    4e2a:	bf00      	nop
    4e2c:	00024298 	.word	0x00024298
    4e30:	000242ba 	.word	0x000242ba
    4e34:	20029fea 	.word	0x20029fea
    4e38:	0002429f 	.word	0x0002429f
    4e3c:	000242a6 	.word	0x000242a6
    4e40:	000242b0 	.word	0x000242b0
    4e44:	000267b2 	.word	0x000267b2

00004e48 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4e48:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    4e4a:	7802      	ldrb	r2, [r0, #0]
{
    4e4c:	4604      	mov	r4, r0
	switch (src->type) {
    4e4e:	2a01      	cmp	r2, #1
{
    4e50:	460b      	mov	r3, r1
	switch (src->type) {
    4e52:	d016      	beq.n	4e82 <uuid_to_uuid128+0x3a>
    4e54:	2a02      	cmp	r2, #2
    4e56:	d02c      	beq.n	4eb2 <uuid_to_uuid128+0x6a>
    4e58:	b98a      	cbnz	r2, 4e7e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4e5a:	460d      	mov	r5, r1
    4e5c:	4a18      	ldr	r2, [pc, #96]	; (4ec0 <uuid_to_uuid128+0x78>)
    4e5e:	f102 0710 	add.w	r7, r2, #16
    4e62:	462e      	mov	r6, r5
    4e64:	6810      	ldr	r0, [r2, #0]
    4e66:	6851      	ldr	r1, [r2, #4]
    4e68:	3208      	adds	r2, #8
    4e6a:	c603      	stmia	r6!, {r0, r1}
    4e6c:	42ba      	cmp	r2, r7
    4e6e:	4635      	mov	r5, r6
    4e70:	d1f7      	bne.n	4e62 <uuid_to_uuid128+0x1a>
    4e72:	7812      	ldrb	r2, [r2, #0]
    4e74:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4e76:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    4e78:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4e7a:	0a12      	lsrs	r2, r2, #8
    4e7c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4e7e:	bcf0      	pop	{r4, r5, r6, r7}
    4e80:	4770      	bx	lr
		*dst = uuid128_base;
    4e82:	460d      	mov	r5, r1
    4e84:	4a0e      	ldr	r2, [pc, #56]	; (4ec0 <uuid_to_uuid128+0x78>)
    4e86:	f102 0710 	add.w	r7, r2, #16
    4e8a:	462e      	mov	r6, r5
    4e8c:	6810      	ldr	r0, [r2, #0]
    4e8e:	6851      	ldr	r1, [r2, #4]
    4e90:	3208      	adds	r2, #8
    4e92:	c603      	stmia	r6!, {r0, r1}
    4e94:	42ba      	cmp	r2, r7
    4e96:	4635      	mov	r5, r6
    4e98:	d1f7      	bne.n	4e8a <uuid_to_uuid128+0x42>
    4e9a:	7812      	ldrb	r2, [r2, #0]
    4e9c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    4e9e:	6862      	ldr	r2, [r4, #4]
    4ea0:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    4ea4:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    4ea6:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4ea8:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4eaa:	0a12      	lsrs	r2, r2, #8
    4eac:	7399      	strb	r1, [r3, #14]
    4eae:	741a      	strb	r2, [r3, #16]
}
    4eb0:	e7e5      	b.n	4e7e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    4eb2:	4601      	mov	r1, r0
}
    4eb4:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4eb6:	2211      	movs	r2, #17
    4eb8:	4618      	mov	r0, r3
    4eba:	f014 b9a5 	b.w	19208 <memcpy>
    4ebe:	bf00      	nop
    4ec0:	0002532d 	.word	0x0002532d

00004ec4 <bt_buf_get_rx>:
	if (IS_ENABLED(CONFIG_BT_ISO) && type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    4ec4:	2801      	cmp	r0, #1
{
    4ec6:	b538      	push	{r3, r4, r5, lr}
    4ec8:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    4eca:	bf0c      	ite	eq
    4ecc:	4806      	ldreq	r0, [pc, #24]	; (4ee8 <bt_buf_get_rx+0x24>)
    4ece:	4807      	ldrne	r0, [pc, #28]	; (4eec <bt_buf_get_rx+0x28>)
    4ed0:	f016 fc01 	bl	1b6d6 <net_buf_alloc_fixed>
    4ed4:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    4ed6:	b120      	cbz	r0, 4ee2 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
    4ed8:	2101      	movs	r1, #1
    4eda:	3008      	adds	r0, #8
    4edc:	f016 fc20 	bl	1b720 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4ee0:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4ee2:	4620      	mov	r0, r4
    4ee4:	bd38      	pop	{r3, r4, r5, pc}
    4ee6:	bf00      	nop
    4ee8:	20000790 	.word	0x20000790
    4eec:	200006c8 	.word	0x200006c8

00004ef0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    4ef0:	4602      	mov	r2, r0
    4ef2:	460b      	mov	r3, r1
    4ef4:	b570      	push	{r4, r5, r6, lr}
    4ef6:	f04f 0120 	mov.w	r1, #32
    4efa:	f3ef 8511 	mrs	r5, BASEPRI
    4efe:	f381 8811 	msr	BASEPRI, r1
    4f02:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    4f06:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    4f08:	490b      	ldr	r1, [pc, #44]	; (4f38 <bt_buf_get_cmd_complete+0x48>)
    4f0a:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    4f0e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
	__asm__ volatile(
    4f12:	f385 8811 	msr	BASEPRI, r5
    4f16:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4f1a:	b924      	cbnz	r4, 4f26 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4f20:	2001      	movs	r0, #1
    4f22:	f7ff bfcf 	b.w	4ec4 <bt_buf_get_rx>
    4f26:	2101      	movs	r1, #1
		buf->len = 0U;
    4f28:	81a0      	strh	r0, [r4, #12]
    4f2a:	7521      	strb	r1, [r4, #20]
    4f2c:	f104 0008 	add.w	r0, r4, #8
    4f30:	f016 fbf6 	bl	1b720 <net_buf_simple_reserve>
}
    4f34:	4620      	mov	r0, r4
    4f36:	bd70      	pop	{r4, r5, r6, pc}
    4f38:	20000000 	.word	0x20000000

00004f3c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4f3c:	b570      	push	{r4, r5, r6, lr}
    4f3e:	4604      	mov	r4, r0
	switch (evt) {
    4f40:	2c0f      	cmp	r4, #15
{
    4f42:	460d      	mov	r5, r1
    4f44:	4610      	mov	r0, r2
    4f46:	4619      	mov	r1, r3
	switch (evt) {
    4f48:	d805      	bhi.n	4f56 <bt_buf_get_evt+0x1a>
    4f4a:	2c0d      	cmp	r4, #13
    4f4c:	d912      	bls.n	4f74 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4f52:	f7ff bfcd 	b.w	4ef0 <bt_buf_get_cmd_complete>
	switch (evt) {
    4f56:	2c13      	cmp	r4, #19
    4f58:	d10c      	bne.n	4f74 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    4f5a:	480b      	ldr	r0, [pc, #44]	; (4f88 <bt_buf_get_evt+0x4c>)
    4f5c:	f016 fbbb 	bl	1b6d6 <net_buf_alloc_fixed>
			if (buf) {
    4f60:	4604      	mov	r4, r0
    4f62:	b128      	cbz	r0, 4f70 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4f64:	2101      	movs	r1, #1
    4f66:	3008      	adds	r0, #8
    4f68:	f016 fbda 	bl	1b720 <net_buf_simple_reserve>
    4f6c:	2301      	movs	r3, #1
    4f6e:	7523      	strb	r3, [r4, #20]
}
    4f70:	4620      	mov	r0, r4
    4f72:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    4f74:	4602      	mov	r2, r0
    4f76:	460b      	mov	r3, r1
		if (discardable) {
    4f78:	b10d      	cbz	r5, 4f7e <bt_buf_get_evt+0x42>
    4f7a:	4804      	ldr	r0, [pc, #16]	; (4f8c <bt_buf_get_evt+0x50>)
    4f7c:	e7ee      	b.n	4f5c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4f7e:	2001      	movs	r0, #1
}
    4f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4f84:	f7ff bf9e 	b.w	4ec4 <bt_buf_get_rx>
    4f88:	200007b8 	.word	0x200007b8
    4f8c:	20000718 	.word	0x20000718

00004f90 <le_dhkey_complete>:
	if (dh_key_cb) {
    4f90:	4905      	ldr	r1, [pc, #20]	; (4fa8 <le_dhkey_complete+0x18>)
    4f92:	680b      	ldr	r3, [r1, #0]
    4f94:	b133      	cbz	r3, 4fa4 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4f96:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    4f98:	2000      	movs	r0, #0
    4f9a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    4f9c:	7811      	ldrb	r1, [r2, #0]
    4f9e:	b901      	cbnz	r1, 4fa2 <le_dhkey_complete+0x12>
    4fa0:	1c50      	adds	r0, r2, #1
    4fa2:	4718      	bx	r3
}
    4fa4:	4770      	bx	lr
    4fa6:	bf00      	nop
    4fa8:	200259f8 	.word	0x200259f8

00004fac <ver_str>:
{
    4fac:	b570      	push	{r4, r5, r6, lr}
    4fae:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    4fb0:	466c      	mov	r4, sp
{
    4fb2:	4606      	mov	r6, r0
	const char * const str[] = {
    4fb4:	4d09      	ldr	r5, [pc, #36]	; (4fdc <ver_str+0x30>)
	if (ver < ARRAY_SIZE(str)) {
    4fb6:	2e0b      	cmp	r6, #11
	const char * const str[] = {
    4fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4fc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return str[ver];
    4fc8:	bf9d      	ittte	ls
    4fca:	ab0c      	addls	r3, sp, #48	; 0x30
    4fcc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    4fd0:	f856 0c30 	ldrls.w	r0, [r6, #-48]
	return "unknown";
    4fd4:	4802      	ldrhi	r0, [pc, #8]	; (4fe0 <ver_str+0x34>)
}
    4fd6:	b00c      	add	sp, #48	; 0x30
    4fd8:	bd70      	pop	{r4, r5, r6, pc}
    4fda:	bf00      	nop
    4fdc:	0002346c 	.word	0x0002346c
    4fe0:	00025430 	.word	0x00025430

00004fe4 <hci_data_buf_overflow>:
    4fe4:	4905      	ldr	r1, [pc, #20]	; (4ffc <hci_data_buf_overflow+0x18>)
    4fe6:	4a06      	ldr	r2, [pc, #24]	; (5000 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    4fe8:	6883      	ldr	r3, [r0, #8]
    4fea:	1a52      	subs	r2, r2, r1
    4fec:	08d2      	lsrs	r2, r2, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4fee:	0192      	lsls	r2, r2, #6
    4ff0:	7819      	ldrb	r1, [r3, #0]
    4ff2:	4804      	ldr	r0, [pc, #16]	; (5004 <hci_data_buf_overflow+0x20>)
    4ff4:	f042 0202 	orr.w	r2, r2, #2
    4ff8:	f012 bf75 	b.w	17ee6 <log_1>
    4ffc:	000232ec 	.word	0x000232ec
    5000:	00023314 	.word	0x00023314
    5004:	00025438 	.word	0x00025438

00005008 <le_pkey_complete>:
{
    5008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    500a:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    500c:	f06f 0110 	mvn.w	r1, #16
    5010:	480e      	ldr	r0, [pc, #56]	; (504c <le_pkey_complete+0x44>)
    5012:	f014 fb6a 	bl	196ea <atomic_and>
	if (!evt->status) {
    5016:	7833      	ldrb	r3, [r6, #0]
    5018:	b943      	cbnz	r3, 502c <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    501a:	1c71      	adds	r1, r6, #1
    501c:	2240      	movs	r2, #64	; 0x40
    501e:	480c      	ldr	r0, [pc, #48]	; (5050 <le_pkey_complete+0x48>)
    5020:	f014 f8f2 	bl	19208 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5024:	2108      	movs	r1, #8
    5026:	4809      	ldr	r0, [pc, #36]	; (504c <le_pkey_complete+0x44>)
    5028:	f014 fb6a 	bl	19700 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    502c:	4d09      	ldr	r5, [pc, #36]	; (5054 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    502e:	4f08      	ldr	r7, [pc, #32]	; (5050 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5030:	682c      	ldr	r4, [r5, #0]
    5032:	b90c      	cbnz	r4, 5038 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    5034:	602c      	str	r4, [r5, #0]
}
    5036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    5038:	7832      	ldrb	r2, [r6, #0]
    503a:	6823      	ldr	r3, [r4, #0]
    503c:	2a00      	cmp	r2, #0
    503e:	bf0c      	ite	eq
    5040:	4638      	moveq	r0, r7
    5042:	2000      	movne	r0, #0
    5044:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5046:	6864      	ldr	r4, [r4, #4]
    5048:	e7f3      	b.n	5032 <le_pkey_complete+0x2a>
    504a:	bf00      	nop
    504c:	20000094 	.word	0x20000094
    5050:	2002a008 	.word	0x2002a008
    5054:	200259fc 	.word	0x200259fc

00005058 <hci_disconn_complete_prio>:
{
    5058:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    505a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    505c:	781a      	ldrb	r2, [r3, #0]
    505e:	b9da      	cbnz	r2, 5098 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5060:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5064:	4628      	mov	r0, r5
    5066:	f002 fcdb 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    506a:	4604      	mov	r4, r0
    506c:	b960      	cbnz	r0, 5088 <hci_disconn_complete_prio+0x30>
    506e:	4b0b      	ldr	r3, [pc, #44]	; (509c <hci_disconn_complete_prio+0x44>)
    5070:	4a0b      	ldr	r2, [pc, #44]	; (50a0 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5072:	4629      	mov	r1, r5
    5074:	1ad2      	subs	r2, r2, r3
    5076:	08d2      	lsrs	r2, r2, #3
    5078:	0192      	lsls	r2, r2, #6
    507a:	480a      	ldr	r0, [pc, #40]	; (50a4 <hci_disconn_complete_prio+0x4c>)
    507c:	f042 0201 	orr.w	r2, r2, #1
}
    5080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5084:	f012 bf2f 	b.w	17ee6 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5088:	2101      	movs	r1, #1
    508a:	f002 fcd5 	bl	7a38 <bt_conn_set_state>
	bt_conn_unref(conn);
    508e:	4620      	mov	r0, r4
}
    5090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5094:	f014 be1f 	b.w	19cd6 <bt_conn_unref>
}
    5098:	bd38      	pop	{r3, r4, r5, pc}
    509a:	bf00      	nop
    509c:	000232ec 	.word	0x000232ec
    50a0:	00023314 	.word	0x00023314
    50a4:	00025460 	.word	0x00025460

000050a8 <hci_hardware_error>:
{
    50a8:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    50aa:	2101      	movs	r1, #1
    50ac:	3008      	adds	r0, #8
    50ae:	f016 fba8 	bl	1b802 <net_buf_simple_pull_mem>
    50b2:	4b06      	ldr	r3, [pc, #24]	; (50cc <hci_hardware_error+0x24>)
    50b4:	4a06      	ldr	r2, [pc, #24]	; (50d0 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    50b6:	7801      	ldrb	r1, [r0, #0]
    50b8:	1ad2      	subs	r2, r2, r3
    50ba:	08d2      	lsrs	r2, r2, #3
    50bc:	0192      	lsls	r2, r2, #6
    50be:	4805      	ldr	r0, [pc, #20]	; (50d4 <hci_hardware_error+0x2c>)
    50c0:	f042 0201 	orr.w	r2, r2, #1
}
    50c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    50c8:	f012 bf0d 	b.w	17ee6 <log_1>
    50cc:	000232ec 	.word	0x000232ec
    50d0:	00023314 	.word	0x00023314
    50d4:	00025486 	.word	0x00025486

000050d8 <hci_vendor_event>:
{
    50d8:	b510      	push	{r4, lr}
    50da:	4a0a      	ldr	r2, [pc, #40]	; (5104 <hci_vendor_event+0x2c>)
    50dc:	4c0a      	ldr	r4, [pc, #40]	; (5108 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    50de:	8981      	ldrh	r1, [r0, #12]
    50e0:	6880      	ldr	r0, [r0, #8]
    50e2:	1aa4      	subs	r4, r4, r2
    50e4:	f7ff fe50 	bl	4d88 <bt_hex_real>
    50e8:	f7fd f862 	bl	21b0 <log_strdup>
    50ec:	08e4      	lsrs	r4, r4, #3
    50ee:	01a4      	lsls	r4, r4, #6
    50f0:	f044 0402 	orr.w	r4, r4, #2
    50f4:	4601      	mov	r1, r0
    50f6:	4622      	mov	r2, r4
}
    50f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    50fc:	4803      	ldr	r0, [pc, #12]	; (510c <hci_vendor_event+0x34>)
    50fe:	f012 bef2 	b.w	17ee6 <log_1>
    5102:	bf00      	nop
    5104:	000232ec 	.word	0x000232ec
    5108:	00023314 	.word	0x00023314
    510c:	000254a8 	.word	0x000254a8

00005110 <le_data_len_change>:
{
    5110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    5114:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5116:	881d      	ldrh	r5, [r3, #0]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    5118:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	conn = bt_conn_lookup_handle(handle);
    511c:	4628      	mov	r0, r5
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    511e:	88df      	ldrh	r7, [r3, #6]
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    5120:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    5124:	891e      	ldrh	r6, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    5126:	f002 fc7b 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    512a:	4604      	mov	r4, r0
    512c:	b960      	cbnz	r0, 5148 <le_data_len_change+0x38>
    512e:	4b0e      	ldr	r3, [pc, #56]	; (5168 <le_data_len_change+0x58>)
    5130:	4a0e      	ldr	r2, [pc, #56]	; (516c <le_data_len_change+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5132:	4629      	mov	r1, r5
    5134:	1ad2      	subs	r2, r2, r3
    5136:	08d2      	lsrs	r2, r2, #3
    5138:	0192      	lsls	r2, r2, #6
    513a:	480d      	ldr	r0, [pc, #52]	; (5170 <le_data_len_change+0x60>)
    513c:	f042 0201 	orr.w	r2, r2, #1
}
    5140:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5144:	f012 becf 	b.w	17ee6 <log_1>
	conn->le.data_len.tx_max_len = max_tx_octets;
    5148:	f8a0 90b8 	strh.w	r9, [r0, #184]	; 0xb8
	conn->le.data_len.tx_max_time = max_tx_time;
    514c:	f8a0 80ba 	strh.w	r8, [r0, #186]	; 0xba
	conn->le.data_len.rx_max_len = max_rx_octets;
    5150:	f8a0 70bc 	strh.w	r7, [r0, #188]	; 0xbc
	conn->le.data_len.rx_max_time = max_rx_time;
    5154:	f8a0 60be 	strh.w	r6, [r0, #190]	; 0xbe
	notify_le_data_len_updated(conn);
    5158:	f002 fa78 	bl	764c <notify_le_data_len_updated>
	bt_conn_unref(conn);
    515c:	4620      	mov	r0, r4
}
    515e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_conn_unref(conn);
    5162:	f014 bdb8 	b.w	19cd6 <bt_conn_unref>
    5166:	bf00      	nop
    5168:	000232ec 	.word	0x000232ec
    516c:	00023314 	.word	0x00023314
    5170:	000254cc 	.word	0x000254cc

00005174 <le_conn_update_complete>:
{
    5174:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    5176:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5178:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    517c:	4630      	mov	r0, r6
    517e:	f002 fc4f 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    5182:	4604      	mov	r4, r0
    5184:	b960      	cbnz	r0, 51a0 <le_conn_update_complete+0x2c>
    5186:	4a1e      	ldr	r2, [pc, #120]	; (5200 <le_conn_update_complete+0x8c>)
    5188:	4b1e      	ldr	r3, [pc, #120]	; (5204 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    518a:	4631      	mov	r1, r6
    518c:	1ad2      	subs	r2, r2, r3
    518e:	08d2      	lsrs	r2, r2, #3
    5190:	0192      	lsls	r2, r2, #6
    5192:	481d      	ldr	r0, [pc, #116]	; (5208 <le_conn_update_complete+0x94>)
    5194:	f042 0201 	orr.w	r2, r2, #1
    5198:	f012 fea5 	bl	17ee6 <log_1>
}
    519c:	b002      	add	sp, #8
    519e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    51a0:	782b      	ldrb	r3, [r5, #0]
    51a2:	b9bb      	cbnz	r3, 51d4 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    51a4:	792a      	ldrb	r2, [r5, #4]
    51a6:	78eb      	ldrb	r3, [r5, #3]
    51a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    51ac:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    51b0:	79aa      	ldrb	r2, [r5, #6]
    51b2:	796b      	ldrb	r3, [r5, #5]
    51b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    51b8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    51bc:	79eb      	ldrb	r3, [r5, #7]
    51be:	7a2a      	ldrb	r2, [r5, #8]
    51c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    51c4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    51c8:	f002 fa10 	bl	75ec <notify_le_param_updated>
	bt_conn_unref(conn);
    51cc:	4620      	mov	r0, r4
    51ce:	f014 fd82 	bl	19cd6 <bt_conn_unref>
    51d2:	e7e3      	b.n	519c <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    51d4:	2b1a      	cmp	r3, #26
    51d6:	d1f9      	bne.n	51cc <le_conn_update_complete+0x58>
    51d8:	78c3      	ldrb	r3, [r0, #3]
    51da:	2b01      	cmp	r3, #1
    51dc:	d1f6      	bne.n	51cc <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    51de:	210a      	movs	r1, #10
    51e0:	3004      	adds	r0, #4
    51e2:	f014 faa9 	bl	19738 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    51e6:	2800      	cmp	r0, #0
    51e8:	d1f0      	bne.n	51cc <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    51ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    51ee:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    51f0:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    51f2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    51f6:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    51f8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    51fa:	f003 fa29 	bl	8650 <bt_l2cap_update_conn_param>
    51fe:	e7e5      	b.n	51cc <le_conn_update_complete+0x58>
    5200:	00023314 	.word	0x00023314
    5204:	000232ec 	.word	0x000232ec
    5208:	000254cc 	.word	0x000254cc

0000520c <update_sec_level>:
{
    520c:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    520e:	7ac3      	ldrb	r3, [r0, #11]
{
    5210:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    5212:	b913      	cbnz	r3, 521a <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    5214:	2301      	movs	r3, #1
    5216:	7243      	strb	r3, [r0, #9]
}
    5218:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    521a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    521e:	b1fb      	cbz	r3, 5260 <update_sec_level+0x54>
    5220:	7b5a      	ldrb	r2, [r3, #13]
    5222:	07d1      	lsls	r1, r2, #31
    5224:	d51c      	bpl.n	5260 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    5226:	06d2      	lsls	r2, r2, #27
    5228:	d518      	bpl.n	525c <update_sec_level+0x50>
    522a:	7b1b      	ldrb	r3, [r3, #12]
    522c:	2b10      	cmp	r3, #16
    522e:	d115      	bne.n	525c <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    5230:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    5232:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    5234:	7aa2      	ldrb	r2, [r4, #10]
    5236:	7a63      	ldrb	r3, [r4, #9]
    5238:	429a      	cmp	r2, r3
    523a:	d9ed      	bls.n	5218 <update_sec_level+0xc>
    523c:	4b09      	ldr	r3, [pc, #36]	; (5264 <update_sec_level+0x58>)
    523e:	490a      	ldr	r1, [pc, #40]	; (5268 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    5240:	480a      	ldr	r0, [pc, #40]	; (526c <update_sec_level+0x60>)
    5242:	1ac9      	subs	r1, r1, r3
    5244:	08c9      	lsrs	r1, r1, #3
    5246:	0189      	lsls	r1, r1, #6
    5248:	f041 0101 	orr.w	r1, r1, #1
    524c:	f012 fe3e 	bl	17ecc <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    5250:	4620      	mov	r0, r4
}
    5252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    5256:	2105      	movs	r1, #5
    5258:	f002 be88 	b.w	7f6c <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    525c:	2303      	movs	r3, #3
    525e:	e7e8      	b.n	5232 <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    5260:	2302      	movs	r3, #2
    5262:	e7e6      	b.n	5232 <update_sec_level+0x26>
    5264:	000232ec 	.word	0x000232ec
    5268:	00023314 	.word	0x00023314
    526c:	000254f0 	.word	0x000254f0

00005270 <hci_encrypt_key_refresh_complete>:
{
    5270:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    5272:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5274:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5278:	4630      	mov	r0, r6
    527a:	f002 fbd1 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    527e:	4604      	mov	r4, r0
    5280:	b960      	cbnz	r0, 529c <hci_encrypt_key_refresh_complete+0x2c>
    5282:	4a13      	ldr	r2, [pc, #76]	; (52d0 <hci_encrypt_key_refresh_complete+0x60>)
    5284:	4b13      	ldr	r3, [pc, #76]	; (52d4 <hci_encrypt_key_refresh_complete+0x64>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5286:	4631      	mov	r1, r6
}
    5288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    528c:	1ad2      	subs	r2, r2, r3
    528e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    5290:	0192      	lsls	r2, r2, #6
    5292:	4811      	ldr	r0, [pc, #68]	; (52d8 <hci_encrypt_key_refresh_complete+0x68>)
    5294:	f042 0201 	orr.w	r2, r2, #1
    5298:	f012 be25 	b.w	17ee6 <log_1>
	if (evt->status) {
    529c:	7829      	ldrb	r1, [r5, #0]
    529e:	b161      	cbz	r1, 52ba <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    52a0:	2929      	cmp	r1, #41	; 0x29
	if (evt->status) {
    52a2:	bf8e      	itee	hi
    52a4:	2208      	movhi	r2, #8
    52a6:	4b0d      	ldrls	r3, [pc, #52]	; (52dc <hci_encrypt_key_refresh_complete+0x6c>)
    52a8:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    52aa:	4620      	mov	r0, r4
    52ac:	f002 fa1a 	bl	76e4 <bt_conn_security_changed>
	bt_conn_unref(conn);
    52b0:	4620      	mov	r0, r4
}
    52b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    52b6:	f014 bd0e 	b.w	19cd6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    52ba:	7883      	ldrb	r3, [r0, #2]
    52bc:	2b01      	cmp	r3, #1
    52be:	d104      	bne.n	52ca <hci_encrypt_key_refresh_complete+0x5a>
		bt_smp_update_keys(conn);
    52c0:	f007 f920 	bl	c504 <bt_smp_update_keys>
		update_sec_level(conn);
    52c4:	4620      	mov	r0, r4
    52c6:	f7ff ffa1 	bl	520c <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    52ca:	2200      	movs	r2, #0
    52cc:	7829      	ldrb	r1, [r5, #0]
    52ce:	e7ec      	b.n	52aa <hci_encrypt_key_refresh_complete+0x3a>
    52d0:	00023314 	.word	0x00023314
    52d4:	000232ec 	.word	0x000232ec
    52d8:	00025460 	.word	0x00025460
    52dc:	00025d95 	.word	0x00025d95

000052e0 <hci_encrypt_change>:
{
    52e0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    52e2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    52e4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    52e8:	4630      	mov	r0, r6
    52ea:	f002 fb99 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    52ee:	4604      	mov	r4, r0
    52f0:	b960      	cbnz	r0, 530c <hci_encrypt_change+0x2c>
    52f2:	4a15      	ldr	r2, [pc, #84]	; (5348 <hci_encrypt_change+0x68>)
    52f4:	4b15      	ldr	r3, [pc, #84]	; (534c <hci_encrypt_change+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    52f6:	4631      	mov	r1, r6
}
    52f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52fc:	1ad2      	subs	r2, r2, r3
    52fe:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    5300:	0192      	lsls	r2, r2, #6
    5302:	4813      	ldr	r0, [pc, #76]	; (5350 <hci_encrypt_change+0x70>)
    5304:	f042 0201 	orr.w	r2, r2, #1
    5308:	f012 bded 	b.w	17ee6 <log_1>
	if (evt->status) {
    530c:	7829      	ldrb	r1, [r5, #0]
    530e:	b161      	cbz	r1, 532a <hci_encrypt_change+0x4a>
	switch (hci_err) {
    5310:	2929      	cmp	r1, #41	; 0x29
	if (evt->status) {
    5312:	bf8e      	itee	hi
    5314:	2208      	movhi	r2, #8
    5316:	4b0f      	ldrls	r3, [pc, #60]	; (5354 <hci_encrypt_change+0x74>)
    5318:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    531a:	4620      	mov	r0, r4
    531c:	f002 f9e2 	bl	76e4 <bt_conn_security_changed>
	bt_conn_unref(conn);
    5320:	4620      	mov	r0, r4
}
    5322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5326:	f014 bcd6 	b.w	19cd6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    532a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    532c:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    532e:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    5330:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    5332:	d105      	bne.n	5340 <hci_encrypt_change+0x60>
		if (conn->encrypt) {
    5334:	b10b      	cbz	r3, 533a <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    5336:	f007 f8e5 	bl	c504 <bt_smp_update_keys>
		update_sec_level(conn);
    533a:	4620      	mov	r0, r4
    533c:	f7ff ff66 	bl	520c <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    5340:	2200      	movs	r2, #0
    5342:	7829      	ldrb	r1, [r5, #0]
    5344:	e7e9      	b.n	531a <hci_encrypt_change+0x3a>
    5346:	bf00      	nop
    5348:	00023314 	.word	0x00023314
    534c:	000232ec 	.word	0x000232ec
    5350:	00025460 	.word	0x00025460
    5354:	00025d95 	.word	0x00025d95

00005358 <hci_cmd_done>:
{
    5358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    535c:	4607      	mov	r7, r0
    535e:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5360:	7990      	ldrb	r0, [r2, #6]
{
    5362:	4688      	mov	r8, r1
    5364:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5366:	f007 fa09 	bl	c77c <net_buf_pool_get>
    536a:	4e32      	ldr	r6, [pc, #200]	; (5434 <hci_cmd_done+0xdc>)
    536c:	4286      	cmp	r6, r0
    536e:	d016      	beq.n	539e <hci_cmd_done+0x46>
    5370:	4b31      	ldr	r3, [pc, #196]	; (5438 <hci_cmd_done+0xe0>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    5372:	79a0      	ldrb	r0, [r4, #6]
    5374:	4d31      	ldr	r5, [pc, #196]	; (543c <hci_cmd_done+0xe4>)
    5376:	9700      	str	r7, [sp, #0]
    5378:	1aed      	subs	r5, r5, r3
    537a:	9001      	str	r0, [sp, #4]
    537c:	f007 f9fe 	bl	c77c <net_buf_pool_get>
    5380:	08ed      	lsrs	r5, r5, #3
    5382:	01ad      	lsls	r5, r5, #6
    5384:	f045 0502 	orr.w	r5, r5, #2
    5388:	e9cd 0602 	strd	r0, r6, [sp, #8]
    538c:	462b      	mov	r3, r5
    538e:	2204      	movs	r2, #4
    5390:	4669      	mov	r1, sp
    5392:	482b      	ldr	r0, [pc, #172]	; (5440 <hci_cmd_done+0xe8>)
    5394:	f012 fdf0 	bl	17f78 <log_n>
}
    5398:	b005      	add	sp, #20
    539a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    539e:	4620      	mov	r0, r4
    53a0:	f007 f9f4 	bl	c78c <net_buf_id>
    53a4:	f04f 090c 	mov.w	r9, #12
    53a8:	4d26      	ldr	r5, [pc, #152]	; (5444 <hci_cmd_done+0xec>)
    53aa:	fb09 5300 	mla	r3, r9, r0, r5
    53ae:	885b      	ldrh	r3, [r3, #2]
    53b0:	42bb      	cmp	r3, r7
    53b2:	d011      	beq.n	53d8 <hci_cmd_done+0x80>
    53b4:	4b20      	ldr	r3, [pc, #128]	; (5438 <hci_cmd_done+0xe0>)
    53b6:	4e21      	ldr	r6, [pc, #132]	; (543c <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    53b8:	4620      	mov	r0, r4
    53ba:	1af6      	subs	r6, r6, r3
    53bc:	f007 f9e6 	bl	c78c <net_buf_id>
    53c0:	fb09 5000 	mla	r0, r9, r0, r5
    53c4:	08f6      	lsrs	r6, r6, #3
    53c6:	01b6      	lsls	r6, r6, #6
    53c8:	f046 0602 	orr.w	r6, r6, #2
    53cc:	8842      	ldrh	r2, [r0, #2]
    53ce:	4633      	mov	r3, r6
    53d0:	4639      	mov	r1, r7
    53d2:	481d      	ldr	r0, [pc, #116]	; (5448 <hci_cmd_done+0xf0>)
    53d4:	f012 fd9b 	bl	17f0e <log_2>
	if (cmd(buf)->state && !status) {
    53d8:	4620      	mov	r0, r4
    53da:	f007 f9d7 	bl	c78c <net_buf_id>
    53de:	260c      	movs	r6, #12
    53e0:	fb06 5000 	mla	r0, r6, r0, r5
    53e4:	6843      	ldr	r3, [r0, #4]
    53e6:	b16b      	cbz	r3, 5404 <hci_cmd_done+0xac>
    53e8:	f1b8 0f00 	cmp.w	r8, #0
    53ec:	d10a      	bne.n	5404 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    53ee:	4620      	mov	r0, r4
    53f0:	f007 f9cc 	bl	c78c <net_buf_id>
    53f4:	fb06 5000 	mla	r0, r6, r0, r5
    53f8:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    53fa:	7a1a      	ldrb	r2, [r3, #8]
    53fc:	e9d3 0100 	ldrd	r0, r1, [r3]
    5400:	f014 f989 	bl	19716 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    5404:	4620      	mov	r0, r4
    5406:	f007 f9c1 	bl	c78c <net_buf_id>
    540a:	260c      	movs	r6, #12
    540c:	fb06 5000 	mla	r0, r6, r0, r5
    5410:	6883      	ldr	r3, [r0, #8]
    5412:	2b00      	cmp	r3, #0
    5414:	d0c0      	beq.n	5398 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    5416:	4620      	mov	r0, r4
    5418:	f007 f9b8 	bl	c78c <net_buf_id>
    541c:	4370      	muls	r0, r6
    541e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    5422:	4620      	mov	r0, r4
    5424:	f007 f9b2 	bl	c78c <net_buf_id>
    5428:	fb06 5500 	mla	r5, r6, r0, r5
    542c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    542e:	f011 faf9 	bl	16a24 <z_impl_k_sem_give>
}
    5432:	e7b1      	b.n	5398 <hci_cmd_done+0x40>
    5434:	20000768 	.word	0x20000768
    5438:	000232ec 	.word	0x000232ec
    543c:	00023314 	.word	0x00023314
    5440:	00025516 	.word	0x00025516
    5444:	200259e0 	.word	0x200259e0
    5448:	0002554b 	.word	0x0002554b

0000544c <handle_event>:
{
    544c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    544e:	4605      	mov	r5, r0
    5450:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    5452:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    5456:	7811      	ldrb	r1, [r2, #0]
    5458:	42a9      	cmp	r1, r5
    545a:	d01a      	beq.n	5492 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    545c:	3208      	adds	r2, #8
    545e:	429a      	cmp	r2, r3
    5460:	d1f9      	bne.n	5456 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    5462:	8986      	ldrh	r6, [r0, #12]
    5464:	4b16      	ldr	r3, [pc, #88]	; (54c0 <handle_event+0x74>)
    5466:	4c17      	ldr	r4, [pc, #92]	; (54c4 <handle_event+0x78>)
    5468:	4631      	mov	r1, r6
    546a:	6880      	ldr	r0, [r0, #8]
    546c:	1ae4      	subs	r4, r4, r3
    546e:	f7ff fc8b 	bl	4d88 <bt_hex_real>
    5472:	f7fc fe9d 	bl	21b0 <log_strdup>
    5476:	08e4      	lsrs	r4, r4, #3
    5478:	01a4      	lsls	r4, r4, #6
    547a:	f044 0402 	orr.w	r4, r4, #2
    547e:	4603      	mov	r3, r0
    5480:	4632      	mov	r2, r6
    5482:	4629      	mov	r1, r5
    5484:	4810      	ldr	r0, [pc, #64]	; (54c8 <handle_event+0x7c>)
    5486:	f8ad 4000 	strh.w	r4, [sp]
    548a:	f012 fd59 	bl	17f40 <log_3>
}
    548e:	b002      	add	sp, #8
    5490:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    5492:	8981      	ldrh	r1, [r0, #12]
    5494:	7853      	ldrb	r3, [r2, #1]
    5496:	428b      	cmp	r3, r1
    5498:	d90d      	bls.n	54b6 <handle_event+0x6a>
    549a:	4a09      	ldr	r2, [pc, #36]	; (54c0 <handle_event+0x74>)
    549c:	4b09      	ldr	r3, [pc, #36]	; (54c4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    549e:	480b      	ldr	r0, [pc, #44]	; (54cc <handle_event+0x80>)
    54a0:	1a9b      	subs	r3, r3, r2
    54a2:	462a      	mov	r2, r5
    54a4:	08db      	lsrs	r3, r3, #3
    54a6:	019b      	lsls	r3, r3, #6
    54a8:	f043 0301 	orr.w	r3, r3, #1
}
    54ac:	b002      	add	sp, #8
    54ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    54b2:	f012 bd2c 	b.w	17f0e <log_2>
		handler->handler(buf);
    54b6:	6853      	ldr	r3, [r2, #4]
}
    54b8:	b002      	add	sp, #8
    54ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    54be:	4718      	bx	r3
    54c0:	000232ec 	.word	0x000232ec
    54c4:	00023314 	.word	0x00023314
    54c8:	000255a0 	.word	0x000255a0
    54cc:	0002557e 	.word	0x0002557e

000054d0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
    54d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54d4:	4b47      	ldr	r3, [pc, #284]	; (55f4 <hci_rx_thread+0x124>)
    54d6:	4d48      	ldr	r5, [pc, #288]	; (55f8 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    54d8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 5618 <hci_rx_thread+0x148>
    54dc:	1aed      	subs	r5, r5, r3
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    54de:	f8df 913c 	ldr.w	r9, [pc, #316]	; 561c <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    54e2:	4f46      	ldr	r7, [pc, #280]	; (55fc <hci_rx_thread+0x12c>)
    54e4:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    54e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    54ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54ee:	4640      	mov	r0, r8
    54f0:	f016 f8f6 	bl	1b6e0 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    54f4:	7d01      	ldrb	r1, [r0, #20]
    54f6:	4604      	mov	r4, r0

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
    54f8:	2901      	cmp	r1, #1
    54fa:	d046      	beq.n	558a <hci_rx_thread+0xba>
    54fc:	2903      	cmp	r1, #3
    54fe:	d173      	bne.n	55e8 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5500:	8983      	ldrh	r3, [r0, #12]
    5502:	2b03      	cmp	r3, #3
    5504:	d80c      	bhi.n	5520 <hci_rx_thread+0x50>
    5506:	f240 43ac 	movw	r3, #1196	; 0x4ac
    550a:	463a      	mov	r2, r7
    550c:	493c      	ldr	r1, [pc, #240]	; (5600 <hci_rx_thread+0x130>)
    550e:	483d      	ldr	r0, [pc, #244]	; (5604 <hci_rx_thread+0x134>)
    5510:	f012 f8b5 	bl	1767e <printk>
    5514:	4040      	eors	r0, r0
    5516:	f380 8811 	msr	BASEPRI, r0
    551a:	f04f 0003 	mov.w	r0, #3
    551e:	df02      	svc	2
    5520:	2104      	movs	r1, #4
    5522:	f104 0008 	add.w	r0, r4, #8
    5526:	f016 f96c 	bl	1b802 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    552a:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    552c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    552e:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len != len) {
    5532:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    5534:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
    5538:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    553a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    553c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    553e:	d009      	beq.n	5554 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    5540:	01ab      	lsls	r3, r5, #6
    5542:	4831      	ldr	r0, [pc, #196]	; (5608 <hci_rx_thread+0x138>)
    5544:	f043 0301 	orr.w	r3, r3, #1
    5548:	f012 fce1 	bl	17f0e <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
    554c:	4620      	mov	r0, r4
    554e:	f007 f9d1 	bl	c8f4 <net_buf_unref>
			break;
    5552:	e017      	b.n	5584 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5554:	f002 fa64 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    5558:	4606      	mov	r6, r0
    555a:	b938      	cbnz	r0, 556c <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    555c:	01aa      	lsls	r2, r5, #6
    555e:	8ae1      	ldrh	r1, [r4, #22]
    5560:	482a      	ldr	r0, [pc, #168]	; (560c <hci_rx_thread+0x13c>)
    5562:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    5566:	f012 fcbe 	bl	17ee6 <log_1>
    556a:	e7ef      	b.n	554c <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
    556c:	f002 fe80 	bl	8270 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    5570:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    5572:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    5574:	ea4f 321a 	mov.w	r2, sl, lsr #12
    5578:	4630      	mov	r0, r6
    557a:	f002 f8f3 	bl	7764 <bt_conn_recv>
	bt_conn_unref(conn);
    557e:	4630      	mov	r0, r6
    5580:	f014 fba9 	bl	19cd6 <bt_conn_unref>
	z_impl_k_yield();
    5584:	f011 f9d8 	bl	16938 <z_impl_k_yield>
	while (1) {
    5588:	e7ad      	b.n	54e6 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    558a:	8983      	ldrh	r3, [r0, #12]
    558c:	2b01      	cmp	r3, #1
    558e:	d80c      	bhi.n	55aa <hci_rx_thread+0xda>
    5590:	f241 33fb 	movw	r3, #5115	; 0x13fb
    5594:	463a      	mov	r2, r7
    5596:	491a      	ldr	r1, [pc, #104]	; (5600 <hci_rx_thread+0x130>)
    5598:	481a      	ldr	r0, [pc, #104]	; (5604 <hci_rx_thread+0x134>)
    559a:	f012 f870 	bl	1767e <printk>
    559e:	4040      	eors	r0, r0
    55a0:	f380 8811 	msr	BASEPRI, r0
    55a4:	f04f 0003 	mov.w	r0, #3
    55a8:	df02      	svc	2
    55aa:	2102      	movs	r1, #2
    55ac:	f104 0008 	add.w	r0, r4, #8
    55b0:	f016 f927 	bl	1b802 <net_buf_simple_pull_mem>
    55b4:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    55b6:	7800      	ldrb	r0, [r0, #0]
    55b8:	f014 f87c 	bl	196b4 <bt_hci_evt_get_flags>
    55bc:	0783      	lsls	r3, r0, #30
    55be:	d40c      	bmi.n	55da <hci_rx_thread+0x10a>
    55c0:	f241 33ff 	movw	r3, #5119	; 0x13ff
    55c4:	463a      	mov	r2, r7
    55c6:	4912      	ldr	r1, [pc, #72]	; (5610 <hci_rx_thread+0x140>)
    55c8:	480e      	ldr	r0, [pc, #56]	; (5604 <hci_rx_thread+0x134>)
    55ca:	f012 f858 	bl	1767e <printk>
    55ce:	4040      	eors	r0, r0
    55d0:	f380 8811 	msr	BASEPRI, r0
    55d4:	f04f 0003 	mov.w	r0, #3
    55d8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    55da:	2306      	movs	r3, #6
    55dc:	464a      	mov	r2, r9
    55de:	4621      	mov	r1, r4
    55e0:	7830      	ldrb	r0, [r6, #0]
    55e2:	f7ff ff33 	bl	544c <handle_event>
	net_buf_unref(buf);
    55e6:	e7b1      	b.n	554c <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    55e8:	01aa      	lsls	r2, r5, #6
    55ea:	480a      	ldr	r0, [pc, #40]	; (5614 <hci_rx_thread+0x144>)
    55ec:	f042 0201 	orr.w	r2, r2, #1
    55f0:	e7b9      	b.n	5566 <hci_rx_thread+0x96>
    55f2:	bf00      	nop
    55f4:	000232ec 	.word	0x000232ec
    55f8:	00023314 	.word	0x00023314
    55fc:	000255c2 	.word	0x000255c2
    5600:	000255f6 	.word	0x000255f6
    5604:	0002560f 	.word	0x0002560f
    5608:	0002562c 	.word	0x0002562c
    560c:	00025650 	.word	0x00025650
    5610:	00025672 	.word	0x00025672
    5614:	000256a0 	.word	0x000256a0
    5618:	20000104 	.word	0x20000104
    561c:	00023844 	.word	0x00023844

00005620 <hci_le_meta_event>:
{
    5620:	b510      	push	{r4, lr}
    5622:	2101      	movs	r1, #1
    5624:	4604      	mov	r4, r0
    5626:	3008      	adds	r0, #8
    5628:	f016 f8eb 	bl	1b802 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    562c:	4621      	mov	r1, r4
}
    562e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5632:	230b      	movs	r3, #11
    5634:	4a01      	ldr	r2, [pc, #4]	; (563c <hci_le_meta_event+0x1c>)
    5636:	7800      	ldrb	r0, [r0, #0]
    5638:	f7ff bf08 	b.w	544c <handle_event>
    563c:	000237cc 	.word	0x000237cc

00005640 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5642:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5644:	2500      	movs	r5, #0
    5646:	4f0a      	ldr	r7, [pc, #40]	; (5670 <id_find+0x30>)
    5648:	79fb      	ldrb	r3, [r7, #7]
    564a:	b2ec      	uxtb	r4, r5
    564c:	42a3      	cmp	r3, r4
    564e:	d802      	bhi.n	5656 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5650:	f06f 0401 	mvn.w	r4, #1
    5654:	e009      	b.n	566a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5656:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    565a:	2207      	movs	r2, #7
    565c:	4630      	mov	r0, r6
    565e:	4439      	add	r1, r7
    5660:	f013 fdc2 	bl	191e8 <memcmp>
    5664:	3501      	adds	r5, #1
    5666:	2800      	cmp	r0, #0
    5668:	d1ee      	bne.n	5648 <id_find+0x8>
}
    566a:	4620      	mov	r0, r4
    566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    566e:	bf00      	nop
    5670:	20000000 	.word	0x20000000

00005674 <hci_num_completed_packets>:
{
    5674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    5678:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
    567a:	46b1      	mov	r9, r6
    567c:	4d3c      	ldr	r5, [pc, #240]	; (5770 <hci_num_completed_packets+0xfc>)
    567e:	4b3d      	ldr	r3, [pc, #244]	; (5774 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5680:	f8d0 8008 	ldr.w	r8, [r0, #8]
    5684:	1aed      	subs	r5, r5, r3
		k_queue_append(&work_q->queue, work);
    5686:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 5780 <hci_num_completed_packets+0x10c>
    568a:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
    568c:	f898 3000 	ldrb.w	r3, [r8]
    5690:	429e      	cmp	r6, r3
    5692:	db01      	blt.n	5698 <hci_num_completed_packets+0x24>
}
    5694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5698:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    569c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    56a0:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    56a4:	4658      	mov	r0, fp
    56a6:	f002 f9bb 	bl	7a20 <bt_conn_lookup_handle>
		if (!conn) {
    56aa:	4604      	mov	r4, r0
    56ac:	b1d8      	cbz	r0, 56e6 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    56ae:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    56b2:	2f00      	cmp	r7, #0
    56b4:	d033      	beq.n	571e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    56b6:	f04f 0320 	mov.w	r3, #32
    56ba:	f3ef 8211 	mrs	r2, BASEPRI
    56be:	f383 8811 	msr	BASEPRI, r3
    56c2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    56c6:	69e3      	ldr	r3, [r4, #28]
    56c8:	b1b3      	cbz	r3, 56f8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    56ca:	3b01      	subs	r3, #1
    56cc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    56ce:	f382 8811 	msr	BASEPRI, r2
    56d2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    56d6:	4620      	mov	r0, r4
    56d8:	f001 ff84 	bl	75e4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    56dc:	3f01      	subs	r7, #1
    56de:	f011 f9a1 	bl	16a24 <z_impl_k_sem_give>
    56e2:	b2bf      	uxth	r7, r7
    56e4:	e7e5      	b.n	56b2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    56e6:	01aa      	lsls	r2, r5, #6
    56e8:	4659      	mov	r1, fp
    56ea:	4823      	ldr	r0, [pc, #140]	; (5778 <hci_num_completed_packets+0x104>)
    56ec:	f042 0201 	orr.w	r2, r2, #1
    56f0:	f012 fbf9 	bl	17ee6 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    56f4:	3601      	adds	r6, #1
    56f6:	e7c9      	b.n	568c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    56f8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    56fa:	b12b      	cbz	r3, 5708 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    56fc:	69a1      	ldr	r1, [r4, #24]
    56fe:	6818      	ldr	r0, [r3, #0]
    5700:	428b      	cmp	r3, r1
	list->head = node;
    5702:	6160      	str	r0, [r4, #20]
	list->tail = node;
    5704:	bf08      	it	eq
    5706:	61a0      	streq	r0, [r4, #24]
    5708:	f382 8811 	msr	BASEPRI, r2
    570c:	f3bf 8f6f 	isb	sy
			if (!node) {
    5710:	b94b      	cbnz	r3, 5726 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    5712:	01a9      	lsls	r1, r5, #6
    5714:	4819      	ldr	r0, [pc, #100]	; (577c <hci_num_completed_packets+0x108>)
    5716:	f041 0101 	orr.w	r1, r1, #1
    571a:	f012 fbd7 	bl	17ecc <log_0>
		bt_conn_unref(conn);
    571e:	4620      	mov	r0, r4
    5720:	f014 fad9 	bl	19cd6 <bt_conn_unref>
    5724:	e7e6      	b.n	56f4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    5726:	f04f 0220 	mov.w	r2, #32
    572a:	f3ef 8111 	mrs	r1, BASEPRI
    572e:	f382 8811 	msr	BASEPRI, r2
    5732:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5736:	68da      	ldr	r2, [r3, #12]
    5738:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    573a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    573e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5740:	f8c3 900c 	str.w	r9, [r3, #12]
    5744:	b98a      	cbnz	r2, 576a <hci_num_completed_packets+0xf6>
	list->head = node;
    5746:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    574a:	f381 8811 	msr	BASEPRI, r1
    574e:	f3bf 8f6f 	isb	sy
    5752:	2100      	movs	r1, #0
    5754:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5758:	f013 ffee 	bl	19738 <atomic_test_and_set_bit>
    575c:	2800      	cmp	r0, #0
    575e:	d1ba      	bne.n	56d6 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    5760:	4659      	mov	r1, fp
    5762:	4650      	mov	r0, sl
    5764:	f01d f801 	bl	2276a <k_queue_append>
    5768:	e7b5      	b.n	56d6 <hci_num_completed_packets+0x62>
	parent->next = child;
    576a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    576c:	6263      	str	r3, [r4, #36]	; 0x24
}
    576e:	e7ec      	b.n	574a <hci_num_completed_packets+0xd6>
    5770:	00023314 	.word	0x00023314
    5774:	000232ec 	.word	0x000232ec
    5778:	000256b4 	.word	0x000256b4
    577c:	000256d0 	.word	0x000256d0
    5780:	200010f8 	.word	0x200010f8

00005784 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5784:	b530      	push	{r4, r5, lr}
    5786:	4d14      	ldr	r5, [pc, #80]	; (57d8 <id_create.isra.0+0x54>)
    5788:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    578c:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    578e:	b085      	sub	sp, #20
    5790:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5792:	b179      	cbz	r1, 57b4 <id_create.isra.0+0x30>
    5794:	2300      	movs	r3, #0
    5796:	2207      	movs	r2, #7
    5798:	4669      	mov	r1, sp
    579a:	4620      	mov	r0, r4
    579c:	9300      	str	r3, [sp, #0]
    579e:	f8cd 3003 	str.w	r3, [sp, #3]
    57a2:	f013 fd21 	bl	191e8 <memcmp>
    57a6:	b128      	cbz	r0, 57b4 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    57a8:	4621      	mov	r1, r4
    57aa:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    57ac:	f013 ff97 	bl	196de <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    57b0:	b005      	add	sp, #20
    57b2:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    57b4:	a802      	add	r0, sp, #8
    57b6:	f013 ff6f 	bl	19698 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    57ba:	a802      	add	r0, sp, #8
    57bc:	f7ff ff40 	bl	5640 <id_find>
    57c0:	2800      	cmp	r0, #0
    57c2:	daf7      	bge.n	57b4 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    57c4:	4628      	mov	r0, r5
    57c6:	a902      	add	r1, sp, #8
    57c8:	f013 ff89 	bl	196de <bt_addr_le_copy>
		if (addr) {
    57cc:	2c00      	cmp	r4, #0
    57ce:	d0ef      	beq.n	57b0 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    57d0:	4629      	mov	r1, r5
    57d2:	4620      	mov	r0, r4
    57d4:	e7ea      	b.n	57ac <id_create.isra.0+0x28>
    57d6:	bf00      	nop
    57d8:	20000000 	.word	0x20000000

000057dc <hci_cmd_status>:
{
    57dc:	b538      	push	{r3, r4, r5, lr}
    57de:	2104      	movs	r1, #4
    57e0:	4604      	mov	r4, r0
    57e2:	3008      	adds	r0, #8
    57e4:	f016 f80d 	bl	1b802 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    57e8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    57ea:	7801      	ldrb	r1, [r0, #0]
    57ec:	4622      	mov	r2, r4
    57ee:	8840      	ldrh	r0, [r0, #2]
    57f0:	f7ff fdb2 	bl	5358 <hci_cmd_done>
	if (ncmd) {
    57f4:	b125      	cbz	r5, 5800 <hci_cmd_status+0x24>
}
    57f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    57fa:	4802      	ldr	r0, [pc, #8]	; (5804 <hci_cmd_status+0x28>)
    57fc:	f011 b912 	b.w	16a24 <z_impl_k_sem_give>
    5800:	bd38      	pop	{r3, r4, r5, pc}
    5802:	bf00      	nop
    5804:	200000e8 	.word	0x200000e8

00005808 <hci_cmd_complete>:
{
    5808:	b538      	push	{r3, r4, r5, lr}
    580a:	2103      	movs	r1, #3
    580c:	4604      	mov	r4, r0
    580e:	3008      	adds	r0, #8
    5810:	f015 fff7 	bl	1b802 <net_buf_simple_pull_mem>
	status = buf->data[0];
    5814:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5816:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5818:	4622      	mov	r2, r4
    581a:	7819      	ldrb	r1, [r3, #0]
    581c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5820:	f7ff fd9a 	bl	5358 <hci_cmd_done>
	if (ncmd) {
    5824:	b125      	cbz	r5, 5830 <hci_cmd_complete+0x28>
}
    5826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    582a:	4802      	ldr	r0, [pc, #8]	; (5834 <hci_cmd_complete+0x2c>)
    582c:	f011 b8fa 	b.w	16a24 <z_impl_k_sem_give>
    5830:	bd38      	pop	{r3, r4, r5, pc}
    5832:	bf00      	nop
    5834:	200000e8 	.word	0x200000e8

00005838 <bt_hci_cmd_create>:
{
    5838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    583c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5844:	4605      	mov	r5, r0
    5846:	4816      	ldr	r0, [pc, #88]	; (58a0 <bt_hci_cmd_create+0x68>)
    5848:	460e      	mov	r6, r1
    584a:	f015 ff44 	bl	1b6d6 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    584e:	2700      	movs	r7, #0
    5850:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5852:	f100 0b08 	add.w	fp, r0, #8
    5856:	2101      	movs	r1, #1
    5858:	4658      	mov	r0, fp
    585a:	f015 ff61 	bl	1b720 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    585e:	4620      	mov	r0, r4
    5860:	7527      	strb	r7, [r4, #20]
    5862:	f006 ff93 	bl	c78c <net_buf_id>
    5866:	f04f 0a0c 	mov.w	sl, #12
    586a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 58a4 <bt_hci_cmd_create+0x6c>
    586e:	fb0a 8000 	mla	r0, sl, r0, r8
    5872:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5874:	4620      	mov	r0, r4
    5876:	f006 ff89 	bl	c78c <net_buf_id>
    587a:	fb0a 8000 	mla	r0, sl, r0, r8
    587e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    5880:	4620      	mov	r0, r4
    5882:	f006 ff83 	bl	c78c <net_buf_id>
    5886:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    588a:	2103      	movs	r1, #3
    588c:	6047      	str	r7, [r0, #4]
    588e:	4658      	mov	r0, fp
    5890:	f015 ff7d 	bl	1b78e <net_buf_simple_add>
	hdr->param_len = param_len;
    5894:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5896:	8005      	strh	r5, [r0, #0]
}
    5898:	4620      	mov	r0, r4
    589a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    589e:	bf00      	nop
    58a0:	20000768 	.word	0x20000768
    58a4:	200259e0 	.word	0x200259e0

000058a8 <bt_hci_cmd_send_sync>:
{
    58a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58ac:	4607      	mov	r7, r0
    58ae:	4615      	mov	r5, r2
	if (!buf) {
    58b0:	460c      	mov	r4, r1
{
    58b2:	b086      	sub	sp, #24
	if (!buf) {
    58b4:	b921      	cbnz	r1, 58c0 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    58b6:	f7ff ffbf 	bl	5838 <bt_hci_cmd_create>
		if (!buf) {
    58ba:	4604      	mov	r4, r0
    58bc:	2800      	cmp	r0, #0
    58be:	d055      	beq.n	596c <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    58c0:	2201      	movs	r2, #1
    58c2:	2100      	movs	r1, #0
    58c4:	4668      	mov	r0, sp
    58c6:	f01d f89e 	bl	22a06 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    58ca:	4620      	mov	r0, r4
    58cc:	f006 ff5e 	bl	c78c <net_buf_id>
    58d0:	230c      	movs	r3, #12
    58d2:	4e28      	ldr	r6, [pc, #160]	; (5974 <bt_hci_cmd_send_sync+0xcc>)
    58d4:	fb03 6000 	mla	r0, r3, r0, r6
    58d8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    58dc:	4620      	mov	r0, r4
    58de:	f015 ff30 	bl	1b742 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    58e2:	4621      	mov	r1, r4
    58e4:	4824      	ldr	r0, [pc, #144]	; (5978 <bt_hci_cmd_send_sync+0xd0>)
    58e6:	f015 ff1f 	bl	1b728 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    58ea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    58ee:	2300      	movs	r3, #0
    58f0:	4668      	mov	r0, sp
    58f2:	f011 f8bd 	bl	16a70 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    58f6:	4680      	mov	r8, r0
    58f8:	b180      	cbz	r0, 591c <bt_hci_cmd_send_sync+0x74>
    58fa:	f240 134d 	movw	r3, #333	; 0x14d
    58fe:	4a1f      	ldr	r2, [pc, #124]	; (597c <bt_hci_cmd_send_sync+0xd4>)
    5900:	491f      	ldr	r1, [pc, #124]	; (5980 <bt_hci_cmd_send_sync+0xd8>)
    5902:	4820      	ldr	r0, [pc, #128]	; (5984 <bt_hci_cmd_send_sync+0xdc>)
    5904:	f011 febb 	bl	1767e <printk>
    5908:	4641      	mov	r1, r8
    590a:	481f      	ldr	r0, [pc, #124]	; (5988 <bt_hci_cmd_send_sync+0xe0>)
    590c:	f011 feb7 	bl	1767e <printk>
    5910:	4040      	eors	r0, r0
    5912:	f380 8811 	msr	BASEPRI, r0
    5916:	f04f 0003 	mov.w	r0, #3
    591a:	df02      	svc	2
	status = cmd(buf)->status;
    591c:	4620      	mov	r0, r4
    591e:	f006 ff35 	bl	c78c <net_buf_id>
    5922:	230c      	movs	r3, #12
    5924:	4343      	muls	r3, r0
    5926:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5928:	b1be      	cbz	r6, 595a <bt_hci_cmd_send_sync+0xb2>
    592a:	4a18      	ldr	r2, [pc, #96]	; (598c <bt_hci_cmd_send_sync+0xe4>)
    592c:	4b18      	ldr	r3, [pc, #96]	; (5990 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    592e:	4639      	mov	r1, r7
    5930:	1a9b      	subs	r3, r3, r2
    5932:	08db      	lsrs	r3, r3, #3
    5934:	019b      	lsls	r3, r3, #6
    5936:	4632      	mov	r2, r6
    5938:	4816      	ldr	r0, [pc, #88]	; (5994 <bt_hci_cmd_send_sync+0xec>)
    593a:	f043 0302 	orr.w	r3, r3, #2
    593e:	f012 fae6 	bl	17f0e <log_2>
		net_buf_unref(buf);
    5942:	4620      	mov	r0, r4
    5944:	f006 ffd6 	bl	c8f4 <net_buf_unref>
			return -EIO;
    5948:	2e09      	cmp	r6, #9
    594a:	bf0c      	ite	eq
    594c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    5950:	f06f 0004 	mvnne.w	r0, #4
}
    5954:	b006      	add	sp, #24
    5956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    595a:	b115      	cbz	r5, 5962 <bt_hci_cmd_send_sync+0xba>
	return 0;
    595c:	4630      	mov	r0, r6
		*rsp = buf;
    595e:	602c      	str	r4, [r5, #0]
    5960:	e7f8      	b.n	5954 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    5962:	4620      	mov	r0, r4
    5964:	f006 ffc6 	bl	c8f4 <net_buf_unref>
	return 0;
    5968:	4628      	mov	r0, r5
    596a:	e7f3      	b.n	5954 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    596c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5970:	e7f0      	b.n	5954 <bt_hci_cmd_send_sync+0xac>
    5972:	bf00      	nop
    5974:	200259e0 	.word	0x200259e0
    5978:	2000011c 	.word	0x2000011c
    597c:	000255c2 	.word	0x000255c2
    5980:	000256e7 	.word	0x000256e7
    5984:	0002560f 	.word	0x0002560f
    5988:	000256f0 	.word	0x000256f0
    598c:	000232ec 	.word	0x000232ec
    5990:	00023314 	.word	0x00023314
    5994:	00025710 	.word	0x00025710

00005998 <set_random_address>:
{
    5998:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    599a:	4e15      	ldr	r6, [pc, #84]	; (59f0 <set_random_address+0x58>)
    599c:	2206      	movs	r2, #6
    599e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    59a2:	4605      	mov	r5, r0
    59a4:	f013 fc20 	bl	191e8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    59a8:	4604      	mov	r4, r0
    59aa:	b1e0      	cbz	r0, 59e6 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    59ac:	2106      	movs	r1, #6
    59ae:	f242 0005 	movw	r0, #8197	; 0x2005
    59b2:	f7ff ff41 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    59b6:	4604      	mov	r4, r0
    59b8:	b1b8      	cbz	r0, 59ea <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    59ba:	2206      	movs	r2, #6
    59bc:	4629      	mov	r1, r5
    59be:	3008      	adds	r0, #8
    59c0:	f015 feeb 	bl	1b79a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    59c4:	4621      	mov	r1, r4
    59c6:	2200      	movs	r2, #0
    59c8:	f242 0005 	movw	r0, #8197	; 0x2005
    59cc:	f7ff ff6c 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    59d0:	4604      	mov	r4, r0
    59d2:	b940      	cbnz	r0, 59e6 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    59d4:	2206      	movs	r2, #6
    59d6:	4629      	mov	r1, r5
    59d8:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    59dc:	f013 fc14 	bl	19208 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    59e0:	2301      	movs	r3, #1
    59e2:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    59e6:	4620      	mov	r0, r4
    59e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    59ea:	f06f 0436 	mvn.w	r4, #54	; 0x36
    59ee:	e7fa      	b.n	59e6 <set_random_address+0x4e>
    59f0:	20000000 	.word	0x20000000

000059f4 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    59f4:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    59f6:	4c07      	ldr	r4, [pc, #28]	; (5a14 <le_create_conn_set_random_addr.isra.0+0x20>)
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    59f8:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    59fa:	7823      	ldrb	r3, [r4, #0]
    59fc:	2b01      	cmp	r3, #1
    59fe:	d003      	beq.n	5a08 <le_create_conn_set_random_addr.isra.0+0x14>
	return 0;
    5a00:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
    5a02:	7823      	ldrb	r3, [r4, #0]
    5a04:	702b      	strb	r3, [r5, #0]
}
    5a06:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    5a08:	1c60      	adds	r0, r4, #1
    5a0a:	f7ff ffc5 	bl	5998 <set_random_address>
			if (err) {
    5a0e:	2800      	cmp	r0, #0
    5a10:	d0f6      	beq.n	5a00 <le_create_conn_set_random_addr.isra.0+0xc>
    5a12:	e7f8      	b.n	5a06 <le_create_conn_set_random_addr.isra.0+0x12>
    5a14:	20000000 	.word	0x20000000

00005a18 <set_le_adv_enable_legacy>:
{
    5a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5a1a:	4606      	mov	r6, r0
    5a1c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5a1e:	f242 000a 	movw	r0, #8202	; 0x200a
    5a22:	2101      	movs	r1, #1
    5a24:	f7ff ff08 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    5a28:	4604      	mov	r4, r0
    5a2a:	b1e0      	cbz	r0, 5a66 <set_le_adv_enable_legacy+0x4e>
	if (enable) {
    5a2c:	b1cd      	cbz	r5, 5a62 <set_le_adv_enable_legacy+0x4a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5a2e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5a30:	f013 fe58 	bl	196e4 <net_buf_add_u8>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    5a34:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    5a36:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    5a38:	3610      	adds	r6, #16
    5a3a:	9302      	str	r3, [sp, #8]
	state->target = target;
    5a3c:	9601      	str	r6, [sp, #4]
	state->val = val;
    5a3e:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5a42:	f006 fea3 	bl	c78c <net_buf_id>
    5a46:	220c      	movs	r2, #12
    5a48:	4b08      	ldr	r3, [pc, #32]	; (5a6c <set_le_adv_enable_legacy+0x54>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5a4a:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    5a4c:	fb02 3000 	mla	r0, r2, r0, r3
    5a50:	ab01      	add	r3, sp, #4
    5a52:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5a54:	2200      	movs	r2, #0
    5a56:	f242 000a 	movw	r0, #8202	; 0x200a
    5a5a:	f7ff ff25 	bl	58a8 <bt_hci_cmd_send_sync>
}
    5a5e:	b004      	add	sp, #16
    5a60:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5a62:	4629      	mov	r1, r5
    5a64:	e7e4      	b.n	5a30 <set_le_adv_enable_legacy+0x18>
		return -ENOBUFS;
    5a66:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5a6a:	e7f8      	b.n	5a5e <set_le_adv_enable_legacy+0x46>
    5a6c:	200259e0 	.word	0x200259e0

00005a70 <set_le_scan_enable_legacy>:
{
    5a70:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5a72:	2102      	movs	r1, #2
{
    5a74:	4604      	mov	r4, r0
    5a76:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5a78:	f242 000c 	movw	r0, #8204	; 0x200c
    5a7c:	f7ff fedc 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    5a80:	4605      	mov	r5, r0
    5a82:	b348      	cbz	r0, 5ad8 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    5a84:	2102      	movs	r1, #2
    5a86:	3008      	adds	r0, #8
    5a88:	f015 fe81 	bl	1b78e <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5a8c:	2c01      	cmp	r4, #1
    5a8e:	4603      	mov	r3, r0
    5a90:	d11f      	bne.n	5ad2 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a92:	4813      	ldr	r0, [pc, #76]	; (5ae0 <set_le_scan_enable_legacy+0x70>)
    5a94:	f013 fe20 	bl	196d8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5a98:	f3c0 2000 	ubfx	r0, r0, #8, #1
    5a9c:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    5a9e:	701c      	strb	r4, [r3, #0]
	state->target = target;
    5aa0:	4b0f      	ldr	r3, [pc, #60]	; (5ae0 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    5aa2:	4628      	mov	r0, r5
    5aa4:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    5aa6:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    5aa8:	f004 0401 	and.w	r4, r4, #1
    5aac:	9302      	str	r3, [sp, #8]
    5aae:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    5ab2:	f006 fe6b 	bl	c78c <net_buf_id>
    5ab6:	220c      	movs	r2, #12
    5ab8:	4b0a      	ldr	r3, [pc, #40]	; (5ae4 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5aba:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    5abc:	fb02 3000 	mla	r0, r2, r0, r3
    5ac0:	ab01      	add	r3, sp, #4
    5ac2:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5ac4:	2200      	movs	r2, #0
    5ac6:	f242 000c 	movw	r0, #8204	; 0x200c
    5aca:	f7ff feed 	bl	58a8 <bt_hci_cmd_send_sync>
}
    5ace:	b005      	add	sp, #20
    5ad0:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5ad2:	2200      	movs	r2, #0
    5ad4:	7042      	strb	r2, [r0, #1]
    5ad6:	e7e2      	b.n	5a9e <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    5ad8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5adc:	e7f7      	b.n	5ace <set_le_scan_enable_legacy+0x5e>
    5ade:	bf00      	nop
    5ae0:	20000094 	.word	0x20000094
    5ae4:	200259e0 	.word	0x200259e0

00005ae8 <start_le_scan_legacy>:
{
    5ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5aea:	460e      	mov	r6, r1
    5aec:	4605      	mov	r5, r0
	(void)memset(&set_param, 0, sizeof(set_param));
    5aee:	2100      	movs	r1, #0
{
    5af0:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    5af2:	4668      	mov	r0, sp
    5af4:	2207      	movs	r2, #7
    5af6:	f013 fbb2 	bl	1925e <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    5afa:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    5afe:	4e29      	ldr	r6, [pc, #164]	; (5ba4 <start_le_scan_legacy+0xbc>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    5b00:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    5b02:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    5b04:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    5b08:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    5b0c:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    5b10:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    5b14:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5b18:	f013 fdde 	bl	196d8 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    5b1c:	0641      	lsls	r1, r0, #25
    5b1e:	d419      	bmi.n	5b54 <start_le_scan_legacy+0x6c>
			err = le_set_private_addr(BT_ID_DEFAULT);
    5b20:	f013 fe25 	bl	1976e <le_adv_set_private_addr.isra.0>
			if (err) {
    5b24:	4604      	mov	r4, r0
    5b26:	b190      	cbz	r0, 5b4e <start_le_scan_legacy+0x66>
				if (active_scan || !is_adv_using_rand_addr()) {
    5b28:	2d01      	cmp	r5, #1
    5b2a:	d034      	beq.n	5b96 <start_le_scan_legacy+0xae>
    5b2c:	f106 0028 	add.w	r0, r6, #40	; 0x28
    5b30:	f013 fdd2 	bl	196d8 <atomic_get>
    5b34:	0642      	lsls	r2, r0, #25
    5b36:	d52e      	bpl.n	5b96 <start_le_scan_legacy+0xae>
    5b38:	4a1b      	ldr	r2, [pc, #108]	; (5ba8 <start_le_scan_legacy+0xc0>)
    5b3a:	4b1c      	ldr	r3, [pc, #112]	; (5bac <start_le_scan_legacy+0xc4>)
					BT_WARN("Ignoring failure to set "
    5b3c:	4621      	mov	r1, r4
    5b3e:	1ad2      	subs	r2, r2, r3
    5b40:	08d2      	lsrs	r2, r2, #3
    5b42:	0192      	lsls	r2, r2, #6
    5b44:	481a      	ldr	r0, [pc, #104]	; (5bb0 <start_le_scan_legacy+0xc8>)
    5b46:	f042 0202 	orr.w	r2, r2, #2
    5b4a:	f012 f9cc 	bl	17ee6 <log_1>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5b4e:	2301      	movs	r3, #1
    5b50:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    5b54:	2107      	movs	r1, #7
    5b56:	f242 000b 	movw	r0, #8203	; 0x200b
    5b5a:	f7ff fe6d 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    5b5e:	4604      	mov	r4, r0
    5b60:	b1e0      	cbz	r0, 5b9c <start_le_scan_legacy+0xb4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5b62:	2207      	movs	r2, #7
    5b64:	4669      	mov	r1, sp
    5b66:	3008      	adds	r0, #8
    5b68:	f015 fe17 	bl	1b79a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    5b6c:	4621      	mov	r1, r4
    5b6e:	2200      	movs	r2, #0
    5b70:	f242 000b 	movw	r0, #8203	; 0x200b
    5b74:	f7ff fe98 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    5b78:	4604      	mov	r4, r0
    5b7a:	b960      	cbnz	r0, 5b96 <start_le_scan_legacy+0xae>
	return set_le_scan_enable_legacy(enable);
    5b7c:	2001      	movs	r0, #1
    5b7e:	f7ff ff77 	bl	5a70 <set_le_scan_enable_legacy>
	if (err) {
    5b82:	4604      	mov	r4, r0
    5b84:	b938      	cbnz	r0, 5b96 <start_le_scan_legacy+0xae>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    5b86:	1e6b      	subs	r3, r5, #1
    5b88:	425a      	negs	r2, r3
    5b8a:	f04f 0107 	mov.w	r1, #7
    5b8e:	4809      	ldr	r0, [pc, #36]	; (5bb4 <start_le_scan_legacy+0xcc>)
    5b90:	415a      	adcs	r2, r3
    5b92:	f013 fdc0 	bl	19716 <atomic_set_bit_to>
}
    5b96:	4620      	mov	r0, r4
    5b98:	b002      	add	sp, #8
    5b9a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5b9c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5ba0:	e7f9      	b.n	5b96 <start_le_scan_legacy+0xae>
    5ba2:	bf00      	nop
    5ba4:	20000000 	.word	0x20000000
    5ba8:	00023314 	.word	0x00023314
    5bac:	000232ec 	.word	0x000232ec
    5bb0:	00025733 	.word	0x00025733
    5bb4:	20000094 	.word	0x20000094

00005bb8 <bt_le_create_conn_legacy>:
{
    5bb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5bbc:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    5bbe:	f10d 0003 	add.w	r0, sp, #3
    5bc2:	f7ff ff17 	bl	59f4 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    5bc6:	4605      	mov	r5, r0
    5bc8:	2800      	cmp	r0, #0
    5bca:	d150      	bne.n	5c6e <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5bcc:	2119      	movs	r1, #25
    5bce:	f242 000d 	movw	r0, #8205	; 0x200d
    5bd2:	f7ff fe31 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    5bd6:	4607      	mov	r7, r0
    5bd8:	2800      	cmp	r0, #0
    5bda:	d04f      	beq.n	5c7c <bt_le_create_conn_legacy+0xc4>
	return net_buf_simple_add(&buf->b, len);
    5bdc:	2119      	movs	r1, #25
    5bde:	3008      	adds	r0, #8
    5be0:	f015 fdd5 	bl	1b78e <net_buf_simple_add>
    5be4:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5be6:	4629      	mov	r1, r5
    5be8:	2219      	movs	r2, #25
    5bea:	f013 fb38 	bl	1925e <memset>
	cp->own_addr_type = own_addr_type;
    5bee:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if (!bt_dev.le.rl_size ||
    5bf2:	4d24      	ldr	r5, [pc, #144]	; (5c84 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    5bf4:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    5bf6:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d03b      	beq.n	5c76 <bt_le_create_conn_legacy+0xbe>
    5bfe:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    5c02:	429a      	cmp	r2, r3
    5c04:	d837      	bhi.n	5c76 <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    5c06:	f106 0188 	add.w	r1, r6, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    5c0a:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    5c0e:	1d60      	adds	r0, r4, #5
    5c10:	f013 fd65 	bl	196de <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    5c14:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    5c18:	89ab      	ldrh	r3, [r5, #12]
	cmd(buf)->state = &state;
    5c1a:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    5c1c:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    5c1e:	89eb      	ldrh	r3, [r5, #14]
    5c20:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    5c22:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    5c26:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5c2a:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    5c2e:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    5c32:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    5c36:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5c3a:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    5c3e:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    5c42:	4b11      	ldr	r3, [pc, #68]	; (5c88 <bt_le_create_conn_legacy+0xd0>)
    5c44:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    5c46:	230b      	movs	r3, #11
    5c48:	9302      	str	r3, [sp, #8]
	state->val = val;
    5c4a:	2301      	movs	r3, #1
    5c4c:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    5c50:	f006 fd9c 	bl	c78c <net_buf_id>
    5c54:	220c      	movs	r2, #12
    5c56:	4b0d      	ldr	r3, [pc, #52]	; (5c8c <bt_le_create_conn_legacy+0xd4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    5c58:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    5c5a:	fb02 3000 	mla	r0, r2, r0, r3
    5c5e:	ab01      	add	r3, sp, #4
    5c60:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    5c62:	4642      	mov	r2, r8
    5c64:	f242 000d 	movw	r0, #8205	; 0x200d
    5c68:	f7ff fe1e 	bl	58a8 <bt_hci_cmd_send_sync>
    5c6c:	4605      	mov	r5, r0
}
    5c6e:	4628      	mov	r0, r5
    5c70:	b004      	add	sp, #16
    5c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    5c76:	f106 0196 	add.w	r1, r6, #150	; 0x96
    5c7a:	e7c6      	b.n	5c0a <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    5c7c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5c80:	e7f5      	b.n	5c6e <bt_le_create_conn_legacy+0xb6>
    5c82:	bf00      	nop
    5c84:	20000000 	.word	0x20000000
    5c88:	20000094 	.word	0x20000094
    5c8c:	200259e0 	.word	0x200259e0

00005c90 <bt_le_create_conn_cancel>:
{
    5c90:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5c92:	2100      	movs	r1, #0
{
    5c94:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5c96:	f242 000e 	movw	r0, #8206	; 0x200e
    5c9a:	f7ff fdcd 	bl	5838 <bt_hci_cmd_create>
	state->target = target;
    5c9e:	4b0c      	ldr	r3, [pc, #48]	; (5cd0 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    5ca0:	2500      	movs	r5, #0
	state->target = target;
    5ca2:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    5ca4:	230b      	movs	r3, #11
    5ca6:	4604      	mov	r4, r0
    5ca8:	9302      	str	r3, [sp, #8]
	state->val = val;
    5caa:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5cae:	f006 fd6d 	bl	c78c <net_buf_id>
    5cb2:	220c      	movs	r2, #12
    5cb4:	4b07      	ldr	r3, [pc, #28]	; (5cd4 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    5cb6:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    5cb8:	fb02 3000 	mla	r0, r2, r0, r3
    5cbc:	ab01      	add	r3, sp, #4
    5cbe:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    5cc0:	462a      	mov	r2, r5
    5cc2:	f242 000e 	movw	r0, #8206	; 0x200e
    5cc6:	f7ff fdef 	bl	58a8 <bt_hci_cmd_send_sync>
}
    5cca:	b005      	add	sp, #20
    5ccc:	bd30      	pop	{r4, r5, pc}
    5cce:	bf00      	nop
    5cd0:	20000094 	.word	0x20000094
    5cd4:	200259e0 	.word	0x200259e0

00005cd8 <bt_id_add>:
{
    5cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5cdc:	4f63      	ldr	r7, [pc, #396]	; (5e6c <bt_id_add+0x194>)
{
    5cde:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5ce0:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    5ce4:	463d      	mov	r5, r7
    5ce6:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    5cea:	b10a      	cbz	r2, 5cf0 <bt_id_add+0x18>
    5cec:	429a      	cmp	r2, r3
    5cee:	d209      	bcs.n	5d04 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    5cf0:	3301      	adds	r3, #1
    5cf2:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    5cf6:	7a23      	ldrb	r3, [r4, #8]
    5cf8:	f043 0304 	orr.w	r3, r3, #4
    5cfc:	7223      	strb	r3, [r4, #8]
}
    5cfe:	b002      	add	sp, #8
    5d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    5d04:	2100      	movs	r1, #0
    5d06:	2206      	movs	r2, #6
    5d08:	4608      	mov	r0, r1
    5d0a:	f001 ffed 	bl	7ce8 <bt_conn_lookup_state_le>
	if (conn) {
    5d0e:	4606      	mov	r6, r0
    5d10:	b168      	cbz	r0, 5d2e <bt_id_add+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5d16:	f107 0094 	add.w	r0, r7, #148	; 0x94
    5d1a:	f013 fcf1 	bl	19700 <atomic_or>
	keys->state |= flag;
    5d1e:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    5d20:	4630      	mov	r0, r6
	keys->state |= flag;
    5d22:	f043 0301 	orr.w	r3, r3, #1
    5d26:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    5d28:	f013 ffd5 	bl	19cd6 <bt_conn_unref>
		return;
    5d2c:	e7e7      	b.n	5cfe <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5d2e:	f107 0094 	add.w	r0, r7, #148	; 0x94
    5d32:	f013 fcd1 	bl	196d8 <atomic_get>
	func(&bt_dev.adv, data);
    5d36:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5d38:	f3c0 1740 	ubfx	r7, r0, #5, #1
    5d3c:	f105 0018 	add.w	r0, r5, #24
    5d40:	f013 fd27 	bl	19792 <adv_pause_enabled>
	if (scan_enabled) {
    5d44:	b117      	cbz	r7, 5d4c <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    5d46:	4630      	mov	r0, r6
    5d48:	f013 fd90 	bl	1986c <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    5d4c:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5d50:	b173      	cbz	r3, 5d70 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    5d52:	2000      	movs	r0, #0
    5d54:	f013 fd73 	bl	1983e <addr_res_enable>
		if (err) {
    5d58:	b150      	cbz	r0, 5d70 <bt_id_add+0x98>
    5d5a:	4945      	ldr	r1, [pc, #276]	; (5e70 <bt_id_add+0x198>)
    5d5c:	4b45      	ldr	r3, [pc, #276]	; (5e74 <bt_id_add+0x19c>)
			BT_WARN("Failed to disable address resolution");
    5d5e:	4846      	ldr	r0, [pc, #280]	; (5e78 <bt_id_add+0x1a0>)
    5d60:	1ac9      	subs	r1, r1, r3
    5d62:	08c9      	lsrs	r1, r1, #3
    5d64:	0189      	lsls	r1, r1, #6
    5d66:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    5d6a:	f012 f8af 	bl	17ecc <log_0>
	if (err) {
    5d6e:	e023      	b.n	5db8 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    5d70:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    5d74:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    5d78:	429a      	cmp	r2, r3
    5d7a:	d129      	bne.n	5dd0 <bt_id_add+0xf8>
    5d7c:	4b3d      	ldr	r3, [pc, #244]	; (5e74 <bt_id_add+0x19c>)
    5d7e:	4e3c      	ldr	r6, [pc, #240]	; (5e70 <bt_id_add+0x198>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    5d80:	483e      	ldr	r0, [pc, #248]	; (5e7c <bt_id_add+0x1a4>)
    5d82:	1af6      	subs	r6, r6, r3
    5d84:	08f6      	lsrs	r6, r6, #3
    5d86:	01b6      	lsls	r6, r6, #6
    5d88:	f046 0102 	orr.w	r1, r6, #2
    5d8c:	f012 f89e 	bl	17ecc <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    5d90:	2200      	movs	r2, #0
    5d92:	f242 0029 	movw	r0, #8233	; 0x2029
    5d96:	4611      	mov	r1, r2
    5d98:	f7ff fd86 	bl	58a8 <bt_hci_cmd_send_sync>
		if (err) {
    5d9c:	b118      	cbz	r0, 5da6 <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    5d9e:	4838      	ldr	r0, [pc, #224]	; (5e80 <bt_id_add+0x1a8>)
    5da0:	f046 0101 	orr.w	r1, r6, #1
    5da4:	e7e1      	b.n	5d6a <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    5da6:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5daa:	3301      	adds	r3, #1
    5dac:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    5db0:	7a23      	ldrb	r3, [r4, #8]
    5db2:	f043 0304 	orr.w	r3, r3, #4
    5db6:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    5db8:	2001      	movs	r0, #1
    5dba:	f013 fd40 	bl	1983e <addr_res_enable>
	if (scan_enabled) {
    5dbe:	b117      	cbz	r7, 5dc6 <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    5dc0:	2001      	movs	r0, #1
    5dc2:	f013 fd53 	bl	1986c <set_le_scan_enable>
	func(&bt_dev.adv, data);
    5dc6:	2100      	movs	r1, #0
    5dc8:	482e      	ldr	r0, [pc, #184]	; (5e84 <bt_id_add+0x1ac>)
    5dca:	f013 fcf7 	bl	197bc <adv_unpause_enabled>
}
    5dce:	e796      	b.n	5cfe <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    5dd0:	f104 0801 	add.w	r8, r4, #1
    5dd4:	4640      	mov	r0, r8
    5dd6:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    5dda:	f013 fcff 	bl	197dc <hci_id_add.isra.0>
	if (err) {
    5dde:	4606      	mov	r6, r0
    5de0:	b140      	cbz	r0, 5df4 <bt_id_add+0x11c>
    5de2:	4923      	ldr	r1, [pc, #140]	; (5e70 <bt_id_add+0x198>)
    5de4:	4b23      	ldr	r3, [pc, #140]	; (5e74 <bt_id_add+0x19c>)
		BT_ERR("Failed to add IRK to controller");
    5de6:	4828      	ldr	r0, [pc, #160]	; (5e88 <bt_id_add+0x1b0>)
    5de8:	1ac9      	subs	r1, r1, r3
    5dea:	08c9      	lsrs	r1, r1, #3
    5dec:	0189      	lsls	r1, r1, #6
    5dee:	f041 0101 	orr.w	r1, r1, #1
    5df2:	e7ba      	b.n	5d6a <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    5df4:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5df8:	3301      	adds	r3, #1
    5dfa:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    5dfe:	7a23      	ldrb	r3, [r4, #8]
    5e00:	f043 0304 	orr.w	r3, r3, #4
    5e04:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    5e06:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    5e0a:	075b      	lsls	r3, r3, #29
    5e0c:	d408      	bmi.n	5e20 <bt_id_add+0x148>
    5e0e:	4918      	ldr	r1, [pc, #96]	; (5e70 <bt_id_add+0x198>)
    5e10:	4b18      	ldr	r3, [pc, #96]	; (5e74 <bt_id_add+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    5e12:	481e      	ldr	r0, [pc, #120]	; (5e8c <bt_id_add+0x1b4>)
    5e14:	1ac9      	subs	r1, r1, r3
    5e16:	08c9      	lsrs	r1, r1, #3
    5e18:	0189      	lsls	r1, r1, #6
    5e1a:	f041 0102 	orr.w	r1, r1, #2
    5e1e:	e7a4      	b.n	5d6a <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    5e20:	4641      	mov	r1, r8
    5e22:	4668      	mov	r0, sp
    5e24:	f013 fc5b 	bl	196de <bt_addr_le_copy>
	cp.mode = mode;
    5e28:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    5e2a:	2108      	movs	r1, #8
    5e2c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    5e30:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    5e34:	f7ff fd00 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    5e38:	4604      	mov	r4, r0
    5e3a:	b940      	cbnz	r0, 5e4e <bt_id_add+0x176>
    5e3c:	490c      	ldr	r1, [pc, #48]	; (5e70 <bt_id_add+0x198>)
    5e3e:	4b0d      	ldr	r3, [pc, #52]	; (5e74 <bt_id_add+0x19c>)
		BT_ERR("Failed to set privacy mode");
    5e40:	4813      	ldr	r0, [pc, #76]	; (5e90 <bt_id_add+0x1b8>)
    5e42:	1ac9      	subs	r1, r1, r3
    5e44:	08c9      	lsrs	r1, r1, #3
    5e46:	0189      	lsls	r1, r1, #6
    5e48:	f041 0101 	orr.w	r1, r1, #1
    5e4c:	e78d      	b.n	5d6a <bt_id_add+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5e4e:	2208      	movs	r2, #8
    5e50:	4669      	mov	r1, sp
    5e52:	4410      	add	r0, r2
    5e54:	f015 fca1 	bl	1b79a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    5e58:	4632      	mov	r2, r6
    5e5a:	4621      	mov	r1, r4
    5e5c:	f242 004e 	movw	r0, #8270	; 0x204e
    5e60:	f7ff fd22 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    5e64:	2800      	cmp	r0, #0
    5e66:	d0a7      	beq.n	5db8 <bt_id_add+0xe0>
    5e68:	e7e8      	b.n	5e3c <bt_id_add+0x164>
    5e6a:	bf00      	nop
    5e6c:	20000000 	.word	0x20000000
    5e70:	00023314 	.word	0x00023314
    5e74:	000232ec 	.word	0x000232ec
    5e78:	00025769 	.word	0x00025769
    5e7c:	0002578e 	.word	0x0002578e
    5e80:	000257bf 	.word	0x000257bf
    5e84:	20000018 	.word	0x20000018
    5e88:	000257df 	.word	0x000257df
    5e8c:	000257ff 	.word	0x000257ff
    5e90:	00025829 	.word	0x00025829

00005e94 <bt_id_del>:
{
    5e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    5e98:	4e4c      	ldr	r6, [pc, #304]	; (5fcc <bt_id_del+0x138>)
{
    5e9a:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    5e9c:	f896 20e0 	ldrb.w	r2, [r6, #224]	; 0xe0
    5ea0:	4635      	mov	r5, r6
    5ea2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    5ea6:	b112      	cbz	r2, 5eae <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    5ea8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    5eaa:	4293      	cmp	r3, r2
    5eac:	dd08      	ble.n	5ec0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    5eae:	3b01      	subs	r3, #1
    5eb0:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    5eb4:	7a23      	ldrb	r3, [r4, #8]
    5eb6:	f023 0304 	bic.w	r3, r3, #4
    5eba:	7223      	strb	r3, [r4, #8]
}
    5ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    5ec0:	2100      	movs	r1, #0
    5ec2:	2206      	movs	r2, #6
    5ec4:	4608      	mov	r0, r1
    5ec6:	f001 ff0f 	bl	7ce8 <bt_conn_lookup_state_le>
	if (conn) {
    5eca:	4607      	mov	r7, r0
    5ecc:	b170      	cbz	r0, 5eec <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5ece:	f106 0094 	add.w	r0, r6, #148	; 0x94
    5ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5ed6:	f013 fc13 	bl	19700 <atomic_or>
	keys->state |= flag;
    5eda:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    5edc:	4638      	mov	r0, r7
	keys->state |= flag;
    5ede:	f043 0302 	orr.w	r3, r3, #2
    5ee2:	7223      	strb	r3, [r4, #8]
}
    5ee4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    5ee8:	f013 bef5 	b.w	19cd6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5eec:	f106 0094 	add.w	r0, r6, #148	; 0x94
    5ef0:	f013 fbf2 	bl	196d8 <atomic_get>
	func(&bt_dev.adv, data);
    5ef4:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5ef6:	f3c0 1640 	ubfx	r6, r0, #5, #1
    5efa:	f105 0018 	add.w	r0, r5, #24
    5efe:	f013 fc48 	bl	19792 <adv_pause_enabled>
	if (scan_enabled) {
    5f02:	b116      	cbz	r6, 5f0a <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    5f04:	4638      	mov	r0, r7
    5f06:	f013 fcb1 	bl	1986c <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    5f0a:	2000      	movs	r0, #0
    5f0c:	f013 fc97 	bl	1983e <addr_res_enable>
	if (err) {
    5f10:	4607      	mov	r7, r0
    5f12:	b1d0      	cbz	r0, 5f4a <bt_id_del+0xb6>
    5f14:	4a2e      	ldr	r2, [pc, #184]	; (5fd0 <bt_id_del+0x13c>)
    5f16:	4b2f      	ldr	r3, [pc, #188]	; (5fd4 <bt_id_del+0x140>)
		BT_ERR("Disabling address resolution failed (err %d)", err);
    5f18:	4601      	mov	r1, r0
    5f1a:	1ad2      	subs	r2, r2, r3
    5f1c:	08d2      	lsrs	r2, r2, #3
    5f1e:	0192      	lsls	r2, r2, #6
    5f20:	482d      	ldr	r0, [pc, #180]	; (5fd8 <bt_id_del+0x144>)
    5f22:	f042 0201 	orr.w	r2, r2, #1
    5f26:	f011 ffde 	bl	17ee6 <log_1>
	if (bt_dev.le.rl_entries) {
    5f2a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5f2e:	b113      	cbz	r3, 5f36 <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    5f30:	2001      	movs	r0, #1
    5f32:	f013 fc84 	bl	1983e <addr_res_enable>
	if (scan_enabled) {
    5f36:	b116      	cbz	r6, 5f3e <bt_id_del+0xaa>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    5f38:	2001      	movs	r0, #1
    5f3a:	f013 fc97 	bl	1986c <set_le_scan_enable>
}
    5f3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    5f42:	2100      	movs	r1, #0
    5f44:	4825      	ldr	r0, [pc, #148]	; (5fdc <bt_id_del+0x148>)
    5f46:	f013 bc39 	b.w	197bc <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5f4a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5f4e:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    5f52:	429a      	cmp	r2, r3
    5f54:	d20c      	bcs.n	5f70 <bt_id_del+0xdc>
		bt_dev.le.rl_entries--;
    5f56:	3b01      	subs	r3, #1
    5f58:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    5f5c:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    5f5e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    5f60:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    5f64:	2002      	movs	r0, #2
    5f66:	491e      	ldr	r1, [pc, #120]	; (5fe0 <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    5f68:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    5f6a:	f006 fb99 	bl	c6a0 <bt_keys_foreach>
		goto done;
    5f6e:	e7dc      	b.n	5f2a <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    5f70:	2107      	movs	r1, #7
    5f72:	f242 0028 	movw	r0, #8232	; 0x2028
    5f76:	f7ff fc5f 	bl	5838 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    5f7a:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    5f7e:	4680      	mov	r8, r0
    5f80:	b950      	cbnz	r0, 5f98 <bt_id_del+0x104>
    5f82:	4b14      	ldr	r3, [pc, #80]	; (5fd4 <bt_id_del+0x140>)
    5f84:	4912      	ldr	r1, [pc, #72]	; (5fd0 <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    5f86:	4817      	ldr	r0, [pc, #92]	; (5fe4 <bt_id_del+0x150>)
    5f88:	1ac9      	subs	r1, r1, r3
    5f8a:	08c9      	lsrs	r1, r1, #3
    5f8c:	0189      	lsls	r1, r1, #6
    5f8e:	f041 0101 	orr.w	r1, r1, #1
    5f92:	f011 ff9b 	bl	17ecc <log_0>
		goto done;
    5f96:	e7c8      	b.n	5f2a <bt_id_del+0x96>
	return net_buf_simple_add(&buf->b, len);
    5f98:	2107      	movs	r1, #7
    5f9a:	3008      	adds	r0, #8
    5f9c:	f015 fbf7 	bl	1b78e <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    5fa0:	4649      	mov	r1, r9
    5fa2:	f013 fb9c 	bl	196de <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    5fa6:	463a      	mov	r2, r7
    5fa8:	4641      	mov	r1, r8
    5faa:	f242 0028 	movw	r0, #8232	; 0x2028
    5fae:	f7ff fc7b 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    5fb2:	2800      	cmp	r0, #0
    5fb4:	d1e5      	bne.n	5f82 <bt_id_del+0xee>
	bt_dev.le.rl_entries--;
    5fb6:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    5fba:	3b01      	subs	r3, #1
    5fbc:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    5fc0:	7a23      	ldrb	r3, [r4, #8]
    5fc2:	f023 0304 	bic.w	r3, r3, #4
    5fc6:	7223      	strb	r3, [r4, #8]
    5fc8:	e7af      	b.n	5f2a <bt_id_del+0x96>
    5fca:	bf00      	nop
    5fcc:	20000000 	.word	0x20000000
    5fd0:	00023314 	.word	0x00023314
    5fd4:	000232ec 	.word	0x000232ec
    5fd8:	00025844 	.word	0x00025844
    5fdc:	20000018 	.word	0x20000018
    5fe0:	0001982d 	.word	0x0001982d
    5fe4:	00025871 	.word	0x00025871

00005fe8 <bt_le_scan_update>:
{
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5fec:	481c      	ldr	r0, [pc, #112]	; (6060 <bt_le_scan_update+0x78>)
    5fee:	f013 fb73 	bl	196d8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5ff2:	0641      	lsls	r1, r0, #25
    5ff4:	f3c0 1380 	ubfx	r3, r0, #6, #1
    5ff8:	d501      	bpl.n	5ffe <bt_le_scan_update+0x16>
			return 0;
    5ffa:	2000      	movs	r0, #0
    5ffc:	e02b      	b.n	6056 <bt_le_scan_update+0x6e>
    5ffe:	4818      	ldr	r0, [pc, #96]	; (6060 <bt_le_scan_update+0x78>)
    6000:	f013 fb6a 	bl	196d8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6004:	0682      	lsls	r2, r0, #26
    6006:	d421      	bmi.n	604c <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    6008:	2100      	movs	r1, #0
    600a:	2206      	movs	r2, #6
    600c:	4608      	mov	r0, r1
    600e:	f001 fe6b 	bl	7ce8 <bt_conn_lookup_state_le>
		if (conn) {
    6012:	4604      	mov	r4, r0
    6014:	bb00      	cbnz	r0, 6058 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    6016:	2202      	movs	r2, #2
    6018:	4601      	mov	r1, r0
    601a:	f001 fe65 	bl	7ce8 <bt_conn_lookup_state_le>
		if (conn) {
    601e:	4605      	mov	r5, r0
    6020:	2800      	cmp	r0, #0
    6022:	d0ea      	beq.n	5ffa <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6024:	f44f 7180 	mov.w	r1, #256	; 0x100
    6028:	480d      	ldr	r0, [pc, #52]	; (6060 <bt_le_scan_update+0x78>)
    602a:	f013 fb69 	bl	19700 <atomic_or>
			bt_conn_unref(conn);
    602e:	4628      	mov	r0, r5
    6030:	f013 fe51 	bl	19cd6 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    6034:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    6036:	4620      	mov	r0, r4
}
    6038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    603c:	bf15      	itete	ne
    603e:	2230      	movne	r2, #48	; 0x30
    6040:	2212      	moveq	r2, #18
    6042:	2160      	movne	r1, #96	; 0x60
    6044:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    6048:	f7ff bd4e 	b.w	5ae8 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    604c:	4618      	mov	r0, r3
    604e:	f7ff fd0f 	bl	5a70 <set_le_scan_enable_legacy>
		if (err) {
    6052:	2800      	cmp	r0, #0
    6054:	d0d8      	beq.n	6008 <bt_le_scan_update+0x20>
}
    6056:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    6058:	f013 fe3d 	bl	19cd6 <bt_conn_unref>
    605c:	e7cd      	b.n	5ffa <bt_le_scan_update+0x12>
    605e:	bf00      	nop
    6060:	20000094 	.word	0x20000094

00006064 <hci_disconn_complete>:
{
    6064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    6066:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    6068:	7835      	ldrb	r5, [r6, #0]
    606a:	bb75      	cbnz	r5, 60ca <hci_disconn_complete+0x66>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    606c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    6070:	4638      	mov	r0, r7
    6072:	f001 fcd5 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    6076:	4604      	mov	r4, r0
    6078:	b960      	cbnz	r0, 6094 <hci_disconn_complete+0x30>
    607a:	4b14      	ldr	r3, [pc, #80]	; (60cc <hci_disconn_complete+0x68>)
    607c:	4a14      	ldr	r2, [pc, #80]	; (60d0 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    607e:	4639      	mov	r1, r7
    6080:	1ad2      	subs	r2, r2, r3
    6082:	08d2      	lsrs	r2, r2, #3
    6084:	0192      	lsls	r2, r2, #6
    6086:	4813      	ldr	r0, [pc, #76]	; (60d4 <hci_disconn_complete+0x70>)
    6088:	f042 0201 	orr.w	r2, r2, #1
}
    608c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6090:	f011 bf29 	b.w	17ee6 <log_1>
	conn->err = evt->reason;
    6094:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6096:	4629      	mov	r1, r5
	conn->err = evt->reason;
    6098:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    609a:	f001 fccd 	bl	7a38 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    609e:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    60a0:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    60a2:	2b01      	cmp	r3, #1
    60a4:	d004      	beq.n	60b0 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    60a6:	4620      	mov	r0, r4
}
    60a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    60ac:	f013 be13 	b.w	19cd6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    60b0:	1d20      	adds	r0, r4, #4
    60b2:	f013 fb11 	bl	196d8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    60b6:	07c3      	lsls	r3, r0, #31
    60b8:	d5f5      	bpl.n	60a6 <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    60ba:	4620      	mov	r0, r4
    60bc:	2102      	movs	r1, #2
    60be:	f001 fcbb 	bl	7a38 <bt_conn_set_state>
		bt_le_scan_update(false);
    60c2:	4628      	mov	r0, r5
    60c4:	f7ff ff90 	bl	5fe8 <bt_le_scan_update>
    60c8:	e7ed      	b.n	60a6 <hci_disconn_complete+0x42>
}
    60ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60cc:	000232ec 	.word	0x000232ec
    60d0:	00023314 	.word	0x00023314
    60d4:	00025460 	.word	0x00025460

000060d8 <le_adv_report>:
{
    60d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    60dc:	f100 0708 	add.w	r7, r0, #8
    60e0:	b08d      	sub	sp, #52	; 0x34
    60e2:	4604      	mov	r4, r0
    60e4:	4638      	mov	r0, r7
    60e6:	f015 fb94 	bl	1b812 <net_buf_simple_pull_u8>
    60ea:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 62dc <le_adv_report+0x204>
	if (scan_dev_found_cb) {
    60ee:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 62e0 <le_adv_report+0x208>
    60f2:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	b163      	cbz	r3, 6112 <le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
    60f8:	89a3      	ldrh	r3, [r4, #12]
    60fa:	2b08      	cmp	r3, #8
    60fc:	d80c      	bhi.n	6118 <le_adv_report+0x40>
    60fe:	4972      	ldr	r1, [pc, #456]	; (62c8 <le_adv_report+0x1f0>)
    6100:	4b72      	ldr	r3, [pc, #456]	; (62cc <le_adv_report+0x1f4>)
			BT_ERR("Unexpected end of buffer");
    6102:	4873      	ldr	r0, [pc, #460]	; (62d0 <le_adv_report+0x1f8>)
    6104:	1ac9      	subs	r1, r1, r3
    6106:	08c9      	lsrs	r1, r1, #3
    6108:	0189      	lsls	r1, r1, #6
    610a:	f041 0101 	orr.w	r1, r1, #1
    610e:	f011 fedd 	bl	17ecc <log_0>
}
    6112:	b00d      	add	sp, #52	; 0x34
    6114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    6118:	2109      	movs	r1, #9
    611a:	4638      	mov	r0, r7
    611c:	f015 fb71 	bl	1b802 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    6120:	237f      	movs	r3, #127	; 0x7f
    6122:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    6126:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    6128:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    612a:	9300      	str	r3, [sp, #0]
    612c:	18c3      	adds	r3, r0, r3
    612e:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    6130:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    6134:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    6138:	23ff      	movs	r3, #255	; 0xff
    613a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    613e:	2300      	movs	r3, #0
    6140:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    6144:	7802      	ldrb	r2, [r0, #0]
    6146:	4606      	mov	r6, r0
    6148:	2a04      	cmp	r2, #4
    614a:	bf98      	it	ls
    614c:	4b61      	ldrls	r3, [pc, #388]	; (62d4 <le_adv_report+0x1fc>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    614e:	f100 0901 	add.w	r9, r0, #1
    6152:	bf98      	it	ls
    6154:	5c9b      	ldrbls	r3, [r3, r2]
    6156:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    6158:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    615c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    6160:	f013 faba 	bl	196d8 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    6164:	0645      	lsls	r5, r0, #25
    6166:	d50d      	bpl.n	6184 <le_adv_report+0xac>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    6168:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    616c:	0758      	lsls	r0, r3, #29
    616e:	d509      	bpl.n	6184 <le_adv_report+0xac>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    6170:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    6172:	4638      	mov	r0, r7
    6174:	3101      	adds	r1, #1
    6176:	f015 fb3c 	bl	1b7f2 <net_buf_simple_pull>
    617a:	9b01      	ldr	r3, [sp, #4]
    617c:	1e58      	subs	r0, r3, #1
    617e:	b2c3      	uxtb	r3, r0
    6180:	9301      	str	r3, [sp, #4]
    6182:	e7b7      	b.n	60f4 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    6184:	7873      	ldrb	r3, [r6, #1]
    6186:	1e9a      	subs	r2, r3, #2
    6188:	2a01      	cmp	r2, #1
    618a:	d84e      	bhi.n	622a <le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, addr);
    618c:	4649      	mov	r1, r9
    618e:	a804      	add	r0, sp, #16
    6190:	f013 faa5 	bl	196de <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6194:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6198:	3b02      	subs	r3, #2
    619a:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    619e:	ab04      	add	r3, sp, #16
    61a0:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    61a2:	f8da 3000 	ldr.w	r3, [sl]
    61a6:	b1b3      	cbz	r3, 61d6 <le_adv_report+0xfe>
	state->offset = net_buf_simple_headroom(buf);
    61a8:	4638      	mov	r0, r7
    61aa:	f015 fb42 	bl	1b832 <net_buf_simple_headroom>
    61ae:	4683      	mov	fp, r0
	state->len = buf->len;
    61b0:	89a3      	ldrh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    61b2:	a804      	add	r0, sp, #16
    61b4:	9302      	str	r3, [sp, #8]
		buf->len = len;
    61b6:	9b00      	ldr	r3, [sp, #0]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    61b8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    61bc:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    61be:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    61c2:	463b      	mov	r3, r7
    61c4:	f8da 5000 	ldr.w	r5, [sl]
    61c8:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
    61ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    61cc:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    61ce:	fa10 f08b 	uxtah	r0, r0, fp
    61d2:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    61d4:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    61d6:	4b40      	ldr	r3, [pc, #256]	; (62d8 <le_adv_report+0x200>)
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	2b00      	cmp	r3, #0
    61dc:	d036      	beq.n	624c <le_adv_report+0x174>
    61de:	f1b3 0208 	subs.w	r2, r3, #8
    61e2:	d033      	beq.n	624c <le_adv_report+0x174>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    61e4:	681d      	ldr	r5, [r3, #0]
    61e6:	b105      	cbz	r5, 61ea <le_adv_report+0x112>
    61e8:	3d08      	subs	r5, #8
		if (listener->recv) {
    61ea:	6813      	ldr	r3, [r2, #0]
    61ec:	9203      	str	r2, [sp, #12]
    61ee:	b193      	cbz	r3, 6216 <le_adv_report+0x13e>
	state->offset = net_buf_simple_headroom(buf);
    61f0:	4638      	mov	r0, r7
    61f2:	f015 fb1e 	bl	1b832 <net_buf_simple_headroom>
    61f6:	4683      	mov	fp, r0
	state->len = buf->len;
    61f8:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    61fa:	9a03      	ldr	r2, [sp, #12]
    61fc:	9302      	str	r3, [sp, #8]
			buf->len = len;
    61fe:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    6200:	a808      	add	r0, sp, #32
			buf->len = len;
    6202:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    6204:	4639      	mov	r1, r7
    6206:	6812      	ldr	r2, [r2, #0]
    6208:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    620a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    620c:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    620e:	fa10 f08b 	uxtah	r0, r0, fp
    6212:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    6214:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    6216:	b1cd      	cbz	r5, 624c <le_adv_report+0x174>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6218:	f115 0308 	adds.w	r3, r5, #8
    621c:	d002      	beq.n	6224 <le_adv_report+0x14c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    621e:	68ab      	ldr	r3, [r5, #8]
    6220:	b103      	cbz	r3, 6224 <le_adv_report+0x14c>
    6222:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    6224:	462a      	mov	r2, r5
    6226:	461d      	mov	r5, r3
    6228:	e7df      	b.n	61ea <le_adv_report+0x112>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    622a:	2bff      	cmp	r3, #255	; 0xff
    622c:	d108      	bne.n	6240 <le_adv_report+0x168>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    622e:	2300      	movs	r3, #0
    6230:	a906      	add	r1, sp, #24
    6232:	9306      	str	r3, [sp, #24]
    6234:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    6238:	a804      	add	r0, sp, #16
    623a:	f013 fa50 	bl	196de <bt_addr_le_copy>
    623e:	e7ae      	b.n	619e <le_adv_report+0xc6>
    6240:	4649      	mov	r1, r9
    6242:	2000      	movs	r0, #0
    6244:	f013 fb14 	bl	19870 <bt_lookup_id_addr>
    6248:	4601      	mov	r1, r0
    624a:	e7f5      	b.n	6238 <le_adv_report+0x160>
    624c:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    624e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6252:	f013 fa41 	bl	196d8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6256:	0641      	lsls	r1, r0, #25
    6258:	f3c0 1580 	ubfx	r5, r0, #6, #1
    625c:	d488      	bmi.n	6170 <le_adv_report+0x98>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    625e:	07da      	lsls	r2, r3, #31
    6260:	d586      	bpl.n	6170 <le_adv_report+0x98>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    6262:	2202      	movs	r2, #2
    6264:	4628      	mov	r0, r5
    6266:	a904      	add	r1, sp, #16
    6268:	f001 fd3e 	bl	7ce8 <bt_conn_lookup_state_le>
	if (!conn) {
    626c:	4683      	mov	fp, r0
    626e:	2800      	cmp	r0, #0
    6270:	f43f af7e 	beq.w	6170 <le_adv_report+0x98>
    6274:	4640      	mov	r0, r8
    6276:	f013 fa2f 	bl	196d8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    627a:	0683      	lsls	r3, r0, #26
    627c:	d410      	bmi.n	62a0 <le_adv_report+0x1c8>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    627e:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    6282:	4649      	mov	r1, r9
    6284:	f013 fa2b 	bl	196de <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    6288:	4658      	mov	r0, fp
    628a:	f7ff fc95 	bl	5bb8 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    628e:	b960      	cbnz	r0, 62aa <le_adv_report+0x1d2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    6290:	4658      	mov	r0, fp
    6292:	2106      	movs	r1, #6
    6294:	f001 fbd0 	bl	7a38 <bt_conn_set_state>
	bt_conn_unref(conn);
    6298:	4658      	mov	r0, fp
    629a:	f013 fd1c 	bl	19cd6 <bt_conn_unref>
	return;
    629e:	e767      	b.n	6170 <le_adv_report+0x98>
	return set_le_scan_enable_legacy(enable);
    62a0:	4628      	mov	r0, r5
    62a2:	f7ff fbe5 	bl	5a70 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    62a6:	2800      	cmp	r0, #0
    62a8:	d0e9      	beq.n	627e <le_adv_report+0x1a6>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    62aa:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    62ac:	2100      	movs	r1, #0
    62ae:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    62b0:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    62b4:	f001 fbc0 	bl	7a38 <bt_conn_set_state>
	bt_conn_unref(conn);
    62b8:	4658      	mov	r0, fp
    62ba:	f013 fd0c 	bl	19cd6 <bt_conn_unref>
	bt_le_scan_update(false);
    62be:	2000      	movs	r0, #0
    62c0:	f7ff fe92 	bl	5fe8 <bt_le_scan_update>
    62c4:	e754      	b.n	6170 <le_adv_report+0x98>
    62c6:	bf00      	nop
    62c8:	00023314 	.word	0x00023314
    62cc:	000232ec 	.word	0x000232ec
    62d0:	00025896 	.word	0x00025896
    62d4:	00025d90 	.word	0x00025d90
    62d8:	20025a04 	.word	0x20025a04
    62dc:	20000094 	.word	0x20000094
    62e0:	20025a0c 	.word	0x20025a0c

000062e4 <bt_data_parse>:
{
    62e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62e6:	4604      	mov	r4, r0
    62e8:	460e      	mov	r6, r1
    62ea:	4617      	mov	r7, r2
	while (ad->len > 1) {
    62ec:	88a3      	ldrh	r3, [r4, #4]
    62ee:	2b01      	cmp	r3, #1
    62f0:	d912      	bls.n	6318 <bt_data_parse+0x34>
		len = net_buf_simple_pull_u8(ad);
    62f2:	4620      	mov	r0, r4
    62f4:	f015 fa8d 	bl	1b812 <net_buf_simple_pull_u8>
		if (len == 0U) {
    62f8:	4605      	mov	r5, r0
    62fa:	b168      	cbz	r0, 6318 <bt_data_parse+0x34>
		if (len > ad->len) {
    62fc:	88a2      	ldrh	r2, [r4, #4]
    62fe:	b283      	uxth	r3, r0
    6300:	429a      	cmp	r2, r3
    6302:	d20b      	bcs.n	631c <bt_data_parse+0x38>
    6304:	490f      	ldr	r1, [pc, #60]	; (6344 <bt_data_parse+0x60>)
    6306:	4b10      	ldr	r3, [pc, #64]	; (6348 <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
    6308:	4810      	ldr	r0, [pc, #64]	; (634c <bt_data_parse+0x68>)
    630a:	1ac9      	subs	r1, r1, r3
    630c:	08c9      	lsrs	r1, r1, #3
    630e:	0189      	lsls	r1, r1, #6
    6310:	f041 0102 	orr.w	r1, r1, #2
    6314:	f011 fdda 	bl	17ecc <log_0>
}
    6318:	b003      	add	sp, #12
    631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    631c:	4620      	mov	r0, r4
    631e:	f015 fa78 	bl	1b812 <net_buf_simple_pull_u8>
		data.data = ad->data;
    6322:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    6324:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    6328:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    632a:	4639      	mov	r1, r7
    632c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    632e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    6332:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    6334:	47b0      	blx	r6
    6336:	2800      	cmp	r0, #0
    6338:	d0ee      	beq.n	6318 <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
    633a:	4629      	mov	r1, r5
    633c:	4620      	mov	r0, r4
    633e:	f015 fa58 	bl	1b7f2 <net_buf_simple_pull>
    6342:	e7d3      	b.n	62ec <bt_data_parse+0x8>
    6344:	00023314 	.word	0x00023314
    6348:	000232ec 	.word	0x000232ec
    634c:	000258af 	.word	0x000258af

00006350 <bt_send>:
	return bt_dev.drv->send(buf);
    6350:	4b02      	ldr	r3, [pc, #8]	; (635c <bt_send+0xc>)
    6352:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    6356:	691b      	ldr	r3, [r3, #16]
    6358:	4718      	bx	r3
    635a:	bf00      	nop
    635c:	20000000 	.word	0x20000000

00006360 <bt_hci_cmd_send>:
{
    6360:	b538      	push	{r3, r4, r5, lr}
    6362:	4605      	mov	r5, r0
	if (!buf) {
    6364:	460c      	mov	r4, r1
    6366:	b919      	cbnz	r1, 6370 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6368:	f7ff fa66 	bl	5838 <bt_hci_cmd_create>
		if (!buf) {
    636c:	4604      	mov	r4, r0
    636e:	b1f0      	cbz	r0, 63ae <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6370:	f640 4335 	movw	r3, #3125	; 0xc35
    6374:	429d      	cmp	r5, r3
    6376:	d114      	bne.n	63a2 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    6378:	4620      	mov	r0, r4
    637a:	f7ff ffe9 	bl	6350 <bt_send>
		if (err) {
    637e:	4605      	mov	r5, r0
    6380:	b168      	cbz	r0, 639e <bt_hci_cmd_send+0x3e>
    6382:	4b0c      	ldr	r3, [pc, #48]	; (63b4 <bt_hci_cmd_send+0x54>)
    6384:	4a0c      	ldr	r2, [pc, #48]	; (63b8 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
    6386:	4601      	mov	r1, r0
    6388:	1ad2      	subs	r2, r2, r3
    638a:	08d2      	lsrs	r2, r2, #3
    638c:	0192      	lsls	r2, r2, #6
    638e:	480b      	ldr	r0, [pc, #44]	; (63bc <bt_hci_cmd_send+0x5c>)
    6390:	f042 0201 	orr.w	r2, r2, #1
    6394:	f011 fda7 	bl	17ee6 <log_1>
			net_buf_unref(buf);
    6398:	4620      	mov	r0, r4
    639a:	f006 faab 	bl	c8f4 <net_buf_unref>
}
    639e:	4628      	mov	r0, r5
    63a0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    63a2:	4621      	mov	r1, r4
    63a4:	4806      	ldr	r0, [pc, #24]	; (63c0 <bt_hci_cmd_send+0x60>)
    63a6:	f015 f9bf 	bl	1b728 <net_buf_put>
	return 0;
    63aa:	2500      	movs	r5, #0
    63ac:	e7f7      	b.n	639e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    63ae:	f06f 0536 	mvn.w	r5, #54	; 0x36
    63b2:	e7f4      	b.n	639e <bt_hci_cmd_send+0x3e>
    63b4:	000232ec 	.word	0x000232ec
    63b8:	00023314 	.word	0x00023314
    63bc:	000258be 	.word	0x000258be
    63c0:	2000011c 	.word	0x2000011c

000063c4 <bt_hci_host_num_completed_packets>:
{
    63c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63c6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    63c8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    63ca:	7980      	ldrb	r0, [r0, #6]
    63cc:	f006 f9d6 	bl	c77c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    63d0:	4621      	mov	r1, r4
    63d2:	f01c f9d5 	bl	22780 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    63d6:	4b2d      	ldr	r3, [pc, #180]	; (648c <bt_hci_host_num_completed_packets+0xc8>)
    63d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    63dc:	069b      	lsls	r3, r3, #26
    63de:	d553      	bpl.n	6488 <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
    63e0:	7d60      	ldrb	r0, [r4, #21]
    63e2:	f001 ff51 	bl	8288 <bt_conn_lookup_index>
	if (!conn) {
    63e6:	4605      	mov	r5, r0
    63e8:	b960      	cbnz	r0, 6404 <bt_hci_host_num_completed_packets+0x40>
    63ea:	4b29      	ldr	r3, [pc, #164]	; (6490 <bt_hci_host_num_completed_packets+0xcc>)
    63ec:	4a29      	ldr	r2, [pc, #164]	; (6494 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
    63ee:	7d61      	ldrb	r1, [r4, #21]
    63f0:	1ad2      	subs	r2, r2, r3
    63f2:	08d2      	lsrs	r2, r2, #3
    63f4:	0192      	lsls	r2, r2, #6
    63f6:	4828      	ldr	r0, [pc, #160]	; (6498 <bt_hci_host_num_completed_packets+0xd4>)
    63f8:	f042 0202 	orr.w	r2, r2, #2
}
    63fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    6400:	f011 bd71 	b.w	17ee6 <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
    6404:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    6406:	2b01      	cmp	r3, #1
    6408:	d002      	beq.n	6410 <bt_hci_host_num_completed_packets+0x4c>
    640a:	3b07      	subs	r3, #7
    640c:	2b01      	cmp	r3, #1
    640e:	d815      	bhi.n	643c <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
    6410:	4628      	mov	r0, r5
    6412:	f013 fc60 	bl	19cd6 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    6416:	2105      	movs	r1, #5
    6418:	f640 4035 	movw	r0, #3125	; 0xc35
    641c:	f7ff fa0c 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    6420:	4604      	mov	r4, r0
    6422:	b9d0      	cbnz	r0, 645a <bt_hci_host_num_completed_packets+0x96>
    6424:	4b1a      	ldr	r3, [pc, #104]	; (6490 <bt_hci_host_num_completed_packets+0xcc>)
    6426:	491b      	ldr	r1, [pc, #108]	; (6494 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
    6428:	481c      	ldr	r0, [pc, #112]	; (649c <bt_hci_host_num_completed_packets+0xd8>)
    642a:	1ac9      	subs	r1, r1, r3
    642c:	08c9      	lsrs	r1, r1, #3
    642e:	0189      	lsls	r1, r1, #6
    6430:	f041 0101 	orr.w	r1, r1, #1
}
    6434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    6438:	f011 bd48 	b.w	17ecc <log_0>
    643c:	4b14      	ldr	r3, [pc, #80]	; (6490 <bt_hci_host_num_completed_packets+0xcc>)
    643e:	4915      	ldr	r1, [pc, #84]	; (6494 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
    6440:	4817      	ldr	r0, [pc, #92]	; (64a0 <bt_hci_host_num_completed_packets+0xdc>)
    6442:	1ac9      	subs	r1, r1, r3
    6444:	08c9      	lsrs	r1, r1, #3
    6446:	0189      	lsls	r1, r1, #6
    6448:	f041 0102 	orr.w	r1, r1, #2
    644c:	f011 fd3e 	bl	17ecc <log_0>
		bt_conn_unref(conn);
    6450:	4628      	mov	r0, r5
}
    6452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    6456:	f013 bc3e 	b.w	19cd6 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    645a:	f100 0708 	add.w	r7, r0, #8
    645e:	2101      	movs	r1, #1
    6460:	4638      	mov	r0, r7
    6462:	f015 f994 	bl	1b78e <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    6466:	2501      	movs	r5, #1
    6468:	2104      	movs	r1, #4
    646a:	7005      	strb	r5, [r0, #0]
    646c:	4638      	mov	r0, r7
    646e:	f015 f98e 	bl	1b78e <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    6472:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    6474:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    6476:	7085      	strb	r5, [r0, #2]
    6478:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    647a:	4621      	mov	r1, r4
}
    647c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    6480:	f640 4035 	movw	r0, #3125	; 0xc35
    6484:	f7ff bf6c 	b.w	6360 <bt_hci_cmd_send>
}
    6488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    648a:	bf00      	nop
    648c:	20000000 	.word	0x20000000
    6490:	000232ec 	.word	0x000232ec
    6494:	00023314 	.word	0x00023314
    6498:	000258e0 	.word	0x000258e0
    649c:	00025935 	.word	0x00025935
    64a0:	00025909 	.word	0x00025909

000064a4 <le_ltk_request>:
{
    64a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    64a6:	6885      	ldr	r5, [r0, #8]
{
    64a8:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    64aa:	882e      	ldrh	r6, [r5, #0]
    64ac:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    64ae:	4638      	mov	r0, r7
    64b0:	f001 fab6 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    64b4:	4604      	mov	r4, r0
    64b6:	b960      	cbnz	r0, 64d2 <le_ltk_request+0x2e>
    64b8:	4a26      	ldr	r2, [pc, #152]	; (6554 <le_ltk_request+0xb0>)
    64ba:	4b27      	ldr	r3, [pc, #156]	; (6558 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    64bc:	4639      	mov	r1, r7
    64be:	1ad2      	subs	r2, r2, r3
    64c0:	08d2      	lsrs	r2, r2, #3
    64c2:	0192      	lsls	r2, r2, #6
    64c4:	4825      	ldr	r0, [pc, #148]	; (655c <le_ltk_request+0xb8>)
    64c6:	f042 0201 	orr.w	r2, r2, #1
    64ca:	f011 fd0c 	bl	17ee6 <log_1>
}
    64ce:	b007      	add	sp, #28
    64d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    64d2:	af02      	add	r7, sp, #8
    64d4:	f8d5 2002 	ldr.w	r2, [r5, #2]
    64d8:	f8d5 3006 	ldr.w	r3, [r5, #6]
    64dc:	9701      	str	r7, [sp, #4]
    64de:	8969      	ldrh	r1, [r5, #10]
    64e0:	9100      	str	r1, [sp, #0]
    64e2:	f014 ffc0 	bl	1b466 <bt_smp_request_ltk>
    64e6:	b320      	cbz	r0, 6532 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    64e8:	2112      	movs	r1, #18
    64ea:	f242 001a 	movw	r0, #8218	; 0x201a
    64ee:	f7ff f9a3 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    64f2:	4605      	mov	r5, r0
    64f4:	b968      	cbnz	r0, 6512 <le_ltk_request+0x6e>
    64f6:	4917      	ldr	r1, [pc, #92]	; (6554 <le_ltk_request+0xb0>)
    64f8:	4b17      	ldr	r3, [pc, #92]	; (6558 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    64fa:	4819      	ldr	r0, [pc, #100]	; (6560 <le_ltk_request+0xbc>)
    64fc:	1ac9      	subs	r1, r1, r3
    64fe:	08c9      	lsrs	r1, r1, #3
    6500:	0189      	lsls	r1, r1, #6
    6502:	f041 0101 	orr.w	r1, r1, #1
    6506:	f011 fce1 	bl	17ecc <log_0>
	bt_conn_unref(conn);
    650a:	4620      	mov	r0, r4
    650c:	f013 fbe3 	bl	19cd6 <bt_conn_unref>
    6510:	e7dd      	b.n	64ce <le_ltk_request+0x2a>
    6512:	2112      	movs	r1, #18
    6514:	3008      	adds	r0, #8
    6516:	f015 f93a 	bl	1b78e <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    651a:	4639      	mov	r1, r7
    651c:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    651e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    6522:	f012 fe71 	bl	19208 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6526:	4629      	mov	r1, r5
    6528:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    652c:	f7ff ff18 	bl	6360 <bt_hci_cmd_send>
    6530:	e7eb      	b.n	650a <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    6532:	2102      	movs	r1, #2
    6534:	f242 001b 	movw	r0, #8219	; 0x201b
    6538:	f7ff f97e 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    653c:	4605      	mov	r5, r0
    653e:	2800      	cmp	r0, #0
    6540:	d0d9      	beq.n	64f6 <le_ltk_request+0x52>
    6542:	2102      	movs	r1, #2
    6544:	3008      	adds	r0, #8
    6546:	f015 f922 	bl	1b78e <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    654a:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    654c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    654e:	f242 001b 	movw	r0, #8219	; 0x201b
    6552:	e7eb      	b.n	652c <le_ltk_request+0x88>
    6554:	00023314 	.word	0x00023314
    6558:	000232ec 	.word	0x000232ec
    655c:	000254cc 	.word	0x000254cc
    6560:	00025958 	.word	0x00025958

00006564 <conn_auto_initiate>:
{
    6564:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6566:	7b43      	ldrb	r3, [r0, #13]
{
    6568:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    656a:	2b07      	cmp	r3, #7
    656c:	d149      	bne.n	6602 <conn_auto_initiate+0x9e>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    656e:	1d06      	adds	r6, r0, #4
    6570:	4630      	mov	r0, r6
    6572:	f013 f8b1 	bl	196d8 <atomic_get>
    6576:	0480      	lsls	r0, r0, #18
    6578:	d41b      	bmi.n	65b2 <conn_auto_initiate+0x4e>
    657a:	78e3      	ldrb	r3, [r4, #3]
    657c:	b123      	cbz	r3, 6588 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    657e:	4b22      	ldr	r3, [pc, #136]	; (6608 <conn_auto_initiate+0xa4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    6580:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    6584:	0719      	lsls	r1, r3, #28
    6586:	d514      	bpl.n	65b2 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6588:	2102      	movs	r1, #2
    658a:	f242 0016 	movw	r0, #8214	; 0x2016
    658e:	f7ff f953 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    6592:	4605      	mov	r5, r0
    6594:	b168      	cbz	r0, 65b2 <conn_auto_initiate+0x4e>
    6596:	2102      	movs	r1, #2
    6598:	3008      	adds	r0, #8
    659a:	f015 f8f8 	bl	1b78e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    659e:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    65a0:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    65a2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    65a4:	f242 0016 	movw	r0, #8214	; 0x2016
}
    65a8:	b002      	add	sp, #8
    65aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    65ae:	f7ff bed7 	b.w	6360 <bt_hci_cmd_send>
    65b2:	4630      	mov	r0, r6
    65b4:	f013 f890 	bl	196d8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    65b8:	04c2      	lsls	r2, r0, #19
    65ba:	f3c0 3100 	ubfx	r1, r0, #12, #1
    65be:	d420      	bmi.n	6602 <conn_auto_initiate+0x9e>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    65c0:	4b11      	ldr	r3, [pc, #68]	; (6608 <conn_auto_initiate+0xa4>)
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    65c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
    65c6:	07db      	lsls	r3, r3, #31
    65c8:	d51b      	bpl.n	6602 <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    65ca:	2302      	movs	r3, #2
    65cc:	9100      	str	r1, [sp, #0]
    65ce:	461a      	mov	r2, r3
    65d0:	4620      	mov	r0, r4
    65d2:	f013 f9c1 	bl	19958 <bt_le_set_phy>
		if (!err) {
    65d6:	4601      	mov	r1, r0
    65d8:	b930      	cbnz	r0, 65e8 <conn_auto_initiate+0x84>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    65da:	2180      	movs	r1, #128	; 0x80
    65dc:	4630      	mov	r0, r6
}
    65de:	b002      	add	sp, #8
    65e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65e4:	f013 b88c 	b.w	19700 <atomic_or>
    65e8:	4b08      	ldr	r3, [pc, #32]	; (660c <conn_auto_initiate+0xa8>)
    65ea:	4a09      	ldr	r2, [pc, #36]	; (6610 <conn_auto_initiate+0xac>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    65ec:	4809      	ldr	r0, [pc, #36]	; (6614 <conn_auto_initiate+0xb0>)
    65ee:	1ad2      	subs	r2, r2, r3
    65f0:	08d2      	lsrs	r2, r2, #3
    65f2:	0192      	lsls	r2, r2, #6
    65f4:	f042 0201 	orr.w	r2, r2, #1
}
    65f8:	b002      	add	sp, #8
    65fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Failed to set LE PHY (%d)", err);
    65fe:	f011 bc72 	b.w	17ee6 <log_1>
}
    6602:	b002      	add	sp, #8
    6604:	bd70      	pop	{r4, r5, r6, pc}
    6606:	bf00      	nop
    6608:	20000000 	.word	0x20000000
    660c:	000232ec 	.word	0x000232ec
    6610:	00023314 	.word	0x00023314
    6614:	0002596f 	.word	0x0002596f

00006618 <le_phy_update_complete>:
{
    6618:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    661a:	6883      	ldr	r3, [r0, #8]
    661c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    6620:	4628      	mov	r0, r5
    6622:	f001 f9fd 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    6626:	4604      	mov	r4, r0
    6628:	b960      	cbnz	r0, 6644 <le_phy_update_complete+0x2c>
    662a:	4b11      	ldr	r3, [pc, #68]	; (6670 <le_phy_update_complete+0x58>)
    662c:	4a11      	ldr	r2, [pc, #68]	; (6674 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    662e:	4629      	mov	r1, r5
    6630:	1ad2      	subs	r2, r2, r3
    6632:	08d2      	lsrs	r2, r2, #3
    6634:	0192      	lsls	r2, r2, #6
    6636:	4810      	ldr	r0, [pc, #64]	; (6678 <le_phy_update_complete+0x60>)
    6638:	f042 0201 	orr.w	r2, r2, #1
}
    663c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6640:	f011 bc51 	b.w	17ee6 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    6644:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6646:	f06f 0180 	mvn.w	r1, #128	; 0x80
    664a:	4628      	mov	r0, r5
    664c:	f013 f84d 	bl	196ea <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6650:	0603      	lsls	r3, r0, #24
    6652:	d507      	bpl.n	6664 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6658:	4628      	mov	r0, r5
    665a:	f013 f851 	bl	19700 <atomic_or>
		conn_auto_initiate(conn);
    665e:	4620      	mov	r0, r4
    6660:	f7ff ff80 	bl	6564 <conn_auto_initiate>
	bt_conn_unref(conn);
    6664:	4620      	mov	r0, r4
}
    6666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    666a:	f013 bb34 	b.w	19cd6 <bt_conn_unref>
    666e:	bf00      	nop
    6670:	000232ec 	.word	0x000232ec
    6674:	00023314 	.word	0x00023314
    6678:	000254cc 	.word	0x000254cc

0000667c <le_remote_feat_complete>:
{
    667c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    667e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6680:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6684:	4630      	mov	r0, r6
    6686:	f001 f9cb 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    668a:	4604      	mov	r4, r0
    668c:	b960      	cbnz	r0, 66a8 <le_remote_feat_complete+0x2c>
    668e:	4a10      	ldr	r2, [pc, #64]	; (66d0 <le_remote_feat_complete+0x54>)
    6690:	4b10      	ldr	r3, [pc, #64]	; (66d4 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6692:	4631      	mov	r1, r6
}
    6694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6698:	1ad2      	subs	r2, r2, r3
    669a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    669c:	0192      	lsls	r2, r2, #6
    669e:	480e      	ldr	r0, [pc, #56]	; (66d8 <le_remote_feat_complete+0x5c>)
    66a0:	f042 0201 	orr.w	r2, r2, #1
    66a4:	f011 bc1f 	b.w	17ee6 <log_1>
	if (!evt->status) {
    66a8:	782b      	ldrb	r3, [r5, #0]
    66aa:	b923      	cbnz	r3, 66b6 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    66ac:	2208      	movs	r2, #8
    66ae:	1ce9      	adds	r1, r5, #3
    66b0:	30ac      	adds	r0, #172	; 0xac
    66b2:	f012 fda9 	bl	19208 <memcpy>
    66b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    66ba:	1d20      	adds	r0, r4, #4
    66bc:	f013 f820 	bl	19700 <atomic_or>
	conn_auto_initiate(conn);
    66c0:	4620      	mov	r0, r4
    66c2:	f7ff ff4f 	bl	6564 <conn_auto_initiate>
	bt_conn_unref(conn);
    66c6:	4620      	mov	r0, r4
}
    66c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    66cc:	f013 bb03 	b.w	19cd6 <bt_conn_unref>
    66d0:	00023314 	.word	0x00023314
    66d4:	000232ec 	.word	0x000232ec
    66d8:	000254cc 	.word	0x000254cc

000066dc <enh_conn_complete>:
{
    66dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    66e0:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    66e4:	4605      	mov	r5, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    66e6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    66ea:	4868      	ldr	r0, [pc, #416]	; (688c <enh_conn_complete+0x1b0>)
    66ec:	f012 fffd 	bl	196ea <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    66f0:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    66f2:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    66f6:	d504      	bpl.n	6702 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    66f8:	2200      	movs	r2, #0
    66fa:	2002      	movs	r0, #2
    66fc:	4964      	ldr	r1, [pc, #400]	; (6890 <enh_conn_complete+0x1b4>)
    66fe:	f005 ffcf 	bl	c6a0 <bt_keys_foreach>
	if (evt->status) {
    6702:	782c      	ldrb	r4, [r5, #0]
    6704:	b3ac      	cbz	r4, 6772 <enh_conn_complete+0x96>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6706:	2c02      	cmp	r4, #2
    6708:	d127      	bne.n	675a <enh_conn_complete+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    670a:	2100      	movs	r1, #0
    670c:	2206      	movs	r2, #6
    670e:	4608      	mov	r0, r1
    6710:	f001 faea 	bl	7ce8 <bt_conn_lookup_state_le>
	if (!conn) {
    6714:	4605      	mov	r5, r0
    6716:	b978      	cbnz	r0, 6738 <enh_conn_complete+0x5c>
    6718:	495e      	ldr	r1, [pc, #376]	; (6894 <enh_conn_complete+0x1b8>)
    671a:	4b5f      	ldr	r3, [pc, #380]	; (6898 <enh_conn_complete+0x1bc>)
		BT_ERR("No pending master connection");
    671c:	485f      	ldr	r0, [pc, #380]	; (689c <enh_conn_complete+0x1c0>)
    671e:	1ac9      	subs	r1, r1, r3
    6720:	08c9      	lsrs	r1, r1, #3
    6722:	0189      	lsls	r1, r1, #6
    6724:	f041 0101 	orr.w	r1, r1, #1
    6728:	f011 fbd0 	bl	17ecc <log_0>
			bt_le_scan_update(false);
    672c:	2000      	movs	r0, #0
    672e:	f7ff fc5b 	bl	5fe8 <bt_le_scan_update>
}
    6732:	b004      	add	sp, #16
    6734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6738:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    673a:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    673c:	f001 f97c 	bl	7a38 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6740:	1d28      	adds	r0, r5, #4
    6742:	f012 ffc9 	bl	196d8 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    6746:	07c3      	lsls	r3, r0, #31
    6748:	d503      	bpl.n	6752 <enh_conn_complete+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    674a:	4621      	mov	r1, r4
    674c:	4628      	mov	r0, r5
    674e:	f001 f973 	bl	7a38 <bt_conn_set_state>
	bt_conn_unref(conn);
    6752:	4628      	mov	r0, r5
    6754:	f013 fabf 	bl	19cd6 <bt_conn_unref>
    6758:	e7e8      	b.n	672c <enh_conn_complete+0x50>
    675a:	4b4f      	ldr	r3, [pc, #316]	; (6898 <enh_conn_complete+0x1bc>)
    675c:	4a4d      	ldr	r2, [pc, #308]	; (6894 <enh_conn_complete+0x1b8>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    675e:	4621      	mov	r1, r4
    6760:	1ad2      	subs	r2, r2, r3
    6762:	08d2      	lsrs	r2, r2, #3
    6764:	0192      	lsls	r2, r2, #6
    6766:	484e      	ldr	r0, [pc, #312]	; (68a0 <enh_conn_complete+0x1c4>)
    6768:	f042 0202 	orr.w	r2, r2, #2
    676c:	f011 fbbb 	bl	17ee6 <log_1>
		return;
    6770:	e7df      	b.n	6732 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6772:	792b      	ldrb	r3, [r5, #4]
    6774:	1d2e      	adds	r6, r5, #4
    6776:	3b02      	subs	r3, #2
    6778:	2b01      	cmp	r3, #1
    677a:	d837      	bhi.n	67ec <enh_conn_complete+0x110>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    677c:	4631      	mov	r1, r6
    677e:	a802      	add	r0, sp, #8
    6780:	f012 ffad 	bl	196de <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6784:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6788:	2206      	movs	r2, #6
    678a:	3b02      	subs	r3, #2
    678c:	f105 0111 	add.w	r1, r5, #17
    6790:	f10d 0001 	add.w	r0, sp, #1
    6794:	f88d 3008 	strb.w	r3, [sp, #8]
    6798:	f012 fd36 	bl	19208 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    679c:	2301      	movs	r3, #1
    679e:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    67a2:	78e8      	ldrb	r0, [r5, #3]
    67a4:	b960      	cbnz	r0, 67c0 <enh_conn_complete+0xe4>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    67a6:	2206      	movs	r2, #6
    67a8:	a902      	add	r1, sp, #8
    67aa:	f001 fa9d 	bl	7ce8 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    67ae:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    67b0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    67b2:	b923      	cbnz	r3, 67be <enh_conn_complete+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    67b4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    67b8:	4834      	ldr	r0, [pc, #208]	; (688c <enh_conn_complete+0x1b0>)
    67ba:	f012 ff96 	bl	196ea <atomic_and>
	if (!conn) {
    67be:	bb44      	cbnz	r4, 6812 <enh_conn_complete+0x136>
    67c0:	4a35      	ldr	r2, [pc, #212]	; (6898 <enh_conn_complete+0x1bc>)
    67c2:	4c34      	ldr	r4, [pc, #208]	; (6894 <enh_conn_complete+0x1b8>)
		BT_ERR("No pending conn for peer %s",
    67c4:	4630      	mov	r0, r6
    67c6:	1aa4      	subs	r4, r4, r2
    67c8:	f7fe fb00 	bl	4dcc <bt_addr_le_str_real>
    67cc:	f7fb fcf0 	bl	21b0 <log_strdup>
    67d0:	08e4      	lsrs	r4, r4, #3
    67d2:	01a4      	lsls	r4, r4, #6
    67d4:	f044 0401 	orr.w	r4, r4, #1
    67d8:	4601      	mov	r1, r0
    67da:	4622      	mov	r2, r4
    67dc:	4831      	ldr	r0, [pc, #196]	; (68a4 <enh_conn_complete+0x1c8>)
    67de:	f011 fb82 	bl	17ee6 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    67e2:	211f      	movs	r1, #31
    67e4:	4638      	mov	r0, r7
    67e6:	f013 f84f 	bl	19888 <bt_hci_disconnect>
		return;
    67ea:	e7a2      	b.n	6732 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    67ec:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
    67ee:	4631      	mov	r1, r6
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    67f0:	2b01      	cmp	r3, #1
    67f2:	bf04      	itt	eq
    67f4:	4b2c      	ldreq	r3, [pc, #176]	; (68a8 <enh_conn_complete+0x1cc>)
    67f6:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    67fa:	4620      	mov	r0, r4
    67fc:	f013 f838 	bl	19870 <bt_lookup_id_addr>
    6800:	4601      	mov	r1, r0
    6802:	a802      	add	r0, sp, #8
    6804:	f012 ff6b 	bl	196de <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    6808:	4631      	mov	r1, r6
    680a:	4668      	mov	r0, sp
    680c:	f012 ff67 	bl	196de <bt_addr_le_copy>
    6810:	e7c7      	b.n	67a2 <enh_conn_complete+0xc6>
	conn->handle = handle;
    6812:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6814:	a902      	add	r1, sp, #8
	conn->handle = handle;
    6816:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    681a:	f012 ff60 	bl	196de <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    681e:	7e2a      	ldrb	r2, [r5, #24]
    6820:	7deb      	ldrb	r3, [r5, #23]
    6822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6826:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    682a:	7eaa      	ldrb	r2, [r5, #26]
    682c:	7e6b      	ldrb	r3, [r5, #25]
    682e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6832:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6836:	7f2a      	ldrb	r2, [r5, #28]
    6838:	7eeb      	ldrb	r3, [r5, #27]
    683a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
    683e:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6840:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    6844:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    6846:	7322      	strb	r2, [r4, #12]
	conn->le.data_len.tx_max_len = BT_GAP_DATA_LEN_DEFAULT;
    6848:	4a18      	ldr	r2, [pc, #96]	; (68ac <enh_conn_complete+0x1d0>)
	conn->role = evt->role;
    684a:	70e3      	strb	r3, [r4, #3]
	conn->le.data_len.rx_max_len = BT_GAP_DATA_LEN_DEFAULT;
    684c:	e9c4 222e 	strd	r2, r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6850:	b96b      	cbnz	r3, 686e <enh_conn_complete+0x192>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    6852:	4669      	mov	r1, sp
    6854:	f104 0096 	add.w	r0, r4, #150	; 0x96
    6858:	f012 ff41 	bl	196de <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    685c:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    685e:	4b12      	ldr	r3, [pc, #72]	; (68a8 <enh_conn_complete+0x1cc>)
					&bt_dev.id_addr[conn->id]);
    6860:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    6864:	4419      	add	r1, r3
    6866:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    686a:	f012 ff38 	bl	196de <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    686e:	2107      	movs	r1, #7
    6870:	4620      	mov	r0, r4
    6872:	f001 f8e1 	bl	7a38 <bt_conn_set_state>
	conn_auto_initiate(conn);
    6876:	4620      	mov	r0, r4
    6878:	f7ff fe74 	bl	6564 <conn_auto_initiate>
	bt_conn_unref(conn);
    687c:	4620      	mov	r0, r4
    687e:	f013 fa2a 	bl	19cd6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6882:	78e3      	ldrb	r3, [r4, #3]
    6884:	2b00      	cmp	r3, #0
    6886:	f47f af54 	bne.w	6732 <enh_conn_complete+0x56>
    688a:	e74f      	b.n	672c <enh_conn_complete+0x50>
    688c:	20000094 	.word	0x20000094
    6890:	000198ff 	.word	0x000198ff
    6894:	00023314 	.word	0x00023314
    6898:	000232ec 	.word	0x000232ec
    689c:	00025989 	.word	0x00025989
    68a0:	000259a6 	.word	0x000259a6
    68a4:	000259bf 	.word	0x000259bf
    68a8:	20000000 	.word	0x20000000
    68ac:	0148001b 	.word	0x0148001b

000068b0 <le_conn_param_neg_reply>:
{
    68b0:	b570      	push	{r4, r5, r6, lr}
    68b2:	4606      	mov	r6, r0
    68b4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    68b6:	f242 0021 	movw	r0, #8225	; 0x2021
    68ba:	2103      	movs	r1, #3
    68bc:	f7fe ffbc 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    68c0:	4604      	mov	r4, r0
    68c2:	b958      	cbnz	r0, 68dc <le_conn_param_neg_reply+0x2c>
}
    68c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    68c8:	490b      	ldr	r1, [pc, #44]	; (68f8 <le_conn_param_neg_reply+0x48>)
    68ca:	4b0c      	ldr	r3, [pc, #48]	; (68fc <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    68cc:	480c      	ldr	r0, [pc, #48]	; (6900 <le_conn_param_neg_reply+0x50>)
    68ce:	1ac9      	subs	r1, r1, r3
    68d0:	08c9      	lsrs	r1, r1, #3
    68d2:	0189      	lsls	r1, r1, #6
    68d4:	f041 0101 	orr.w	r1, r1, #1
    68d8:	f011 baf8 	b.w	17ecc <log_0>
    68dc:	2103      	movs	r1, #3
    68de:	3008      	adds	r0, #8
    68e0:	f014 ff55 	bl	1b78e <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    68e4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    68e6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    68e8:	4621      	mov	r1, r4
}
    68ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    68ee:	f242 0021 	movw	r0, #8225	; 0x2021
    68f2:	f7ff bd35 	b.w	6360 <bt_hci_cmd_send>
    68f6:	bf00      	nop
    68f8:	00023314 	.word	0x00023314
    68fc:	000232ec 	.word	0x000232ec
    6900:	000259db 	.word	0x000259db

00006904 <le_conn_param_req>:
{
    6904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6906:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6908:	78d9      	ldrb	r1, [r3, #3]
    690a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    690c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    690e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6912:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6916:	7959      	ldrb	r1, [r3, #5]
    6918:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    691a:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    691c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6920:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6924:	799a      	ldrb	r2, [r3, #6]
    6926:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    6928:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    692a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    692e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6932:	7a1a      	ldrb	r2, [r3, #8]
    6934:	7a5b      	ldrb	r3, [r3, #9]
    6936:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    693a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    693e:	f001 f86f 	bl	7a20 <bt_conn_lookup_handle>
	if (!conn) {
    6942:	4606      	mov	r6, r0
    6944:	b980      	cbnz	r0, 6968 <le_conn_param_req+0x64>
    6946:	4b20      	ldr	r3, [pc, #128]	; (69c8 <le_conn_param_req+0xc4>)
    6948:	4a20      	ldr	r2, [pc, #128]	; (69cc <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    694a:	4621      	mov	r1, r4
    694c:	1ad2      	subs	r2, r2, r3
    694e:	08d2      	lsrs	r2, r2, #3
    6950:	0192      	lsls	r2, r2, #6
    6952:	481f      	ldr	r0, [pc, #124]	; (69d0 <le_conn_param_req+0xcc>)
    6954:	f042 0201 	orr.w	r2, r2, #1
    6958:	f011 fac5 	bl	17ee6 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    695c:	2102      	movs	r1, #2
    695e:	4620      	mov	r0, r4
    6960:	f7ff ffa6 	bl	68b0 <le_conn_param_neg_reply>
}
    6964:	b003      	add	sp, #12
    6966:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6968:	4669      	mov	r1, sp
    696a:	f000 fe81 	bl	7670 <le_param_req>
    696e:	b938      	cbnz	r0, 6980 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6970:	211e      	movs	r1, #30
    6972:	4620      	mov	r0, r4
    6974:	f7ff ff9c 	bl	68b0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6978:	4630      	mov	r0, r6
    697a:	f013 f9ac 	bl	19cd6 <bt_conn_unref>
    697e:	e7f1      	b.n	6964 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6980:	210e      	movs	r1, #14
    6982:	f242 0020 	movw	r0, #8224	; 0x2020
    6986:	f7fe ff57 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    698a:	4605      	mov	r5, r0
    698c:	2800      	cmp	r0, #0
    698e:	d0f3      	beq.n	6978 <le_conn_param_req+0x74>
    6990:	210e      	movs	r1, #14
    6992:	3008      	adds	r0, #8
    6994:	f014 fefb 	bl	1b78e <net_buf_simple_add>
    6998:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    699a:	220e      	movs	r2, #14
    699c:	2100      	movs	r1, #0
    699e:	f012 fc5e 	bl	1925e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    69a2:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69a6:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    69a8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    69aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    69ae:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    69b0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    69b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69b6:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    69ba:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    69bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69c0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    69c2:	f7ff fccd 	bl	6360 <bt_hci_cmd_send>
    69c6:	e7d7      	b.n	6978 <le_conn_param_req+0x74>
    69c8:	000232ec 	.word	0x000232ec
    69cc:	00023314 	.word	0x00023314
    69d0:	000254cc 	.word	0x000254cc

000069d4 <hci_tx_thread>:
{
    69d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69d8:	4d51      	ldr	r5, [pc, #324]	; (6b20 <hci_tx_thread+0x14c>)
    69da:	4b52      	ldr	r3, [pc, #328]	; (6b24 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    69dc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6b2c <hci_tx_thread+0x158>
    69e0:	1aed      	subs	r5, r5, r3
		BT_ASSERT(err == 0);
    69e2:	f8df a174 	ldr.w	sl, [pc, #372]	; 6b58 <hci_tx_thread+0x184>
    69e6:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    69e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    69ec:	484e      	ldr	r0, [pc, #312]	; (6b28 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    69ee:	f36f 3310 	bfc	r3, #12, #5
    69f2:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    69f6:	f000 ffab 	bl	7950 <bt_conn_prepare_events>
    69fa:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    69fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a04:	4639      	mov	r1, r7
    6a06:	4849      	ldr	r0, [pc, #292]	; (6b2c <hci_tx_thread+0x158>)
    6a08:	f010 fbe8 	bl	171dc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6a0c:	b160      	cbz	r0, 6a28 <hci_tx_thread+0x54>
    6a0e:	f241 4371 	movw	r3, #5233	; 0x1471
    6a12:	4652      	mov	r2, sl
    6a14:	4946      	ldr	r1, [pc, #280]	; (6b30 <hci_tx_thread+0x15c>)
    6a16:	4847      	ldr	r0, [pc, #284]	; (6b34 <hci_tx_thread+0x160>)
    6a18:	f010 fe31 	bl	1767e <printk>
    6a1c:	4040      	eors	r0, r0
    6a1e:	f380 8811 	msr	BASEPRI, r0
    6a22:	f04f 0003 	mov.w	r0, #3
    6a26:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6a28:	4e43      	ldr	r6, [pc, #268]	; (6b38 <hci_tx_thread+0x164>)
{
    6a2a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6b2c <hci_tx_thread+0x158>
    6a2e:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    6a32:	b917      	cbnz	r7, 6a3a <hci_tx_thread+0x66>
	z_impl_k_yield();
    6a34:	f00f ff80 	bl	16938 <z_impl_k_yield>
	while (1) {
    6a38:	e7d6      	b.n	69e8 <hci_tx_thread+0x14>
		switch (ev->state) {
    6a3a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6a3e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6a42:	2901      	cmp	r1, #1
    6a44:	d959      	bls.n	6afa <hci_tx_thread+0x126>
    6a46:	2904      	cmp	r1, #4
    6a48:	d163      	bne.n	6b12 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6a4a:	f898 300c 	ldrb.w	r3, [r8, #12]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d157      	bne.n	6b02 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6a52:	2200      	movs	r2, #0
    6a54:	2300      	movs	r3, #0
    6a56:	4839      	ldr	r0, [pc, #228]	; (6b3c <hci_tx_thread+0x168>)
    6a58:	f014 fe42 	bl	1b6e0 <net_buf_get>
	BT_ASSERT(buf);
    6a5c:	4604      	mov	r4, r0
    6a5e:	b960      	cbnz	r0, 6a7a <hci_tx_thread+0xa6>
    6a60:	f241 430e 	movw	r3, #5134	; 0x140e
    6a64:	4652      	mov	r2, sl
    6a66:	4936      	ldr	r1, [pc, #216]	; (6b40 <hci_tx_thread+0x16c>)
    6a68:	4832      	ldr	r0, [pc, #200]	; (6b34 <hci_tx_thread+0x160>)
    6a6a:	f010 fe08 	bl	1767e <printk>
    6a6e:	4040      	eors	r0, r0
    6a70:	f380 8811 	msr	BASEPRI, r0
    6a74:	f04f 0003 	mov.w	r0, #3
    6a78:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a82:	4658      	mov	r0, fp
    6a84:	f00f fff4 	bl	16a70 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6a88:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    6a8c:	b163      	cbz	r3, 6aa8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    6a8e:	01a9      	lsls	r1, r5, #6
    6a90:	482c      	ldr	r0, [pc, #176]	; (6b44 <hci_tx_thread+0x170>)
    6a92:	f041 0101 	orr.w	r1, r1, #1
    6a96:	f011 fa19 	bl	17ecc <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6a9a:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    6a9e:	f005 ff29 	bl	c8f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6aa2:	2300      	movs	r3, #0
    6aa4:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    6aa8:	4620      	mov	r0, r4
    6aaa:	f014 fe4a 	bl	1b742 <net_buf_ref>
    6aae:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    6ab2:	4620      	mov	r0, r4
    6ab4:	f7ff fc4c 	bl	6350 <bt_send>
	if (err) {
    6ab8:	4601      	mov	r1, r0
    6aba:	b1f0      	cbz	r0, 6afa <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6abc:	01aa      	lsls	r2, r5, #6
    6abe:	4822      	ldr	r0, [pc, #136]	; (6b48 <hci_tx_thread+0x174>)
    6ac0:	f042 0201 	orr.w	r2, r2, #1
    6ac4:	f011 fa0f 	bl	17ee6 <log_1>
	z_impl_k_sem_give(sem);
    6ac8:	4820      	ldr	r0, [pc, #128]	; (6b4c <hci_tx_thread+0x178>)
    6aca:	f00f ffab 	bl	16a24 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6ace:	4620      	mov	r0, r4
    6ad0:	f005 fe5c 	bl	c78c <net_buf_id>
    6ad4:	220c      	movs	r2, #12
    6ad6:	4b1e      	ldr	r3, [pc, #120]	; (6b50 <hci_tx_thread+0x17c>)
    6ad8:	211f      	movs	r1, #31
    6ada:	fb02 3000 	mla	r0, r2, r0, r3
    6ade:	4622      	mov	r2, r4
    6ae0:	8840      	ldrh	r0, [r0, #2]
    6ae2:	f7fe fc39 	bl	5358 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6ae6:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    6aea:	f005 ff03 	bl	c8f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6aee:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6af0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6af2:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    6af6:	f005 fefd 	bl	c8f4 <net_buf_unref>
	for (; count; ev++, count--) {
    6afa:	f108 0814 	add.w	r8, r8, #20
    6afe:	3f01      	subs	r7, #1
    6b00:	e797      	b.n	6a32 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6b02:	2b01      	cmp	r3, #1
    6b04:	d1f9      	bne.n	6afa <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    6b06:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    6b0a:	3834      	subs	r0, #52	; 0x34
    6b0c:	f001 fb4c 	bl	81a8 <bt_conn_process_tx>
    6b10:	e7f3      	b.n	6afa <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6b12:	01aa      	lsls	r2, r5, #6
    6b14:	480f      	ldr	r0, [pc, #60]	; (6b54 <hci_tx_thread+0x180>)
    6b16:	f042 0202 	orr.w	r2, r2, #2
    6b1a:	f011 f9e4 	bl	17ee6 <log_1>
    6b1e:	e7ec      	b.n	6afa <hci_tx_thread+0x126>
    6b20:	00023314 	.word	0x00023314
    6b24:	000232ec 	.word	0x000232ec
    6b28:	20000220 	.word	0x20000220
    6b2c:	2000020c 	.word	0x2000020c
    6b30:	000256e7 	.word	0x000256e7
    6b34:	0002560f 	.word	0x0002560f
    6b38:	20000000 	.word	0x20000000
    6b3c:	2000011c 	.word	0x2000011c
    6b40:	00025341 	.word	0x00025341
    6b44:	000259f5 	.word	0x000259f5
    6b48:	000258be 	.word	0x000258be
    6b4c:	200000e8 	.word	0x200000e8
    6b50:	200259e0 	.word	0x200259e0
    6b54:	00025a10 	.word	0x00025a10
    6b58:	000255c2 	.word	0x000255c2

00006b5c <hci_event_prio>:
{
    6b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b60:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    6b62:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6b66:	4630      	mov	r0, r6
    6b68:	f014 fe63 	bl	1b832 <net_buf_simple_headroom>
	state->len = buf->len;
    6b6c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6b70:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6b72:	f1b8 0f01 	cmp.w	r8, #1
    6b76:	d80c      	bhi.n	6b92 <hci_event_prio+0x36>
    6b78:	f641 03ae 	movw	r3, #6318	; 0x18ae
    6b7c:	4a1b      	ldr	r2, [pc, #108]	; (6bec <hci_event_prio+0x90>)
    6b7e:	491c      	ldr	r1, [pc, #112]	; (6bf0 <hci_event_prio+0x94>)
    6b80:	481c      	ldr	r0, [pc, #112]	; (6bf4 <hci_event_prio+0x98>)
    6b82:	f010 fd7c 	bl	1767e <printk>
    6b86:	4040      	eors	r0, r0
    6b88:	f380 8811 	msr	BASEPRI, r0
    6b8c:	f04f 0003 	mov.w	r0, #3
    6b90:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6b92:	2102      	movs	r1, #2
    6b94:	4630      	mov	r0, r6
    6b96:	f014 fe34 	bl	1b802 <net_buf_simple_pull_mem>
    6b9a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6b9c:	7800      	ldrb	r0, [r0, #0]
    6b9e:	f012 fd89 	bl	196b4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6ba2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6ba4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6ba6:	d40c      	bmi.n	6bc2 <hci_event_prio+0x66>
    6ba8:	f641 03b2 	movw	r3, #6322	; 0x18b2
    6bac:	4a0f      	ldr	r2, [pc, #60]	; (6bec <hci_event_prio+0x90>)
    6bae:	4912      	ldr	r1, [pc, #72]	; (6bf8 <hci_event_prio+0x9c>)
    6bb0:	4810      	ldr	r0, [pc, #64]	; (6bf4 <hci_event_prio+0x98>)
    6bb2:	f010 fd64 	bl	1767e <printk>
    6bb6:	4040      	eors	r0, r0
    6bb8:	f380 8811 	msr	BASEPRI, r0
    6bbc:	f04f 0003 	mov.w	r0, #3
    6bc0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6bc2:	2305      	movs	r3, #5
    6bc4:	4621      	mov	r1, r4
    6bc6:	4a0d      	ldr	r2, [pc, #52]	; (6bfc <hci_event_prio+0xa0>)
    6bc8:	7838      	ldrb	r0, [r7, #0]
    6bca:	f7fe fc3f 	bl	544c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6bce:	07b3      	lsls	r3, r6, #30
    6bd0:	d507      	bpl.n	6be2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    6bd2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6bd4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6bd8:	fa10 f585 	uxtah	r5, r0, r5
    6bdc:	60a5      	str	r5, [r4, #8]
}
    6bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    6be2:	4620      	mov	r0, r4
}
    6be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6be8:	f005 be84 	b.w	c8f4 <net_buf_unref>
    6bec:	000255c2 	.word	0x000255c2
    6bf0:	000255f6 	.word	0x000255f6
    6bf4:	0002560f 	.word	0x0002560f
    6bf8:	00025a31 	.word	0x00025a31
    6bfc:	00023884 	.word	0x00023884

00006c00 <bt_recv>:
{
    6c00:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6c02:	7d01      	ldrb	r1, [r0, #20]
    6c04:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    6c06:	2901      	cmp	r1, #1
    6c08:	d007      	beq.n	6c1a <bt_recv+0x1a>
    6c0a:	2903      	cmp	r1, #3
    6c0c:	d113      	bne.n	6c36 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    6c0e:	4812      	ldr	r0, [pc, #72]	; (6c58 <bt_recv+0x58>)
    6c10:	4629      	mov	r1, r5
    6c12:	f014 fd89 	bl	1b728 <net_buf_put>
		return 0;
    6c16:	2000      	movs	r0, #0
    6c18:	e00c      	b.n	6c34 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6c1a:	6883      	ldr	r3, [r0, #8]
    6c1c:	7818      	ldrb	r0, [r3, #0]
    6c1e:	f012 fd49 	bl	196b4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    6c22:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6c24:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    6c26:	d502      	bpl.n	6c2e <bt_recv+0x2e>
			hci_event_prio(buf);
    6c28:	4628      	mov	r0, r5
    6c2a:	f7ff ff97 	bl	6b5c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6c2e:	f014 0002 	ands.w	r0, r4, #2
    6c32:	d1ec      	bne.n	6c0e <bt_recv+0xe>
}
    6c34:	bd38      	pop	{r3, r4, r5, pc}
    6c36:	4b09      	ldr	r3, [pc, #36]	; (6c5c <bt_recv+0x5c>)
    6c38:	4a09      	ldr	r2, [pc, #36]	; (6c60 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    6c3a:	480a      	ldr	r0, [pc, #40]	; (6c64 <bt_recv+0x64>)
    6c3c:	1ad2      	subs	r2, r2, r3
    6c3e:	08d2      	lsrs	r2, r2, #3
    6c40:	0192      	lsls	r2, r2, #6
    6c42:	f042 0201 	orr.w	r2, r2, #1
    6c46:	f011 f94e 	bl	17ee6 <log_1>
		net_buf_unref(buf);
    6c4a:	4628      	mov	r0, r5
    6c4c:	f005 fe52 	bl	c8f4 <net_buf_unref>
		return -EINVAL;
    6c50:	f06f 0015 	mvn.w	r0, #21
    6c54:	e7ee      	b.n	6c34 <bt_recv+0x34>
    6c56:	bf00      	nop
    6c58:	20000104 	.word	0x20000104
    6c5c:	000232ec 	.word	0x000232ec
    6c60:	00023314 	.word	0x00023314
    6c64:	00025a4a 	.word	0x00025a4a

00006c68 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6c68:	4a08      	ldr	r2, [pc, #32]	; (6c8c <bt_hci_driver_register+0x24>)
{
    6c6a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6c6c:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    6c70:	b930      	cbnz	r0, 6c80 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    6c72:	68d9      	ldr	r1, [r3, #12]
    6c74:	b139      	cbz	r1, 6c86 <bt_hci_driver_register+0x1e>
    6c76:	6919      	ldr	r1, [r3, #16]
    6c78:	b129      	cbz	r1, 6c86 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6c7a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    6c7e:	4770      	bx	lr
		return -EALREADY;
    6c80:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6c84:	4770      	bx	lr
		return -EINVAL;
    6c86:	f06f 0015 	mvn.w	r0, #21
}
    6c8a:	4770      	bx	lr
    6c8c:	20000000 	.word	0x20000000

00006c90 <bt_finalize_init>:
{
    6c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6c94:	4c2d      	ldr	r4, [pc, #180]	; (6d4c <bt_finalize_init+0xbc>)
    6c96:	b087      	sub	sp, #28
    6c98:	2102      	movs	r1, #2
    6c9a:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6c9e:	f012 fd2f 	bl	19700 <atomic_or>
		bt_le_scan_update(false);
    6ca2:	2000      	movs	r0, #0
    6ca4:	f7ff f9a0 	bl	5fe8 <bt_le_scan_update>
    6ca8:	4d29      	ldr	r5, [pc, #164]	; (6d50 <bt_finalize_init+0xc0>)
    6caa:	4b2a      	ldr	r3, [pc, #168]	; (6d54 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    6cac:	492a      	ldr	r1, [pc, #168]	; (6d58 <bt_finalize_init+0xc8>)
    6cae:	1aed      	subs	r5, r5, r3
    6cb0:	4e2a      	ldr	r6, [pc, #168]	; (6d5c <bt_finalize_init+0xcc>)
    6cb2:	79e3      	ldrb	r3, [r4, #7]
    6cb4:	4620      	mov	r0, r4
    6cb6:	2b01      	cmp	r3, #1
    6cb8:	bf88      	it	hi
    6cba:	460e      	movhi	r6, r1
    6cbc:	f7fe f886 	bl	4dcc <bt_addr_le_str_real>
    6cc0:	f7fb fa76 	bl	21b0 <log_strdup>
    6cc4:	08ed      	lsrs	r5, r5, #3
    6cc6:	01ad      	lsls	r5, r5, #6
    6cc8:	f045 0703 	orr.w	r7, r5, #3
    6ccc:	4602      	mov	r2, r0
    6cce:	4631      	mov	r1, r6
    6cd0:	463b      	mov	r3, r7
    6cd2:	4823      	ldr	r0, [pc, #140]	; (6d60 <bt_finalize_init+0xd0>)
    6cd4:	f011 f91b 	bl	17f0e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    6cd8:	46a0      	mov	r8, r4
    6cda:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    6cdc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6d6c <bt_finalize_init+0xdc>
	for (i = 1; i < bt_dev.id_count; i++) {
    6ce0:	79e3      	ldrb	r3, [r4, #7]
    6ce2:	f108 0807 	add.w	r8, r8, #7
    6ce6:	429e      	cmp	r6, r3
    6ce8:	db22      	blt.n	6d30 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    6cea:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    6cee:	f045 0503 	orr.w	r5, r5, #3
    6cf2:	4630      	mov	r0, r6
    6cf4:	f7fe f95a 	bl	4fac <ver_str>
    6cf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    6cfa:	e9cd 0602 	strd	r0, r6, [sp, #8]
    6cfe:	9304      	str	r3, [sp, #16]
    6d00:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    6d02:	a902      	add	r1, sp, #8
    6d04:	2204      	movs	r2, #4
    6d06:	9305      	str	r3, [sp, #20]
    6d08:	4816      	ldr	r0, [pc, #88]	; (6d64 <bt_finalize_init+0xd4>)
    6d0a:	462b      	mov	r3, r5
    6d0c:	f011 f934 	bl	17f78 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    6d10:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    6d14:	4630      	mov	r0, r6
    6d16:	f7fe f949 	bl	4fac <ver_str>
    6d1a:	4632      	mov	r2, r6
    6d1c:	4601      	mov	r1, r0
    6d1e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    6d20:	4811      	ldr	r0, [pc, #68]	; (6d68 <bt_finalize_init+0xd8>)
    6d22:	f8ad 5000 	strh.w	r5, [sp]
    6d26:	f011 f90b 	bl	17f40 <log_3>
}
    6d2a:	b007      	add	sp, #28
    6d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    6d30:	4640      	mov	r0, r8
    6d32:	f7fe f84b 	bl	4dcc <bt_addr_le_str_real>
    6d36:	f7fb fa3b 	bl	21b0 <log_strdup>
    6d3a:	4631      	mov	r1, r6
    6d3c:	4602      	mov	r2, r0
    6d3e:	463b      	mov	r3, r7
    6d40:	4648      	mov	r0, r9
    6d42:	f011 f8e4 	bl	17f0e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    6d46:	3601      	adds	r6, #1
    6d48:	e7ca      	b.n	6ce0 <bt_finalize_init+0x50>
    6d4a:	bf00      	nop
    6d4c:	20000000 	.word	0x20000000
    6d50:	00023314 	.word	0x00023314
    6d54:	000232ec 	.word	0x000232ec
    6d58:	00024754 	.word	0x00024754
    6d5c:	000245a3 	.word	0x000245a3
    6d60:	00025a5e 	.word	0x00025a5e
    6d64:	00025a7e 	.word	0x00025a7e
    6d68:	00025abc 	.word	0x00025abc
    6d6c:	00025a6d 	.word	0x00025a6d

00006d70 <bt_get_name>:
}
    6d70:	4800      	ldr	r0, [pc, #0]	; (6d74 <bt_get_name+0x4>)
    6d72:	4770      	bx	lr
    6d74:	0002572c 	.word	0x0002572c

00006d78 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    6d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6d7a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d7c:	4605      	mov	r5, r0
    6d7e:	b918      	cbnz	r0, 6d88 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6d80:	b34c      	cbz	r4, 6dd6 <bt_id_create+0x5e>
		return -EINVAL;
    6d82:	f06f 0415 	mvn.w	r4, #21
    6d86:	e023      	b.n	6dd0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d88:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6d8a:	2207      	movs	r2, #7
    6d8c:	4669      	mov	r1, sp
    6d8e:	9300      	str	r3, [sp, #0]
    6d90:	f8cd 3003 	str.w	r3, [sp, #3]
    6d94:	f012 fa28 	bl	191e8 <memcmp>
    6d98:	2800      	cmp	r0, #0
    6d9a:	d0f1      	beq.n	6d80 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6d9c:	782b      	ldrb	r3, [r5, #0]
    6d9e:	2b01      	cmp	r3, #1
    6da0:	d104      	bne.n	6dac <bt_id_create+0x34>
    6da2:	79ab      	ldrb	r3, [r5, #6]
    6da4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6da8:	2bc0      	cmp	r3, #192	; 0xc0
    6daa:	d00a      	beq.n	6dc2 <bt_id_create+0x4a>
    6dac:	4b11      	ldr	r3, [pc, #68]	; (6df4 <bt_id_create+0x7c>)
    6dae:	4912      	ldr	r1, [pc, #72]	; (6df8 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    6db0:	4812      	ldr	r0, [pc, #72]	; (6dfc <bt_id_create+0x84>)
    6db2:	1ac9      	subs	r1, r1, r3
    6db4:	08c9      	lsrs	r1, r1, #3
    6db6:	0189      	lsls	r1, r1, #6
    6db8:	f041 0101 	orr.w	r1, r1, #1
    6dbc:	f011 f886 	bl	17ecc <log_0>
			return -EINVAL;
    6dc0:	e7df      	b.n	6d82 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6dc2:	4628      	mov	r0, r5
    6dc4:	f7fe fc3c 	bl	5640 <id_find>
    6dc8:	2800      	cmp	r0, #0
    6dca:	dbd9      	blt.n	6d80 <bt_id_create+0x8>
			return -EALREADY;
    6dcc:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    6dd0:	4620      	mov	r0, r4
    6dd2:	b003      	add	sp, #12
    6dd4:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6dd6:	4b0a      	ldr	r3, [pc, #40]	; (6e00 <bt_id_create+0x88>)
    6dd8:	79dc      	ldrb	r4, [r3, #7]
    6dda:	2c01      	cmp	r4, #1
    6ddc:	d006      	beq.n	6dec <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    6dde:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    6de0:	4629      	mov	r1, r5
    6de2:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6de4:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    6de6:	f7fe fccd 	bl	5784 <id_create.isra.0>
	return new_id;
    6dea:	e7f1      	b.n	6dd0 <bt_id_create+0x58>
		return -ENOMEM;
    6dec:	f06f 040b 	mvn.w	r4, #11
    6df0:	e7ee      	b.n	6dd0 <bt_id_create+0x58>
    6df2:	bf00      	nop
    6df4:	000232ec 	.word	0x000232ec
    6df8:	00023314 	.word	0x00023314
    6dfc:	00025ae3 	.word	0x00025ae3
    6e00:	20000000 	.word	0x20000000

00006e04 <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
    6e04:	b570      	push	{r4, r5, r6, lr}
    6e06:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6e08:	2100      	movs	r1, #0
    6e0a:	f241 0009 	movw	r0, #4105	; 0x1009
    6e0e:	aa01      	add	r2, sp, #4
    6e10:	f7fe fd4a 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    6e14:	4e1f      	ldr	r6, [pc, #124]	; (6e94 <bt_setup_public_id_addr+0x90>)
    6e16:	4604      	mov	r4, r0
    6e18:	b168      	cbz	r0, 6e36 <bt_setup_public_id_addr+0x32>
    6e1a:	491f      	ldr	r1, [pc, #124]	; (6e98 <bt_setup_public_id_addr+0x94>)
    6e1c:	4b1f      	ldr	r3, [pc, #124]	; (6e9c <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    6e1e:	4820      	ldr	r0, [pc, #128]	; (6ea0 <bt_setup_public_id_addr+0x9c>)
    6e20:	1ac9      	subs	r1, r1, r3
    6e22:	08c9      	lsrs	r1, r1, #3
    6e24:	0189      	lsls	r1, r1, #6
    6e26:	f041 0102 	orr.w	r1, r1, #2
    6e2a:	f011 f84f 	bl	17ecc <log_0>
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
    6e2e:	2300      	movs	r3, #0
    6e30:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
    6e32:	b006      	add	sp, #24
    6e34:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6e36:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    6e38:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e3a:	689d      	ldr	r5, [r3, #8]
    6e3c:	a904      	add	r1, sp, #16
    6e3e:	3501      	adds	r5, #1
    6e40:	9004      	str	r0, [sp, #16]
    6e42:	f8ad 0014 	strh.w	r0, [sp, #20]
    6e46:	4628      	mov	r0, r5
    6e48:	f012 f9ce 	bl	191e8 <memcmp>
    6e4c:	b918      	cbnz	r0, 6e56 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    6e4e:	9801      	ldr	r0, [sp, #4]
    6e50:	f005 fd50 	bl	c8f4 <net_buf_unref>
    6e54:	e7eb      	b.n	6e2e <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    6e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e5a:	2206      	movs	r2, #6
    6e5c:	4628      	mov	r0, r5
    6e5e:	a902      	add	r1, sp, #8
    6e60:	9302      	str	r3, [sp, #8]
    6e62:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e66:	f012 f9bf 	bl	191e8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e6a:	2800      	cmp	r0, #0
    6e6c:	d0ef      	beq.n	6e4e <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    6e6e:	4629      	mov	r1, r5
    6e70:	2206      	movs	r2, #6
    6e72:	f10d 0011 	add.w	r0, sp, #17
    6e76:	f012 f9c7 	bl	19208 <memcpy>
	net_buf_unref(rsp);
    6e7a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6e7c:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    6e80:	f005 fd38 	bl	c8f4 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6e84:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    6e86:	4620      	mov	r0, r4
    6e88:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    6e8a:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    6e8c:	f7fe fc7a 	bl	5784 <id_create.isra.0>
    6e90:	e7cf      	b.n	6e32 <bt_setup_public_id_addr+0x2e>
    6e92:	bf00      	nop
    6e94:	20000000 	.word	0x20000000
    6e98:	00023314 	.word	0x00023314
    6e9c:	000232ec 	.word	0x000232ec
    6ea0:	00025b11 	.word	0x00025b11

00006ea4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    6ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6ea8:	4b25      	ldr	r3, [pc, #148]	; (6f40 <bt_read_static_addr+0x9c>)
{
    6eaa:	4607      	mov	r7, r0
    6eac:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    6eb0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6eb2:	f014 0401 	ands.w	r4, r4, #1
    6eb6:	d10a      	bne.n	6ece <bt_read_static_addr+0x2a>
    6eb8:	4922      	ldr	r1, [pc, #136]	; (6f44 <bt_read_static_addr+0xa0>)
    6eba:	4b23      	ldr	r3, [pc, #140]	; (6f48 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    6ebc:	4823      	ldr	r0, [pc, #140]	; (6f4c <bt_read_static_addr+0xa8>)
    6ebe:	1ac9      	subs	r1, r1, r3
    6ec0:	08c9      	lsrs	r1, r1, #3
    6ec2:	0189      	lsls	r1, r1, #6
    6ec4:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    6ec8:	f011 f800 	bl	17ecc <log_0>
    6ecc:	e012      	b.n	6ef4 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6ece:	2100      	movs	r1, #0
    6ed0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6ed4:	aa01      	add	r2, sp, #4
    6ed6:	f7fe fce7 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    6eda:	4605      	mov	r5, r0
    6edc:	b170      	cbz	r0, 6efc <bt_read_static_addr+0x58>
    6ede:	4b1a      	ldr	r3, [pc, #104]	; (6f48 <bt_read_static_addr+0xa4>)
    6ee0:	4918      	ldr	r1, [pc, #96]	; (6f44 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    6ee2:	481b      	ldr	r0, [pc, #108]	; (6f50 <bt_read_static_addr+0xac>)
    6ee4:	1ac9      	subs	r1, r1, r3
    6ee6:	08c9      	lsrs	r1, r1, #3
    6ee8:	0189      	lsls	r1, r1, #6
    6eea:	f041 0102 	orr.w	r1, r1, #2
    6eee:	f010 ffed 	bl	17ecc <log_0>
		return 0;
    6ef2:	2400      	movs	r4, #0
	}

	return cnt;
}
    6ef4:	4620      	mov	r0, r4
    6ef6:	b002      	add	sp, #8
    6ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6efc:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6f04:	785c      	ldrb	r4, [r3, #1]
    6f06:	42b4      	cmp	r4, r6
    6f08:	bf28      	it	cs
    6f0a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6f0c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    6f0e:	42a5      	cmp	r5, r4
    6f10:	db0d      	blt.n	6f2e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    6f12:	9801      	ldr	r0, [sp, #4]
    6f14:	f005 fcee 	bl	c8f4 <net_buf_unref>
	if (!cnt) {
    6f18:	2c00      	cmp	r4, #0
    6f1a:	d1eb      	bne.n	6ef4 <bt_read_static_addr+0x50>
    6f1c:	4909      	ldr	r1, [pc, #36]	; (6f44 <bt_read_static_addr+0xa0>)
    6f1e:	4b0a      	ldr	r3, [pc, #40]	; (6f48 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    6f20:	480c      	ldr	r0, [pc, #48]	; (6f54 <bt_read_static_addr+0xb0>)
    6f22:	1ac9      	subs	r1, r1, r3
    6f24:	08c9      	lsrs	r1, r1, #3
    6f26:	0189      	lsls	r1, r1, #6
    6f28:	f041 0102 	orr.w	r1, r1, #2
    6f2c:	e7cc      	b.n	6ec8 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6f2e:	fb08 7005 	mla	r0, r8, r5, r7
    6f32:	2216      	movs	r2, #22
    6f34:	4631      	mov	r1, r6
    6f36:	f012 f967 	bl	19208 <memcpy>
	for (i = 0; i < cnt; i++) {
    6f3a:	3501      	adds	r5, #1
    6f3c:	e7e7      	b.n	6f0e <bt_read_static_addr+0x6a>
    6f3e:	bf00      	nop
    6f40:	20000000 	.word	0x20000000
    6f44:	00023314 	.word	0x00023314
    6f48:	000232ec 	.word	0x000232ec
    6f4c:	00025b2f 	.word	0x00025b2f
    6f50:	00025b5b 	.word	0x00025b5b
    6f54:	00025b7b 	.word	0x00025b7b

00006f58 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6f58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    6f5a:	4d14      	ldr	r5, [pc, #80]	; (6fac <bt_setup_random_id_addr+0x54>)
{
    6f5c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    6f5e:	79ec      	ldrb	r4, [r5, #7]
    6f60:	b9f4      	cbnz	r4, 6fa0 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6f62:	2101      	movs	r1, #1
    6f64:	a802      	add	r0, sp, #8
    6f66:	f7ff ff9d 	bl	6ea4 <bt_read_static_addr>
    6f6a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    6f6c:	b1c0      	cbz	r0, 6fa0 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6f6e:	2716      	movs	r7, #22
    6f70:	e00f      	b.n	6f92 <bt_setup_random_id_addr+0x3a>
    6f72:	ab02      	add	r3, sp, #8
    6f74:	fb07 3106 	mla	r1, r7, r6, r3
    6f78:	2206      	movs	r2, #6
    6f7a:	f10d 0001 	add.w	r0, sp, #1
    6f7e:	f012 f943 	bl	19208 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    6f82:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    6f84:	4669      	mov	r1, sp
    6f86:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    6f88:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    6f8c:	f7fe fbfa 	bl	5784 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6f90:	3401      	adds	r4, #1
    6f92:	79eb      	ldrb	r3, [r5, #7]
    6f94:	b2e6      	uxtb	r6, r4
    6f96:	42b3      	cmp	r3, r6
    6f98:	d8eb      	bhi.n	6f72 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    6f9a:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    6f9c:	b009      	add	sp, #36	; 0x24
    6f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    6fa0:	2100      	movs	r1, #0
    6fa2:	4608      	mov	r0, r1
    6fa4:	f7ff fee8 	bl	6d78 <bt_id_create>
    6fa8:	e7f8      	b.n	6f9c <bt_setup_random_id_addr+0x44>
    6faa:	bf00      	nop
    6fac:	20000000 	.word	0x20000000

00006fb0 <bt_enable>:
{
    6fb0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    6fb4:	4d3d      	ldr	r5, [pc, #244]	; (70ac <bt_enable+0xfc>)
{
    6fb6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6fb8:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    6fbc:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    6fbe:	b97b      	cbnz	r3, 6fe0 <bt_enable+0x30>
    6fc0:	4b3b      	ldr	r3, [pc, #236]	; (70b0 <bt_enable+0x100>)
    6fc2:	493c      	ldr	r1, [pc, #240]	; (70b4 <bt_enable+0x104>)
		BT_ERR("No HCI driver registered");
    6fc4:	483c      	ldr	r0, [pc, #240]	; (70b8 <bt_enable+0x108>)
    6fc6:	1ac9      	subs	r1, r1, r3
    6fc8:	08c9      	lsrs	r1, r1, #3
    6fca:	0189      	lsls	r1, r1, #6
    6fcc:	f041 0101 	orr.w	r1, r1, #1
    6fd0:	f010 ff7c 	bl	17ecc <log_0>
		return -ENODEV;
    6fd4:	f06f 0412 	mvn.w	r4, #18
}
    6fd8:	4620      	mov	r0, r4
    6fda:	b008      	add	sp, #32
    6fdc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6fe0:	2100      	movs	r1, #0
    6fe2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    6fe6:	f012 fba7 	bl	19738 <atomic_test_and_set_bit>
    6fea:	4604      	mov	r4, r0
    6fec:	2800      	cmp	r0, #0
    6fee:	d15a      	bne.n	70a6 <bt_enable+0xf6>
	ready_cb = cb;
    6ff0:	4b32      	ldr	r3, [pc, #200]	; (70bc <bt_enable+0x10c>)
    6ff2:	f04f 0800 	mov.w	r8, #0
    6ff6:	f04f 0900 	mov.w	r9, #0
    6ffa:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6ffc:	f06f 0308 	mvn.w	r3, #8
    7000:	e9cd 0000 	strd	r0, r0, [sp]
    7004:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7008:	9004      	str	r0, [sp, #16]
    700a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    700e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    7012:	4b2b      	ldr	r3, [pc, #172]	; (70c0 <bt_enable+0x110>)
    7014:	492b      	ldr	r1, [pc, #172]	; (70c4 <bt_enable+0x114>)
    7016:	482c      	ldr	r0, [pc, #176]	; (70c8 <bt_enable+0x118>)
    7018:	f00f fdd2 	bl	16bc0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    701c:	492b      	ldr	r1, [pc, #172]	; (70cc <bt_enable+0x11c>)
    701e:	482a      	ldr	r0, [pc, #168]	; (70c8 <bt_enable+0x118>)
    7020:	f01b fd3a 	bl	22a98 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7024:	f06f 0307 	mvn.w	r3, #7
    7028:	f44f 6280 	mov.w	r2, #1024	; 0x400
    702c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    7030:	e9cd 8906 	strd	r8, r9, [sp, #24]
    7034:	e9cd 4400 	strd	r4, r4, [sp]
    7038:	4b25      	ldr	r3, [pc, #148]	; (70d0 <bt_enable+0x120>)
    703a:	4926      	ldr	r1, [pc, #152]	; (70d4 <bt_enable+0x124>)
    703c:	9404      	str	r4, [sp, #16]
    703e:	4826      	ldr	r0, [pc, #152]	; (70d8 <bt_enable+0x128>)
    7040:	f00f fdbe 	bl	16bc0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7044:	4925      	ldr	r1, [pc, #148]	; (70dc <bt_enable+0x12c>)
    7046:	4824      	ldr	r0, [pc, #144]	; (70d8 <bt_enable+0x128>)
    7048:	f01b fd26 	bl	22a98 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    704c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    7050:	68db      	ldr	r3, [r3, #12]
    7052:	4798      	blx	r3
	if (err) {
    7054:	4604      	mov	r4, r0
    7056:	b158      	cbz	r0, 7070 <bt_enable+0xc0>
    7058:	4b15      	ldr	r3, [pc, #84]	; (70b0 <bt_enable+0x100>)
    705a:	4a16      	ldr	r2, [pc, #88]	; (70b4 <bt_enable+0x104>)
		BT_ERR("HCI driver open failed (%d)", err);
    705c:	4601      	mov	r1, r0
    705e:	1ad2      	subs	r2, r2, r3
    7060:	08d2      	lsrs	r2, r2, #3
    7062:	0192      	lsls	r2, r2, #6
    7064:	481e      	ldr	r0, [pc, #120]	; (70e0 <bt_enable+0x130>)
    7066:	f042 0201 	orr.w	r2, r2, #1
    706a:	f010 ff3c 	bl	17ee6 <log_1>
		return err;
    706e:	e7b3      	b.n	6fd8 <bt_enable+0x28>
	if (!cb) {
    7070:	b966      	cbnz	r6, 708c <bt_enable+0xdc>
	err = hci_init();
    7072:	f7f9 fc6d 	bl	950 <hci_init>
	if (err) {
    7076:	4604      	mov	r4, r0
    7078:	2800      	cmp	r0, #0
    707a:	d1ad      	bne.n	6fd8 <bt_enable+0x28>
		err = bt_conn_init();
    707c:	f001 f90c 	bl	8298 <bt_conn_init>
		if (err) {
    7080:	4604      	mov	r4, r0
    7082:	2800      	cmp	r0, #0
    7084:	d1a8      	bne.n	6fd8 <bt_enable+0x28>
	bt_finalize_init();
    7086:	f7ff fe03 	bl	6c90 <bt_finalize_init>
	return 0;
    708a:	e7a5      	b.n	6fd8 <bt_enable+0x28>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    708c:	4601      	mov	r1, r0
    708e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    7092:	f012 fb51 	bl	19738 <atomic_test_and_set_bit>
    7096:	2800      	cmp	r0, #0
    7098:	d19e      	bne.n	6fd8 <bt_enable+0x28>
		k_queue_append(&work_q->queue, work);
    709a:	4812      	ldr	r0, [pc, #72]	; (70e4 <bt_enable+0x134>)
    709c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    70a0:	f01b fb63 	bl	2276a <k_queue_append>
    70a4:	e798      	b.n	6fd8 <bt_enable+0x28>
		return -EALREADY;
    70a6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    70aa:	e795      	b.n	6fd8 <bt_enable+0x28>
    70ac:	20000000 	.word	0x20000000
    70b0:	000232ec 	.word	0x000232ec
    70b4:	00023314 	.word	0x00023314
    70b8:	00025d06 	.word	0x00025d06
    70bc:	20025a00 	.word	0x20025a00
    70c0:	000069d5 	.word	0x000069d5
    70c4:	2002b088 	.word	0x2002b088
    70c8:	200009f8 	.word	0x200009f8
    70cc:	00025d1f 	.word	0x00025d1f
    70d0:	000054d1 	.word	0x000054d1
    70d4:	2002ac88 	.word	0x2002ac88
    70d8:	20000970 	.word	0x20000970
    70dc:	00025d25 	.word	0x00025d25
    70e0:	00025d2b 	.word	0x00025d2b
    70e4:	200010f8 	.word	0x200010f8

000070e8 <init_work>:
{
    70e8:	b510      	push	{r4, lr}
	err = hci_init();
    70ea:	f7f9 fc31 	bl	950 <hci_init>
	if (err) {
    70ee:	4604      	mov	r4, r0
    70f0:	b928      	cbnz	r0, 70fe <init_work+0x16>
		err = bt_conn_init();
    70f2:	f001 f8d1 	bl	8298 <bt_conn_init>
		if (err) {
    70f6:	4604      	mov	r4, r0
    70f8:	b908      	cbnz	r0, 70fe <init_work+0x16>
	bt_finalize_init();
    70fa:	f7ff fdc9 	bl	6c90 <bt_finalize_init>
	if (ready_cb) {
    70fe:	4b04      	ldr	r3, [pc, #16]	; (7110 <init_work+0x28>)
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	b11b      	cbz	r3, 710c <init_work+0x24>
		ready_cb(err);
    7104:	4620      	mov	r0, r4
}
    7106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    710a:	4718      	bx	r3
}
    710c:	bd10      	pop	{r4, pc}
    710e:	bf00      	nop
    7110:	20025a00 	.word	0x20025a00

00007114 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    7114:	b570      	push	{r4, r5, r6, lr}
    7116:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7118:	482b      	ldr	r0, [pc, #172]	; (71c8 <bt_le_scan_start+0xb4>)
    711a:	460e      	mov	r6, r1
    711c:	f012 fadc 	bl	196d8 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7120:	0781      	lsls	r1, r0, #30
    7122:	d548      	bpl.n	71b6 <bt_le_scan_start+0xa2>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    7124:	782b      	ldrb	r3, [r5, #0]
    7126:	2b01      	cmp	r3, #1
    7128:	d848      	bhi.n	71bc <bt_le_scan_start+0xa8>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    712a:	686b      	ldr	r3, [r5, #4]
    712c:	f033 030f 	bics.w	r3, r3, #15
    7130:	d144      	bne.n	71bc <bt_le_scan_start+0xa8>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    7132:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    7136:	8929      	ldrh	r1, [r5, #8]
    7138:	1f0b      	subs	r3, r1, #4
    713a:	b29b      	uxth	r3, r3
    713c:	4283      	cmp	r3, r0
    713e:	d83d      	bhi.n	71bc <bt_le_scan_start+0xa8>
	if (param->window < 0x0004 || param->window > 0x4000) {
    7140:	896a      	ldrh	r2, [r5, #10]
    7142:	1f13      	subs	r3, r2, #4
    7144:	b29b      	uxth	r3, r3
    7146:	4283      	cmp	r3, r0
    7148:	d838      	bhi.n	71bc <bt_le_scan_start+0xa8>
	if (param->window > param->interval) {
    714a:	4291      	cmp	r1, r2
    714c:	d336      	bcc.n	71bc <bt_le_scan_start+0xa8>
	if (param->type && !bt_le_scan_random_addr_check()) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    714e:	2106      	movs	r1, #6
    7150:	481d      	ldr	r0, [pc, #116]	; (71c8 <bt_le_scan_start+0xb4>)
    7152:	f012 faf1 	bl	19738 <atomic_test_and_set_bit>
    7156:	4603      	mov	r3, r0
    7158:	2800      	cmp	r0, #0
    715a:	d132      	bne.n	71c2 <bt_le_scan_start+0xae>
    715c:	481a      	ldr	r0, [pc, #104]	; (71c8 <bt_le_scan_start+0xb4>)
    715e:	f012 fabb 	bl	196d8 <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7162:	0682      	lsls	r2, r0, #26
    7164:	d50a      	bpl.n	717c <bt_le_scan_start+0x68>
	return set_le_scan_enable_legacy(enable);
    7166:	4618      	mov	r0, r3
    7168:	f7fe fc82 	bl	5a70 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    716c:	4604      	mov	r4, r0
    716e:	b128      	cbz	r0, 717c <bt_le_scan_start+0x68>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7170:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7174:	4814      	ldr	r0, [pc, #80]	; (71c8 <bt_le_scan_start+0xb4>)
    7176:	f012 fab8 	bl	196ea <atomic_and>
					   param->window);
	}

	if (err) {
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
    717a:	e00f      	b.n	719c <bt_le_scan_start+0x88>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    717c:	686a      	ldr	r2, [r5, #4]
    717e:	2108      	movs	r1, #8
    7180:	4811      	ldr	r0, [pc, #68]	; (71c8 <bt_le_scan_start+0xb4>)
    7182:	f002 0201 	and.w	r2, r2, #1
    7186:	f012 fac6 	bl	19716 <atomic_set_bit_to>
		if (param->timeout) {
    718a:	89ab      	ldrh	r3, [r5, #12]
    718c:	b143      	cbz	r3, 71a0 <bt_le_scan_start+0x8c>
    718e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7192:	480d      	ldr	r0, [pc, #52]	; (71c8 <bt_le_scan_start+0xb4>)
    7194:	f012 faa9 	bl	196ea <atomic_and>
			return -ENOTSUP;
    7198:	f06f 0422 	mvn.w	r4, #34	; 0x22
	}

	scan_dev_found_cb = cb;

	return 0;
}
    719c:	4620      	mov	r0, r4
    719e:	bd70      	pop	{r4, r5, r6, pc}
		err = start_le_scan_legacy(param->type, param->interval,
    71a0:	896a      	ldrh	r2, [r5, #10]
    71a2:	8929      	ldrh	r1, [r5, #8]
    71a4:	7828      	ldrb	r0, [r5, #0]
    71a6:	f7fe fc9f 	bl	5ae8 <start_le_scan_legacy>
	if (err) {
    71aa:	4604      	mov	r4, r0
    71ac:	2800      	cmp	r0, #0
    71ae:	d1df      	bne.n	7170 <bt_le_scan_start+0x5c>
	scan_dev_found_cb = cb;
    71b0:	4b06      	ldr	r3, [pc, #24]	; (71cc <bt_le_scan_start+0xb8>)
    71b2:	601e      	str	r6, [r3, #0]
	return 0;
    71b4:	e7f2      	b.n	719c <bt_le_scan_start+0x88>
		return -EAGAIN;
    71b6:	f06f 040a 	mvn.w	r4, #10
    71ba:	e7ef      	b.n	719c <bt_le_scan_start+0x88>
		return -EINVAL;
    71bc:	f06f 0415 	mvn.w	r4, #21
    71c0:	e7ec      	b.n	719c <bt_le_scan_start+0x88>
		return -EALREADY;
    71c2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    71c6:	e7e9      	b.n	719c <bt_le_scan_start+0x88>
    71c8:	20000094 	.word	0x20000094
    71cc:	20025a0c 	.word	0x20025a0c

000071d0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    71d0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    71d2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    71d6:	4807      	ldr	r0, [pc, #28]	; (71f4 <bt_le_scan_stop+0x24>)
    71d8:	f012 fa87 	bl	196ea <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    71dc:	0643      	lsls	r3, r0, #25
    71de:	d506      	bpl.n	71ee <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    71e0:	2000      	movs	r0, #0
    71e2:	4b05      	ldr	r3, [pc, #20]	; (71f8 <bt_le_scan_stop+0x28>)
    71e4:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    71e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    71ea:	f7fe befd 	b.w	5fe8 <bt_le_scan_update>
}
    71ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
    71f2:	bd08      	pop	{r3, pc}
    71f4:	20000094 	.word	0x20000094
    71f8:	20025a0c 	.word	0x20025a0c

000071fc <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    71fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    71fe:	4d21      	ldr	r5, [pc, #132]	; (7284 <bt_pub_key_gen+0x88>)
    7200:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    7204:	f003 0306 	and.w	r3, r3, #6
    7208:	2b06      	cmp	r3, #6
    720a:	d00d      	beq.n	7228 <bt_pub_key_gen+0x2c>
    720c:	4b1e      	ldr	r3, [pc, #120]	; (7288 <bt_pub_key_gen+0x8c>)
    720e:	491f      	ldr	r1, [pc, #124]	; (728c <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    7210:	481f      	ldr	r0, [pc, #124]	; (7290 <bt_pub_key_gen+0x94>)
    7212:	1ac9      	subs	r1, r1, r3
    7214:	08c9      	lsrs	r1, r1, #3
    7216:	0189      	lsls	r1, r1, #6
    7218:	f041 0102 	orr.w	r1, r1, #2
    721c:	f010 fe56 	bl	17ecc <log_0>
		return -ENOTSUP;
    7220:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    7224:	4620      	mov	r0, r4
    7226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    7228:	4e1a      	ldr	r6, [pc, #104]	; (7294 <bt_pub_key_gen+0x98>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    722a:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
    722c:	6833      	ldr	r3, [r6, #0]
	pub_key_cb = new_cb;
    722e:	6030      	str	r0, [r6, #0]
	new_cb->_next = pub_key_cb;
    7230:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7232:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7236:	f012 fa7f 	bl	19738 <atomic_test_and_set_bit>
    723a:	4607      	mov	r7, r0
    723c:	bb00      	cbnz	r0, 7280 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    723e:	f06f 0108 	mvn.w	r1, #8
    7242:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7246:	f012 fa50 	bl	196ea <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    724a:	463a      	mov	r2, r7
    724c:	4639      	mov	r1, r7
    724e:	f242 0025 	movw	r0, #8229	; 0x2025
    7252:	f7fe fb29 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    7256:	4604      	mov	r4, r0
    7258:	2800      	cmp	r0, #0
    725a:	d0e3      	beq.n	7224 <bt_pub_key_gen+0x28>
    725c:	4b0a      	ldr	r3, [pc, #40]	; (7288 <bt_pub_key_gen+0x8c>)
    725e:	490b      	ldr	r1, [pc, #44]	; (728c <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    7260:	480d      	ldr	r0, [pc, #52]	; (7298 <bt_pub_key_gen+0x9c>)
    7262:	1ac9      	subs	r1, r1, r3
    7264:	08c9      	lsrs	r1, r1, #3
    7266:	0189      	lsls	r1, r1, #6
    7268:	f041 0101 	orr.w	r1, r1, #1
    726c:	f010 fe2e 	bl	17ecc <log_0>
    7270:	f06f 0110 	mvn.w	r1, #16
    7274:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7278:	f012 fa37 	bl	196ea <atomic_and>
		pub_key_cb = NULL;
    727c:	6037      	str	r7, [r6, #0]
		return err;
    727e:	e7d1      	b.n	7224 <bt_pub_key_gen+0x28>
		return 0;
    7280:	2400      	movs	r4, #0
    7282:	e7cf      	b.n	7224 <bt_pub_key_gen+0x28>
    7284:	20000000 	.word	0x20000000
    7288:	000232ec 	.word	0x000232ec
    728c:	00023314 	.word	0x00023314
    7290:	00025d47 	.word	0x00025d47
    7294:	200259fc 	.word	0x200259fc
    7298:	00025d66 	.word	0x00025d66

0000729c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    729c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    729e:	4804      	ldr	r0, [pc, #16]	; (72b0 <bt_pub_key_get+0x14>)
    72a0:	f012 fa1a 	bl	196d8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    72a4:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    72a8:	4802      	ldr	r0, [pc, #8]	; (72b4 <bt_pub_key_get+0x18>)
    72aa:	bf08      	it	eq
    72ac:	2000      	moveq	r0, #0
    72ae:	bd08      	pop	{r3, pc}
    72b0:	20000094 	.word	0x20000094
    72b4:	2002a008 	.word	0x2002a008

000072b8 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    72b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    72ba:	4d1c      	ldr	r5, [pc, #112]	; (732c <bt_dh_key_gen+0x74>)
{
    72bc:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    72be:	682b      	ldr	r3, [r5, #0]
    72c0:	428b      	cmp	r3, r1
    72c2:	d02d      	beq.n	7320 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    72c4:	b113      	cbz	r3, 72cc <bt_dh_key_gen+0x14>
		return -EBUSY;
    72c6:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    72ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72cc:	4818      	ldr	r0, [pc, #96]	; (7330 <bt_dh_key_gen+0x78>)
    72ce:	f012 fa03 	bl	196d8 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    72d2:	06c2      	lsls	r2, r0, #27
    72d4:	f3c0 1700 	ubfx	r7, r0, #4, #1
    72d8:	d4f5      	bmi.n	72c6 <bt_dh_key_gen+0xe>
    72da:	4815      	ldr	r0, [pc, #84]	; (7330 <bt_dh_key_gen+0x78>)
    72dc:	f012 f9fc 	bl	196d8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    72e0:	0703      	lsls	r3, r0, #28
    72e2:	d520      	bpl.n	7326 <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    72e4:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    72e6:	f242 0026 	movw	r0, #8230	; 0x2026
    72ea:	2140      	movs	r1, #64	; 0x40
    72ec:	f7fe faa4 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
    72f0:	4604      	mov	r4, r0
    72f2:	b918      	cbnz	r0, 72fc <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    72f4:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    72f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    72fa:	e7e6      	b.n	72ca <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    72fc:	2140      	movs	r1, #64	; 0x40
    72fe:	3008      	adds	r0, #8
    7300:	f014 fa45 	bl	1b78e <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    7304:	2240      	movs	r2, #64	; 0x40
    7306:	4631      	mov	r1, r6
    7308:	f011 ff7e 	bl	19208 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    730c:	463a      	mov	r2, r7
    730e:	4621      	mov	r1, r4
    7310:	f242 0026 	movw	r0, #8230	; 0x2026
    7314:	f7fe fac8 	bl	58a8 <bt_hci_cmd_send_sync>
	if (err) {
    7318:	2800      	cmp	r0, #0
    731a:	d0d6      	beq.n	72ca <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    731c:	602f      	str	r7, [r5, #0]
		return err;
    731e:	e7d4      	b.n	72ca <bt_dh_key_gen+0x12>
		return -EALREADY;
    7320:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7324:	e7d1      	b.n	72ca <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    7326:	f06f 0030 	mvn.w	r0, #48	; 0x30
    732a:	e7ce      	b.n	72ca <bt_dh_key_gen+0x12>
    732c:	200259f8 	.word	0x200259f8
    7330:	20000094 	.word	0x20000094

00007334 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    7334:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    7338:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    733a:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    733c:	2100      	movs	r1, #0
    733e:	f242 0018 	movw	r0, #8216	; 0x2018
    7342:	aa02      	add	r2, sp, #8
    7344:	f7fe fab0 	bl	58a8 <bt_hci_cmd_send_sync>
		if (ret) {
    7348:	4604      	mov	r4, r0
    734a:	bb98      	cbnz	r0, 73b4 <prng_reseed.constprop.0+0x80>
			return ret;
		}

		rp = (void *)rsp->data;
    734c:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    734e:	2208      	movs	r2, #8
    7350:	6899      	ldr	r1, [r3, #8]
    7352:	ab04      	add	r3, sp, #16
    7354:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    7358:	3101      	adds	r1, #1
    735a:	f011 ff55 	bl	19208 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    735e:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    7360:	9802      	ldr	r0, [sp, #8]
    7362:	f005 fac7 	bl	c8f4 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    7366:	2d04      	cmp	r5, #4
    7368:	d1e8      	bne.n	733c <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    736a:	f01b fc54 	bl	22c16 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    736e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    7372:	fba0 bc05 	umull	fp, ip, r0, r5
    7376:	fb05 cc01 	mla	ip, r5, r1, ip
    737a:	ea4f 32db 	mov.w	r2, fp, lsr #15
    737e:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    7382:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    7386:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    738a:	2308      	movs	r3, #8
    738c:	2220      	movs	r2, #32
    738e:	9300      	str	r3, [sp, #0]
    7390:	480a      	ldr	r0, [pc, #40]	; (73bc <prng_reseed.constprop.0+0x88>)
    7392:	446b      	add	r3, sp
    7394:	a904      	add	r1, sp, #16
    7396:	f011 fe4a 	bl	1902e <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    739a:	b958      	cbnz	r0, 73b4 <prng_reseed.constprop.0+0x80>
    739c:	4b08      	ldr	r3, [pc, #32]	; (73c0 <prng_reseed.constprop.0+0x8c>)
    739e:	4909      	ldr	r1, [pc, #36]	; (73c4 <prng_reseed.constprop.0+0x90>)
		BT_ERR("Failed to re-seed PRNG");
    73a0:	4809      	ldr	r0, [pc, #36]	; (73c8 <prng_reseed.constprop.0+0x94>)
    73a2:	1ac9      	subs	r1, r1, r3
    73a4:	08c9      	lsrs	r1, r1, #3
    73a6:	0189      	lsls	r1, r1, #6
    73a8:	f041 0101 	orr.w	r1, r1, #1
    73ac:	f010 fd8e 	bl	17ecc <log_0>
		return -EIO;
    73b0:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
    73b4:	4620      	mov	r0, r4
    73b6:	b00c      	add	sp, #48	; 0x30
    73b8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    73bc:	20000a80 	.word	0x20000a80
    73c0:	000232ec 	.word	0x000232ec
    73c4:	00023304 	.word	0x00023304
    73c8:	00025dbf 	.word	0x00025dbf

000073cc <prng_init>:

int prng_init(void)
{
    73cc:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    73ce:	4b16      	ldr	r3, [pc, #88]	; (7428 <prng_init+0x5c>)
    73d0:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
    73d4:	2b00      	cmp	r3, #0
    73d6:	da23      	bge.n	7420 <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    73d8:	2100      	movs	r1, #0
    73da:	f242 0018 	movw	r0, #8216	; 0x2018
    73de:	aa01      	add	r2, sp, #4
    73e0:	f7fe fa62 	bl	58a8 <bt_hci_cmd_send_sync>
	if (ret) {
    73e4:	b9b8      	cbnz	r0, 7416 <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
    73e6:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    73e8:	2208      	movs	r2, #8
    73ea:	6899      	ldr	r1, [r3, #8]
    73ec:	480f      	ldr	r0, [pc, #60]	; (742c <prng_init+0x60>)
    73ee:	3101      	adds	r1, #1
    73f0:	f011 fdfd 	bl	18fee <tc_hmac_prng_init>
    73f4:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    73f6:	9801      	ldr	r0, [sp, #4]
    73f8:	f005 fa7c 	bl	c8f4 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    73fc:	b96c      	cbnz	r4, 741a <prng_init+0x4e>
    73fe:	4b0c      	ldr	r3, [pc, #48]	; (7430 <prng_init+0x64>)
    7400:	490c      	ldr	r1, [pc, #48]	; (7434 <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
    7402:	480d      	ldr	r0, [pc, #52]	; (7438 <prng_init+0x6c>)
    7404:	1ac9      	subs	r1, r1, r3
    7406:	08c9      	lsrs	r1, r1, #3
    7408:	0189      	lsls	r1, r1, #6
    740a:	f041 0101 	orr.w	r1, r1, #1
    740e:	f010 fd5d 	bl	17ecc <log_0>
		return -EIO;
    7412:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    7416:	b002      	add	sp, #8
    7418:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    741a:	f7ff ff8b 	bl	7334 <prng_reseed.constprop.0>
    741e:	e7fa      	b.n	7416 <prng_init+0x4a>
		return -ENOTSUP;
    7420:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7424:	e7f7      	b.n	7416 <prng_init+0x4a>
    7426:	bf00      	nop
    7428:	20000000 	.word	0x20000000
    742c:	20000a80 	.word	0x20000a80
    7430:	000232ec 	.word	0x000232ec
    7434:	00023304 	.word	0x00023304
    7438:	00025dd6 	.word	0x00025dd6

0000743c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    743c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    743e:	4a0a      	ldr	r2, [pc, #40]	; (7468 <bt_rand+0x2c>)
{
    7440:	4604      	mov	r4, r0
    7442:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    7444:	f011 fe0c 	bl	19060 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    7448:	1c43      	adds	r3, r0, #1
    744a:	d107      	bne.n	745c <bt_rand+0x20>
		ret = prng_reseed(&prng);
    744c:	f7ff ff72 	bl	7334 <prng_reseed.constprop.0>
		if (ret) {
    7450:	b948      	cbnz	r0, 7466 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    7452:	4629      	mov	r1, r5
    7454:	4620      	mov	r0, r4
    7456:	4a04      	ldr	r2, [pc, #16]	; (7468 <bt_rand+0x2c>)
    7458:	f011 fe02 	bl	19060 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    745c:	2801      	cmp	r0, #1
    745e:	bf14      	ite	ne
    7460:	f06f 0004 	mvnne.w	r0, #4
    7464:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    7466:	bd38      	pop	{r3, r4, r5, pc}
    7468:	20000a80 	.word	0x20000a80

0000746c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    746c:	2300      	movs	r3, #0
{
    746e:	4601      	mov	r1, r0
	tx->user_data = NULL;
    7470:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    7474:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7476:	4801      	ldr	r0, [pc, #4]	; (747c <tx_free+0x10>)
    7478:	f01b b977 	b.w	2276a <k_queue_append>
    747c:	200006b0 	.word	0x200006b0

00007480 <notify_connected>:
{
    7480:	b538      	push	{r3, r4, r5, lr}
    7482:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7484:	4b08      	ldr	r3, [pc, #32]	; (74a8 <notify_connected+0x28>)
    7486:	681d      	ldr	r5, [r3, #0]
    7488:	7b21      	ldrb	r1, [r4, #12]
    748a:	b92d      	cbnz	r5, 7498 <notify_connected+0x18>
	if (!conn->err) {
    748c:	b951      	cbnz	r1, 74a4 <notify_connected+0x24>
		bt_gatt_connected(conn);
    748e:	4620      	mov	r0, r4
}
    7490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    7494:	f003 bbba 	b.w	ac0c <bt_gatt_connected>
		if (cb->connected) {
    7498:	682b      	ldr	r3, [r5, #0]
    749a:	b10b      	cbz	r3, 74a0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    749c:	4620      	mov	r0, r4
    749e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    74a0:	69ed      	ldr	r5, [r5, #28]
    74a2:	e7f1      	b.n	7488 <notify_connected+0x8>
}
    74a4:	bd38      	pop	{r3, r4, r5, pc}
    74a6:	bf00      	nop
    74a8:	20025a14 	.word	0x20025a14

000074ac <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    74ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74b0:	4604      	mov	r4, r0
    74b2:	460e      	mov	r6, r1
    74b4:	4691      	mov	r9, r2
    74b6:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    74b8:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    74ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    74c2:	4844      	ldr	r0, [pc, #272]	; (75d4 <send_frag+0x128>)
    74c4:	f00f fad4 	bl	16a70 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    74c8:	7b63      	ldrb	r3, [r4, #13]
    74ca:	2b07      	cmp	r3, #7
    74cc:	d151      	bne.n	7572 <send_frag+0xc6>
	__asm__ volatile(
    74ce:	f04f 0320 	mov.w	r3, #32
    74d2:	f3ef 8211 	mrs	r2, BASEPRI
    74d6:	f383 8811 	msr	BASEPRI, r3
    74da:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    74de:	2d00      	cmp	r5, #0
    74e0:	d059      	beq.n	7596 <send_frag+0xea>
	parent->next = child;
    74e2:	2300      	movs	r3, #0
    74e4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    74e6:	69a3      	ldr	r3, [r4, #24]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d151      	bne.n	7590 <send_frag+0xe4>
	list->head = node;
    74ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    74f0:	f382 8811 	msr	BASEPRI, r2
    74f4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    74f8:	2104      	movs	r1, #4
    74fa:	f106 0008 	add.w	r0, r6, #8
    74fe:	f014 f967 	bl	1b7d0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7502:	8823      	ldrh	r3, [r4, #0]
    7504:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    7508:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    750c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    750e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7512:	3b04      	subs	r3, #4
    7514:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7516:	2302      	movs	r3, #2
	return bt_send(buf);
    7518:	4630      	mov	r0, r6
    751a:	7533      	strb	r3, [r6, #20]
    751c:	f7fe ff18 	bl	6350 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7520:	4601      	mov	r1, r0
    7522:	2800      	cmp	r0, #0
    7524:	d053      	beq.n	75ce <send_frag+0x122>
    7526:	4b2c      	ldr	r3, [pc, #176]	; (75d8 <send_frag+0x12c>)
    7528:	4a2c      	ldr	r2, [pc, #176]	; (75dc <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    752a:	482d      	ldr	r0, [pc, #180]	; (75e0 <send_frag+0x134>)
    752c:	1ad2      	subs	r2, r2, r3
    752e:	08d2      	lsrs	r2, r2, #3
    7530:	0192      	lsls	r2, r2, #6
    7532:	f042 0201 	orr.w	r2, r2, #1
    7536:	f010 fcd6 	bl	17ee6 <log_1>
	__asm__ volatile(
    753a:	f04f 0320 	mov.w	r3, #32
    753e:	f3ef 8111 	mrs	r1, BASEPRI
    7542:	f383 8811 	msr	BASEPRI, r3
    7546:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    754a:	2d00      	cmp	r5, #0
    754c:	d039      	beq.n	75c2 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    754e:	2200      	movs	r2, #0
    7550:	6963      	ldr	r3, [r4, #20]
    7552:	b153      	cbz	r3, 756a <send_frag+0xbe>
    7554:	429d      	cmp	r5, r3
    7556:	d131      	bne.n	75bc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    7558:	682b      	ldr	r3, [r5, #0]
    755a:	bb4a      	cbnz	r2, 75b0 <send_frag+0x104>
    755c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    755e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7560:	4295      	cmp	r5, r2
    7562:	d100      	bne.n	7566 <send_frag+0xba>
	list->tail = node;
    7564:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7566:	2300      	movs	r3, #0
    7568:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    756a:	f381 8811 	msr	BASEPRI, r1
    756e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7572:	4818      	ldr	r0, [pc, #96]	; (75d4 <send_frag+0x128>)
    7574:	f00f fa56 	bl	16a24 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7578:	b115      	cbz	r5, 7580 <send_frag+0xd4>
		tx_free(tx);
    757a:	4628      	mov	r0, r5
    757c:	f7ff ff76 	bl	746c <tx_free>
	}

	if (always_consume) {
    7580:	b11f      	cbz	r7, 758a <send_frag+0xde>
		net_buf_unref(buf);
    7582:	4630      	mov	r0, r6
    7584:	f005 f9b6 	bl	c8f4 <net_buf_unref>
	}
	return false;
    7588:	2700      	movs	r7, #0
}
    758a:	4638      	mov	r0, r7
    758c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7590:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7592:	61a5      	str	r5, [r4, #24]
}
    7594:	e7ac      	b.n	74f0 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    7596:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    7598:	b133      	cbz	r3, 75a8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    759a:	f103 080c 	add.w	r8, r3, #12
    759e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    75a0:	3301      	adds	r3, #1
    75a2:	f8c8 3000 	str.w	r3, [r8]
    75a6:	e7a3      	b.n	74f0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    75a8:	69e3      	ldr	r3, [r4, #28]
    75aa:	f104 081c 	add.w	r8, r4, #28
    75ae:	e7f7      	b.n	75a0 <send_frag+0xf4>
	parent->next = child;
    75b0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    75b2:	69a3      	ldr	r3, [r4, #24]
    75b4:	429d      	cmp	r5, r3
	list->tail = node;
    75b6:	bf08      	it	eq
    75b8:	61a2      	streq	r2, [r4, #24]
}
    75ba:	e7d4      	b.n	7566 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    75bc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    75be:	681b      	ldr	r3, [r3, #0]
    75c0:	e7c7      	b.n	7552 <send_frag+0xa6>
			(*pending_no_cb)--;
    75c2:	f8d8 3000 	ldr.w	r3, [r8]
    75c6:	3b01      	subs	r3, #1
    75c8:	f8c8 3000 	str.w	r3, [r8]
    75cc:	e7cd      	b.n	756a <send_frag+0xbe>
	return true;
    75ce:	2701      	movs	r7, #1
    75d0:	e7db      	b.n	758a <send_frag+0xde>
    75d2:	bf00      	nop
    75d4:	200000c8 	.word	0x200000c8
    75d8:	000232ec 	.word	0x000232ec
    75dc:	000232fc 	.word	0x000232fc
    75e0:	000258be 	.word	0x000258be

000075e4 <bt_conn_get_pkts>:
}
    75e4:	4800      	ldr	r0, [pc, #0]	; (75e8 <bt_conn_get_pkts+0x4>)
    75e6:	4770      	bx	lr
    75e8:	200000c8 	.word	0x200000c8

000075ec <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    75ec:	1d03      	adds	r3, r0, #4
{
    75ee:	b570      	push	{r4, r5, r6, lr}
    75f0:	4604      	mov	r4, r0
    75f2:	4618      	mov	r0, r3
    75f4:	f012 fa4f 	bl	19a96 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    75f8:	0582      	lsls	r2, r0, #22
    75fa:	d515      	bpl.n	7628 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    75fc:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7600:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    7604:	4291      	cmp	r1, r2
    7606:	d80f      	bhi.n	7628 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    7608:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    760c:	4291      	cmp	r1, r2
    760e:	d30b      	bcc.n	7628 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
    7610:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    7614:	4291      	cmp	r1, r2
    7616:	d107      	bne.n	7628 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7618:	e8d3 2fef 	ldaex	r2, [r3]
    761c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7620:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7624:	2900      	cmp	r1, #0
    7626:	d1f7      	bne.n	7618 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
    7628:	4b07      	ldr	r3, [pc, #28]	; (7648 <notify_le_param_updated+0x5c>)
    762a:	681d      	ldr	r5, [r3, #0]
    762c:	b905      	cbnz	r5, 7630 <notify_le_param_updated+0x44>
}
    762e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7630:	68ee      	ldr	r6, [r5, #12]
    7632:	b13e      	cbz	r6, 7644 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
    7634:	4620      	mov	r0, r4
    7636:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    763a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    763e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7642:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7644:	69ed      	ldr	r5, [r5, #28]
    7646:	e7f1      	b.n	762c <notify_le_param_updated+0x40>
    7648:	20025a14 	.word	0x20025a14

0000764c <notify_le_data_len_updated>:
{
    764c:	b570      	push	{r4, r5, r6, lr}
    764e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7650:	4b06      	ldr	r3, [pc, #24]	; (766c <notify_le_data_len_updated+0x20>)
			cb->le_data_len_updated(conn, &conn->le.data_len);
    7652:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
    7656:	681c      	ldr	r4, [r3, #0]
    7658:	b904      	cbnz	r4, 765c <notify_le_data_len_updated+0x10>
}
    765a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_data_len_updated) {
    765c:	69a3      	ldr	r3, [r4, #24]
    765e:	b113      	cbz	r3, 7666 <notify_le_data_len_updated+0x1a>
			cb->le_data_len_updated(conn, &conn->le.data_len);
    7660:	4631      	mov	r1, r6
    7662:	4628      	mov	r0, r5
    7664:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7666:	69e4      	ldr	r4, [r4, #28]
    7668:	e7f6      	b.n	7658 <notify_le_data_len_updated+0xc>
    766a:	bf00      	nop
    766c:	20025a14 	.word	0x20025a14

00007670 <le_param_req>:
{
    7670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7672:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7674:	4608      	mov	r0, r1
{
    7676:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7678:	f012 f921 	bl	198be <bt_le_conn_params_valid>
    767c:	4604      	mov	r4, r0
    767e:	b910      	cbnz	r0, 7686 <le_param_req+0x16>
		return false;
    7680:	2400      	movs	r4, #0
}
    7682:	4620      	mov	r0, r4
    7684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    7686:	4b09      	ldr	r3, [pc, #36]	; (76ac <le_param_req+0x3c>)
    7688:	681e      	ldr	r6, [r3, #0]
    768a:	2e00      	cmp	r6, #0
    768c:	d0f9      	beq.n	7682 <le_param_req+0x12>
		if (!cb->le_param_req) {
    768e:	68b3      	ldr	r3, [r6, #8]
    7690:	b90b      	cbnz	r3, 7696 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7692:	69f6      	ldr	r6, [r6, #28]
    7694:	e7f9      	b.n	768a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    7696:	4629      	mov	r1, r5
    7698:	4638      	mov	r0, r7
    769a:	4798      	blx	r3
    769c:	2800      	cmp	r0, #0
    769e:	d0ef      	beq.n	7680 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    76a0:	4628      	mov	r0, r5
    76a2:	f012 f90c 	bl	198be <bt_le_conn_params_valid>
    76a6:	2800      	cmp	r0, #0
    76a8:	d1f3      	bne.n	7692 <le_param_req+0x22>
    76aa:	e7e9      	b.n	7680 <le_param_req+0x10>
    76ac:	20025a14 	.word	0x20025a14

000076b0 <bt_conn_identity_resolved>:
{
    76b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    76b2:	78c3      	ldrb	r3, [r0, #3]
{
    76b4:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    76b6:	b93b      	cbnz	r3, 76c8 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    76b8:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    76bc:	4b08      	ldr	r3, [pc, #32]	; (76e0 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    76be:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    76c2:	681d      	ldr	r5, [r3, #0]
    76c4:	b91d      	cbnz	r5, 76ce <bt_conn_identity_resolved+0x1e>
}
    76c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    76c8:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    76cc:	e7f6      	b.n	76bc <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    76ce:	692b      	ldr	r3, [r5, #16]
    76d0:	b11b      	cbz	r3, 76da <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    76d2:	463a      	mov	r2, r7
    76d4:	4631      	mov	r1, r6
    76d6:	4620      	mov	r0, r4
    76d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    76da:	69ed      	ldr	r5, [r5, #28]
    76dc:	e7f2      	b.n	76c4 <bt_conn_identity_resolved+0x14>
    76de:	bf00      	nop
    76e0:	20025a14 	.word	0x20025a14

000076e4 <bt_conn_security_changed>:
{
    76e4:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    76e6:	7a43      	ldrb	r3, [r0, #9]
{
    76e8:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
    76ea:	7283      	strb	r3, [r0, #10]
{
    76ec:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    76ee:	f012 fb7e 	bl	19dee <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    76f2:	4b06      	ldr	r3, [pc, #24]	; (770c <bt_conn_security_changed+0x28>)
    76f4:	681d      	ldr	r5, [r3, #0]
    76f6:	b905      	cbnz	r5, 76fa <bt_conn_security_changed+0x16>
}
    76f8:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    76fa:	696b      	ldr	r3, [r5, #20]
    76fc:	b11b      	cbz	r3, 7706 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    76fe:	4632      	mov	r2, r6
    7700:	4620      	mov	r0, r4
    7702:	7a61      	ldrb	r1, [r4, #9]
    7704:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7706:	69ed      	ldr	r5, [r5, #28]
    7708:	e7f5      	b.n	76f6 <bt_conn_security_changed+0x12>
    770a:	bf00      	nop
    770c:	20025a14 	.word	0x20025a14

00007710 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7710:	4b02      	ldr	r3, [pc, #8]	; (771c <bt_conn_cb_register+0xc>)
    7712:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    7714:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    7716:	61c2      	str	r2, [r0, #28]
}
    7718:	4770      	bx	lr
    771a:	bf00      	nop
    771c:	20025a14 	.word	0x20025a14

00007720 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    7720:	b570      	push	{r4, r5, r6, lr}
    7722:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7724:	f100 0634 	add.w	r6, r0, #52	; 0x34
    7728:	2200      	movs	r2, #0
    772a:	2300      	movs	r3, #0
    772c:	4630      	mov	r0, r6
    772e:	f013 ffd7 	bl	1b6e0 <net_buf_get>
    7732:	4605      	mov	r5, r0
    7734:	b958      	cbnz	r0, 774e <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    7736:	4620      	mov	r0, r4
    7738:	f012 fa6d 	bl	19c16 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    773c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7740:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    7742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7746:	2300      	movs	r3, #0
    7748:	4805      	ldr	r0, [pc, #20]	; (7760 <conn_cleanup+0x40>)
    774a:	f00f bafd 	b.w	16d48 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    774e:	6968      	ldr	r0, [r5, #20]
    7750:	b108      	cbz	r0, 7756 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    7752:	f7ff fe8b 	bl	746c <tx_free>
		net_buf_unref(buf);
    7756:	4628      	mov	r0, r5
    7758:	f005 f8cc 	bl	c8f4 <net_buf_unref>
    775c:	e7e4      	b.n	7728 <conn_cleanup+0x8>
    775e:	bf00      	nop
    7760:	200010f8 	.word	0x200010f8

00007764 <bt_conn_recv>:
{
    7764:	b570      	push	{r4, r5, r6, lr}
    7766:	4616      	mov	r6, r2
    7768:	4604      	mov	r4, r0
    776a:	460d      	mov	r5, r1
	tx_notify(conn);
    776c:	f012 f99f 	bl	19aae <tx_notify>
	switch (flags) {
    7770:	2e01      	cmp	r6, #1
    7772:	d02e      	beq.n	77d2 <bt_conn_recv+0x6e>
    7774:	2e02      	cmp	r6, #2
    7776:	d15b      	bne.n	7830 <bt_conn_recv+0xcc>
		if (conn->rx) {
    7778:	6923      	ldr	r3, [r4, #16]
    777a:	b163      	cbz	r3, 7796 <bt_conn_recv+0x32>
    777c:	4b37      	ldr	r3, [pc, #220]	; (785c <bt_conn_recv+0xf8>)
    777e:	4938      	ldr	r1, [pc, #224]	; (7860 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    7780:	4838      	ldr	r0, [pc, #224]	; (7864 <bt_conn_recv+0x100>)
    7782:	1ac9      	subs	r1, r1, r3
    7784:	08c9      	lsrs	r1, r1, #3
    7786:	0189      	lsls	r1, r1, #6
    7788:	f041 0101 	orr.w	r1, r1, #1
    778c:	f010 fb9e 	bl	17ecc <log_0>
			bt_conn_reset_rx_state(conn);
    7790:	4620      	mov	r0, r4
    7792:	f012 fa40 	bl	19c16 <bt_conn_reset_rx_state>
		conn->rx = buf;
    7796:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7798:	6923      	ldr	r3, [r4, #16]
    779a:	8999      	ldrh	r1, [r3, #12]
    779c:	2901      	cmp	r1, #1
    779e:	d95b      	bls.n	7858 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    77a0:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    77a2:	7845      	ldrb	r5, [r0, #1]
    77a4:	7802      	ldrb	r2, [r0, #0]
    77a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    77aa:	3204      	adds	r2, #4
    77ac:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    77ae:	428a      	cmp	r2, r1
    77b0:	d852      	bhi.n	7858 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    77b2:	d249      	bcs.n	7848 <bt_conn_recv+0xe4>
    77b4:	4829      	ldr	r0, [pc, #164]	; (785c <bt_conn_recv+0xf8>)
    77b6:	4b2a      	ldr	r3, [pc, #168]	; (7860 <bt_conn_recv+0xfc>)
    77b8:	1a1b      	subs	r3, r3, r0
    77ba:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    77bc:	019b      	lsls	r3, r3, #6
    77be:	482a      	ldr	r0, [pc, #168]	; (7868 <bt_conn_recv+0x104>)
    77c0:	f043 0301 	orr.w	r3, r3, #1
    77c4:	f010 fba3 	bl	17f0e <log_2>
		bt_conn_reset_rx_state(conn);
    77c8:	4620      	mov	r0, r4
}
    77ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    77ce:	f012 ba22 	b.w	19c16 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    77d2:	6920      	ldr	r0, [r4, #16]
    77d4:	b968      	cbnz	r0, 77f2 <bt_conn_recv+0x8e>
    77d6:	4922      	ldr	r1, [pc, #136]	; (7860 <bt_conn_recv+0xfc>)
    77d8:	4b20      	ldr	r3, [pc, #128]	; (785c <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    77da:	4824      	ldr	r0, [pc, #144]	; (786c <bt_conn_recv+0x108>)
    77dc:	1ac9      	subs	r1, r1, r3
    77de:	08c9      	lsrs	r1, r1, #3
    77e0:	0189      	lsls	r1, r1, #6
    77e2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    77e6:	f010 fb71 	bl	17ecc <log_0>
			bt_conn_reset_rx_state(conn);
    77ea:	4620      	mov	r0, r4
    77ec:	f012 fa13 	bl	19c16 <bt_conn_reset_rx_state>
    77f0:	e001      	b.n	77f6 <bt_conn_recv+0x92>
		if (!buf->len) {
    77f2:	89ae      	ldrh	r6, [r5, #12]
    77f4:	b926      	cbnz	r6, 7800 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    77f6:	4628      	mov	r0, r5
}
    77f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    77fc:	f005 b87a 	b.w	c8f4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7800:	3008      	adds	r0, #8
    7802:	f014 f81a 	bl	1b83a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7806:	4286      	cmp	r6, r0
    7808:	d908      	bls.n	781c <bt_conn_recv+0xb8>
    780a:	4915      	ldr	r1, [pc, #84]	; (7860 <bt_conn_recv+0xfc>)
    780c:	4b13      	ldr	r3, [pc, #76]	; (785c <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    780e:	4818      	ldr	r0, [pc, #96]	; (7870 <bt_conn_recv+0x10c>)
    7810:	1ac9      	subs	r1, r1, r3
    7812:	08c9      	lsrs	r1, r1, #3
    7814:	0189      	lsls	r1, r1, #6
    7816:	f041 0101 	orr.w	r1, r1, #1
    781a:	e7e4      	b.n	77e6 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    781c:	6920      	ldr	r0, [r4, #16]
    781e:	89aa      	ldrh	r2, [r5, #12]
    7820:	68a9      	ldr	r1, [r5, #8]
    7822:	3008      	adds	r0, #8
    7824:	f013 ffb9 	bl	1b79a <net_buf_simple_add_mem>
		net_buf_unref(buf);
    7828:	4628      	mov	r0, r5
    782a:	f005 f863 	bl	c8f4 <net_buf_unref>
		break;
    782e:	e7b3      	b.n	7798 <bt_conn_recv+0x34>
    7830:	4a0a      	ldr	r2, [pc, #40]	; (785c <bt_conn_recv+0xf8>)
    7832:	4b0b      	ldr	r3, [pc, #44]	; (7860 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7834:	4631      	mov	r1, r6
    7836:	1a9b      	subs	r3, r3, r2
    7838:	08db      	lsrs	r3, r3, #3
    783a:	019b      	lsls	r3, r3, #6
    783c:	480d      	ldr	r0, [pc, #52]	; (7874 <bt_conn_recv+0x110>)
    783e:	f043 0201 	orr.w	r2, r3, #1
    7842:	f010 fb50 	bl	17ee6 <log_1>
		bt_conn_reset_rx_state(conn);
    7846:	e7d0      	b.n	77ea <bt_conn_recv+0x86>
	conn->rx = NULL;
    7848:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
    784a:	4620      	mov	r0, r4
	conn->rx = NULL;
    784c:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    784e:	4619      	mov	r1, r3
}
    7850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7854:	f000 bec4 	b.w	85e0 <bt_l2cap_recv>
}
    7858:	bd70      	pop	{r4, r5, r6, pc}
    785a:	bf00      	nop
    785c:	000232ec 	.word	0x000232ec
    7860:	000232fc 	.word	0x000232fc
    7864:	00025dfa 	.word	0x00025dfa
    7868:	00025e7a 	.word	0x00025e7a
    786c:	00025e17 	.word	0x00025e17
    7870:	00025e35 	.word	0x00025e35
    7874:	00025e5c 	.word	0x00025e5c

00007878 <bt_conn_send_cb>:
{
    7878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    787c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    787e:	7b43      	ldrb	r3, [r0, #13]
{
    7880:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7882:	2b07      	cmp	r3, #7
{
    7884:	460d      	mov	r5, r1
    7886:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7888:	d00f      	beq.n	78aa <bt_conn_send_cb+0x32>
    788a:	4b2a      	ldr	r3, [pc, #168]	; (7934 <bt_conn_send_cb+0xbc>)
    788c:	492a      	ldr	r1, [pc, #168]	; (7938 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    788e:	482b      	ldr	r0, [pc, #172]	; (793c <bt_conn_send_cb+0xc4>)
    7890:	1ac9      	subs	r1, r1, r3
    7892:	08c9      	lsrs	r1, r1, #3
    7894:	0189      	lsls	r1, r1, #6
    7896:	f041 0101 	orr.w	r1, r1, #1
    789a:	f010 fb17 	bl	17ecc <log_0>
		net_buf_unref(buf);
    789e:	4628      	mov	r0, r5
    78a0:	f005 f828 	bl	c8f4 <net_buf_unref>
			return -ENOTCONN;
    78a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    78a8:	e020      	b.n	78ec <bt_conn_send_cb+0x74>
	if (cb) {
    78aa:	2a00      	cmp	r2, #0
    78ac:	d040      	beq.n	7930 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    78ae:	f00f f8b3 	bl	16a18 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    78b2:	4b23      	ldr	r3, [pc, #140]	; (7940 <bt_conn_send_cb+0xc8>)
    78b4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    78b6:	4823      	ldr	r0, [pc, #140]	; (7944 <bt_conn_send_cb+0xcc>)
    78b8:	bf07      	ittee	eq
    78ba:	2200      	moveq	r2, #0
    78bc:	2300      	moveq	r3, #0
    78be:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    78c2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    78c6:	f00e fcdb 	bl	16280 <z_impl_k_queue_get>
    78ca:	4604      	mov	r4, r0
		if (!tx) {
    78cc:	b980      	cbnz	r0, 78f0 <bt_conn_send_cb+0x78>
    78ce:	4b19      	ldr	r3, [pc, #100]	; (7934 <bt_conn_send_cb+0xbc>)
    78d0:	4919      	ldr	r1, [pc, #100]	; (7938 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    78d2:	481d      	ldr	r0, [pc, #116]	; (7948 <bt_conn_send_cb+0xd0>)
    78d4:	1ac9      	subs	r1, r1, r3
    78d6:	08c9      	lsrs	r1, r1, #3
    78d8:	0189      	lsls	r1, r1, #6
    78da:	f041 0101 	orr.w	r1, r1, #1
    78de:	f010 faf5 	bl	17ecc <log_0>
			net_buf_unref(buf);
    78e2:	4628      	mov	r0, r5
    78e4:	f005 f806 	bl	c8f4 <net_buf_unref>
			return -ENOBUFS;
    78e8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    78ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    78f0:	7b73      	ldrb	r3, [r6, #13]
    78f2:	2b07      	cmp	r3, #7
    78f4:	d010      	beq.n	7918 <bt_conn_send_cb+0xa0>
    78f6:	4b0f      	ldr	r3, [pc, #60]	; (7934 <bt_conn_send_cb+0xbc>)
    78f8:	490f      	ldr	r1, [pc, #60]	; (7938 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    78fa:	4814      	ldr	r0, [pc, #80]	; (794c <bt_conn_send_cb+0xd4>)
    78fc:	1ac9      	subs	r1, r1, r3
    78fe:	08c9      	lsrs	r1, r1, #3
    7900:	0189      	lsls	r1, r1, #6
    7902:	f041 0102 	orr.w	r1, r1, #2
    7906:	f010 fae1 	bl	17ecc <log_0>
			net_buf_unref(buf);
    790a:	4628      	mov	r0, r5
    790c:	f004 fff2 	bl	c8f4 <net_buf_unref>
			tx_free(tx);
    7910:	4620      	mov	r0, r4
    7912:	f7ff fdab 	bl	746c <tx_free>
    7916:	e7c5      	b.n	78a4 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    7918:	2300      	movs	r3, #0
		tx->user_data = user_data;
    791a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    791e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7920:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7922:	f106 0034 	add.w	r0, r6, #52	; 0x34
    7926:	4629      	mov	r1, r5
    7928:	f013 fefe 	bl	1b728 <net_buf_put>
	return 0;
    792c:	2000      	movs	r0, #0
    792e:	e7dd      	b.n	78ec <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    7930:	614a      	str	r2, [r1, #20]
    7932:	e7f6      	b.n	7922 <bt_conn_send_cb+0xaa>
    7934:	000232ec 	.word	0x000232ec
    7938:	000232fc 	.word	0x000232fc
    793c:	00025e95 	.word	0x00025e95
    7940:	20001110 	.word	0x20001110
    7944:	200006b0 	.word	0x200006b0
    7948:	00025ea4 	.word	0x00025ea4
    794c:	00025ec2 	.word	0x00025ec2

00007950 <bt_conn_prepare_events>:
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    7950:	2200      	movs	r2, #0
{
    7952:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
    7954:	4b18      	ldr	r3, [pc, #96]	; (79b8 <bt_conn_prepare_events+0x68>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7956:	2101      	movs	r1, #1
{
    7958:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    795a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    795c:	f01b fae5 	bl	22f2a <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    7960:	4b16      	ldr	r3, [pc, #88]	; (79bc <bt_conn_prepare_events+0x6c>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    7962:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    7966:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
    796a:	f012 f894 	bl	19a96 <atomic_get>
    796e:	4619      	mov	r1, r3
    7970:	b908      	cbnz	r0, 7976 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    7972:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    7974:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7976:	7b5a      	ldrb	r2, [r3, #13]
    7978:	b97a      	cbnz	r2, 799a <bt_conn_prepare_events+0x4a>
    797a:	1d1a      	adds	r2, r3, #4
    797c:	e8d2 0fef 	ldaex	r0, [r2]
    7980:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    7984:	e8c2 cfee 	stlex	lr, ip, [r2]
    7988:	f1be 0f00 	cmp.w	lr, #0
    798c:	d1f6      	bne.n	797c <bt_conn_prepare_events+0x2c>
    798e:	0642      	lsls	r2, r0, #25
    7990:	d503      	bpl.n	799a <bt_conn_prepare_events+0x4a>
		conn_cleanup(conn);
    7992:	4618      	mov	r0, r3
    7994:	f7ff fec4 	bl	7720 <conn_cleanup>
    7998:	e7eb      	b.n	7972 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    799a:	7b4b      	ldrb	r3, [r1, #13]
    799c:	2b07      	cmp	r3, #7
    799e:	d1e8      	bne.n	7972 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    79a0:	4628      	mov	r0, r5
    79a2:	4b07      	ldr	r3, [pc, #28]	; (79c0 <bt_conn_prepare_events+0x70>)
    79a4:	2200      	movs	r2, #0
    79a6:	2104      	movs	r1, #4
    79a8:	f01b fabf 	bl	22f2a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    79ac:	2301      	movs	r3, #1
			ev_count++;
    79ae:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    79b0:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    79b4:	e7de      	b.n	7974 <bt_conn_prepare_events+0x24>
    79b6:	bf00      	nop
    79b8:	20000248 	.word	0x20000248
    79bc:	20000bb8 	.word	0x20000bb8
    79c0:	20000bec 	.word	0x20000bec

000079c4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	4606      	mov	r6, r0
    79c8:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    79ca:	4811      	ldr	r0, [pc, #68]	; (7a10 <bt_conn_add_le+0x4c>)
    79cc:	2101      	movs	r1, #1
    79ce:	f012 f894 	bl	19afa <bt_conn_new>
	if (!conn) {
    79d2:	4604      	mov	r4, r0
    79d4:	b1c8      	cbz	r0, 7a0a <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    79d6:	2230      	movs	r2, #48	; 0x30
    79d8:	2100      	movs	r1, #0
    79da:	3058      	adds	r0, #88	; 0x58
    79dc:	f011 fc3f 	bl	1925e <memset>
    79e0:	4b0c      	ldr	r3, [pc, #48]	; (7a14 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    79e2:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    79e4:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    79e6:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
    79e8:	4629      	mov	r1, r5
    79ea:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    79ee:	62a3      	str	r3, [r4, #40]	; 0x28
    79f0:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    79f2:	7226      	strb	r6, [r4, #8]
    79f4:	f104 0088 	add.w	r0, r4, #136	; 0x88
    79f8:	f011 fc06 	bl	19208 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    79fc:	2301      	movs	r3, #1
    79fe:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    7a00:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    7a02:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7a04:	4b05      	ldr	r3, [pc, #20]	; (7a1c <bt_conn_add_le+0x58>)
    7a06:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7a0a:	4620      	mov	r0, r4
    7a0c:	bd70      	pop	{r4, r5, r6, pc}
    7a0e:	bf00      	nop
    7a10:	20000bb8 	.word	0x20000bb8
    7a14:	00008061 	.word	0x00008061
    7a18:	00019af5 	.word	0x00019af5
    7a1c:	00280018 	.word	0x00280018

00007a20 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    7a20:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    7a22:	2101      	movs	r1, #1
{
    7a24:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    7a26:	4803      	ldr	r0, [pc, #12]	; (7a34 <bt_conn_lookup_handle+0x14>)
    7a28:	f012 f935 	bl	19c96 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    7a2c:	2800      	cmp	r0, #0
    7a2e:	bf38      	it	cc
    7a30:	2000      	movcc	r0, #0
    7a32:	bd08      	pop	{r3, pc}
    7a34:	20000bb8 	.word	0x20000bb8

00007a38 <bt_conn_set_state>:
{
    7a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    7a3c:	7b46      	ldrb	r6, [r0, #13]
{
    7a3e:	4604      	mov	r4, r0
	if (conn->state == state) {
    7a40:	428e      	cmp	r6, r1
{
    7a42:	460d      	mov	r5, r1
	if (conn->state == state) {
    7a44:	d115      	bne.n	7a72 <bt_conn_set_state+0x3a>
    7a46:	4b79      	ldr	r3, [pc, #484]	; (7c2c <bt_conn_set_state+0x1f4>)
    7a48:	4a79      	ldr	r2, [pc, #484]	; (7c30 <bt_conn_set_state+0x1f8>)
    7a4a:	2e08      	cmp	r6, #8
    7a4c:	eba2 0203 	sub.w	r2, r2, r3
    7a50:	bf98      	it	ls
    7a52:	4b78      	ldrls	r3, [pc, #480]	; (7c34 <bt_conn_set_state+0x1fc>)
    7a54:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
    7a58:	ea4f 1282 	mov.w	r2, r2, lsl #6
    7a5c:	bf94      	ite	ls
    7a5e:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    7a62:	4975      	ldrhi	r1, [pc, #468]	; (7c38 <bt_conn_set_state+0x200>)
    7a64:	4875      	ldr	r0, [pc, #468]	; (7c3c <bt_conn_set_state+0x204>)
    7a66:	f042 0202 	orr.w	r2, r2, #2
}
    7a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    7a6e:	f010 ba3a 	b.w	17ee6 <log_1>
	conn->state = state;
    7a72:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    7a74:	b166      	cbz	r6, 7a90 <bt_conn_set_state+0x58>
    7a76:	2e06      	cmp	r6, #6
    7a78:	d00d      	beq.n	7a96 <bt_conn_set_state+0x5e>
	switch (conn->state) {
    7a7a:	7b63      	ldrb	r3, [r4, #13]
    7a7c:	2b08      	cmp	r3, #8
    7a7e:	f200 80c8 	bhi.w	7c12 <bt_conn_set_state+0x1da>
    7a82:	e8df f003 	tbb	[pc, r3]
    7a86:	0f3e      	.short	0x0f3e
    7a88:	d0d0d0d0 	.word	0xd0d0d0d0
    7a8c:	2789      	.short	0x2789
    7a8e:	d0          	.byte	0xd0
    7a8f:	00          	.byte	0x00
		bt_conn_ref(conn);
    7a90:	f012 f8ea 	bl	19c68 <bt_conn_ref>
		break;
    7a94:	e7f1      	b.n	7a7a <bt_conn_set_state+0x42>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7a96:	7883      	ldrb	r3, [r0, #2]
    7a98:	2b01      	cmp	r3, #1
    7a9a:	d1ee      	bne.n	7a7a <bt_conn_set_state+0x42>
			k_delayed_work_cancel(&conn->deferred_work);
    7a9c:	3058      	adds	r0, #88	; 0x58
    7a9e:	f01b f861 	bl	22b64 <k_delayed_work_cancel>
    7aa2:	e7ea      	b.n	7a7a <bt_conn_set_state+0x42>
		tx->pending_no_cb = 0U;
    7aa4:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    7aa6:	4d66      	ldr	r5, [pc, #408]	; (7c40 <bt_conn_set_state+0x208>)
	__asm__ volatile(
    7aa8:	f04f 0320 	mov.w	r3, #32
    7aac:	f3ef 8211 	mrs	r2, BASEPRI
    7ab0:	f383 8811 	msr	BASEPRI, r3
    7ab4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7ab8:	69e3      	ldr	r3, [r4, #28]
    7aba:	2b00      	cmp	r3, #0
    7abc:	f000 808a 	beq.w	7bd4 <bt_conn_set_state+0x19c>
			conn->pending_no_cb--;
    7ac0:	3b01      	subs	r3, #1
    7ac2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7ac4:	f382 8811 	msr	BASEPRI, r2
    7ac8:	f3bf 8f6f 	isb	sy
    7acc:	4628      	mov	r0, r5
    7ace:	f00e ffa9 	bl	16a24 <z_impl_k_sem_give>
}
    7ad2:	e7e9      	b.n	7aa8 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7ad4:	78a3      	ldrb	r3, [r4, #2]
    7ad6:	2b04      	cmp	r3, #4
    7ad8:	f000 80a5 	beq.w	7c26 <bt_conn_set_state+0x1ee>
	z_impl_k_queue_init(queue);
    7adc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7ae0:	f01a fe37 	bl	22752 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    7ae4:	2100      	movs	r1, #0
    7ae6:	4857      	ldr	r0, [pc, #348]	; (7c44 <bt_conn_set_state+0x20c>)
    7ae8:	f00f fbd4 	bl	17294 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7aec:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    7aee:	4620      	mov	r0, r4
	list->tail = NULL;
    7af0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    7af4:	f000 fc6c 	bl	83d0 <bt_l2cap_connected>
		notify_connected(conn);
    7af8:	4620      	mov	r0, r4
}
    7afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    7afe:	f7ff bcbf 	b.w	7480 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7b02:	78a3      	ldrb	r3, [r4, #2]
    7b04:	2b04      	cmp	r3, #4
    7b06:	d105      	bne.n	7b14 <bt_conn_set_state+0xdc>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    7b08:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
}
    7b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    7b10:	f011 bfc4 	b.w	19a9c <atomic_dec>
		switch (old_state) {
    7b14:	2e08      	cmp	r6, #8
    7b16:	f200 8086 	bhi.w	7c26 <bt_conn_set_state+0x1ee>
    7b1a:	a301      	add	r3, pc, #4	; (adr r3, 7b20 <bt_conn_set_state+0xe8>)
    7b1c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    7b20:	00007b85 	.word	0x00007b85
    7b24:	00007b45 	.word	0x00007b45
    7b28:	00007b77 	.word	0x00007b77
    7b2c:	00007b09 	.word	0x00007b09
    7b30:	00007b09 	.word	0x00007b09
    7b34:	00007b77 	.word	0x00007b77
    7b38:	00007b77 	.word	0x00007b77
    7b3c:	00007b85 	.word	0x00007b85
    7b40:	00007b85 	.word	0x00007b85
			tx_notify(conn);
    7b44:	4620      	mov	r0, r4
    7b46:	f011 ffb2 	bl	19aae <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7b4a:	78a3      	ldrb	r3, [r4, #2]
    7b4c:	2b01      	cmp	r3, #1
    7b4e:	d103      	bne.n	7b58 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
    7b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7b54:	f01b f806 	bl	22b64 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b58:	3404      	adds	r4, #4
    7b5a:	e8d4 3fef 	ldaex	r3, [r4]
    7b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7b62:	e8c4 3fe2 	stlex	r2, r3, [r4]
    7b66:	2a00      	cmp	r2, #0
    7b68:	d1f7      	bne.n	7b5a <bt_conn_set_state+0x122>
}
    7b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b6e:	2100      	movs	r1, #0
    7b70:	4834      	ldr	r0, [pc, #208]	; (7c44 <bt_conn_set_state+0x20c>)
    7b72:	f00f bb8f 	b.w	17294 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7b76:	7b23      	ldrb	r3, [r4, #12]
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d0c5      	beq.n	7b08 <bt_conn_set_state+0xd0>
				notify_connected(conn);
    7b7c:	4620      	mov	r0, r4
    7b7e:	f7ff fc7f 	bl	7480 <notify_connected>
    7b82:	e7c1      	b.n	7b08 <bt_conn_set_state+0xd0>
    7b84:	4a2a      	ldr	r2, [pc, #168]	; (7c30 <bt_conn_set_state+0x1f8>)
    7b86:	4b29      	ldr	r3, [pc, #164]	; (7c2c <bt_conn_set_state+0x1f4>)
			BT_WARN("Invalid (%u) old state", state);
    7b88:	4629      	mov	r1, r5
    7b8a:	1ad2      	subs	r2, r2, r3
    7b8c:	08d2      	lsrs	r2, r2, #3
    7b8e:	0192      	lsls	r2, r2, #6
    7b90:	482d      	ldr	r0, [pc, #180]	; (7c48 <bt_conn_set_state+0x210>)
    7b92:	f042 0202 	orr.w	r2, r2, #2
    7b96:	e768      	b.n	7a6a <bt_conn_set_state+0x32>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7b98:	78a3      	ldrb	r3, [r4, #2]
    7b9a:	2b01      	cmp	r3, #1
    7b9c:	d143      	bne.n	7c26 <bt_conn_set_state+0x1ee>
				K_MSEC(10 * bt_dev.create_param.timeout));
    7b9e:	210a      	movs	r1, #10
    7ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7ba4:	f240 36e7 	movw	r6, #999	; 0x3e7
    7ba8:	2700      	movs	r7, #0
    7baa:	4b28      	ldr	r3, [pc, #160]	; (7c4c <bt_conn_set_state+0x214>)
    7bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7bb0:	8a9b      	ldrh	r3, [r3, #20]
    7bb2:	4359      	muls	r1, r3
    7bb4:	fbc0 6701 	smlal	r6, r7, r0, r1
    7bb8:	2300      	movs	r3, #0
    7bba:	4630      	mov	r0, r6
    7bbc:	4639      	mov	r1, r7
    7bbe:	f7f8 fd49 	bl	654 <__aeabi_uldivmod>
    7bc2:	4602      	mov	r2, r0
    7bc4:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7bc6:	4822      	ldr	r0, [pc, #136]	; (7c50 <bt_conn_set_state+0x218>)
    7bc8:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    7bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7bd0:	f00f b8ba 	b.w	16d48 <k_delayed_work_submit_to_queue>
Z_GENLIST_IS_EMPTY(slist)
    7bd4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7bd6:	b128      	cbz	r0, 7be4 <bt_conn_set_state+0x1ac>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7bd8:	69a1      	ldr	r1, [r4, #24]
    7bda:	6803      	ldr	r3, [r0, #0]
    7bdc:	4288      	cmp	r0, r1
	list->head = node;
    7bde:	6163      	str	r3, [r4, #20]
	list->tail = node;
    7be0:	bf08      	it	eq
    7be2:	61a3      	streq	r3, [r4, #24]
    7be4:	f382 8811 	msr	BASEPRI, r2
    7be8:	f3bf 8f6f 	isb	sy
		if (!node) {
    7bec:	b1d8      	cbz	r0, 7c26 <bt_conn_set_state+0x1ee>
	__asm__ volatile(
    7bee:	f04f 0220 	mov.w	r2, #32
    7bf2:	f3ef 8311 	mrs	r3, BASEPRI
    7bf6:	f382 8811 	msr	BASEPRI, r2
    7bfa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    7bfe:	68c2      	ldr	r2, [r0, #12]
    7c00:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7c02:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7c04:	f383 8811 	msr	BASEPRI, r3
    7c08:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    7c0c:	f7ff fc2e 	bl	746c <tx_free>
    7c10:	e75c      	b.n	7acc <bt_conn_set_state+0x94>
    7c12:	4a07      	ldr	r2, [pc, #28]	; (7c30 <bt_conn_set_state+0x1f8>)
    7c14:	4b05      	ldr	r3, [pc, #20]	; (7c2c <bt_conn_set_state+0x1f4>)
		BT_WARN("no valid (%u) state was set", state);
    7c16:	4629      	mov	r1, r5
    7c18:	1ad2      	subs	r2, r2, r3
    7c1a:	08d2      	lsrs	r2, r2, #3
    7c1c:	0192      	lsls	r2, r2, #6
    7c1e:	480d      	ldr	r0, [pc, #52]	; (7c54 <bt_conn_set_state+0x21c>)
    7c20:	f042 0202 	orr.w	r2, r2, #2
    7c24:	e721      	b.n	7a6a <bt_conn_set_state+0x32>
}
    7c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c2a:	bf00      	nop
    7c2c:	000232ec 	.word	0x000232ec
    7c30:	000232fc 	.word	0x000232fc
    7c34:	000238bc 	.word	0x000238bc
    7c38:	00025ee8 	.word	0x00025ee8
    7c3c:	00025ef2 	.word	0x00025ef2
    7c40:	200000c8 	.word	0x200000c8
    7c44:	20000248 	.word	0x20000248
    7c48:	00025f03 	.word	0x00025f03
    7c4c:	20000000 	.word	0x20000000
    7c50:	200010f8 	.word	0x200010f8
    7c54:	00025f1a 	.word	0x00025f1a

00007c58 <bt_conn_lookup_addr_le>:
{
    7c58:	b570      	push	{r4, r5, r6, lr}
    7c5a:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c5c:	480d      	ldr	r0, [pc, #52]	; (7c94 <bt_conn_lookup_addr_le+0x3c>)
{
    7c5e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c60:	f012 f802 	bl	19c68 <bt_conn_ref>
		if (!conn) {
    7c64:	4604      	mov	r4, r0
    7c66:	b130      	cbz	r0, 7c76 <bt_conn_lookup_addr_le+0x1e>
		if (conn->type != BT_CONN_TYPE_LE) {
    7c68:	7883      	ldrb	r3, [r0, #2]
    7c6a:	2b01      	cmp	r3, #1
    7c6c:	d005      	beq.n	7c7a <bt_conn_lookup_addr_le+0x22>
	atomic_val_t old = atomic_dec(&conn->ref);
    7c6e:	30c0      	adds	r0, #192	; 0xc0
    7c70:	f011 ff14 	bl	19a9c <atomic_dec>
	return NULL;
    7c74:	2400      	movs	r4, #0
}
    7c76:	4620      	mov	r0, r4
    7c78:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    7c7a:	4629      	mov	r1, r5
    7c7c:	4632      	mov	r2, r6
    7c7e:	f011 ffd3 	bl	19c28 <bt_conn_is_peer_addr_le>
    7c82:	4605      	mov	r5, r0
    7c84:	2800      	cmp	r0, #0
    7c86:	d1f6      	bne.n	7c76 <bt_conn_lookup_addr_le+0x1e>
	atomic_val_t old = atomic_dec(&conn->ref);
    7c88:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7c8c:	f011 ff06 	bl	19a9c <atomic_dec>
	return NULL;
    7c90:	462c      	mov	r4, r5
			continue;
    7c92:	e7f0      	b.n	7c76 <bt_conn_lookup_addr_le+0x1e>
    7c94:	20000bb8 	.word	0x20000bb8

00007c98 <bt_conn_exists_le>:
{
    7c98:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    7c9a:	f7ff ffdd 	bl	7c58 <bt_conn_lookup_addr_le>
	if (conn) {
    7c9e:	4604      	mov	r4, r0
    7ca0:	b1b8      	cbz	r0, 7cd2 <bt_conn_exists_le+0x3a>
    7ca2:	4b0c      	ldr	r3, [pc, #48]	; (7cd4 <bt_conn_exists_le+0x3c>)
    7ca4:	4a0c      	ldr	r2, [pc, #48]	; (7cd8 <bt_conn_exists_le+0x40>)
    7ca6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    7ca8:	7b43      	ldrb	r3, [r0, #13]
    7caa:	08d2      	lsrs	r2, r2, #3
    7cac:	2b08      	cmp	r3, #8
    7cae:	bf98      	it	ls
    7cb0:	490a      	ldrls	r1, [pc, #40]	; (7cdc <bt_conn_exists_le+0x44>)
    7cb2:	ea4f 1282 	mov.w	r2, r2, lsl #6
    7cb6:	bf94      	ite	ls
    7cb8:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    7cbc:	4908      	ldrhi	r1, [pc, #32]	; (7ce0 <bt_conn_exists_le+0x48>)
    7cbe:	4809      	ldr	r0, [pc, #36]	; (7ce4 <bt_conn_exists_le+0x4c>)
    7cc0:	f042 0202 	orr.w	r2, r2, #2
    7cc4:	f010 f90f 	bl	17ee6 <log_1>
	atomic_val_t old = atomic_dec(&conn->ref);
    7cc8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7ccc:	f011 fee6 	bl	19a9c <atomic_dec>
		return true;
    7cd0:	2001      	movs	r0, #1
}
    7cd2:	bd10      	pop	{r4, pc}
    7cd4:	000232ec 	.word	0x000232ec
    7cd8:	000232fc 	.word	0x000232fc
    7cdc:	000238bc 	.word	0x000238bc
    7ce0:	00025ee8 	.word	0x00025ee8
    7ce4:	00025f36 	.word	0x00025f36

00007ce8 <bt_conn_lookup_state_le>:
{
    7ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cea:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7cec:	4810      	ldr	r0, [pc, #64]	; (7d30 <bt_conn_lookup_state_le+0x48>)
{
    7cee:	460e      	mov	r6, r1
    7cf0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7cf2:	f011 ffb9 	bl	19c68 <bt_conn_ref>
		if (!conn) {
    7cf6:	4604      	mov	r4, r0
    7cf8:	b1b8      	cbz	r0, 7d2a <bt_conn_lookup_state_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
    7cfa:	7883      	ldrb	r3, [r0, #2]
    7cfc:	2b01      	cmp	r3, #1
    7cfe:	d003      	beq.n	7d08 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    7d00:	f011 ffb2 	bl	19c68 <bt_conn_ref>
	return NULL;
    7d04:	2400      	movs	r4, #0
			continue;
    7d06:	e010      	b.n	7d2a <bt_conn_lookup_state_le+0x42>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    7d08:	b14e      	cbz	r6, 7d1e <bt_conn_lookup_state_le+0x36>
    7d0a:	4632      	mov	r2, r6
    7d0c:	4629      	mov	r1, r5
    7d0e:	f011 ff8b 	bl	19c28 <bt_conn_is_peer_addr_le>
    7d12:	b920      	cbnz	r0, 7d1e <bt_conn_lookup_state_le+0x36>
	atomic_val_t old = atomic_dec(&conn->ref);
    7d14:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7d18:	f011 fec0 	bl	19a9c <atomic_dec>
    7d1c:	e7f2      	b.n	7d04 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    7d1e:	7b63      	ldrb	r3, [r4, #13]
    7d20:	42bb      	cmp	r3, r7
    7d22:	d1f7      	bne.n	7d14 <bt_conn_lookup_state_le+0x2c>
    7d24:	7a23      	ldrb	r3, [r4, #8]
    7d26:	42ab      	cmp	r3, r5
    7d28:	d1f4      	bne.n	7d14 <bt_conn_lookup_state_le+0x2c>
}
    7d2a:	4620      	mov	r0, r4
    7d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d2e:	bf00      	nop
    7d30:	20000bb8 	.word	0x20000bb8

00007d34 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    7d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7d38:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7d3a:	4852      	ldr	r0, [pc, #328]	; (7e84 <bt_conn_le_create+0x150>)
    7d3c:	460f      	mov	r7, r1
    7d3e:	4615      	mov	r5, r2
    7d40:	461e      	mov	r6, r3
    7d42:	f011 fea8 	bl	19a96 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d46:	0781      	lsls	r1, r0, #30
    7d48:	f140 8092 	bpl.w	7e70 <bt_conn_le_create+0x13c>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    7d4c:	4610      	mov	r0, r2
    7d4e:	f011 fdb6 	bl	198be <bt_le_conn_params_valid>
    7d52:	b928      	cbnz	r0, 7d60 <bt_conn_le_create+0x2c>
		return -EINVAL;
    7d54:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    7d58:	4628      	mov	r0, r5
    7d5a:	b002      	add	sp, #8
    7d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d60:	4848      	ldr	r0, [pc, #288]	; (7e84 <bt_conn_le_create+0x150>)
    7d62:	f011 fe98 	bl	19a96 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7d66:	0642      	lsls	r2, r0, #25
    7d68:	d4f4      	bmi.n	7d54 <bt_conn_le_create+0x20>
    7d6a:	4846      	ldr	r0, [pc, #280]	; (7e84 <bt_conn_le_create+0x150>)
    7d6c:	f011 fe93 	bl	19a96 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    7d70:	0503      	lsls	r3, r0, #20
    7d72:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    7d76:	d47e      	bmi.n	7e76 <bt_conn_le_create+0x142>
	if (!bt_le_scan_random_addr_check()) {
    7d78:	f011 fd82 	bl	19880 <bt_le_scan_random_addr_check>
    7d7c:	2800      	cmp	r0, #0
    7d7e:	d0e9      	beq.n	7d54 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    7d80:	4621      	mov	r1, r4
    7d82:	4640      	mov	r0, r8
    7d84:	f7ff ff88 	bl	7c98 <bt_conn_exists_le>
    7d88:	2800      	cmp	r0, #0
    7d8a:	d1e3      	bne.n	7d54 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    7d8c:	7823      	ldrb	r3, [r4, #0]
    7d8e:	3b02      	subs	r3, #2
    7d90:	2b01      	cmp	r3, #1
    7d92:	d84b      	bhi.n	7e2c <bt_conn_le_create+0xf8>
    7d94:	2207      	movs	r2, #7
    7d96:	4621      	mov	r1, r4
    7d98:	4668      	mov	r0, sp
    7d9a:	f011 fa35 	bl	19208 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    7d9e:	f89d 3000 	ldrb.w	r3, [sp]
    7da2:	3b02      	subs	r3, #2
    7da4:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    7da8:	4669      	mov	r1, sp
    7daa:	2000      	movs	r0, #0
    7dac:	f7ff fe0a 	bl	79c4 <bt_conn_add_le>
	if (!conn) {
    7db0:	4604      	mov	r4, r0
    7db2:	2800      	cmp	r0, #0
    7db4:	d062      	beq.n	7e7c <bt_conn_le_create+0x148>
	conn->le.interval_min = param->interval_min;
    7db6:	882b      	ldrh	r3, [r5, #0]
    7db8:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    7dbc:	886b      	ldrh	r3, [r5, #2]
    7dbe:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    7dc2:	88ab      	ldrh	r3, [r5, #4]
    7dc4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    7dc8:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
    7dca:	4d2f      	ldr	r5, [pc, #188]	; (7e88 <bt_conn_le_create+0x154>)
	conn->le.timeout = param->timeout;
    7dcc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    7dd0:	f105 0c08 	add.w	ip, r5, #8
    7dd4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    7dd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    7ddc:	8aab      	ldrh	r3, [r5, #20]
    7dde:	462a      	mov	r2, r5
	bt_dev.create_param.timeout =
    7de0:	2b00      	cmp	r3, #0
    7de2:	bf08      	it	eq
    7de4:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    7de8:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    7dea:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    7dec:	b903      	cbnz	r3, 7df0 <bt_conn_le_create+0xbc>
    7dee:	89ab      	ldrh	r3, [r5, #12]
    7df0:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    7df2:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    7df4:	b903      	cbnz	r3, 7df8 <bt_conn_le_create+0xc4>
    7df6:	89d3      	ldrh	r3, [r2, #14]
    7df8:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7dfa:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    7dfe:	b11b      	cbz	r3, 7e08 <bt_conn_le_create+0xd4>
    7e00:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
    7e04:	429a      	cmp	r2, r3
    7e06:	d91a      	bls.n	7e3e <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7e08:	2102      	movs	r1, #2
    7e0a:	4620      	mov	r0, r4
    7e0c:	f7ff fe14 	bl	7a38 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    7e10:	2001      	movs	r0, #1
    7e12:	f7fe f8e9 	bl	5fe8 <bt_le_scan_update>
		if (err) {
    7e16:	4605      	mov	r5, r0
    7e18:	b340      	cbz	r0, 7e6c <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7e1a:	4620      	mov	r0, r4
    7e1c:	2100      	movs	r1, #0
    7e1e:	f7ff fe0b 	bl	7a38 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    7e22:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7e26:	f011 fe39 	bl	19a9c <atomic_dec>
			return err;
    7e2a:	e795      	b.n	7d58 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    7e2c:	4621      	mov	r1, r4
    7e2e:	f011 fd1f 	bl	19870 <bt_lookup_id_addr>
    7e32:	2207      	movs	r2, #7
    7e34:	4601      	mov	r1, r0
    7e36:	4668      	mov	r0, sp
    7e38:	f011 f9e6 	bl	19208 <memcpy>
}
    7e3c:	e7b4      	b.n	7da8 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    7e3e:	2106      	movs	r1, #6
    7e40:	4620      	mov	r0, r4
    7e42:	f7ff fdf9 	bl	7a38 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    7e46:	4620      	mov	r0, r4
    7e48:	f011 fd1c 	bl	19884 <bt_le_create_conn>
	if (err) {
    7e4c:	4605      	mov	r5, r0
    7e4e:	b168      	cbz	r0, 7e6c <bt_conn_le_create+0x138>
		conn->err = 0;
    7e50:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7e52:	4620      	mov	r0, r4
    7e54:	4631      	mov	r1, r6
		conn->err = 0;
    7e56:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7e58:	f7ff fdee 	bl	7a38 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    7e5c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7e60:	f011 fe1c 	bl	19a9c <atomic_dec>
		bt_le_scan_update(false);
    7e64:	4630      	mov	r0, r6
    7e66:	f7fe f8bf 	bl	5fe8 <bt_le_scan_update>
		return err;
    7e6a:	e775      	b.n	7d58 <bt_conn_le_create+0x24>
	*ret_conn = conn;
    7e6c:	6034      	str	r4, [r6, #0]
	return 0;
    7e6e:	e773      	b.n	7d58 <bt_conn_le_create+0x24>
		return -EAGAIN;
    7e70:	f06f 050a 	mvn.w	r5, #10
    7e74:	e770      	b.n	7d58 <bt_conn_le_create+0x24>
		return -EALREADY;
    7e76:	f06f 0544 	mvn.w	r5, #68	; 0x44
    7e7a:	e76d      	b.n	7d58 <bt_conn_le_create+0x24>
		return -ENOMEM;
    7e7c:	f06f 050b 	mvn.w	r5, #11
    7e80:	e76a      	b.n	7d58 <bt_conn_le_create+0x24>
    7e82:	bf00      	nop
    7e84:	20000094 	.word	0x20000094
    7e88:	20000000 	.word	0x20000000

00007e8c <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7e8c:	b570      	push	{r4, r5, r6, lr}
    7e8e:	4606      	mov	r6, r0
    7e90:	4835      	ldr	r0, [pc, #212]	; (7f68 <bt_le_set_auto_conn+0xdc>)
    7e92:	460d      	mov	r5, r1
    7e94:	f011 fdff 	bl	19a96 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7e98:	0780      	lsls	r0, r0, #30
    7e9a:	d55e      	bpl.n	7f5a <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    7e9c:	b929      	cbnz	r1, 7eaa <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    7e9e:	f011 fcef 	bl	19880 <bt_le_scan_random_addr_check>
    7ea2:	b940      	cbnz	r0, 7eb6 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    7ea4:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    7ea8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    7eaa:	4608      	mov	r0, r1
    7eac:	f011 fd07 	bl	198be <bt_le_conn_params_valid>
    7eb0:	2800      	cmp	r0, #0
    7eb2:	d1f4      	bne.n	7e9e <bt_le_set_auto_conn+0x12>
    7eb4:	e7f6      	b.n	7ea4 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    7eb6:	4631      	mov	r1, r6
    7eb8:	2000      	movs	r0, #0
    7eba:	f7ff fecd 	bl	7c58 <bt_conn_lookup_addr_le>
	if (!conn) {
    7ebe:	4604      	mov	r4, r0
    7ec0:	b928      	cbnz	r0, 7ece <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    7ec2:	4631      	mov	r1, r6
    7ec4:	f7ff fd7e 	bl	79c4 <bt_conn_add_le>
		if (!conn) {
    7ec8:	4604      	mov	r4, r0
    7eca:	2800      	cmp	r0, #0
    7ecc:	d048      	beq.n	7f60 <bt_le_set_auto_conn+0xd4>
	if (param) {
    7ece:	1d23      	adds	r3, r4, #4
    7ed0:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
    7ed4:	b365      	cbz	r5, 7f30 <bt_le_set_auto_conn+0xa4>
	conn->le.interval_min = param->interval_min;
    7ed6:	882a      	ldrh	r2, [r5, #0]
    7ed8:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    7edc:	886a      	ldrh	r2, [r5, #2]
    7ede:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    7ee2:	88aa      	ldrh	r2, [r5, #4]
    7ee4:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    7ee8:	88ea      	ldrh	r2, [r5, #6]
    7eea:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7eee:	e8d3 2fef 	ldaex	r2, [r3]
    7ef2:	f042 0101 	orr.w	r1, r2, #1
    7ef6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7efa:	2800      	cmp	r0, #0
    7efc:	d1f7      	bne.n	7eee <bt_le_set_auto_conn+0x62>
		if (!atomic_test_and_set_bit(conn->flags,
    7efe:	07d1      	lsls	r1, r2, #31
    7f00:	d402      	bmi.n	7f08 <bt_le_set_auto_conn+0x7c>
			bt_conn_ref(conn);
    7f02:	4620      	mov	r0, r4
    7f04:	f011 feb0 	bl	19c68 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    7f08:	7b63      	ldrb	r3, [r4, #13]
    7f0a:	b963      	cbnz	r3, 7f26 <bt_le_set_auto_conn+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7f0c:	4816      	ldr	r0, [pc, #88]	; (7f68 <bt_le_set_auto_conn+0xdc>)
    7f0e:	f011 fdc2 	bl	19a96 <atomic_get>
    7f12:	0783      	lsls	r3, r0, #30
    7f14:	d507      	bpl.n	7f26 <bt_le_set_auto_conn+0x9a>
		if (param) {
    7f16:	b11d      	cbz	r5, 7f20 <bt_le_set_auto_conn+0x94>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7f18:	2102      	movs	r1, #2
    7f1a:	4620      	mov	r0, r4
    7f1c:	f7ff fd8c 	bl	7a38 <bt_conn_set_state>
		bt_le_scan_update(false);
    7f20:	2000      	movs	r0, #0
    7f22:	f7fe f861 	bl	5fe8 <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    7f26:	4630      	mov	r0, r6
    7f28:	f011 fdb8 	bl	19a9c <atomic_dec>
	return 0;
    7f2c:	2000      	movs	r0, #0
    7f2e:	e7bb      	b.n	7ea8 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f30:	e8d3 2fef 	ldaex	r2, [r3]
    7f34:	f022 0101 	bic.w	r1, r2, #1
    7f38:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7f3c:	2800      	cmp	r0, #0
    7f3e:	d1f7      	bne.n	7f30 <bt_le_set_auto_conn+0xa4>
		if (atomic_test_and_clear_bit(conn->flags,
    7f40:	07d2      	lsls	r2, r2, #31
    7f42:	d5e1      	bpl.n	7f08 <bt_le_set_auto_conn+0x7c>
	atomic_val_t old = atomic_dec(&conn->ref);
    7f44:	4630      	mov	r0, r6
    7f46:	f011 fda9 	bl	19a9c <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    7f4a:	7b63      	ldrb	r3, [r4, #13]
    7f4c:	2b02      	cmp	r3, #2
    7f4e:	d1db      	bne.n	7f08 <bt_le_set_auto_conn+0x7c>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7f50:	4629      	mov	r1, r5
    7f52:	4620      	mov	r0, r4
    7f54:	f7ff fd70 	bl	7a38 <bt_conn_set_state>
    7f58:	e7d6      	b.n	7f08 <bt_le_set_auto_conn+0x7c>
		return -EAGAIN;
    7f5a:	f06f 000a 	mvn.w	r0, #10
    7f5e:	e7a3      	b.n	7ea8 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    7f60:	f06f 000b 	mvn.w	r0, #11
    7f64:	e7a0      	b.n	7ea8 <bt_le_set_auto_conn+0x1c>
    7f66:	bf00      	nop
    7f68:	20000094 	.word	0x20000094

00007f6c <bt_conn_disconnect>:
{
    7f6c:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7f6e:	7883      	ldrb	r3, [r0, #2]
{
    7f70:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7f72:	2b01      	cmp	r3, #1
{
    7f74:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7f76:	d103      	bne.n	7f80 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7f78:	2100      	movs	r1, #0
    7f7a:	3088      	adds	r0, #136	; 0x88
    7f7c:	f7ff ff86 	bl	7e8c <bt_le_set_auto_conn>
	switch (conn->state) {
    7f80:	7b63      	ldrb	r3, [r4, #13]
    7f82:	3b02      	subs	r3, #2
    7f84:	2b06      	cmp	r3, #6
    7f86:	d805      	bhi.n	7f94 <bt_conn_disconnect+0x28>
    7f88:	e8df f003 	tbb	[pc, r3]
    7f8c:	12040408 	.word	0x12040408
    7f90:	2a22      	.short	0x2a22
    7f92:	10          	.byte	0x10
    7f93:	00          	.byte	0x00
    7f94:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    7f98:	4628      	mov	r0, r5
    7f9a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7f9c:	4620      	mov	r0, r4
    7f9e:	2100      	movs	r1, #0
		conn->err = reason;
    7fa0:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7fa2:	f7ff fd49 	bl	7a38 <bt_conn_set_state>
			bt_le_scan_update(false);
    7fa6:	2000      	movs	r0, #0
    7fa8:	f7fe f81e 	bl	5fe8 <bt_le_scan_update>
		return 0;
    7fac:	2500      	movs	r5, #0
    7fae:	e7f3      	b.n	7f98 <bt_conn_disconnect+0x2c>
    7fb0:	4911      	ldr	r1, [pc, #68]	; (7ff8 <bt_conn_disconnect+0x8c>)
    7fb2:	4b12      	ldr	r3, [pc, #72]	; (7ffc <bt_conn_disconnect+0x90>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    7fb4:	4812      	ldr	r0, [pc, #72]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fb6:	1a5b      	subs	r3, r3, r1
    7fb8:	08db      	lsrs	r3, r3, #3
    7fba:	019b      	lsls	r3, r3, #6
    7fbc:	f043 0102 	orr.w	r1, r3, #2
    7fc0:	f00f ff84 	bl	17ecc <log_0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7fc4:	2100      	movs	r1, #0
    7fc6:	4620      	mov	r0, r4
		conn->err = reason;
    7fc8:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7fca:	f7ff fd35 	bl	7a38 <bt_conn_set_state>
		return 0;
    7fce:	e7ed      	b.n	7fac <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->deferred_work);
    7fd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7fd4:	f01a fdc6 	bl	22b64 <k_delayed_work_cancel>
}
    7fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    7fdc:	f7fd be58 	b.w	5c90 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    7fe0:	4629      	mov	r1, r5
    7fe2:	8820      	ldrh	r0, [r4, #0]
    7fe4:	f011 fc50 	bl	19888 <bt_hci_disconnect>
	if (err) {
    7fe8:	4605      	mov	r5, r0
    7fea:	2800      	cmp	r0, #0
    7fec:	d1d4      	bne.n	7f98 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7fee:	2108      	movs	r1, #8
    7ff0:	4620      	mov	r0, r4
    7ff2:	f7ff fd21 	bl	7a38 <bt_conn_set_state>
	return 0;
    7ff6:	e7cf      	b.n	7f98 <bt_conn_disconnect+0x2c>
    7ff8:	000232ec 	.word	0x000232ec
    7ffc:	000232fc 	.word	0x000232fc
    8000:	00025f59 	.word	0x00025f59

00008004 <send_conn_le_param_update>:
{
    8004:	b538      	push	{r3, r4, r5, lr}
    8006:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8008:	4608      	mov	r0, r1
{
    800a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    800c:	f011 fc57 	bl	198be <bt_le_conn_params_valid>
    8010:	b308      	cbz	r0, 8056 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8012:	4b12      	ldr	r3, [pc, #72]	; (805c <send_conn_le_param_update+0x58>)
    8014:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    8018:	0799      	lsls	r1, r3, #30
    801a:	d407      	bmi.n	802c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    801c:	78e3      	ldrb	r3, [r4, #3]
    801e:	b173      	cbz	r3, 803e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    8020:	4629      	mov	r1, r5
    8022:	4620      	mov	r0, r4
}
    8024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8028:	f000 bb12 	b.w	8650 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    802c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    8030:	079a      	lsls	r2, r3, #30
    8032:	d5f3      	bpl.n	801c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8034:	1d20      	adds	r0, r4, #4
    8036:	f011 fd2e 	bl	19a96 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    803a:	0543      	lsls	r3, r0, #21
    803c:	d4ee      	bmi.n	801c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    803e:	4629      	mov	r1, r5
    8040:	4620      	mov	r0, r4
    8042:	f011 fe5d 	bl	19d00 <bt_conn_le_conn_update>
		if (rc == 0) {
    8046:	b928      	cbnz	r0, 8054 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    8048:	88ab      	ldrh	r3, [r5, #4]
    804a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    804e:	88eb      	ldrh	r3, [r5, #6]
    8050:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    8054:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8056:	f06f 0015 	mvn.w	r0, #21
    805a:	e7fb      	b.n	8054 <send_conn_le_param_update+0x50>
    805c:	20000000 	.word	0x20000000

00008060 <deferred_work>:
{
    8060:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    8062:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    8066:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    8068:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    806c:	b99b      	cbnz	r3, 8096 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    806e:	4630      	mov	r0, r6
    8070:	f011 fea7 	bl	19dc2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    8074:	4b1b      	ldr	r3, [pc, #108]	; (80e4 <deferred_work+0x84>)
    8076:	681d      	ldr	r5, [r3, #0]
    8078:	b92d      	cbnz	r5, 8086 <deferred_work+0x26>
	atomic_val_t old = atomic_dec(&conn->ref);
    807a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    807e:	f011 fd0d 	bl	19a9c <atomic_dec>
}
    8082:	b002      	add	sp, #8
    8084:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    8086:	686b      	ldr	r3, [r5, #4]
    8088:	b11b      	cbz	r3, 8092 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    808a:	4630      	mov	r0, r6
    808c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    8090:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8092:	69ed      	ldr	r5, [r5, #28]
    8094:	e7f0      	b.n	8078 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    8096:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    809a:	2b01      	cmp	r3, #1
    809c:	d1f1      	bne.n	8082 <deferred_work+0x22>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    809e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    80a2:	b913      	cbnz	r3, 80aa <deferred_work+0x4a>
		bt_le_create_conn_cancel();
    80a4:	f7fd fdf4 	bl	5c90 <bt_le_create_conn_cancel>
		return;
    80a8:	e7eb      	b.n	8082 <deferred_work+0x22>
	if (atomic_test_and_clear_bit(conn->flags,
    80aa:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    80ae:	e8d5 3fef 	ldaex	r3, [r5]
    80b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    80b6:	e8c5 2fe1 	stlex	r1, r2, [r5]
    80ba:	2900      	cmp	r1, #0
    80bc:	d1f7      	bne.n	80ae <deferred_work+0x4e>
    80be:	059b      	lsls	r3, r3, #22
    80c0:	d507      	bpl.n	80d2 <deferred_work+0x72>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    80c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		send_conn_le_param_update(conn, param);
    80c4:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    80c6:	9300      	str	r3, [sp, #0]
    80c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
		send_conn_le_param_update(conn, param);
    80ca:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    80cc:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    80ce:	f7ff ff99 	bl	8004 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80d2:	e8d5 3fef 	ldaex	r3, [r5]
    80d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    80da:	e8c5 3fe2 	stlex	r2, r3, [r5]
    80de:	2a00      	cmp	r2, #0
    80e0:	d0cf      	beq.n	8082 <deferred_work+0x22>
    80e2:	e7f6      	b.n	80d2 <deferred_work+0x72>
    80e4:	20025a14 	.word	0x20025a14

000080e8 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    80e8:	b538      	push	{r3, r4, r5, lr}
    80ea:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    80ec:	490c      	ldr	r1, [pc, #48]	; (8120 <bt_conn_create_pdu_timeout+0x38>)
    80ee:	2800      	cmp	r0, #0
    80f0:	bf08      	it	eq
    80f2:	4608      	moveq	r0, r1
    80f4:	f013 faef 	bl	1b6d6 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    80f8:	4604      	mov	r4, r0
    80fa:	b958      	cbnz	r0, 8114 <bt_conn_create_pdu_timeout+0x2c>
    80fc:	4909      	ldr	r1, [pc, #36]	; (8124 <bt_conn_create_pdu_timeout+0x3c>)
    80fe:	4b0a      	ldr	r3, [pc, #40]	; (8128 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    8100:	480a      	ldr	r0, [pc, #40]	; (812c <bt_conn_create_pdu_timeout+0x44>)
    8102:	1ac9      	subs	r1, r1, r3
    8104:	08c9      	lsrs	r1, r1, #3
    8106:	0189      	lsls	r1, r1, #6
    8108:	f041 0102 	orr.w	r1, r1, #2
    810c:	f00f fede 	bl	17ecc <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    8110:	4620      	mov	r0, r4
    8112:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    8114:	1d69      	adds	r1, r5, #5
    8116:	3008      	adds	r0, #8
    8118:	f013 fb02 	bl	1b720 <net_buf_simple_reserve>
	return buf;
    811c:	e7f8      	b.n	8110 <bt_conn_create_pdu_timeout+0x28>
    811e:	bf00      	nop
    8120:	200006f0 	.word	0x200006f0
    8124:	000232fc 	.word	0x000232fc
    8128:	000232ec 	.word	0x000232ec
    812c:	00025f80 	.word	0x00025f80

00008130 <bt_conn_create_frag_timeout>:
{
    8130:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    8132:	4801      	ldr	r0, [pc, #4]	; (8138 <bt_conn_create_frag_timeout+0x8>)
    8134:	f7ff bfd8 	b.w	80e8 <bt_conn_create_pdu_timeout>
    8138:	20000740 	.word	0x20000740

0000813c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8140:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    8142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    814a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    814c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    814e:	f7ff ffef 	bl	8130 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    8152:	7833      	ldrb	r3, [r6, #0]
		frag = bt_conn_create_frag(0);
    8154:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8156:	2b07      	cmp	r3, #7
    8158:	f04f 0600 	mov.w	r6, #0
    815c:	d005      	beq.n	816a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    815e:	f004 fbc9 	bl	c8f4 <net_buf_unref>
		return NULL;
    8162:	4635      	mov	r5, r6
}
    8164:	4628      	mov	r0, r5
    8166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    816a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    816c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    8170:	4e0c      	ldr	r6, [pc, #48]	; (81a4 <create_frag.isra.0+0x68>)
    8172:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8174:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    8178:	f013 fb5f 	bl	1b83a <net_buf_simple_tailroom>
    817c:	4580      	cmp	r8, r0
    817e:	d20c      	bcs.n	819a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    8180:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8184:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8188:	4632      	mov	r2, r6
    818a:	4638      	mov	r0, r7
    818c:	f013 fb05 	bl	1b79a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    8190:	4631      	mov	r1, r6
    8192:	4620      	mov	r0, r4
    8194:	f013 fb2d 	bl	1b7f2 <net_buf_simple_pull>
    8198:	e7e4      	b.n	8164 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    819a:	4638      	mov	r0, r7
    819c:	f013 fb4d 	bl	1b83a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    81a0:	b286      	uxth	r6, r0
    81a2:	e7ef      	b.n	8184 <create_frag.isra.0+0x48>
    81a4:	20000000 	.word	0x20000000

000081a8 <bt_conn_process_tx>:
{
    81a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    81aa:	7b43      	ldrb	r3, [r0, #13]
{
    81ac:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    81ae:	b973      	cbnz	r3, 81ce <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    81b0:	1d03      	adds	r3, r0, #4
    81b2:	e8d3 2fef 	ldaex	r2, [r3]
    81b6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    81ba:	e8c3 1fe4 	stlex	r4, r1, [r3]
    81be:	2c00      	cmp	r4, #0
    81c0:	d1f7      	bne.n	81b2 <bt_conn_process_tx+0xa>
    81c2:	0653      	lsls	r3, r2, #25
    81c4:	d503      	bpl.n	81ce <bt_conn_process_tx+0x26>
}
    81c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    81ca:	f7ff baa9 	b.w	7720 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    81ce:	2200      	movs	r2, #0
    81d0:	2300      	movs	r3, #0
    81d2:	f105 0034 	add.w	r0, r5, #52	; 0x34
    81d6:	f013 fa83 	bl	1b6e0 <net_buf_get>
	BT_ASSERT(buf);
    81da:	4604      	mov	r4, r0
    81dc:	b960      	cbnz	r0, 81f8 <bt_conn_process_tx+0x50>
    81de:	f240 535f 	movw	r3, #1375	; 0x55f
    81e2:	4a1f      	ldr	r2, [pc, #124]	; (8260 <bt_conn_process_tx+0xb8>)
    81e4:	491f      	ldr	r1, [pc, #124]	; (8264 <bt_conn_process_tx+0xbc>)
    81e6:	4820      	ldr	r0, [pc, #128]	; (8268 <bt_conn_process_tx+0xc0>)
    81e8:	f00f fa49 	bl	1767e <printk>
    81ec:	4040      	eors	r0, r0
    81ee:	f380 8811 	msr	BASEPRI, r0
    81f2:	f04f 0003 	mov.w	r0, #3
    81f6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    81f8:	4f1c      	ldr	r7, [pc, #112]	; (826c <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    81fa:	89a1      	ldrh	r1, [r4, #12]
    81fc:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    8200:	4291      	cmp	r1, r2
    8202:	d807      	bhi.n	8214 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    8204:	2300      	movs	r3, #0
    8206:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8208:	4621      	mov	r1, r4
    820a:	4628      	mov	r0, r5
    820c:	f7ff f94e 	bl	74ac <send_frag>
	if (!send_buf(conn, buf)) {
    8210:	b140      	cbz	r0, 8224 <bt_conn_process_tx+0x7c>
}
    8212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    8214:	f105 060d 	add.w	r6, r5, #13
    8218:	4621      	mov	r1, r4
    821a:	4630      	mov	r0, r6
    821c:	f7ff ff8e 	bl	813c <create_frag.isra.0>
	if (!frag) {
    8220:	4601      	mov	r1, r0
    8222:	b920      	cbnz	r0, 822e <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    8224:	4620      	mov	r0, r4
}
    8226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    822a:	f004 bb63 	b.w	c8f4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    822e:	2301      	movs	r3, #1
    8230:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8232:	4628      	mov	r0, r5
    8234:	f7ff f93a 	bl	74ac <send_frag>
    8238:	2800      	cmp	r0, #0
    823a:	d0f3      	beq.n	8224 <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    823c:	89a2      	ldrh	r2, [r4, #12]
    823e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    8242:	429a      	cmp	r2, r3
    8244:	d802      	bhi.n	824c <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
    8246:	2300      	movs	r3, #0
    8248:	2203      	movs	r2, #3
    824a:	e7dd      	b.n	8208 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    824c:	4621      	mov	r1, r4
    824e:	4630      	mov	r0, r6
    8250:	f7ff ff74 	bl	813c <create_frag.isra.0>
		if (!frag) {
    8254:	4601      	mov	r1, r0
    8256:	2800      	cmp	r0, #0
    8258:	d0e4      	beq.n	8224 <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    825a:	2301      	movs	r3, #1
    825c:	461a      	mov	r2, r3
    825e:	e7e8      	b.n	8232 <bt_conn_process_tx+0x8a>
    8260:	00025fa9 	.word	0x00025fa9
    8264:	00025341 	.word	0x00025341
    8268:	0002560f 	.word	0x0002560f
    826c:	20000000 	.word	0x20000000

00008270 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    8270:	4b03      	ldr	r3, [pc, #12]	; (8280 <bt_conn_index+0x10>)
    8272:	1ac0      	subs	r0, r0, r3
    8274:	4b03      	ldr	r3, [pc, #12]	; (8284 <bt_conn_index+0x14>)
    8276:	10c0      	asrs	r0, r0, #3
    8278:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    827a:	b2c0      	uxtb	r0, r0
    827c:	4770      	bx	lr
    827e:	bf00      	nop
    8280:	20000bb8 	.word	0x20000bb8
    8284:	c28f5c29 	.word	0xc28f5c29

00008288 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    8288:	b910      	cbnz	r0, 8290 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    828a:	4802      	ldr	r0, [pc, #8]	; (8294 <bt_conn_lookup_index+0xc>)
    828c:	f011 bcec 	b.w	19c68 <bt_conn_ref>
}
    8290:	2000      	movs	r0, #0
    8292:	4770      	bx	lr
    8294:	20000bb8 	.word	0x20000bb8

00008298 <bt_conn_init>:

int bt_conn_init(void)
{
    8298:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    829a:	4914      	ldr	r1, [pc, #80]	; (82ec <bt_conn_init+0x54>)
    829c:	4814      	ldr	r0, [pc, #80]	; (82f0 <bt_conn_init+0x58>)
    829e:	f01a fa64 	bl	2276a <k_queue_append>
    82a2:	4914      	ldr	r1, [pc, #80]	; (82f4 <bt_conn_init+0x5c>)
    82a4:	4812      	ldr	r0, [pc, #72]	; (82f0 <bt_conn_init+0x58>)
    82a6:	f01a fa60 	bl	2276a <k_queue_append>
    82aa:	4913      	ldr	r1, [pc, #76]	; (82f8 <bt_conn_init+0x60>)
    82ac:	4810      	ldr	r0, [pc, #64]	; (82f0 <bt_conn_init+0x58>)
    82ae:	f01a fa5c 	bl	2276a <k_queue_append>
	}

	bt_att_init();
    82b2:	f012 f8eb 	bl	1a48c <bt_att_init>

	err = bt_smp_init();
    82b6:	f004 f9b5 	bl	c624 <bt_smp_init>
	if (err) {
    82ba:	4605      	mov	r5, r0
    82bc:	b9a0      	cbnz	r0, 82e8 <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    82be:	f011 fe03 	bl	19ec8 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    82c2:	480e      	ldr	r0, [pc, #56]	; (82fc <bt_conn_init+0x64>)
    82c4:	f011 fcd0 	bl	19c68 <bt_conn_ref>

			if (!conn) {
    82c8:	4604      	mov	r4, r0
    82ca:	b168      	cbz	r0, 82e8 <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    82cc:	3004      	adds	r0, #4
    82ce:	f011 fbe2 	bl	19a96 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    82d2:	07c3      	lsls	r3, r0, #31
    82d4:	d504      	bpl.n	82e0 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    82d6:	2102      	movs	r1, #2
    82d8:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
    82da:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    82dc:	f7ff fbac 	bl	7a38 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    82e0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    82e4:	f011 fbda 	bl	19a9c <atomic_dec>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    82e8:	4628      	mov	r0, r5
    82ea:	bd38      	pop	{r3, r4, r5, pc}
    82ec:	20025a18 	.word	0x20025a18
    82f0:	200006b0 	.word	0x200006b0
    82f4:	20025a28 	.word	0x20025a28
    82f8:	20025a38 	.word	0x20025a38
    82fc:	20000bb8 	.word	0x20000bb8

00008300 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    8300:	4a0b      	ldr	r2, [pc, #44]	; (8330 <l2cap_accept+0x30>)
{
    8302:	b508      	push	{r3, lr}
    8304:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    8306:	6810      	ldr	r0, [r2, #0]
    8308:	b918      	cbnz	r0, 8312 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    830a:	4b0a      	ldr	r3, [pc, #40]	; (8334 <l2cap_accept+0x34>)
    830c:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    830e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    8310:	bd08      	pop	{r3, pc}
    8312:	4909      	ldr	r1, [pc, #36]	; (8338 <l2cap_accept+0x38>)
    8314:	4a09      	ldr	r2, [pc, #36]	; (833c <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    8316:	480a      	ldr	r0, [pc, #40]	; (8340 <l2cap_accept+0x40>)
    8318:	1a52      	subs	r2, r2, r1
    831a:	08d2      	lsrs	r2, r2, #3
    831c:	0192      	lsls	r2, r2, #6
    831e:	4619      	mov	r1, r3
    8320:	f042 0201 	orr.w	r2, r2, #1
    8324:	f00f fddf 	bl	17ee6 <log_1>
	return -ENOMEM;
    8328:	f06f 000b 	mvn.w	r0, #11
    832c:	e7f0      	b.n	8310 <l2cap_accept+0x10>
    832e:	bf00      	nop
    8330:	20000c80 	.word	0x20000c80
    8334:	00023900 	.word	0x00023900
    8338:	000232ec 	.word	0x000232ec
    833c:	00023334 	.word	0x00023334
    8340:	00026036 	.word	0x00026036

00008344 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    8344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8346:	4605      	mov	r5, r0
    8348:	460f      	mov	r7, r1
    834a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    834c:	2300      	movs	r3, #0
    834e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8352:	2104      	movs	r1, #4
    8354:	2000      	movs	r0, #0
    8356:	f7ff fec7 	bl	80e8 <bt_conn_create_pdu_timeout>
	if (!buf) {
    835a:	4604      	mov	r4, r0
    835c:	b960      	cbnz	r0, 8378 <l2cap_create_le_sig_pdu.isra.0+0x34>
    835e:	4a0a      	ldr	r2, [pc, #40]	; (8388 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    8360:	4b0a      	ldr	r3, [pc, #40]	; (838c <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    8362:	4629      	mov	r1, r5
    8364:	1ad2      	subs	r2, r2, r3
    8366:	08d2      	lsrs	r2, r2, #3
    8368:	0192      	lsls	r2, r2, #6
    836a:	4809      	ldr	r0, [pc, #36]	; (8390 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    836c:	f042 0201 	orr.w	r2, r2, #1
    8370:	f00f fdb9 	bl	17ee6 <log_1>
}
    8374:	4620      	mov	r0, r4
    8376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    8378:	2104      	movs	r1, #4
    837a:	3008      	adds	r0, #8
    837c:	f013 fa07 	bl	1b78e <net_buf_simple_add>
	hdr->code = code;
    8380:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    8382:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    8384:	8046      	strh	r6, [r0, #2]
	return buf;
    8386:	e7f5      	b.n	8374 <l2cap_create_le_sig_pdu.isra.0+0x30>
    8388:	00023334 	.word	0x00023334
    838c:	000232ec 	.word	0x000232ec
    8390:	0002605d 	.word	0x0002605d

00008394 <l2cap_rtx_timeout>:
{
    8394:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    8396:	4604      	mov	r4, r0
    8398:	4b0a      	ldr	r3, [pc, #40]	; (83c4 <l2cap_rtx_timeout+0x30>)
    839a:	4a0b      	ldr	r2, [pc, #44]	; (83c8 <l2cap_rtx_timeout+0x34>)
    839c:	f854 5d10 	ldr.w	r5, [r4, #-16]!
    83a0:	1ad2      	subs	r2, r2, r3
    83a2:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
    83a4:	0192      	lsls	r2, r2, #6
    83a6:	4621      	mov	r1, r4
    83a8:	4808      	ldr	r0, [pc, #32]	; (83cc <l2cap_rtx_timeout+0x38>)
    83aa:	f042 0201 	orr.w	r2, r2, #1
    83ae:	f00f fd9a 	bl	17ee6 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    83b2:	4628      	mov	r0, r5
    83b4:	4621      	mov	r1, r4
    83b6:	f011 fccd 	bl	19d54 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    83ba:	4620      	mov	r0, r4
}
    83bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    83c0:	f011 bcea 	b.w	19d98 <bt_l2cap_chan_del>
    83c4:	000232ec 	.word	0x000232ec
    83c8:	00023334 	.word	0x00023334
    83cc:	00026085 	.word	0x00026085

000083d0 <bt_l2cap_connected>:
{
    83d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    83d4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    83d6:	4e26      	ldr	r6, [pc, #152]	; (8470 <bt_l2cap_connected+0xa0>)
    83d8:	4f26      	ldr	r7, [pc, #152]	; (8474 <bt_l2cap_connected+0xa4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    83da:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8478 <bt_l2cap_connected+0xa8>
    83de:	42be      	cmp	r6, r7
    83e0:	d302      	bcc.n	83e8 <bt_l2cap_connected+0x18>
}
    83e2:	b003      	add	sp, #12
    83e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    83e8:	4628      	mov	r0, r5
    83ea:	6873      	ldr	r3, [r6, #4]
    83ec:	a901      	add	r1, sp, #4
    83ee:	4798      	blx	r3
    83f0:	2800      	cmp	r0, #0
    83f2:	db38      	blt.n	8466 <bt_l2cap_connected+0x96>
		ch = BT_L2CAP_LE_CHAN(chan);
    83f4:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    83f6:	8833      	ldrh	r3, [r6, #0]
    83f8:	2230      	movs	r2, #48	; 0x30
    83fa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    83fe:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    8402:	2100      	movs	r1, #0
    8404:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8408:	f8d6 9008 	ldr.w	r9, [r6, #8]
    840c:	f010 ff27 	bl	1925e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8410:	2200      	movs	r2, #0
    8412:	f8c4 8014 	str.w	r8, [r4, #20]
    8416:	f104 0340 	add.w	r3, r4, #64	; 0x40
    841a:	e8d3 1fef 	ldaex	r1, [r3]
    841e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    8422:	2800      	cmp	r0, #0
    8424:	d1f9      	bne.n	841a <bt_l2cap_connected+0x4a>
	parent->next = child;
    8426:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    8428:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    842a:	f104 0308 	add.w	r3, r4, #8
    842e:	b9e2      	cbnz	r2, 846a <bt_l2cap_connected+0x9a>
	list->head = node;
    8430:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    8434:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8436:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    8438:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    843a:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    843e:	681b      	ldr	r3, [r3, #0]
    8440:	b103      	cbz	r3, 8444 <bt_l2cap_connected+0x74>
			chan->ops->connected(chan);
    8442:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8444:	9b01      	ldr	r3, [sp, #4]
    8446:	3340      	adds	r3, #64	; 0x40
    8448:	e8d3 2fef 	ldaex	r2, [r3]
    844c:	f042 0201 	orr.w	r2, r2, #1
    8450:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8454:	2900      	cmp	r1, #0
    8456:	d1f7      	bne.n	8448 <bt_l2cap_connected+0x78>
		if (chan->ops->status) {
    8458:	9801      	ldr	r0, [sp, #4]
    845a:	6843      	ldr	r3, [r0, #4]
    845c:	699b      	ldr	r3, [r3, #24]
    845e:	b113      	cbz	r3, 8466 <bt_l2cap_connected+0x96>
			chan->ops->status(chan, chan->status);
    8460:	f100 0140 	add.w	r1, r0, #64	; 0x40
    8464:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8466:	360c      	adds	r6, #12
    8468:	e7b9      	b.n	83de <bt_l2cap_connected+0xe>
	parent->next = child;
    846a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    846c:	652b      	str	r3, [r5, #80]	; 0x50
}
    846e:	e7e1      	b.n	8434 <bt_l2cap_connected+0x64>
    8470:	000232b8 	.word	0x000232b8
    8474:	000232dc 	.word	0x000232dc
    8478:	00008395 	.word	0x00008395

0000847c <l2cap_recv>:
{
    847c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    847e:	898b      	ldrh	r3, [r1, #12]
{
    8480:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
    8482:	2b03      	cmp	r3, #3
{
    8484:	460d      	mov	r5, r1
    8486:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
    8488:	d80a      	bhi.n	84a0 <l2cap_recv+0x24>
    848a:	494d      	ldr	r1, [pc, #308]	; (85c0 <l2cap_recv+0x144>)
    848c:	4b4d      	ldr	r3, [pc, #308]	; (85c4 <l2cap_recv+0x148>)
		BT_ERR("Too small L2CAP signaling PDU");
    848e:	484e      	ldr	r0, [pc, #312]	; (85c8 <l2cap_recv+0x14c>)
    8490:	1ac9      	subs	r1, r1, r3
    8492:	08c9      	lsrs	r1, r1, #3
    8494:	0189      	lsls	r1, r1, #6
    8496:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    849a:	f00f fd17 	bl	17ecc <log_0>
		return 0;
    849e:	e013      	b.n	84c8 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
    84a0:	2104      	movs	r1, #4
    84a2:	f105 0008 	add.w	r0, r5, #8
    84a6:	f013 f9ac 	bl	1b802 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    84aa:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    84ac:	8842      	ldrh	r2, [r0, #2]
    84ae:	4604      	mov	r4, r0
	if (buf->len != len) {
    84b0:	428a      	cmp	r2, r1
    84b2:	d00c      	beq.n	84ce <l2cap_recv+0x52>
    84b4:	4843      	ldr	r0, [pc, #268]	; (85c4 <l2cap_recv+0x148>)
    84b6:	4b42      	ldr	r3, [pc, #264]	; (85c0 <l2cap_recv+0x144>)
    84b8:	1a1b      	subs	r3, r3, r0
    84ba:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    84bc:	019b      	lsls	r3, r3, #6
    84be:	4843      	ldr	r0, [pc, #268]	; (85cc <l2cap_recv+0x150>)
    84c0:	f043 0301 	orr.w	r3, r3, #1
    84c4:	f00f fd23 	bl	17f0e <log_2>
}
    84c8:	2000      	movs	r0, #0
    84ca:	b005      	add	sp, #20
    84cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    84ce:	7841      	ldrb	r1, [r0, #1]
    84d0:	b941      	cbnz	r1, 84e4 <l2cap_recv+0x68>
    84d2:	493b      	ldr	r1, [pc, #236]	; (85c0 <l2cap_recv+0x144>)
    84d4:	4b3b      	ldr	r3, [pc, #236]	; (85c4 <l2cap_recv+0x148>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    84d6:	483e      	ldr	r0, [pc, #248]	; (85d0 <l2cap_recv+0x154>)
    84d8:	1ac9      	subs	r1, r1, r3
    84da:	08c9      	lsrs	r1, r1, #3
    84dc:	0189      	lsls	r1, r1, #6
    84de:	f041 0101 	orr.w	r1, r1, #1
    84e2:	e7da      	b.n	849a <l2cap_recv+0x1e>
	switch (hdr->code) {
    84e4:	7803      	ldrb	r3, [r0, #0]
    84e6:	2b12      	cmp	r3, #18
    84e8:	d01c      	beq.n	8524 <l2cap_recv+0xa8>
    84ea:	2b13      	cmp	r3, #19
    84ec:	d00f      	beq.n	850e <l2cap_recv+0x92>
    84ee:	2b01      	cmp	r3, #1
    84f0:	d0ea      	beq.n	84c8 <l2cap_recv+0x4c>
    84f2:	4934      	ldr	r1, [pc, #208]	; (85c4 <l2cap_recv+0x148>)
    84f4:	4a32      	ldr	r2, [pc, #200]	; (85c0 <l2cap_recv+0x144>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    84f6:	4837      	ldr	r0, [pc, #220]	; (85d4 <l2cap_recv+0x158>)
    84f8:	1a52      	subs	r2, r2, r1
    84fa:	08d2      	lsrs	r2, r2, #3
    84fc:	0192      	lsls	r2, r2, #6
    84fe:	4619      	mov	r1, r3
    8500:	f042 0202 	orr.w	r2, r2, #2
    8504:	f00f fcef 	bl	17ee6 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    8508:	7861      	ldrb	r1, [r4, #1]
    850a:	6830      	ldr	r0, [r6, #0]
    850c:	e019      	b.n	8542 <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
    850e:	2a01      	cmp	r2, #1
    8510:	d8da      	bhi.n	84c8 <l2cap_recv+0x4c>
    8512:	492b      	ldr	r1, [pc, #172]	; (85c0 <l2cap_recv+0x144>)
    8514:	4b2b      	ldr	r3, [pc, #172]	; (85c4 <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn param rsp");
    8516:	4830      	ldr	r0, [pc, #192]	; (85d8 <l2cap_recv+0x15c>)
    8518:	1ac9      	subs	r1, r1, r3
    851a:	08c9      	lsrs	r1, r1, #3
    851c:	0189      	lsls	r1, r1, #6
    851e:	f041 0101 	orr.w	r1, r1, #1
    8522:	e7ba      	b.n	849a <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    8524:	2a07      	cmp	r2, #7
    8526:	d808      	bhi.n	853a <l2cap_recv+0xbe>
    8528:	4925      	ldr	r1, [pc, #148]	; (85c0 <l2cap_recv+0x144>)
    852a:	4b26      	ldr	r3, [pc, #152]	; (85c4 <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn update param req");
    852c:	482b      	ldr	r0, [pc, #172]	; (85dc <l2cap_recv+0x160>)
    852e:	1ac9      	subs	r1, r1, r3
    8530:	08c9      	lsrs	r1, r1, #3
    8532:	0189      	lsls	r1, r1, #6
    8534:	f041 0101 	orr.w	r1, r1, #1
    8538:	e7af      	b.n	849a <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    853a:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    853c:	78e7      	ldrb	r7, [r4, #3]
    853e:	b11f      	cbz	r7, 8548 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8540:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    8542:	f011 fc8a 	bl	19e5a <l2cap_send_reject.constprop.0>
		break;
    8546:	e7bf      	b.n	84c8 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    8548:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    854a:	7850      	ldrb	r0, [r2, #1]
    854c:	7813      	ldrb	r3, [r2, #0]
    854e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8552:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    8556:	78d0      	ldrb	r0, [r2, #3]
    8558:	7893      	ldrb	r3, [r2, #2]
    855a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    855e:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8562:	7950      	ldrb	r0, [r2, #5]
    8564:	7913      	ldrb	r3, [r2, #4]
    8566:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    856a:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    856e:	7993      	ldrb	r3, [r2, #6]
    8570:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8572:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    8574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8578:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    857a:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    857e:	f7ff fee1 	bl	8344 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8582:	4605      	mov	r5, r0
    8584:	2800      	cmp	r0, #0
    8586:	d09f      	beq.n	84c8 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
    8588:	a902      	add	r1, sp, #8
    858a:	4620      	mov	r0, r4
    858c:	f7ff f870 	bl	7670 <le_param_req>
    8590:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
    8592:	2102      	movs	r1, #2
    8594:	f105 0008 	add.w	r0, r5, #8
    8598:	f013 f8f9 	bl	1b78e <net_buf_simple_add>
	if (accepted) {
    859c:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    85a0:	b2db      	uxtb	r3, r3
    85a2:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    85a4:	462a      	mov	r2, r5
    85a6:	463b      	mov	r3, r7
    85a8:	2105      	movs	r1, #5
    85aa:	4620      	mov	r0, r4
    85ac:	9700      	str	r7, [sp, #0]
    85ae:	f011 fc3b 	bl	19e28 <bt_l2cap_send_cb>
	if (accepted) {
    85b2:	2e00      	cmp	r6, #0
    85b4:	d088      	beq.n	84c8 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    85b6:	4620      	mov	r0, r4
    85b8:	a902      	add	r1, sp, #8
    85ba:	f011 fba1 	bl	19d00 <bt_conn_le_conn_update>
    85be:	e783      	b.n	84c8 <l2cap_recv+0x4c>
    85c0:	00023334 	.word	0x00023334
    85c4:	000232ec 	.word	0x000232ec
    85c8:	00026095 	.word	0x00026095
    85cc:	000260b3 	.word	0x000260b3
    85d0:	000260d4 	.word	0x000260d4
    85d4:	00026134 	.word	0x00026134
    85d8:	000260f5 	.word	0x000260f5
    85dc:	00026111 	.word	0x00026111

000085e0 <bt_l2cap_recv>:
{
    85e0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    85e2:	898b      	ldrh	r3, [r1, #12]
{
    85e4:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    85e6:	2b03      	cmp	r3, #3
{
    85e8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    85ea:	d80e      	bhi.n	860a <bt_l2cap_recv+0x2a>
    85ec:	4914      	ldr	r1, [pc, #80]	; (8640 <bt_l2cap_recv+0x60>)
    85ee:	4b15      	ldr	r3, [pc, #84]	; (8644 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    85f0:	4815      	ldr	r0, [pc, #84]	; (8648 <bt_l2cap_recv+0x68>)
    85f2:	1ac9      	subs	r1, r1, r3
    85f4:	08c9      	lsrs	r1, r1, #3
    85f6:	0189      	lsls	r1, r1, #6
    85f8:	f041 0101 	orr.w	r1, r1, #1
    85fc:	f00f fc66 	bl	17ecc <log_0>
	net_buf_unref(buf);
    8600:	4620      	mov	r0, r4
}
    8602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    8606:	f004 b975 	b.w	c8f4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    860a:	2104      	movs	r1, #4
    860c:	f104 0008 	add.w	r0, r4, #8
    8610:	f013 f8f7 	bl	1b802 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    8614:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8616:	4628      	mov	r0, r5
    8618:	f011 fc46 	bl	19ea8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    861c:	b950      	cbnz	r0, 8634 <bt_l2cap_recv+0x54>
    861e:	4b09      	ldr	r3, [pc, #36]	; (8644 <bt_l2cap_recv+0x64>)
    8620:	4a07      	ldr	r2, [pc, #28]	; (8640 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    8622:	480a      	ldr	r0, [pc, #40]	; (864c <bt_l2cap_recv+0x6c>)
    8624:	1ad2      	subs	r2, r2, r3
    8626:	08d2      	lsrs	r2, r2, #3
    8628:	0192      	lsls	r2, r2, #6
    862a:	f042 0202 	orr.w	r2, r2, #2
    862e:	f00f fc5a 	bl	17ee6 <log_1>
		net_buf_unref(buf);
    8632:	e7e5      	b.n	8600 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    8634:	6843      	ldr	r3, [r0, #4]
    8636:	4621      	mov	r1, r4
    8638:	691b      	ldr	r3, [r3, #16]
    863a:	4798      	blx	r3
    863c:	e7e0      	b.n	8600 <bt_l2cap_recv+0x20>
    863e:	bf00      	nop
    8640:	00023334 	.word	0x00023334
    8644:	000232ec 	.word	0x000232ec
    8648:	00026152 	.word	0x00026152
    864c:	0002616f 	.word	0x0002616f

00008650 <bt_l2cap_update_conn_param>:
{
    8650:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    8652:	4b15      	ldr	r3, [pc, #84]	; (86a8 <bt_l2cap_update_conn_param+0x58>)
{
    8654:	4605      	mov	r5, r0
	ident++;
    8656:	781a      	ldrb	r2, [r3, #0]
{
    8658:	460c      	mov	r4, r1
	ident++;
    865a:	3201      	adds	r2, #1
	if (!ident) {
    865c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    8660:	bf08      	it	eq
    8662:	2201      	moveq	r2, #1
    8664:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8666:	2012      	movs	r0, #18
    8668:	2208      	movs	r2, #8
    866a:	7819      	ldrb	r1, [r3, #0]
    866c:	f7ff fe6a 	bl	8344 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8670:	4606      	mov	r6, r0
    8672:	b1b0      	cbz	r0, 86a2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    8674:	2108      	movs	r1, #8
    8676:	4408      	add	r0, r1
    8678:	f013 f889 	bl	1b78e <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    867c:	8822      	ldrh	r2, [r4, #0]
    867e:	2105      	movs	r1, #5
    8680:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8682:	8862      	ldrh	r2, [r4, #2]
    8684:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8686:	88a2      	ldrh	r2, [r4, #4]
    8688:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    868a:	88e2      	ldrh	r2, [r4, #6]
    868c:	2400      	movs	r4, #0
    868e:	80c2      	strh	r2, [r0, #6]
    8690:	4623      	mov	r3, r4
    8692:	4632      	mov	r2, r6
    8694:	4628      	mov	r0, r5
    8696:	9400      	str	r4, [sp, #0]
    8698:	f011 fbc6 	bl	19e28 <bt_l2cap_send_cb>
	return 0;
    869c:	4620      	mov	r0, r4
}
    869e:	b002      	add	sp, #8
    86a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    86a2:	f06f 000b 	mvn.w	r0, #11
    86a6:	e7fa      	b.n	869e <bt_l2cap_update_conn_param+0x4e>
    86a8:	2002a048 	.word	0x2002a048

000086ac <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    86ac:	4b02      	ldr	r3, [pc, #8]	; (86b8 <att_cfm_sent+0xc>)
    86ae:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    86b2:	f011 bc37 	b.w	19f24 <att_sent>
    86b6:	bf00      	nop
    86b8:	0001a1dd 	.word	0x0001a1dd

000086bc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    86bc:	4b02      	ldr	r3, [pc, #8]	; (86c8 <att_rsp_sent+0xc>)
    86be:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    86c2:	f011 bc2f 	b.w	19f24 <att_sent>
    86c6:	bf00      	nop
    86c8:	0001a1c9 	.word	0x0001a1c9

000086cc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    86cc:	4b02      	ldr	r3, [pc, #8]	; (86d8 <att_req_sent+0xc>)
    86ce:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    86d2:	f011 bc27 	b.w	19f24 <att_sent>
    86d6:	bf00      	nop
    86d8:	00008a29 	.word	0x00008a29

000086dc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    86dc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    86de:	3808      	subs	r0, #8
    86e0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    86e2:	a901      	add	r1, sp, #4
    86e4:	4802      	ldr	r0, [pc, #8]	; (86f0 <bt_att_released+0x14>)
    86e6:	f00d fcdf 	bl	160a8 <k_mem_slab_free>
}
    86ea:	b003      	add	sp, #12
    86ec:	f85d fb04 	ldr.w	pc, [sp], #4
    86f0:	200005bc 	.word	0x200005bc

000086f4 <read_group_cb>:
{
    86f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    86f8:	f04f 0800 	mov.w	r8, #0
    86fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    8700:	4606      	mov	r6, r0
    8702:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8704:	6800      	ldr	r0, [r0, #0]
    8706:	a902      	add	r1, sp, #8
{
    8708:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    870a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    870c:	f88d 8008 	strb.w	r8, [sp, #8]
    8710:	f8ad 300a 	strh.w	r3, [sp, #10]
    8714:	f010 ff6e 	bl	195f4 <bt_uuid_cmp>
    8718:	b1a0      	cbz	r0, 8744 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    871a:	f642 0301 	movw	r3, #10241	; 0x2801
    871e:	6830      	ldr	r0, [r6, #0]
    8720:	a903      	add	r1, sp, #12
    8722:	f88d 800c 	strb.w	r8, [sp, #12]
    8726:	f8ad 300e 	strh.w	r3, [sp, #14]
    872a:	f010 ff63 	bl	195f4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    872e:	b148      	cbz	r0, 8744 <read_group_cb+0x50>
		if (data->group &&
    8730:	6923      	ldr	r3, [r4, #16]
    8732:	b11b      	cbz	r3, 873c <read_group_cb+0x48>
    8734:	885a      	ldrh	r2, [r3, #2]
    8736:	42aa      	cmp	r2, r5
    8738:	d200      	bcs.n	873c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    873a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    873c:	2001      	movs	r0, #1
}
    873e:	b004      	add	sp, #16
    8740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8744:	6861      	ldr	r1, [r4, #4]
    8746:	6830      	ldr	r0, [r6, #0]
    8748:	f010 ff54 	bl	195f4 <bt_uuid_cmp>
    874c:	b110      	cbz	r0, 8754 <read_group_cb+0x60>
		data->group = NULL;
    874e:	2300      	movs	r3, #0
    8750:	6123      	str	r3, [r4, #16]
    8752:	e7f3      	b.n	873c <read_group_cb+0x48>
	if (data->rsp->len &&
    8754:	68e3      	ldr	r3, [r4, #12]
    8756:	68a0      	ldr	r0, [r4, #8]
    8758:	781a      	ldrb	r2, [r3, #0]
    875a:	b13a      	cbz	r2, 876c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    875c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    8760:	8981      	ldrh	r1, [r0, #12]
    8762:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8764:	4293      	cmp	r3, r2
    8766:	da01      	bge.n	876c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8768:	2000      	movs	r0, #0
    876a:	e7e8      	b.n	873e <read_group_cb+0x4a>
    876c:	2104      	movs	r1, #4
    876e:	3008      	adds	r0, #8
    8770:	f013 f80d 	bl	1b78e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8774:	4b09      	ldr	r3, [pc, #36]	; (879c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8776:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8778:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
    877a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    877c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    877e:	68a2      	ldr	r2, [r4, #8]
    8780:	9300      	str	r3, [sp, #0]
    8782:	4638      	mov	r0, r7
    8784:	2300      	movs	r3, #0
    8786:	9401      	str	r4, [sp, #4]
    8788:	f011 fc35 	bl	19ff6 <att_chan_read>
	if (read < 0) {
    878c:	2800      	cmp	r0, #0
    878e:	dbeb      	blt.n	8768 <read_group_cb+0x74>
	if (!data->group) {
    8790:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8792:	3800      	subs	r0, #0
    8794:	bf18      	it	ne
    8796:	2001      	movne	r0, #1
    8798:	e7d1      	b.n	873e <read_group_cb+0x4a>
    879a:	bf00      	nop
    879c:	0001a1a5 	.word	0x0001a1a5

000087a0 <read_type_cb>:
{
    87a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    87a4:	f8d2 8000 	ldr.w	r8, [r2]
{
    87a8:	4606      	mov	r6, r0
    87aa:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	6851      	ldr	r1, [r2, #4]
{
    87b0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    87b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    87b6:	f010 ff1d 	bl	195f4 <bt_uuid_cmp>
    87ba:	4607      	mov	r7, r0
    87bc:	2800      	cmp	r0, #0
    87be:	d13e      	bne.n	883e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    87c0:	4628      	mov	r0, r5
    87c2:	2215      	movs	r2, #21
    87c4:	4631      	mov	r1, r6
    87c6:	f012 f9c3 	bl	1ab50 <bt_gatt_check_perm>
    87ca:	4605      	mov	r5, r0
    87cc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    87ce:	b148      	cbz	r0, 87e4 <read_type_cb+0x44>
		if (data->rsp->len) {
    87d0:	68e3      	ldr	r3, [r4, #12]
    87d2:	781b      	ldrb	r3, [r3, #0]
    87d4:	b923      	cbnz	r3, 87e0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    87d6:	2500      	movs	r5, #0
}
    87d8:	4628      	mov	r0, r5
    87da:	b003      	add	sp, #12
    87dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    87e0:	7527      	strb	r7, [r4, #20]
    87e2:	e7f8      	b.n	87d6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    87e4:	68a0      	ldr	r0, [r4, #8]
    87e6:	f012 ffb0 	bl	1b74a <net_buf_frag_last>
    87ea:	2102      	movs	r1, #2
    87ec:	3008      	adds	r0, #8
    87ee:	f012 ffce 	bl	1b78e <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87f2:	4b14      	ldr	r3, [pc, #80]	; (8844 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    87f4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87f6:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
    87f8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87fc:	68a2      	ldr	r2, [r4, #8]
    87fe:	9300      	str	r3, [sp, #0]
    8800:	4640      	mov	r0, r8
    8802:	462b      	mov	r3, r5
    8804:	9401      	str	r4, [sp, #4]
    8806:	f011 fbf6 	bl	19ff6 <att_chan_read>
	if (read < 0) {
    880a:	2800      	cmp	r0, #0
    880c:	da07      	bge.n	881e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    880e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    8812:	bf32      	itee	cc
    8814:	200e      	movcc	r0, #14
		return -err;
    8816:	4240      	negcs	r0, r0
    8818:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
    881a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    881c:	e7dc      	b.n	87d8 <read_type_cb+0x38>
	if (!data->item) {
    881e:	6923      	ldr	r3, [r4, #16]
    8820:	2b00      	cmp	r3, #0
    8822:	d0d8      	beq.n	87d6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8824:	68a0      	ldr	r0, [r4, #8]
    8826:	f011 fb75 	bl	19f14 <net_buf_frags_len>
    882a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    882e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8830:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8832:	7818      	ldrb	r0, [r3, #0]
    8834:	4285      	cmp	r5, r0
    8836:	bf94      	ite	ls
    8838:	2500      	movls	r5, #0
    883a:	2501      	movhi	r5, #1
    883c:	e7cc      	b.n	87d8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    883e:	2501      	movs	r5, #1
    8840:	e7ca      	b.n	87d8 <read_type_cb+0x38>
    8842:	bf00      	nop
    8844:	00019f31 	.word	0x00019f31

00008848 <find_type_cb>:
{
    8848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    884c:	f642 0301 	movw	r3, #10241	; 0x2801
    8850:	2500      	movs	r5, #0
{
    8852:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
    8854:	f8d2 9000 	ldr.w	r9, [r2]
{
    8858:	4607      	mov	r7, r0
    885a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    885c:	6800      	ldr	r0, [r0, #0]
    885e:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
    8860:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
    8864:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8866:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    886a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    886e:	f010 fec1 	bl	195f4 <bt_uuid_cmp>
    8872:	2800      	cmp	r0, #0
    8874:	d066      	beq.n	8944 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    887a:	6838      	ldr	r0, [r7, #0]
    887c:	a90b      	add	r1, sp, #44	; 0x2c
    887e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8882:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8886:	f010 feb5 	bl	195f4 <bt_uuid_cmp>
    888a:	b138      	cbz	r0, 889c <find_type_cb+0x54>
		if (data->group &&
    888c:	68a3      	ldr	r3, [r4, #8]
    888e:	b11b      	cbz	r3, 8898 <find_type_cb+0x50>
    8890:	885a      	ldrh	r2, [r3, #2]
    8892:	42b2      	cmp	r2, r6
    8894:	d200      	bcs.n	8898 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8896:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8898:	2001      	movs	r0, #1
    889a:	e009      	b.n	88b0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    889c:	6861      	ldr	r1, [r4, #4]
    889e:	4608      	mov	r0, r1
    88a0:	f011 fb38 	bl	19f14 <net_buf_frags_len>
    88a4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    88a8:	1a1b      	subs	r3, r3, r0
    88aa:	2b03      	cmp	r3, #3
    88ac:	d803      	bhi.n	88b6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    88ae:	2000      	movs	r0, #0
}
    88b0:	b011      	add	sp, #68	; 0x44
    88b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    88b6:	4608      	mov	r0, r1
    88b8:	f012 ff47 	bl	1b74a <net_buf_frag_last>
    88bc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    88be:	6860      	ldr	r0, [r4, #4]
    88c0:	f011 fb28 	bl	19f14 <net_buf_frags_len>
    88c4:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    88c8:	f105 0b08 	add.w	fp, r5, #8
    88cc:	ebaa 0a00 	sub.w	sl, sl, r0
    88d0:	4658      	mov	r0, fp
    88d2:	f012 ffb2 	bl	1b83a <net_buf_simple_tailroom>
    88d6:	4582      	cmp	sl, r0
    88d8:	d237      	bcs.n	894a <find_type_cb+0x102>
    88da:	6860      	ldr	r0, [r4, #4]
    88dc:	f011 fb1a 	bl	19f14 <net_buf_frags_len>
    88e0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    88e4:	1a18      	subs	r0, r3, r0
	if (!len) {
    88e6:	b970      	cbnz	r0, 8906 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    88e8:	6863      	ldr	r3, [r4, #4]
    88ea:	7998      	ldrb	r0, [r3, #6]
    88ec:	f003 ff46 	bl	c77c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    88f0:	2200      	movs	r2, #0
    88f2:	2300      	movs	r3, #0
    88f4:	f012 feef 	bl	1b6d6 <net_buf_alloc_fixed>
		if (!frag) {
    88f8:	4605      	mov	r5, r0
    88fa:	2800      	cmp	r0, #0
    88fc:	d0d7      	beq.n	88ae <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    88fe:	4601      	mov	r1, r0
    8900:	6860      	ldr	r0, [r4, #4]
    8902:	f012 ff33 	bl	1b76c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    8906:	2300      	movs	r3, #0
    8908:	9300      	str	r3, [sp, #0]
    890a:	4639      	mov	r1, r7
    890c:	f8d7 9004 	ldr.w	r9, [r7, #4]
    8910:	2310      	movs	r3, #16
    8912:	4640      	mov	r0, r8
    8914:	aa02      	add	r2, sp, #8
    8916:	47c8      	blx	r9
	if (read < 0) {
    8918:	1e07      	subs	r7, r0, #0
    891a:	db13      	blt.n	8944 <find_type_cb+0xfc>
	if (read != data->value_len) {
    891c:	7c22      	ldrb	r2, [r4, #16]
    891e:	68e0      	ldr	r0, [r4, #12]
    8920:	42ba      	cmp	r2, r7
    8922:	d037      	beq.n	8994 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8924:	4601      	mov	r1, r0
    8926:	a80b      	add	r0, sp, #44	; 0x2c
    8928:	f010 fe8e 	bl	19648 <bt_uuid_create>
    892c:	b988      	cbnz	r0, 8952 <find_type_cb+0x10a>
    892e:	4a1b      	ldr	r2, [pc, #108]	; (899c <find_type_cb+0x154>)
    8930:	4b1b      	ldr	r3, [pc, #108]	; (89a0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8932:	7c21      	ldrb	r1, [r4, #16]
    8934:	1ad2      	subs	r2, r2, r3
    8936:	08d2      	lsrs	r2, r2, #3
    8938:	0192      	lsls	r2, r2, #6
    893a:	481a      	ldr	r0, [pc, #104]	; (89a4 <find_type_cb+0x15c>)
    893c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    8940:	f00f fad1 	bl	17ee6 <log_1>
	data->group = NULL;
    8944:	2300      	movs	r3, #0
    8946:	60a3      	str	r3, [r4, #8]
    8948:	e7a6      	b.n	8898 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    894a:	4658      	mov	r0, fp
    894c:	f012 ff75 	bl	1b83a <net_buf_simple_tailroom>
    8950:	e7c9      	b.n	88e6 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8952:	b2fa      	uxtb	r2, r7
    8954:	a902      	add	r1, sp, #8
    8956:	a806      	add	r0, sp, #24
    8958:	f010 fe76 	bl	19648 <bt_uuid_create>
    895c:	b948      	cbnz	r0, 8972 <find_type_cb+0x12a>
    895e:	4a0f      	ldr	r2, [pc, #60]	; (899c <find_type_cb+0x154>)
    8960:	4b0f      	ldr	r3, [pc, #60]	; (89a0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    8962:	4639      	mov	r1, r7
    8964:	1ad2      	subs	r2, r2, r3
    8966:	08d2      	lsrs	r2, r2, #3
    8968:	0192      	lsls	r2, r2, #6
    896a:	480f      	ldr	r0, [pc, #60]	; (89a8 <find_type_cb+0x160>)
    896c:	f042 0202 	orr.w	r2, r2, #2
    8970:	e7e6      	b.n	8940 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8972:	a906      	add	r1, sp, #24
    8974:	a80b      	add	r0, sp, #44	; 0x2c
    8976:	f010 fe3d 	bl	195f4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    897a:	2800      	cmp	r0, #0
    897c:	d1e2      	bne.n	8944 <find_type_cb+0xfc>
	data->err = 0x00;
    897e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    8980:	2104      	movs	r1, #4
    8982:	7463      	strb	r3, [r4, #17]
    8984:	f105 0008 	add.w	r0, r5, #8
    8988:	f012 ff01 	bl	1b78e <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    898c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    898e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8990:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8992:	e781      	b.n	8898 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8994:	a902      	add	r1, sp, #8
    8996:	f010 fc27 	bl	191e8 <memcmp>
    899a:	e7ee      	b.n	897a <find_type_cb+0x132>
    899c:	000232ec 	.word	0x000232ec
    89a0:	000232ec 	.word	0x000232ec
    89a4:	000261a4 	.word	0x000261a4
    89a8:	000261c3 	.word	0x000261c3

000089ac <att_get>:
{
    89ac:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    89ae:	7b43      	ldrb	r3, [r0, #13]
    89b0:	2b07      	cmp	r3, #7
    89b2:	d00b      	beq.n	89cc <att_get+0x20>
    89b4:	4917      	ldr	r1, [pc, #92]	; (8a14 <att_get+0x68>)
    89b6:	4b18      	ldr	r3, [pc, #96]	; (8a18 <att_get+0x6c>)
		BT_WARN("Not connected");
    89b8:	4818      	ldr	r0, [pc, #96]	; (8a1c <att_get+0x70>)
    89ba:	1ac9      	subs	r1, r1, r3
    89bc:	08c9      	lsrs	r1, r1, #3
    89be:	0189      	lsls	r1, r1, #6
    89c0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    89c4:	f00f fa82 	bl	17ecc <log_0>
		return NULL;
    89c8:	2400      	movs	r4, #0
    89ca:	e00e      	b.n	89ea <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    89cc:	2104      	movs	r1, #4
    89ce:	f011 fa6b 	bl	19ea8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    89d2:	4604      	mov	r4, r0
    89d4:	b958      	cbnz	r0, 89ee <att_get+0x42>
    89d6:	490f      	ldr	r1, [pc, #60]	; (8a14 <att_get+0x68>)
    89d8:	4b0f      	ldr	r3, [pc, #60]	; (8a18 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
    89da:	4811      	ldr	r0, [pc, #68]	; (8a20 <att_get+0x74>)
    89dc:	1ac9      	subs	r1, r1, r3
    89de:	08c9      	lsrs	r1, r1, #3
    89e0:	0189      	lsls	r1, r1, #6
    89e2:	f041 0101 	orr.w	r1, r1, #1
    89e6:	f00f fa71 	bl	17ecc <log_0>
}
    89ea:	4620      	mov	r0, r4
    89ec:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    89ee:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
    89f2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    89f6:	075b      	lsls	r3, r3, #29
    89f8:	d508      	bpl.n	8a0c <att_get+0x60>
    89fa:	4906      	ldr	r1, [pc, #24]	; (8a14 <att_get+0x68>)
    89fc:	4b06      	ldr	r3, [pc, #24]	; (8a18 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
    89fe:	4809      	ldr	r0, [pc, #36]	; (8a24 <att_get+0x78>)
    8a00:	1ac9      	subs	r1, r1, r3
    8a02:	08c9      	lsrs	r1, r1, #3
    8a04:	0189      	lsls	r1, r1, #6
    8a06:	f041 0102 	orr.w	r1, r1, #2
    8a0a:	e7db      	b.n	89c4 <att_get+0x18>
	return att_chan->att;
    8a0c:	f850 4c08 	ldr.w	r4, [r0, #-8]
    8a10:	e7eb      	b.n	89ea <att_get+0x3e>
    8a12:	bf00      	nop
    8a14:	000232ec 	.word	0x000232ec
    8a18:	000232ec 	.word	0x000232ec
    8a1c:	000261e2 	.word	0x000261e2
    8a20:	000261f0 	.word	0x000261f0
    8a24:	0002620b 	.word	0x0002620b

00008a28 <chan_req_sent>:
	if (chan->req) {
    8a28:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    8a2c:	b13b      	cbz	r3, 8a3e <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8a2e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    8a32:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8a36:	2300      	movs	r3, #0
    8a38:	4801      	ldr	r0, [pc, #4]	; (8a40 <chan_req_sent+0x18>)
    8a3a:	f00e b985 	b.w	16d48 <k_delayed_work_submit_to_queue>
}
    8a3e:	4770      	bx	lr
    8a40:	200010f8 	.word	0x200010f8

00008a44 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8a46:	2300      	movs	r3, #0
{
    8a48:	4606      	mov	r6, r0
    8a4a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8a4c:	2200      	movs	r2, #0
    8a4e:	4669      	mov	r1, sp
    8a50:	4829      	ldr	r0, [pc, #164]	; (8af8 <bt_att_accept+0xb4>)
    8a52:	f00d faf7 	bl	16044 <k_mem_slab_alloc>
    8a56:	4604      	mov	r4, r0
    8a58:	b178      	cbz	r0, 8a7a <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
    8a5a:	4631      	mov	r1, r6
    8a5c:	4a27      	ldr	r2, [pc, #156]	; (8afc <bt_att_accept+0xb8>)
    8a5e:	4b28      	ldr	r3, [pc, #160]	; (8b00 <bt_att_accept+0xbc>)
    8a60:	4828      	ldr	r0, [pc, #160]	; (8b04 <bt_att_accept+0xc0>)
    8a62:	1ad2      	subs	r2, r2, r3
    8a64:	08d2      	lsrs	r2, r2, #3
    8a66:	0192      	lsls	r2, r2, #6
    8a68:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8a6c:	f00f fa3b 	bl	17ee6 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8a70:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8a74:	4620      	mov	r0, r4
    8a76:	b003      	add	sp, #12
    8a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8a7a:	4601      	mov	r1, r0
    8a7c:	222c      	movs	r2, #44	; 0x2c
    8a7e:	9800      	ldr	r0, [sp, #0]
    8a80:	f010 fbed 	bl	1925e <memset>
	att->conn = conn;
    8a84:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8a86:	2200      	movs	r2, #0
	list->head = NULL;
    8a88:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    8a8c:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    8a90:	60ac      	str	r4, [r5, #8]
    8a92:	2300      	movs	r3, #0
    8a94:	481c      	ldr	r0, [pc, #112]	; (8b08 <bt_att_accept+0xc4>)
    8a96:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8a98:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8a9a:	f00d fad3 	bl	16044 <k_mem_slab_alloc>
    8a9e:	4604      	mov	r4, r0
    8aa0:	b148      	cbz	r0, 8ab6 <bt_att_accept+0x72>
    8aa2:	4a16      	ldr	r2, [pc, #88]	; (8afc <bt_att_accept+0xb8>)
    8aa4:	4b16      	ldr	r3, [pc, #88]	; (8b00 <bt_att_accept+0xbc>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8aa6:	6829      	ldr	r1, [r5, #0]
    8aa8:	1ad2      	subs	r2, r2, r3
    8aaa:	08d2      	lsrs	r2, r2, #3
    8aac:	0192      	lsls	r2, r2, #6
    8aae:	4817      	ldr	r0, [pc, #92]	; (8b0c <bt_att_accept+0xc8>)
    8ab0:	f042 0201 	orr.w	r2, r2, #1
    8ab4:	e7da      	b.n	8a6c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    8ab6:	4601      	mov	r1, r0
    8ab8:	f44f 7298 	mov.w	r2, #304	; 0x130
    8abc:	9801      	ldr	r0, [sp, #4]
    8abe:	f010 fbce 	bl	1925e <memset>
	chan->chan.chan.ops = &ops;
    8ac2:	9801      	ldr	r0, [sp, #4]
    8ac4:	4b12      	ldr	r3, [pc, #72]	; (8b10 <bt_att_accept+0xcc>)
    8ac6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8ac8:	30c8      	adds	r0, #200	; 0xc8
    8aca:	f019 fe42 	bl	22752 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    8ace:	9801      	ldr	r0, [sp, #4]
    8ad0:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    8ad4:	2203      	movs	r2, #3
    8ad6:	4611      	mov	r1, r2
    8ad8:	f019 ff95 	bl	22a06 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8adc:	9b01      	ldr	r3, [sp, #4]
    8ade:	33c0      	adds	r3, #192	; 0xc0
    8ae0:	e8d3 2fef 	ldaex	r2, [r3]
    8ae4:	e8c3 4fe1 	stlex	r1, r4, [r3]
    8ae8:	2900      	cmp	r1, #0
    8aea:	d1f9      	bne.n	8ae0 <bt_att_accept+0x9c>
	chan->att = att;
    8aec:	9b01      	ldr	r3, [sp, #4]
    8aee:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8af2:	603b      	str	r3, [r7, #0]
	return 0;
    8af4:	e7be      	b.n	8a74 <bt_att_accept+0x30>
    8af6:	bf00      	nop
    8af8:	200005a0 	.word	0x200005a0
    8afc:	000232ec 	.word	0x000232ec
    8b00:	000232ec 	.word	0x000232ec
    8b04:	0002622f 	.word	0x0002622f
    8b08:	200005bc 	.word	0x200005bc
    8b0c:	00026254 	.word	0x00026254
    8b10:	20000258 	.word	0x20000258

00008b14 <bt_att_connected>:
{
    8b14:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8b16:	2104      	movs	r1, #4
{
    8b18:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8b1a:	6800      	ldr	r0, [r0, #0]
    8b1c:	f011 f9b4 	bl	19e88 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8b20:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8b24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8b26:	b91b      	cbnz	r3, 8b30 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    8b28:	f105 000c 	add.w	r0, r5, #12
    8b2c:	f019 fe11 	bl	22752 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8b30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
    8b32:	f504 7392 	add.w	r3, r4, #292	; 0x124
	parent->next = child;
    8b36:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    8b3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	list->head = node;
    8b3c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    8b3e:	b902      	cbnz	r2, 8b42 <bt_att_connected+0x2e>
	list->tail = node;
    8b40:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b42:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
    8b46:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8b4a:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8b4c:	bf58      	it	pl
    8b4e:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8b50:	f04f 0230 	mov.w	r2, #48	; 0x30
    8b54:	bf5c      	itt	pl
    8b56:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8b5a:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    8b5e:	2100      	movs	r1, #0
    8b60:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    8b64:	f010 fb7b 	bl	1925e <memset>
    8b68:	4b01      	ldr	r3, [pc, #4]	; (8b70 <bt_att_connected+0x5c>)
    8b6a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    8b6e:	bd38      	pop	{r3, r4, r5, pc}
    8b70:	00009799 	.word	0x00009799

00008b74 <chan_send>:
{
    8b74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8b78:	688b      	ldr	r3, [r1, #8]
{
    8b7a:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8b7c:	781b      	ldrb	r3, [r3, #0]
{
    8b7e:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8b80:	2bd2      	cmp	r3, #210	; 0xd2
{
    8b82:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8b84:	d116      	bne.n	8bb4 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    8b86:	6803      	ldr	r3, [r0, #0]
    8b88:	6818      	ldr	r0, [r3, #0]
    8b8a:	f012 fd17 	bl	1b5bc <bt_smp_sign>
		if (err) {
    8b8e:	4606      	mov	r6, r0
    8b90:	b180      	cbz	r0, 8bb4 <chan_send+0x40>
    8b92:	4928      	ldr	r1, [pc, #160]	; (8c34 <chan_send+0xc0>)
    8b94:	4b28      	ldr	r3, [pc, #160]	; (8c38 <chan_send+0xc4>)
			BT_ERR("Error signing data");
    8b96:	4829      	ldr	r0, [pc, #164]	; (8c3c <chan_send+0xc8>)
    8b98:	1ac9      	subs	r1, r1, r3
    8b9a:	08c9      	lsrs	r1, r1, #3
    8b9c:	0189      	lsls	r1, r1, #6
    8b9e:	f041 0101 	orr.w	r1, r1, #1
    8ba2:	f00f f993 	bl	17ecc <log_0>
		net_buf_unref(buf);
    8ba6:	4620      	mov	r0, r4
    8ba8:	f003 fea4 	bl	c8f4 <net_buf_unref>
}
    8bac:	4630      	mov	r0, r6
    8bae:	b003      	add	sp, #12
    8bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8bb4:	f104 0008 	add.w	r0, r4, #8
    8bb8:	f012 fe3b 	bl	1b832 <net_buf_simple_headroom>
	state->len = buf->len;
    8bbc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8bc0:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8bc2:	f1b9 0f00 	cmp.w	r9, #0
    8bc6:	d10a      	bne.n	8bde <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    8bc8:	68a3      	ldr	r3, [r4, #8]
    8bca:	7818      	ldrb	r0, [r3, #0]
    8bcc:	f011 f9c2 	bl	19f54 <att_op_get_type>
    8bd0:	1e43      	subs	r3, r0, #1
    8bd2:	b2db      	uxtb	r3, r3
    8bd4:	2b04      	cmp	r3, #4
    8bd6:	bf9c      	itt	ls
    8bd8:	4a19      	ldrls	r2, [pc, #100]	; (8c40 <chan_send+0xcc>)
    8bda:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8bde:	682b      	ldr	r3, [r5, #0]
    8be0:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
    8be2:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8be6:	681e      	ldr	r6, [r3, #0]
    8be8:	f012 fdab 	bl	1b742 <net_buf_ref>
    8bec:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    8bf0:	4b14      	ldr	r3, [pc, #80]	; (8c44 <chan_send+0xd0>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8bf2:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    8bf4:	4299      	cmp	r1, r3
    8bf6:	d019      	beq.n	8c2c <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    8bf8:	4b13      	ldr	r3, [pc, #76]	; (8c48 <chan_send+0xd4>)
    8bfa:	4299      	cmp	r1, r3
    8bfc:	d018      	beq.n	8c30 <chan_send+0xbc>
		return att_sent;
    8bfe:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8c5c <chan_send+0xe8>
    8c02:	4b12      	ldr	r3, [pc, #72]	; (8c4c <chan_send+0xd8>)
    8c04:	4812      	ldr	r0, [pc, #72]	; (8c50 <chan_send+0xdc>)
    8c06:	4561      	cmp	r1, ip
    8c08:	bf18      	it	ne
    8c0a:	4603      	movne	r3, r0
				&chan->chan.chan);
    8c0c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c0e:	4630      	mov	r0, r6
    8c10:	2104      	movs	r1, #4
    8c12:	9500      	str	r5, [sp, #0]
    8c14:	f011 f908 	bl	19e28 <bt_l2cap_send_cb>
	if (!err) {
    8c18:	4606      	mov	r6, r0
    8c1a:	2800      	cmp	r0, #0
    8c1c:	d0c3      	beq.n	8ba6 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    8c1e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8c20:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8c24:	fa10 f787 	uxtah	r7, r0, r7
    8c28:	60a7      	str	r7, [r4, #8]
}
    8c2a:	e7bf      	b.n	8bac <chan_send+0x38>
		return att_rsp_sent;
    8c2c:	4b09      	ldr	r3, [pc, #36]	; (8c54 <chan_send+0xe0>)
    8c2e:	e7ed      	b.n	8c0c <chan_send+0x98>
		return att_cfm_sent;
    8c30:	4b09      	ldr	r3, [pc, #36]	; (8c58 <chan_send+0xe4>)
    8c32:	e7eb      	b.n	8c0c <chan_send+0x98>
    8c34:	000232ec 	.word	0x000232ec
    8c38:	000232ec 	.word	0x000232ec
    8c3c:	00026279 	.word	0x00026279
    8c40:	00023920 	.word	0x00023920
    8c44:	0001a1c9 	.word	0x0001a1c9
    8c48:	0001a1dd 	.word	0x0001a1dd
    8c4c:	000086cd 	.word	0x000086cd
    8c50:	00019f25 	.word	0x00019f25
    8c54:	000086bd 	.word	0x000086bd
    8c58:	000086ad 	.word	0x000086ad
    8c5c:	00008a29 	.word	0x00008a29

00008c60 <att_write_cmd>:
{
    8c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c62:	4604      	mov	r4, r0
    8c64:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    8c66:	f101 0008 	add.w	r0, r1, #8
    8c6a:	460d      	mov	r5, r1
    8c6c:	f012 fdd9 	bl	1b822 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8c70:	6823      	ldr	r3, [r4, #0]
    8c72:	4606      	mov	r6, r0
    8c74:	2100      	movs	r1, #0
    8c76:	6818      	ldr	r0, [r3, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    8c78:	68af      	ldr	r7, [r5, #8]
    8c7a:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8c7c:	f012 f8f8 	bl	1ae70 <bt_gatt_change_aware>
    8c80:	b328      	cbz	r0, 8cce <att_write_cmd+0x6e>
	if (!handle) {
    8c82:	b336      	cbz	r6, 8cd2 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
    8c84:	2218      	movs	r2, #24
    8c86:	2100      	movs	r1, #0
    8c88:	4668      	mov	r0, sp
    8c8a:	f010 fae8 	bl	1925e <memset>
	data.conn = chan->att->conn;
    8c8e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8c90:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
    8c92:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8c94:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
    8c96:	9300      	str	r3, [sp, #0]
	data.req = req;
    8c98:	2300      	movs	r3, #0
    8c9a:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    8c9e:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8ca2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8ca4:	4a0c      	ldr	r2, [pc, #48]	; (8cd8 <att_write_cmd+0x78>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8ca6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8caa:	466b      	mov	r3, sp
	data.value = value;
    8cac:	9703      	str	r7, [sp, #12]
	data.len = len;
    8cae:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8cb2:	f011 f995 	bl	19fe0 <bt_gatt_foreach_attr>
	if (data.err) {
    8cb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8cba:	b92b      	cbnz	r3, 8cc8 <att_write_cmd+0x68>
	if (data.buf) {
    8cbc:	9901      	ldr	r1, [sp, #4]
    8cbe:	b119      	cbz	r1, 8cc8 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8cc0:	4620      	mov	r0, r4
    8cc2:	4a06      	ldr	r2, [pc, #24]	; (8cdc <att_write_cmd+0x7c>)
    8cc4:	f011 fb64 	bl	1a390 <bt_att_chan_send_rsp>
    8cc8:	2000      	movs	r0, #0
}
    8cca:	b007      	add	sp, #28
    8ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8cce:	2012      	movs	r0, #18
    8cd0:	e7fb      	b.n	8cca <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8cd2:	2001      	movs	r0, #1
    8cd4:	e7f9      	b.n	8cca <att_write_cmd+0x6a>
    8cd6:	bf00      	nop
    8cd8:	0001a1f1 	.word	0x0001a1f1
    8cdc:	0001a1c9 	.word	0x0001a1c9

00008ce0 <bt_att_chan_create_pdu>:
{
    8ce0:	b538      	push	{r3, r4, r5, lr}
    8ce2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8ce4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    8ce8:	3201      	adds	r2, #1
    8cea:	428a      	cmp	r2, r1
    8cec:	d90c      	bls.n	8d08 <bt_att_chan_create_pdu+0x28>
    8cee:	481a      	ldr	r0, [pc, #104]	; (8d58 <bt_att_chan_create_pdu+0x78>)
    8cf0:	4b1a      	ldr	r3, [pc, #104]	; (8d5c <bt_att_chan_create_pdu+0x7c>)
		return NULL;
    8cf2:	2400      	movs	r4, #0
    8cf4:	1a1b      	subs	r3, r3, r0
    8cf6:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8cf8:	019b      	lsls	r3, r3, #6
    8cfa:	4819      	ldr	r0, [pc, #100]	; (8d60 <bt_att_chan_create_pdu+0x80>)
    8cfc:	f043 0302 	orr.w	r3, r3, #2
    8d00:	f00f f905 	bl	17f0e <log_2>
}
    8d04:	4620      	mov	r0, r4
    8d06:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    8d08:	4628      	mov	r0, r5
    8d0a:	f011 f923 	bl	19f54 <att_op_get_type>
    8d0e:	2802      	cmp	r0, #2
    8d10:	d001      	beq.n	8d16 <bt_att_chan_create_pdu+0x36>
    8d12:	2804      	cmp	r0, #4
    8d14:	d114      	bne.n	8d40 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8d16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8d1a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8d1c:	2100      	movs	r1, #0
    8d1e:	4608      	mov	r0, r1
    8d20:	f011 f87f 	bl	19e22 <bt_l2cap_create_pdu_timeout>
    8d24:	4604      	mov	r4, r0
	if (!buf) {
    8d26:	b980      	cbnz	r0, 8d4a <bt_att_chan_create_pdu+0x6a>
    8d28:	4b0b      	ldr	r3, [pc, #44]	; (8d58 <bt_att_chan_create_pdu+0x78>)
    8d2a:	4a0c      	ldr	r2, [pc, #48]	; (8d5c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8d2c:	4629      	mov	r1, r5
    8d2e:	1ad2      	subs	r2, r2, r3
    8d30:	08d2      	lsrs	r2, r2, #3
    8d32:	0192      	lsls	r2, r2, #6
    8d34:	480b      	ldr	r0, [pc, #44]	; (8d64 <bt_att_chan_create_pdu+0x84>)
    8d36:	f042 0201 	orr.w	r2, r2, #1
    8d3a:	f00f f8d4 	bl	17ee6 <log_1>
		return NULL;
    8d3e:	e7e1      	b.n	8d04 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d48:	e7e8      	b.n	8d1c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    8d4a:	2101      	movs	r1, #1
    8d4c:	3008      	adds	r0, #8
    8d4e:	f012 fd1e 	bl	1b78e <net_buf_simple_add>
	hdr->code = op;
    8d52:	7005      	strb	r5, [r0, #0]
	return buf;
    8d54:	e7d6      	b.n	8d04 <bt_att_chan_create_pdu+0x24>
    8d56:	bf00      	nop
    8d58:	000232ec 	.word	0x000232ec
    8d5c:	000232ec 	.word	0x000232ec
    8d60:	0002628c 	.word	0x0002628c
    8d64:	0002605d 	.word	0x0002605d

00008d68 <att_indicate>:
{
    8d68:	b570      	push	{r4, r5, r6, lr}
    8d6a:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    8d6c:	f101 0008 	add.w	r0, r1, #8
    8d70:	460d      	mov	r5, r1
    8d72:	f012 fd56 	bl	1b822 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    8d76:	6826      	ldr	r6, [r4, #0]
    8d78:	4601      	mov	r1, r0
    8d7a:	89ab      	ldrh	r3, [r5, #12]
    8d7c:	68aa      	ldr	r2, [r5, #8]
    8d7e:	6830      	ldr	r0, [r6, #0]
    8d80:	f012 f84b 	bl	1ae1a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    8d84:	211e      	movs	r1, #30
    8d86:	2200      	movs	r2, #0
    8d88:	4620      	mov	r0, r4
    8d8a:	f7ff ffa9 	bl	8ce0 <bt_att_chan_create_pdu>
	if (!buf) {
    8d8e:	4601      	mov	r1, r0
    8d90:	b118      	cbz	r0, 8d9a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    8d92:	4620      	mov	r0, r4
    8d94:	4a02      	ldr	r2, [pc, #8]	; (8da0 <att_indicate+0x38>)
    8d96:	f011 fafb 	bl	1a390 <bt_att_chan_send_rsp>
}
    8d9a:	2000      	movs	r0, #0
    8d9c:	bd70      	pop	{r4, r5, r6, pc}
    8d9e:	bf00      	nop
    8da0:	0001a1dd 	.word	0x0001a1dd

00008da4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8da8:	4688      	mov	r8, r1
    8daa:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8dac:	2101      	movs	r1, #1
    8dae:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8db0:	4605      	mov	r5, r0
    8db2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8db4:	f7ff ff94 	bl	8ce0 <bt_att_chan_create_pdu>
	if (!buf) {
    8db8:	4604      	mov	r4, r0
    8dba:	b178      	cbz	r0, 8ddc <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    8dbc:	2104      	movs	r1, #4
    8dbe:	3008      	adds	r0, #8
    8dc0:	f012 fce5 	bl	1b78e <net_buf_simple_add>
	rsp->request = req;
    8dc4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    8dc8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    8dca:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8dce:	4621      	mov	r1, r4
    8dd0:	4628      	mov	r0, r5
}
    8dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8dd6:	4a02      	ldr	r2, [pc, #8]	; (8de0 <send_err_rsp.part.0+0x3c>)
    8dd8:	f011 bada 	b.w	1a390 <bt_att_chan_send_rsp>
}
    8ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8de0:	0001a1c9 	.word	0x0001a1c9

00008de4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8de4:	898b      	ldrh	r3, [r1, #12]
{
    8de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dea:	4604      	mov	r4, r0
    8dec:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8dee:	b963      	cbnz	r3, 8e0a <bt_att_recv+0x26>
    8df0:	4948      	ldr	r1, [pc, #288]	; (8f14 <bt_att_recv+0x130>)
    8df2:	4b49      	ldr	r3, [pc, #292]	; (8f18 <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
    8df4:	4849      	ldr	r0, [pc, #292]	; (8f1c <bt_att_recv+0x138>)
    8df6:	1ac9      	subs	r1, r1, r3
    8df8:	08c9      	lsrs	r1, r1, #3
    8dfa:	0189      	lsls	r1, r1, #6
    8dfc:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    8e00:	f00f f864 	bl	17ecc <log_0>
}
    8e04:	2000      	movs	r0, #0
    8e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    8e0a:	2101      	movs	r1, #1
    8e0c:	f108 0008 	add.w	r0, r8, #8
    8e10:	f012 fcf7 	bl	1b802 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8e14:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8e18:	4605      	mov	r5, r0
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d0f2      	beq.n	8e04 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    8e1e:	4a40      	ldr	r2, [pc, #256]	; (8f20 <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8e20:	2300      	movs	r3, #0
    8e22:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    8e24:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8e26:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
    8e2a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8e2e:	4288      	cmp	r0, r1
    8e30:	d119      	bne.n	8e66 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    8e32:	00d8      	lsls	r0, r3, #3
    8e34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8e38:	789f      	ldrb	r7, [r3, #2]
    8e3a:	2f01      	cmp	r7, #1
    8e3c:	d12e      	bne.n	8e9c <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8e3e:	34b8      	adds	r4, #184	; 0xb8
    8e40:	e8d4 3fef 	ldaex	r3, [r4]
    8e44:	f043 0201 	orr.w	r2, r3, #1
    8e48:	e8c4 2fe1 	stlex	r1, r2, [r4]
    8e4c:	2900      	cmp	r1, #0
    8e4e:	d1f7      	bne.n	8e40 <bt_att_recv+0x5c>
    8e50:	07da      	lsls	r2, r3, #31
    8e52:	d539      	bpl.n	8ec8 <bt_att_recv+0xe4>
    8e54:	492f      	ldr	r1, [pc, #188]	; (8f14 <bt_att_recv+0x130>)
    8e56:	4b30      	ldr	r3, [pc, #192]	; (8f18 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
    8e58:	4832      	ldr	r0, [pc, #200]	; (8f24 <bt_att_recv+0x140>)
    8e5a:	1ac9      	subs	r1, r1, r3
    8e5c:	08c9      	lsrs	r1, r1, #3
    8e5e:	0189      	lsls	r1, r1, #6
    8e60:	f041 0102 	orr.w	r1, r1, #2
    8e64:	e7cc      	b.n	8e00 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8e66:	3301      	adds	r3, #1
    8e68:	2b1c      	cmp	r3, #28
    8e6a:	d1de      	bne.n	8e2a <bt_att_recv+0x46>
    8e6c:	4b2a      	ldr	r3, [pc, #168]	; (8f18 <bt_att_recv+0x134>)
    8e6e:	4a29      	ldr	r2, [pc, #164]	; (8f14 <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8e70:	482d      	ldr	r0, [pc, #180]	; (8f28 <bt_att_recv+0x144>)
    8e72:	1ad2      	subs	r2, r2, r3
    8e74:	08d2      	lsrs	r2, r2, #3
    8e76:	0192      	lsls	r2, r2, #6
    8e78:	f042 0202 	orr.w	r2, r2, #2
    8e7c:	f00f f833 	bl	17ee6 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8e80:	7829      	ldrb	r1, [r5, #0]
    8e82:	4608      	mov	r0, r1
    8e84:	f011 f866 	bl	19f54 <att_op_get_type>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d0bb      	beq.n	8e04 <bt_att_recv+0x20>
	if (!req) {
    8e8c:	2900      	cmp	r1, #0
    8e8e:	d0b9      	beq.n	8e04 <bt_att_recv+0x20>
    8e90:	2306      	movs	r3, #6
    8e92:	2200      	movs	r2, #0
    8e94:	4630      	mov	r0, r6
    8e96:	f7ff ff85 	bl	8da4 <send_err_rsp.part.0>
    8e9a:	e7b3      	b.n	8e04 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    8e9c:	2f05      	cmp	r7, #5
    8e9e:	d113      	bne.n	8ec8 <bt_att_recv+0xe4>
    8ea0:	34b8      	adds	r4, #184	; 0xb8
    8ea2:	e8d4 3fef 	ldaex	r3, [r4]
    8ea6:	f043 0202 	orr.w	r2, r3, #2
    8eaa:	e8c4 2fe1 	stlex	r1, r2, [r4]
    8eae:	2900      	cmp	r1, #0
    8eb0:	d1f7      	bne.n	8ea2 <bt_att_recv+0xbe>
    8eb2:	079b      	lsls	r3, r3, #30
    8eb4:	d508      	bpl.n	8ec8 <bt_att_recv+0xe4>
    8eb6:	4917      	ldr	r1, [pc, #92]	; (8f14 <bt_att_recv+0x130>)
    8eb8:	4b17      	ldr	r3, [pc, #92]	; (8f18 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
    8eba:	481c      	ldr	r0, [pc, #112]	; (8f2c <bt_att_recv+0x148>)
    8ebc:	1ac9      	subs	r1, r1, r3
    8ebe:	08c9      	lsrs	r1, r1, #3
    8ec0:	0189      	lsls	r1, r1, #6
    8ec2:	f041 0102 	orr.w	r1, r1, #2
    8ec6:	e79b      	b.n	8e00 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    8ec8:	eb0c 0300 	add.w	r3, ip, r0
    8ecc:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    8ed0:	785a      	ldrb	r2, [r3, #1]
    8ed2:	428a      	cmp	r2, r1
    8ed4:	d90e      	bls.n	8ef4 <bt_att_recv+0x110>
    8ed6:	4a10      	ldr	r2, [pc, #64]	; (8f18 <bt_att_recv+0x134>)
    8ed8:	4b0e      	ldr	r3, [pc, #56]	; (8f14 <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8eda:	4815      	ldr	r0, [pc, #84]	; (8f30 <bt_att_recv+0x14c>)
    8edc:	1a9b      	subs	r3, r3, r2
    8ede:	08db      	lsrs	r3, r3, #3
    8ee0:	019b      	lsls	r3, r3, #6
    8ee2:	782a      	ldrb	r2, [r5, #0]
    8ee4:	f043 0301 	orr.w	r3, r3, #1
    8ee8:	f00f f811 	bl	17f0e <log_2>
	if (handler->type == ATT_REQUEST && err) {
    8eec:	2f01      	cmp	r7, #1
    8eee:	d189      	bne.n	8e04 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    8ef0:	2304      	movs	r3, #4
    8ef2:	e009      	b.n	8f08 <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
    8ef4:	685b      	ldr	r3, [r3, #4]
    8ef6:	4641      	mov	r1, r8
    8ef8:	4630      	mov	r0, r6
    8efa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8efc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    8efe:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8f00:	d180      	bne.n	8e04 <bt_att_recv+0x20>
    8f02:	2800      	cmp	r0, #0
    8f04:	f43f af7e 	beq.w	8e04 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8f08:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8f0a:	2900      	cmp	r1, #0
    8f0c:	f43f af7a 	beq.w	8e04 <bt_att_recv+0x20>
    8f10:	e7bf      	b.n	8e92 <bt_att_recv+0xae>
    8f12:	bf00      	nop
    8f14:	000232ec 	.word	0x000232ec
    8f18:	000232ec 	.word	0x000232ec
    8f1c:	000262b1 	.word	0x000262b1
    8f20:	00023934 	.word	0x00023934
    8f24:	000262cc 	.word	0x000262cc
    8f28:	00026326 	.word	0x00026326
    8f2c:	000262e8 	.word	0x000262e8
    8f30:	00026307 	.word	0x00026307

00008f34 <att_write_req>:
{
    8f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f38:	4604      	mov	r4, r0
    8f3a:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    8f3c:	f101 0008 	add.w	r0, r1, #8
    8f40:	460d      	mov	r5, r1
    8f42:	f012 fc6e 	bl	1b822 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8f46:	6823      	ldr	r3, [r4, #0]
    8f48:	4606      	mov	r6, r0
    8f4a:	2101      	movs	r1, #1
    8f4c:	6818      	ldr	r0, [r3, #0]
			     handle, 0, buf->data, buf->len);
    8f4e:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    8f52:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8f54:	f011 ff8c 	bl	1ae70 <bt_gatt_change_aware>
    8f58:	2800      	cmp	r0, #0
    8f5a:	d040      	beq.n	8fde <att_write_req+0xaa>
	if (!handle) {
    8f5c:	2e00      	cmp	r6, #0
    8f5e:	d040      	beq.n	8fe2 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
    8f60:	2218      	movs	r2, #24
    8f62:	2100      	movs	r1, #0
    8f64:	4668      	mov	r0, sp
    8f66:	f010 f97a 	bl	1925e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    8f6a:	2200      	movs	r2, #0
    8f6c:	2113      	movs	r1, #19
    8f6e:	4620      	mov	r0, r4
    8f70:	f7ff feb6 	bl	8ce0 <bt_att_chan_create_pdu>
    8f74:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8f76:	b380      	cbz	r0, 8fda <att_write_req+0xa6>
	data.conn = chan->att->conn;
    8f78:	6823      	ldr	r3, [r4, #0]
	data.req = req;
    8f7a:	f04f 0812 	mov.w	r8, #18
	data.conn = chan->att->conn;
    8f7e:	681b      	ldr	r3, [r3, #0]
	data.offset = offset;
    8f80:	2700      	movs	r7, #0
	data.conn = chan->att->conn;
    8f82:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f84:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f86:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f88:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f8c:	4630      	mov	r0, r6
    8f8e:	466b      	mov	r3, sp
    8f90:	4a15      	ldr	r2, [pc, #84]	; (8fe8 <att_write_req+0xb4>)
	data.len = len;
    8f92:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    8f96:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    8f9a:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    8f9e:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8fa2:	f011 f81d 	bl	19fe0 <bt_gatt_foreach_attr>
	if (data.err) {
    8fa6:	f89d 5014 	ldrb.w	r5, [sp, #20]
    8faa:	b175      	cbz	r5, 8fca <att_write_req+0x96>
			net_buf_unref(data.buf);
    8fac:	9801      	ldr	r0, [sp, #4]
    8fae:	f003 fca1 	bl	c8f4 <net_buf_unref>
	if (!req) {
    8fb2:	4632      	mov	r2, r6
    8fb4:	4641      	mov	r1, r8
    8fb6:	4620      	mov	r0, r4
    8fb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8fbc:	f7ff fef2 	bl	8da4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8fc0:	463d      	mov	r5, r7
}
    8fc2:	4628      	mov	r0, r5
    8fc4:	b007      	add	sp, #28
    8fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    8fca:	9901      	ldr	r1, [sp, #4]
    8fcc:	2900      	cmp	r1, #0
    8fce:	d0f8      	beq.n	8fc2 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8fd0:	4620      	mov	r0, r4
    8fd2:	4a06      	ldr	r2, [pc, #24]	; (8fec <att_write_req+0xb8>)
    8fd4:	f011 f9dc 	bl	1a390 <bt_att_chan_send_rsp>
    8fd8:	e7f3      	b.n	8fc2 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    8fda:	250e      	movs	r5, #14
    8fdc:	e7f1      	b.n	8fc2 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8fde:	2512      	movs	r5, #18
    8fe0:	e7ef      	b.n	8fc2 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    8fe2:	2501      	movs	r5, #1
    8fe4:	e7ed      	b.n	8fc2 <att_write_req+0x8e>
    8fe6:	bf00      	nop
    8fe8:	0001a1f1 	.word	0x0001a1f1
    8fec:	0001a1c9 	.word	0x0001a1c9

00008ff0 <bt_att_create_pdu>:
{
    8ff0:	b570      	push	{r4, r5, r6, lr}
    8ff2:	460e      	mov	r6, r1
    8ff4:	4615      	mov	r5, r2
	att = att_get(conn);
    8ff6:	f7ff fcd9 	bl	89ac <att_get>
	if (!att) {
    8ffa:	b1c0      	cbz	r0, 902e <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    8ffe:	1c69      	adds	r1, r5, #1
    9000:	b15b      	cbz	r3, 901a <bt_att_create_pdu+0x2a>
    9002:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    9006:	d008      	beq.n	901a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	b10b      	cbz	r3, 9010 <bt_att_create_pdu+0x20>
    900c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    9010:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    9014:	4291      	cmp	r1, r2
    9016:	d90c      	bls.n	9032 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9018:	b98b      	cbnz	r3, 903e <bt_att_create_pdu+0x4e>
    901a:	4a0e      	ldr	r2, [pc, #56]	; (9054 <bt_att_create_pdu+0x64>)
    901c:	4b0e      	ldr	r3, [pc, #56]	; (9058 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    901e:	480f      	ldr	r0, [pc, #60]	; (905c <bt_att_create_pdu+0x6c>)
    9020:	1ad2      	subs	r2, r2, r3
    9022:	08d2      	lsrs	r2, r2, #3
    9024:	0192      	lsls	r2, r2, #6
    9026:	f042 0202 	orr.w	r2, r2, #2
    902a:	f00e ff5c 	bl	17ee6 <log_1>
}
    902e:	2000      	movs	r0, #0
    9030:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    9032:	462a      	mov	r2, r5
    9034:	4631      	mov	r1, r6
}
    9036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    903a:	f7ff be51 	b.w	8ce0 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    903e:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    9042:	d004      	beq.n	904e <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9044:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9048:	b10c      	cbz	r4, 904e <bt_att_create_pdu+0x5e>
    904a:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    904e:	4618      	mov	r0, r3
    9050:	4623      	mov	r3, r4
    9052:	e7dd      	b.n	9010 <bt_att_create_pdu+0x20>
    9054:	000232ec 	.word	0x000232ec
    9058:	000232ec 	.word	0x000232ec
    905c:	00026340 	.word	0x00026340

00009060 <att_read_group_req>:
{
    9060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9064:	7b0c      	ldrb	r4, [r1, #12]
{
    9066:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    9068:	3c04      	subs	r4, #4
    906a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    906c:	2c02      	cmp	r4, #2
{
    906e:	4608      	mov	r0, r1
    9070:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    9072:	d001      	beq.n	9078 <att_read_group_req+0x18>
    9074:	2c10      	cmp	r4, #16
    9076:	d16f      	bne.n	9158 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    9078:	2104      	movs	r1, #4
    907a:	3008      	adds	r0, #8
    907c:	f012 fbc1 	bl	1b802 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9080:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    9084:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9086:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9088:	1d01      	adds	r1, r0, #4
    908a:	4622      	mov	r2, r4
    908c:	4640      	mov	r0, r8
    908e:	f010 fadb 	bl	19648 <bt_uuid_create>
    9092:	2800      	cmp	r0, #0
    9094:	d062      	beq.n	915c <att_read_group_req+0xfc>
	if (!start || !end) {
    9096:	2e00      	cmp	r6, #0
    9098:	d03a      	beq.n	9110 <att_read_group_req+0xb0>
    909a:	2400      	movs	r4, #0
    909c:	2f00      	cmp	r7, #0
    909e:	d036      	beq.n	910e <att_read_group_req+0xae>
	if (start > end) {
    90a0:	42be      	cmp	r6, r7
    90a2:	d835      	bhi.n	9110 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    90a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    90a8:	4640      	mov	r0, r8
    90aa:	a901      	add	r1, sp, #4
    90ac:	f88d 4004 	strb.w	r4, [sp, #4]
    90b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    90b4:	f010 fa9e 	bl	195f4 <bt_uuid_cmp>
    90b8:	2800      	cmp	r0, #0
    90ba:	d134      	bne.n	9126 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    90bc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    90be:	2214      	movs	r2, #20
    90c0:	2100      	movs	r1, #0
    90c2:	a807      	add	r0, sp, #28
    90c4:	f010 f8cb 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    90c8:	2201      	movs	r2, #1
    90ca:	2111      	movs	r1, #17
    90cc:	4620      	mov	r0, r4
    90ce:	f7ff ff8f 	bl	8ff0 <bt_att_create_pdu>
    90d2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    90d4:	2800      	cmp	r0, #0
    90d6:	d041      	beq.n	915c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    90d8:	2101      	movs	r1, #1
    90da:	3008      	adds	r0, #8
	data.uuid = uuid;
    90dc:	e9cd 5807 	strd	r5, r8, [sp, #28]
    90e0:	f012 fb55 	bl	1b78e <net_buf_simple_add>
	data.rsp->len = 0U;
    90e4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90e8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    90ea:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    90ec:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    90f0:	4639      	mov	r1, r7
    90f2:	4630      	mov	r0, r6
    90f4:	4a1a      	ldr	r2, [pc, #104]	; (9160 <att_read_group_req+0x100>)
	data.group = NULL;
    90f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    90fa:	f010 ff71 	bl	19fe0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    90fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9100:	781c      	ldrb	r4, [r3, #0]
    9102:	bb1c      	cbnz	r4, 914c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    9104:	9809      	ldr	r0, [sp, #36]	; 0x24
    9106:	f003 fbf5 	bl	c8f4 <net_buf_unref>
	if (!req) {
    910a:	230a      	movs	r3, #10
    910c:	e018      	b.n	9140 <att_read_group_req+0xe0>
			*err = 0U;
    910e:	463e      	mov	r6, r7
	if (!req) {
    9110:	2301      	movs	r3, #1
    9112:	4632      	mov	r2, r6
    9114:	2110      	movs	r1, #16
    9116:	4628      	mov	r0, r5
    9118:	f7ff fe44 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    911c:	2400      	movs	r4, #0
}
    911e:	4620      	mov	r0, r4
    9120:	b00c      	add	sp, #48	; 0x30
    9122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9126:	f642 0301 	movw	r3, #10241	; 0x2801
    912a:	4640      	mov	r0, r8
    912c:	a907      	add	r1, sp, #28
    912e:	f88d 401c 	strb.w	r4, [sp, #28]
    9132:	f8ad 301e 	strh.w	r3, [sp, #30]
    9136:	f010 fa5d 	bl	195f4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    913a:	2800      	cmp	r0, #0
    913c:	d0be      	beq.n	90bc <att_read_group_req+0x5c>
	if (!req) {
    913e:	2310      	movs	r3, #16
    9140:	4632      	mov	r2, r6
    9142:	2110      	movs	r1, #16
    9144:	4628      	mov	r0, r5
    9146:	f7ff fe2d 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    914a:	e7e8      	b.n	911e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    914c:	4628      	mov	r0, r5
    914e:	4a05      	ldr	r2, [pc, #20]	; (9164 <att_read_group_req+0x104>)
    9150:	9909      	ldr	r1, [sp, #36]	; 0x24
    9152:	f011 f91d 	bl	1a390 <bt_att_chan_send_rsp>
	return 0;
    9156:	e7e1      	b.n	911c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    9158:	2404      	movs	r4, #4
    915a:	e7e0      	b.n	911e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    915c:	240e      	movs	r4, #14
    915e:	e7de      	b.n	911e <att_read_group_req+0xbe>
    9160:	000086f5 	.word	0x000086f5
    9164:	0001a1c9 	.word	0x0001a1c9

00009168 <att_read_mult_req>:
{
    9168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    916c:	6886      	ldr	r6, [r0, #8]
{
    916e:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    9170:	2210      	movs	r2, #16
{
    9172:	4604      	mov	r4, r0
    9174:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    9176:	4668      	mov	r0, sp
    9178:	2100      	movs	r1, #0
    917a:	f010 f870 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    917e:	2200      	movs	r2, #0
    9180:	210f      	movs	r1, #15
    9182:	4630      	mov	r0, r6
    9184:	f7ff ff34 	bl	8ff0 <bt_att_create_pdu>
    9188:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    918a:	b360      	cbz	r0, 91e6 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    918c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9190:	f8df 905c 	ldr.w	r9, [pc, #92]	; 91f0 <att_read_mult_req+0x88>
	data.chan = chan;
    9194:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    9196:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
    919a:	89ab      	ldrh	r3, [r5, #12]
    919c:	2b01      	cmp	r3, #1
    919e:	d805      	bhi.n	91ac <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    91a0:	4620      	mov	r0, r4
    91a2:	4a12      	ldr	r2, [pc, #72]	; (91ec <att_read_mult_req+0x84>)
    91a4:	9902      	ldr	r1, [sp, #8]
    91a6:	f011 f8f3 	bl	1a390 <bt_att_chan_send_rsp>
    91aa:	e018      	b.n	91de <att_read_mult_req+0x76>
    91ac:	4638      	mov	r0, r7
    91ae:	f012 fb38 	bl	1b822 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91b2:	466b      	mov	r3, sp
    91b4:	464a      	mov	r2, r9
    91b6:	4601      	mov	r1, r0
    91b8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    91ba:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91be:	f010 ff0f 	bl	19fe0 <bt_gatt_foreach_attr>
		if (data.err) {
    91c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    91c6:	2b00      	cmp	r3, #0
    91c8:	d0e7      	beq.n	919a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    91ca:	9802      	ldr	r0, [sp, #8]
    91cc:	f003 fb92 	bl	c8f4 <net_buf_unref>
	if (!req) {
    91d0:	4632      	mov	r2, r6
    91d2:	210e      	movs	r1, #14
    91d4:	4620      	mov	r0, r4
    91d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    91da:	f7ff fde3 	bl	8da4 <send_err_rsp.part.0>
	return 0;
    91de:	2000      	movs	r0, #0
}
    91e0:	b005      	add	sp, #20
    91e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    91e6:	200e      	movs	r0, #14
    91e8:	e7fa      	b.n	91e0 <att_read_mult_req+0x78>
    91ea:	bf00      	nop
    91ec:	0001a1c9 	.word	0x0001a1c9
    91f0:	0001a24d 	.word	0x0001a24d

000091f4 <att_read_rsp>:
{
    91f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    91f8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    91fc:	4605      	mov	r5, r0
    91fe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    9200:	4640      	mov	r0, r8
    9202:	2101      	movs	r1, #1
{
    9204:	4614      	mov	r4, r2
    9206:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9208:	f011 fe32 	bl	1ae70 <bt_gatt_change_aware>
    920c:	b390      	cbz	r0, 9274 <att_read_rsp+0x80>
	if (!handle) {
    920e:	b39e      	cbz	r6, 9278 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    9210:	2210      	movs	r2, #16
    9212:	2100      	movs	r1, #0
    9214:	4668      	mov	r0, sp
    9216:	f010 f822 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    921a:	2200      	movs	r2, #0
    921c:	4621      	mov	r1, r4
    921e:	4640      	mov	r0, r8
    9220:	f7ff fee6 	bl	8ff0 <bt_att_create_pdu>
    9224:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9226:	b348      	cbz	r0, 927c <att_read_rsp+0x88>
	data.offset = offset;
    9228:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    922c:	4631      	mov	r1, r6
	data.offset = offset;
    922e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9232:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9234:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9236:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    923a:	4a11      	ldr	r2, [pc, #68]	; (9280 <att_read_rsp+0x8c>)
    923c:	466b      	mov	r3, sp
	data.chan = chan;
    923e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9240:	f010 fece 	bl	19fe0 <bt_gatt_foreach_attr>
	if (data.err) {
    9244:	f89d 400c 	ldrb.w	r4, [sp, #12]
    9248:	b174      	cbz	r4, 9268 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    924a:	9802      	ldr	r0, [sp, #8]
    924c:	f003 fb52 	bl	c8f4 <net_buf_unref>
	if (!req) {
    9250:	4632      	mov	r2, r6
    9252:	4639      	mov	r1, r7
    9254:	4628      	mov	r0, r5
    9256:	f89d 300c 	ldrb.w	r3, [sp, #12]
    925a:	f7ff fda3 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    925e:	2400      	movs	r4, #0
}
    9260:	4620      	mov	r0, r4
    9262:	b004      	add	sp, #16
    9264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9268:	4628      	mov	r0, r5
    926a:	4a06      	ldr	r2, [pc, #24]	; (9284 <att_read_rsp+0x90>)
    926c:	9902      	ldr	r1, [sp, #8]
    926e:	f011 f88f 	bl	1a390 <bt_att_chan_send_rsp>
	return 0;
    9272:	e7f5      	b.n	9260 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9274:	2412      	movs	r4, #18
    9276:	e7f3      	b.n	9260 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9278:	2401      	movs	r4, #1
    927a:	e7f1      	b.n	9260 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    927c:	240e      	movs	r4, #14
    927e:	e7ef      	b.n	9260 <att_read_rsp+0x6c>
    9280:	0001a24d 	.word	0x0001a24d
    9284:	0001a1c9 	.word	0x0001a1c9

00009288 <att_read_type_req>:
{
    9288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    928c:	7b0c      	ldrb	r4, [r1, #12]
{
    928e:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    9290:	3c04      	subs	r4, #4
    9292:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9294:	2c02      	cmp	r4, #2
{
    9296:	4608      	mov	r0, r1
    9298:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    929a:	d001      	beq.n	92a0 <att_read_type_req+0x18>
    929c:	2c10      	cmp	r4, #16
    929e:	d150      	bne.n	9342 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    92a0:	2104      	movs	r1, #4
    92a2:	3008      	adds	r0, #8
    92a4:	f012 faad 	bl	1b802 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    92a8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    92ac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    92ae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    92b0:	1d01      	adds	r1, r0, #4
    92b2:	4622      	mov	r2, r4
    92b4:	4640      	mov	r0, r8
    92b6:	f010 f9c7 	bl	19648 <bt_uuid_create>
    92ba:	b188      	cbz	r0, 92e0 <att_read_type_req+0x58>
	if (!start || !end) {
    92bc:	b19e      	cbz	r6, 92e6 <att_read_type_req+0x5e>
    92be:	b18f      	cbz	r7, 92e4 <att_read_type_req+0x5c>
	if (start > end) {
    92c0:	42b7      	cmp	r7, r6
    92c2:	d310      	bcc.n	92e6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    92c4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    92c6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    92c8:	2100      	movs	r1, #0
    92ca:	eb0d 0002 	add.w	r0, sp, r2
    92ce:	f00f ffc6 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    92d2:	2201      	movs	r2, #1
    92d4:	2109      	movs	r1, #9
    92d6:	4620      	mov	r0, r4
    92d8:	f7ff fe8a 	bl	8ff0 <bt_att_create_pdu>
    92dc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    92de:	b968      	cbnz	r0, 92fc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    92e0:	240e      	movs	r4, #14
    92e2:	e007      	b.n	92f4 <att_read_type_req+0x6c>
			*err = 0U;
    92e4:	463e      	mov	r6, r7
	if (!req) {
    92e6:	2301      	movs	r3, #1
    92e8:	4632      	mov	r2, r6
    92ea:	2108      	movs	r1, #8
    92ec:	4628      	mov	r0, r5
    92ee:	f7ff fd59 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    92f2:	2400      	movs	r4, #0
}
    92f4:	4620      	mov	r0, r4
    92f6:	b00c      	add	sp, #48	; 0x30
    92f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    92fc:	2101      	movs	r1, #1
    92fe:	3008      	adds	r0, #8
	data.uuid = uuid;
    9300:	e9cd 5806 	strd	r5, r8, [sp, #24]
    9304:	f012 fa43 	bl	1b78e <net_buf_simple_add>
	data.rsp->len = 0U;
    9308:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    930c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    930e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9310:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    9312:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9316:	4a0c      	ldr	r2, [pc, #48]	; (9348 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9318:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    931c:	4630      	mov	r0, r6
    931e:	ab06      	add	r3, sp, #24
    9320:	f010 fe5e 	bl	19fe0 <bt_gatt_foreach_attr>
	if (data.err) {
    9324:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    9328:	b12c      	cbz	r4, 9336 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    932a:	9808      	ldr	r0, [sp, #32]
    932c:	f003 fae2 	bl	c8f4 <net_buf_unref>
	if (!req) {
    9330:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9334:	e7d8      	b.n	92e8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9336:	4628      	mov	r0, r5
    9338:	4a04      	ldr	r2, [pc, #16]	; (934c <att_read_type_req+0xc4>)
    933a:	9908      	ldr	r1, [sp, #32]
    933c:	f011 f828 	bl	1a390 <bt_att_chan_send_rsp>
	return 0;
    9340:	e7d8      	b.n	92f4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    9342:	2404      	movs	r4, #4
    9344:	e7d6      	b.n	92f4 <att_read_type_req+0x6c>
    9346:	bf00      	nop
    9348:	000087a1 	.word	0x000087a1
    934c:	0001a1c9 	.word	0x0001a1c9

00009350 <att_find_type_req>:
{
    9350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9354:	4688      	mov	r8, r1
    9356:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9358:	2106      	movs	r1, #6
    935a:	b086      	sub	sp, #24
    935c:	f108 0008 	add.w	r0, r8, #8
    9360:	f012 fa4f 	bl	1b802 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9364:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9366:	b317      	cbz	r7, 93ae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9368:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    936c:	f1b9 0f00 	cmp.w	r9, #0
    9370:	d01c      	beq.n	93ac <att_find_type_req+0x5c>
	if (start > end) {
    9372:	454f      	cmp	r7, r9
    9374:	d81b      	bhi.n	93ae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9376:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9378:	2400      	movs	r4, #0
    937a:	f8ad 3002 	strh.w	r3, [sp, #2]
    937e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9382:	4668      	mov	r0, sp
    9384:	a901      	add	r1, sp, #4
	value = buf->data;
    9386:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    938a:	f88d 4000 	strb.w	r4, [sp]
    938e:	f88d 4004 	strb.w	r4, [sp, #4]
    9392:	f8ad 3006 	strh.w	r3, [sp, #6]
    9396:	f010 f92d 	bl	195f4 <bt_uuid_cmp>
    939a:	4606      	mov	r6, r0
    939c:	b190      	cbz	r0, 93c4 <att_find_type_req+0x74>
	if (!req) {
    939e:	230a      	movs	r3, #10
    93a0:	463a      	mov	r2, r7
    93a2:	2106      	movs	r1, #6
    93a4:	4628      	mov	r0, r5
    93a6:	f7ff fcfd 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    93aa:	e007      	b.n	93bc <att_find_type_req+0x6c>
			*err = 0U;
    93ac:	464f      	mov	r7, r9
	if (!req) {
    93ae:	2301      	movs	r3, #1
    93b0:	463a      	mov	r2, r7
    93b2:	2106      	movs	r1, #6
    93b4:	4628      	mov	r0, r5
    93b6:	f7ff fcf5 	bl	8da4 <send_err_rsp.part.0>
		return 0;
    93ba:	2400      	movs	r4, #0
}
    93bc:	4620      	mov	r0, r4
    93be:	b006      	add	sp, #24
    93c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    93c4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    93c8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    93cc:	4601      	mov	r1, r0
    93ce:	2214      	movs	r2, #20
    93d0:	a801      	add	r0, sp, #4
    93d2:	f00f ff44 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    93d6:	4632      	mov	r2, r6
    93d8:	2107      	movs	r1, #7
    93da:	4640      	mov	r0, r8
    93dc:	f7ff fe08 	bl	8ff0 <bt_att_create_pdu>
    93e0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    93e2:	b1e0      	cbz	r0, 941e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93e4:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    93e6:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93e8:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    93ec:	4638      	mov	r0, r7
    93ee:	4a0d      	ldr	r2, [pc, #52]	; (9424 <att_find_type_req+0xd4>)
    93f0:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
    93f2:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
    93f6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    93fa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    93fc:	f010 fdf0 	bl	19fe0 <bt_gatt_foreach_attr>
	if (data.err) {
    9400:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9404:	b12c      	cbz	r4, 9412 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    9406:	9802      	ldr	r0, [sp, #8]
    9408:	f003 fa74 	bl	c8f4 <net_buf_unref>
	if (!req) {
    940c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9410:	e7ce      	b.n	93b0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9412:	4628      	mov	r0, r5
    9414:	4a04      	ldr	r2, [pc, #16]	; (9428 <att_find_type_req+0xd8>)
    9416:	9902      	ldr	r1, [sp, #8]
    9418:	f010 ffba 	bl	1a390 <bt_att_chan_send_rsp>
	return 0;
    941c:	e7ce      	b.n	93bc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    941e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9420:	e7cc      	b.n	93bc <att_find_type_req+0x6c>
    9422:	bf00      	nop
    9424:	00008849 	.word	0x00008849
    9428:	0001a1c9 	.word	0x0001a1c9

0000942c <att_find_info_req>:
{
    942c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    942e:	688b      	ldr	r3, [r1, #8]
{
    9430:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    9432:	881e      	ldrh	r6, [r3, #0]
{
    9434:	b085      	sub	sp, #20
	if (!start || !end) {
    9436:	b19e      	cbz	r6, 9460 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9438:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    943a:	b184      	cbz	r4, 945e <att_find_info_req+0x32>
	if (start > end) {
    943c:	42b4      	cmp	r4, r6
    943e:	d30f      	bcc.n	9460 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    9440:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    9442:	2210      	movs	r2, #16
    9444:	2100      	movs	r1, #0
    9446:	4668      	mov	r0, sp
    9448:	f00f ff09 	bl	1925e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    944c:	2200      	movs	r2, #0
    944e:	2105      	movs	r1, #5
    9450:	4638      	mov	r0, r7
    9452:	f7ff fdcd 	bl	8ff0 <bt_att_create_pdu>
    9456:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9458:	b958      	cbnz	r0, 9472 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    945a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    945c:	e007      	b.n	946e <att_find_info_req+0x42>
			*err = 0U;
    945e:	4626      	mov	r6, r4
	if (!req) {
    9460:	2301      	movs	r3, #1
    9462:	4632      	mov	r2, r6
    9464:	2104      	movs	r1, #4
    9466:	4628      	mov	r0, r5
    9468:	f7ff fc9c 	bl	8da4 <send_err_rsp.part.0>
	return 0;
    946c:	2000      	movs	r0, #0
}
    946e:	b005      	add	sp, #20
    9470:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9472:	4621      	mov	r1, r4
    9474:	466b      	mov	r3, sp
    9476:	4630      	mov	r0, r6
    9478:	4a08      	ldr	r2, [pc, #32]	; (949c <att_find_info_req+0x70>)
	data.chan = chan;
    947a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    947c:	f010 fdb0 	bl	19fe0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9480:	9c02      	ldr	r4, [sp, #8]
    9482:	b924      	cbnz	r4, 948e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9484:	9801      	ldr	r0, [sp, #4]
    9486:	f003 fa35 	bl	c8f4 <net_buf_unref>
	if (!req) {
    948a:	230a      	movs	r3, #10
    948c:	e7e9      	b.n	9462 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    948e:	4628      	mov	r0, r5
    9490:	4a03      	ldr	r2, [pc, #12]	; (94a0 <att_find_info_req+0x74>)
    9492:	9901      	ldr	r1, [sp, #4]
    9494:	f010 ff7c 	bl	1a390 <bt_att_chan_send_rsp>
    9498:	e7e8      	b.n	946c <att_find_info_req+0x40>
    949a:	bf00      	nop
    949c:	0001a10d 	.word	0x0001a10d
    94a0:	0001a1c9 	.word	0x0001a1c9

000094a4 <att_mtu_req>:
{
    94a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    94a6:	4603      	mov	r3, r0
    94a8:	f853 2bc0 	ldr.w	r2, [r3], #192
{
    94ac:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    94ae:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    94b0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    94b4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    94b8:	071b      	lsls	r3, r3, #28
    94ba:	d41f      	bmi.n	94fc <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
    94bc:	688b      	ldr	r3, [r1, #8]
    94be:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    94c0:	2e16      	cmp	r6, #22
    94c2:	d91d      	bls.n	9500 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    94c4:	2202      	movs	r2, #2
    94c6:	2103      	movs	r1, #3
    94c8:	f7ff fd92 	bl	8ff0 <bt_att_create_pdu>
	if (!pdu) {
    94cc:	4607      	mov	r7, r0
    94ce:	b1c8      	cbz	r0, 9504 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
    94d0:	2102      	movs	r1, #2
    94d2:	3008      	adds	r0, #8
    94d4:	f012 f95b 	bl	1b78e <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    94d8:	f06f 0308 	mvn.w	r3, #8
    94dc:	7044      	strb	r4, [r0, #1]
    94de:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    94e0:	4639      	mov	r1, r7
    94e2:	4628      	mov	r0, r5
    94e4:	4a08      	ldr	r2, [pc, #32]	; (9508 <att_mtu_req+0x64>)
    94e6:	f010 ff53 	bl	1a390 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    94ea:	2ef7      	cmp	r6, #247	; 0xf7
    94ec:	bf28      	it	cs
    94ee:	26f7      	movcs	r6, #247	; 0xf7
	return 0;
    94f0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    94f2:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    94f6:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
}
    94fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    94fc:	2006      	movs	r0, #6
    94fe:	e7fc      	b.n	94fa <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
    9500:	2004      	movs	r0, #4
    9502:	e7fa      	b.n	94fa <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
    9504:	200e      	movs	r0, #14
    9506:	e7f8      	b.n	94fa <att_mtu_req+0x56>
    9508:	0001a1c9 	.word	0x0001a1c9

0000950c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    950c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    950e:	2400      	movs	r4, #0
{
    9510:	4602      	mov	r2, r0
    9512:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9514:	4807      	ldr	r0, [pc, #28]	; (9534 <bt_att_req_alloc+0x28>)
    9516:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    9518:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    951a:	f00c fd93 	bl	16044 <k_mem_slab_alloc>
    951e:	4601      	mov	r1, r0
    9520:	b930      	cbnz	r0, 9530 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    9522:	221c      	movs	r2, #28
    9524:	9801      	ldr	r0, [sp, #4]
    9526:	f00f fe9a 	bl	1925e <memset>

	return req;
    952a:	9801      	ldr	r0, [sp, #4]
}
    952c:	b002      	add	sp, #8
    952e:	bd10      	pop	{r4, pc}
		return NULL;
    9530:	4620      	mov	r0, r4
    9532:	e7fb      	b.n	952c <bt_att_req_alloc+0x20>
    9534:	200005d8 	.word	0x200005d8

00009538 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9538:	b507      	push	{r0, r1, r2, lr}
    953a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    953c:	a901      	add	r1, sp, #4
    953e:	4803      	ldr	r0, [pc, #12]	; (954c <bt_att_req_free+0x14>)
    9540:	f00c fdb2 	bl	160a8 <k_mem_slab_free>
}
    9544:	b003      	add	sp, #12
    9546:	f85d fb04 	ldr.w	pc, [sp], #4
    954a:	bf00      	nop
    954c:	200005d8 	.word	0x200005d8

00009550 <att_handle_rsp>:
{
    9550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9554:	4605      	mov	r5, r0
    9556:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    9558:	30e0      	adds	r0, #224	; 0xe0
{
    955a:	4689      	mov	r9, r1
    955c:	4692      	mov	sl, r2
    955e:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    9560:	f019 fb00 	bl	22b64 <k_delayed_work_cancel>
	if (!chan->req) {
    9564:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    9568:	bb64      	cbnz	r4, 95c4 <att_handle_rsp+0x74>
    956a:	4932      	ldr	r1, [pc, #200]	; (9634 <att_handle_rsp+0xe4>)
    956c:	4b32      	ldr	r3, [pc, #200]	; (9638 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    956e:	4833      	ldr	r0, [pc, #204]	; (963c <att_handle_rsp+0xec>)
    9570:	1ac9      	subs	r1, r1, r3
    9572:	08c9      	lsrs	r1, r1, #3
    9574:	0189      	lsls	r1, r1, #6
    9576:	f041 0102 	orr.w	r1, r1, #2
    957a:	f00e fca7 	bl	17ecc <log_0>
	att_process(chan->att);
    957e:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    9582:	f10b 0004 	add.w	r0, fp, #4
    9586:	f010 fca0 	bl	19eca <sys_slist_get>
	if (!node) {
    958a:	4607      	mov	r7, r0
    958c:	2800      	cmp	r0, #0
    958e:	d039      	beq.n	9604 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9590:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
    9594:	b15a      	cbz	r2, 95ae <att_handle_rsp+0x5e>
    9596:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    959a:	d008      	beq.n	95ae <att_handle_rsp+0x5e>
    959c:	6816      	ldr	r6, [r2, #0]
    959e:	b10e      	cbz	r6, 95a4 <att_handle_rsp+0x54>
    95a0:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    95a4:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    95a8:	b33a      	cbz	r2, 95fa <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    95aa:	2e00      	cmp	r6, #0
    95ac:	d137      	bne.n	961e <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    95ae:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    95b2:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    95b4:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    95b8:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    95bc:	bb12      	cbnz	r2, 9604 <att_handle_rsp+0xb4>
	list->tail = node;
    95be:	f8cb 7008 	str.w	r7, [fp, #8]
}
    95c2:	e01f      	b.n	9604 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    95c4:	4b1e      	ldr	r3, [pc, #120]	; (9640 <att_handle_rsp+0xf0>)
    95c6:	429c      	cmp	r4, r3
    95c8:	d103      	bne.n	95d2 <att_handle_rsp+0x82>
		chan->req = NULL;
    95ca:	2400      	movs	r4, #0
    95cc:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    95d0:	e7d5      	b.n	957e <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    95d2:	6920      	ldr	r0, [r4, #16]
    95d4:	b128      	cbz	r0, 95e2 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    95d6:	f003 f98d 	bl	c8f4 <net_buf_unref>
		chan->req->buf = NULL;
    95da:	2200      	movs	r2, #0
    95dc:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    95e0:	611a      	str	r2, [r3, #16]
	chan->req->func = NULL;
    95e2:	2600      	movs	r6, #0
	func = chan->req->func;
    95e4:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	params = chan->req->user_data;
    95e8:	6983      	ldr	r3, [r0, #24]
	func = chan->req->func;
    95ea:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    95ec:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    95ee:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    95f0:	f010 ff4e 	bl	1a490 <att_req_destroy>
	chan->req = NULL;
    95f4:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    95f8:	e7c1      	b.n	957e <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    95fa:	4639      	mov	r1, r7
    95fc:	f010 fe76 	bl	1a2ec <bt_att_chan_req_send>
    9600:	2800      	cmp	r0, #0
    9602:	dbd2      	blt.n	95aa <att_handle_rsp+0x5a>
	if (func) {
    9604:	b13c      	cbz	r4, 9616 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    9606:	9b03      	ldr	r3, [sp, #12]
    9608:	6828      	ldr	r0, [r5, #0]
    960a:	9300      	str	r3, [sp, #0]
    960c:	464a      	mov	r2, r9
    960e:	4653      	mov	r3, sl
    9610:	4641      	mov	r1, r8
    9612:	6800      	ldr	r0, [r0, #0]
    9614:	47a0      	blx	r4
}
    9616:	2000      	movs	r0, #0
    9618:	b005      	add	sp, #20
    961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    961e:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    9622:	d004      	beq.n	962e <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9624:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9628:	b10a      	cbz	r2, 962e <att_handle_rsp+0xde>
    962a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    962e:	4630      	mov	r0, r6
    9630:	4616      	mov	r6, r2
    9632:	e7b7      	b.n	95a4 <att_handle_rsp+0x54>
    9634:	000232ec 	.word	0x000232ec
    9638:	000232ec 	.word	0x000232ec
    963c:	0002635b 	.word	0x0002635b
    9640:	20025a48 	.word	0x20025a48

00009644 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    9644:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
{
    9648:	b570      	push	{r4, r5, r6, lr}
    964a:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    964c:	b352      	cbz	r2, 96a4 <att_error_rsp+0x60>
    964e:	4b1a      	ldr	r3, [pc, #104]	; (96b8 <att_error_rsp+0x74>)
    9650:	429a      	cmp	r2, r3
    9652:	d027      	beq.n	96a4 <att_error_rsp+0x60>
	if (chan->req->buf) {
    9654:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    9656:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    9658:	b12b      	cbz	r3, 9666 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    965a:	8995      	ldrh	r5, [r2, #12]
    965c:	6919      	ldr	r1, [r3, #16]
    965e:	4429      	add	r1, r5
    9660:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    9662:	89d1      	ldrh	r1, [r2, #14]
    9664:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    9666:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    9668:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    966a:	b9e3      	cbnz	r3, 96a6 <att_error_rsp+0x62>
	switch (err) {
    966c:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    966e:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    9670:	d006      	beq.n	9680 <att_error_rsp+0x3c>
    9672:	2d0f      	cmp	r5, #15
    9674:	d117      	bne.n	96a6 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    9676:	7a43      	ldrb	r3, [r0, #9]
    9678:	2b01      	cmp	r3, #1
    967a:	d814      	bhi.n	96a6 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    967c:	2102      	movs	r1, #2
    967e:	e007      	b.n	9690 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    9680:	7a43      	ldrb	r3, [r0, #9]
    9682:	2b01      	cmp	r3, #1
    9684:	d9fa      	bls.n	967c <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    9686:	2b02      	cmp	r3, #2
    9688:	d00a      	beq.n	96a0 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    968a:	2b03      	cmp	r3, #3
    968c:	d10b      	bne.n	96a6 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    968e:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    9690:	f010 fa90 	bl	19bb4 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    9694:	b938      	cbnz	r0, 96a6 <att_error_rsp+0x62>
		chan->req->retrying = true;
    9696:	2201      	movs	r2, #1
    9698:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    969c:	751a      	strb	r2, [r3, #20]
}
    969e:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    96a0:	2103      	movs	r1, #3
    96a2:	e7f5      	b.n	9690 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    96a4:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    96a6:	2200      	movs	r2, #0
    96a8:	462b      	mov	r3, r5
    96aa:	4620      	mov	r0, r4
}
    96ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    96b0:	4611      	mov	r1, r2
    96b2:	f7ff bf4d 	b.w	9550 <att_handle_rsp>
    96b6:	bf00      	nop
    96b8:	20025a48 	.word	0x20025a48

000096bc <bt_att_encrypt_change>:
	if (!att_chan->att) {
    96bc:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
    96c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96c4:	4604      	mov	r4, r0
    96c6:	460d      	mov	r5, r1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    96c8:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
    96cc:	b36b      	cbz	r3, 972a <bt_att_encrypt_change+0x6e>
	if (hci_status) {
    96ce:	b161      	cbz	r1, 96ea <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
    96d0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    96d4:	b34b      	cbz	r3, 972a <bt_att_encrypt_change+0x6e>
    96d6:	7d1b      	ldrb	r3, [r3, #20]
    96d8:	b33b      	cbz	r3, 972a <bt_att_encrypt_change+0x6e>
			att_handle_rsp(att_chan, NULL, 0,
    96da:	2200      	movs	r2, #0
    96dc:	4630      	mov	r0, r6
}
    96de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    96e2:	2305      	movs	r3, #5
    96e4:	4611      	mov	r1, r2
    96e6:	f7ff bf33 	b.w	9550 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    96ea:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    96ec:	4638      	mov	r0, r7
    96ee:	f001 facb 	bl	ac88 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    96f2:	7a7b      	ldrb	r3, [r7, #9]
    96f4:	2b01      	cmp	r3, #1
    96f6:	d018      	beq.n	972a <bt_att_encrypt_change+0x6e>
	if (!(att_chan->req && att_chan->req->retrying)) {
    96f8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    96fc:	b1ab      	cbz	r3, 972a <bt_att_encrypt_change+0x6e>
    96fe:	7d1a      	ldrb	r2, [r3, #20]
    9700:	b19a      	cbz	r2, 972a <bt_att_encrypt_change+0x6e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    9702:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    9704:	688b      	ldr	r3, [r1, #8]
    9706:	7818      	ldrb	r0, [r3, #0]
    9708:	f010 fc24 	bl	19f54 <att_op_get_type>
    970c:	3801      	subs	r0, #1
    970e:	b2c0      	uxtb	r0, r0
    9710:	2804      	cmp	r0, #4
    9712:	bf96      	itet	ls
    9714:	4b06      	ldrls	r3, [pc, #24]	; (9730 <bt_att_encrypt_change+0x74>)
    9716:	462a      	movhi	r2, r5
    9718:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    971c:	4630      	mov	r0, r6
    971e:	f010 fe37 	bl	1a390 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    9722:	2200      	movs	r2, #0
    9724:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    9728:	611a      	str	r2, [r3, #16]
}
    972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    972e:	bf00      	nop
    9730:	00023920 	.word	0x00023920

00009734 <att_reset>:
{
    9734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9736:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9738:	9803      	ldr	r0, [sp, #12]
    973a:	2200      	movs	r2, #0
    973c:	2300      	movs	r3, #0
    973e:	300c      	adds	r0, #12
    9740:	f011 ffce 	bl	1b6e0 <net_buf_get>
    9744:	b948      	cbnz	r0, 975a <att_reset+0x26>
	att->conn = NULL;
    9746:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9748:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    974a:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    974c:	b945      	cbnz	r5, 9760 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    974e:	4811      	ldr	r0, [pc, #68]	; (9794 <att_reset+0x60>)
    9750:	a903      	add	r1, sp, #12
    9752:	f00c fca9 	bl	160a8 <k_mem_slab_free>
}
    9756:	b004      	add	sp, #16
    9758:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    975a:	f003 f8cb 	bl	c8f4 <net_buf_unref>
    975e:	e7eb      	b.n	9738 <att_reset+0x4>
	return node->next;
    9760:	682c      	ldr	r4, [r5, #0]
    9762:	2c00      	cmp	r4, #0
    9764:	bf38      	it	cc
    9766:	2400      	movcc	r4, #0
		if (req->func) {
    9768:	686e      	ldr	r6, [r5, #4]
    976a:	b136      	cbz	r6, 977a <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    976c:	69ab      	ldr	r3, [r5, #24]
    976e:	210e      	movs	r1, #14
    9770:	9300      	str	r3, [sp, #0]
    9772:	2300      	movs	r3, #0
    9774:	461a      	mov	r2, r3
    9776:	4618      	mov	r0, r3
    9778:	47b0      	blx	r6
		att_req_destroy(req);
    977a:	4628      	mov	r0, r5
    977c:	f010 fe88 	bl	1a490 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9780:	2c00      	cmp	r4, #0
    9782:	d0e4      	beq.n	974e <att_reset+0x1a>
    9784:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9786:	4625      	mov	r5, r4
    9788:	2b00      	cmp	r3, #0
    978a:	bf38      	it	cc
    978c:	2300      	movcc	r3, #0
    978e:	461c      	mov	r4, r3
    9790:	e7ea      	b.n	9768 <att_reset+0x34>
    9792:	bf00      	nop
    9794:	200005a0 	.word	0x200005a0

00009798 <att_timeout>:
{
    9798:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    979a:	4605      	mov	r5, r0
    979c:	4b0d      	ldr	r3, [pc, #52]	; (97d4 <att_timeout+0x3c>)
    979e:	490e      	ldr	r1, [pc, #56]	; (97d8 <att_timeout+0x40>)
    97a0:	f855 6de0 	ldr.w	r6, [r5, #-224]!
    97a4:	1ac9      	subs	r1, r1, r3
    97a6:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    97a8:	0189      	lsls	r1, r1, #6
    97aa:	f041 0101 	orr.w	r1, r1, #1
{
    97ae:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    97b0:	480a      	ldr	r0, [pc, #40]	; (97dc <att_timeout+0x44>)
    97b2:	f00e fb8b 	bl	17ecc <log_0>
	att_chan_detach(chan);
    97b6:	4628      	mov	r0, r5
    97b8:	f010 fea8 	bl	1a50c <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    97bc:	6a75      	ldr	r5, [r6, #36]	; 0x24
    97be:	b945      	cbnz	r5, 97d2 <att_timeout+0x3a>
	att_reset(att);
    97c0:	4630      	mov	r0, r6
    97c2:	f7ff ffb7 	bl	9734 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    97c6:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    97ca:	f001 fa93 	bl	acf4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    97ce:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    97d2:	bd70      	pop	{r4, r5, r6, pc}
    97d4:	000232ec 	.word	0x000232ec
    97d8:	000232ec 	.word	0x000232ec
    97dc:	00026372 	.word	0x00026372

000097e0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    97e0:	b510      	push	{r4, lr}
    97e2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    97e4:	b348      	cbz	r0, 983a <bt_att_req_cancel+0x5a>
    97e6:	b341      	cbz	r1, 983a <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    97e8:	f7ff f8e0 	bl	89ac <att_get>
	if (!att) {
    97ec:	b328      	cbz	r0, 983a <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    97ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
    97f0:	b15b      	cbz	r3, 980a <bt_att_req_cancel+0x2a>
    97f2:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    97f6:	d008      	beq.n	980a <bt_att_req_cancel+0x2a>
    97f8:	681b      	ldr	r3, [r3, #0]
    97fa:	b10b      	cbz	r3, 9800 <bt_att_req_cancel+0x20>
    97fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    9800:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    9804:	4294      	cmp	r4, r2
    9806:	d005      	beq.n	9814 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9808:	b963      	cbnz	r3, 9824 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    980a:	4621      	mov	r1, r4
    980c:	3004      	adds	r0, #4
    980e:	f010 fb66 	bl	19ede <sys_slist_find_and_remove>
    9812:	e002      	b.n	981a <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    9814:	4b09      	ldr	r3, [pc, #36]	; (983c <bt_att_req_cancel+0x5c>)
    9816:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    981a:	4620      	mov	r0, r4
}
    981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    9820:	f010 be36 	b.w	1a490 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9824:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    9828:	d004      	beq.n	9834 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    982a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    982e:	b10a      	cbz	r2, 9834 <bt_att_req_cancel+0x54>
    9830:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    9834:	4619      	mov	r1, r3
    9836:	4613      	mov	r3, r2
    9838:	e7e2      	b.n	9800 <bt_att_req_cancel+0x20>
}
    983a:	bd10      	pop	{r4, pc}
    983c:	20025a48 	.word	0x20025a48

00009840 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    9840:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    9842:	4605      	mov	r5, r0
    9844:	4c14      	ldr	r4, [pc, #80]	; (9898 <find_cf_cfg+0x58>)
    9846:	b140      	cbz	r0, 985a <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9848:	4622      	mov	r2, r4
    984a:	f812 1b01 	ldrb.w	r1, [r2], #1
    984e:	f010 f9eb 	bl	19c28 <bt_conn_is_peer_addr_le>
    9852:	b1b0      	cbz	r0, 9882 <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    9854:	4620      	mov	r0, r4
    9856:	b003      	add	sp, #12
    9858:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    985a:	9000      	str	r0, [sp, #0]
    985c:	4669      	mov	r1, sp
    985e:	f8cd 0003 	str.w	r0, [sp, #3]
    9862:	1c60      	adds	r0, r4, #1
    9864:	f010 ff8a 	bl	1a77c <bt_addr_le_cmp>
    9868:	2800      	cmp	r0, #0
    986a:	d0f3      	beq.n	9854 <find_cf_cfg+0x14>
    986c:	4669      	mov	r1, sp
    986e:	f104 0011 	add.w	r0, r4, #17
    9872:	9500      	str	r5, [sp, #0]
    9874:	f8cd 5003 	str.w	r5, [sp, #3]
    9878:	f010 ff80 	bl	1a77c <bt_addr_le_cmp>
    987c:	b948      	cbnz	r0, 9892 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    987e:	3410      	adds	r4, #16
    9880:	e7e8      	b.n	9854 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9882:	4628      	mov	r0, r5
    9884:	7c21      	ldrb	r1, [r4, #16]
    9886:	f104 0211 	add.w	r2, r4, #17
    988a:	f010 f9cd 	bl	19c28 <bt_conn_is_peer_addr_le>
    988e:	2800      	cmp	r0, #0
    9890:	d1f5      	bne.n	987e <find_cf_cfg+0x3e>
	return NULL;
    9892:	2400      	movs	r4, #0
    9894:	e7de      	b.n	9854 <find_cf_cfg+0x14>
    9896:	bf00      	nop
    9898:	20025a64 	.word	0x20025a64

0000989c <find_sc_cfg>:
{
    989c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    989e:	4c0d      	ldr	r4, [pc, #52]	; (98d4 <find_sc_cfg+0x38>)
{
    98a0:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
    98a2:	7823      	ldrb	r3, [r4, #0]
{
    98a4:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    98a6:	4283      	cmp	r3, r0
    98a8:	d009      	beq.n	98be <find_sc_cfg+0x22>
    98aa:	7b23      	ldrb	r3, [r4, #12]
    98ac:	42ab      	cmp	r3, r5
    98ae:	d10f      	bne.n	98d0 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    98b0:	4631      	mov	r1, r6
    98b2:	4809      	ldr	r0, [pc, #36]	; (98d8 <find_sc_cfg+0x3c>)
    98b4:	f010 ff62 	bl	1a77c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    98b8:	b950      	cbnz	r0, 98d0 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    98ba:	2001      	movs	r0, #1
    98bc:	e004      	b.n	98c8 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    98be:	1c60      	adds	r0, r4, #1
    98c0:	f010 ff5c 	bl	1a77c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    98c4:	2800      	cmp	r0, #0
    98c6:	d1f0      	bne.n	98aa <find_sc_cfg+0xe>
			return &sc_cfg[i];
    98c8:	230c      	movs	r3, #12
    98ca:	fb03 4000 	mla	r0, r3, r0, r4
    98ce:	e000      	b.n	98d2 <find_sc_cfg+0x36>
	return NULL;
    98d0:	2000      	movs	r0, #0
}
    98d2:	bd70      	pop	{r4, r5, r6, pc}
    98d4:	20029f4a 	.word	0x20029f4a
    98d8:	20029f57 	.word	0x20029f57

000098dc <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    98dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    98de:	4605      	mov	r5, r0
    98e0:	4c14      	ldr	r4, [pc, #80]	; (9934 <gatt_sub_find+0x58>)
    98e2:	b140      	cbz	r0, 98f6 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    98e4:	4622      	mov	r2, r4
    98e6:	f812 1b01 	ldrb.w	r1, [r2], #1
    98ea:	f010 f99d 	bl	19c28 <bt_conn_is_peer_addr_le>
    98ee:	b1b0      	cbz	r0, 991e <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    98f0:	4620      	mov	r0, r4
    98f2:	b003      	add	sp, #12
    98f4:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    98f6:	9000      	str	r0, [sp, #0]
    98f8:	4669      	mov	r1, sp
    98fa:	f8cd 0003 	str.w	r0, [sp, #3]
    98fe:	1c60      	adds	r0, r4, #1
    9900:	f010 ff3c 	bl	1a77c <bt_addr_le_cmp>
    9904:	2800      	cmp	r0, #0
    9906:	d0f3      	beq.n	98f0 <gatt_sub_find+0x14>
    9908:	4669      	mov	r1, sp
    990a:	f104 0011 	add.w	r0, r4, #17
    990e:	9500      	str	r5, [sp, #0]
    9910:	f8cd 5003 	str.w	r5, [sp, #3]
    9914:	f010 ff32 	bl	1a77c <bt_addr_le_cmp>
    9918:	b948      	cbnz	r0, 992e <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    991a:	3410      	adds	r4, #16
    991c:	e7e8      	b.n	98f0 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    991e:	4628      	mov	r0, r5
    9920:	7c21      	ldrb	r1, [r4, #16]
    9922:	f104 0211 	add.w	r2, r4, #17
    9926:	f010 f97f 	bl	19c28 <bt_conn_is_peer_addr_le>
    992a:	2800      	cmp	r0, #0
    992c:	d1f5      	bne.n	991a <gatt_sub_find+0x3e>
	return NULL;
    992e:	2400      	movs	r4, #0
    9930:	e7de      	b.n	98f0 <gatt_sub_find+0x14>
    9932:	bf00      	nop
    9934:	20025aa4 	.word	0x20025aa4

00009938 <bt_gatt_attr_write_ccc>:
{
    9938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    993c:	461f      	mov	r7, r3
    993e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9942:	4606      	mov	r6, r0
    9944:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9946:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    994a:	2b00      	cmp	r3, #0
    994c:	d151      	bne.n	99f2 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    994e:	1e7b      	subs	r3, r7, #1
    9950:	2b01      	cmp	r3, #1
    9952:	d851      	bhi.n	99f8 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    9954:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    9956:	7815      	ldrb	r5, [r2, #0]
    9958:	bf18      	it	ne
    995a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    995c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    995e:	bf0c      	ite	eq
    9960:	b2ad      	uxtheq	r5, r5
    9962:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    9966:	f010 ff0c 	bl	1a782 <find_ccc_cfg>
	if (!cfg) {
    996a:	4604      	mov	r4, r0
    996c:	b9e8      	cbnz	r0, 99aa <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    996e:	b91d      	cbnz	r5, 9978 <bt_gatt_attr_write_ccc+0x40>
			return len;
    9970:	4638      	mov	r0, r7
}
    9972:	b003      	add	sp, #12
    9974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9978:	4649      	mov	r1, r9
    997a:	f010 ff02 	bl	1a782 <find_ccc_cfg>
		if (!cfg) {
    997e:	4604      	mov	r4, r0
    9980:	b960      	cbnz	r0, 999c <bt_gatt_attr_write_ccc+0x64>
    9982:	4b1f      	ldr	r3, [pc, #124]	; (9a00 <bt_gatt_attr_write_ccc+0xc8>)
    9984:	491f      	ldr	r1, [pc, #124]	; (9a04 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    9986:	4820      	ldr	r0, [pc, #128]	; (9a08 <bt_gatt_attr_write_ccc+0xd0>)
    9988:	1ac9      	subs	r1, r1, r3
    998a:	08c9      	lsrs	r1, r1, #3
    998c:	0189      	lsls	r1, r1, #6
    998e:	f041 0102 	orr.w	r1, r1, #2
    9992:	f00e fa9b 	bl	17ecc <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9996:	f06f 0010 	mvn.w	r0, #16
    999a:	e7ea      	b.n	9972 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    999c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    99a0:	3001      	adds	r0, #1
    99a2:	f010 ff1a 	bl	1a7da <bt_addr_le_copy>
		cfg->id = conn->id;
    99a6:	7a33      	ldrb	r3, [r6, #8]
    99a8:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    99aa:	f8d9 301c 	ldr.w	r3, [r9, #28]
    99ae:	b9a3      	cbnz	r3, 99da <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    99b0:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    99b4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    99b6:	42ab      	cmp	r3, r5
    99b8:	d003      	beq.n	99c2 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    99ba:	4649      	mov	r1, r9
    99bc:	4640      	mov	r0, r8
    99be:	f010 fe60 	bl	1a682 <gatt_ccc_changed>
	if (!value) {
    99c2:	2d00      	cmp	r5, #0
    99c4:	d1d4      	bne.n	9970 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    99c6:	4669      	mov	r1, sp
    99c8:	1c60      	adds	r0, r4, #1
    99ca:	9500      	str	r5, [sp, #0]
    99cc:	f8cd 5003 	str.w	r5, [sp, #3]
    99d0:	f010 ff03 	bl	1a7da <bt_addr_le_copy>
	cfg->id = 0U;
    99d4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    99d6:	8125      	strh	r5, [r4, #8]
}
    99d8:	e7ca      	b.n	9970 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    99da:	462a      	mov	r2, r5
    99dc:	4641      	mov	r1, r8
    99de:	4630      	mov	r0, r6
    99e0:	4798      	blx	r3
		if (write < 0) {
    99e2:	2800      	cmp	r0, #0
    99e4:	dbc5      	blt.n	9972 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    99e6:	3801      	subs	r0, #1
    99e8:	2801      	cmp	r0, #1
    99ea:	d9e1      	bls.n	99b0 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    99ec:	f06f 000d 	mvn.w	r0, #13
    99f0:	e7bf      	b.n	9972 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    99f2:	f06f 0006 	mvn.w	r0, #6
    99f6:	e7bc      	b.n	9972 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    99f8:	f06f 000c 	mvn.w	r0, #12
    99fc:	e7b9      	b.n	9972 <bt_gatt_attr_write_ccc+0x3a>
    99fe:	bf00      	nop
    9a00:	000232ec 	.word	0x000232ec
    9a04:	0002330c 	.word	0x0002330c
    9a08:	00026385 	.word	0x00026385

00009a0c <sc_save>:
{
    9a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9a10:	4680      	mov	r8, r0
    9a12:	460f      	mov	r7, r1
    9a14:	4616      	mov	r6, r2
    9a16:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9a18:	f7ff ff40 	bl	989c <find_sc_cfg>
	if (!cfg) {
    9a1c:	4604      	mov	r4, r0
    9a1e:	b9c8      	cbnz	r0, 9a54 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9a20:	4669      	mov	r1, sp
    9a22:	9000      	str	r0, [sp, #0]
    9a24:	f8cd 0003 	str.w	r0, [sp, #3]
    9a28:	f7ff ff38 	bl	989c <find_sc_cfg>
		if (!cfg) {
    9a2c:	4604      	mov	r4, r0
    9a2e:	b960      	cbnz	r0, 9a4a <sc_save+0x3e>
    9a30:	490f      	ldr	r1, [pc, #60]	; (9a70 <sc_save+0x64>)
    9a32:	4b10      	ldr	r3, [pc, #64]	; (9a74 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    9a34:	4810      	ldr	r0, [pc, #64]	; (9a78 <sc_save+0x6c>)
    9a36:	1ac9      	subs	r1, r1, r3
    9a38:	08c9      	lsrs	r1, r1, #3
    9a3a:	0189      	lsls	r1, r1, #6
    9a3c:	f041 0101 	orr.w	r1, r1, #1
    9a40:	f00e fa44 	bl	17ecc <log_0>
}
    9a44:	b002      	add	sp, #8
    9a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    9a4a:	4639      	mov	r1, r7
		cfg->id = id;
    9a4c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9a50:	f010 fec3 	bl	1a7da <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9a54:	8922      	ldrh	r2, [r4, #8]
    9a56:	8963      	ldrh	r3, [r4, #10]
    9a58:	b91a      	cbnz	r2, 9a62 <sc_save+0x56>
    9a5a:	b923      	cbnz	r3, 9a66 <sc_save+0x5a>
		cfg->data.start = start;
    9a5c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9a5e:	8165      	strh	r5, [r4, #10]
    9a60:	e7f0      	b.n	9a44 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    9a62:	4296      	cmp	r6, r2
    9a64:	d302      	bcc.n	9a6c <sc_save+0x60>
    9a66:	429d      	cmp	r5, r3
    9a68:	d9ec      	bls.n	9a44 <sc_save+0x38>
    9a6a:	e7f8      	b.n	9a5e <sc_save+0x52>
		*start = new_start;
    9a6c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9a6e:	e7fa      	b.n	9a66 <sc_save+0x5a>
    9a70:	0002330c 	.word	0x0002330c
    9a74:	000232ec 	.word	0x000232ec
    9a78:	0002639f 	.word	0x0002639f

00009a7c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    9a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a80:	4606      	mov	r6, r0
    9a82:	4688      	mov	r8, r1
    9a84:	4617      	mov	r7, r2
	if (params) {
    9a86:	461c      	mov	r4, r3
    9a88:	b34b      	cbz	r3, 9ade <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9a8a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9a8e:	2100      	movs	r1, #0
    9a90:	f7ff fd3c 	bl	950c <bt_att_req_alloc>
		if (!req) {
    9a94:	4605      	mov	r5, r0
    9a96:	b920      	cbnz	r0, 9aa2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9a98:	f06f 040b 	mvn.w	r4, #11
}
    9a9c:	4620      	mov	r0, r4
    9a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9aa2:	2300      	movs	r3, #0
		req->user_data = params;
    9aa4:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
    9aa6:	4601      	mov	r1, r0
		req->buf = buf;
    9aa8:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    9aac:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    9aae:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9ab0:	4630      	mov	r0, r6
    9ab2:	f010 fdb0 	bl	1a616 <bt_att_req_send>
		if (err) {
    9ab6:	4604      	mov	r4, r0
    9ab8:	2800      	cmp	r0, #0
    9aba:	d0ef      	beq.n	9a9c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    9abc:	4628      	mov	r0, r5
    9abe:	f7ff fd3b 	bl	9538 <bt_att_req_free>
	if (err) {
    9ac2:	2c00      	cmp	r4, #0
    9ac4:	d0ea      	beq.n	9a9c <gatt_send.constprop.0+0x20>
    9ac6:	4b08      	ldr	r3, [pc, #32]	; (9ae8 <gatt_send.constprop.0+0x6c>)
    9ac8:	4a08      	ldr	r2, [pc, #32]	; (9aec <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    9aca:	4621      	mov	r1, r4
    9acc:	1ad2      	subs	r2, r2, r3
    9ace:	08d2      	lsrs	r2, r2, #3
    9ad0:	0192      	lsls	r2, r2, #6
    9ad2:	4807      	ldr	r0, [pc, #28]	; (9af0 <gatt_send.constprop.0+0x74>)
    9ad4:	f042 0201 	orr.w	r2, r2, #1
    9ad8:	f00e fa05 	bl	17ee6 <log_1>
    9adc:	e7de      	b.n	9a9c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    9ade:	461a      	mov	r2, r3
    9ae0:	f010 fd4f 	bl	1a582 <bt_att_send>
    9ae4:	4604      	mov	r4, r0
    9ae6:	e7ec      	b.n	9ac2 <gatt_send.constprop.0+0x46>
    9ae8:	000232ec 	.word	0x000232ec
    9aec:	0002330c 	.word	0x0002330c
    9af0:	000263be 	.word	0x000263be

00009af4 <gatt_indicate>:
{
    9af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9af8:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    9afa:	8a92      	ldrh	r2, [r2, #20]
{
    9afc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9afe:	3202      	adds	r2, #2
    9b00:	211d      	movs	r1, #29
{
    9b02:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9b04:	f7ff fa74 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    9b08:	4605      	mov	r5, r0
    9b0a:	b1e8      	cbz	r0, 9b48 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
    9b0c:	f100 0808 	add.w	r8, r0, #8
    9b10:	2102      	movs	r1, #2
    9b12:	4640      	mov	r0, r8
    9b14:	f011 fe3b 	bl	1b78e <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9b18:	4606      	mov	r6, r0
    9b1a:	8aa1      	ldrh	r1, [r4, #20]
    9b1c:	f826 9b02 	strh.w	r9, [r6], #2
    9b20:	4640      	mov	r0, r8
    9b22:	f011 fe34 	bl	1b78e <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9b26:	4630      	mov	r0, r6
    9b28:	8aa2      	ldrh	r2, [r4, #20]
    9b2a:	6921      	ldr	r1, [r4, #16]
    9b2c:	f00f fb6c 	bl	19208 <memcpy>
	if (!params->func) {
    9b30:	68a3      	ldr	r3, [r4, #8]
    9b32:	b933      	cbnz	r3, 9b42 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9b34:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9b36:	4629      	mov	r1, r5
    9b38:	4638      	mov	r0, r7
}
    9b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9b3e:	f7ff bf9d 	b.w	9a7c <gatt_send.constprop.0>
    9b42:	4623      	mov	r3, r4
    9b44:	4a07      	ldr	r2, [pc, #28]	; (9b64 <gatt_indicate+0x70>)
    9b46:	e7f6      	b.n	9b36 <gatt_indicate+0x42>
    9b48:	4b07      	ldr	r3, [pc, #28]	; (9b68 <gatt_indicate+0x74>)
    9b4a:	4908      	ldr	r1, [pc, #32]	; (9b6c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    9b4c:	4808      	ldr	r0, [pc, #32]	; (9b70 <gatt_indicate+0x7c>)
    9b4e:	1ac9      	subs	r1, r1, r3
    9b50:	08c9      	lsrs	r1, r1, #3
    9b52:	0189      	lsls	r1, r1, #6
    9b54:	f041 0102 	orr.w	r1, r1, #2
    9b58:	f00e f9b8 	bl	17ecc <log_0>
}
    9b5c:	f06f 000b 	mvn.w	r0, #11
    9b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b64:	0001a69f 	.word	0x0001a69f
    9b68:	000232ec 	.word	0x000232ec
    9b6c:	0002330c 	.word	0x0002330c
    9b70:	000263d8 	.word	0x000263d8

00009b74 <gatt_write_ccc.constprop.0>:
	if (params->write) {
		params->write(conn, err, NULL);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b78:	4688      	mov	r8, r1
    9b7a:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9b7c:	2112      	movs	r1, #18
    9b7e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9b80:	4606      	mov	r6, r0
    9b82:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9b84:	f7ff fa34 	bl	8ff0 <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    9b88:	4604      	mov	r4, r0
    9b8a:	b1e8      	cbz	r0, 9bc8 <gatt_write_ccc.constprop.0+0x54>
    9b8c:	f100 0908 	add.w	r9, r0, #8
    9b90:	2102      	movs	r1, #2
    9b92:	4648      	mov	r0, r9
    9b94:	f011 fdfb 	bl	1b78e <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
    9b98:	4639      	mov	r1, r7
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
	req->handle = sys_cpu_to_le16(handle);
    9b9a:	f8a0 8000 	strh.w	r8, [r0]
    9b9e:	4648      	mov	r0, r9
    9ba0:	f011 fe0c 	bl	1b7bc <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9ba4:	f105 0310 	add.w	r3, r5, #16
    9ba8:	e8d3 2fef 	ldaex	r2, [r3]
    9bac:	f042 0204 	orr.w	r2, r2, #4
    9bb0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9bb4:	2900      	cmp	r1, #0
    9bb6:	d1f7      	bne.n	9ba8 <gatt_write_ccc.constprop.0+0x34>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    9bb8:	462b      	mov	r3, r5
    9bba:	4621      	mov	r1, r4
    9bbc:	4630      	mov	r0, r6
}
    9bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    9bc2:	4a03      	ldr	r2, [pc, #12]	; (9bd0 <gatt_write_ccc.constprop.0+0x5c>)
    9bc4:	f7ff bf5a 	b.w	9a7c <gatt_send.constprop.0>
}
    9bc8:	f06f 000b 	mvn.w	r0, #11
    9bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9bd0:	0001a9e7 	.word	0x0001a9e7

00009bd4 <cf_write>:
{
    9bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bd8:	461f      	mov	r7, r3
    9bda:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9bde:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
    9be0:	2b01      	cmp	r3, #1
{
    9be2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    9be4:	d847      	bhi.n	9c76 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    9be6:	443b      	add	r3, r7
    9be8:	2b01      	cmp	r3, #1
    9bea:	463d      	mov	r5, r7
    9bec:	dc46      	bgt.n	9c7c <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    9bee:	f7ff fe27 	bl	9840 <find_cf_cfg>
	if (!cfg) {
    9bf2:	4604      	mov	r4, r0
    9bf4:	b990      	cbnz	r0, 9c1c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    9bf6:	f7ff fe23 	bl	9840 <find_cf_cfg>
	if (!cfg) {
    9bfa:	4604      	mov	r4, r0
    9bfc:	b970      	cbnz	r0, 9c1c <cf_write+0x48>
    9bfe:	4b22      	ldr	r3, [pc, #136]	; (9c88 <cf_write+0xb4>)
    9c00:	4922      	ldr	r1, [pc, #136]	; (9c8c <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    9c02:	4823      	ldr	r0, [pc, #140]	; (9c90 <cf_write+0xbc>)
    9c04:	1ac9      	subs	r1, r1, r3
    9c06:	08c9      	lsrs	r1, r1, #3
    9c08:	0189      	lsls	r1, r1, #6
    9c0a:	f041 0102 	orr.w	r1, r1, #2
    9c0e:	f00e f95d 	bl	17ecc <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9c12:	f06f 0510 	mvn.w	r5, #16
}
    9c16:	4628      	mov	r0, r5
    9c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    9c1c:	4632      	mov	r2, r6
    9c1e:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    9c22:	4562      	cmp	r2, ip
    9c24:	d114      	bne.n	9c50 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    9c26:	b12f      	cbz	r7, 9c34 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    9c28:	7833      	ldrb	r3, [r6, #0]
    9c2a:	7a22      	ldrb	r2, [r4, #8]
    9c2c:	f003 0307 	and.w	r3, r3, #7
    9c30:	4313      	orrs	r3, r2
    9c32:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9c34:	f108 0188 	add.w	r1, r8, #136	; 0x88
    9c38:	1c60      	adds	r0, r4, #1
    9c3a:	f010 fdce 	bl	1a7da <bt_addr_le_copy>
	cfg->id = conn->id;
    9c3e:	4620      	mov	r0, r4
    9c40:	f898 3008 	ldrb.w	r3, [r8, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9c44:	2100      	movs	r1, #0
	cfg->id = conn->id;
    9c46:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9c4a:	f010 fdee 	bl	1a82a <atomic_set_bit>
	return len;
    9c4e:	e7e2      	b.n	9c16 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    9c50:	2300      	movs	r3, #0
    9c52:	f812 1b01 	ldrb.w	r1, [r2], #1
    9c56:	7a20      	ldrb	r0, [r4, #8]
    9c58:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    9c5a:	fa21 fe03 	lsr.w	lr, r1, r3
    9c5e:	f01e 0f01 	tst.w	lr, #1
    9c62:	d004      	beq.n	9c6e <cf_write+0x9a>
    9c64:	fa20 fe03 	lsr.w	lr, r0, r3
    9c68:	f01e 0f01 	tst.w	lr, #1
    9c6c:	d109      	bne.n	9c82 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    9c6e:	3301      	adds	r3, #1
    9c70:	2b03      	cmp	r3, #3
    9c72:	d1f2      	bne.n	9c5a <cf_write+0x86>
    9c74:	e7d5      	b.n	9c22 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9c76:	f06f 0506 	mvn.w	r5, #6
    9c7a:	e7cc      	b.n	9c16 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9c7c:	f06f 050c 	mvn.w	r5, #12
    9c80:	e7c9      	b.n	9c16 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    9c82:	f06f 0512 	mvn.w	r5, #18
    9c86:	e7c6      	b.n	9c16 <cf_write+0x42>
    9c88:	000232ec 	.word	0x000232ec
    9c8c:	0002330c 	.word	0x0002330c
    9c90:	000263ff 	.word	0x000263ff

00009c94 <sc_indicate_rsp>:
{
    9c94:	b510      	push	{r4, lr}
    9c96:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c98:	4910      	ldr	r1, [pc, #64]	; (9cdc <sc_indicate_rsp+0x48>)
    9c9a:	e8d1 3fef 	ldaex	r3, [r1]
    9c9e:	f023 0302 	bic.w	r3, r3, #2
    9ca2:	e8c1 3fe2 	stlex	r2, r3, [r1]
    9ca6:	2a00      	cmp	r2, #0
    9ca8:	d1f7      	bne.n	9c9a <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9caa:	e8d1 3faf 	lda	r3, [r1]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9cae:	07da      	lsls	r2, r3, #31
    9cb0:	d505      	bpl.n	9cbe <sc_indicate_rsp+0x2a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9cb2:	2200      	movs	r2, #0
    9cb4:	2300      	movs	r3, #0
    9cb6:	480a      	ldr	r0, [pc, #40]	; (9ce0 <sc_indicate_rsp+0x4c>)
    9cb8:	3930      	subs	r1, #48	; 0x30
    9cba:	f00d f845 	bl	16d48 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    9cbe:	4620      	mov	r0, r4
    9cc0:	f7ff fdbe 	bl	9840 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9cc4:	b140      	cbz	r0, 9cd8 <sc_indicate_rsp+0x44>
    9cc6:	7a03      	ldrb	r3, [r0, #8]
    9cc8:	07db      	lsls	r3, r3, #31
    9cca:	d505      	bpl.n	9cd8 <sc_indicate_rsp+0x44>
}
    9ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9cd0:	2100      	movs	r1, #0
    9cd2:	300c      	adds	r0, #12
    9cd4:	f010 bda9 	b.w	1a82a <atomic_set_bit>
}
    9cd8:	bd10      	pop	{r4, pc}
    9cda:	bf00      	nop
    9cdc:	20000db8 	.word	0x20000db8
    9ce0:	200010f8 	.word	0x200010f8

00009ce4 <gatt_notify>:
{
    9ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ce8:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    9cea:	8992      	ldrh	r2, [r2, #12]
{
    9cec:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9cee:	3202      	adds	r2, #2
    9cf0:	211b      	movs	r1, #27
{
    9cf2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9cf4:	f7ff f97c 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    9cf8:	4605      	mov	r5, r0
    9cfa:	b1c8      	cbz	r0, 9d30 <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    9cfc:	f100 0908 	add.w	r9, r0, #8
    9d00:	2102      	movs	r1, #2
    9d02:	4648      	mov	r0, r9
    9d04:	f011 fd43 	bl	1b78e <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9d08:	4606      	mov	r6, r0
    9d0a:	89a1      	ldrh	r1, [r4, #12]
    9d0c:	f826 8b02 	strh.w	r8, [r6], #2
    9d10:	4648      	mov	r0, r9
    9d12:	f011 fd3c 	bl	1b78e <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    9d16:	89a2      	ldrh	r2, [r4, #12]
    9d18:	68a1      	ldr	r1, [r4, #8]
    9d1a:	4630      	mov	r0, r6
    9d1c:	f00f fa74 	bl	19208 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    9d20:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9d24:	4629      	mov	r1, r5
    9d26:	4638      	mov	r0, r7
}
    9d28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    9d2c:	f010 bc29 	b.w	1a582 <bt_att_send>
    9d30:	4b06      	ldr	r3, [pc, #24]	; (9d4c <gatt_notify+0x68>)
    9d32:	4907      	ldr	r1, [pc, #28]	; (9d50 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    9d34:	4807      	ldr	r0, [pc, #28]	; (9d54 <gatt_notify+0x70>)
    9d36:	1ac9      	subs	r1, r1, r3
    9d38:	08c9      	lsrs	r1, r1, #3
    9d3a:	0189      	lsls	r1, r1, #6
    9d3c:	f041 0102 	orr.w	r1, r1, #2
    9d40:	f00e f8c4 	bl	17ecc <log_0>
}
    9d44:	f06f 000b 	mvn.w	r0, #11
    9d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d4c:	000232ec 	.word	0x000232ec
    9d50:	0002330c 	.word	0x0002330c
    9d54:	0002642b 	.word	0x0002642b

00009d58 <notify_cb>:
{
    9d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d5c:	4b38      	ldr	r3, [pc, #224]	; (9e40 <notify_cb+0xe8>)
{
    9d5e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d60:	6882      	ldr	r2, [r0, #8]
{
    9d62:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d64:	429a      	cmp	r2, r3
    9d66:	d003      	beq.n	9d70 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    9d68:	2001      	movs	r0, #1
}
    9d6a:	b003      	add	sp, #12
    9d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    9d70:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9d74:	4b33      	ldr	r3, [pc, #204]	; (9e44 <notify_cb+0xec>)
    9d76:	4599      	cmp	r9, r3
    9d78:	d01a      	beq.n	9db0 <notify_cb+0x58>
    9d7a:	f04f 0b00 	mov.w	fp, #0
    9d7e:	f109 0701 	add.w	r7, r9, #1
    9d82:	f109 0a15 	add.w	sl, r9, #21
		if (cfg->value != data->type) {
    9d86:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    9d8a:	89a3      	ldrh	r3, [r4, #12]
    9d8c:	429a      	cmp	r2, r3
    9d8e:	d10b      	bne.n	9da8 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9d90:	4639      	mov	r1, r7
    9d92:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    9d96:	f7fd ff5f 	bl	7c58 <bt_conn_lookup_addr_le>
		if (!conn) {
    9d9a:	4605      	mov	r5, r0
    9d9c:	b120      	cbz	r0, 9da8 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    9d9e:	7b43      	ldrb	r3, [r0, #13]
    9da0:	2b07      	cmp	r3, #7
    9da2:	d028      	beq.n	9df6 <notify_cb+0x9e>
			bt_conn_unref(conn);
    9da4:	f00f ff97 	bl	19cd6 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    9da8:	370a      	adds	r7, #10
    9daa:	4557      	cmp	r7, sl
    9dac:	d0dc      	beq.n	9d68 <notify_cb+0x10>
    9dae:	e7ea      	b.n	9d86 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9db0:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9db2:	4637      	mov	r7, r6
    9db4:	4d24      	ldr	r5, [pc, #144]	; (9e48 <notify_cb+0xf0>)
    9db6:	4669      	mov	r1, sp
    9db8:	4628      	mov	r0, r5
    9dba:	9700      	str	r7, [sp, #0]
    9dbc:	f8cd 7003 	str.w	r7, [sp, #3]
    9dc0:	f010 fcdc 	bl	1a77c <bt_addr_le_cmp>
    9dc4:	b178      	cbz	r0, 9de6 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9dc6:	2207      	movs	r2, #7
    9dc8:	4629      	mov	r1, r5
    9dca:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    9dce:	f7fd ff8b 	bl	7ce8 <bt_conn_lookup_state_le>
			if (!conn) {
    9dd2:	b968      	cbnz	r0, 9df0 <notify_cb+0x98>
				sc = (struct sc_data *)data->ind_params->data;
    9dd4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    9dd6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    9dd8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9dda:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    9dde:	8853      	ldrh	r3, [r2, #2]
    9de0:	8812      	ldrh	r2, [r2, #0]
    9de2:	f7ff fe13 	bl	9a0c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9de6:	350c      	adds	r5, #12
    9de8:	2e00      	cmp	r6, #0
    9dea:	d1c6      	bne.n	9d7a <notify_cb+0x22>
    9dec:	2601      	movs	r6, #1
    9dee:	e7e2      	b.n	9db6 <notify_cb+0x5e>
			bt_conn_unref(conn);
    9df0:	f00f ff71 	bl	19cd6 <bt_conn_unref>
    9df4:	e7f7      	b.n	9de6 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9df6:	f8d9 3020 	ldr.w	r3, [r9, #32]
    9dfa:	b123      	cbz	r3, 9e06 <notify_cb+0xae>
    9dfc:	4641      	mov	r1, r8
    9dfe:	4798      	blx	r3
    9e00:	b908      	cbnz	r0, 9e06 <notify_cb+0xae>
			bt_conn_unref(conn);
    9e02:	4628      	mov	r0, r5
    9e04:	e7ce      	b.n	9da4 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e06:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    9e08:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e0a:	2b02      	cmp	r3, #2
    9e0c:	88a1      	ldrh	r1, [r4, #4]
    9e0e:	6922      	ldr	r2, [r4, #16]
    9e10:	d10f      	bne.n	9e32 <notify_cb+0xda>
			err = gatt_indicate(conn, data->handle,
    9e12:	f7ff fe6f 	bl	9af4 <gatt_indicate>
			if (err == 0) {
    9e16:	4606      	mov	r6, r0
    9e18:	b918      	cbnz	r0, 9e22 <notify_cb+0xca>
				data->ind_params->_ref++;
    9e1a:	6922      	ldr	r2, [r4, #16]
    9e1c:	7d93      	ldrb	r3, [r2, #22]
    9e1e:	3301      	adds	r3, #1
    9e20:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    9e22:	4628      	mov	r0, r5
    9e24:	f00f ff57 	bl	19cd6 <bt_conn_unref>
		if (err < 0) {
    9e28:	2e00      	cmp	r6, #0
    9e2a:	db06      	blt.n	9e3a <notify_cb+0xe2>
		data->err = 0;
    9e2c:	f8c4 b008 	str.w	fp, [r4, #8]
    9e30:	e7ba      	b.n	9da8 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    9e32:	f7ff ff57 	bl	9ce4 <gatt_notify>
    9e36:	4606      	mov	r6, r0
    9e38:	e7f3      	b.n	9e22 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    9e3a:	2000      	movs	r0, #0
    9e3c:	e795      	b.n	9d6a <notify_cb+0x12>
    9e3e:	bf00      	nop
    9e40:	00009939 	.word	0x00009939
    9e44:	200002a0 	.word	0x200002a0
    9e48:	20029f4b 	.word	0x20029f4b

00009e4c <disconnected_cb>:
{
    9e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e50:	4b2b      	ldr	r3, [pc, #172]	; (9f00 <disconnected_cb+0xb4>)
{
    9e52:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e54:	6882      	ldr	r2, [r0, #8]
{
    9e56:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e58:	429a      	cmp	r2, r3
    9e5a:	d12f      	bne.n	9ebc <disconnected_cb+0x70>
	ccc = attr->user_data;
    9e5c:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    9e5e:	8aab      	ldrh	r3, [r5, #20]
    9e60:	b363      	cbz	r3, 9ebc <disconnected_cb+0x70>
	value_used = false;
    9e62:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
    9e66:	f8df b09c 	ldr.w	fp, [pc, #156]	; 9f04 <disconnected_cb+0xb8>
    9e6a:	1c6c      	adds	r4, r5, #1
    9e6c:	f105 0a15 	add.w	sl, r5, #21
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e70:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    9e74:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    9e78:	b19b      	cbz	r3, 9ea2 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9e7a:	4622      	mov	r2, r4
    9e7c:	4630      	mov	r0, r6
    9e7e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    9e82:	f00f fed1 	bl	19c28 <bt_conn_is_peer_addr_le>
    9e86:	b9e8      	cbnz	r0, 9ec4 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9e88:	4621      	mov	r1, r4
    9e8a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    9e8e:	f7fd fee3 	bl	7c58 <bt_conn_lookup_addr_le>
			if (tmp) {
    9e92:	b130      	cbz	r0, 9ea2 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    9e94:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    9e96:	2b07      	cmp	r3, #7
    9e98:	bf08      	it	eq
    9e9a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    9e9e:	f00f ff1a 	bl	19cd6 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    9ea2:	340a      	adds	r4, #10
    9ea4:	4554      	cmp	r4, sl
    9ea6:	d1e5      	bne.n	9e74 <disconnected_cb+0x28>
	if (!value_used) {
    9ea8:	f1b8 0f00 	cmp.w	r8, #0
    9eac:	d106      	bne.n	9ebc <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    9eae:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    9eb0:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    9eb4:	b113      	cbz	r3, 9ebc <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    9eb6:	4641      	mov	r1, r8
    9eb8:	4638      	mov	r0, r7
    9eba:	4798      	blx	r3
}
    9ebc:	2001      	movs	r0, #1
    9ebe:	b003      	add	sp, #12
    9ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9ec4:	4649      	mov	r1, r9
    9ec6:	7a30      	ldrb	r0, [r6, #8]
    9ec8:	f00f fda8 	bl	19a1c <bt_addr_le_is_bonded>
    9ecc:	b990      	cbnz	r0, 9ef4 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    9ece:	455d      	cmp	r5, fp
    9ed0:	d102      	bne.n	9ed8 <disconnected_cb+0x8c>
					sc_clear(conn);
    9ed2:	4630      	mov	r0, r6
    9ed4:	f010 fdbe 	bl	1aa54 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9ed8:	2300      	movs	r3, #0
    9eda:	4669      	mov	r1, sp
    9edc:	4620      	mov	r0, r4
    9ede:	9300      	str	r3, [sp, #0]
    9ee0:	f8cd 3003 	str.w	r3, [sp, #3]
    9ee4:	f010 fc79 	bl	1a7da <bt_addr_le_copy>
	cfg->id = 0U;
    9ee8:	2300      	movs	r3, #0
    9eea:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    9eee:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    9ef2:	e7d6      	b.n	9ea2 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9ef4:	4649      	mov	r1, r9
    9ef6:	4620      	mov	r0, r4
    9ef8:	f010 fc6f 	bl	1a7da <bt_addr_le_copy>
    9efc:	e7d1      	b.n	9ea2 <disconnected_cb+0x56>
    9efe:	bf00      	nop
    9f00:	00009939 	.word	0x00009939
    9f04:	200002a0 	.word	0x200002a0

00009f08 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9f08:	2201      	movs	r2, #1
{
    9f0a:	b510      	push	{r4, lr}
    9f0c:	4b1d      	ldr	r3, [pc, #116]	; (9f84 <bt_gatt_init+0x7c>)
    9f0e:	e8d3 1fef 	ldaex	r1, [r3]
    9f12:	2900      	cmp	r1, #0
    9f14:	d103      	bne.n	9f1e <bt_gatt_init+0x16>
    9f16:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d1f7      	bne.n	9f0e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    9f1e:	d12a      	bne.n	9f76 <bt_gatt_init+0x6e>
    9f20:	4b19      	ldr	r3, [pc, #100]	; (9f88 <bt_gatt_init+0x80>)
    9f22:	e8d3 1fef 	ldaex	r1, [r3]
    9f26:	2900      	cmp	r1, #0
    9f28:	d103      	bne.n	9f32 <bt_gatt_init+0x2a>
    9f2a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9f2e:	2800      	cmp	r0, #0
    9f30:	d1f7      	bne.n	9f22 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
    9f32:	d108      	bne.n	9f46 <bt_gatt_init+0x3e>
    9f34:	2000      	movs	r0, #0
    9f36:	4a15      	ldr	r2, [pc, #84]	; (9f8c <bt_gatt_init+0x84>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9f38:	4915      	ldr	r1, [pc, #84]	; (9f90 <bt_gatt_init+0x88>)
    9f3a:	8813      	ldrh	r3, [r2, #0]
    9f3c:	4c15      	ldr	r4, [pc, #84]	; (9f94 <bt_gatt_init+0x8c>)
    9f3e:	42a1      	cmp	r1, r4
    9f40:	d31a      	bcc.n	9f78 <bt_gatt_init+0x70>
    9f42:	b100      	cbz	r0, 9f46 <bt_gatt_init+0x3e>
    9f44:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    9f46:	4c14      	ldr	r4, [pc, #80]	; (9f98 <bt_gatt_init+0x90>)
    9f48:	2230      	movs	r2, #48	; 0x30
    9f4a:	2100      	movs	r1, #0
    9f4c:	4620      	mov	r0, r4
    9f4e:	f00f f986 	bl	1925e <memset>
    9f52:	4b12      	ldr	r3, [pc, #72]	; (9f9c <bt_gatt_init+0x94>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9f54:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    9f56:	6063      	str	r3, [r4, #4]
    9f58:	4c11      	ldr	r4, [pc, #68]	; (9fa0 <bt_gatt_init+0x98>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9f5a:	2300      	movs	r3, #0
    9f5c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9f60:	4810      	ldr	r0, [pc, #64]	; (9fa4 <bt_gatt_init+0x9c>)
    9f62:	f00c fef1 	bl	16d48 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    9f66:	2230      	movs	r2, #48	; 0x30
    9f68:	2100      	movs	r1, #0
    9f6a:	f104 0020 	add.w	r0, r4, #32
    9f6e:	f00f f976 	bl	1925e <memset>
    9f72:	4b0d      	ldr	r3, [pc, #52]	; (9fa8 <bt_gatt_init+0xa0>)
    9f74:	6263      	str	r3, [r4, #36]	; 0x24
}
    9f76:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    9f78:	6848      	ldr	r0, [r1, #4]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9f7a:	3108      	adds	r1, #8
		last_static_handle += svc->attr_count;
    9f7c:	4403      	add	r3, r0
    9f7e:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9f80:	2001      	movs	r0, #1
    9f82:	e7dc      	b.n	9f3e <bt_gatt_init+0x36>
    9f84:	20025a84 	.word	0x20025a84
    9f88:	20025aa0 	.word	0x20025aa0
    9f8c:	20029f48 	.word	0x20029f48
    9f90:	000232dc 	.word	0x000232dc
    9f94:	000232ec 	.word	0x000232ec
    9f98:	20000d38 	.word	0x20000d38
    9f9c:	0001ab4d 	.word	0x0001ab4d
    9fa0:	20000d68 	.word	0x20000d68
    9fa4:	200010f8 	.word	0x200010f8
    9fa8:	0000a241 	.word	0x0000a241

00009fac <bt_gatt_attr_get_handle>:
	if (!attr) {
    9fac:	4603      	mov	r3, r0
{
    9fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    9fb2:	b148      	cbz	r0, 9fc8 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    9fb4:	8a00      	ldrh	r0, [r0, #16]
    9fb6:	b938      	cbnz	r0, 9fc8 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
    9fb8:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9fba:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9fbe:	4911      	ldr	r1, [pc, #68]	; (a004 <bt_gatt_attr_get_handle+0x58>)
    9fc0:	f8df e044 	ldr.w	lr, [pc, #68]	; a008 <bt_gatt_attr_get_handle+0x5c>
    9fc4:	4571      	cmp	r1, lr
    9fc6:	d301      	bcc.n	9fcc <bt_gatt_attr_get_handle+0x20>
}
    9fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    9fcc:	e9d1 7600 	ldrd	r7, r6, [r1]
    9fd0:	42bb      	cmp	r3, r7
    9fd2:	d304      	bcc.n	9fde <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9fd4:	fb0c 7206 	mla	r2, ip, r6, r7
    9fd8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9fda:	4293      	cmp	r3, r2
    9fdc:	d90e      	bls.n	9ffc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    9fde:	19a2      	adds	r2, r4, r6
    9fe0:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9fe2:	4614      	mov	r4, r2
    9fe4:	3108      	adds	r1, #8
    9fe6:	e7ed      	b.n	9fc4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9fe8:	fb0c 7805 	mla	r8, ip, r5, r7
    9fec:	4543      	cmp	r3, r8
    9fee:	d007      	beq.n	a000 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9ff0:	3501      	adds	r5, #1
    9ff2:	1962      	adds	r2, r4, r5
    9ff4:	42b5      	cmp	r5, r6
    9ff6:	b292      	uxth	r2, r2
    9ff8:	d1f6      	bne.n	9fe8 <bt_gatt_attr_get_handle+0x3c>
    9ffa:	e7f2      	b.n	9fe2 <bt_gatt_attr_get_handle+0x36>
    9ffc:	2500      	movs	r5, #0
    9ffe:	e7f8      	b.n	9ff2 <bt_gatt_attr_get_handle+0x46>
    a000:	4610      	mov	r0, r2
    a002:	e7e1      	b.n	9fc8 <bt_gatt_attr_get_handle+0x1c>
    a004:	000232dc 	.word	0x000232dc
    a008:	000232ec 	.word	0x000232ec

0000a00c <bt_gatt_foreach_attr_type>:
{
    a00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a010:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    a012:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    a016:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    a01a:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    a01c:	2d00      	cmp	r5, #0
    a01e:	bf08      	it	eq
    a020:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a022:	4b24      	ldr	r3, [pc, #144]	; (a0b4 <bt_gatt_foreach_attr_type+0xa8>)
{
    a024:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a026:	881b      	ldrh	r3, [r3, #0]
{
    a028:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
    a02a:	4283      	cmp	r3, r0
    a02c:	d23c      	bcs.n	a0a8 <bt_gatt_foreach_attr_type+0x9c>
}
    a02e:	b003      	add	sp, #12
    a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    a034:	6873      	ldr	r3, [r6, #4]
    a036:	4423      	add	r3, r4
    a038:	42bb      	cmp	r3, r7
    a03a:	d232      	bcs.n	a0a2 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    a03c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a03e:	3608      	adds	r6, #8
    a040:	4b1d      	ldr	r3, [pc, #116]	; (a0b8 <bt_gatt_foreach_attr_type+0xac>)
    a042:	429e      	cmp	r6, r3
    a044:	d3f6      	bcc.n	a034 <bt_gatt_foreach_attr_type+0x28>
    a046:	e7f2      	b.n	a02e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a048:	4640      	mov	r0, r8
    a04a:	5889      	ldr	r1, [r1, r2]
    a04c:	9301      	str	r3, [sp, #4]
    a04e:	f00f fad1 	bl	195f4 <bt_uuid_cmp>
    a052:	9b01      	ldr	r3, [sp, #4]
    a054:	b190      	cbz	r0, a07c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a056:	3401      	adds	r4, #1
    a058:	f10a 0a01 	add.w	sl, sl, #1
    a05c:	b2a4      	uxth	r4, r4
    a05e:	6873      	ldr	r3, [r6, #4]
    a060:	4553      	cmp	r3, sl
    a062:	d9ec      	bls.n	a03e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    a064:	9b00      	ldr	r3, [sp, #0]
    a066:	429c      	cmp	r4, r3
    a068:	d8e1      	bhi.n	a02e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    a06a:	42bc      	cmp	r4, r7
    a06c:	d3f3      	bcc.n	a056 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a06e:	fb0b f20a 	mul.w	r2, fp, sl
    a072:	6831      	ldr	r1, [r6, #0]
    a074:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a076:	f1b8 0f00 	cmp.w	r8, #0
    a07a:	d1e5      	bne.n	a048 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    a07c:	f1b9 0f00 	cmp.w	r9, #0
    a080:	d10b      	bne.n	a09a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    a082:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
    a084:	4618      	mov	r0, r3
	*num_matches -= 1;
    a086:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    a088:	4621      	mov	r1, r4
    a08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a08e:	4798      	blx	r3
	if (!*num_matches) {
    a090:	2d00      	cmp	r5, #0
    a092:	d0cc      	beq.n	a02e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a094:	2800      	cmp	r0, #0
    a096:	d1de      	bne.n	a056 <bt_gatt_foreach_attr_type+0x4a>
    a098:	e7c9      	b.n	a02e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    a09a:	68da      	ldr	r2, [r3, #12]
    a09c:	4591      	cmp	r9, r2
    a09e:	d1da      	bne.n	a056 <bt_gatt_foreach_attr_type+0x4a>
    a0a0:	e7ef      	b.n	a082 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a0a2:	f04f 0a00 	mov.w	sl, #0
    a0a6:	e7da      	b.n	a05e <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
    a0a8:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a0aa:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a0ae:	4e03      	ldr	r6, [pc, #12]	; (a0bc <bt_gatt_foreach_attr_type+0xb0>)
    a0b0:	e7c6      	b.n	a040 <bt_gatt_foreach_attr_type+0x34>
    a0b2:	bf00      	nop
    a0b4:	20029f48 	.word	0x20029f48
    a0b8:	000232ec 	.word	0x000232ec
    a0bc:	000232dc 	.word	0x000232dc

0000a0c0 <db_hash_gen.isra.0>:
	uint8_t key[16] = {};
    a0c0:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
    a0c2:	b510      	push	{r4, lr}
    a0c4:	b0c8      	sub	sp, #288	; 0x120
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a0c6:	4669      	mov	r1, sp
    a0c8:	aa1c      	add	r2, sp, #112	; 0x70
    a0ca:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    a0cc:	e9cd 3300 	strd	r3, r3, [sp]
    a0d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a0d4:	f00e fd1e 	bl	18b14 <tc_cmac_setup>
    a0d8:	b958      	cbnz	r0, a0f2 <db_hash_gen.isra.0+0x32>
    a0da:	4917      	ldr	r1, [pc, #92]	; (a138 <db_hash_gen.isra.0+0x78>)
    a0dc:	4b17      	ldr	r3, [pc, #92]	; (a13c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    a0de:	4818      	ldr	r0, [pc, #96]	; (a140 <db_hash_gen.isra.0+0x80>)
    a0e0:	1ac9      	subs	r1, r1, r3
    a0e2:	08c9      	lsrs	r1, r1, #3
    a0e4:	0189      	lsls	r1, r1, #6
    a0e6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    a0ea:	f00d feef 	bl	17ecc <log_0>
}
    a0ee:	b048      	add	sp, #288	; 0x120
    a0f0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a0f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a0f6:	2001      	movs	r0, #1
    a0f8:	4a12      	ldr	r2, [pc, #72]	; (a144 <db_hash_gen.isra.0+0x84>)
    a0fa:	ab04      	add	r3, sp, #16
    a0fc:	f010 fd1b 	bl	1ab36 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a100:	4811      	ldr	r0, [pc, #68]	; (a148 <db_hash_gen.isra.0+0x88>)
    a102:	a904      	add	r1, sp, #16
    a104:	f00e fd9d 	bl	18c42 <tc_cmac_final>
    a108:	b940      	cbnz	r0, a11c <db_hash_gen.isra.0+0x5c>
    a10a:	490b      	ldr	r1, [pc, #44]	; (a138 <db_hash_gen.isra.0+0x78>)
    a10c:	4b0b      	ldr	r3, [pc, #44]	; (a13c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    a10e:	480f      	ldr	r0, [pc, #60]	; (a14c <db_hash_gen.isra.0+0x8c>)
    a110:	1ac9      	subs	r1, r1, r3
    a112:	08c9      	lsrs	r1, r1, #3
    a114:	0189      	lsls	r1, r1, #6
    a116:	f041 0101 	orr.w	r1, r1, #1
    a11a:	e7e6      	b.n	a0ea <db_hash_gen.isra.0+0x2a>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a11c:	2208      	movs	r2, #8
    a11e:	4b0a      	ldr	r3, [pc, #40]	; (a148 <db_hash_gen.isra.0+0x88>)
    a120:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    a124:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a126:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
    a12a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a12c:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a130:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    a132:	d1f7      	bne.n	a124 <db_hash_gen.isra.0+0x64>
    a134:	e7db      	b.n	a0ee <db_hash_gen.isra.0+0x2e>
    a136:	bf00      	nop
    a138:	0002330c 	.word	0x0002330c
    a13c:	000232ec 	.word	0x000232ec
    a140:	00026454 	.word	0x00026454
    a144:	0001a6d1 	.word	0x0001a6d1
    a148:	2002a049 	.word	0x2002a049
    a14c:	0002646d 	.word	0x0002646d

0000a150 <bt_gatt_indicate>:
{
    a150:	b530      	push	{r4, r5, lr}
    a152:	4604      	mov	r4, r0
    a154:	460d      	mov	r5, r1
    a156:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a158:	4b36      	ldr	r3, [pc, #216]	; (a234 <bt_gatt_indicate+0xe4>)
    a15a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a15e:	079a      	lsls	r2, r3, #30
    a160:	d561      	bpl.n	a226 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    a162:	6848      	ldr	r0, [r1, #4]
    a164:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    a166:	b114      	cbz	r4, a16e <bt_gatt_indicate+0x1e>
    a168:	7b63      	ldrb	r3, [r4, #13]
    a16a:	2b07      	cmp	r3, #7
    a16c:	d15e      	bne.n	a22c <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    a16e:	f7ff ff1d 	bl	9fac <bt_gatt_attr_get_handle>
    a172:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    a176:	b918      	cbnz	r0, a180 <bt_gatt_indicate+0x30>
		return -ENOENT;
    a178:	f06f 0001 	mvn.w	r0, #1
}
    a17c:	b00b      	add	sp, #44	; 0x2c
    a17e:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    a180:	682a      	ldr	r2, [r5, #0]
    a182:	b9ba      	cbnz	r2, a1b4 <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    a184:	9b05      	ldr	r3, [sp, #20]
    a186:	a904      	add	r1, sp, #16
    a188:	6818      	ldr	r0, [r3, #0]
    a18a:	2300      	movs	r3, #0
    a18c:	f88d 3010 	strb.w	r3, [sp, #16]
    a190:	f642 0303 	movw	r3, #10243	; 0x2803
    a194:	f8ad 3012 	strh.w	r3, [sp, #18]
    a198:	f00f fa2c 	bl	195f4 <bt_uuid_cmp>
    a19c:	b1d0      	cbz	r0, a1d4 <bt_gatt_indicate+0x84>
	if (conn) {
    a19e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    a1a2:	b324      	cbz	r4, a1ee <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    a1a4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    a1a6:	4601      	mov	r1, r0
    a1a8:	462a      	mov	r2, r5
    a1aa:	4620      	mov	r0, r4
		params->_ref = 1;
    a1ac:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    a1ae:	f7ff fca1 	bl	9af4 <gatt_indicate>
    a1b2:	e7e3      	b.n	a17c <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a1b4:	a905      	add	r1, sp, #20
    a1b6:	9102      	str	r1, [sp, #8]
    a1b8:	491f      	ldr	r1, [pc, #124]	; (a238 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
    a1ba:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a1bc:	9101      	str	r1, [sp, #4]
    a1be:	2101      	movs	r1, #1
    a1c0:	9100      	str	r1, [sp, #0]
    a1c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    a1c6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a1c8:	f7ff ff20 	bl	a00c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    a1cc:	9b05      	ldr	r3, [sp, #20]
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d1d8      	bne.n	a184 <bt_gatt_indicate+0x34>
    a1d2:	e7d1      	b.n	a178 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    a1d4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a1d6:	68c3      	ldr	r3, [r0, #12]
    a1d8:	799b      	ldrb	r3, [r3, #6]
    a1da:	069b      	lsls	r3, r3, #26
    a1dc:	d402      	bmi.n	a1e4 <bt_gatt_indicate+0x94>
			return -EINVAL;
    a1de:	f06f 0015 	mvn.w	r0, #21
    a1e2:	e7cb      	b.n	a17c <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    a1e4:	f010 fc59 	bl	1aa9a <bt_gatt_attr_value_handle>
    a1e8:	f8ad 0018 	strh.w	r0, [sp, #24]
    a1ec:	e7d7      	b.n	a19e <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
    a1ee:	f06f 0338 	mvn.w	r3, #56	; 0x38
    a1f2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    a1f4:	2302      	movs	r3, #2
    a1f6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a1fa:	f642 1302 	movw	r3, #10498	; 0x2902
    a1fe:	f8ad 3012 	strh.w	r3, [sp, #18]
    a202:	ab05      	add	r3, sp, #20
    a204:	9302      	str	r3, [sp, #8]
    a206:	4b0d      	ldr	r3, [pc, #52]	; (a23c <bt_gatt_indicate+0xec>)
    a208:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a20c:	9301      	str	r3, [sp, #4]
    a20e:	2301      	movs	r3, #1
	params->_ref = 0;
    a210:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a212:	9300      	str	r3, [sp, #0]
    a214:	aa04      	add	r2, sp, #16
    a216:	4623      	mov	r3, r4
	data.ind_params = params;
    a218:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a21a:	f88d 4010 	strb.w	r4, [sp, #16]
    a21e:	f7ff fef5 	bl	a00c <bt_gatt_foreach_attr_type>
	return data.err;
    a222:	9807      	ldr	r0, [sp, #28]
    a224:	e7aa      	b.n	a17c <bt_gatt_indicate+0x2c>
		return -EAGAIN;
    a226:	f06f 000a 	mvn.w	r0, #10
    a22a:	e7a7      	b.n	a17c <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
    a22c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a230:	e7a4      	b.n	a17c <bt_gatt_indicate+0x2c>
    a232:	bf00      	nop
    a234:	20000094 	.word	0x20000094
    a238:	0001a6c3 	.word	0x0001a6c3
    a23c:	00009d59 	.word	0x00009d59

0000a240 <sc_process>:
{
    a240:	4603      	mov	r3, r0
    a242:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a244:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a248:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a24c:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a24e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a252:	e8d4 2fef 	ldaex	r2, [r4]
    a256:	f022 0201 	bic.w	r2, r2, #1
    a25a:	e8c4 2fe0 	stlex	r0, r2, [r4]
    a25e:	2800      	cmp	r0, #0
    a260:	d1f7      	bne.n	a252 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a262:	4a0d      	ldr	r2, [pc, #52]	; (a298 <sc_process+0x58>)
	sc->start = 0U;
    a264:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a266:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    a26a:	4a0c      	ldr	r2, [pc, #48]	; (a29c <sc_process+0x5c>)
	sc->start = 0U;
    a26c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
    a270:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    a274:	aa01      	add	r2, sp, #4
    a276:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    a27a:	2204      	movs	r2, #4
	sc->end = 0U;
    a27c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    a280:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a284:	f7ff ff64 	bl	a150 <bt_gatt_indicate>
    a288:	b918      	cbnz	r0, a292 <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    a28a:	2101      	movs	r1, #1
    a28c:	4620      	mov	r0, r4
    a28e:	f010 facc 	bl	1a82a <atomic_set_bit>
}
    a292:	b002      	add	sp, #8
    a294:	bd10      	pop	{r4, pc}
    a296:	bf00      	nop
    a298:	00023a3c 	.word	0x00023a3c
    a29c:	00009c95 	.word	0x00009c95

0000a2a0 <update_ccc>:
{
    a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2a4:	6881      	ldr	r1, [r0, #8]
{
    a2a6:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2a8:	4a40      	ldr	r2, [pc, #256]	; (a3ac <update_ccc+0x10c>)
{
    a2aa:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2ac:	4291      	cmp	r1, r2
{
    a2ae:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2b0:	d178      	bne.n	a3a4 <update_ccc+0x104>
    a2b2:	4c3f      	ldr	r4, [pc, #252]	; (a3b0 <update_ccc+0x110>)
    a2b4:	493f      	ldr	r1, [pc, #252]	; (a3b4 <update_ccc+0x114>)
	ccc = attr->user_data;
    a2b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
    a2ba:	1a64      	subs	r4, r4, r1
    a2bc:	08e4      	lsrs	r4, r4, #3
    a2be:	f108 0315 	add.w	r3, r8, #21
				BT_WARN("CCC %p not writable", attr);
    a2c2:	ea4f 1984 	mov.w	r9, r4, lsl #6
	struct bt_conn *conn = data->conn;
    a2c6:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    a2c8:	f8df b100 	ldr.w	fp, [pc, #256]	; a3cc <update_ccc+0x12c>
    a2cc:	f108 0601 	add.w	r6, r8, #1
    a2d0:	9300      	str	r3, [sp, #0]
    a2d2:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    a2d6:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    a2da:	b19a      	cbz	r2, a304 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a2dc:	4632      	mov	r2, r6
    a2de:	4628      	mov	r0, r5
    a2e0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    a2e4:	f00f fca0 	bl	19c28 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a2e8:	b160      	cbz	r0, a304 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a2ea:	222a      	movs	r2, #42	; 0x2a
    a2ec:	4651      	mov	r1, sl
    a2ee:	4628      	mov	r0, r5
    a2f0:	f010 fc2e 	bl	1ab50 <bt_gatt_check_perm>
		if (err) {
    a2f4:	b1d8      	cbz	r0, a32e <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a2f6:	2803      	cmp	r0, #3
    a2f8:	d109      	bne.n	a30e <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    a2fa:	464a      	mov	r2, r9
    a2fc:	4651      	mov	r1, sl
    a2fe:	4658      	mov	r0, fp
    a300:	f00d fdf1 	bl	17ee6 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    a304:	9b00      	ldr	r3, [sp, #0]
    a306:	360a      	adds	r6, #10
    a308:	429e      	cmp	r6, r3
    a30a:	d04b      	beq.n	a3a4 <update_ccc+0x104>
    a30c:	e7e3      	b.n	a2d6 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    a30e:	2805      	cmp	r0, #5
    a310:	bf14      	ite	ne
    a312:	2202      	movne	r2, #2
    a314:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    a316:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    a318:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    a31a:	f00f fc7a 	bl	19c12 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    a31e:	9a01      	ldr	r2, [sp, #4]
    a320:	4282      	cmp	r2, r0
    a322:	d904      	bls.n	a32e <update_ccc+0x8e>
				if (data->sec < sec) {
    a324:	7939      	ldrb	r1, [r7, #4]
    a326:	4291      	cmp	r1, r2
    a328:	d2ec      	bcs.n	a304 <update_ccc+0x64>
					data->sec = sec;
    a32a:	713a      	strb	r2, [r7, #4]
    a32c:	e7ea      	b.n	a304 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    a32e:	4641      	mov	r1, r8
    a330:	4650      	mov	r0, sl
    a332:	f010 f9a6 	bl	1a682 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a336:	4b20      	ldr	r3, [pc, #128]	; (a3b8 <update_ccc+0x118>)
    a338:	4598      	cmp	r8, r3
    a33a:	d133      	bne.n	a3a4 <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a33c:	7a28      	ldrb	r0, [r5, #8]
    a33e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a342:	f7ff faab 	bl	989c <find_sc_cfg>
	if (!cfg) {
    a346:	4606      	mov	r6, r0
    a348:	b360      	cbz	r0, a3a4 <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    a34a:	8902      	ldrh	r2, [r0, #8]
    a34c:	8943      	ldrh	r3, [r0, #10]
    a34e:	ea52 0103 	orrs.w	r1, r2, r3
    a352:	d027      	beq.n	a3a4 <update_ccc+0x104>
	index = bt_conn_index(conn);
    a354:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a356:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a35a:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    a35e:	f7fd ff87 	bl	8270 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a362:	2318      	movs	r3, #24
    a364:	4915      	ldr	r1, [pc, #84]	; (a3bc <update_ccc+0x11c>)
    a366:	4a16      	ldr	r2, [pc, #88]	; (a3c0 <update_ccc+0x120>)
    a368:	fb03 1300 	mla	r3, r3, r0, r1
    a36c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a36e:	4a15      	ldr	r2, [pc, #84]	; (a3c4 <update_ccc+0x124>)
    a370:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a372:	aa03      	add	r2, sp, #12
    a374:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    a376:	2204      	movs	r2, #4
    a378:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a37a:	b203      	sxth	r3, r0
    a37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a380:	4628      	mov	r0, r5
    a382:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a386:	f7ff fee3 	bl	a150 <bt_gatt_indicate>
    a38a:	b128      	cbz	r0, a398 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    a38c:	01a1      	lsls	r1, r4, #6
    a38e:	480e      	ldr	r0, [pc, #56]	; (a3c8 <update_ccc+0x128>)
    a390:	f041 0101 	orr.w	r1, r1, #1
    a394:	f00d fd9a 	bl	17ecc <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    a398:	2204      	movs	r2, #4
    a39a:	2100      	movs	r1, #0
    a39c:	f106 0008 	add.w	r0, r6, #8
    a3a0:	f00e ff5d 	bl	1925e <memset>
}
    a3a4:	2001      	movs	r0, #1
    a3a6:	b005      	add	sp, #20
    a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3ac:	00009939 	.word	0x00009939
    a3b0:	0002330c 	.word	0x0002330c
    a3b4:	000232ec 	.word	0x000232ec
    a3b8:	200002a0 	.word	0x200002a0
    a3bc:	20025a88 	.word	0x20025a88
    a3c0:	00023a3c 	.word	0x00023a3c
    a3c4:	0001a83f 	.word	0x0001a83f
    a3c8:	0002649a 	.word	0x0002649a
    a3cc:	00026486 	.word	0x00026486

0000a3d0 <bt_gatt_exchange_mtu>:
{
    a3d0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a3d2:	7b43      	ldrb	r3, [r0, #13]
{
    a3d4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a3d6:	2b07      	cmp	r3, #7
{
    a3d8:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    a3da:	d116      	bne.n	a40a <bt_gatt_exchange_mtu+0x3a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_MTU_REQ, sizeof(*req));
    a3dc:	2202      	movs	r2, #2
    a3de:	4611      	mov	r1, r2
    a3e0:	f7fe fe06 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a3e4:	4604      	mov	r4, r0
    a3e6:	b198      	cbz	r0, a410 <bt_gatt_exchange_mtu+0x40>
    a3e8:	2102      	movs	r1, #2
    a3ea:	3008      	adds	r0, #8
    a3ec:	f011 f9cf 	bl	1b78e <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
    a3f0:	f06f 0308 	mvn.w	r3, #8
    a3f4:	7003      	strb	r3, [r0, #0]
    a3f6:	2300      	movs	r3, #0
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    a3f8:	4621      	mov	r1, r4
	req->mtu = sys_cpu_to_le16(mtu);
    a3fa:	7043      	strb	r3, [r0, #1]
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    a3fc:	4a06      	ldr	r2, [pc, #24]	; (a418 <bt_gatt_exchange_mtu+0x48>)
    a3fe:	4633      	mov	r3, r6
    a400:	4628      	mov	r0, r5
}
    a402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    a406:	f7ff bb39 	b.w	9a7c <gatt_send.constprop.0>
		return -ENOTCONN;
    a40a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    a40e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    a410:	f06f 000b 	mvn.w	r0, #11
    a414:	e7fb      	b.n	a40e <bt_gatt_exchange_mtu+0x3e>
    a416:	bf00      	nop
    a418:	0001a6cb 	.word	0x0001a6cb

0000a41c <bt_gatt_discover>:
{
    a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a41e:	7b43      	ldrb	r3, [r0, #13]
{
    a420:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a422:	2b07      	cmp	r3, #7
{
    a424:	460c      	mov	r4, r1
    a426:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
    a428:	f040 80dc 	bne.w	a5e4 <bt_gatt_discover+0x1c8>
	switch (params->type) {
    a42c:	7c09      	ldrb	r1, [r1, #16]
    a42e:	2905      	cmp	r1, #5
    a430:	f200 80cd 	bhi.w	a5ce <bt_gatt_discover+0x1b2>
    a434:	e8df f001 	tbb	[pc, r1]
    a438:	66660303 	.word	0x66660303
    a43c:	b784      	.short	0xb784
		if (params->uuid) {
    a43e:	6823      	ldr	r3, [r4, #0]
    a440:	2b00      	cmp	r3, #0
    a442:	d041      	beq.n	a4c8 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    a444:	2206      	movs	r2, #6
    a446:	4611      	mov	r1, r2
    a448:	f7fe fdd2 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a44c:	4606      	mov	r6, r0
    a44e:	b918      	cbnz	r0, a458 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    a450:	f06f 000b 	mvn.w	r0, #11
}
    a454:	b005      	add	sp, #20
    a456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a458:	f100 0708 	add.w	r7, r0, #8
    a45c:	2106      	movs	r1, #6
    a45e:	4638      	mov	r0, r7
    a460:	f011 f995 	bl	1b78e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a464:	8923      	ldrh	r3, [r4, #8]
    a466:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a468:	89e3      	ldrh	r3, [r4, #14]
    a46a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a46c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    a46e:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    a470:	f642 0301 	movw	r3, #10241	; 0x2801
    a474:	bf08      	it	eq
    a476:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    a47a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    a47c:	6823      	ldr	r3, [r4, #0]
    a47e:	7819      	ldrb	r1, [r3, #0]
    a480:	b189      	cbz	r1, a4a6 <bt_gatt_discover+0x8a>
    a482:	2902      	cmp	r1, #2
    a484:	d01a      	beq.n	a4bc <bt_gatt_discover+0xa0>
    a486:	4b59      	ldr	r3, [pc, #356]	; (a5ec <bt_gatt_discover+0x1d0>)
    a488:	4a59      	ldr	r2, [pc, #356]	; (a5f0 <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    a48a:	485a      	ldr	r0, [pc, #360]	; (a5f4 <bt_gatt_discover+0x1d8>)
    a48c:	1ad2      	subs	r2, r2, r3
    a48e:	08d2      	lsrs	r2, r2, #3
    a490:	0192      	lsls	r2, r2, #6
    a492:	f042 0201 	orr.w	r2, r2, #1
    a496:	f00d fd26 	bl	17ee6 <log_1>
		net_buf_unref(buf);
    a49a:	4630      	mov	r0, r6
    a49c:	f002 fa2a 	bl	c8f4 <net_buf_unref>
	return -EINVAL;
    a4a0:	f06f 0015 	mvn.w	r0, #21
    a4a4:	e7d6      	b.n	a454 <bt_gatt_discover+0x38>
	net_buf_simple_add_le16(&buf->b, val);
    a4a6:	4638      	mov	r0, r7
    a4a8:	8859      	ldrh	r1, [r3, #2]
    a4aa:	f011 f987 	bl	1b7bc <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    a4ae:	4623      	mov	r3, r4
    a4b0:	4a51      	ldr	r2, [pc, #324]	; (a5f8 <bt_gatt_discover+0x1dc>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a4b2:	4631      	mov	r1, r6
    a4b4:	4628      	mov	r0, r5
    a4b6:	f7ff fae1 	bl	9a7c <gatt_send.constprop.0>
    a4ba:	e7cb      	b.n	a454 <bt_gatt_discover+0x38>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a4bc:	2210      	movs	r2, #16
    a4be:	4638      	mov	r0, r7
    a4c0:	1c59      	adds	r1, r3, #1
    a4c2:	f011 f96a 	bl	1b79a <net_buf_simple_add_mem>
    a4c6:	e7f2      	b.n	a4ae <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    a4c8:	2204      	movs	r2, #4
    a4ca:	2110      	movs	r1, #16
    a4cc:	f7fe fd90 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a4d0:	4606      	mov	r6, r0
    a4d2:	2800      	cmp	r0, #0
    a4d4:	d0bc      	beq.n	a450 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a4d6:	f100 0708 	add.w	r7, r0, #8
    a4da:	2104      	movs	r1, #4
    a4dc:	4638      	mov	r0, r7
    a4de:	f011 f956 	bl	1b78e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a4e2:	8923      	ldrh	r3, [r4, #8]
    a4e4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a4e6:	89e3      	ldrh	r3, [r4, #14]
    a4e8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a4ea:	7c23      	ldrb	r3, [r4, #16]
    a4ec:	b93b      	cbnz	r3, a4fe <bt_gatt_discover+0xe2>
	net_buf_simple_add_le16(&buf->b, val);
    a4ee:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    a4f2:	4638      	mov	r0, r7
    a4f4:	f011 f962 	bl	1b7bc <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    a4f8:	4623      	mov	r3, r4
    a4fa:	4a40      	ldr	r2, [pc, #256]	; (a5fc <bt_gatt_discover+0x1e0>)
    a4fc:	e7d9      	b.n	a4b2 <bt_gatt_discover+0x96>
    a4fe:	f642 0101 	movw	r1, #10241	; 0x2801
    a502:	e7f6      	b.n	a4f2 <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    a504:	2204      	movs	r2, #4
    a506:	2108      	movs	r1, #8
    a508:	f7fe fd72 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a50c:	4606      	mov	r6, r0
    a50e:	2800      	cmp	r0, #0
    a510:	d09e      	beq.n	a450 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a512:	f100 0708 	add.w	r7, r0, #8
    a516:	2104      	movs	r1, #4
    a518:	4638      	mov	r0, r7
    a51a:	f011 f938 	bl	1b78e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a51e:	8923      	ldrh	r3, [r4, #8]
    a520:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a522:	89e3      	ldrh	r3, [r4, #14]
    a524:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    a526:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
    a528:	4638      	mov	r0, r7
    a52a:	2b02      	cmp	r3, #2
    a52c:	bf0c      	ite	eq
    a52e:	f642 0102 	movweq	r1, #10242	; 0x2802
    a532:	f642 0103 	movwne	r1, #10243	; 0x2803
    a536:	f011 f941 	bl	1b7bc <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    a53a:	4623      	mov	r3, r4
    a53c:	4a30      	ldr	r2, [pc, #192]	; (a600 <bt_gatt_discover+0x1e4>)
    a53e:	e7b8      	b.n	a4b2 <bt_gatt_discover+0x96>
		if (params->uuid &&
    a540:	6820      	ldr	r0, [r4, #0]
    a542:	b380      	cbz	r0, a5a6 <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a544:	2600      	movs	r6, #0
    a546:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a54a:	4669      	mov	r1, sp
    a54c:	f88d 6000 	strb.w	r6, [sp]
    a550:	f8ad 3002 	strh.w	r3, [sp, #2]
    a554:	f00f f84e 	bl	195f4 <bt_uuid_cmp>
		if (params->uuid &&
    a558:	2800      	cmp	r0, #0
    a55a:	d0a1      	beq.n	a4a0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a55c:	f642 0301 	movw	r3, #10241	; 0x2801
    a560:	6820      	ldr	r0, [r4, #0]
    a562:	a901      	add	r1, sp, #4
    a564:	f88d 6004 	strb.w	r6, [sp, #4]
    a568:	f8ad 3006 	strh.w	r3, [sp, #6]
    a56c:	f00f f842 	bl	195f4 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a570:	2800      	cmp	r0, #0
    a572:	d095      	beq.n	a4a0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a574:	f642 0302 	movw	r3, #10242	; 0x2802
    a578:	6820      	ldr	r0, [r4, #0]
    a57a:	a902      	add	r1, sp, #8
    a57c:	f88d 6008 	strb.w	r6, [sp, #8]
    a580:	f8ad 300a 	strh.w	r3, [sp, #10]
    a584:	f00f f836 	bl	195f4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a588:	2800      	cmp	r0, #0
    a58a:	d089      	beq.n	a4a0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    a58c:	f642 0303 	movw	r3, #10243	; 0x2803
    a590:	6820      	ldr	r0, [r4, #0]
    a592:	a903      	add	r1, sp, #12
    a594:	f88d 600c 	strb.w	r6, [sp, #12]
    a598:	f8ad 300e 	strh.w	r3, [sp, #14]
    a59c:	f00f f82a 	bl	195f4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a5a0:	2800      	cmp	r0, #0
    a5a2:	f43f af7d 	beq.w	a4a0 <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    a5a6:	2204      	movs	r2, #4
    a5a8:	4628      	mov	r0, r5
    a5aa:	4611      	mov	r1, r2
    a5ac:	f7fe fd20 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a5b0:	4606      	mov	r6, r0
    a5b2:	2800      	cmp	r0, #0
    a5b4:	f43f af4c 	beq.w	a450 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a5b8:	2104      	movs	r1, #4
    a5ba:	3008      	adds	r0, #8
    a5bc:	f011 f8e7 	bl	1b78e <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a5c0:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a5c2:	4a10      	ldr	r2, [pc, #64]	; (a604 <bt_gatt_discover+0x1e8>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a5c4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a5c6:	89e3      	ldrh	r3, [r4, #14]
    a5c8:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a5ca:	4623      	mov	r3, r4
    a5cc:	e771      	b.n	a4b2 <bt_gatt_discover+0x96>
    a5ce:	4b07      	ldr	r3, [pc, #28]	; (a5ec <bt_gatt_discover+0x1d0>)
    a5d0:	4a07      	ldr	r2, [pc, #28]	; (a5f0 <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    a5d2:	480d      	ldr	r0, [pc, #52]	; (a608 <bt_gatt_discover+0x1ec>)
    a5d4:	1ad2      	subs	r2, r2, r3
    a5d6:	08d2      	lsrs	r2, r2, #3
    a5d8:	0192      	lsls	r2, r2, #6
    a5da:	f042 0201 	orr.w	r2, r2, #1
    a5de:	f00d fc82 	bl	17ee6 <log_1>
    a5e2:	e75d      	b.n	a4a0 <bt_gatt_discover+0x84>
		return -ENOTCONN;
    a5e4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a5e8:	e734      	b.n	a454 <bt_gatt_discover+0x38>
    a5ea:	bf00      	nop
    a5ec:	000232ec 	.word	0x000232ec
    a5f0:	0002330c 	.word	0x0002330c
    a5f4:	000264b7 	.word	0x000264b7
    a5f8:	0001abe1 	.word	0x0001abe1
    a5fc:	0000a60d 	.word	0x0000a60d
    a600:	0000a71d 	.word	0x0000a71d
    a604:	0000a9ed 	.word	0x0000a9ed
    a608:	000264cc 	.word	0x000264cc

0000a60c <gatt_read_group_rsp>:
{
    a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a610:	b08f      	sub	sp, #60	; 0x3c
    a612:	4617      	mov	r7, r2
    a614:	4681      	mov	r9, r0
	if (err) {
    a616:	460a      	mov	r2, r1
{
    a618:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
    a61a:	b131      	cbz	r1, a62a <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    a61c:	462a      	mov	r2, r5
    a61e:	2100      	movs	r1, #0
    a620:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
    a622:	4798      	blx	r3
}
    a624:	b00f      	add	sp, #60	; 0x3c
    a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    a62a:	7839      	ldrb	r1, [r7, #0]
    a62c:	2906      	cmp	r1, #6
    a62e:	d011      	beq.n	a654 <gatt_read_group_rsp+0x48>
    a630:	2914      	cmp	r1, #20
    a632:	d00e      	beq.n	a652 <gatt_read_group_rsp+0x46>
    a634:	4a36      	ldr	r2, [pc, #216]	; (a710 <gatt_read_group_rsp+0x104>)
    a636:	4b37      	ldr	r3, [pc, #220]	; (a714 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
    a638:	4837      	ldr	r0, [pc, #220]	; (a718 <gatt_read_group_rsp+0x10c>)
    a63a:	1ad2      	subs	r2, r2, r3
    a63c:	08d2      	lsrs	r2, r2, #3
    a63e:	0192      	lsls	r2, r2, #6
    a640:	f042 0201 	orr.w	r2, r2, #1
    a644:	f00d fc4f 	bl	17ee6 <log_1>
	params->func(conn, NULL, params);
    a648:	462a      	mov	r2, r5
    a64a:	2100      	movs	r1, #0
    a64c:	4648      	mov	r0, r9
    a64e:	686b      	ldr	r3, [r5, #4]
    a650:	e7e7      	b.n	a622 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    a652:	2202      	movs	r2, #2
	uint16_t start_handle, end_handle = 0U;
    a654:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    a656:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    a658:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a65c:	b29c      	uxth	r4, r3
    a65e:	f107 0801 	add.w	r8, r7, #1
    a662:	783b      	ldrb	r3, [r7, #0]
    a664:	42a3      	cmp	r3, r4
    a666:	d909      	bls.n	a67c <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
    a668:	2c00      	cmp	r4, #0
    a66a:	d1ed      	bne.n	a648 <gatt_read_group_rsp+0x3c>
    a66c:	2e00      	cmp	r6, #0
    a66e:	d0eb      	beq.n	a648 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
    a670:	462a      	mov	r2, r5
    a672:	4631      	mov	r1, r6
    a674:	4648      	mov	r0, r9
    a676:	f010 fa96 	bl	1aba6 <gatt_discover_next>
    a67a:	e7d3      	b.n	a624 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    a67c:	2214      	movs	r2, #20
    a67e:	2100      	movs	r1, #0
    a680:	a809      	add	r0, sp, #36	; 0x24
    a682:	f00e fdec 	bl	1925e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    a686:	f8b8 a000 	ldrh.w	sl, [r8]
    a68a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    a68e:	2b00      	cmp	r3, #0
    a690:	d0da      	beq.n	a648 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
    a692:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    a696:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    a69a:	2e00      	cmp	r6, #0
    a69c:	d0d4      	beq.n	a648 <gatt_read_group_rsp+0x3c>
    a69e:	42b3      	cmp	r3, r6
    a6a0:	d8d2      	bhi.n	a648 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
    a6a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a6a6:	b323      	cbz	r3, a6f2 <gatt_read_group_rsp+0xe6>
    a6a8:	2b02      	cmp	r3, #2
    a6aa:	d02a      	beq.n	a702 <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    a6ac:	f04f 0300 	mov.w	r3, #0
    a6b0:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a6b4:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a6b6:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f642 0301 	movw	r3, #10241	; 0x2801
    a6be:	bf08      	it	eq
    a6c0:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    a6c4:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    a6c8:	ab04      	add	r3, sp, #16
    a6ca:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    a6cc:	ab01      	add	r3, sp, #4
    a6ce:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    a6d0:	ab02      	add	r3, sp, #8
    a6d2:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a6d4:	4648      	mov	r0, r9
    a6d6:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
    a6d8:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
    a6dc:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a6e0:	a909      	add	r1, sp, #36	; 0x24
    a6e2:	4798      	blx	r3
    a6e4:	2800      	cmp	r0, #0
    a6e6:	d09d      	beq.n	a624 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a6e8:	783a      	ldrb	r2, [r7, #0]
    a6ea:	1aa4      	subs	r4, r4, r2
    a6ec:	b2a4      	uxth	r4, r4
    a6ee:	4490      	add	r8, r2
    a6f0:	e7b7      	b.n	a662 <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    a6f2:	2202      	movs	r2, #2
    a6f4:	f108 0104 	add.w	r1, r8, #4
    a6f8:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    a6fc:	f00e fd84 	bl	19208 <memcpy>
			break;
    a700:	e7d4      	b.n	a6ac <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    a702:	2210      	movs	r2, #16
    a704:	f108 0104 	add.w	r1, r8, #4
    a708:	f10d 0011 	add.w	r0, sp, #17
    a70c:	e7f6      	b.n	a6fc <gatt_read_group_rsp+0xf0>
    a70e:	bf00      	nop
    a710:	0002330c 	.word	0x0002330c
    a714:	000232ec 	.word	0x000232ec
    a718:	000264e7 	.word	0x000264e7

0000a71c <gatt_read_type_rsp>:
{
    a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a720:	b091      	sub	sp, #68	; 0x44
    a722:	4690      	mov	r8, r2
    a724:	4607      	mov	r7, r0
	if (err) {
    a726:	460a      	mov	r2, r1
{
    a728:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
    a72a:	b121      	cbz	r1, a736 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    a72c:	462a      	mov	r2, r5
    a72e:	2100      	movs	r1, #0
    a730:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
    a732:	4798      	blx	r3
	if (!handle) {
    a734:	e06d      	b.n	a812 <gatt_read_type_rsp+0xf6>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    a736:	7c28      	ldrb	r0, [r5, #16]
    a738:	f898 1000 	ldrb.w	r1, [r8]
    a73c:	2802      	cmp	r0, #2
    a73e:	f040 8087 	bne.w	a850 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    a742:	2906      	cmp	r1, #6
    a744:	d019      	beq.n	a77a <gatt_read_type_rsp+0x5e>
    a746:	2908      	cmp	r1, #8
    a748:	f040 8086 	bne.w	a858 <gatt_read_type_rsp+0x13c>
		u.uuid.type = BT_UUID_TYPE_16;
    a74c:	f88d 2018 	strb.w	r2, [sp, #24]
	uint16_t handle = 0U;
    a750:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a752:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    a754:	1e5c      	subs	r4, r3, #1
    a756:	b2a4      	uxth	r4, r4
    a758:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    a75c:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    a760:	f898 3000 	ldrb.w	r3, [r8]
    a764:	42a3      	cmp	r3, r4
    a766:	d90b      	bls.n	a780 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    a768:	b914      	cbnz	r4, a770 <gatt_read_type_rsp+0x54>
    a76a:	2e00      	cmp	r6, #0
    a76c:	f040 80da 	bne.w	a924 <gatt_read_type_rsp+0x208>
	params->func(conn, NULL, params);
    a770:	462a      	mov	r2, r5
    a772:	2100      	movs	r1, #0
    a774:	4638      	mov	r0, r7
    a776:	686b      	ldr	r3, [r5, #4]
    a778:	e7db      	b.n	a732 <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    a77a:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    a77e:	e7e7      	b.n	a750 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    a780:	f8b9 3000 	ldrh.w	r3, [r9]
    a784:	b29e      	uxth	r6, r3
		if (!handle) {
    a786:	2e00      	cmp	r6, #0
    a788:	d0f2      	beq.n	a770 <gatt_read_type_rsp+0x54>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    a78a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    a78e:	f8ad 2014 	strh.w	r2, [sp, #20]
    a792:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    a794:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    a798:	b291      	uxth	r1, r2
    a79a:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
    a79e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    a7a2:	b182      	cbz	r2, a7c6 <gatt_read_type_rsp+0xaa>
    a7a4:	2a02      	cmp	r2, #2
    a7a6:	d019      	beq.n	a7dc <gatt_read_type_rsp+0xc0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a7a8:	6829      	ldr	r1, [r5, #0]
    a7aa:	2900      	cmp	r1, #0
    a7ac:	d037      	beq.n	a81e <gatt_read_type_rsp+0x102>
    a7ae:	4650      	mov	r0, sl
    a7b0:	9301      	str	r3, [sp, #4]
    a7b2:	f00e ff1f 	bl	195f4 <bt_uuid_cmp>
    a7b6:	9b01      	ldr	r3, [sp, #4]
    a7b8:	b388      	cbz	r0, a81e <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a7ba:	f898 2000 	ldrb.w	r2, [r8]
    a7be:	1aa4      	subs	r4, r4, r2
    a7c0:	b2a4      	uxth	r4, r4
    a7c2:	4491      	add	r9, r2
    a7c4:	e7cc      	b.n	a760 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    a7c6:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    a7ca:	f899 2006 	ldrb.w	r2, [r9, #6]
    a7ce:	f899 1007 	ldrb.w	r1, [r9, #7]
    a7d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a7d6:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    a7da:	e7e5      	b.n	a7a8 <gatt_read_type_rsp+0x8c>
			params->_included.start_handle = value.start_handle;
    a7dc:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    a7de:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    a7e0:	4638      	mov	r0, r7
    a7e2:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
    a7e4:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    a7e6:	9201      	str	r2, [sp, #4]
    a7e8:	f7fe fc02 	bl	8ff0 <bt_att_create_pdu>
	if (!buf) {
    a7ec:	4604      	mov	r4, r0
    a7ee:	b198      	cbz	r0, a818 <gatt_read_type_rsp+0xfc>
    a7f0:	9a01      	ldr	r2, [sp, #4]
    a7f2:	3008      	adds	r0, #8
    a7f4:	4611      	mov	r1, r2
    a7f6:	f010 ffca 	bl	1b78e <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    a7fa:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    a7fc:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    a7fe:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    a800:	4a4b      	ldr	r2, [pc, #300]	; (a930 <gatt_read_type_rsp+0x214>)
    a802:	462b      	mov	r3, r5
    a804:	4638      	mov	r0, r7
    a806:	f7ff f939 	bl	9a7c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    a80a:	b286      	uxth	r6, r0
	if (!handle) {
    a80c:	2e00      	cmp	r6, #0
    a80e:	f040 8089 	bne.w	a924 <gatt_read_type_rsp+0x208>
}
    a812:	b011      	add	sp, #68	; 0x44
    a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    a818:	f06f 000b 	mvn.w	r0, #11
    a81c:	e7f5      	b.n	a80a <gatt_read_type_rsp+0xee>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a81e:	f642 0202 	movw	r2, #10242	; 0x2802
    a822:	f8ad 200e 	strh.w	r2, [sp, #14]
    a826:	aa03      	add	r2, sp, #12
    a828:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    a82c:	aa04      	add	r2, sp, #16
    a82e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    a830:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a834:	462a      	mov	r2, r5
    a836:	4638      	mov	r0, r7
    a838:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a83a:	f88d b00c 	strb.w	fp, [sp, #12]
    a83e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    a842:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a846:	a90b      	add	r1, sp, #44	; 0x2c
    a848:	4798      	blx	r3
    a84a:	2800      	cmp	r0, #0
    a84c:	d1b5      	bne.n	a7ba <gatt_read_type_rsp+0x9e>
    a84e:	e7e0      	b.n	a812 <gatt_read_type_rsp+0xf6>
	switch (rsp->len) {
    a850:	2907      	cmp	r1, #7
    a852:	d00d      	beq.n	a870 <gatt_read_type_rsp+0x154>
    a854:	2915      	cmp	r1, #21
    a856:	d00a      	beq.n	a86e <gatt_read_type_rsp+0x152>
    a858:	4b36      	ldr	r3, [pc, #216]	; (a934 <gatt_read_type_rsp+0x218>)
    a85a:	4a37      	ldr	r2, [pc, #220]	; (a938 <gatt_read_type_rsp+0x21c>)
		BT_ERR("Invalid data len %u", rsp->len);
    a85c:	4837      	ldr	r0, [pc, #220]	; (a93c <gatt_read_type_rsp+0x220>)
    a85e:	1ad2      	subs	r2, r2, r3
    a860:	08d2      	lsrs	r2, r2, #3
    a862:	0192      	lsls	r2, r2, #6
    a864:	f042 0201 	orr.w	r2, r2, #1
    a868:	f00d fb3d 	bl	17ee6 <log_1>
		goto done;
    a86c:	e780      	b.n	a770 <gatt_read_type_rsp+0x54>
		u.uuid.type = BT_UUID_TYPE_128;
    a86e:	2202      	movs	r2, #2
	uint16_t handle = 0U;
    a870:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    a872:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    a874:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a878:	b2a4      	uxth	r4, r4
    a87a:	f108 0901 	add.w	r9, r8, #1
    a87e:	f10d 0a18 	add.w	sl, sp, #24
    a882:	f898 3000 	ldrb.w	r3, [r8]
    a886:	42a3      	cmp	r3, r4
    a888:	f63f af6e 	bhi.w	a768 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    a88c:	f8b9 b000 	ldrh.w	fp, [r9]
    a890:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    a894:	2e00      	cmp	r6, #0
    a896:	f43f af6b 	beq.w	a770 <gatt_read_type_rsp+0x54>
		switch (u.uuid.type) {
    a89a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a89e:	b16b      	cbz	r3, a8bc <gatt_read_type_rsp+0x1a0>
    a8a0:	2b02      	cmp	r3, #2
    a8a2:	d014      	beq.n	a8ce <gatt_read_type_rsp+0x1b2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a8a4:	6829      	ldr	r1, [r5, #0]
    a8a6:	b1d1      	cbz	r1, a8de <gatt_read_type_rsp+0x1c2>
    a8a8:	4650      	mov	r0, sl
    a8aa:	f00e fea3 	bl	195f4 <bt_uuid_cmp>
    a8ae:	b1b0      	cbz	r0, a8de <gatt_read_type_rsp+0x1c2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a8b0:	f898 2000 	ldrb.w	r2, [r8]
    a8b4:	1aa4      	subs	r4, r4, r2
    a8b6:	b2a4      	uxth	r4, r4
    a8b8:	4491      	add	r9, r2
    a8ba:	e7e2      	b.n	a882 <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    a8bc:	f899 3005 	ldrb.w	r3, [r9, #5]
    a8c0:	f899 2006 	ldrb.w	r2, [r9, #6]
    a8c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a8c8:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    a8cc:	e7ea      	b.n	a8a4 <gatt_read_type_rsp+0x188>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    a8ce:	2210      	movs	r2, #16
    a8d0:	f109 0105 	add.w	r1, r9, #5
    a8d4:	f10d 0019 	add.w	r0, sp, #25
    a8d8:	f00e fc96 	bl	19208 <memcpy>
			break;
    a8dc:	e7e2      	b.n	a8a4 <gatt_read_type_rsp+0x188>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a8de:	f8b9 2003 	ldrh.w	r2, [r9, #3]
    a8e2:	f899 3002 	ldrb.w	r3, [r9, #2]
    a8e6:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a8ea:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a8ee:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a8f2:	2300      	movs	r3, #0
    a8f4:	f8ad 200e 	strh.w	r2, [sp, #14]
    a8f8:	aa03      	add	r2, sp, #12
    a8fa:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    a8fe:	aa04      	add	r2, sp, #16
    a900:	f88d 300c 	strb.w	r3, [sp, #12]
    a904:	930d      	str	r3, [sp, #52]	; 0x34
    a906:	920e      	str	r2, [sp, #56]	; 0x38
    a908:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a90c:	462a      	mov	r2, r5
    a90e:	4638      	mov	r0, r7
    a910:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a912:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
    a916:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a91a:	a90b      	add	r1, sp, #44	; 0x2c
    a91c:	4798      	blx	r3
    a91e:	2800      	cmp	r0, #0
    a920:	d1c6      	bne.n	a8b0 <gatt_read_type_rsp+0x194>
    a922:	e776      	b.n	a812 <gatt_read_type_rsp+0xf6>
	gatt_discover_next(conn, handle, params);
    a924:	462a      	mov	r2, r5
    a926:	4631      	mov	r1, r6
    a928:	4638      	mov	r0, r7
    a92a:	f010 f93c 	bl	1aba6 <gatt_discover_next>
    a92e:	e770      	b.n	a812 <gatt_read_type_rsp+0xf6>
    a930:	0000a941 	.word	0x0000a941
    a934:	000232ec 	.word	0x000232ec
    a938:	0002330c 	.word	0x0002330c
    a93c:	000264e7 	.word	0x000264e7

0000a940 <read_included_uuid_cb>:
{
    a940:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
    a942:	2b10      	cmp	r3, #16
{
    a944:	b08e      	sub	sp, #56	; 0x38
    a946:	4605      	mov	r5, r0
    a948:	4611      	mov	r1, r2
    a94a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
    a94c:	d011      	beq.n	a972 <read_included_uuid_cb+0x32>
    a94e:	4924      	ldr	r1, [pc, #144]	; (a9e0 <read_included_uuid_cb+0xa0>)
    a950:	4a24      	ldr	r2, [pc, #144]	; (a9e4 <read_included_uuid_cb+0xa4>)
		BT_ERR("Invalid data len %u", length);
    a952:	4825      	ldr	r0, [pc, #148]	; (a9e8 <read_included_uuid_cb+0xa8>)
    a954:	1a52      	subs	r2, r2, r1
    a956:	08d2      	lsrs	r2, r2, #3
    a958:	0192      	lsls	r2, r2, #6
    a95a:	4619      	mov	r1, r3
    a95c:	f042 0201 	orr.w	r2, r2, #1
    a960:	f00d fac1 	bl	17ee6 <log_1>
		params->func(conn, NULL, params);
    a964:	4622      	mov	r2, r4
    a966:	2100      	movs	r1, #0
    a968:	4628      	mov	r0, r5
    a96a:	6863      	ldr	r3, [r4, #4]
    a96c:	4798      	blx	r3
}
    a96e:	b00e      	add	sp, #56	; 0x38
    a970:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    a972:	8962      	ldrh	r2, [r4, #10]
	value.uuid = &u.uuid;
    a974:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
    a976:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    a97a:	89a2      	ldrh	r2, [r4, #12]
	memcpy(u.u128.val, pdu, length);
    a97c:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
    a980:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    a984:	2202      	movs	r2, #2
    a986:	f88d 2010 	strb.w	r2, [sp, #16]
	memcpy(u.u128.val, pdu, length);
    a98a:	461a      	mov	r2, r3
	value.uuid = &u.uuid;
    a98c:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    a98e:	f00e fc3b 	bl	19208 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a992:	6821      	ldr	r1, [r4, #0]
    a994:	b9f1      	cbnz	r1, a9d4 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a996:	f642 0202 	movw	r2, #10242	; 0x2802
    a99a:	2300      	movs	r3, #0
    a99c:	f8ad 2006 	strh.w	r2, [sp, #6]
    a9a0:	aa01      	add	r2, sp, #4
    a9a2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    a9a6:	f88d 3004 	strb.w	r3, [sp, #4]
    a9aa:	930b      	str	r3, [sp, #44]	; 0x2c
    a9ac:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
    a9b0:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a9b2:	aa02      	add	r2, sp, #8
    a9b4:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
    a9b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a9ba:	4622      	mov	r2, r4
    a9bc:	4628      	mov	r0, r5
    a9be:	6863      	ldr	r3, [r4, #4]
    a9c0:	a909      	add	r1, sp, #36	; 0x24
    a9c2:	4798      	blx	r3
    a9c4:	2800      	cmp	r0, #0
    a9c6:	d0d2      	beq.n	a96e <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
    a9c8:	4622      	mov	r2, r4
    a9ca:	4628      	mov	r0, r5
    a9cc:	8921      	ldrh	r1, [r4, #8]
    a9ce:	f010 f8ea 	bl	1aba6 <gatt_discover_next>
	return;
    a9d2:	e7cc      	b.n	a96e <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a9d4:	4630      	mov	r0, r6
    a9d6:	f00e fe0d 	bl	195f4 <bt_uuid_cmp>
    a9da:	2800      	cmp	r0, #0
    a9dc:	d0db      	beq.n	a996 <read_included_uuid_cb+0x56>
    a9de:	e7f3      	b.n	a9c8 <read_included_uuid_cb+0x88>
    a9e0:	000232ec 	.word	0x000232ec
    a9e4:	0002330c 	.word	0x0002330c
    a9e8:	000264e7 	.word	0x000264e7

0000a9ec <gatt_find_info_rsp>:
{
    a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9f0:	b08f      	sub	sp, #60	; 0x3c
    a9f2:	4680      	mov	r8, r0
    a9f4:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    a9f6:	4608      	mov	r0, r1
    a9f8:	b971      	cbnz	r1, aa18 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    a9fa:	7811      	ldrb	r1, [r2, #0]
    a9fc:	2901      	cmp	r1, #1
    a9fe:	d011      	beq.n	aa24 <gatt_find_info_rsp+0x38>
    aa00:	2902      	cmp	r1, #2
    aa02:	d028      	beq.n	aa56 <gatt_find_info_rsp+0x6a>
    aa04:	4a4f      	ldr	r2, [pc, #316]	; (ab44 <gatt_find_info_rsp+0x158>)
    aa06:	4b50      	ldr	r3, [pc, #320]	; (ab48 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
    aa08:	4850      	ldr	r0, [pc, #320]	; (ab4c <gatt_find_info_rsp+0x160>)
    aa0a:	1ad2      	subs	r2, r2, r3
    aa0c:	08d2      	lsrs	r2, r2, #3
    aa0e:	0192      	lsls	r2, r2, #6
    aa10:	f042 0201 	orr.w	r2, r2, #1
    aa14:	f00d fa67 	bl	17ee6 <log_1>
	params->func(conn, NULL, params);
    aa18:	4632      	mov	r2, r6
    aa1a:	2100      	movs	r1, #0
    aa1c:	4640      	mov	r0, r8
    aa1e:	6873      	ldr	r3, [r6, #4]
    aa20:	4798      	blx	r3
    aa22:	e08b      	b.n	ab3c <gatt_find_info_rsp+0x150>
		len = sizeof(*info.i16);
    aa24:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
    aa28:	f88d 0010 	strb.w	r0, [sp, #16]
	length--;
    aa2c:	3b01      	subs	r3, #1
    aa2e:	b29b      	uxth	r3, r3
	if (length < len) {
    aa30:	4553      	cmp	r3, sl
    aa32:	d3f1      	bcc.n	aa18 <gatt_find_info_rsp+0x2c>
	bool skip = false;
    aa34:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    aa38:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
    aa3c:	46cb      	mov	fp, r9
			skip = false;
    aa3e:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
    aa40:	9300      	str	r3, [sp, #0]
    aa42:	1c54      	adds	r4, r2, #1
    aa44:	af04      	add	r7, sp, #16
    aa46:	9b00      	ldr	r3, [sp, #0]
    aa48:	b953      	cbnz	r3, aa60 <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    aa4a:	4632      	mov	r2, r6
    aa4c:	4659      	mov	r1, fp
    aa4e:	4640      	mov	r0, r8
    aa50:	f010 f8a9 	bl	1aba6 <gatt_discover_next>
	return;
    aa54:	e072      	b.n	ab3c <gatt_find_info_rsp+0x150>
		len = sizeof(*info.i128);
    aa56:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
    aa5a:	f88d 1010 	strb.w	r1, [sp, #16]
		break;
    aa5e:	e7e5      	b.n	aa2c <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    aa60:	8823      	ldrh	r3, [r4, #0]
    aa62:	f8ad 3004 	strh.w	r3, [sp, #4]
    aa66:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    aa6a:	f1b9 0f00 	cmp.w	r9, #0
    aa6e:	d151      	bne.n	ab14 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
    aa70:	f89d 3010 	ldrb.w	r3, [sp, #16]
    aa74:	2b00      	cmp	r3, #0
    aa76:	d03a      	beq.n	aaee <gatt_find_info_rsp+0x102>
    aa78:	2b02      	cmp	r3, #2
    aa7a:	d03f      	beq.n	aafc <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    aa7c:	6831      	ldr	r1, [r6, #0]
    aa7e:	2900      	cmp	r1, #0
    aa80:	d143      	bne.n	ab0a <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    aa82:	7c33      	ldrb	r3, [r6, #16]
    aa84:	2b04      	cmp	r3, #4
    aa86:	d148      	bne.n	ab1a <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    aa88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aa8c:	4638      	mov	r0, r7
    aa8e:	a902      	add	r1, sp, #8
    aa90:	f88d 5008 	strb.w	r5, [sp, #8]
    aa94:	f8ad 300a 	strh.w	r3, [sp, #10]
    aa98:	f00e fdac 	bl	195f4 <bt_uuid_cmp>
    aa9c:	b310      	cbz	r0, aae4 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    aa9e:	f642 0301 	movw	r3, #10241	; 0x2801
    aaa2:	4638      	mov	r0, r7
    aaa4:	a903      	add	r1, sp, #12
    aaa6:	f88d 500c 	strb.w	r5, [sp, #12]
    aaaa:	f8ad 300e 	strh.w	r3, [sp, #14]
    aaae:	f00e fda1 	bl	195f4 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    aab2:	b1b8      	cbz	r0, aae4 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    aab4:	f642 0302 	movw	r3, #10242	; 0x2802
    aab8:	4638      	mov	r0, r7
    aaba:	a909      	add	r1, sp, #36	; 0x24
    aabc:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    aac0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    aac4:	f00e fd96 	bl	195f4 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    aac8:	b160      	cbz	r0, aae4 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    aaca:	f642 0303 	movw	r3, #10243	; 0x2803
    aace:	4638      	mov	r0, r7
    aad0:	a909      	add	r1, sp, #36	; 0x24
    aad2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    aad6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    aada:	f00e fd8b 	bl	195f4 <bt_uuid_cmp>
    aade:	b9e0      	cbnz	r0, ab1a <gatt_find_info_rsp+0x12e>
				skip = true;
    aae0:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    aae4:	9b00      	ldr	r3, [sp, #0]
    aae6:	4454      	add	r4, sl
    aae8:	3b01      	subs	r3, #1
    aaea:	9300      	str	r3, [sp, #0]
    aaec:	e7ab      	b.n	aa46 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    aaee:	78a3      	ldrb	r3, [r4, #2]
    aaf0:	78e2      	ldrb	r2, [r4, #3]
    aaf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aaf6:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    aafa:	e7bf      	b.n	aa7c <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    aafc:	2210      	movs	r2, #16
    aafe:	1ca1      	adds	r1, r4, #2
    ab00:	f10d 0011 	add.w	r0, sp, #17
    ab04:	f00e fb80 	bl	19208 <memcpy>
			break;
    ab08:	e7b8      	b.n	aa7c <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ab0a:	4638      	mov	r0, r7
    ab0c:	f00e fd72 	bl	195f4 <bt_uuid_cmp>
    ab10:	2800      	cmp	r0, #0
    ab12:	d0b6      	beq.n	aa82 <gatt_find_info_rsp+0x96>
			skip = false;
    ab14:	f04f 0900 	mov.w	r9, #0
    ab18:	e7e4      	b.n	aae4 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    ab1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab1e:	4632      	mov	r2, r6
		attr.handle = handle;
    ab20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab24:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab26:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    ab2a:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab2e:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab30:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab34:	a909      	add	r1, sp, #36	; 0x24
    ab36:	4798      	blx	r3
    ab38:	2800      	cmp	r0, #0
    ab3a:	d1d3      	bne.n	aae4 <gatt_find_info_rsp+0xf8>
}
    ab3c:	b00f      	add	sp, #60	; 0x3c
    ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab42:	bf00      	nop
    ab44:	0002330c 	.word	0x0002330c
    ab48:	000232ec 	.word	0x000232ec
    ab4c:	000264fb 	.word	0x000264fb

0000ab50 <bt_gatt_mult_notification>:
{
    ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab54:	b087      	sub	sp, #28
    ab56:	4682      	mov	sl, r0
    ab58:	460c      	mov	r4, r1
    ab5a:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    ab5c:	f7fe febe 	bl	98dc <gatt_sub_find>
	if (!sub) {
    ab60:	4607      	mov	r7, r0
    ab62:	b1f8      	cbz	r0, aba4 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    ab64:	4632      	mov	r2, r6
    ab66:	4621      	mov	r1, r4
    ab68:	a803      	add	r0, sp, #12
    ab6a:	f010 fdd3 	bl	1b714 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    ab6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ab72:	2b04      	cmp	r3, #4
    ab74:	d916      	bls.n	aba4 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    ab76:	2104      	movs	r1, #4
    ab78:	a803      	add	r0, sp, #12
    ab7a:	f010 fe42 	bl	1b802 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    ab7e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    ab82:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    ab86:	4605      	mov	r5, r0
		if (len > buf.len) {
    ab88:	4543      	cmp	r3, r8
    ab8a:	d20e      	bcs.n	abaa <bt_gatt_mult_notification+0x5a>
    ab8c:	4a1c      	ldr	r2, [pc, #112]	; (ac00 <bt_gatt_mult_notification+0xb0>)
    ab8e:	4b1d      	ldr	r3, [pc, #116]	; (ac04 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    ab90:	4641      	mov	r1, r8
    ab92:	1a9b      	subs	r3, r3, r2
    ab94:	08db      	lsrs	r3, r3, #3
    ab96:	019b      	lsls	r3, r3, #6
    ab98:	4632      	mov	r2, r6
    ab9a:	481b      	ldr	r0, [pc, #108]	; (ac08 <bt_gatt_mult_notification+0xb8>)
    ab9c:	f043 0301 	orr.w	r3, r3, #1
    aba0:	f00d f9b5 	bl	17f0e <log_2>
}
    aba4:	b007      	add	sp, #28
    aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    abaa:	68bb      	ldr	r3, [r7, #8]
    abac:	b31b      	cbz	r3, abf6 <bt_gatt_mult_notification+0xa6>
    abae:	f1b3 0914 	subs.w	r9, r3, #20
    abb2:	d020      	beq.n	abf6 <bt_gatt_mult_notification+0xa6>
    abb4:	681c      	ldr	r4, [r3, #0]
    abb6:	b104      	cbz	r4, abba <bt_gatt_mult_notification+0x6a>
    abb8:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    abba:	462b      	mov	r3, r5
    abbc:	f833 bb04 	ldrh.w	fp, [r3], #4
    abc0:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    abc2:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    abc6:	455b      	cmp	r3, fp
    abc8:	d10b      	bne.n	abe2 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    abca:	4643      	mov	r3, r8
    abcc:	4649      	mov	r1, r9
    abce:	4650      	mov	r0, sl
    abd0:	9a01      	ldr	r2, [sp, #4]
    abd2:	f8d9 5000 	ldr.w	r5, [r9]
    abd6:	47a8      	blx	r5
    abd8:	b918      	cbnz	r0, abe2 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    abda:	4649      	mov	r1, r9
    abdc:	4650      	mov	r0, sl
    abde:	f010 f8a3 	bl	1ad28 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    abe2:	b144      	cbz	r4, abf6 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    abe4:	f114 0314 	adds.w	r3, r4, #20
    abe8:	d002      	beq.n	abf0 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    abea:	6963      	ldr	r3, [r4, #20]
    abec:	b103      	cbz	r3, abf0 <bt_gatt_mult_notification+0xa0>
    abee:	3b14      	subs	r3, #20
{
    abf0:	46a1      	mov	r9, r4
    abf2:	461c      	mov	r4, r3
    abf4:	e7e5      	b.n	abc2 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    abf6:	4641      	mov	r1, r8
    abf8:	a803      	add	r0, sp, #12
    abfa:	f010 fe02 	bl	1b802 <net_buf_simple_pull_mem>
    abfe:	e7b6      	b.n	ab6e <bt_gatt_mult_notification+0x1e>
    ac00:	000232ec 	.word	0x000232ec
    ac04:	0002330c 	.word	0x0002330c
    ac08:	0002650d 	.word	0x0002650d

0000ac0c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    ac0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ac0e:	4605      	mov	r5, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
    ac10:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    ac12:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ac14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac18:	466b      	mov	r3, sp
    ac1a:	4a1a      	ldr	r2, [pc, #104]	; (ac84 <bt_gatt_connected+0x78>)
	data.sec = BT_SECURITY_L1;
    ac1c:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ac20:	f00f ff89 	bl	1ab36 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    ac24:	4628      	mov	r0, r5
    ac26:	f00e fff4 	bl	19c12 <bt_conn_get_security>
    ac2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    ac2e:	4288      	cmp	r0, r1
    ac30:	d202      	bcs.n	ac38 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    ac32:	4628      	mov	r0, r5
    ac34:	f00e ffbe 	bl	19bb4 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    ac38:	4628      	mov	r0, r5
    ac3a:	f7fe fe4f 	bl	98dc <gatt_sub_find>
	if (!sub) {
    ac3e:	b128      	cbz	r0, ac4c <bt_gatt_connected+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    ac40:	6884      	ldr	r4, [r0, #8]
    ac42:	b11c      	cbz	r4, ac4c <bt_gatt_connected+0x40>
    ac44:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    ac46:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    ac4a:	b90c      	cbnz	r4, ac50 <bt_gatt_connected+0x44>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    ac4c:	b002      	add	sp, #8
    ac4e:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    ac50:	4631      	mov	r1, r6
    ac52:	7a28      	ldrb	r0, [r5, #8]
    ac54:	f00e fee2 	bl	19a1c <bt_addr_le_is_bonded>
    ac58:	b158      	cbz	r0, ac72 <bt_gatt_connected+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ac5a:	f104 0310 	add.w	r3, r4, #16
    ac5e:	e8d3 3faf 	lda	r3, [r3]
    ac62:	079b      	lsls	r3, r3, #30
    ac64:	d405      	bmi.n	ac72 <bt_gatt_connected+0x66>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    ac66:	4623      	mov	r3, r4
    ac68:	4628      	mov	r0, r5
    ac6a:	89a2      	ldrh	r2, [r4, #12]
    ac6c:	8961      	ldrh	r1, [r4, #10]
    ac6e:	f7fe ff81 	bl	9b74 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ac72:	f114 0f14 	cmn.w	r4, #20
    ac76:	d0e9      	beq.n	ac4c <bt_gatt_connected+0x40>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ac78:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    ac7a:	2c00      	cmp	r4, #0
    ac7c:	d0e6      	beq.n	ac4c <bt_gatt_connected+0x40>
    ac7e:	3c14      	subs	r4, #20
    ac80:	e7e3      	b.n	ac4a <bt_gatt_connected+0x3e>
    ac82:	bf00      	nop
    ac84:	0000a2a1 	.word	0x0000a2a1

0000ac88 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    ac88:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
    ac8a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    ac8c:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ac8e:	466b      	mov	r3, sp
    ac90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac94:	4a03      	ldr	r2, [pc, #12]	; (aca4 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
    ac96:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ac9a:	f00f ff4c 	bl	1ab36 <bt_gatt_foreach_attr>
}
    ac9e:	b003      	add	sp, #12
    aca0:	f85d fb04 	ldr.w	pc, [sp], #4
    aca4:	0000a2a1 	.word	0x0000a2a1

0000aca8 <db_hash_read>:
{
    aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acaa:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    acac:	480f      	ldr	r0, [pc, #60]	; (acec <db_hash_read+0x44>)
{
    acae:	4615      	mov	r5, r2
    acb0:	461f      	mov	r7, r3
    acb2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    acb6:	f017 ff55 	bl	22b64 <k_delayed_work_cancel>
	if (!err) {
    acba:	b908      	cbnz	r0, acc0 <db_hash_read+0x18>
		db_hash_gen(true);
    acbc:	f7ff fa00 	bl	a0c0 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    acc0:	2101      	movs	r1, #1
    acc2:	4620      	mov	r0, r4
    acc4:	f010 f8d4 	bl	1ae70 <bt_gatt_change_aware>
	if (offset > value_len) {
    acc8:	2e10      	cmp	r6, #16
    acca:	d80c      	bhi.n	ace6 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    accc:	f1c6 0410 	rsb	r4, r6, #16
    acd0:	42bc      	cmp	r4, r7
    acd2:	bfa8      	it	ge
    acd4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    acd6:	4906      	ldr	r1, [pc, #24]	; (acf0 <db_hash_read+0x48>)
    acd8:	4622      	mov	r2, r4
    acda:	4628      	mov	r0, r5
    acdc:	4431      	add	r1, r6
    acde:	f00e fa93 	bl	19208 <memcpy>
}
    ace2:	4620      	mov	r0, r4
    ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ace6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    acea:	e7fa      	b.n	ace2 <db_hash_read+0x3a>
    acec:	20000d38 	.word	0x20000d38
    acf0:	2002a049 	.word	0x2002a049

0000acf4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    acf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acf8:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    acfa:	4603      	mov	r3, r0
    acfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad00:	2001      	movs	r0, #1
    ad02:	4a2e      	ldr	r2, [pc, #184]	; (adbc <bt_gatt_disconnected+0xc8>)
    ad04:	f00f ff17 	bl	1ab36 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    ad08:	4620      	mov	r0, r4
    ad0a:	f7fe fde7 	bl	98dc <gatt_sub_find>
	if (!sub) {
    ad0e:	4606      	mov	r6, r0
    ad10:	b3a0      	cbz	r0, ad7c <bt_gatt_disconnected+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    ad12:	6883      	ldr	r3, [r0, #8]
    ad14:	b393      	cbz	r3, ad7c <bt_gatt_disconnected+0x88>
    ad16:	f1b3 0714 	subs.w	r7, r3, #20
    ad1a:	d02f      	beq.n	ad7c <bt_gatt_disconnected+0x88>
    ad1c:	681d      	ldr	r5, [r3, #0]
    ad1e:	b105      	cbz	r5, ad22 <bt_gatt_disconnected+0x2e>
    ad20:	3d14      	subs	r5, #20
{
    ad22:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
    ad26:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ad28:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    ad2c:	f106 0901 	add.w	r9, r6, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ad30:	4641      	mov	r1, r8
    ad32:	7a20      	ldrb	r0, [r4, #8]
    ad34:	f00e fe72 	bl	19a1c <bt_addr_le_is_bonded>
    ad38:	b988      	cbnz	r0, ad5e <bt_gatt_disconnected+0x6a>
			gatt_sub_remove(conn, sub, prev, params);
    ad3a:	463b      	mov	r3, r7
    ad3c:	465a      	mov	r2, fp
    ad3e:	4631      	mov	r1, r6
    ad40:	4620      	mov	r0, r4
			params->value = 0U;
    ad42:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
    ad46:	f00f fe2e 	bl	1a9a6 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    ad4a:	b1bd      	cbz	r5, ad7c <bt_gatt_disconnected+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ad4c:	f115 0114 	adds.w	r1, r5, #20
    ad50:	d002      	beq.n	ad58 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ad52:	6969      	ldr	r1, [r5, #20]
    ad54:	b101      	cbz	r1, ad58 <bt_gatt_disconnected+0x64>
    ad56:	3914      	subs	r1, #20
{
    ad58:	462f      	mov	r7, r5
    ad5a:	460d      	mov	r5, r1
    ad5c:	e7e8      	b.n	ad30 <bt_gatt_disconnected+0x3c>
    ad5e:	f107 0310 	add.w	r3, r7, #16
    ad62:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ad66:	07db      	lsls	r3, r3, #31
    ad68:	d4e7      	bmi.n	ad3a <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    ad6a:	7873      	ldrb	r3, [r6, #1]
    ad6c:	b11b      	cbz	r3, ad76 <bt_gatt_disconnected+0x82>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    ad6e:	4641      	mov	r1, r8
    ad70:	4648      	mov	r0, r9
    ad72:	f00f fd32 	bl	1a7da <bt_addr_le_copy>
			prev = &params->node;
    ad76:	f107 0b14 	add.w	fp, r7, #20
    ad7a:	e7e6      	b.n	ad4a <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
    ad7c:	4620      	mov	r0, r4
    ad7e:	f7fe fd5f 	bl	9840 <find_cf_cfg>
	if (!cfg) {
    ad82:	4605      	mov	r5, r0
    ad84:	b1c0      	cbz	r0, adb8 <bt_gatt_disconnected+0xc4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ad86:	f104 0688 	add.w	r6, r4, #136	; 0x88
    ad8a:	4631      	mov	r1, r6
    ad8c:	7a20      	ldrb	r0, [r4, #8]
    ad8e:	f00e fe45 	bl	19a1c <bt_addr_le_is_bonded>
    ad92:	b920      	cbnz	r0, ad9e <bt_gatt_disconnected+0xaa>
		clear_cf_cfg(cfg);
    ad94:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    ad96:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    ad9a:	f00f bd2d 	b.w	1a7f8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ad9e:	1c68      	adds	r0, r5, #1
    ada0:	4631      	mov	r1, r6
    ada2:	f00f fd1a 	bl	1a7da <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ada6:	350c      	adds	r5, #12
    ada8:	e8d5 3fef 	ldaex	r3, [r5]
    adac:	f023 0302 	bic.w	r3, r3, #2
    adb0:	e8c5 3fe2 	stlex	r2, r3, [r5]
    adb4:	2a00      	cmp	r2, #0
    adb6:	d1f7      	bne.n	ada8 <bt_gatt_disconnected+0xb4>
}
    adb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adbc:	00009e4d 	.word	0x00009e4d

0000adc0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    adc0:	4b10      	ldr	r3, [pc, #64]	; (ae04 <get_io_capa+0x44>)
    adc2:	681b      	ldr	r3, [r3, #0]
    adc4:	b1bb      	cbz	r3, adf6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    adc6:	681a      	ldr	r2, [r3, #0]
    adc8:	b142      	cbz	r2, addc <get_io_capa+0x1c>
    adca:	6859      	ldr	r1, [r3, #4]
    adcc:	b131      	cbz	r1, addc <get_io_capa+0x1c>
    adce:	6899      	ldr	r1, [r3, #8]
    add0:	b911      	cbnz	r1, add8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    add2:	490d      	ldr	r1, [pc, #52]	; (ae08 <get_io_capa+0x48>)
    add4:	7809      	ldrb	r1, [r1, #0]
    add6:	b939      	cbnz	r1, ade8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    add8:	2004      	movs	r0, #4
    adda:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    addc:	490a      	ldr	r1, [pc, #40]	; (ae08 <get_io_capa+0x48>)
    adde:	7809      	ldrb	r1, [r1, #0]
    ade0:	b111      	cbz	r1, ade8 <get_io_capa+0x28>
    ade2:	b10a      	cbz	r2, ade8 <get_io_capa+0x28>
    ade4:	6899      	ldr	r1, [r3, #8]
    ade6:	b941      	cbnz	r1, adfa <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    ade8:	685b      	ldr	r3, [r3, #4]
    adea:	b943      	cbnz	r3, adfe <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    adec:	2a00      	cmp	r2, #0
    adee:	bf0c      	ite	eq
    adf0:	2003      	moveq	r0, #3
    adf2:	2000      	movne	r0, #0
    adf4:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    adf6:	2003      	movs	r0, #3
    adf8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    adfa:	2001      	movs	r0, #1
    adfc:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    adfe:	2002      	movs	r0, #2
	}
}
    ae00:	4770      	bx	lr
    ae02:	bf00      	nop
    ae04:	20025a10 	.word	0x20025a10
    ae08:	2002a05a 	.word	0x2002a05a

0000ae0c <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    ae0c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ae0e:	2106      	movs	r1, #6
    ae10:	f00f f84a 	bl	19ea8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ae14:	4604      	mov	r4, r0
    ae16:	b948      	cbnz	r0, ae2c <smp_chan_get+0x20>
    ae18:	4905      	ldr	r1, [pc, #20]	; (ae30 <smp_chan_get+0x24>)
    ae1a:	4b06      	ldr	r3, [pc, #24]	; (ae34 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    ae1c:	4806      	ldr	r0, [pc, #24]	; (ae38 <smp_chan_get+0x2c>)
    ae1e:	1ac9      	subs	r1, r1, r3
    ae20:	08c9      	lsrs	r1, r1, #3
    ae22:	0189      	lsls	r1, r1, #6
    ae24:	f041 0101 	orr.w	r1, r1, #1
    ae28:	f00d f850 	bl	17ecc <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    ae2c:	4620      	mov	r0, r4
    ae2e:	bd10      	pop	{r4, pc}
    ae30:	00023344 	.word	0x00023344
    ae34:	000232ec 	.word	0x000232ec
    ae38:	00026535 	.word	0x00026535

0000ae3c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ae3c:	4a0b      	ldr	r2, [pc, #44]	; (ae6c <bt_smp_accept+0x30>)
{
    ae3e:	b508      	push	{r3, lr}
    ae40:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    ae42:	6810      	ldr	r0, [r2, #0]
    ae44:	b918      	cbnz	r0, ae4e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ae46:	4b0a      	ldr	r3, [pc, #40]	; (ae70 <bt_smp_accept+0x34>)
    ae48:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    ae4a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ae4c:	bd08      	pop	{r3, pc}
    ae4e:	4909      	ldr	r1, [pc, #36]	; (ae74 <bt_smp_accept+0x38>)
    ae50:	4a09      	ldr	r2, [pc, #36]	; (ae78 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    ae52:	480a      	ldr	r0, [pc, #40]	; (ae7c <bt_smp_accept+0x40>)
    ae54:	1a52      	subs	r2, r2, r1
    ae56:	08d2      	lsrs	r2, r2, #3
    ae58:	0192      	lsls	r2, r2, #6
    ae5a:	4619      	mov	r1, r3
    ae5c:	f042 0201 	orr.w	r2, r2, #1
    ae60:	f00d f841 	bl	17ee6 <log_1>
	return -ENOMEM;
    ae64:	f06f 000b 	mvn.w	r0, #11
    ae68:	e7f0      	b.n	ae4c <bt_smp_accept+0x10>
    ae6a:	bf00      	nop
    ae6c:	20000dc0 	.word	0x20000dc0
    ae70:	00023b90 	.word	0x00023b90
    ae74:	000232ec 	.word	0x000232ec
    ae78:	00023344 	.word	0x00023344
    ae7c:	00026550 	.word	0x00026550

0000ae80 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ae80:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ae82:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ae84:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ae86:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ae88:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ae8a:	460a      	mov	r2, r1
    ae8c:	6800      	ldr	r0, [r0, #0]
    ae8e:	2106      	movs	r1, #6
    ae90:	f00e ffca 	bl	19e28 <bt_l2cap_send_cb>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ae94:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ae98:	2300      	movs	r3, #0
    ae9a:	4804      	ldr	r0, [pc, #16]	; (aeac <smp_send.isra.0+0x2c>)
    ae9c:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    aea0:	b002      	add	sp, #8
    aea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aea6:	f00b bf4f 	b.w	16d48 <k_delayed_work_submit_to_queue>
    aeaa:	bf00      	nop
    aeac:	200010f8 	.word	0x200010f8

0000aeb0 <smp_find>:
{
    aeb0:	4601      	mov	r1, r0
    aeb2:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    aeb4:	4803      	ldr	r0, [pc, #12]	; (aec4 <smp_find+0x14>)
    aeb6:	f010 f8c4 	bl	1b042 <atomic_test_bit>
    aeba:	2800      	cmp	r0, #0
}
    aebc:	4802      	ldr	r0, [pc, #8]	; (aec8 <smp_find+0x18>)
    aebe:	bf08      	it	eq
    aec0:	2000      	moveq	r0, #0
    aec2:	bd08      	pop	{r3, pc}
    aec4:	20000e7c 	.word	0x20000e7c
    aec8:	20000dc0 	.word	0x20000dc0

0000aecc <sc_send_public_key>:
{
    aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    aece:	210c      	movs	r1, #12
{
    aed0:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    aed2:	f010 f8e1 	bl	1b098 <smp_create_pdu.isra.0>
	if (!req_buf) {
    aed6:	4604      	mov	r4, r0
    aed8:	b1b0      	cbz	r0, af08 <sc_send_public_key+0x3c>
    aeda:	2140      	movs	r1, #64	; 0x40
    aedc:	3008      	adds	r0, #8
    aede:	f010 fc56 	bl	1b78e <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    aee2:	4f0a      	ldr	r7, [pc, #40]	; (af0c <sc_send_public_key+0x40>)
    aee4:	2220      	movs	r2, #32
    aee6:	6839      	ldr	r1, [r7, #0]
    aee8:	4606      	mov	r6, r0
    aeea:	f00e f98d 	bl	19208 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    aeee:	2220      	movs	r2, #32
    aef0:	6839      	ldr	r1, [r7, #0]
    aef2:	18b0      	adds	r0, r6, r2
    aef4:	4411      	add	r1, r2
    aef6:	f00e f987 	bl	19208 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    aefa:	4628      	mov	r0, r5
    aefc:	2200      	movs	r2, #0
    aefe:	4621      	mov	r1, r4
    af00:	f7ff ffbe 	bl	ae80 <smp_send.isra.0>
	return 0;
    af04:	2000      	movs	r0, #0
}
    af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    af08:	2008      	movs	r0, #8
    af0a:	e7fc      	b.n	af06 <sc_send_public_key+0x3a>
    af0c:	20025ac4 	.word	0x20025ac4

0000af10 <bt_smp_distribute_keys>:
{
    af10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    af14:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    af16:	6800      	ldr	r0, [r0, #0]
{
    af18:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    af1a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    af1e:	b9a3      	cbnz	r3, af4a <bt_smp_distribute_keys+0x3a>
    af20:	4a4d      	ldr	r2, [pc, #308]	; (b058 <bt_smp_distribute_keys+0x148>)
    af22:	4c4e      	ldr	r4, [pc, #312]	; (b05c <bt_smp_distribute_keys+0x14c>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    af24:	3088      	adds	r0, #136	; 0x88
    af26:	1aa4      	subs	r4, r4, r2
    af28:	f7f9 ff50 	bl	4dcc <bt_addr_le_str_real>
    af2c:	f7f7 f940 	bl	21b0 <log_strdup>
    af30:	08e4      	lsrs	r4, r4, #3
    af32:	01a4      	lsls	r4, r4, #6
    af34:	f044 0401 	orr.w	r4, r4, #1
    af38:	4601      	mov	r1, r0
    af3a:	4622      	mov	r2, r4
    af3c:	4848      	ldr	r0, [pc, #288]	; (b060 <bt_smp_distribute_keys+0x150>)
    af3e:	f00c ffd2 	bl	17ee6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    af42:	2008      	movs	r0, #8
}
    af44:	b009      	add	sp, #36	; 0x24
    af46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    af4a:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
    af4e:	2105      	movs	r1, #5
    af50:	4638      	mov	r0, r7
    af52:	f010 f876 	bl	1b042 <atomic_test_bit>
    af56:	b9b8      	cbnz	r0, af88 <bt_smp_distribute_keys+0x78>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    af58:	f894 01a0 	ldrb.w	r0, [r4, #416]	; 0x1a0
    af5c:	f010 0001 	ands.w	r0, r0, #1
    af60:	d0f0      	beq.n	af44 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    af62:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    af64:	211a      	movs	r1, #26
    af66:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    af68:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    af6c:	f7fc fa66 	bl	743c <bt_rand>
    af70:	4680      	mov	r8, r0
    af72:	b158      	cbz	r0, af8c <bt_smp_distribute_keys+0x7c>
    af74:	4939      	ldr	r1, [pc, #228]	; (b05c <bt_smp_distribute_keys+0x14c>)
    af76:	4b38      	ldr	r3, [pc, #224]	; (b058 <bt_smp_distribute_keys+0x148>)
			BT_ERR("Unable to get random bytes");
    af78:	483a      	ldr	r0, [pc, #232]	; (b064 <bt_smp_distribute_keys+0x154>)
    af7a:	1ac9      	subs	r1, r1, r3
    af7c:	08c9      	lsrs	r1, r1, #3
    af7e:	0189      	lsls	r1, r1, #6
    af80:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    af84:	f00c ffa2 	bl	17ecc <log_0>
	return 0;
    af88:	2000      	movs	r0, #0
    af8a:	e7db      	b.n	af44 <bt_smp_distribute_keys+0x34>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    af8c:	2106      	movs	r1, #6
    af8e:	4620      	mov	r0, r4
    af90:	f010 f882 	bl	1b098 <smp_create_pdu.isra.0>
		if (!buf) {
    af94:	4606      	mov	r6, r0
    af96:	b940      	cbnz	r0, afaa <bt_smp_distribute_keys+0x9a>
    af98:	4930      	ldr	r1, [pc, #192]	; (b05c <bt_smp_distribute_keys+0x14c>)
    af9a:	4b2f      	ldr	r3, [pc, #188]	; (b058 <bt_smp_distribute_keys+0x148>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    af9c:	4832      	ldr	r0, [pc, #200]	; (b068 <bt_smp_distribute_keys+0x158>)
    af9e:	1ac9      	subs	r1, r1, r3
    afa0:	08c9      	lsrs	r1, r1, #3
    afa2:	0189      	lsls	r1, r1, #6
    afa4:	f041 0101 	orr.w	r1, r1, #1
    afa8:	e7ec      	b.n	af84 <bt_smp_distribute_keys+0x74>
    afaa:	2110      	movs	r1, #16
    afac:	3008      	adds	r0, #8
    afae:	f010 fbee 	bl	1b78e <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    afb2:	7b2a      	ldrb	r2, [r5, #12]
    afb4:	a901      	add	r1, sp, #4
    afb6:	4681      	mov	r9, r0
    afb8:	f00e f926 	bl	19208 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    afbc:	7b28      	ldrb	r0, [r5, #12]
    afbe:	280f      	cmp	r0, #15
    afc0:	d805      	bhi.n	afce <bt_smp_distribute_keys+0xbe>
			(void)memset(info->ltk + keys->enc_size, 0,
    afc2:	f1c0 0210 	rsb	r2, r0, #16
    afc6:	4641      	mov	r1, r8
    afc8:	4448      	add	r0, r9
    afca:	f00e f948 	bl	1925e <memset>
		smp_send(smp, buf, NULL, NULL);
    afce:	4631      	mov	r1, r6
    afd0:	2200      	movs	r2, #0
    afd2:	4620      	mov	r0, r4
    afd4:	f7ff ff54 	bl	ae80 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    afd8:	2107      	movs	r1, #7
    afda:	4620      	mov	r0, r4
    afdc:	f010 f85c 	bl	1b098 <smp_create_pdu.isra.0>
		if (!buf) {
    afe0:	4606      	mov	r6, r0
    afe2:	b940      	cbnz	r0, aff6 <bt_smp_distribute_keys+0xe6>
    afe4:	491d      	ldr	r1, [pc, #116]	; (b05c <bt_smp_distribute_keys+0x14c>)
    afe6:	4b1c      	ldr	r3, [pc, #112]	; (b058 <bt_smp_distribute_keys+0x148>)
			BT_ERR("Unable to allocate Master Ident buffer");
    afe8:	4820      	ldr	r0, [pc, #128]	; (b06c <bt_smp_distribute_keys+0x15c>)
    afea:	1ac9      	subs	r1, r1, r3
    afec:	08c9      	lsrs	r1, r1, #3
    afee:	0189      	lsls	r1, r1, #6
    aff0:	f041 0101 	orr.w	r1, r1, #1
    aff4:	e7c6      	b.n	af84 <bt_smp_distribute_keys+0x74>
    aff6:	210a      	movs	r1, #10
    aff8:	3008      	adds	r0, #8
    affa:	f010 fbc8 	bl	1b78e <net_buf_simple_add>
    affe:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    b000:	2208      	movs	r2, #8
    b002:	a905      	add	r1, sp, #20
    b004:	3002      	adds	r0, #2
    b006:	f00e f8ff 	bl	19208 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    b00a:	2202      	movs	r2, #2
    b00c:	a907      	add	r1, sp, #28
    b00e:	4640      	mov	r0, r8
    b010:	f00e f8fa 	bl	19208 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    b014:	4631      	mov	r1, r6
    b016:	4620      	mov	r0, r4
    b018:	4a15      	ldr	r2, [pc, #84]	; (b070 <bt_smp_distribute_keys+0x160>)
    b01a:	f7ff ff31 	bl	ae80 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b01e:	210d      	movs	r1, #13
    b020:	4638      	mov	r0, r7
    b022:	f010 f80e 	bl	1b042 <atomic_test_bit>
    b026:	2800      	cmp	r0, #0
    b028:	d0ae      	beq.n	af88 <bt_smp_distribute_keys+0x78>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b02a:	4628      	mov	r0, r5
    b02c:	2101      	movs	r1, #1
    b02e:	f010 fb3f 	bl	1b6b0 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    b032:	a901      	add	r1, sp, #4
    b034:	2210      	movs	r2, #16
    b036:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    b03a:	f00e f8e5 	bl	19208 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    b03e:	a905      	add	r1, sp, #20
    b040:	2208      	movs	r2, #8
    b042:	f105 0040 	add.w	r0, r5, #64	; 0x40
    b046:	f00e f8df 	bl	19208 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    b04a:	2202      	movs	r2, #2
    b04c:	a907      	add	r1, sp, #28
    b04e:	f105 0048 	add.w	r0, r5, #72	; 0x48
    b052:	f00e f8d9 	bl	19208 <memcpy>
    b056:	e797      	b.n	af88 <bt_smp_distribute_keys+0x78>
    b058:	000232ec 	.word	0x000232ec
    b05c:	00023344 	.word	0x00023344
    b060:	00026575 	.word	0x00026575
    b064:	0002658a 	.word	0x0002658a
    b068:	000265a5 	.word	0x000265a5
    b06c:	000265cc 	.word	0x000265cc
    b070:	0001b277 	.word	0x0001b277

0000b074 <compute_and_send_master_dhcheck>:
	(void)memset(r, 0, sizeof(r));
    b074:	2210      	movs	r2, #16
{
    b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b07a:	4604      	mov	r4, r0
    b07c:	b0a2      	sub	sp, #136	; 0x88
	(void)memset(r, 0, sizeof(r));
    b07e:	2100      	movs	r1, #0
    b080:	eb0d 0002 	add.w	r0, sp, r2
    b084:	f00e f8eb 	bl	1925e <memset>
	switch (smp->method) {
    b088:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    b08c:	2905      	cmp	r1, #5
    b08e:	f200 8095 	bhi.w	b1bc <compute_and_send_master_dhcheck+0x148>
    b092:	e8df f001 	tbb	[pc, r1]
    b096:	0309      	.short	0x0309
    b098:	8a930903 	.word	0x8a930903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b09c:	2204      	movs	r2, #4
    b09e:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    b0a2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b0a4:	f00e f8b0 	bl	19208 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    b0a8:	4b5d      	ldr	r3, [pc, #372]	; (b220 <compute_and_send_master_dhcheck+0x1ac>)
		   &smp->chan.chan.conn->le.init_addr,
    b0aa:	6825      	ldr	r5, [r4, #0]
	uint8_t m[53] = { 0x00, /* counter */
    b0ac:	aa14      	add	r2, sp, #80	; 0x50
    b0ae:	f103 0730 	add.w	r7, r3, #48	; 0x30
    b0b2:	4616      	mov	r6, r2
    b0b4:	6818      	ldr	r0, [r3, #0]
    b0b6:	6859      	ldr	r1, [r3, #4]
    b0b8:	3308      	adds	r3, #8
    b0ba:	c603      	stmia	r6!, {r0, r1}
    b0bc:	42bb      	cmp	r3, r7
    b0be:	4632      	mov	r2, r6
    b0c0:	d1f7      	bne.n	b0b2 <compute_and_send_master_dhcheck+0x3e>
    b0c2:	6818      	ldr	r0, [r3, #0]
    b0c4:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
    b0c6:	2220      	movs	r2, #32
	uint8_t m[53] = { 0x00, /* counter */
    b0c8:	6030      	str	r0, [r6, #0]
    b0ca:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    b0cc:	f204 114f 	addw	r1, r4, #335	; 0x14f
    b0d0:	a80c      	add	r0, sp, #48	; 0x30
    b0d2:	f00f fef3 	bl	1aebc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b0d6:	2220      	movs	r2, #32
    b0d8:	4852      	ldr	r0, [pc, #328]	; (b224 <compute_and_send_master_dhcheck+0x1b0>)
    b0da:	ab08      	add	r3, sp, #32
    b0dc:	a90c      	add	r1, sp, #48	; 0x30
    b0de:	f00f fef9 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
    b0e2:	2800      	cmp	r0, #0
    b0e4:	f040 8093 	bne.w	b20e <compute_and_send_master_dhcheck+0x19a>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b0e8:	f104 07df 	add.w	r7, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    b0ec:	2210      	movs	r2, #16
    b0ee:	4639      	mov	r1, r7
    b0f0:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b0f4:	f104 08ef 	add.w	r8, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    b0f8:	f00f fee0 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    b0fc:	2210      	movs	r2, #16
    b0fe:	4641      	mov	r1, r8
    b100:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    b104:	f00f feda 	bl	1aebc <sys_memcpy_swap>
	m[37] = a1->type;
    b108:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b10c:	2206      	movs	r2, #6
    b10e:	f105 0190 	add.w	r1, r5, #144	; 0x90
    b112:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
    b116:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b11a:	f00f fecf 	bl	1aebc <sys_memcpy_swap>
	m[44] = a2->type;
    b11e:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b122:	2206      	movs	r2, #6
    b124:	f105 0197 	add.w	r1, r5, #151	; 0x97
    b128:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b12c:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    b130:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b134:	f00f fec2 	bl	1aebc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b138:	4633      	mov	r3, r6
    b13a:	2235      	movs	r2, #53	; 0x35
    b13c:	a914      	add	r1, sp, #80	; 0x50
    b13e:	a808      	add	r0, sp, #32
    b140:	f00f fec8 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
    b144:	2800      	cmp	r0, #0
    b146:	d162      	bne.n	b20e <compute_and_send_master_dhcheck+0x19a>
	sys_mem_swap(mackey, 16);
    b148:	4630      	mov	r0, r6
    b14a:	f00f fef9 	bl	1af40 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    b14e:	2301      	movs	r3, #1
		   smp->tk)) {
    b150:	f104 05ff 	add.w	r5, r4, #255	; 0xff
	m[0] = 0x01;
    b154:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b158:	2235      	movs	r2, #53	; 0x35
    b15a:	462b      	mov	r3, r5
    b15c:	a914      	add	r1, sp, #80	; 0x50
    b15e:	a808      	add	r0, sp, #32
    b160:	f00f feb8 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
    b164:	2800      	cmp	r0, #0
    b166:	d152      	bne.n	b20e <compute_and_send_master_dhcheck+0x19a>
	sys_mem_swap(ltk, 16);
    b168:	4628      	mov	r0, r5
    b16a:	f00f fee9 	bl	1af40 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
    b16e:	4622      	mov	r2, r4
    b170:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b174:	a914      	add	r1, sp, #80	; 0x50
    b176:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    b178:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    b17c:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b17e:	e9cd 2300 	strd	r2, r3, [sp]
    b182:	9102      	str	r1, [sp, #8]
    b184:	4642      	mov	r2, r8
    b186:	4639      	mov	r1, r7
    b188:	4630      	mov	r0, r6
    b18a:	ab04      	add	r3, sp, #16
    b18c:	f00f fee6 	bl	1af5c <smp_f6>
    b190:	4605      	mov	r5, r0
    b192:	b1f8      	cbz	r0, b1d4 <compute_and_send_master_dhcheck+0x160>
    b194:	4924      	ldr	r1, [pc, #144]	; (b228 <compute_and_send_master_dhcheck+0x1b4>)
    b196:	4b25      	ldr	r3, [pc, #148]	; (b22c <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Calculate local DHKey check failed");
    b198:	4825      	ldr	r0, [pc, #148]	; (b230 <compute_and_send_master_dhcheck+0x1bc>)
    b19a:	1ac9      	subs	r1, r1, r3
    b19c:	08c9      	lsrs	r1, r1, #3
    b19e:	0189      	lsls	r1, r1, #6
    b1a0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    b1a4:	f00c fe92 	bl	17ecc <log_0>
    b1a8:	e012      	b.n	b1d0 <compute_and_send_master_dhcheck+0x15c>
		if (smp->oobd_remote) {
    b1aa:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    b1ae:	2900      	cmp	r1, #0
    b1b0:	f43f af7a 	beq.w	b0a8 <compute_and_send_master_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b1b4:	2210      	movs	r2, #16
    b1b6:	eb0d 0002 	add.w	r0, sp, r2
    b1ba:	e773      	b.n	b0a4 <compute_and_send_master_dhcheck+0x30>
    b1bc:	4a1a      	ldr	r2, [pc, #104]	; (b228 <compute_and_send_master_dhcheck+0x1b4>)
    b1be:	4b1b      	ldr	r3, [pc, #108]	; (b22c <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b1c0:	481c      	ldr	r0, [pc, #112]	; (b234 <compute_and_send_master_dhcheck+0x1c0>)
    b1c2:	1ad2      	subs	r2, r2, r3
    b1c4:	08d2      	lsrs	r2, r2, #3
    b1c6:	0192      	lsls	r2, r2, #6
    b1c8:	f042 0201 	orr.w	r2, r2, #1
    b1cc:	f00c fe8b 	bl	17ee6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b1d0:	2008      	movs	r0, #8
    b1d2:	e019      	b.n	b208 <compute_and_send_master_dhcheck+0x194>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b1d4:	210d      	movs	r1, #13
    b1d6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b1da:	f00f ff4c 	bl	1b076 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    b1de:	210d      	movs	r1, #13
    b1e0:	4620      	mov	r0, r4
    b1e2:	f00f ff59 	bl	1b098 <smp_create_pdu.isra.0>
	if (!buf) {
    b1e6:	4606      	mov	r6, r0
    b1e8:	2800      	cmp	r0, #0
    b1ea:	d0f1      	beq.n	b1d0 <compute_and_send_master_dhcheck+0x15c>
    b1ec:	2110      	movs	r1, #16
    b1ee:	3008      	adds	r0, #8
    b1f0:	f010 facd 	bl	1b78e <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    b1f4:	2210      	movs	r2, #16
    b1f6:	a914      	add	r1, sp, #80	; 0x50
    b1f8:	f00e f806 	bl	19208 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    b1fc:	4620      	mov	r0, r4
    b1fe:	462a      	mov	r2, r5
    b200:	4631      	mov	r1, r6
    b202:	f7ff fe3d 	bl	ae80 <smp_send.isra.0>
	return 0;
    b206:	4628      	mov	r0, r5
}
    b208:	b022      	add	sp, #136	; 0x88
    b20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b20e:	4906      	ldr	r1, [pc, #24]	; (b228 <compute_and_send_master_dhcheck+0x1b4>)
    b210:	4b06      	ldr	r3, [pc, #24]	; (b22c <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Calculate LTK failed");
    b212:	4809      	ldr	r0, [pc, #36]	; (b238 <compute_and_send_master_dhcheck+0x1c4>)
    b214:	1ac9      	subs	r1, r1, r3
    b216:	08c9      	lsrs	r1, r1, #3
    b218:	0189      	lsls	r1, r1, #6
    b21a:	f041 0101 	orr.w	r1, r1, #1
    b21e:	e7c1      	b.n	b1a4 <compute_and_send_master_dhcheck+0x130>
    b220:	0002349c 	.word	0x0002349c
    b224:	000268a6 	.word	0x000268a6
    b228:	00023344 	.word	0x00023344
    b22c:	000232ec 	.word	0x000232ec
    b230:	0002660f 	.word	0x0002660f
    b234:	000265f3 	.word	0x000265f3
    b238:	00026632 	.word	0x00026632

0000b23c <smp_dhkey_check>:
{
    b23c:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b23e:	6803      	ldr	r3, [r0, #0]
{
    b240:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b242:	78dd      	ldrb	r5, [r3, #3]
{
    b244:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b246:	2d00      	cmp	r5, #0
    b248:	d174      	bne.n	b334 <smp_dhkey_check+0xf8>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    b24a:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
    b24c:	2210      	movs	r2, #16
    b24e:	4629      	mov	r1, r5
    b250:	a80c      	add	r0, sp, #48	; 0x30
    b252:	f00e f804 	bl	1925e <memset>
		switch (smp->method) {
    b256:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    b25a:	2905      	cmp	r1, #5
    b25c:	d854      	bhi.n	b308 <smp_dhkey_check+0xcc>
    b25e:	e8df f001 	tbb	[pc, r1]
    b262:	0309      	.short	0x0309
    b264:	4d530903 	.word	0x4d530903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b268:	2204      	movs	r2, #4
    b26a:	f504 71c8 	add.w	r1, r4, #400	; 0x190
				memcpy(r, smp->oobd_local->r, sizeof(r));
    b26e:	a80c      	add	r0, sp, #48	; 0x30
    b270:	f00d ffca 	bl	19208 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    b274:	4622      	mov	r2, r4
    b276:	f852 3bdf 	ldr.w	r3, [r2], #223
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b27a:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
    b27c:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
    b280:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b282:	9301      	str	r3, [sp, #4]
    b284:	f104 03c9 	add.w	r3, r4, #201	; 0xc9
    b288:	9102      	str	r1, [sp, #8]
    b28a:	9300      	str	r3, [sp, #0]
    b28c:	9603      	str	r6, [sp, #12]
    b28e:	ab0c      	add	r3, sp, #48	; 0x30
    b290:	f104 01ef 	add.w	r1, r4, #239	; 0xef
    b294:	f204 107f 	addw	r0, r4, #383	; 0x17f
    b298:	f00f fe60 	bl	1af5c <smp_f6>
    b29c:	2800      	cmp	r0, #0
    b29e:	d13d      	bne.n	b31c <smp_dhkey_check+0xe0>
		if (memcmp(e, req->e, 16)) {
    b2a0:	4630      	mov	r0, r6
    b2a2:	2210      	movs	r2, #16
    b2a4:	4639      	mov	r1, r7
    b2a6:	f00d ff9f 	bl	191e8 <memcmp>
    b2aa:	4606      	mov	r6, r0
    b2ac:	2800      	cmp	r0, #0
    b2ae:	d13f      	bne.n	b330 <smp_dhkey_check+0xf4>
	return MIN(req->max_key_size, rsp->max_key_size);
    b2b0:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    b2b4:	f894 70c5 	ldrb.w	r7, [r4, #197]	; 0xc5
		(void)memset(ediv, 0, sizeof(ediv));
    b2b8:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
    b2ba:	429f      	cmp	r7, r3
    b2bc:	bf28      	it	cs
    b2be:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
    b2c0:	2202      	movs	r2, #2
    b2c2:	a805      	add	r0, sp, #20
    b2c4:	f00d ffcb 	bl	1925e <memset>
		(void)memset(rand, 0, sizeof(rand));
    b2c8:	2208      	movs	r2, #8
    b2ca:	4631      	mov	r1, r6
    b2cc:	a806      	add	r0, sp, #24
    b2ce:	f00d ffc6 	bl	1925e <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    b2d2:	6820      	ldr	r0, [r4, #0]
    b2d4:	9700      	str	r7, [sp, #0]
    b2d6:	f104 03ff 	add.w	r3, r4, #255	; 0xff
    b2da:	aa05      	add	r2, sp, #20
    b2dc:	a906      	add	r1, sp, #24
    b2de:	f00e fc2e 	bl	19b3e <bt_conn_le_start_encryption>
    b2e2:	2800      	cmp	r0, #0
    b2e4:	da1c      	bge.n	b320 <smp_dhkey_check+0xe4>
    b2e6:	4b14      	ldr	r3, [pc, #80]	; (b338 <smp_dhkey_check+0xfc>)
    b2e8:	4914      	ldr	r1, [pc, #80]	; (b33c <smp_dhkey_check+0x100>)
			BT_ERR("Failed to start encryption");
    b2ea:	4815      	ldr	r0, [pc, #84]	; (b340 <smp_dhkey_check+0x104>)
    b2ec:	1ac9      	subs	r1, r1, r3
    b2ee:	08c9      	lsrs	r1, r1, #3
    b2f0:	0189      	lsls	r1, r1, #6
    b2f2:	f041 0101 	orr.w	r1, r1, #1
    b2f6:	f00c fde9 	bl	17ecc <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    b2fa:	e00f      	b.n	b31c <smp_dhkey_check+0xe0>
			if (smp->oobd_local) {
    b2fc:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    b300:	2900      	cmp	r1, #0
    b302:	d0b7      	beq.n	b274 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
    b304:	2210      	movs	r2, #16
    b306:	e7b2      	b.n	b26e <smp_dhkey_check+0x32>
    b308:	4a0c      	ldr	r2, [pc, #48]	; (b33c <smp_dhkey_check+0x100>)
    b30a:	4b0b      	ldr	r3, [pc, #44]	; (b338 <smp_dhkey_check+0xfc>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
    b30c:	480d      	ldr	r0, [pc, #52]	; (b344 <smp_dhkey_check+0x108>)
    b30e:	1ad2      	subs	r2, r2, r3
    b310:	08d2      	lsrs	r2, r2, #3
    b312:	0192      	lsls	r2, r2, #6
    b314:	f042 0201 	orr.w	r2, r2, #1
    b318:	f00c fde5 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b31c:	2508      	movs	r5, #8
    b31e:	e004      	b.n	b32a <smp_dhkey_check+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b320:	2101      	movs	r1, #1
    b322:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b326:	f00f fea6 	bl	1b076 <atomic_set_bit>
}
    b32a:	4628      	mov	r0, r5
    b32c:	b011      	add	sp, #68	; 0x44
    b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b330:	250b      	movs	r5, #11
    b332:	e7fa      	b.n	b32a <smp_dhkey_check+0xee>
	return 0;
    b334:	2500      	movs	r5, #0
    b336:	e7f8      	b.n	b32a <smp_dhkey_check+0xee>
    b338:	000232ec 	.word	0x000232ec
    b33c:	00023344 	.word	0x00023344
    b340:	00026647 	.word	0x00026647
    b344:	000265f3 	.word	0x000265f3

0000b348 <smp_send_pairing_req>:
{
    b348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b34c:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    b34e:	f7ff fd5d 	bl	ae0c <smp_chan_get>
	if (!smp) {
    b352:	4604      	mov	r4, r0
    b354:	2800      	cmp	r0, #0
    b356:	f000 80bc 	beq.w	b4d2 <smp_send_pairing_req+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b35a:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    b35e:	2104      	movs	r1, #4
    b360:	4630      	mov	r0, r6
    b362:	f00f fe6e 	bl	1b042 <atomic_test_bit>
    b366:	2800      	cmp	r0, #0
    b368:	f040 80b6 	bne.w	b4d8 <smp_send_pairing_req+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b36c:	2103      	movs	r1, #3
    b36e:	4630      	mov	r0, r6
    b370:	f00f fe67 	bl	1b042 <atomic_test_bit>
    b374:	b120      	cbz	r0, b380 <smp_send_pairing_req+0x38>
		return -EBUSY;
    b376:	f06f 050f 	mvn.w	r5, #15
}
    b37a:	4628      	mov	r0, r5
    b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b380:	2101      	movs	r1, #1
    b382:	4630      	mov	r0, r6
    b384:	f00f fe5d 	bl	1b042 <atomic_test_bit>
    b388:	2800      	cmp	r0, #0
    b38a:	d1f4      	bne.n	b376 <smp_send_pairing_req+0x2e>
	if (!sec_level_reachable(conn)) {
    b38c:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    b38e:	2b03      	cmp	r3, #3
    b390:	d016      	beq.n	b3c0 <smp_send_pairing_req+0x78>
    b392:	d805      	bhi.n	b3a0 <smp_send_pairing_req+0x58>
    b394:	3b01      	subs	r3, #1
    b396:	2b01      	cmp	r3, #1
    b398:	d920      	bls.n	b3dc <smp_send_pairing_req+0x94>
		return -EINVAL;
    b39a:	f06f 0515 	mvn.w	r5, #21
    b39e:	e7ec      	b.n	b37a <smp_send_pairing_req+0x32>
	switch (conn->required_sec_level) {
    b3a0:	2b04      	cmp	r3, #4
    b3a2:	d1fa      	bne.n	b39a <smp_send_pairing_req+0x52>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b3a4:	f7ff fd0c 	bl	adc0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b3a8:	2803      	cmp	r0, #3
    b3aa:	d104      	bne.n	b3b6 <smp_send_pairing_req+0x6e>
    b3ac:	4b4c      	ldr	r3, [pc, #304]	; (b4e0 <smp_send_pairing_req+0x198>)
    b3ae:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b3b0:	b11b      	cbz	r3, b3ba <smp_send_pairing_req+0x72>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b3b2:	68db      	ldr	r3, [r3, #12]
    b3b4:	b343      	cbz	r3, b408 <smp_send_pairing_req+0xc0>
    b3b6:	4b4b      	ldr	r3, [pc, #300]	; (b4e4 <smp_send_pairing_req+0x19c>)
    b3b8:	781b      	ldrb	r3, [r3, #0]
    b3ba:	f003 0301 	and.w	r3, r3, #1
    b3be:	e00b      	b.n	b3d8 <smp_send_pairing_req+0x90>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b3c0:	f7ff fcfe 	bl	adc0 <get_io_capa>
    b3c4:	2803      	cmp	r0, #3
    b3c6:	d11d      	bne.n	b404 <smp_send_pairing_req+0xbc>
		       (bt_auth && bt_auth->oob_data_request);
    b3c8:	4b45      	ldr	r3, [pc, #276]	; (b4e0 <smp_send_pairing_req+0x198>)
    b3ca:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	d0e4      	beq.n	b39a <smp_send_pairing_req+0x52>
		       (bt_auth && bt_auth->oob_data_request);
    b3d0:	68db      	ldr	r3, [r3, #12]
    b3d2:	3b00      	subs	r3, #0
    b3d4:	bf18      	it	ne
    b3d6:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d0de      	beq.n	b39a <smp_send_pairing_req+0x52>
	if (!conn->le.keys) {
    b3dc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b3e0:	b1a3      	cbz	r3, b40c <smp_send_pairing_req+0xc4>
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b3e2:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    b3e6:	22f0      	movs	r2, #240	; 0xf0
    b3e8:	2100      	movs	r1, #0
    b3ea:	4650      	mov	r0, sl
    b3ec:	f00d ff37 	bl	1925e <memset>
	if (bt_rand(smp->prnd, 16)) {
    b3f0:	2110      	movs	r1, #16
    b3f2:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    b3f6:	f7fc f821 	bl	743c <bt_rand>
    b3fa:	4605      	mov	r5, r0
    b3fc:	b190      	cbz	r0, b424 <smp_send_pairing_req+0xdc>
		return -ENOBUFS;
    b3fe:	f06f 0536 	mvn.w	r5, #54	; 0x36
    b402:	e7ba      	b.n	b37a <smp_send_pairing_req+0x32>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b404:	2301      	movs	r3, #1
    b406:	e7e7      	b.n	b3d8 <smp_send_pairing_req+0x90>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b408:	2300      	movs	r3, #0
    b40a:	e7d6      	b.n	b3ba <smp_send_pairing_req+0x72>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b40c:	7a28      	ldrb	r0, [r5, #8]
    b40e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b412:	f001 f91d 	bl	c650 <bt_keys_get_addr>
    b416:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    b41a:	2800      	cmp	r0, #0
    b41c:	d1e1      	bne.n	b3e2 <smp_send_pairing_req+0x9a>
			return -ENOMEM;
    b41e:	f06f 050b 	mvn.w	r5, #11
    b422:	e7aa      	b.n	b37a <smp_send_pairing_req+0x32>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b424:	2105      	movs	r1, #5
    b426:	4650      	mov	r0, sl
    b428:	f00f fe25 	bl	1b076 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    b42c:	f7fb ff36 	bl	729c <bt_pub_key_get>
    b430:	4b2d      	ldr	r3, [pc, #180]	; (b4e8 <smp_send_pairing_req+0x1a0>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    b432:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    b434:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    b436:	4620      	mov	r0, r4
    b438:	f00f fe2e 	bl	1b098 <smp_create_pdu.isra.0>
	if (!req_buf) {
    b43c:	4681      	mov	r9, r0
    b43e:	2800      	cmp	r0, #0
    b440:	d0dd      	beq.n	b3fe <smp_send_pairing_req+0xb6>
    b442:	2106      	movs	r1, #6
    b444:	3008      	adds	r0, #8
    b446:	f010 f9a2 	bl	1b78e <net_buf_simple_add>
	if (sc_supported) {
    b44a:	4b26      	ldr	r3, [pc, #152]	; (b4e4 <smp_send_pairing_req+0x19c>)
    b44c:	4607      	mov	r7, r0
    b44e:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    b450:	2b00      	cmp	r3, #0
    b452:	bf14      	ite	ne
    b454:	f04f 0809 	movne.w	r8, #9
    b458:	f04f 0801 	moveq.w	r8, #1
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b45c:	f7ff fcb0 	bl	adc0 <get_io_capa>
	if (bondable) {
    b460:	4b22      	ldr	r3, [pc, #136]	; (b4ec <smp_send_pairing_req+0x1a4>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b462:	2803      	cmp	r0, #3
	if (bondable) {
    b464:	781b      	ldrb	r3, [r3, #0]
		auth |= BT_SMP_AUTH_MITM;
    b466:	bf18      	it	ne
    b468:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    b46c:	b373      	cbz	r3, b4cc <smp_send_pairing_req+0x184>
		auth |= BT_SMP_AUTH_BONDING;
    b46e:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    b472:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    b476:	f7ff fca3 	bl	adc0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b47a:	4b1d      	ldr	r3, [pc, #116]	; (b4f0 <smp_send_pairing_req+0x1a8>)
	req->resp_key_dist = RECV_KEYS;
    b47c:	f04f 0803 	mov.w	r8, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b480:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
    b482:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b486:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b488:	2310      	movs	r3, #16
    b48a:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
    b48c:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
    b48e:	7038      	strb	r0, [r7, #0]
	req->init_key_dist = SEND_KEYS;
    b490:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    b492:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    b496:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b498:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	smp->local_dist = SEND_KEYS;
    b49c:	f8a4 21a0 	strh.w	r2, [r4, #416]	; 0x1a0
	memcpy(smp->preq + 1, req, sizeof(*req));
    b4a0:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    b4a4:	2206      	movs	r2, #6
    b4a6:	f00d feaf 	bl	19208 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    b4aa:	2200      	movs	r2, #0
    b4ac:	4649      	mov	r1, r9
    b4ae:	4620      	mov	r0, r4
    b4b0:	f7ff fce6 	bl	ae80 <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    b4b4:	4650      	mov	r0, sl
    b4b6:	2102      	movs	r1, #2
    b4b8:	f00f fddd 	bl	1b076 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    b4bc:	210b      	movs	r1, #11
    b4be:	f00f fdda 	bl	1b076 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    b4c2:	4641      	mov	r1, r8
    b4c4:	4630      	mov	r0, r6
    b4c6:	f00f fdd6 	bl	1b076 <atomic_set_bit>
	return 0;
    b4ca:	e756      	b.n	b37a <smp_send_pairing_req+0x32>
		auth &= ~BT_SMP_AUTH_BONDING;
    b4cc:	f008 080c 	and.w	r8, r8, #12
    b4d0:	e7cf      	b.n	b472 <smp_send_pairing_req+0x12a>
		return -ENOTCONN;
    b4d2:	f06f 0538 	mvn.w	r5, #56	; 0x38
    b4d6:	e750      	b.n	b37a <smp_send_pairing_req+0x32>
		return -EIO;
    b4d8:	f06f 0504 	mvn.w	r5, #4
    b4dc:	e74d      	b.n	b37a <smp_send_pairing_req+0x32>
    b4de:	bf00      	nop
    b4e0:	20025a10 	.word	0x20025a10
    b4e4:	2002a05a 	.word	0x2002a05a
    b4e8:	20025ac4 	.word	0x20025ac4
    b4ec:	200004d9 	.word	0x200004d9
    b4f0:	2002a059 	.word	0x2002a059

0000b4f4 <smp_security_request>:
{
    b4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b4f6:	4606      	mov	r6, r0
    b4f8:	f856 4bbc 	ldr.w	r4, [r6], #188
	struct bt_smp_security_request *req = (void *)buf->data;
    b4fc:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b4fe:	4630      	mov	r0, r6
    b500:	2103      	movs	r1, #3
    b502:	f00f fd9e 	bl	1b042 <atomic_test_bit>
    b506:	b110      	cbz	r0, b50e <smp_security_request+0x1a>
	return 0;
    b508:	2000      	movs	r0, #0
}
    b50a:	b003      	add	sp, #12
    b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b50e:	2101      	movs	r1, #1
    b510:	4630      	mov	r0, r6
    b512:	f00f fd96 	bl	1b042 <atomic_test_bit>
    b516:	2800      	cmp	r0, #0
    b518:	d1f6      	bne.n	b508 <smp_security_request+0x14>
	if (sc_supported) {
    b51a:	781d      	ldrb	r5, [r3, #0]
    b51c:	4b37      	ldr	r3, [pc, #220]	; (b5fc <smp_security_request+0x108>)
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	b17b      	cbz	r3, b542 <smp_security_request+0x4e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    b522:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    b526:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    b52a:	b16b      	cbz	r3, b548 <smp_security_request+0x54>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    b52c:	89db      	ldrh	r3, [r3, #14]
    b52e:	f003 0324 	and.w	r3, r3, #36	; 0x24
    b532:	b9d3      	cbnz	r3, b56a <smp_security_request+0x76>
	if (smp_send_pairing_req(conn) < 0) {
    b534:	4620      	mov	r0, r4
    b536:	f7ff ff07 	bl	b348 <smp_send_pairing_req>
    b53a:	2800      	cmp	r0, #0
    b53c:	db57      	blt.n	b5ee <smp_security_request+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b53e:	210f      	movs	r1, #15
    b540:	e058      	b.n	b5f4 <smp_security_request+0x100>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    b542:	f005 0507 	and.w	r5, r5, #7
    b546:	e7ee      	b.n	b526 <smp_security_request+0x32>
					     &conn->le.dst);
    b548:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    b54c:	463a      	mov	r2, r7
    b54e:	2020      	movs	r0, #32
    b550:	7a21      	ldrb	r1, [r4, #8]
    b552:	f001 f8b3 	bl	c6bc <bt_keys_find>
    b556:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    b55a:	b930      	cbnz	r0, b56a <smp_security_request+0x76>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    b55c:	463a      	mov	r2, r7
    b55e:	2004      	movs	r0, #4
    b560:	7a21      	ldrb	r1, [r4, #8]
    b562:	f001 f8ab 	bl	c6bc <bt_keys_find>
    b566:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    b56a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    b56e:	2900      	cmp	r1, #0
    b570:	d0e0      	beq.n	b534 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_MITM) &&
    b572:	076f      	lsls	r7, r5, #29
    b574:	d51a      	bpl.n	b5ac <smp_security_request+0xb8>
    b576:	7b4b      	ldrb	r3, [r1, #13]
    b578:	07d8      	lsls	r0, r3, #31
    b57a:	d417      	bmi.n	b5ac <smp_security_request+0xb8>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b57c:	f7ff fc20 	bl	adc0 <get_io_capa>
    b580:	4a1f      	ldr	r2, [pc, #124]	; (b600 <smp_security_request+0x10c>)
    b582:	4b20      	ldr	r3, [pc, #128]	; (b604 <smp_security_request+0x110>)
    b584:	2803      	cmp	r0, #3
    b586:	eba2 0203 	sub.w	r2, r2, r3
    b58a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
    b58e:	ea4f 1282 	mov.w	r2, r2, lsl #6
    b592:	d004      	beq.n	b59e <smp_security_request+0xaa>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b594:	4629      	mov	r1, r5
    b596:	481c      	ldr	r0, [pc, #112]	; (b608 <smp_security_request+0x114>)
    b598:	f042 0203 	orr.w	r2, r2, #3
    b59c:	e003      	b.n	b5a6 <smp_security_request+0xb2>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    b59e:	4629      	mov	r1, r5
    b5a0:	481a      	ldr	r0, [pc, #104]	; (b60c <smp_security_request+0x118>)
    b5a2:	f042 0202 	orr.w	r2, r2, #2
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b5a6:	f00c fc9e 	bl	17ee6 <log_1>
		goto pair;
    b5aa:	e7c3      	b.n	b534 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_SC) &&
    b5ac:	072a      	lsls	r2, r5, #28
    b5ae:	d508      	bpl.n	b5c2 <smp_security_request+0xce>
    b5b0:	89cb      	ldrh	r3, [r1, #14]
    b5b2:	069b      	lsls	r3, r3, #26
    b5b4:	d405      	bmi.n	b5c2 <smp_security_request+0xce>
    b5b6:	4a12      	ldr	r2, [pc, #72]	; (b600 <smp_security_request+0x10c>)
    b5b8:	4b12      	ldr	r3, [pc, #72]	; (b604 <smp_security_request+0x110>)
    b5ba:	1ad2      	subs	r2, r2, r3
    b5bc:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b5be:	0192      	lsls	r2, r2, #6
    b5c0:	e7e8      	b.n	b594 <smp_security_request+0xa0>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    b5c2:	7b0b      	ldrb	r3, [r1, #12]
    b5c4:	f101 0218 	add.w	r2, r1, #24
    b5c8:	9300      	str	r3, [sp, #0]
    b5ca:	4620      	mov	r0, r4
    b5cc:	f101 031a 	add.w	r3, r1, #26
    b5d0:	3110      	adds	r1, #16
    b5d2:	f00e fab4 	bl	19b3e <bt_conn_le_start_encryption>
    b5d6:	2800      	cmp	r0, #0
    b5d8:	da0b      	bge.n	b5f2 <smp_security_request+0xfe>
    b5da:	4909      	ldr	r1, [pc, #36]	; (b600 <smp_security_request+0x10c>)
    b5dc:	4b09      	ldr	r3, [pc, #36]	; (b604 <smp_security_request+0x110>)
		BT_ERR("Failed to start encryption");
    b5de:	480c      	ldr	r0, [pc, #48]	; (b610 <smp_security_request+0x11c>)
    b5e0:	1ac9      	subs	r1, r1, r3
    b5e2:	08c9      	lsrs	r1, r1, #3
    b5e4:	0189      	lsls	r1, r1, #6
    b5e6:	f041 0101 	orr.w	r1, r1, #1
    b5ea:	f00c fc6f 	bl	17ecc <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b5ee:	2008      	movs	r0, #8
    b5f0:	e78b      	b.n	b50a <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b5f2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b5f4:	4630      	mov	r0, r6
    b5f6:	f00f fd3e 	bl	1b076 <atomic_set_bit>
    b5fa:	e785      	b.n	b508 <smp_security_request+0x14>
    b5fc:	2002a05a 	.word	0x2002a05a
    b600:	00023344 	.word	0x00023344
    b604:	000232ec 	.word	0x000232ec
    b608:	00026662 	.word	0x00026662
    b60c:	00026689 	.word	0x00026689
    b610:	00026647 	.word	0x00026647

0000b614 <smp_ident_info>:
{
    b614:	b570      	push	{r4, r5, r6, lr}
    b616:	460b      	mov	r3, r1
    b618:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b61a:	210d      	movs	r1, #13
    b61c:	30bc      	adds	r0, #188	; 0xbc
    b61e:	f00f fd10 	bl	1b042 <atomic_test_bit>
    b622:	b308      	cbz	r0, b668 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    b624:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b626:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    b628:	2002      	movs	r0, #2
    b62a:	f103 0588 	add.w	r5, r3, #136	; 0x88
    b62e:	462a      	mov	r2, r5
    b630:	7a19      	ldrb	r1, [r3, #8]
    b632:	f010 f82d 	bl	1b690 <bt_keys_get_type>
		if (!keys) {
    b636:	b990      	cbnz	r0, b65e <smp_ident_info+0x4a>
    b638:	4a0f      	ldr	r2, [pc, #60]	; (b678 <smp_ident_info+0x64>)
    b63a:	4c10      	ldr	r4, [pc, #64]	; (b67c <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    b63c:	4628      	mov	r0, r5
    b63e:	1aa4      	subs	r4, r4, r2
    b640:	f7f9 fbc4 	bl	4dcc <bt_addr_le_str_real>
    b644:	f7f6 fdb4 	bl	21b0 <log_strdup>
    b648:	08e4      	lsrs	r4, r4, #3
    b64a:	01a4      	lsls	r4, r4, #6
    b64c:	f044 0401 	orr.w	r4, r4, #1
    b650:	4601      	mov	r1, r0
    b652:	4622      	mov	r2, r4
    b654:	480a      	ldr	r0, [pc, #40]	; (b680 <smp_ident_info+0x6c>)
    b656:	f00c fc46 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b65a:	2008      	movs	r0, #8
}
    b65c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    b65e:	2210      	movs	r2, #16
    b660:	4631      	mov	r1, r6
    b662:	302a      	adds	r0, #42	; 0x2a
    b664:	f00d fdd0 	bl	19208 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    b668:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b66c:	2109      	movs	r1, #9
    b66e:	f00f fd02 	bl	1b076 <atomic_set_bit>
	return 0;
    b672:	2000      	movs	r0, #0
    b674:	e7f2      	b.n	b65c <smp_ident_info+0x48>
    b676:	bf00      	nop
    b678:	000232ec 	.word	0x000232ec
    b67c:	00023344 	.word	0x00023344
    b680:	000266b8 	.word	0x000266b8

0000b684 <smp_encrypt_info>:
{
    b684:	b570      	push	{r4, r5, r6, lr}
    b686:	460b      	mov	r3, r1
    b688:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b68a:	210d      	movs	r1, #13
    b68c:	30bc      	adds	r0, #188	; 0xbc
    b68e:	f00f fcd8 	bl	1b042 <atomic_test_bit>
    b692:	b308      	cbz	r0, b6d8 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    b694:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b696:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    b698:	2004      	movs	r0, #4
    b69a:	f103 0588 	add.w	r5, r3, #136	; 0x88
    b69e:	462a      	mov	r2, r5
    b6a0:	7a19      	ldrb	r1, [r3, #8]
    b6a2:	f00f fff5 	bl	1b690 <bt_keys_get_type>
		if (!keys) {
    b6a6:	b990      	cbnz	r0, b6ce <smp_encrypt_info+0x4a>
    b6a8:	4a0f      	ldr	r2, [pc, #60]	; (b6e8 <smp_encrypt_info+0x64>)
    b6aa:	4c10      	ldr	r4, [pc, #64]	; (b6ec <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    b6ac:	4628      	mov	r0, r5
    b6ae:	1aa4      	subs	r4, r4, r2
    b6b0:	f7f9 fb8c 	bl	4dcc <bt_addr_le_str_real>
    b6b4:	f7f6 fd7c 	bl	21b0 <log_strdup>
    b6b8:	08e4      	lsrs	r4, r4, #3
    b6ba:	01a4      	lsls	r4, r4, #6
    b6bc:	f044 0401 	orr.w	r4, r4, #1
    b6c0:	4601      	mov	r1, r0
    b6c2:	4622      	mov	r2, r4
    b6c4:	480a      	ldr	r0, [pc, #40]	; (b6f0 <smp_encrypt_info+0x6c>)
    b6c6:	f00c fc0e 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b6ca:	2008      	movs	r0, #8
}
    b6cc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    b6ce:	2210      	movs	r2, #16
    b6d0:	4631      	mov	r1, r6
    b6d2:	301a      	adds	r0, #26
    b6d4:	f00d fd98 	bl	19208 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    b6d8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b6dc:	2107      	movs	r1, #7
    b6de:	f00f fcca 	bl	1b076 <atomic_set_bit>
	return 0;
    b6e2:	2000      	movs	r0, #0
    b6e4:	e7f2      	b.n	b6cc <smp_encrypt_info+0x48>
    b6e6:	bf00      	nop
    b6e8:	000232ec 	.word	0x000232ec
    b6ec:	00023344 	.word	0x00023344
    b6f0:	000266b8 	.word	0x000266b8

0000b6f4 <smp_send_pairing_confirm>:
{
    b6f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    b6f6:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
{
    b6fa:	4605      	mov	r5, r0
	switch (smp->method) {
    b6fc:	2c02      	cmp	r4, #2
    b6fe:	d824      	bhi.n	b74a <smp_send_pairing_confirm+0x56>
    b700:	b14c      	cbz	r4, b716 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b702:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    b706:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    b70a:	40dc      	lsrs	r4, r3
    b70c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    b710:	f064 047f 	orn	r4, r4, #127	; 0x7f
    b714:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b716:	2103      	movs	r1, #3
    b718:	4628      	mov	r0, r5
    b71a:	f00f fcbd 	bl	1b098 <smp_create_pdu.isra.0>
	if (!buf) {
    b71e:	4606      	mov	r6, r0
    b720:	b300      	cbz	r0, b764 <smp_send_pairing_confirm+0x70>
    b722:	2110      	movs	r1, #16
    b724:	3008      	adds	r0, #8
    b726:	f010 f832 	bl	1b78e <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b72a:	9000      	str	r0, [sp, #0]
    b72c:	4816      	ldr	r0, [pc, #88]	; (b788 <smp_send_pairing_confirm+0x94>)
    b72e:	4623      	mov	r3, r4
    b730:	6800      	ldr	r0, [r0, #0]
    b732:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    b736:	f205 110f 	addw	r1, r5, #271	; 0x10f
    b73a:	f00f fc5b 	bl	1aff4 <smp_f4>
    b73e:	4604      	mov	r4, r0
    b740:	b1a0      	cbz	r0, b76c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    b742:	4630      	mov	r0, r6
    b744:	f001 f8d6 	bl	c8f4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b748:	e00c      	b.n	b764 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    b74a:	2c03      	cmp	r4, #3
    b74c:	d00c      	beq.n	b768 <smp_send_pairing_confirm+0x74>
    b74e:	4a0f      	ldr	r2, [pc, #60]	; (b78c <smp_send_pairing_confirm+0x98>)
    b750:	4b0f      	ldr	r3, [pc, #60]	; (b790 <smp_send_pairing_confirm+0x9c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b752:	4621      	mov	r1, r4
    b754:	1ad2      	subs	r2, r2, r3
    b756:	08d2      	lsrs	r2, r2, #3
    b758:	0192      	lsls	r2, r2, #6
    b75a:	480e      	ldr	r0, [pc, #56]	; (b794 <smp_send_pairing_confirm+0xa0>)
    b75c:	f042 0201 	orr.w	r2, r2, #1
    b760:	f00c fbc1 	bl	17ee6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b764:	2008      	movs	r0, #8
    b766:	e00c      	b.n	b782 <smp_send_pairing_confirm+0x8e>
	switch (smp->method) {
    b768:	2400      	movs	r4, #0
    b76a:	e7d4      	b.n	b716 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    b76c:	4602      	mov	r2, r0
    b76e:	4631      	mov	r1, r6
    b770:	4628      	mov	r0, r5
    b772:	f7ff fb85 	bl	ae80 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b776:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    b77a:	4621      	mov	r1, r4
    b77c:	f00f fce6 	bl	1b14c <atomic_clear_bit>
	return 0;
    b780:	4620      	mov	r0, r4
}
    b782:	b002      	add	sp, #8
    b784:	bd70      	pop	{r4, r5, r6, pc}
    b786:	bf00      	nop
    b788:	20025ac4 	.word	0x20025ac4
    b78c:	00023344 	.word	0x00023344
    b790:	000232ec 	.word	0x000232ec
    b794:	000265f3 	.word	0x000265f3

0000b798 <smp_dhkey_generate>:
{
    b798:	b538      	push	{r3, r4, r5, lr}
    b79a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b79c:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
    b7a0:	2108      	movs	r1, #8
    b7a2:	4628      	mov	r0, r5
    b7a4:	f00f fc67 	bl	1b076 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    b7a8:	490a      	ldr	r1, [pc, #40]	; (b7d4 <smp_dhkey_generate+0x3c>)
    b7aa:	f204 100f 	addw	r0, r4, #271	; 0x10f
    b7ae:	f7fb fd83 	bl	72b8 <bt_dh_key_gen>
	if (err) {
    b7b2:	b170      	cbz	r0, b7d2 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b7b4:	2108      	movs	r1, #8
    b7b6:	4628      	mov	r0, r5
    b7b8:	f00f fcc8 	bl	1b14c <atomic_clear_bit>
    b7bc:	4b06      	ldr	r3, [pc, #24]	; (b7d8 <smp_dhkey_generate+0x40>)
    b7be:	4907      	ldr	r1, [pc, #28]	; (b7dc <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    b7c0:	4807      	ldr	r0, [pc, #28]	; (b7e0 <smp_dhkey_generate+0x48>)
    b7c2:	1ac9      	subs	r1, r1, r3
    b7c4:	08c9      	lsrs	r1, r1, #3
    b7c6:	0189      	lsls	r1, r1, #6
    b7c8:	f041 0101 	orr.w	r1, r1, #1
    b7cc:	f00c fb7e 	bl	17ecc <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b7d0:	2008      	movs	r0, #8
}
    b7d2:	bd38      	pop	{r3, r4, r5, pc}
    b7d4:	0001b1eb 	.word	0x0001b1eb
    b7d8:	000232ec 	.word	0x000232ec
    b7dc:	00023344 	.word	0x00023344
    b7e0:	000266d2 	.word	0x000266d2

0000b7e4 <smp_public_key>:
{
    b7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    b7e6:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b7e8:	f200 160f 	addw	r6, r0, #271	; 0x10f
{
    b7ec:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    b7ee:	2220      	movs	r2, #32
    b7f0:	4629      	mov	r1, r5
    b7f2:	4630      	mov	r0, r6
    b7f4:	f00d fd08 	bl	19208 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b7f8:	2220      	movs	r2, #32
    b7fa:	f204 102f 	addw	r0, r4, #303	; 0x12f
    b7fe:	18a9      	adds	r1, r5, r2
    b800:	f00d fd02 	bl	19208 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b804:	2240      	movs	r2, #64	; 0x40
    b806:	4630      	mov	r0, r6
    b808:	4974      	ldr	r1, [pc, #464]	; (b9dc <smp_public_key+0x1f8>)
    b80a:	f00d fced 	bl	191e8 <memcmp>
    b80e:	b1f8      	cbz	r0, b850 <smp_public_key+0x6c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b810:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b812:	78db      	ldrb	r3, [r3, #3]
    b814:	2b00      	cmp	r3, #0
    b816:	d143      	bne.n	b8a0 <smp_public_key+0xbc>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b818:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    b81c:	210e      	movs	r1, #14
    b81e:	4628      	mov	r0, r5
    b820:	f00f fc0f 	bl	1b042 <atomic_test_bit>
    b824:	2800      	cmp	r0, #0
    b826:	d13e      	bne.n	b8a6 <smp_public_key+0xc2>
		    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    b828:	4b6d      	ldr	r3, [pc, #436]	; (b9e0 <smp_public_key+0x1fc>)
    b82a:	2240      	movs	r2, #64	; 0x40
    b82c:	4630      	mov	r0, r6
    b82e:	6819      	ldr	r1, [r3, #0]
    b830:	f00d fcda 	bl	191e8 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b834:	2800      	cmp	r0, #0
    b836:	d136      	bne.n	b8a6 <smp_public_key+0xc2>
    b838:	496a      	ldr	r1, [pc, #424]	; (b9e4 <smp_public_key+0x200>)
    b83a:	4b6b      	ldr	r3, [pc, #428]	; (b9e8 <smp_public_key+0x204>)
			BT_WARN("Remote is using identical public key");
    b83c:	486b      	ldr	r0, [pc, #428]	; (b9ec <smp_public_key+0x208>)
    b83e:	1ac9      	subs	r1, r1, r3
    b840:	08c9      	lsrs	r1, r1, #3
    b842:	0189      	lsls	r1, r1, #6
    b844:	f041 0102 	orr.w	r1, r1, #2
    b848:	f00c fb40 	bl	17ecc <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    b84c:	2008      	movs	r0, #8
    b84e:	e028      	b.n	b8a2 <smp_public_key+0xbe>
    b850:	4b65      	ldr	r3, [pc, #404]	; (b9e8 <smp_public_key+0x204>)
    b852:	4964      	ldr	r1, [pc, #400]	; (b9e4 <smp_public_key+0x200>)
		BT_INFO("Remote is using Debug Public key");
    b854:	4866      	ldr	r0, [pc, #408]	; (b9f0 <smp_public_key+0x20c>)
    b856:	1ac9      	subs	r1, r1, r3
    b858:	08c9      	lsrs	r1, r1, #3
    b85a:	0189      	lsls	r1, r1, #6
    b85c:	f041 0103 	orr.w	r1, r1, #3
    b860:	f00c fb34 	bl	17ecc <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b864:	210e      	movs	r1, #14
    b866:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b86a:	f00f fc04 	bl	1b076 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    b86e:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    b870:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b874:	b933      	cbnz	r3, b884 <smp_public_key+0xa0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b876:	7a28      	ldrb	r0, [r5, #8]
    b878:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b87c:	f000 fee8 	bl	c650 <bt_keys_get_addr>
    b880:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    b884:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b888:	2b00      	cmp	r3, #0
    b88a:	d0c1      	beq.n	b810 <smp_public_key+0x2c>
    b88c:	89da      	ldrh	r2, [r3, #14]
    b88e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b892:	2a00      	cmp	r2, #0
    b894:	d0bc      	beq.n	b810 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    b896:	7b5b      	ldrb	r3, [r3, #13]
    b898:	0799      	lsls	r1, r3, #30
    b89a:	d5b9      	bpl.n	b810 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    b89c:	2003      	movs	r0, #3
    b89e:	e000      	b.n	b8a2 <smp_public_key+0xbe>
	return 0;
    b8a0:	2000      	movs	r0, #0
}
    b8a2:	b002      	add	sp, #8
    b8a4:	bd70      	pop	{r4, r5, r6, pc}
		switch (smp->method) {
    b8a6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    b8aa:	2905      	cmp	r1, #5
    b8ac:	f200 8084 	bhi.w	b9b8 <smp_public_key+0x1d4>
    b8b0:	e8df f001 	tbb	[pc, r1]
    b8b4:	03094403 	.word	0x03094403
    b8b8:	5282      	.short	0x5282
			atomic_set_bit(&smp->allowed_cmds,
    b8ba:	2103      	movs	r1, #3
    b8bc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
			atomic_set_bit(&smp->allowed_cmds,
    b8c0:	f00f fbd9 	bl	1b076 <atomic_set_bit>
			break;
    b8c4:	e02d      	b.n	b922 <smp_public_key+0x13e>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    b8c6:	2104      	movs	r1, #4
    b8c8:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    b8cc:	f7fb fdb6 	bl	743c <bt_rand>
    b8d0:	2800      	cmp	r0, #0
    b8d2:	d1bb      	bne.n	b84c <smp_public_key+0x68>
		smp->passkey %= 1000000;
    b8d4:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b8d8:	4a46      	ldr	r2, [pc, #280]	; (b9f4 <smp_public_key+0x210>)
	if (bt_auth && bt_auth->passkey_display) {
    b8da:	4e47      	ldr	r6, [pc, #284]	; (b9f8 <smp_public_key+0x214>)
		smp->passkey %= 1000000;
    b8dc:	fbb1 f3f2 	udiv	r3, r1, r2
    b8e0:	fb02 1313 	mls	r3, r2, r3, r1
    b8e4:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    b8e8:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    b8ea:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    b8ee:	b15b      	cbz	r3, b908 <smp_public_key+0x124>
    b8f0:	681b      	ldr	r3, [r3, #0]
    b8f2:	b14b      	cbz	r3, b908 <smp_public_key+0x124>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    b8f4:	210b      	movs	r1, #11
    b8f6:	4628      	mov	r0, r5
    b8f8:	f00f fbbd 	bl	1b076 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    b8fc:	6833      	ldr	r3, [r6, #0]
    b8fe:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b902:	681b      	ldr	r3, [r3, #0]
    b904:	6820      	ldr	r0, [r4, #0]
    b906:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    b908:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b90c:	2103      	movs	r1, #3
    b90e:	f00f fbb2 	bl	1b076 <atomic_set_bit>
			atomic_set_bit(&smp->allowed_cmds,
    b912:	210e      	movs	r1, #14
    b914:	f00f fbaf 	bl	1b076 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    b918:	4620      	mov	r0, r4
    b91a:	f7ff feeb 	bl	b6f4 <smp_send_pairing_confirm>
			if (err) {
    b91e:	2800      	cmp	r0, #0
    b920:	d1bf      	bne.n	b8a2 <smp_public_key+0xbe>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b922:	4628      	mov	r0, r5
    b924:	2107      	movs	r1, #7
    b926:	f00f fba6 	bl	1b076 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    b92a:	2008      	movs	r0, #8
    b92c:	f7ff fac0 	bl	aeb0 <smp_find>
    b930:	2800      	cmp	r0, #0
    b932:	d1b5      	bne.n	b8a0 <smp_public_key+0xbc>
		return smp_dhkey_generate(smp);
    b934:	4620      	mov	r0, r4
    b936:	f7ff ff2f 	bl	b798 <smp_dhkey_generate>
    b93a:	e7b2      	b.n	b8a2 <smp_public_key+0xbe>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b93c:	4626      	mov	r6, r4
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b93e:	210a      	movs	r1, #10
    b940:	4628      	mov	r0, r5
    b942:	f00f fb98 	bl	1b076 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b946:	4b2c      	ldr	r3, [pc, #176]	; (b9f8 <smp_public_key+0x214>)
    b948:	f856 0bb8 	ldr.w	r0, [r6], #184
    b94c:	681b      	ldr	r3, [r3, #0]
    b94e:	685b      	ldr	r3, [r3, #4]
    b950:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    b952:	210e      	movs	r1, #14
    b954:	4630      	mov	r0, r6
    b956:	e7b3      	b.n	b8c0 <smp_public_key+0xdc>
			if (bt_rand(smp->prnd, 16)) {
    b958:	2110      	movs	r1, #16
    b95a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    b95e:	f7fb fd6d 	bl	743c <bt_rand>
    b962:	2800      	cmp	r0, #0
    b964:	f47f af72 	bne.w	b84c <smp_public_key+0x68>
			if (bt_auth && bt_auth->oob_data_request) {
    b968:	4e23      	ldr	r6, [pc, #140]	; (b9f8 <smp_public_key+0x214>)
    b96a:	6833      	ldr	r3, [r6, #0]
    b96c:	b37b      	cbz	r3, b9ce <smp_public_key+0x1ea>
    b96e:	68db      	ldr	r3, [r3, #12]
    b970:	b36b      	cbz	r3, b9ce <smp_public_key+0x1ea>
				struct bt_conn_oob_info info = {
    b972:	4b22      	ldr	r3, [pc, #136]	; (b9fc <smp_public_key+0x218>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b974:	6821      	ldr	r1, [r4, #0]
				struct bt_conn_oob_info info = {
    b976:	881b      	ldrh	r3, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b978:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
    b97a:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    b97e:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    b982:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b986:	b939      	cbnz	r1, b998 <smp_public_key+0x1b4>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    b988:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    b98a:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    b98e:	d420      	bmi.n	b9d2 <smp_public_key+0x1ee>
	int oob_config = BT_CONN_OOB_NO_DATA;
    b990:	2b00      	cmp	r3, #0
    b992:	bf08      	it	eq
    b994:	2003      	moveq	r0, #3
    b996:	e000      	b.n	b99a <smp_public_key+0x1b6>
    b998:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    b99a:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
    b99c:	f88d 0005 	strb.w	r0, [sp, #5]
				smp->oobd_remote = NULL;
    b9a0:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
				atomic_set_bit(smp->flags,
    b9a4:	4628      	mov	r0, r5
    b9a6:	210c      	movs	r1, #12
    b9a8:	f00f fb65 	bl	1b076 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    b9ac:	6833      	ldr	r3, [r6, #0]
    b9ae:	6820      	ldr	r0, [r4, #0]
    b9b0:	68db      	ldr	r3, [r3, #12]
    b9b2:	a901      	add	r1, sp, #4
    b9b4:	4798      	blx	r3
			break;
    b9b6:	e7b4      	b.n	b922 <smp_public_key+0x13e>
    b9b8:	4b0b      	ldr	r3, [pc, #44]	; (b9e8 <smp_public_key+0x204>)
    b9ba:	4a0a      	ldr	r2, [pc, #40]	; (b9e4 <smp_public_key+0x200>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
    b9bc:	4810      	ldr	r0, [pc, #64]	; (ba00 <smp_public_key+0x21c>)
    b9be:	1ad2      	subs	r2, r2, r3
    b9c0:	08d2      	lsrs	r2, r2, #3
    b9c2:	0192      	lsls	r2, r2, #6
    b9c4:	f042 0201 	orr.w	r2, r2, #1
    b9c8:	f00c fa8d 	bl	17ee6 <log_1>
    b9cc:	e73e      	b.n	b84c <smp_public_key+0x68>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    b9ce:	2002      	movs	r0, #2
    b9d0:	e767      	b.n	b8a2 <smp_public_key+0xbe>
				     BT_CONN_OOB_BOTH_PEERS :
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	bf0c      	ite	eq
    b9d6:	2001      	moveq	r0, #1
    b9d8:	2002      	movne	r0, #2
    b9da:	e7de      	b.n	b99a <smp_public_key+0x1b6>
    b9dc:	000268b6 	.word	0x000268b6
    b9e0:	20025ac4 	.word	0x20025ac4
    b9e4:	00023344 	.word	0x00023344
    b9e8:	000232ec 	.word	0x000232ec
    b9ec:	0002670c 	.word	0x0002670c
    b9f0:	000266eb 	.word	0x000266eb
    b9f4:	000f4240 	.word	0x000f4240
    b9f8:	20025a10 	.word	0x20025a10
    b9fc:	000234d1 	.word	0x000234d1
    ba00:	000265f3 	.word	0x000265f3

0000ba04 <bt_smp_connected>:
{
    ba04:	b510      	push	{r4, lr}
    ba06:	4604      	mov	r4, r0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ba08:	2230      	movs	r2, #48	; 0x30
    ba0a:	2100      	movs	r1, #0
    ba0c:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    ba10:	f00d fc25 	bl	1925e <memset>
    ba14:	4b03      	ldr	r3, [pc, #12]	; (ba24 <bt_smp_connected+0x20>)
	smp_reset(smp);
    ba16:	4620      	mov	r0, r4
    ba18:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
}
    ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ba20:	f00f bb9f 	b.w	1b162 <smp_reset>
    ba24:	0000bcc1 	.word	0x0000bcc1

0000ba28 <smp_pairing_complete>:
{
    ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba2c:	4604      	mov	r4, r0
	if (!status) {
    ba2e:	460d      	mov	r5, r1
    ba30:	f8df 808c 	ldr.w	r8, [pc, #140]	; bac0 <smp_pairing_complete+0x98>
    ba34:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    ba38:	b981      	cbnz	r1, ba5c <smp_pairing_complete+0x34>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ba3a:	210d      	movs	r1, #13
    ba3c:	4638      	mov	r0, r7
    ba3e:	f00f fb00 	bl	1b042 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ba42:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ba46:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    ba48:	b11b      	cbz	r3, ba52 <smp_pairing_complete+0x2a>
    ba4a:	699b      	ldr	r3, [r3, #24]
    ba4c:	b10b      	cbz	r3, ba52 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    ba4e:	6820      	ldr	r0, [r4, #0]
    ba50:	4798      	blx	r3
	smp_reset(smp);
    ba52:	4620      	mov	r0, r4
}
    ba54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    ba58:	f00f bb83 	b.w	1b162 <smp_reset>
	switch (smp_err) {
    ba5c:	1e4b      	subs	r3, r1, #1
    ba5e:	b2db      	uxtb	r3, r3
    ba60:	2b0d      	cmp	r3, #13
    ba62:	bf96      	itet	ls
    ba64:	4a15      	ldrls	r2, [pc, #84]	; (babc <smp_pairing_complete+0x94>)
	if (!status) {
    ba66:	2608      	movhi	r6, #8
    ba68:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    ba6a:	6803      	ldr	r3, [r0, #0]
    ba6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    ba70:	b153      	cbz	r3, ba88 <smp_pairing_complete+0x60>
    ba72:	7b1b      	ldrb	r3, [r3, #12]
    ba74:	b9db      	cbnz	r3, baae <smp_pairing_complete+0x86>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    ba76:	6823      	ldr	r3, [r4, #0]
    ba78:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    ba7c:	f00f fe1c 	bl	1b6b8 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    ba80:	2200      	movs	r2, #0
    ba82:	6823      	ldr	r3, [r4, #0]
    ba84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    ba88:	2102      	movs	r1, #2
    ba8a:	4638      	mov	r0, r7
    ba8c:	f00f fad9 	bl	1b042 <atomic_test_bit>
    ba90:	b920      	cbnz	r0, ba9c <smp_pairing_complete+0x74>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    ba92:	4632      	mov	r2, r6
    ba94:	4629      	mov	r1, r5
    ba96:	6820      	ldr	r0, [r4, #0]
    ba98:	f7fb fe24 	bl	76e4 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    ba9c:	f8d8 3000 	ldr.w	r3, [r8]
    baa0:	2b00      	cmp	r3, #0
    baa2:	d0d6      	beq.n	ba52 <smp_pairing_complete+0x2a>
    baa4:	69db      	ldr	r3, [r3, #28]
    baa6:	2b00      	cmp	r3, #0
    baa8:	d0d3      	beq.n	ba52 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    baaa:	4631      	mov	r1, r6
    baac:	e7cf      	b.n	ba4e <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    baae:	2102      	movs	r1, #2
    bab0:	4638      	mov	r0, r7
    bab2:	f00f fac6 	bl	1b042 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    bab6:	2800      	cmp	r0, #0
    bab8:	d1dd      	bne.n	ba76 <smp_pairing_complete+0x4e>
    baba:	e7e5      	b.n	ba88 <smp_pairing_complete+0x60>
    babc:	00026866 	.word	0x00026866
    bac0:	20025a10 	.word	0x20025a10

0000bac4 <bt_smp_recv>:
{
    bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    bac6:	898b      	ldrh	r3, [r1, #12]
{
    bac8:	4604      	mov	r4, r0
    baca:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bacc:	b95b      	cbnz	r3, bae6 <bt_smp_recv+0x22>
    bace:	493a      	ldr	r1, [pc, #232]	; (bbb8 <bt_smp_recv+0xf4>)
    bad0:	4b3a      	ldr	r3, [pc, #232]	; (bbbc <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    bad2:	483b      	ldr	r0, [pc, #236]	; (bbc0 <bt_smp_recv+0xfc>)
    bad4:	1ac9      	subs	r1, r1, r3
    bad6:	08c9      	lsrs	r1, r1, #3
    bad8:	0189      	lsls	r1, r1, #6
    bada:	f041 0101 	orr.w	r1, r1, #1
    bade:	f00c f9f5 	bl	17ecc <log_0>
}
    bae2:	2000      	movs	r0, #0
    bae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    bae6:	2101      	movs	r1, #1
    bae8:	f105 0008 	add.w	r0, r5, #8
    baec:	f00f fe89 	bl	1b802 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    baf0:	2104      	movs	r1, #4
    baf2:	4606      	mov	r6, r0
    baf4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    baf8:	f00f faa3 	bl	1b042 <atomic_test_bit>
    bafc:	7831      	ldrb	r1, [r6, #0]
    bafe:	b150      	cbz	r0, bb16 <bt_smp_recv+0x52>
    bb00:	4a2d      	ldr	r2, [pc, #180]	; (bbb8 <bt_smp_recv+0xf4>)
    bb02:	4b2e      	ldr	r3, [pc, #184]	; (bbbc <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    bb04:	482f      	ldr	r0, [pc, #188]	; (bbc4 <bt_smp_recv+0x100>)
    bb06:	1ad2      	subs	r2, r2, r3
    bb08:	08d2      	lsrs	r2, r2, #3
    bb0a:	0192      	lsls	r2, r2, #6
    bb0c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    bb10:	f00c f9e9 	bl	17ee6 <log_1>
		return 0;
    bb14:	e7e5      	b.n	bae2 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    bb16:	290e      	cmp	r1, #14
    bb18:	d908      	bls.n	bb2c <bt_smp_recv+0x68>
    bb1a:	4a27      	ldr	r2, [pc, #156]	; (bbb8 <bt_smp_recv+0xf4>)
    bb1c:	4b27      	ldr	r3, [pc, #156]	; (bbbc <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    bb1e:	482a      	ldr	r0, [pc, #168]	; (bbc8 <bt_smp_recv+0x104>)
    bb20:	1ad2      	subs	r2, r2, r3
    bb22:	08d2      	lsrs	r2, r2, #3
    bb24:	0192      	lsls	r2, r2, #6
    bb26:	f042 0202 	orr.w	r2, r2, #2
    bb2a:	e7f1      	b.n	bb10 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    bb2c:	4f27      	ldr	r7, [pc, #156]	; (bbcc <bt_smp_recv+0x108>)
    bb2e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    bb32:	b973      	cbnz	r3, bb52 <bt_smp_recv+0x8e>
    bb34:	4b21      	ldr	r3, [pc, #132]	; (bbbc <bt_smp_recv+0xf8>)
    bb36:	4a20      	ldr	r2, [pc, #128]	; (bbb8 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    bb38:	4825      	ldr	r0, [pc, #148]	; (bbd0 <bt_smp_recv+0x10c>)
    bb3a:	1ad2      	subs	r2, r2, r3
    bb3c:	08d2      	lsrs	r2, r2, #3
    bb3e:	0192      	lsls	r2, r2, #6
    bb40:	f042 0202 	orr.w	r2, r2, #2
    bb44:	f00c f9cf 	bl	17ee6 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    bb48:	2107      	movs	r1, #7
		smp_error(smp, err);
    bb4a:	4620      	mov	r0, r4
    bb4c:	f00f fb2f 	bl	1b1ae <smp_error>
    bb50:	e7c7      	b.n	bae2 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    bb52:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bb56:	f00f fa7a 	bl	1b04e <atomic_test_and_clear_bit>
    bb5a:	7831      	ldrb	r1, [r6, #0]
    bb5c:	b970      	cbnz	r0, bb7c <bt_smp_recv+0xb8>
    bb5e:	4b17      	ldr	r3, [pc, #92]	; (bbbc <bt_smp_recv+0xf8>)
    bb60:	4a15      	ldr	r2, [pc, #84]	; (bbb8 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    bb62:	481c      	ldr	r0, [pc, #112]	; (bbd4 <bt_smp_recv+0x110>)
    bb64:	1ad2      	subs	r2, r2, r3
    bb66:	08d2      	lsrs	r2, r2, #3
    bb68:	0192      	lsls	r2, r2, #6
    bb6a:	f042 0202 	orr.w	r2, r2, #2
    bb6e:	f00c f9ba 	bl	17ee6 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    bb72:	7833      	ldrb	r3, [r6, #0]
    bb74:	2b05      	cmp	r3, #5
    bb76:	d0b4      	beq.n	bae2 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    bb78:	2108      	movs	r1, #8
    bb7a:	e7e6      	b.n	bb4a <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    bb7c:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    bb80:	89a8      	ldrh	r0, [r5, #12]
    bb82:	791b      	ldrb	r3, [r3, #4]
    bb84:	4283      	cmp	r3, r0
    bb86:	d00d      	beq.n	bba4 <bt_smp_recv+0xe0>
    bb88:	4a0c      	ldr	r2, [pc, #48]	; (bbbc <bt_smp_recv+0xf8>)
    bb8a:	4b0b      	ldr	r3, [pc, #44]	; (bbb8 <bt_smp_recv+0xf4>)
    bb8c:	1a9b      	subs	r3, r3, r2
    bb8e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    bb90:	019b      	lsls	r3, r3, #6
    bb92:	460a      	mov	r2, r1
    bb94:	f043 0301 	orr.w	r3, r3, #1
    bb98:	4601      	mov	r1, r0
    bb9a:	480f      	ldr	r0, [pc, #60]	; (bbd8 <bt_smp_recv+0x114>)
    bb9c:	f00c f9b7 	bl	17f0e <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bba0:	210a      	movs	r1, #10
    bba2:	e7d2      	b.n	bb4a <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    bba4:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    bba8:	4620      	mov	r0, r4
    bbaa:	4629      	mov	r1, r5
    bbac:	4798      	blx	r3
	if (err) {
    bbae:	4601      	mov	r1, r0
    bbb0:	2800      	cmp	r0, #0
    bbb2:	d096      	beq.n	bae2 <bt_smp_recv+0x1e>
    bbb4:	e7c9      	b.n	bb4a <bt_smp_recv+0x86>
    bbb6:	bf00      	nop
    bbb8:	00023344 	.word	0x00023344
    bbbc:	000232ec 	.word	0x000232ec
    bbc0:	00026731 	.word	0x00026731
    bbc4:	0002674c 	.word	0x0002674c
    bbc8:	0002677d 	.word	0x0002677d
    bbcc:	00023b18 	.word	0x00023b18
    bbd0:	0002679f 	.word	0x0002679f
    bbd4:	000267b9 	.word	0x000267b9
    bbd8:	00026307 	.word	0x00026307

0000bbdc <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    bbdc:	4b17      	ldr	r3, [pc, #92]	; (bc3c <bt_smp_pkey_ready+0x60>)
{
    bbde:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    bbe0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    bbe2:	b958      	cbnz	r0, bbfc <bt_smp_pkey_ready+0x20>
}
    bbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbe8:	4915      	ldr	r1, [pc, #84]	; (bc40 <bt_smp_pkey_ready+0x64>)
    bbea:	4b16      	ldr	r3, [pc, #88]	; (bc44 <bt_smp_pkey_ready+0x68>)
		BT_WARN("Public key not available");
    bbec:	4816      	ldr	r0, [pc, #88]	; (bc48 <bt_smp_pkey_ready+0x6c>)
    bbee:	1ac9      	subs	r1, r1, r3
    bbf0:	08c9      	lsrs	r1, r1, #3
    bbf2:	0189      	lsls	r1, r1, #6
    bbf4:	f041 0102 	orr.w	r1, r1, #2
    bbf8:	f00c b968 	b.w	17ecc <log_0>
	z_impl_k_sem_give(sem);
    bbfc:	4813      	ldr	r0, [pc, #76]	; (bc4c <bt_smp_pkey_ready+0x70>)
    bbfe:	f00a ff11 	bl	16a24 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc02:	4c13      	ldr	r4, [pc, #76]	; (bc50 <bt_smp_pkey_ready+0x74>)
    bc04:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    bc08:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    bc0c:	065b      	lsls	r3, r3, #25
    bc0e:	d513      	bpl.n	bc38 <bt_smp_pkey_ready+0x5c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bc10:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc12:	78db      	ldrb	r3, [r3, #3]
    bc14:	b983      	cbnz	r3, bc38 <bt_smp_pkey_ready+0x5c>
			err = sc_send_public_key(smp);
    bc16:	4620      	mov	r0, r4
    bc18:	f7ff f958 	bl	aecc <sc_send_public_key>
			if (err) {
    bc1c:	4601      	mov	r1, r0
    bc1e:	b110      	cbz	r0, bc26 <bt_smp_pkey_ready+0x4a>
				smp_error(smp, err);
    bc20:	4620      	mov	r0, r4
    bc22:	f00f fac4 	bl	1b1ae <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc26:	4b0b      	ldr	r3, [pc, #44]	; (bc54 <bt_smp_pkey_ready+0x78>)
    bc28:	e8d3 2fef 	ldaex	r2, [r3]
    bc2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    bc30:	e8c3 2fe1 	stlex	r1, r2, [r3]
    bc34:	2900      	cmp	r1, #0
    bc36:	d1f7      	bne.n	bc28 <bt_smp_pkey_ready+0x4c>
}
    bc38:	bd10      	pop	{r4, pc}
    bc3a:	bf00      	nop
    bc3c:	20025ac4 	.word	0x20025ac4
    bc40:	00023344 	.word	0x00023344
    bc44:	000232ec 	.word	0x000232ec
    bc48:	000267d4 	.word	0x000267d4
    bc4c:	20000698 	.word	0x20000698
    bc50:	20000dc0 	.word	0x20000dc0
    bc54:	20000e78 	.word	0x20000e78

0000bc58 <smp_pairing_failed>:
{
    bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bc5a:	4605      	mov	r5, r0
    bc5c:	4b14      	ldr	r3, [pc, #80]	; (bcb0 <smp_pairing_failed+0x58>)
    bc5e:	4a15      	ldr	r2, [pc, #84]	; (bcb4 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    bc60:	688e      	ldr	r6, [r1, #8]
    bc62:	1ad2      	subs	r2, r2, r3
    bc64:	08d2      	lsrs	r2, r2, #3
	struct bt_conn *conn = smp->chan.chan.conn;
    bc66:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    bc6a:	0192      	lsls	r2, r2, #6
    bc6c:	7831      	ldrb	r1, [r6, #0]
{
    bc6e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    bc70:	f042 0201 	orr.w	r2, r2, #1
    bc74:	4810      	ldr	r0, [pc, #64]	; (bcb8 <smp_pairing_failed+0x60>)
    bc76:	f00c f936 	bl	17ee6 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bc7a:	210a      	movs	r1, #10
    bc7c:	4628      	mov	r0, r5
    bc7e:	f00f f9e6 	bl	1b04e <atomic_test_and_clear_bit>
    bc82:	b140      	cbz	r0, bc96 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    bc84:	4b0d      	ldr	r3, [pc, #52]	; (bcbc <smp_pairing_failed+0x64>)
    bc86:	681b      	ldr	r3, [r3, #0]
    bc88:	b963      	cbnz	r3, bca4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    bc8a:	4620      	mov	r0, r4
    bc8c:	7831      	ldrb	r1, [r6, #0]
    bc8e:	f7ff fecb 	bl	ba28 <smp_pairing_complete>
}
    bc92:	2000      	movs	r0, #0
    bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    bc96:	210b      	movs	r1, #11
    bc98:	4628      	mov	r0, r5
    bc9a:	f00f f9d8 	bl	1b04e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bc9e:	2800      	cmp	r0, #0
    bca0:	d1f0      	bne.n	bc84 <smp_pairing_failed+0x2c>
    bca2:	e7f2      	b.n	bc8a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    bca4:	691b      	ldr	r3, [r3, #16]
    bca6:	2b00      	cmp	r3, #0
    bca8:	d0ef      	beq.n	bc8a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    bcaa:	4638      	mov	r0, r7
    bcac:	4798      	blx	r3
    bcae:	e7ec      	b.n	bc8a <smp_pairing_failed+0x32>
    bcb0:	000232ec 	.word	0x000232ec
    bcb4:	00023344 	.word	0x00023344
    bcb8:	000267ed 	.word	0x000267ed
    bcbc:	20025a10 	.word	0x20025a10

0000bcc0 <smp_timeout>:
{
    bcc0:	b510      	push	{r4, lr}
    bcc2:	4604      	mov	r4, r0
    bcc4:	4b0a      	ldr	r3, [pc, #40]	; (bcf0 <smp_timeout+0x30>)
    bcc6:	490b      	ldr	r1, [pc, #44]	; (bcf4 <smp_timeout+0x34>)
	BT_ERR("SMP Timeout");
    bcc8:	480b      	ldr	r0, [pc, #44]	; (bcf8 <smp_timeout+0x38>)
    bcca:	1ac9      	subs	r1, r1, r3
    bccc:	08c9      	lsrs	r1, r1, #3
    bcce:	0189      	lsls	r1, r1, #6
    bcd0:	f041 0101 	orr.w	r1, r1, #1
    bcd4:	f00c f8fa 	bl	17ecc <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    bcd8:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    bcdc:	2108      	movs	r1, #8
    bcde:	f7ff fea3 	bl	ba28 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    bce2:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    bce6:	2104      	movs	r1, #4
}
    bce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    bcec:	f00f b9c3 	b.w	1b076 <atomic_set_bit>
    bcf0:	000232ec 	.word	0x000232ec
    bcf4:	00023344 	.word	0x00023344
    bcf8:	000267f9 	.word	0x000267f9

0000bcfc <smp_master_ident>:
{
    bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd00:	460b      	mov	r3, r1
    bd02:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bd04:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
    bd06:	f850 6bbc 	ldr.w	r6, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bd0a:	f00f f99a 	bl	1b042 <atomic_test_bit>
    bd0e:	b380      	cbz	r0, bd72 <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    bd10:	f106 0788 	add.w	r7, r6, #136	; 0x88
    bd14:	463a      	mov	r2, r7
    bd16:	2004      	movs	r0, #4
    bd18:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    bd1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    bd1e:	f00f fcb7 	bl	1b690 <bt_keys_get_type>
		if (!keys) {
    bd22:	4605      	mov	r5, r0
    bd24:	b998      	cbnz	r0, bd4e <smp_master_ident+0x52>
    bd26:	4a25      	ldr	r2, [pc, #148]	; (bdbc <smp_master_ident+0xc0>)
    bd28:	4c25      	ldr	r4, [pc, #148]	; (bdc0 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
    bd2a:	4638      	mov	r0, r7
    bd2c:	1aa4      	subs	r4, r4, r2
    bd2e:	f7f9 f84d 	bl	4dcc <bt_addr_le_str_real>
    bd32:	f7f6 fa3d 	bl	21b0 <log_strdup>
    bd36:	08e4      	lsrs	r4, r4, #3
    bd38:	01a4      	lsls	r4, r4, #6
    bd3a:	f044 0401 	orr.w	r4, r4, #1
    bd3e:	4601      	mov	r1, r0
    bd40:	4622      	mov	r2, r4
    bd42:	4820      	ldr	r0, [pc, #128]	; (bdc4 <smp_master_ident+0xc8>)
    bd44:	f00c f8cf 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    bd48:	2008      	movs	r0, #8
}
    bd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    bd4e:	2202      	movs	r2, #2
    bd50:	4641      	mov	r1, r8
    bd52:	3018      	adds	r0, #24
    bd54:	f00d fa58 	bl	19208 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    bd58:	2208      	movs	r2, #8
    bd5a:	f108 0102 	add.w	r1, r8, #2
    bd5e:	f105 0010 	add.w	r0, r5, #16
    bd62:	f00d fa51 	bl	19208 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    bd66:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    bd6a:	f023 0301 	bic.w	r3, r3, #1
    bd6e:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    bd72:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    bd76:	079a      	lsls	r2, r3, #30
    bd78:	d50b      	bpl.n	bd92 <smp_master_ident+0x96>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bd7a:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bd7c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bd80:	f00f f979 	bl	1b076 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bd84:	78f3      	ldrb	r3, [r6, #3]
    bd86:	b143      	cbz	r3, bd9a <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
    bd88:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    bd8c:	b17d      	cbz	r5, bdae <smp_master_ident+0xb2>
	return 0;
    bd8e:	2000      	movs	r0, #0
    bd90:	e7db      	b.n	bd4a <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bd92:	075b      	lsls	r3, r3, #29
    bd94:	d5f6      	bpl.n	bd84 <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bd96:	210a      	movs	r1, #10
    bd98:	e7f0      	b.n	bd7c <smp_master_ident+0x80>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    bd9a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d1f2      	bne.n	bd88 <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
    bda2:	4620      	mov	r0, r4
    bda4:	f7ff f8b4 	bl	af10 <bt_smp_distribute_keys>
		if (err) {
    bda8:	2800      	cmp	r0, #0
    bdaa:	d0ed      	beq.n	bd88 <smp_master_ident+0x8c>
    bdac:	e7cd      	b.n	bd4a <smp_master_ident+0x4e>
		smp_pairing_complete(smp, 0);
    bdae:	4620      	mov	r0, r4
    bdb0:	4629      	mov	r1, r5
    bdb2:	f7ff fe39 	bl	ba28 <smp_pairing_complete>
	return 0;
    bdb6:	4628      	mov	r0, r5
    bdb8:	e7c7      	b.n	bd4a <smp_master_ident+0x4e>
    bdba:	bf00      	nop
    bdbc:	000232ec 	.word	0x000232ec
    bdc0:	00023344 	.word	0x00023344
    bdc4:	000266b8 	.word	0x000266b8

0000bdc8 <smp_pairing_rsp>:
{
    bdc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    bdcc:	688f      	ldr	r7, [r1, #8]
{
    bdce:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bdd0:	78fb      	ldrb	r3, [r7, #3]
    bdd2:	3b07      	subs	r3, #7
    bdd4:	2b09      	cmp	r3, #9
    bdd6:	d904      	bls.n	bde2 <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bdd8:	2706      	movs	r7, #6
}
    bdda:	4638      	mov	r0, r7
    bddc:	b002      	add	sp, #8
    bdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    bde2:	793a      	ldrb	r2, [r7, #4]
    bde4:	f890 31a0 	ldrb.w	r3, [r0, #416]	; 0x1a0
	struct bt_conn *conn = smp->chan.chan.conn;
    bde8:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    bdea:	4013      	ands	r3, r2
    bdec:	f880 31a0 	strb.w	r3, [r0, #416]	; 0x1a0
	smp->remote_dist &= rsp->resp_key_dist;
    bdf0:	797a      	ldrb	r2, [r7, #5]
    bdf2:	f890 31a1 	ldrb.w	r3, [r0, #417]	; 0x1a1
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    bdf6:	4639      	mov	r1, r7
	smp->remote_dist &= rsp->resp_key_dist;
    bdf8:	4013      	ands	r3, r2
    bdfa:	f880 31a1 	strb.w	r3, [r0, #417]	; 0x1a1
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bdfe:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    be00:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    be02:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    be06:	30c9      	adds	r0, #201	; 0xc9
    be08:	f00d f9fe 	bl	19208 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    be0c:	78bb      	ldrb	r3, [r7, #2]
    be0e:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    be12:	0718      	lsls	r0, r3, #28
    be14:	d507      	bpl.n	be26 <smp_pairing_rsp+0x5e>
    be16:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    be1a:	0719      	lsls	r1, r3, #28
    be1c:	d503      	bpl.n	be26 <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    be1e:	2105      	movs	r1, #5
    be20:	4628      	mov	r0, r5
    be22:	f00f f928 	bl	1b076 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    be26:	78bb      	ldrb	r3, [r7, #2]
    be28:	069a      	lsls	r2, r3, #26
    be2a:	d507      	bpl.n	be3c <smp_pairing_rsp+0x74>
    be2c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    be30:	069b      	lsls	r3, r3, #26
    be32:	d503      	bpl.n	be3c <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    be34:	2114      	movs	r1, #20
    be36:	4628      	mov	r0, r5
    be38:	f00f f91d 	bl	1b076 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    be3c:	78bb      	ldrb	r3, [r7, #2]
    be3e:	07d8      	lsls	r0, r3, #31
    be40:	d507      	bpl.n	be52 <smp_pairing_rsp+0x8a>
    be42:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    be46:	07d9      	lsls	r1, r3, #31
    be48:	d503      	bpl.n	be52 <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    be4a:	210d      	movs	r1, #13
    be4c:	4628      	mov	r0, r5
    be4e:	f00f f912 	bl	1b076 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be52:	2105      	movs	r1, #5
    be54:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
    be56:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be58:	f00f f8f3 	bl	1b042 <atomic_test_bit>
    be5c:	f8d4 8000 	ldr.w	r8, [r4]
    be60:	2800      	cmp	r0, #0
    be62:	d152      	bne.n	bf0a <smp_pairing_rsp+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    be64:	2f04      	cmp	r7, #4
    be66:	d81d      	bhi.n	bea4 <smp_pairing_rsp+0xdc>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    be68:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    be6c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    be70:	4013      	ands	r3, r2
    be72:	07da      	lsls	r2, r3, #31
    be74:	d466      	bmi.n	bf44 <smp_pairing_rsp+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    be76:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    be7a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    be7e:	4318      	orrs	r0, r3
    be80:	f010 0004 	ands.w	r0, r0, #4
    be84:	d00e      	beq.n	bea4 <smp_pairing_rsp+0xdc>
	method = gen_method_legacy[remote_io][get_io_capa()];
    be86:	f7fe ff9b 	bl	adc0 <get_io_capa>
    be8a:	4ba5      	ldr	r3, [pc, #660]	; (c120 <smp_pairing_rsp+0x358>)
    be8c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    be90:	441f      	add	r7, r3
    be92:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    be94:	2804      	cmp	r0, #4
    be96:	d105      	bne.n	bea4 <smp_pairing_rsp+0xdc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    be98:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    be9c:	2b00      	cmp	r3, #0
    be9e:	bf0c      	ite	eq
    bea0:	2002      	moveq	r0, #2
    bea2:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
    bea4:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    bea8:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    beac:	b93b      	cbnz	r3, bebe <smp_pairing_rsp+0xf6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    beae:	f898 0008 	ldrb.w	r0, [r8, #8]
    beb2:	f108 0188 	add.w	r1, r8, #136	; 0x88
    beb6:	f000 fbcb 	bl	c650 <bt_keys_get_addr>
    beba:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    bebe:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    bec2:	2a00      	cmp	r2, #0
    bec4:	d144      	bne.n	bf50 <smp_pairing_rsp+0x188>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bec6:	2105      	movs	r1, #5
    bec8:	4628      	mov	r0, r5
    beca:	f00f f8ba 	bl	1b042 <atomic_test_bit>
    bece:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bed2:	2800      	cmp	r0, #0
    bed4:	f040 80e8 	bne.w	c0a8 <smp_pairing_rsp+0x2e0>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bed8:	461f      	mov	r7, r3
    beda:	2b00      	cmp	r3, #0
    bedc:	d156      	bne.n	bf8c <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bede:	210f      	movs	r1, #15
    bee0:	4628      	mov	r0, r5
    bee2:	f00f f8ae 	bl	1b042 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bee6:	2800      	cmp	r0, #0
    bee8:	d050      	beq.n	bf8c <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    beea:	4e8e      	ldr	r6, [pc, #568]	; (c124 <smp_pairing_rsp+0x35c>)
    beec:	6833      	ldr	r3, [r6, #0]
    beee:	2b00      	cmp	r3, #0
    bef0:	d04c      	beq.n	bf8c <smp_pairing_rsp+0x1c4>
	    bt_auth && bt_auth->pairing_confirm) {
    bef2:	695b      	ldr	r3, [r3, #20]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d049      	beq.n	bf8c <smp_pairing_rsp+0x1c4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bef8:	4628      	mov	r0, r5
    befa:	210a      	movs	r1, #10
    befc:	f00f f8bb 	bl	1b076 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bf00:	6833      	ldr	r3, [r6, #0]
    bf02:	6820      	ldr	r0, [r4, #0]
    bf04:	695b      	ldr	r3, [r3, #20]
    bf06:	4798      	blx	r3
		return 0;
    bf08:	e767      	b.n	bdda <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    bf0a:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    bf0e:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    bf12:	ea00 0302 	and.w	r3, r0, r2
    bf16:	071b      	lsls	r3, r3, #28
    bf18:	d506      	bpl.n	bf28 <smp_pairing_rsp+0x160>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    bf1a:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bf1e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bf22:	430b      	orrs	r3, r1
    bf24:	07d9      	lsls	r1, r3, #31
    bf26:	d40f      	bmi.n	bf48 <smp_pairing_rsp+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    bf28:	2f04      	cmp	r7, #4
    bf2a:	d80f      	bhi.n	bf4c <smp_pairing_rsp+0x184>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bf2c:	4310      	orrs	r0, r2
    bf2e:	f010 0004 	ands.w	r0, r0, #4
    bf32:	d0b7      	beq.n	bea4 <smp_pairing_rsp+0xdc>
	return gen_method_sc[remote_io][get_io_capa()];
    bf34:	f7fe ff44 	bl	adc0 <get_io_capa>
    bf38:	4b7b      	ldr	r3, [pc, #492]	; (c128 <smp_pairing_rsp+0x360>)
    bf3a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    bf3e:	441f      	add	r7, r3
    bf40:	5c38      	ldrb	r0, [r7, r0]
    bf42:	e7af      	b.n	bea4 <smp_pairing_rsp+0xdc>
		return LEGACY_OOB;
    bf44:	2006      	movs	r0, #6
    bf46:	e7ad      	b.n	bea4 <smp_pairing_rsp+0xdc>
			return LE_SC_OOB;
    bf48:	2005      	movs	r0, #5
    bf4a:	e7ab      	b.n	bea4 <smp_pairing_rsp+0xdc>
		return JUST_WORKS;
    bf4c:	2000      	movs	r0, #0
    bf4e:	e7a9      	b.n	bea4 <smp_pairing_rsp+0xdc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    bf50:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    bf52:	f011 0f24 	tst.w	r1, #36	; 0x24
    bf56:	d0b6      	beq.n	bec6 <smp_pairing_rsp+0xfe>
	return MIN(req->max_key_size, rsp->max_key_size);
    bf58:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    bf5c:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    bf60:	7b12      	ldrb	r2, [r2, #12]
    bf62:	4283      	cmp	r3, r0
    bf64:	bf28      	it	cs
    bf66:	4603      	movcs	r3, r0
    bf68:	429a      	cmp	r2, r3
    bf6a:	d901      	bls.n	bf70 <smp_pairing_rsp+0x1a8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    bf6c:	2703      	movs	r7, #3
    bf6e:	e734      	b.n	bdda <smp_pairing_rsp+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    bf70:	068a      	lsls	r2, r1, #26
    bf72:	d404      	bmi.n	bf7e <smp_pairing_rsp+0x1b6>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    bf74:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d1a4      	bne.n	bec6 <smp_pairing_rsp+0xfe>
    bf7c:	e7f6      	b.n	bf6c <smp_pairing_rsp+0x1a4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bf7e:	2105      	movs	r1, #5
    bf80:	4628      	mov	r0, r5
    bf82:	f00f f85e 	bl	1b042 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    bf86:	2800      	cmp	r0, #0
    bf88:	d1f4      	bne.n	bf74 <smp_pairing_rsp+0x1ac>
    bf8a:	e7ef      	b.n	bf6c <smp_pairing_rsp+0x1a4>
	struct bt_conn *conn = smp->chan.chan.conn;
    bf8c:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    bf8e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    bf92:	7a30      	ldrb	r0, [r6, #8]
    bf94:	f000 fbe2 	bl	c75c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    bf98:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    bf9c:	b178      	cbz	r0, bfbe <smp_pairing_rsp+0x1f6>
    bf9e:	7b43      	ldrb	r3, [r0, #13]
    bfa0:	07db      	lsls	r3, r3, #31
    bfa2:	d50c      	bpl.n	bfbe <smp_pairing_rsp+0x1f6>
    bfa4:	b959      	cbnz	r1, bfbe <smp_pairing_rsp+0x1f6>
    bfa6:	4961      	ldr	r1, [pc, #388]	; (c12c <smp_pairing_rsp+0x364>)
    bfa8:	4b61      	ldr	r3, [pc, #388]	; (c130 <smp_pairing_rsp+0x368>)
		BT_ERR("JustWorks failed, authenticated keys present");
    bfaa:	4862      	ldr	r0, [pc, #392]	; (c134 <smp_pairing_rsp+0x36c>)
    bfac:	1ac9      	subs	r1, r1, r3
    bfae:	08c9      	lsrs	r1, r1, #3
    bfb0:	0189      	lsls	r1, r1, #6
    bfb2:	f041 0101 	orr.w	r1, r1, #1
    bfb6:	f00b ff89 	bl	17ecc <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    bfba:	2708      	movs	r7, #8
    bfbc:	e70d      	b.n	bdda <smp_pairing_rsp+0x12>
	switch (smp->method) {
    bfbe:	2906      	cmp	r1, #6
    bfc0:	d85f      	bhi.n	c082 <smp_pairing_rsp+0x2ba>
    bfc2:	e8df f001 	tbb	[pc, r1]
    bfc6:	5417      	.short	0x5417
    bfc8:	5e5e5e2a 	.word	0x5e5e5e2a
    bfcc:	04          	.byte	0x04
    bfcd:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    bfce:	4e55      	ldr	r6, [pc, #340]	; (c124 <smp_pairing_rsp+0x35c>)
    bfd0:	6833      	ldr	r3, [r6, #0]
    bfd2:	2b00      	cmp	r3, #0
    bfd4:	d060      	beq.n	c098 <smp_pairing_rsp+0x2d0>
    bfd6:	68db      	ldr	r3, [r3, #12]
    bfd8:	2b00      	cmp	r3, #0
    bfda:	d05d      	beq.n	c098 <smp_pairing_rsp+0x2d0>
			struct bt_conn_oob_info info = {
    bfdc:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bfde:	210a      	movs	r1, #10
    bfe0:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    bfe2:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bfe6:	f00f f846 	bl	1b076 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    bfea:	6833      	ldr	r3, [r6, #0]
    bfec:	6820      	ldr	r0, [r4, #0]
    bfee:	68db      	ldr	r3, [r3, #12]
    bff0:	a901      	add	r1, sp, #4
    bff2:	4798      	blx	r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bff4:	210a      	movs	r1, #10
    bff6:	4628      	mov	r0, r5
    bff8:	f00f f823 	bl	1b042 <atomic_test_bit>
    bffc:	2800      	cmp	r0, #0
    bffe:	d14d      	bne.n	c09c <smp_pairing_rsp+0x2d4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c000:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c004:	2103      	movs	r1, #3
    c006:	f00f f836 	bl	1b076 <atomic_set_bit>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    c00a:	210e      	movs	r1, #14
    c00c:	f00f f833 	bl	1b076 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    c010:	4620      	mov	r0, r4
    c012:	f00f f9f8 	bl	1b406 <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    c016:	4607      	mov	r7, r0
    c018:	e6df      	b.n	bdda <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    c01a:	2104      	movs	r1, #4
    c01c:	eb0d 0001 	add.w	r0, sp, r1
    c020:	f7fb fa0c 	bl	743c <bt_rand>
    c024:	2800      	cmp	r0, #0
    c026:	d1c8      	bne.n	bfba <smp_pairing_rsp+0x1f2>
			passkey %= 1000000;
    c028:	9901      	ldr	r1, [sp, #4]
    c02a:	4a43      	ldr	r2, [pc, #268]	; (c138 <smp_pairing_rsp+0x370>)
		if (bt_auth && bt_auth->passkey_display) {
    c02c:	4f3d      	ldr	r7, [pc, #244]	; (c124 <smp_pairing_rsp+0x35c>)
			passkey %= 1000000;
    c02e:	fbb1 f3f2 	udiv	r3, r1, r2
    c032:	fb02 1313 	mls	r3, r2, r3, r1
    c036:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    c038:	683b      	ldr	r3, [r7, #0]
    c03a:	b153      	cbz	r3, c052 <smp_pairing_rsp+0x28a>
    c03c:	681b      	ldr	r3, [r3, #0]
    c03e:	b143      	cbz	r3, c052 <smp_pairing_rsp+0x28a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c040:	210b      	movs	r1, #11
    c042:	4628      	mov	r0, r5
    c044:	f00f f817 	bl	1b076 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    c048:	683b      	ldr	r3, [r7, #0]
    c04a:	4630      	mov	r0, r6
    c04c:	681b      	ldr	r3, [r3, #0]
    c04e:	9901      	ldr	r1, [sp, #4]
    c050:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    c052:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
    c054:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c058:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	sys_put_le16(val >> 16, &dst[2]);
    c05c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c05e:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    c062:	0a1b      	lsrs	r3, r3, #8
    c064:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    c068:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
	if (ret) {
    c06c:	e7c2      	b.n	bff4 <smp_pairing_rsp+0x22c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c06e:	4628      	mov	r0, r5
    c070:	210a      	movs	r1, #10
    c072:	f00f f800 	bl	1b076 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    c076:	4b2b      	ldr	r3, [pc, #172]	; (c124 <smp_pairing_rsp+0x35c>)
    c078:	4630      	mov	r0, r6
    c07a:	681b      	ldr	r3, [r3, #0]
    c07c:	685b      	ldr	r3, [r3, #4]
    c07e:	4798      	blx	r3
	if (ret) {
    c080:	e7b8      	b.n	bff4 <smp_pairing_rsp+0x22c>
    c082:	4b2b      	ldr	r3, [pc, #172]	; (c130 <smp_pairing_rsp+0x368>)
    c084:	4a29      	ldr	r2, [pc, #164]	; (c12c <smp_pairing_rsp+0x364>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c086:	482d      	ldr	r0, [pc, #180]	; (c13c <smp_pairing_rsp+0x374>)
    c088:	1ad2      	subs	r2, r2, r3
    c08a:	08d2      	lsrs	r2, r2, #3
    c08c:	0192      	lsls	r2, r2, #6
    c08e:	f042 0201 	orr.w	r2, r2, #1
    c092:	f00b ff28 	bl	17ee6 <log_1>
	if (ret) {
    c096:	e790      	b.n	bfba <smp_pairing_rsp+0x1f2>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c098:	2702      	movs	r7, #2
    c09a:	e69e      	b.n	bdda <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c09c:	2100      	movs	r1, #0
    c09e:	4628      	mov	r0, r5
    c0a0:	f00e ffe9 	bl	1b076 <atomic_set_bit>
	return 0;
    c0a4:	2700      	movs	r7, #0
    c0a6:	e698      	b.n	bdda <smp_pairing_rsp+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    c0a8:	7ab2      	ldrb	r2, [r6, #10]
    c0aa:	461f      	mov	r7, r3
    c0ac:	2a04      	cmp	r2, #4
    c0ae:	d10c      	bne.n	c0ca <smp_pairing_rsp+0x302>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	f43f af5b 	beq.w	bf6c <smp_pairing_rsp+0x1a4>
	return MIN(req->max_key_size, rsp->max_key_size);
    c0b6:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    c0ba:	f894 10c5 	ldrb.w	r1, [r4, #197]	; 0xc5
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c0be:	428a      	cmp	r2, r1
    c0c0:	bf28      	it	cs
    c0c2:	460a      	movcs	r2, r1
    c0c4:	2a10      	cmp	r2, #16
    c0c6:	f47f ae87 	bne.w	bdd8 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    c0ca:	2200      	movs	r2, #0
    c0cc:	f884 21a0 	strb.w	r2, [r4, #416]	; 0x1a0
	smp->remote_dist &= RECV_KEYS_SC;
    c0d0:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
    c0d4:	f002 0202 	and.w	r2, r2, #2
    c0d8:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c0dc:	b95b      	cbnz	r3, c0f6 <smp_pairing_rsp+0x32e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c0de:	210f      	movs	r1, #15
    c0e0:	4628      	mov	r0, r5
    c0e2:	f00e ffae 	bl	1b042 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c0e6:	b130      	cbz	r0, c0f6 <smp_pairing_rsp+0x32e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c0e8:	4e0e      	ldr	r6, [pc, #56]	; (c124 <smp_pairing_rsp+0x35c>)
    c0ea:	6833      	ldr	r3, [r6, #0]
    c0ec:	b11b      	cbz	r3, c0f6 <smp_pairing_rsp+0x32e>
	    bt_auth && bt_auth->pairing_confirm) {
    c0ee:	695b      	ldr	r3, [r3, #20]
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	f47f af01 	bne.w	bef8 <smp_pairing_rsp+0x130>
	if (!sc_public_key) {
    c0f6:	4b12      	ldr	r3, [pc, #72]	; (c140 <smp_pairing_rsp+0x378>)
    c0f8:	681f      	ldr	r7, [r3, #0]
    c0fa:	b927      	cbnz	r7, c106 <smp_pairing_rsp+0x33e>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c0fc:	2106      	movs	r1, #6
    c0fe:	4628      	mov	r0, r5
    c100:	f00e ffb9 	bl	1b076 <atomic_set_bit>
		return 0;
    c104:	e669      	b.n	bdda <smp_pairing_rsp+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c106:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c10a:	210c      	movs	r1, #12
    c10c:	f00e ffb3 	bl	1b076 <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    c110:	210b      	movs	r1, #11
    c112:	f00f f81b 	bl	1b14c <atomic_clear_bit>
	return sc_send_public_key(smp);
    c116:	4620      	mov	r0, r4
    c118:	f7fe fed8 	bl	aecc <sc_send_public_key>
    c11c:	e77b      	b.n	c016 <smp_pairing_rsp+0x24e>
    c11e:	bf00      	nop
    c120:	00026874 	.word	0x00026874
    c124:	20025a10 	.word	0x20025a10
    c128:	0002688d 	.word	0x0002688d
    c12c:	00023344 	.word	0x00023344
    c130:	000232ec 	.word	0x000232ec
    c134:	00026805 	.word	0x00026805
    c138:	000f4240 	.word	0x000f4240
    c13c:	000265f3 	.word	0x000265f3
    c140:	20025ac4 	.word	0x20025ac4

0000c144 <smp_pairing_random>:
{
    c144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c148:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c14a:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    c14e:	2210      	movs	r2, #16
    c150:	6889      	ldr	r1, [r1, #8]
{
    c152:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c154:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c156:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c15a:	f00d f855 	bl	19208 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c15e:	2105      	movs	r1, #5
    c160:	4630      	mov	r0, r6
    c162:	f00e ff6e 	bl	1b042 <atomic_test_bit>
    c166:	f8d4 9000 	ldr.w	r9, [r4]
    c16a:	2800      	cmp	r0, #0
    c16c:	d15d      	bne.n	c22a <smp_pairing_random+0xe6>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c16e:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c172:	f104 0aff 	add.w	sl, r4, #255	; 0xff
    c176:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    c17a:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c17c:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c180:	9300      	str	r3, [sp, #0]
    c182:	4639      	mov	r1, r7
    c184:	4650      	mov	r0, sl
    c186:	f8cd 8008 	str.w	r8, [sp, #8]
    c18a:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    c18e:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    c192:	f00f f8dd 	bl	1b350 <smp_c1>
	if (err) {
    c196:	2800      	cmp	r0, #0
    c198:	d140      	bne.n	c21c <smp_pairing_random+0xd8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c19a:	2210      	movs	r2, #16
    c19c:	4641      	mov	r1, r8
    c19e:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c1a2:	f00d f821 	bl	191e8 <memcmp>
    c1a6:	2800      	cmp	r0, #0
    c1a8:	d176      	bne.n	c298 <smp_pairing_random+0x154>
	    conn->role == BT_HCI_ROLE_MASTER) {
    c1aa:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c1ae:	2d00      	cmp	r5, #0
    c1b0:	f040 80d2 	bne.w	c358 <smp_pairing_random+0x214>
	memcpy(out, r2, 8);
    c1b4:	2208      	movs	r2, #8
    c1b6:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c1ba:	4640      	mov	r0, r8
    c1bc:	f00d f824 	bl	19208 <memcpy>
	memcpy(out + 8, r1, 8);
    c1c0:	2208      	movs	r2, #8
    c1c2:	4639      	mov	r1, r7
    c1c4:	a80c      	add	r0, sp, #48	; 0x30
    c1c6:	f00d f81f 	bl	19208 <memcpy>
	return bt_encrypt_le(k, out, out);
    c1ca:	4642      	mov	r2, r8
    c1cc:	4641      	mov	r1, r8
    c1ce:	4650      	mov	r0, sl
    c1d0:	f00d fc2d 	bl	19a2e <bt_encrypt_le>
		if (err) {
    c1d4:	bb10      	cbnz	r0, c21c <smp_pairing_random+0xd8>
		(void)memset(ediv, 0, sizeof(ediv));
    c1d6:	2202      	movs	r2, #2
    c1d8:	4629      	mov	r1, r5
    c1da:	a805      	add	r0, sp, #20
    c1dc:	f00d f83f 	bl	1925e <memset>
		(void)memset(rand, 0, sizeof(rand));
    c1e0:	2208      	movs	r2, #8
    c1e2:	4629      	mov	r1, r5
    c1e4:	a806      	add	r0, sp, #24
    c1e6:	f00d f83a 	bl	1925e <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    c1ea:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    c1ee:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    c1f2:	4648      	mov	r0, r9
    c1f4:	429a      	cmp	r2, r3
    c1f6:	bf94      	ite	ls
    c1f8:	9200      	strls	r2, [sp, #0]
    c1fa:	9300      	strhi	r3, [sp, #0]
    c1fc:	a906      	add	r1, sp, #24
    c1fe:	4643      	mov	r3, r8
    c200:	aa05      	add	r2, sp, #20
    c202:	f00d fc9c 	bl	19b3e <bt_conn_le_start_encryption>
    c206:	b158      	cbz	r0, c220 <smp_pairing_random+0xdc>
    c208:	4960      	ldr	r1, [pc, #384]	; (c38c <smp_pairing_random+0x248>)
    c20a:	4b61      	ldr	r3, [pc, #388]	; (c390 <smp_pairing_random+0x24c>)
			BT_ERR("Failed to start encryption");
    c20c:	4861      	ldr	r0, [pc, #388]	; (c394 <smp_pairing_random+0x250>)
    c20e:	1ac9      	subs	r1, r1, r3
    c210:	08c9      	lsrs	r1, r1, #3
    c212:	0189      	lsls	r1, r1, #6
    c214:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    c218:	f00b fe58 	bl	17ecc <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    c21c:	2508      	movs	r5, #8
    c21e:	e03c      	b.n	c29a <smp_pairing_random+0x156>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c220:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    c222:	4630      	mov	r0, r6
    c224:	f00e ff27 	bl	1b076 <atomic_set_bit>
			return 0;
    c228:	e037      	b.n	c29a <smp_pairing_random+0x156>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c22a:	f899 5003 	ldrb.w	r5, [r9, #3]
    c22e:	2d00      	cmp	r5, #0
    c230:	f040 80aa 	bne.w	c388 <smp_pairing_random+0x244>
	switch (smp->method) {
    c234:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c238:	2905      	cmp	r1, #5
    c23a:	f200 808f 	bhi.w	c35c <smp_pairing_random+0x218>
    c23e:	e8df f001 	tbb	[pc, r1]
    c242:	0322      	.short	0x0322
    c244:	308d2203 	.word	0x308d2203
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c248:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    c24c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    c250:	40d3      	lsrs	r3, r2
    c252:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    c256:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c25a:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c25c:	494e      	ldr	r1, [pc, #312]	; (c398 <smp_pairing_random+0x254>)
    c25e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    c262:	f8cd 8000 	str.w	r8, [sp]
    c266:	463a      	mov	r2, r7
    c268:	6809      	ldr	r1, [r1, #0]
    c26a:	f204 100f 	addw	r0, r4, #271	; 0x10f
    c26e:	f00e fec1 	bl	1aff4 <smp_f4>
    c272:	b150      	cbz	r0, c28a <smp_pairing_random+0x146>
    c274:	4945      	ldr	r1, [pc, #276]	; (c38c <smp_pairing_random+0x248>)
    c276:	4b46      	ldr	r3, [pc, #280]	; (c390 <smp_pairing_random+0x24c>)
		BT_ERR("Calculate confirm failed");
    c278:	4848      	ldr	r0, [pc, #288]	; (c39c <smp_pairing_random+0x258>)
    c27a:	1ac9      	subs	r1, r1, r3
    c27c:	08c9      	lsrs	r1, r1, #3
    c27e:	0189      	lsls	r1, r1, #6
    c280:	f041 0101 	orr.w	r1, r1, #1
    c284:	e7c8      	b.n	c218 <smp_pairing_random+0xd4>
	switch (smp->method) {
    c286:	2300      	movs	r3, #0
    c288:	e7e8      	b.n	c25c <smp_pairing_random+0x118>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c28a:	2210      	movs	r2, #16
    c28c:	4641      	mov	r1, r8
    c28e:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c292:	f00c ffa9 	bl	191e8 <memcmp>
    c296:	b120      	cbz	r0, c2a2 <smp_pairing_random+0x15e>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c298:	2504      	movs	r5, #4
}
    c29a:	4628      	mov	r0, r5
    c29c:	b01e      	add	sp, #120	; 0x78
    c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (smp->method) {
    c2a2:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c2a6:	2905      	cmp	r1, #5
    c2a8:	d858      	bhi.n	c35c <smp_pairing_random+0x218>
    c2aa:	e8df f001 	tbb	[pc, r1]
    c2ae:	3d62      	.short	0x3d62
    c2b0:	6257033d 	.word	0x6257033d
	sys_memcpy_swap(m, u, 32);
    c2b4:	4b38      	ldr	r3, [pc, #224]	; (c398 <smp_pairing_random+0x254>)
    c2b6:	2220      	movs	r2, #32
    c2b8:	6819      	ldr	r1, [r3, #0]
    c2ba:	a80a      	add	r0, sp, #40	; 0x28
    c2bc:	f00e fdfe 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    c2c0:	2220      	movs	r2, #32
    c2c2:	f204 110f 	addw	r1, r4, #271	; 0x10f
    c2c6:	a812      	add	r0, sp, #72	; 0x48
    c2c8:	f00e fdf8 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    c2cc:	2210      	movs	r2, #16
    c2ce:	4639      	mov	r1, r7
    c2d0:	a81a      	add	r0, sp, #104	; 0x68
    c2d2:	f00e fdf3 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    c2d6:	2210      	movs	r2, #16
    c2d8:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c2dc:	a806      	add	r0, sp, #24
    c2de:	f00e fded 	bl	1aebc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c2e2:	ab06      	add	r3, sp, #24
    c2e4:	2250      	movs	r2, #80	; 0x50
    c2e6:	4618      	mov	r0, r3
    c2e8:	a90a      	add	r1, sp, #40	; 0x28
    c2ea:	f00e fdf3 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d194      	bne.n	c21c <smp_pairing_random+0xd8>
	memcpy(passkey, xs + 12, 4);
    c2f2:	a909      	add	r1, sp, #36	; 0x24
    c2f4:	2204      	movs	r2, #4
    c2f6:	a805      	add	r0, sp, #20
    c2f8:	f00c ff86 	bl	19208 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c2fc:	9b05      	ldr	r3, [sp, #20]
    c2fe:	4928      	ldr	r1, [pc, #160]	; (c3a0 <smp_pairing_random+0x25c>)
    c300:	ba1b      	rev	r3, r3
    c302:	fbb3 f2f1 	udiv	r2, r3, r1
    c306:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c30a:	4630      	mov	r0, r6
    c30c:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c30e:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c310:	f00e feb1 	bl	1b076 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    c314:	2109      	movs	r1, #9
    c316:	f00e feae 	bl	1b076 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c31a:	4b22      	ldr	r3, [pc, #136]	; (c3a4 <smp_pairing_random+0x260>)
    c31c:	9905      	ldr	r1, [sp, #20]
    c31e:	681b      	ldr	r3, [r3, #0]
    c320:	6820      	ldr	r0, [r4, #0]
    c322:	689b      	ldr	r3, [r3, #8]
    c324:	4798      	blx	r3
			return 0;
    c326:	e7b8      	b.n	c29a <smp_pairing_random+0x156>
			smp->passkey_round++;
    c328:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    c32c:	3301      	adds	r3, #1
    c32e:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    c330:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    c332:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
			if (smp->passkey_round == 20U) {
    c336:	d01c      	beq.n	c372 <smp_pairing_random+0x22e>
			if (bt_rand(smp->prnd, 16)) {
    c338:	2110      	movs	r1, #16
    c33a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    c33e:	f7fb f87d 	bl	743c <bt_rand>
    c342:	2800      	cmp	r0, #0
    c344:	f47f af6a 	bne.w	c21c <smp_pairing_random+0xd8>
			atomic_set_bit(&smp->allowed_cmds,
    c348:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c34c:	2103      	movs	r1, #3
    c34e:	f00e fe92 	bl	1b076 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    c352:	4620      	mov	r0, r4
    c354:	f7ff f9ce 	bl	b6f4 <smp_send_pairing_confirm>
    c358:	4605      	mov	r5, r0
    c35a:	e79e      	b.n	c29a <smp_pairing_random+0x156>
    c35c:	4b0c      	ldr	r3, [pc, #48]	; (c390 <smp_pairing_random+0x24c>)
    c35e:	4a0b      	ldr	r2, [pc, #44]	; (c38c <smp_pairing_random+0x248>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
    c360:	4811      	ldr	r0, [pc, #68]	; (c3a8 <smp_pairing_random+0x264>)
    c362:	1ad2      	subs	r2, r2, r3
    c364:	08d2      	lsrs	r2, r2, #3
    c366:	0192      	lsls	r2, r2, #6
    c368:	f042 0201 	orr.w	r2, r2, #1
    c36c:	f00b fdbb 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c370:	e754      	b.n	c21c <smp_pairing_random+0xd8>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    c372:	2107      	movs	r1, #7
    c374:	4630      	mov	r0, r6
    c376:	f00e fe64 	bl	1b042 <atomic_test_bit>
    c37a:	b108      	cbz	r0, c380 <smp_pairing_random+0x23c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    c37c:	2109      	movs	r1, #9
    c37e:	e750      	b.n	c222 <smp_pairing_random+0xde>
		return compute_and_send_master_dhcheck(smp);
    c380:	4620      	mov	r0, r4
    c382:	f7fe fe77 	bl	b074 <compute_and_send_master_dhcheck>
    c386:	e7e7      	b.n	c358 <smp_pairing_random+0x214>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
    c388:	2505      	movs	r5, #5
    c38a:	e786      	b.n	c29a <smp_pairing_random+0x156>
    c38c:	00023344 	.word	0x00023344
    c390:	000232ec 	.word	0x000232ec
    c394:	00026647 	.word	0x00026647
    c398:	20025ac4 	.word	0x20025ac4
    c39c:	00026832 	.word	0x00026832
    c3a0:	000f4240 	.word	0x000f4240
    c3a4:	20025a10 	.word	0x20025a10
    c3a8:	000265f3 	.word	0x000265f3

0000c3ac <smp_ident_addr_info>:
{
    c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c3b0:	688e      	ldr	r6, [r1, #8]
{
    c3b2:	4605      	mov	r5, r0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c3b4:	7833      	ldrb	r3, [r6, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    c3b6:	6804      	ldr	r4, [r0, #0]
    c3b8:	b31b      	cbz	r3, c402 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    c3ba:	79b3      	ldrb	r3, [r6, #6]
    c3bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c3c0:	2bc0      	cmp	r3, #192	; 0xc0
    c3c2:	d01e      	beq.n	c402 <smp_ident_addr_info+0x56>
    c3c4:	4b4a      	ldr	r3, [pc, #296]	; (c4f0 <smp_ident_addr_info+0x144>)
    c3c6:	4d4b      	ldr	r5, [pc, #300]	; (c4f4 <smp_ident_addr_info+0x148>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    c3c8:	4630      	mov	r0, r6
    c3ca:	1aed      	subs	r5, r5, r3
    c3cc:	f7f8 fcfe 	bl	4dcc <bt_addr_le_str_real>
    c3d0:	f7f5 feee 	bl	21b0 <log_strdup>
    c3d4:	08ed      	lsrs	r5, r5, #3
    c3d6:	01ad      	lsls	r5, r5, #6
    c3d8:	f045 0501 	orr.w	r5, r5, #1
    c3dc:	4601      	mov	r1, r0
    c3de:	462a      	mov	r2, r5
    c3e0:	4845      	ldr	r0, [pc, #276]	; (c4f8 <smp_ident_addr_info+0x14c>)
    c3e2:	f00b fd80 	bl	17ee6 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    c3e6:	f104 0088 	add.w	r0, r4, #136	; 0x88
    c3ea:	f7f8 fcef 	bl	4dcc <bt_addr_le_str_real>
    c3ee:	f7f5 fedf 	bl	21b0 <log_strdup>
    c3f2:	462a      	mov	r2, r5
    c3f4:	4601      	mov	r1, r0
    c3f6:	4841      	ldr	r0, [pc, #260]	; (c4fc <smp_ident_addr_info+0x150>)
    c3f8:	f00b fd75 	bl	17ee6 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    c3fc:	200a      	movs	r0, #10
}
    c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c402:	210d      	movs	r1, #13
    c404:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    c408:	f00e fe1b 	bl	1b042 <atomic_test_bit>
    c40c:	2800      	cmp	r0, #0
    c40e:	d048      	beq.n	c4a2 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    c410:	f104 0788 	add.w	r7, r4, #136	; 0x88
    c414:	463a      	mov	r2, r7
    c416:	2002      	movs	r0, #2
    c418:	7a21      	ldrb	r1, [r4, #8]
    c41a:	f00f f939 	bl	1b690 <bt_keys_get_type>
		if (!keys) {
    c41e:	4680      	mov	r8, r0
    c420:	b990      	cbnz	r0, c448 <smp_ident_addr_info+0x9c>
    c422:	4a33      	ldr	r2, [pc, #204]	; (c4f0 <smp_ident_addr_info+0x144>)
    c424:	4c33      	ldr	r4, [pc, #204]	; (c4f4 <smp_ident_addr_info+0x148>)
			BT_ERR("Unable to get keys for %s",
    c426:	4638      	mov	r0, r7
    c428:	1aa4      	subs	r4, r4, r2
    c42a:	f7f8 fccf 	bl	4dcc <bt_addr_le_str_real>
    c42e:	f7f5 febf 	bl	21b0 <log_strdup>
    c432:	08e4      	lsrs	r4, r4, #3
    c434:	01a4      	lsls	r4, r4, #6
    c436:	f044 0401 	orr.w	r4, r4, #1
    c43a:	4601      	mov	r1, r0
    c43c:	4622      	mov	r2, r4
    c43e:	4830      	ldr	r0, [pc, #192]	; (c500 <smp_ident_addr_info+0x154>)
    c440:	f00b fd51 	bl	17ee6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c444:	2008      	movs	r0, #8
    c446:	e7da      	b.n	c3fe <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c448:	78e3      	ldrb	r3, [r4, #3]
    c44a:	2b00      	cmp	r3, #0
    c44c:	d13d      	bne.n	c4ca <smp_ident_addr_info+0x11e>
			dst = &conn->le.resp_addr;
    c44e:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c452:	780b      	ldrb	r3, [r1, #0]
    c454:	2b01      	cmp	r3, #1
    c456:	d121      	bne.n	c49c <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    c458:	798b      	ldrb	r3, [r1, #6]
    c45a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c45e:	2b40      	cmp	r3, #64	; 0x40
    c460:	d11c      	bne.n	c49c <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    c462:	2206      	movs	r2, #6
    c464:	3101      	adds	r1, #1
    c466:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    c46a:	f00c fecd 	bl	19208 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c46e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    c472:	b19b      	cbz	r3, c49c <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c474:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    c478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c47c:	2bc0      	cmp	r3, #192	; 0xc0
    c47e:	d00d      	beq.n	c49c <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    c480:	2207      	movs	r2, #7
    c482:	4631      	mov	r1, r6
    c484:	f108 0001 	add.w	r0, r8, #1
    c488:	f00c febe 	bl	19208 <memcpy>
    c48c:	2207      	movs	r2, #7
    c48e:	4631      	mov	r1, r6
    c490:	4638      	mov	r0, r7
    c492:	f00c feb9 	bl	19208 <memcpy>
				bt_conn_identity_resolved(conn);
    c496:	4620      	mov	r0, r4
    c498:	f7fb f90a 	bl	76b0 <bt_conn_identity_resolved>
		bt_id_add(keys);
    c49c:	4640      	mov	r0, r8
    c49e:	f7f9 fc1b 	bl	5cd8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c4a2:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    c4a6:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c4aa:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c4ac:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c4b0:	d504      	bpl.n	c4bc <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c4b2:	210a      	movs	r1, #10
    c4b4:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    c4b8:	f00e fddd 	bl	1b076 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4bc:	78e3      	ldrb	r3, [r4, #3]
    c4be:	b13b      	cbz	r3, c4d0 <smp_ident_addr_info+0x124>
	if (!smp->local_dist && !smp->remote_dist) {
    c4c0:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    c4c4:	b174      	cbz	r4, c4e4 <smp_ident_addr_info+0x138>
	return 0;
    c4c6:	2000      	movs	r0, #0
    c4c8:	e799      	b.n	c3fe <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    c4ca:	f104 018f 	add.w	r1, r4, #143	; 0x8f
    c4ce:	e7c0      	b.n	c452 <smp_ident_addr_info+0xa6>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c4d0:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d1f3      	bne.n	c4c0 <smp_ident_addr_info+0x114>
		err = bt_smp_distribute_keys(smp);
    c4d8:	4628      	mov	r0, r5
    c4da:	f7fe fd19 	bl	af10 <bt_smp_distribute_keys>
		if (err) {
    c4de:	2800      	cmp	r0, #0
    c4e0:	d0ee      	beq.n	c4c0 <smp_ident_addr_info+0x114>
    c4e2:	e78c      	b.n	c3fe <smp_ident_addr_info+0x52>
		smp_pairing_complete(smp, 0);
    c4e4:	4628      	mov	r0, r5
    c4e6:	4621      	mov	r1, r4
    c4e8:	f7ff fa9e 	bl	ba28 <smp_pairing_complete>
	return 0;
    c4ec:	4620      	mov	r0, r4
    c4ee:	e786      	b.n	c3fe <smp_ident_addr_info+0x52>
    c4f0:	000232ec 	.word	0x000232ec
    c4f4:	00023344 	.word	0x00023344
    c4f8:	0002684b 	.word	0x0002684b
    c4fc:	00026582 	.word	0x00026582
    c500:	000266b8 	.word	0x000266b8

0000c504 <bt_smp_update_keys>:
{
    c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c506:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c508:	f7fe fc80 	bl	ae0c <smp_chan_get>
	if (!smp) {
    c50c:	4605      	mov	r5, r0
    c50e:	2800      	cmp	r0, #0
    c510:	f000 8081 	beq.w	c616 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c514:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    c518:	2103      	movs	r1, #3
    c51a:	4630      	mov	r0, r6
    c51c:	f00e fd91 	bl	1b042 <atomic_test_bit>
    c520:	2800      	cmp	r0, #0
    c522:	d078      	beq.n	c616 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    c524:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c528:	b108      	cbz	r0, c52e <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    c52a:	f00f f8c5 	bl	1b6b8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c52e:	f104 0788 	add.w	r7, r4, #136	; 0x88
    c532:	4639      	mov	r1, r7
    c534:	7a20      	ldrb	r0, [r4, #8]
    c536:	f000 f88b 	bl	c650 <bt_keys_get_addr>
    c53a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    c53e:	b9b0      	cbnz	r0, c56e <bt_smp_update_keys+0x6a>
    c540:	4a35      	ldr	r2, [pc, #212]	; (c618 <bt_smp_update_keys+0x114>)
    c542:	4c36      	ldr	r4, [pc, #216]	; (c61c <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    c544:	4638      	mov	r0, r7
    c546:	1aa4      	subs	r4, r4, r2
    c548:	f7f8 fc40 	bl	4dcc <bt_addr_le_str_real>
    c54c:	f7f5 fe30 	bl	21b0 <log_strdup>
    c550:	08e4      	lsrs	r4, r4, #3
    c552:	01a4      	lsls	r4, r4, #6
    c554:	f044 0401 	orr.w	r4, r4, #1
    c558:	4601      	mov	r1, r0
    c55a:	4622      	mov	r2, r4
    c55c:	4830      	ldr	r0, [pc, #192]	; (c620 <bt_smp_update_keys+0x11c>)
    c55e:	f00b fcc2 	bl	17ee6 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c562:	4628      	mov	r0, r5
}
    c564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c568:	2108      	movs	r1, #8
    c56a:	f00e be20 	b.w	1b1ae <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    c56e:	210e      	movs	r1, #14
    c570:	4630      	mov	r0, r6
    c572:	f00e fd66 	bl	1b042 <atomic_test_bit>
    c576:	b128      	cbz	r0, c584 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    c578:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    c57c:	7b53      	ldrb	r3, [r2, #13]
    c57e:	f043 0302 	orr.w	r3, r3, #2
    c582:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    c584:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    c588:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    c58c:	2a03      	cmp	r2, #3
    c58e:	7b4b      	ldrb	r3, [r1, #13]
    c590:	d838      	bhi.n	c604 <bt_smp_update_keys+0x100>
    c592:	b3d2      	cbz	r2, c60a <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    c594:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    c598:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    c59a:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    c59e:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5a2:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
    c5a4:	4293      	cmp	r3, r2
    c5a6:	bf28      	it	cs
    c5a8:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    c5aa:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5ac:	2105      	movs	r1, #5
    c5ae:	f00e fd48 	bl	1b042 <atomic_test_bit>
    c5b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    c5b6:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5b8:	b350      	cbz	r0, c610 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    c5ba:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c5be:	210d      	movs	r1, #13
    c5c0:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
    c5c2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c5c4:	f00e fd3d 	bl	1b042 <atomic_test_bit>
    c5c8:	b328      	cbz	r0, c616 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    c5ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c5ce:	2120      	movs	r1, #32
    c5d0:	f00f f86e 	bl	1b6b0 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    c5d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c5d8:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    c5dc:	2210      	movs	r2, #16
    c5de:	301a      	adds	r0, #26
    c5e0:	f00c fe12 	bl	19208 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    c5e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c5e8:	2208      	movs	r2, #8
    c5ea:	2100      	movs	r1, #0
    c5ec:	3010      	adds	r0, #16
    c5ee:	f00c fe36 	bl	1925e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    c5f2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c5f6:	2202      	movs	r2, #2
}
    c5f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    c5fc:	2100      	movs	r1, #0
    c5fe:	3018      	adds	r0, #24
    c600:	f00c be2d 	b.w	1925e <memset>
	switch (smp->method) {
    c604:	3a05      	subs	r2, #5
    c606:	2a01      	cmp	r2, #1
    c608:	d9c4      	bls.n	c594 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    c60a:	f023 0301 	bic.w	r3, r3, #1
    c60e:	e7c3      	b.n	c598 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    c610:	f022 0210 	bic.w	r2, r2, #16
    c614:	735a      	strb	r2, [r3, #13]
}
    c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c618:	000232ec 	.word	0x000232ec
    c61c:	00023344 	.word	0x00023344
    c620:	000266b8 	.word	0x000266b8

0000c624 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    c624:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    c626:	4b07      	ldr	r3, [pc, #28]	; (c644 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    c628:	4807      	ldr	r0, [pc, #28]	; (c648 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    c62a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    c62e:	f003 0306 	and.w	r3, r3, #6
    c632:	1f9a      	subs	r2, r3, #6
    c634:	4253      	negs	r3, r2
    c636:	4153      	adcs	r3, r2
    c638:	4a04      	ldr	r2, [pc, #16]	; (c64c <bt_smp_init+0x28>)
    c63a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    c63c:	f7fa fdde 	bl	71fc <bt_pub_key_gen>
	}

	return smp_self_test();
}
    c640:	2000      	movs	r0, #0
    c642:	bd08      	pop	{r3, pc}
    c644:	20000000 	.word	0x20000000
    c648:	200002c4 	.word	0x200002c4
    c64c:	2002a05a 	.word	0x2002a05a

0000c650 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    c650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c652:	4c11      	ldr	r4, [pc, #68]	; (c698 <bt_keys_get_addr+0x48>)
{
    c654:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c656:	7823      	ldrb	r3, [r4, #0]
{
    c658:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c65a:	4283      	cmp	r3, r0
    c65c:	4627      	mov	r7, r4
    c65e:	d00b      	beq.n	c678 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c660:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    c662:	2207      	movs	r2, #7
    c664:	4669      	mov	r1, sp
    c666:	480d      	ldr	r0, [pc, #52]	; (c69c <bt_keys_get_addr+0x4c>)
    c668:	9400      	str	r4, [sp, #0]
    c66a:	f8cd 4003 	str.w	r4, [sp, #3]
    c66e:	f00c fdbb 	bl	191e8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    c672:	b140      	cbz	r0, c686 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c674:	4620      	mov	r0, r4
    c676:	e00d      	b.n	c694 <bt_keys_get_addr+0x44>
    c678:	2207      	movs	r2, #7
    c67a:	1c60      	adds	r0, r4, #1
    c67c:	f00c fdb4 	bl	191e8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c680:	2800      	cmp	r0, #0
    c682:	d1ed      	bne.n	c660 <bt_keys_get_addr+0x10>
    c684:	e7f6      	b.n	c674 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    c686:	2207      	movs	r2, #7
    c688:	4631      	mov	r1, r6
    c68a:	4804      	ldr	r0, [pc, #16]	; (c69c <bt_keys_get_addr+0x4c>)
		keys->id = id;
    c68c:	703d      	strb	r5, [r7, #0]
    c68e:	f00c fdbb 	bl	19208 <memcpy>
		return keys;
    c692:	4801      	ldr	r0, [pc, #4]	; (c698 <bt_keys_get_addr+0x48>)
}
    c694:	b003      	add	sp, #12
    c696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c698:	20025ac8 	.word	0x20025ac8
    c69c:	20025ac9 	.word	0x20025ac9

0000c6a0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    c6a0:	460b      	mov	r3, r1
    c6a2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    c6a4:	4a04      	ldr	r2, [pc, #16]	; (c6b8 <bt_keys_foreach+0x18>)
{
    c6a6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    c6a8:	89d4      	ldrh	r4, [r2, #14]
    c6aa:	4204      	tst	r4, r0
    c6ac:	d002      	beq.n	c6b4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
    c6ae:	4610      	mov	r0, r2
		}
	}
}
    c6b0:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    c6b2:	4718      	bx	r3
}
    c6b4:	bc10      	pop	{r4}
    c6b6:	4770      	bx	lr
    c6b8:	20025ac8 	.word	0x20025ac8

0000c6bc <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    c6bc:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    c6be:	4c09      	ldr	r4, [pc, #36]	; (c6e4 <bt_keys_find+0x28>)
{
    c6c0:	460b      	mov	r3, r1
    c6c2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    c6c4:	89e2      	ldrh	r2, [r4, #14]
    c6c6:	4202      	tst	r2, r0
    c6c8:	d007      	beq.n	c6da <bt_keys_find+0x1e>
    c6ca:	7822      	ldrb	r2, [r4, #0]
    c6cc:	429a      	cmp	r2, r3
    c6ce:	d104      	bne.n	c6da <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    c6d0:	2207      	movs	r2, #7
    c6d2:	1c60      	adds	r0, r4, #1
    c6d4:	f00c fd88 	bl	191e8 <memcmp>
    c6d8:	b108      	cbz	r0, c6de <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c6da:	2000      	movs	r0, #0
}
    c6dc:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    c6de:	4620      	mov	r0, r4
    c6e0:	e7fc      	b.n	c6dc <bt_keys_find+0x20>
    c6e2:	bf00      	nop
    c6e4:	20025ac8 	.word	0x20025ac8

0000c6e8 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c6ea:	780b      	ldrb	r3, [r1, #0]
    c6ec:	4607      	mov	r7, r0
    c6ee:	2b01      	cmp	r3, #1
    c6f0:	460c      	mov	r4, r1
    c6f2:	d001      	beq.n	c6f8 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    c6f4:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    c6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    c6f8:	798b      	ldrb	r3, [r1, #6]
    c6fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c6fe:	2b40      	cmp	r3, #64	; 0x40
    c700:	d1f8      	bne.n	c6f4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c702:	4d13      	ldr	r5, [pc, #76]	; (c750 <bt_keys_find_irk+0x68>)
    c704:	89eb      	ldrh	r3, [r5, #14]
    c706:	462e      	mov	r6, r5
    c708:	f013 0f02 	tst.w	r3, #2
    c70c:	d0f2      	beq.n	c6f4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    c70e:	7833      	ldrb	r3, [r6, #0]
    c710:	42bb      	cmp	r3, r7
    c712:	d10b      	bne.n	c72c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    c714:	2206      	movs	r2, #6
    c716:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    c71a:	1c60      	adds	r0, r4, #1
    c71c:	f00c fd64 	bl	191e8 <memcmp>
    c720:	b908      	cbnz	r0, c726 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    c722:	4628      	mov	r0, r5
    c724:	e7e7      	b.n	c6f6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c726:	89f3      	ldrh	r3, [r6, #14]
    c728:	079b      	lsls	r3, r3, #30
    c72a:	d5e3      	bpl.n	c6f4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    c72c:	7833      	ldrb	r3, [r6, #0]
    c72e:	42bb      	cmp	r3, r7
    c730:	d1e0      	bne.n	c6f4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c732:	3401      	adds	r4, #1
    c734:	4621      	mov	r1, r4
    c736:	4807      	ldr	r0, [pc, #28]	; (c754 <bt_keys_find_irk+0x6c>)
    c738:	f00c ff36 	bl	195a8 <bt_rpa_irk_matches>
    c73c:	2800      	cmp	r0, #0
    c73e:	d0d9      	beq.n	c6f4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    c740:	2206      	movs	r2, #6
    c742:	4621      	mov	r1, r4
    c744:	4804      	ldr	r0, [pc, #16]	; (c758 <bt_keys_find_irk+0x70>)
    c746:	f00c fd5f 	bl	19208 <memcpy>
			return &key_pool[i];
    c74a:	4801      	ldr	r0, [pc, #4]	; (c750 <bt_keys_find_irk+0x68>)
}
    c74c:	e7d3      	b.n	c6f6 <bt_keys_find_irk+0xe>
    c74e:	bf00      	nop
    c750:	20025ac8 	.word	0x20025ac8
    c754:	20025af2 	.word	0x20025af2
    c758:	20025b02 	.word	0x20025b02

0000c75c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    c75c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    c75e:	4c06      	ldr	r4, [pc, #24]	; (c778 <bt_keys_find_addr+0x1c>)
    c760:	7823      	ldrb	r3, [r4, #0]
    c762:	4283      	cmp	r3, r0
    c764:	d104      	bne.n	c770 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    c766:	2207      	movs	r2, #7
    c768:	1c60      	adds	r0, r4, #1
    c76a:	f00c fd3d 	bl	191e8 <memcmp>
    c76e:	b108      	cbz	r0, c774 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c770:	2000      	movs	r0, #0
}
    c772:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    c774:	4620      	mov	r0, r4
    c776:	e7fc      	b.n	c772 <bt_keys_find_addr+0x16>
    c778:	20025ac8 	.word	0x20025ac8

0000c77c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    c77c:	2228      	movs	r2, #40	; 0x28
    c77e:	4b02      	ldr	r3, [pc, #8]	; (c788 <net_buf_pool_get+0xc>)
    c780:	fb02 3000 	mla	r0, r2, r0, r3
    c784:	4770      	bx	lr
    c786:	bf00      	nop
    c788:	200006c8 	.word	0x200006c8

0000c78c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    c78c:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c78e:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    c790:	4a04      	ldr	r2, [pc, #16]	; (c7a4 <net_buf_id+0x18>)
    c792:	fb01 2303 	mla	r3, r1, r3, r2
    c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c798:	1ac0      	subs	r0, r0, r3
}
    c79a:	4b03      	ldr	r3, [pc, #12]	; (c7a8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    c79c:	10c0      	asrs	r0, r0, #3
}
    c79e:	4358      	muls	r0, r3
    c7a0:	4770      	bx	lr
    c7a2:	bf00      	nop
    c7a4:	200006c8 	.word	0x200006c8
    c7a8:	aaaaaaab 	.word	0xaaaaaaab

0000c7ac <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    c7ac:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c7ae:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c7b0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c7b2:	4a09      	ldr	r2, [pc, #36]	; (c7d8 <fixed_data_alloc+0x2c>)
    c7b4:	fb04 2303 	mla	r3, r4, r3, r2
    c7b8:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
    c7ba:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c7bc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    c7be:	6823      	ldr	r3, [r4, #0]
    c7c0:	429a      	cmp	r2, r3
    c7c2:	bf94      	ite	ls
    c7c4:	600a      	strls	r2, [r1, #0]
    c7c6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    c7c8:	f7ff ffe0 	bl	c78c <net_buf_id>
    c7cc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    c7d0:	fb02 3000 	mla	r0, r2, r0, r3
    c7d4:	bd10      	pop	{r4, pc}
    c7d6:	bf00      	nop
    c7d8:	200006c8 	.word	0x200006c8

0000c7dc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    c7dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    c7e0:	4605      	mov	r5, r0
    c7e2:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
    c7e4:	4610      	mov	r0, r2
    c7e6:	4619      	mov	r1, r3
{
    c7e8:	4616      	mov	r6, r2
    c7ea:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
    c7ec:	f016 fa15 	bl	22c1a <z_timeout_end_calc>
    c7f0:	4680      	mov	r8, r0
    c7f2:	4689      	mov	r9, r1
	__asm__ volatile(
    c7f4:	f04f 0320 	mov.w	r3, #32
    c7f8:	f3ef 8a11 	mrs	sl, BASEPRI
    c7fc:	f383 8811 	msr	BASEPRI, r3
    c800:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    c804:	8b6b      	ldrh	r3, [r5, #26]
    c806:	2b00      	cmp	r3, #0
    c808:	d054      	beq.n	c8b4 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    c80a:	8b2a      	ldrh	r2, [r5, #24]
    c80c:	429a      	cmp	r2, r3
    c80e:	d93d      	bls.n	c88c <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
    c810:	2200      	movs	r2, #0
    c812:	2300      	movs	r3, #0
    c814:	4628      	mov	r0, r5
    c816:	f009 fd33 	bl	16280 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    c81a:	4604      	mov	r4, r0
    c81c:	2800      	cmp	r0, #0
    c81e:	d035      	beq.n	c88c <net_buf_alloc_len+0xb0>
	__asm__ volatile(
    c820:	f38a 8811 	msr	BASEPRI, sl
    c824:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    c828:	9b01      	ldr	r3, [sp, #4]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d052      	beq.n	c8d4 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c82e:	ea56 0307 	orrs.w	r3, r6, r7
    c832:	d010      	beq.n	c856 <net_buf_alloc_len+0x7a>
    c834:	1c7b      	adds	r3, r7, #1
    c836:	bf08      	it	eq
    c838:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    c83c:	d00b      	beq.n	c856 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
    c83e:	f00a fc31 	bl	170a4 <z_tick_get>
    c842:	ebb8 0600 	subs.w	r6, r8, r0
    c846:	eb69 0701 	sbc.w	r7, r9, r1
    c84a:	2e00      	cmp	r6, #0
    c84c:	f177 0300 	sbcs.w	r3, r7, #0
    c850:	bfbc      	itt	lt
    c852:	2600      	movlt	r6, #0
    c854:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    c856:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c858:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    c85a:	f8df 8090 	ldr.w	r8, [pc, #144]	; c8ec <net_buf_alloc_len+0x110>
    c85e:	4620      	mov	r0, r4
    c860:	fb02 8303 	mla	r3, r2, r3, r8
    c864:	6a1b      	ldr	r3, [r3, #32]
    c866:	4632      	mov	r2, r6
    c868:	681b      	ldr	r3, [r3, #0]
    c86a:	a901      	add	r1, sp, #4
    c86c:	681d      	ldr	r5, [r3, #0]
    c86e:	463b      	mov	r3, r7
    c870:	47a8      	blx	r5
    c872:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    c874:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    c876:	bb70      	cbnz	r0, c8d6 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
    c878:	79a0      	ldrb	r0, [r4, #6]
    c87a:	4621      	mov	r1, r4
    c87c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c880:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    c884:	f015 ff7c 	bl	22780 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    c888:	462c      	mov	r4, r5
}
    c88a:	e01f      	b.n	c8cc <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
    c88c:	8b68      	ldrh	r0, [r5, #26]
    c88e:	1e43      	subs	r3, r0, #1
    c890:	836b      	strh	r3, [r5, #26]
    c892:	f38a 8811 	msr	BASEPRI, sl
    c896:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    c89a:	2318      	movs	r3, #24
    c89c:	8b2c      	ldrh	r4, [r5, #24]
    c89e:	1a24      	subs	r4, r4, r0
    c8a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    c8a2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    c8a6:	4811      	ldr	r0, [pc, #68]	; (c8ec <net_buf_alloc_len+0x110>)
    c8a8:	4b11      	ldr	r3, [pc, #68]	; (c8f0 <net_buf_alloc_len+0x114>)
    c8aa:	1a2d      	subs	r5, r5, r0
    c8ac:	10ed      	asrs	r5, r5, #3
    c8ae:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    c8b0:	71a5      	strb	r5, [r4, #6]
		goto success;
    c8b2:	e7b9      	b.n	c828 <net_buf_alloc_len+0x4c>
    c8b4:	f38a 8811 	msr	BASEPRI, sl
    c8b8:	f3bf 8f6f 	isb	sy
    c8bc:	4632      	mov	r2, r6
    c8be:	463b      	mov	r3, r7
    c8c0:	4628      	mov	r0, r5
    c8c2:	f009 fcdd 	bl	16280 <z_impl_k_queue_get>
	if (!buf) {
    c8c6:	4604      	mov	r4, r0
    c8c8:	2800      	cmp	r0, #0
    c8ca:	d1ad      	bne.n	c828 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    c8cc:	4620      	mov	r0, r4
    c8ce:	b002      	add	sp, #8
    c8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    c8d4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    c8d6:	2300      	movs	r3, #0
	buf->ref   = 1U;
    c8d8:	2201      	movs	r2, #1
	buf->frags = NULL;
    c8da:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    c8dc:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    c8de:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    c8e0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    c8e2:	6923      	ldr	r3, [r4, #16]
    c8e4:	81e2      	strh	r2, [r4, #14]
    c8e6:	60a3      	str	r3, [r4, #8]
	return buf;
    c8e8:	e7f0      	b.n	c8cc <net_buf_alloc_len+0xf0>
    c8ea:	bf00      	nop
    c8ec:	200006c8 	.word	0x200006c8
    c8f0:	cccccccd 	.word	0xcccccccd

0000c8f4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    c8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8f8:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    c8fa:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    c8fc:	2728      	movs	r7, #40	; 0x28
    c8fe:	4d16      	ldr	r5, [pc, #88]	; (c958 <net_buf_unref+0x64>)
	while (buf) {
    c900:	b90c      	cbnz	r4, c906 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    c906:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    c908:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    c90c:	3b01      	subs	r3, #1
    c90e:	b2db      	uxtb	r3, r3
    c910:	7123      	strb	r3, [r4, #4]
    c912:	2b00      	cmp	r3, #0
    c914:	d1f5      	bne.n	c902 <net_buf_unref+0xe>
		if (buf->__buf) {
    c916:	6921      	ldr	r1, [r4, #16]
    c918:	b159      	cbz	r1, c932 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    c91a:	7963      	ldrb	r3, [r4, #5]
    c91c:	079b      	lsls	r3, r3, #30
    c91e:	d407      	bmi.n	c930 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    c920:	79a3      	ldrb	r3, [r4, #6]
    c922:	4620      	mov	r0, r4
    c924:	fb07 5303 	mla	r3, r7, r3, r5
    c928:	6a1b      	ldr	r3, [r3, #32]
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	689b      	ldr	r3, [r3, #8]
    c92e:	4798      	blx	r3
			buf->__buf = NULL;
    c930:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    c932:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    c934:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    c936:	fb07 5300 	mla	r3, r7, r0, r5
    c93a:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
    c93c:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    c93e:	b11b      	cbz	r3, c948 <net_buf_unref+0x54>
			pool->destroy(buf);
    c940:	4620      	mov	r0, r4
    c942:	4798      	blx	r3
{
    c944:	4644      	mov	r4, r8
    c946:	e7db      	b.n	c900 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    c948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c94c:	4621      	mov	r1, r4
    c94e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    c952:	f015 ff15 	bl	22780 <k_queue_prepend>
}
    c956:	e7f5      	b.n	c944 <net_buf_unref+0x50>
    c958:	200006c8 	.word	0x200006c8

0000c95c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    c95c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    c95e:	4b09      	ldr	r3, [pc, #36]	; (c984 <gpio_nrfx_init+0x28>)
    c960:	781a      	ldrb	r2, [r3, #0]
    c962:	b96a      	cbnz	r2, c980 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    c964:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    c966:	200d      	movs	r0, #13
		gpio_initialized = true;
    c968:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    c96a:	2105      	movs	r1, #5
    c96c:	f7f7 fba2 	bl	40b4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    c970:	200d      	movs	r0, #13
    c972:	f7f7 fb81 	bl	4078 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    c976:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c97a:	4b03      	ldr	r3, [pc, #12]	; (c988 <gpio_nrfx_init+0x2c>)
    c97c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    c980:	2000      	movs	r0, #0
    c982:	bd08      	pop	{r3, pc}
    c984:	2002a05b 	.word	0x2002a05b
    c988:	5000d000 	.word	0x5000d000

0000c98c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c98c:	4b2a      	ldr	r3, [pc, #168]	; (ca38 <gpio_nrfx_config+0xac>)
{
    c98e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c990:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c992:	482a      	ldr	r0, [pc, #168]	; (ca3c <gpio_nrfx_config+0xb0>)
    c994:	4013      	ands	r3, r2
    c996:	4283      	cmp	r3, r0
    c998:	d03f      	beq.n	ca1a <gpio_nrfx_config+0x8e>
    c99a:	d80d      	bhi.n	c9b8 <gpio_nrfx_config+0x2c>
    c99c:	2b06      	cmp	r3, #6
    c99e:	d015      	beq.n	c9cc <gpio_nrfx_config+0x40>
    c9a0:	d805      	bhi.n	c9ae <gpio_nrfx_config+0x22>
    c9a2:	b19b      	cbz	r3, c9cc <gpio_nrfx_config+0x40>
    c9a4:	2b02      	cmp	r3, #2
    c9a6:	d03a      	beq.n	ca1e <gpio_nrfx_config+0x92>
    c9a8:	f06f 0015 	mvn.w	r0, #21
    c9ac:	e034      	b.n	ca18 <gpio_nrfx_config+0x8c>
    c9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    c9b2:	d1f9      	bne.n	c9a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    c9b4:	2301      	movs	r3, #1
    c9b6:	e009      	b.n	c9cc <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c9b8:	4821      	ldr	r0, [pc, #132]	; (ca40 <gpio_nrfx_config+0xb4>)
    c9ba:	4283      	cmp	r3, r0
    c9bc:	d031      	beq.n	ca22 <gpio_nrfx_config+0x96>
    c9be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    c9c2:	d030      	beq.n	ca26 <gpio_nrfx_config+0x9a>
    c9c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    c9c8:	d1ee      	bne.n	c9a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    c9ca:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    c9cc:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    c9ce:	bf4c      	ite	mi
    c9d0:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    c9d2:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    c9d6:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    c9da:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    c9dc:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    c9e0:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    c9e4:	d506      	bpl.n	c9f4 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    c9e6:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c9ea:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    c9ec:	d01d      	beq.n	ca2a <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_set(reg, BIT(pin));
    c9ee:	2201      	movs	r2, #1
    c9f0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    c9f2:	60ba      	str	r2, [r7, #8]
    return pin_number >> 5;
    c9f4:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    c9f6:	4a13      	ldr	r2, [pc, #76]	; (ca44 <gpio_nrfx_config+0xb8>)
    c9f8:	4c13      	ldr	r4, [pc, #76]	; (ca48 <gpio_nrfx_config+0xbc>)
    *p_pin = pin_number & 0x1F;
    c9fa:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    c9fe:	2f01      	cmp	r7, #1
    ca00:	bf08      	it	eq
    ca02:	4614      	moveq	r4, r2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    ca04:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    ca08:	2000      	movs	r0, #0
    ca0a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ca0e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    ca12:	3180      	adds	r1, #128	; 0x80
    ca14:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
    ca18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    ca1a:	2307      	movs	r3, #7
    ca1c:	e7d6      	b.n	c9cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    ca1e:	2304      	movs	r3, #4
    ca20:	e7d4      	b.n	c9cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    ca22:	2305      	movs	r3, #5
    ca24:	e7d2      	b.n	c9cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    ca26:	2303      	movs	r3, #3
    ca28:	e7d0      	b.n	c9cc <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    ca2a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    ca2c:	bf42      	ittt	mi
    ca2e:	2201      	movmi	r2, #1
    ca30:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    ca32:	60fa      	strmi	r2, [r7, #12]
}
    ca34:	e7de      	b.n	c9f4 <gpio_nrfx_config+0x68>
    ca36:	bf00      	nop
    ca38:	00f00006 	.word	0x00f00006
    ca3c:	00100006 	.word	0x00100006
    ca40:	00400002 	.word	0x00400002
    ca44:	50842800 	.word	0x50842800
    ca48:	50842500 	.word	0x50842500

0000ca4c <nrf_gpio_cfg_sense_set>:
{
    ca4c:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    ca4e:	4b09      	ldr	r3, [pc, #36]	; (ca74 <nrf_gpio_cfg_sense_set+0x28>)
    ca50:	4c09      	ldr	r4, [pc, #36]	; (ca78 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    ca52:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    ca56:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    ca58:	2801      	cmp	r0, #1
    ca5a:	bf08      	it	eq
    ca5c:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    ca5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    ca62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ca66:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    ca6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    ca6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    ca72:	bd10      	pop	{r4, pc}
    ca74:	50842500 	.word	0x50842500
    ca78:	50842800 	.word	0x50842800

0000ca7c <gpio_nrfx_pin_interrupt_configure>:
{
    ca7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ca7e:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    ca80:	6841      	ldr	r1, [r0, #4]
    ca82:	f006 051f 	and.w	r5, r6, #31
    ca86:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    ca88:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    ca8c:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    ca8e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    ca92:	d111      	bne.n	cab8 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    ca94:	4c5f      	ldr	r4, [pc, #380]	; (cc14 <gpio_nrfx_pin_interrupt_configure+0x198>)
    ca96:	f8df c188 	ldr.w	ip, [pc, #392]	; cc20 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
    ca9a:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    ca9c:	2801      	cmp	r0, #1
    ca9e:	bf14      	ite	ne
    caa0:	4620      	movne	r0, r4
    caa2:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
    caa4:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    caa8:	3180      	adds	r1, #128	; 0x80
    caaa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    caae:	07c8      	lsls	r0, r1, #31
    cab0:	d507      	bpl.n	cac2 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    cab2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cab6:	e093      	b.n	cbe0 <gpio_nrfx_pin_interrupt_configure+0x164>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    cab8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    cabc:	68f9      	ldr	r1, [r7, #12]
    cabe:	f000 8091 	beq.w	cbe4 <gpio_nrfx_pin_interrupt_configure+0x168>
    cac2:	2101      	movs	r1, #1
    cac4:	68f8      	ldr	r0, [r7, #12]
    cac6:	40b1      	lsls	r1, r6
    cac8:	4301      	orrs	r1, r0
    caca:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    cacc:	2101      	movs	r1, #1
    cace:	6978      	ldr	r0, [r7, #20]
    cad0:	40b1      	lsls	r1, r6
    cad2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    cad6:	bf0c      	ite	eq
    cad8:	4308      	orreq	r0, r1
    cada:	4388      	bicne	r0, r1
    cadc:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    cade:	2000      	movs	r0, #0
    cae0:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    cae2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    cae6:	bf0c      	ite	eq
    cae8:	430a      	orreq	r2, r1
    caea:	438a      	bicne	r2, r1
    caec:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    caee:	693a      	ldr	r2, [r7, #16]
    caf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    caf4:	bf0c      	ite	eq
    caf6:	4311      	orreq	r1, r2
    caf8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    cafc:	4a46      	ldr	r2, [pc, #280]	; (cc18 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    cafe:	6139      	str	r1, [r7, #16]
    cb00:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    cb04:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    cb06:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    cb0a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    cb0e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    cb12:	428d      	cmp	r5, r1
    cb14:	d16b      	bne.n	cbee <gpio_nrfx_pin_interrupt_configure+0x172>
		    && (intenset & BIT(i))) {
    cb16:	fa23 f100 	lsr.w	r1, r3, r0
    cb1a:	07c9      	lsls	r1, r1, #31
    cb1c:	d567      	bpl.n	cbee <gpio_nrfx_pin_interrupt_configure+0x172>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    cb1e:	0083      	lsls	r3, r0, #2
    cb20:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    cb24:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    cb28:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    cb2c:	f021 0101 	bic.w	r1, r1, #1
    cb30:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    cb34:	2301      	movs	r3, #1
    cb36:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    cb38:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    cb3c:	b2c0      	uxtb	r0, r0
    cb3e:	f001 f92d 	bl	dd9c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    cb42:	4628      	mov	r0, r5
    cb44:	2100      	movs	r1, #0
    cb46:	f7ff ff81 	bl	ca4c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    cb4a:	68f8      	ldr	r0, [r7, #12]
    cb4c:	40f0      	lsrs	r0, r6
    cb4e:	f010 0001 	ands.w	r0, r0, #1
    cb52:	d045      	beq.n	cbe0 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
    cb54:	6978      	ldr	r0, [r7, #20]
    cb56:	40f0      	lsrs	r0, r6
    cb58:	f010 0401 	ands.w	r4, r0, #1
    cb5c:	d04e      	beq.n	cbfc <gpio_nrfx_pin_interrupt_configure+0x180>
			if (data->double_edge & BIT(pin)) {
    cb5e:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    cb60:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    cb64:	40f3      	lsrs	r3, r6
    cb66:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    cb68:	bf57      	itett	pl
    cb6a:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    cb6c:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    cb6e:	fa21 f606 	lsrpl.w	r6, r1, r6
    cb72:	f006 0601 	andpl.w	r6, r6, #1
    cb76:	bf5c      	itt	pl
    cb78:	f1c6 0602 	rsbpl	r6, r6, #2
    cb7c:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    cb7e:	f001 f92f 	bl	dde0 <nrfx_gpiote_channel_alloc>
    cb82:	4b26      	ldr	r3, [pc, #152]	; (cc1c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    cb84:	4298      	cmp	r0, r3
    cb86:	d136      	bne.n	cbf6 <gpio_nrfx_pin_interrupt_configure+0x17a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cb88:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    cb8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cb8e:	022d      	lsls	r5, r5, #8
    cb90:	008b      	lsls	r3, r1, #2
    cb92:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    cb96:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cb9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cb9e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cba2:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    cba6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    cbaa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cbae:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    cbb2:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    cbb4:	008a      	lsls	r2, r1, #2
    cbb6:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    cbba:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cbbe:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    cbc2:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cbc6:	6010      	str	r0, [r2, #0]
    cbc8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    cbca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    cbce:	f042 0201 	orr.w	r2, r2, #1
    cbd2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    cbd6:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    cbd8:	4a0f      	ldr	r2, [pc, #60]	; (cc18 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    cbda:	408b      	lsls	r3, r1
    cbdc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    cbe0:	b003      	add	sp, #12
    cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    cbe4:	2001      	movs	r0, #1
    cbe6:	40b0      	lsls	r0, r6
    cbe8:	ea21 0100 	bic.w	r1, r1, r0
    cbec:	e76d      	b.n	caca <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    cbee:	3001      	adds	r0, #1
    cbf0:	2808      	cmp	r0, #8
    cbf2:	d188      	bne.n	cb06 <gpio_nrfx_pin_interrupt_configure+0x8a>
    cbf4:	e7a5      	b.n	cb42 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    cbf6:	f06f 0012 	mvn.w	r0, #18
    cbfa:	e7f1      	b.n	cbe0 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    cbfc:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    cbfe:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    cc00:	40f1      	lsrs	r1, r6
    cc02:	f001 0101 	and.w	r1, r1, #1
    cc06:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    cc0a:	b2c9      	uxtb	r1, r1
    cc0c:	f7ff ff1e 	bl	ca4c <nrf_gpio_cfg_sense_set>
	int res = 0;
    cc10:	4620      	mov	r0, r4
    cc12:	e7e5      	b.n	cbe0 <gpio_nrfx_pin_interrupt_configure+0x164>
    cc14:	50842500 	.word	0x50842500
    cc18:	5000d000 	.word	0x5000d000
    cc1c:	0bad0000 	.word	0x0bad0000
    cc20:	50842800 	.word	0x50842800

0000cc24 <gpiote_event_handler>:
{
    cc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    cc26:	2600      	movs	r6, #0
    cc28:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cc2c:	4d26      	ldr	r5, [pc, #152]	; (ccc8 <gpiote_event_handler+0xa4>)
    cc2e:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    cc30:	b14c      	cbz	r4, cc46 <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    cc32:	4826      	ldr	r0, [pc, #152]	; (cccc <gpiote_event_handler+0xa8>)
    cc34:	f00e fe6c 	bl	1b910 <check_level_trigger_pins>
		fired_triggers[0] =
    cc38:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    cc3a:	4825      	ldr	r0, [pc, #148]	; (ccd0 <gpiote_event_handler+0xac>)
    cc3c:	f00e fe68 	bl	1b910 <check_level_trigger_pins>
		fired_triggers[1] =
    cc40:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cc42:	602e      	str	r6, [r5, #0]
    cc44:	682b      	ldr	r3, [r5, #0]
{
    cc46:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    cc48:	2601      	movs	r6, #1
    cc4a:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    cc4c:	4d21      	ldr	r5, [pc, #132]	; (ccd4 <gpiote_event_handler+0xb0>)
    cc4e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    cc52:	fa06 f102 	lsl.w	r1, r6, r2
    cc56:	4219      	tst	r1, r3
    cc58:	d01b      	beq.n	cc92 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cc5a:	0091      	lsls	r1, r2, #2
    cc5c:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    cc60:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    cc64:	680b      	ldr	r3, [r1, #0]
    cc66:	b1a3      	cbz	r3, cc92 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    cc68:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    cc6c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    cc70:	af02      	add	r7, sp, #8
    cc72:	f3c3 3040 	ubfx	r0, r3, #13, #1
    cc76:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    cc7a:	f850 7c08 	ldr.w	r7, [r0, #-8]
    cc7e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    cc82:	fa06 f303 	lsl.w	r3, r6, r3
    cc86:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cc88:	f8c1 c000 	str.w	ip, [r1]
    cc8c:	f840 3c08 	str.w	r3, [r0, #-8]
    cc90:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    cc92:	3201      	adds	r2, #1
    cc94:	2a08      	cmp	r2, #8
    cc96:	d1da      	bne.n	cc4e <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    cc98:	9a00      	ldr	r2, [sp, #0]
    cc9a:	b11a      	cbz	r2, cca4 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
    cc9c:	490b      	ldr	r1, [pc, #44]	; (cccc <gpiote_event_handler+0xa8>)
    cc9e:	480e      	ldr	r0, [pc, #56]	; (ccd8 <gpiote_event_handler+0xb4>)
    cca0:	f00e fdd3 	bl	1b84a <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    cca4:	9a01      	ldr	r2, [sp, #4]
    cca6:	b11a      	cbz	r2, ccb0 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
    cca8:	4909      	ldr	r1, [pc, #36]	; (ccd0 <gpiote_event_handler+0xac>)
    ccaa:	480c      	ldr	r0, [pc, #48]	; (ccdc <gpiote_event_handler+0xb8>)
    ccac:	f00e fdcd 	bl	1b84a <gpio_fire_callbacks>
	if (port_event) {
    ccb0:	b144      	cbz	r4, ccc4 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    ccb2:	4806      	ldr	r0, [pc, #24]	; (cccc <gpiote_event_handler+0xa8>)
    ccb4:	f00e fe54 	bl	1b960 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    ccb8:	4805      	ldr	r0, [pc, #20]	; (ccd0 <gpiote_event_handler+0xac>)
}
    ccba:	b003      	add	sp, #12
    ccbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    ccc0:	f00e be4e 	b.w	1b960 <cfg_level_pins>
}
    ccc4:	b003      	add	sp, #12
    ccc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccc8:	5000d17c 	.word	0x5000d17c
    cccc:	2000052c 	.word	0x2000052c
    ccd0:	2000053c 	.word	0x2000053c
    ccd4:	5000d000 	.word	0x5000d000
    ccd8:	20025b28 	.word	0x20025b28
    ccdc:	20025b44 	.word	0x20025b44

0000cce0 <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    cce0:	b510      	push	{r4, lr}
    cce2:	4604      	mov	r4, r0
    cce4:	2200      	movs	r2, #0
    cce6:	2101      	movs	r1, #1
    cce8:	2009      	movs	r0, #9
    ccea:	f7f7 f9e3 	bl	40b4 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    ccee:	6860      	ldr	r0, [r4, #4]
    ccf0:	68e3      	ldr	r3, [r4, #12]
    ccf2:	4a0c      	ldr	r2, [pc, #48]	; (cd24 <twim_1_init+0x44>)
    ccf4:	f100 0108 	add.w	r1, r0, #8
    ccf8:	f001 fa90 	bl	e21c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    ccfc:	4b0a      	ldr	r3, [pc, #40]	; (cd28 <twim_1_init+0x48>)
    ccfe:	4298      	cmp	r0, r3
    cd00:	d00d      	beq.n	cd1e <twim_1_init+0x3e>
    cd02:	4b0a      	ldr	r3, [pc, #40]	; (cd2c <twim_1_init+0x4c>)
    cd04:	4a0a      	ldr	r2, [pc, #40]	; (cd30 <twim_1_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
    cd06:	480b      	ldr	r0, [pc, #44]	; (cd34 <twim_1_init+0x54>)
    cd08:	1ad2      	subs	r2, r2, r3
    cd0a:	08d2      	lsrs	r2, r2, #3
    cd0c:	0192      	lsls	r2, r2, #6
    cd0e:	6821      	ldr	r1, [r4, #0]
    cd10:	f042 0201 	orr.w	r2, r2, #1
    cd14:	f00b f8e7 	bl	17ee6 <log_1>
		return -EBUSY;
    cd18:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(1);
    cd1c:	bd10      	pop	{r4, pc}
	return 0;
    cd1e:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(1);
    cd20:	e7fc      	b.n	cd1c <twim_1_init+0x3c>
    cd22:	bf00      	nop
    cd24:	0000cd8d 	.word	0x0000cd8d
    cd28:	0bad0000 	.word	0x0bad0000
    cd2c:	000232ec 	.word	0x000232ec
    cd30:	0002337c 	.word	0x0002337c
    cd34:	00026911 	.word	0x00026911

0000cd38 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    cd38:	07ca      	lsls	r2, r1, #31
{
    cd3a:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
    cd3c:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    cd3e:	d40f      	bmi.n	cd60 <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
    cd40:	f3c1 0242 	ubfx	r2, r1, #1, #3
    cd44:	2a01      	cmp	r2, #1
    cd46:	d00e      	beq.n	cd66 <i2c_nrfx_twim_configure+0x2e>
    cd48:	2a02      	cmp	r2, #2
    cd4a:	d015      	beq.n	cd78 <i2c_nrfx_twim_configure+0x40>
    cd4c:	490c      	ldr	r1, [pc, #48]	; (cd80 <i2c_nrfx_twim_configure+0x48>)
    cd4e:	4b0d      	ldr	r3, [pc, #52]	; (cd84 <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
    cd50:	480d      	ldr	r0, [pc, #52]	; (cd88 <i2c_nrfx_twim_configure+0x50>)
    cd52:	1ac9      	subs	r1, r1, r3
    cd54:	08c9      	lsrs	r1, r1, #3
    cd56:	0189      	lsls	r1, r1, #6
    cd58:	f041 0101 	orr.w	r1, r1, #1
    cd5c:	f00b f8b6 	bl	17ecc <log_0>
		return -EINVAL;
    cd60:	f06f 0015 	mvn.w	r0, #21
    cd64:	e007      	b.n	cd76 <i2c_nrfx_twim_configure+0x3e>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    cd66:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    cd6a:	681b      	ldr	r3, [r3, #0]
    cd6c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    cd70:	68c3      	ldr	r3, [r0, #12]
	return 0;
    cd72:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    cd74:	6359      	str	r1, [r3, #52]	; 0x34
}
    cd76:	bd08      	pop	{r3, pc}
    cd78:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    cd7c:	681b      	ldr	r3, [r3, #0]
    cd7e:	e7f5      	b.n	cd6c <i2c_nrfx_twim_configure+0x34>
    cd80:	0002337c 	.word	0x0002337c
    cd84:	000232ec 	.word	0x000232ec
    cd88:	00026931 	.word	0x00026931

0000cd8c <event_handler>:
	switch (p_event->type) {
    cd8c:	7803      	ldrb	r3, [r0, #0]
    cd8e:	2b01      	cmp	r3, #1
    cd90:	d008      	beq.n	cda4 <event_handler+0x18>
    cd92:	2b02      	cmp	r3, #2
    cd94:	d008      	beq.n	cda8 <event_handler+0x1c>
    cd96:	b94b      	cbnz	r3, cdac <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    cd98:	4b05      	ldr	r3, [pc, #20]	; (cdb0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    cd9a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
    cd9c:	f101 0018 	add.w	r0, r1, #24
    cda0:	f009 be40 	b.w	16a24 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    cda4:	4b03      	ldr	r3, [pc, #12]	; (cdb4 <event_handler+0x28>)
    cda6:	e7f8      	b.n	cd9a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    cda8:	4b03      	ldr	r3, [pc, #12]	; (cdb8 <event_handler+0x2c>)
    cdaa:	e7f6      	b.n	cd9a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    cdac:	4b03      	ldr	r3, [pc, #12]	; (cdbc <event_handler+0x30>)
    cdae:	e7f4      	b.n	cd9a <event_handler+0xe>
    cdb0:	0bad0000 	.word	0x0bad0000
    cdb4:	0bae0001 	.word	0x0bae0001
    cdb8:	0bae0002 	.word	0x0bae0002
    cdbc:	0bad0001 	.word	0x0bad0001

0000cdc0 <i2c_nrfx_twim_transfer>:
{
    cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdc4:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    cdc6:	2214      	movs	r2, #20
{
    cdc8:	461d      	mov	r5, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    cdca:	68c4      	ldr	r4, [r0, #12]
{
    cdcc:	b08b      	sub	sp, #44	; 0x2c
    cdce:	4606      	mov	r6, r0
    cdd0:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    cdd2:	eb0d 0002 	add.w	r0, sp, r2
    cdd6:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    cdd8:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
    cddc:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    cde0:	f00c fa3d 	bl	1925e <memset>
    cde4:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    cde8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cdec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdf0:	4620      	mov	r0, r4
    cdf2:	f009 fe3d 	bl	16a70 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    cdf6:	68f0      	ldr	r0, [r6, #12]
    cdf8:	3018      	adds	r0, #24
	for (size_t i = 0; i < num_msgs; i++) {
    cdfa:	2700      	movs	r7, #0
    cdfc:	2200      	movs	r2, #0
    cdfe:	2300      	movs	r3, #0
    ce00:	f009 fe36 	bl	16a70 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    ce04:	6870      	ldr	r0, [r6, #4]
    ce06:	f001 fa63 	bl	e2d0 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    ce0a:	464d      	mov	r5, r9
	uint32_t concat_len = 0;
    ce0c:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
    ce0e:	455f      	cmp	r7, fp
    ce10:	d301      	bcc.n	ce16 <i2c_nrfx_twim_transfer+0x56>
    ce12:	2400      	movs	r4, #0
    ce14:	e049      	b.n	ceaa <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    ce16:	7a29      	ldrb	r1, [r5, #8]
    ce18:	070b      	lsls	r3, r1, #28
    ce1a:	f100 80a5 	bmi.w	cf68 <i2c_nrfx_twim_transfer+0x1a8>
			&& ((msgs[i].flags & I2C_MSG_READ)
    ce1e:	f1ba 0f00 	cmp.w	sl, #0
    ce22:	d00d      	beq.n	ce40 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
    ce24:	1c7b      	adds	r3, r7, #1
    ce26:	459b      	cmp	fp, r3
    ce28:	d90a      	bls.n	ce40 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
    ce2a:	0788      	lsls	r0, r1, #30
    ce2c:	d408      	bmi.n	ce40 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    ce2e:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
    ce30:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
    ce34:	f002 0201 	and.w	r2, r2, #1
    ce38:	f003 0304 	and.w	r3, r3, #4
    ce3c:	4313      	orrs	r3, r2
    ce3e:	d01f      	beq.n	ce80 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
    ce40:	2c00      	cmp	r4, #0
    ce42:	d13c      	bne.n	cebe <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
    ce44:	2400      	movs	r4, #0
    ce46:	682b      	ldr	r3, [r5, #0]
    ce48:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    ce4a:	686b      	ldr	r3, [r5, #4]
    ce4c:	9306      	str	r3, [sp, #24]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ce4e:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    ce50:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    ce52:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    ce56:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ce5a:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    ce5e:	a905      	add	r1, sp, #20
    ce60:	bf0c      	ite	eq
    ce62:	2220      	moveq	r2, #32
    ce64:	2200      	movne	r2, #0
    ce66:	f001 fa5f 	bl	e328 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    ce6a:	4b41      	ldr	r3, [pc, #260]	; (cf70 <i2c_nrfx_twim_transfer+0x1b0>)
    ce6c:	4298      	cmp	r0, r3
    ce6e:	d03a      	beq.n	cee6 <i2c_nrfx_twim_transfer+0x126>
			if (res == NRFX_ERROR_BUSY) {
    ce70:	330b      	adds	r3, #11
				ret = -EIO;
    ce72:	4298      	cmp	r0, r3
    ce74:	bf0c      	ite	eq
    ce76:	f06f 040f 	mvneq.w	r4, #15
    ce7a:	f06f 0404 	mvnne.w	r4, #4
    ce7e:	e014      	b.n	ceaa <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
    ce80:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
    ce82:	686a      	ldr	r2, [r5, #4]
    ce84:	1910      	adds	r0, r2, r4
    ce86:	4550      	cmp	r0, sl
    ce88:	d91b      	bls.n	cec2 <i2c_nrfx_twim_transfer+0x102>
    ce8a:	493a      	ldr	r1, [pc, #232]	; (cf74 <i2c_nrfx_twim_transfer+0x1b4>)
    ce8c:	4b3a      	ldr	r3, [pc, #232]	; (cf78 <i2c_nrfx_twim_transfer+0x1b8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
    ce8e:	483b      	ldr	r0, [pc, #236]	; (cf7c <i2c_nrfx_twim_transfer+0x1bc>)
    ce90:	1a5b      	subs	r3, r3, r1
    ce92:	08db      	lsrs	r3, r3, #3
    ce94:	019b      	lsls	r3, r3, #6
    ce96:	f043 0301 	orr.w	r3, r3, #1
    ce9a:	4621      	mov	r1, r4
    ce9c:	f8ad 3000 	strh.w	r3, [sp]
    cea0:	4653      	mov	r3, sl
    cea2:	f00b f84d 	bl	17f40 <log_3>
				ret = -ENOSPC;
    cea6:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    ceaa:	6870      	ldr	r0, [r6, #4]
    ceac:	f001 fa20 	bl	e2f0 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    ceb0:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
    ceb2:	f009 fdb7 	bl	16a24 <z_impl_k_sem_give>
}
    ceb6:	4620      	mov	r0, r4
    ceb8:	b00b      	add	sp, #44	; 0x2c
    ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
    cebe:	2300      	movs	r3, #0
    cec0:	e7df      	b.n	ce82 <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    cec2:	07c9      	lsls	r1, r1, #31
    cec4:	d406      	bmi.n	ced4 <i2c_nrfx_twim_transfer+0x114>
				memcpy(concat_buf + concat_len,
    cec6:	6829      	ldr	r1, [r5, #0]
    cec8:	eb08 0004 	add.w	r0, r8, r4
    cecc:	9303      	str	r3, [sp, #12]
    cece:	f00c f99b 	bl	19208 <memcpy>
    ced2:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
    ced4:	686a      	ldr	r2, [r5, #4]
    ced6:	4414      	add	r4, r2
		if (concat_next) {
    ced8:	bb83      	cbnz	r3, cf3c <i2c_nrfx_twim_transfer+0x17c>
		if (concat_len == 0) {
    ceda:	2c00      	cmp	r4, #0
    cedc:	d0b2      	beq.n	ce44 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
    cede:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
    cee2:	9406      	str	r4, [sp, #24]
    cee4:	e7b3      	b.n	ce4e <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    cee6:	68f0      	ldr	r0, [r6, #12]
    cee8:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
    ceea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ceee:	2300      	movs	r3, #0
    cef0:	f009 fdbe 	bl	16a70 <z_impl_k_sem_take>
		if (ret != 0) {
    cef4:	b168      	cbz	r0, cf12 <i2c_nrfx_twim_transfer+0x152>
    cef6:	4a20      	ldr	r2, [pc, #128]	; (cf78 <i2c_nrfx_twim_transfer+0x1b8>)
    cef8:	4b1e      	ldr	r3, [pc, #120]	; (cf74 <i2c_nrfx_twim_transfer+0x1b4>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
    cefa:	4639      	mov	r1, r7
    cefc:	1ad2      	subs	r2, r2, r3
    cefe:	08d2      	lsrs	r2, r2, #3
    cf00:	0192      	lsls	r2, r2, #6
    cf02:	481f      	ldr	r0, [pc, #124]	; (cf80 <i2c_nrfx_twim_transfer+0x1c0>)
    cf04:	f042 0201 	orr.w	r2, r2, #1
    cf08:	f00a ffed 	bl	17ee6 <log_1>
			ret = -EIO;
    cf0c:	f06f 0404 	mvn.w	r4, #4
			break;
    cf10:	e7cb      	b.n	ceaa <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
    cf12:	68f3      	ldr	r3, [r6, #12]
    cf14:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    cf16:	4b16      	ldr	r3, [pc, #88]	; (cf70 <i2c_nrfx_twim_transfer+0x1b0>)
    cf18:	4299      	cmp	r1, r3
    cf1a:	d00b      	beq.n	cf34 <i2c_nrfx_twim_transfer+0x174>
    cf1c:	4a15      	ldr	r2, [pc, #84]	; (cf74 <i2c_nrfx_twim_transfer+0x1b4>)
    cf1e:	4b16      	ldr	r3, [pc, #88]	; (cf78 <i2c_nrfx_twim_transfer+0x1b8>)
			LOG_ERR("Error %d occurred for message %d", res, i);
    cf20:	4818      	ldr	r0, [pc, #96]	; (cf84 <i2c_nrfx_twim_transfer+0x1c4>)
    cf22:	1a9b      	subs	r3, r3, r2
    cf24:	08db      	lsrs	r3, r3, #3
    cf26:	019b      	lsls	r3, r3, #6
    cf28:	463a      	mov	r2, r7
    cf2a:	f043 0301 	orr.w	r3, r3, #1
    cf2e:	f00a ffee 	bl	17f0e <log_2>
    cf32:	e7eb      	b.n	cf0c <i2c_nrfx_twim_transfer+0x14c>
		if ((msgs[i].flags & I2C_MSG_READ)
    cf34:	7a2b      	ldrb	r3, [r5, #8]
    cf36:	07db      	lsls	r3, r3, #31
    cf38:	d403      	bmi.n	cf42 <i2c_nrfx_twim_transfer+0x182>
		concat_len = 0;
    cf3a:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
    cf3c:	3701      	adds	r7, #1
    cf3e:	350c      	adds	r5, #12
    cf40:	e765      	b.n	ce0e <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
    cf42:	9b08      	ldr	r3, [sp, #32]
    cf44:	4598      	cmp	r8, r3
    cf46:	d1f8      	bne.n	cf3a <i2c_nrfx_twim_transfer+0x17a>
			while (concat_len >= msgs[j].len) {
    cf48:	230c      	movs	r3, #12
    cf4a:	fb03 9307 	mla	r3, r3, r7, r9
    cf4e:	685a      	ldr	r2, [r3, #4]
    cf50:	3b0c      	subs	r3, #12
    cf52:	4294      	cmp	r4, r2
    cf54:	d3f1      	bcc.n	cf3a <i2c_nrfx_twim_transfer+0x17a>
				concat_len -= msgs[j].len;
    cf56:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
    cf58:	68d8      	ldr	r0, [r3, #12]
    cf5a:	eb08 0104 	add.w	r1, r8, r4
    cf5e:	9303      	str	r3, [sp, #12]
    cf60:	f00c f952 	bl	19208 <memcpy>
    cf64:	9b03      	ldr	r3, [sp, #12]
				j--;
    cf66:	e7f2      	b.n	cf4e <i2c_nrfx_twim_transfer+0x18e>
			ret = -ENOTSUP;
    cf68:	f06f 0422 	mvn.w	r4, #34	; 0x22
    cf6c:	e79d      	b.n	ceaa <i2c_nrfx_twim_transfer+0xea>
    cf6e:	bf00      	nop
    cf70:	0bad0000 	.word	0x0bad0000
    cf74:	000232ec 	.word	0x000232ec
    cf78:	0002337c 	.word	0x0002337c
    cf7c:	00026943 	.word	0x00026943
    cf80:	00026965 	.word	0x00026965
    cf84:	0002698f 	.word	0x0002698f

0000cf88 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    cf88:	4b02      	ldr	r3, [pc, #8]	; (cf94 <vipm_nrf_1_register_callback+0xc>)
    cf8a:	6059      	str	r1, [r3, #4]
    cf8c:	645a      	str	r2, [r3, #68]	; 0x44
    cf8e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    cf92:	4770      	bx	lr
    cf94:	20025b64 	.word	0x20025b64

0000cf98 <vipm_nrf_0_set_enabled>:
    cf98:	b508      	push	{r3, lr}
    cf9a:	4906      	ldr	r1, [pc, #24]	; (cfb4 <vipm_nrf_0_set_enabled+0x1c>)
    cf9c:	4b06      	ldr	r3, [pc, #24]	; (cfb8 <vipm_nrf_0_set_enabled+0x20>)
    cf9e:	4807      	ldr	r0, [pc, #28]	; (cfbc <vipm_nrf_0_set_enabled+0x24>)
    cfa0:	1ac9      	subs	r1, r1, r3
    cfa2:	08c9      	lsrs	r1, r1, #3
    cfa4:	0189      	lsls	r1, r1, #6
    cfa6:	f041 0101 	orr.w	r1, r1, #1
    cfaa:	f00a ff8f 	bl	17ecc <log_0>
    cfae:	f06f 0015 	mvn.w	r0, #21
    cfb2:	bd08      	pop	{r3, pc}
    cfb4:	00023384 	.word	0x00023384
    cfb8:	000232ec 	.word	0x000232ec
    cfbc:	000269c4 	.word	0x000269c4

0000cfc0 <vipm_nrf_0_register_callback>:
    cfc0:	4904      	ldr	r1, [pc, #16]	; (cfd4 <vipm_nrf_0_register_callback+0x14>)
    cfc2:	4b05      	ldr	r3, [pc, #20]	; (cfd8 <vipm_nrf_0_register_callback+0x18>)
    cfc4:	4805      	ldr	r0, [pc, #20]	; (cfdc <vipm_nrf_0_register_callback+0x1c>)
    cfc6:	1ac9      	subs	r1, r1, r3
    cfc8:	08c9      	lsrs	r1, r1, #3
    cfca:	0189      	lsls	r1, r1, #6
    cfcc:	f041 0102 	orr.w	r1, r1, #2
    cfd0:	f00a bf7c 	b.w	17ecc <log_0>
    cfd4:	00023384 	.word	0x00023384
    cfd8:	000232ec 	.word	0x000232ec
    cfdc:	000269e0 	.word	0x000269e0

0000cfe0 <vipm_nrf_1_send>:
    cfe0:	b508      	push	{r3, lr}
    cfe2:	4906      	ldr	r1, [pc, #24]	; (cffc <vipm_nrf_1_send+0x1c>)
    cfe4:	4b06      	ldr	r3, [pc, #24]	; (d000 <vipm_nrf_1_send+0x20>)
    cfe6:	4807      	ldr	r0, [pc, #28]	; (d004 <vipm_nrf_1_send+0x24>)
    cfe8:	1ac9      	subs	r1, r1, r3
    cfea:	08c9      	lsrs	r1, r1, #3
    cfec:	0189      	lsls	r1, r1, #6
    cfee:	f041 0101 	orr.w	r1, r1, #1
    cff2:	f00a ff6b 	bl	17ecc <log_0>
    cff6:	f06f 0015 	mvn.w	r0, #21
    cffa:	bd08      	pop	{r3, pc}
    cffc:	00023384 	.word	0x00023384
    d000:	000232ec 	.word	0x000232ec
    d004:	00026a12 	.word	0x00026a12

0000d008 <vipm_nrf_init>:
{
    d008:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    d00a:	4d0b      	ldr	r5, [pc, #44]	; (d038 <vipm_nrf_init+0x30>)
    d00c:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
    d010:	b97c      	cbnz	r4, d032 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    d012:	4a0a      	ldr	r2, [pc, #40]	; (d03c <vipm_nrf_init+0x34>)
    d014:	490a      	ldr	r1, [pc, #40]	; (d040 <vipm_nrf_init+0x38>)
    d016:	4620      	mov	r0, r4
    d018:	f000 ff1a 	bl	de50 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    d01c:	4622      	mov	r2, r4
    d01e:	2101      	movs	r1, #1
    d020:	202a      	movs	r0, #42	; 0x2a
    d022:	f7f7 f847 	bl	40b4 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    d026:	4807      	ldr	r0, [pc, #28]	; (d044 <vipm_nrf_init+0x3c>)
    d028:	f000 ff2a 	bl	de80 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    d02c:	2301      	movs	r3, #1
    d02e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
    d032:	2000      	movs	r0, #0
    d034:	bd38      	pop	{r3, r4, r5, pc}
    d036:	bf00      	nop
    d038:	20025b64 	.word	0x20025b64
    d03c:	20025b5c 	.word	0x20025b5c
    d040:	0000d049 	.word	0x0000d049
    d044:	00023c24 	.word	0x00023c24

0000d048 <vipm_dispatcher>:
{
    d048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d04c:	4605      	mov	r5, r0
		event_mask &= ~BIT(event_idx);
    d04e:	f04f 0801 	mov.w	r8, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d052:	4e0e      	ldr	r6, [pc, #56]	; (d08c <vipm_dispatcher+0x44>)
	while (event_mask) {
    d054:	b90d      	cbnz	r5, d05a <vipm_dispatcher+0x12>
}
    d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d05a:	fa95 f3a5 	rbit	r3, r5
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    d05e:	fab3 f383 	clz	r3, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d062:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
		event_mask &= ~BIT(event_idx);
    d066:	fa08 f203 	lsl.w	r2, r8, r3
    d06a:	ea25 0502 	bic.w	r5, r5, r2
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    d06e:	2f00      	cmp	r7, #0
    d070:	d0f0      	beq.n	d054 <vipm_dispatcher+0xc>
			nrfx_vipm_data.callback[event_idx]
    d072:	f103 0420 	add.w	r4, r3, #32
    d076:	f103 0110 	add.w	r1, r3, #16
    d07a:	2300      	movs	r3, #0
    d07c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    d080:	461a      	mov	r2, r3
    d082:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    d086:	47b8      	blx	r7
    d088:	e7e4      	b.n	d054 <vipm_dispatcher+0xc>
    d08a:	bf00      	nop
    d08c:	20025b64 	.word	0x20025b64

0000d090 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    d090:	2a10      	cmp	r2, #16
    d092:	b508      	push	{r3, lr}
    d094:	d81c      	bhi.n	d0d0 <vipm_nrf_0_send+0x40>
    d096:	b14a      	cbz	r2, d0ac <vipm_nrf_0_send+0x1c>
    d098:	490f      	ldr	r1, [pc, #60]	; (d0d8 <vipm_nrf_0_send+0x48>)
    d09a:	4b10      	ldr	r3, [pc, #64]	; (d0dc <vipm_nrf_0_send+0x4c>)
    d09c:	4810      	ldr	r0, [pc, #64]	; (d0e0 <vipm_nrf_0_send+0x50>)
    d09e:	1ac9      	subs	r1, r1, r3
    d0a0:	08c9      	lsrs	r1, r1, #3
    d0a2:	0189      	lsls	r1, r1, #6
    d0a4:	f041 0102 	orr.w	r1, r1, #2
    d0a8:	f00a ff10 	bl	17ecc <log_0>
    d0ac:	9b02      	ldr	r3, [sp, #8]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	dd09      	ble.n	d0c6 <vipm_nrf_0_send+0x36>
    d0b2:	4909      	ldr	r1, [pc, #36]	; (d0d8 <vipm_nrf_0_send+0x48>)
    d0b4:	4b09      	ldr	r3, [pc, #36]	; (d0dc <vipm_nrf_0_send+0x4c>)
    d0b6:	480b      	ldr	r0, [pc, #44]	; (d0e4 <vipm_nrf_0_send+0x54>)
    d0b8:	1ac9      	subs	r1, r1, r3
    d0ba:	08c9      	lsrs	r1, r1, #3
    d0bc:	0189      	lsls	r1, r1, #6
    d0be:	f041 0102 	orr.w	r1, r1, #2
    d0c2:	f00a ff03 	bl	17ecc <log_0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d0c6:	2201      	movs	r2, #1
    d0c8:	2000      	movs	r0, #0
    d0ca:	4b07      	ldr	r3, [pc, #28]	; (d0e8 <vipm_nrf_0_send+0x58>)
    d0cc:	601a      	str	r2, [r3, #0]
    d0ce:	bd08      	pop	{r3, pc}
    d0d0:	f06f 0015 	mvn.w	r0, #21
    d0d4:	e7fb      	b.n	d0ce <vipm_nrf_0_send+0x3e>
    d0d6:	bf00      	nop
    d0d8:	00023384 	.word	0x00023384
    d0dc:	000232ec 	.word	0x000232ec
    d0e0:	00026a2e 	.word	0x00026a2e
    d0e4:	00026a62 	.word	0x00026a62
    d0e8:	5002a000 	.word	0x5002a000

0000d0ec <spi_4_init>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(4);
    d0ec:	b538      	push	{r3, r4, r5, lr}
    d0ee:	4604      	mov	r4, r0
    d0f0:	2200      	movs	r2, #0
    d0f2:	2101      	movs	r1, #1
    d0f4:	200a      	movs	r0, #10
    d0f6:	f7f6 ffdd 	bl	40b4 <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
    d0fa:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    d0fc:	4a0e      	ldr	r2, [pc, #56]	; (d138 <spi_4_init+0x4c>)
	data->dev = dev;
    d0fe:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    d100:	6860      	ldr	r0, [r4, #4]
    d102:	f100 010c 	add.w	r1, r0, #12
    d106:	f000 ff1b 	bl	df40 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    d10a:	4b0c      	ldr	r3, [pc, #48]	; (d13c <spi_4_init+0x50>)
    d10c:	4298      	cmp	r0, r3
    d10e:	d011      	beq.n	d134 <spi_4_init+0x48>
    d110:	4b0b      	ldr	r3, [pc, #44]	; (d140 <spi_4_init+0x54>)
    d112:	4a0c      	ldr	r2, [pc, #48]	; (d144 <spi_4_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    d114:	6821      	ldr	r1, [r4, #0]
    d116:	1ad2      	subs	r2, r2, r3
    d118:	08d2      	lsrs	r2, r2, #3
    d11a:	0192      	lsls	r2, r2, #6
    d11c:	480a      	ldr	r0, [pc, #40]	; (d148 <spi_4_init+0x5c>)
    d11e:	f042 0201 	orr.w	r2, r2, #1
    d122:	f00a fee0 	bl	17ee6 <log_1>
		return -EBUSY;
    d126:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPIM_DEVICE(4);
    d12a:	68e0      	ldr	r0, [r4, #12]
    d12c:	f00e fc86 	bl	1ba3c <spi_context_unlock_unconditionally>
    d130:	4628      	mov	r0, r5
    d132:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    d134:	2500      	movs	r5, #0
    d136:	e7f8      	b.n	d12a <spi_4_init+0x3e>
    d138:	0000d495 	.word	0x0000d495
    d13c:	0bad0000 	.word	0x0bad0000
    d140:	000232ec 	.word	0x000232ec
    d144:	000233dc 	.word	0x000233dc
    d148:	00026911 	.word	0x00026911

0000d14c <transfer_next_chunk>:
{
    d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    d14e:	68c5      	ldr	r5, [r0, #12]
{
    d150:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    d152:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    d154:	6dac      	ldr	r4, [r5, #88]	; 0x58
    d156:	b97b      	cbnz	r3, d178 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    d158:	b99c      	cbnz	r4, d182 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    d15a:	2200      	movs	r2, #0
    d15c:	4628      	mov	r0, r5
    d15e:	4611      	mov	r1, r2
    d160:	f00e fc47 	bl	1b9f2 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    d164:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
    d166:	f105 0020 	add.w	r0, r5, #32
    d16a:	f009 fc5b 	bl	16a24 <z_impl_k_sem_give>
	dev_data->busy = false;
    d16e:	2300      	movs	r3, #0
    d170:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    d174:	b005      	add	sp, #20
    d176:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    d178:	2c00      	cmp	r4, #0
    d17a:	d035      	beq.n	d1e8 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    d17c:	429c      	cmp	r4, r3
    d17e:	bf28      	it	cs
    d180:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    d182:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    d184:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    d186:	b179      	cbz	r1, d1a8 <transfer_next_chunk+0x5c>
    d188:	b173      	cbz	r3, d1a8 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    d18a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    d18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    d192:	d009      	beq.n	d1a8 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    d194:	2c08      	cmp	r4, #8
    d196:	bf28      	it	cs
    d198:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    d19a:	f105 0765 	add.w	r7, r5, #101	; 0x65
    d19e:	4622      	mov	r2, r4
    d1a0:	4638      	mov	r0, r7
    d1a2:	f00c f831 	bl	19208 <memcpy>
			tx_buf = dev_data->buffer;
    d1a6:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    d1a8:	68b2      	ldr	r2, [r6, #8]
    d1aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    d1ac:	4294      	cmp	r4, r2
    d1ae:	bf28      	it	cs
    d1b0:	4614      	movcs	r4, r2
		xfer.p_tx_buffer = tx_buf;
    d1b2:	9100      	str	r1, [sp, #0]
		dev_data->chunk_len = chunk_len;
    d1b4:	662c      	str	r4, [r5, #96]	; 0x60
    d1b6:	b11b      	cbz	r3, d1c0 <transfer_next_chunk+0x74>
    d1b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	bf18      	it	ne
    d1be:	4623      	movne	r3, r4
    d1c0:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    d1c2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    d1c4:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    d1c6:	b11b      	cbz	r3, d1d0 <transfer_next_chunk+0x84>
    d1c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	bf18      	it	ne
    d1ce:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    d1d0:	2200      	movs	r2, #0
    d1d2:	4669      	mov	r1, sp
    d1d4:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    d1d6:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    d1d8:	f000 ff64 	bl	e0a4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    d1dc:	4b03      	ldr	r3, [pc, #12]	; (d1ec <transfer_next_chunk+0xa0>)
    d1de:	4298      	cmp	r0, r3
    d1e0:	d0c8      	beq.n	d174 <transfer_next_chunk+0x28>
			error = -EIO;
    d1e2:	f06f 0404 	mvn.w	r4, #4
    d1e6:	e7b8      	b.n	d15a <transfer_next_chunk+0xe>
    d1e8:	461c      	mov	r4, r3
    d1ea:	e7ca      	b.n	d182 <transfer_next_chunk+0x36>
    d1ec:	0bad0000 	.word	0x0bad0000

0000d1f0 <spi_nrfx_transceive>:
{
    d1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1f4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    d1f6:	888b      	ldrh	r3, [r1, #4]
    d1f8:	4680      	mov	r8, r0
    d1fa:	045b      	lsls	r3, r3, #17
    d1fc:	460d      	mov	r5, r1
    d1fe:	4617      	mov	r7, r2
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    d200:	68c4      	ldr	r4, [r0, #12]
    d202:	d42d      	bmi.n	d260 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
    d204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d20c:	f104 0008 	add.w	r0, r4, #8
    d210:	f009 fc2e 	bl	16a70 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    d214:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    d216:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    d21a:	6813      	ldr	r3, [r2, #0]
    d21c:	429d      	cmp	r5, r3
    d21e:	f000 80b8 	beq.w	d392 <spi_nrfx_transceive+0x1a2>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    d222:	88ab      	ldrh	r3, [r5, #4]
    d224:	07d8      	lsls	r0, r3, #31
    d226:	d522      	bpl.n	d26e <spi_nrfx_transceive+0x7e>
    d228:	4a89      	ldr	r2, [pc, #548]	; (d450 <spi_nrfx_transceive+0x260>)
    d22a:	4b8a      	ldr	r3, [pc, #552]	; (d454 <spi_nrfx_transceive+0x264>)
		LOG_ERR("Slave mode is not supported on %s",
    d22c:	f8d8 1000 	ldr.w	r1, [r8]
    d230:	1ad2      	subs	r2, r2, r3
    d232:	08d2      	lsrs	r2, r2, #3
    d234:	0192      	lsls	r2, r2, #6
    d236:	4888      	ldr	r0, [pc, #544]	; (d458 <spi_nrfx_transceive+0x268>)
    d238:	f042 0201 	orr.w	r2, r2, #1
    d23c:	f00a fe53 	bl	17ee6 <log_1>
		return -EINVAL;
    d240:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    d244:	6823      	ldr	r3, [r4, #0]
    d246:	889b      	ldrh	r3, [r3, #4]
    d248:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    d24c:	d104      	bne.n	d258 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
    d24e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    d250:	f104 0008 	add.w	r0, r4, #8
    d254:	f009 fbe6 	bl	16a24 <z_impl_k_sem_give>
}
    d258:	4628      	mov	r0, r5
    d25a:	b003      	add	sp, #12
    d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    d260:	6923      	ldr	r3, [r4, #16]
    d262:	2b00      	cmp	r3, #0
    d264:	d1ce      	bne.n	d204 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
    d266:	6863      	ldr	r3, [r4, #4]
    d268:	4299      	cmp	r1, r3
    d26a:	d1cb      	bne.n	d204 <spi_nrfx_transceive+0x14>
    d26c:	e7d3      	b.n	d216 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    d26e:	0719      	lsls	r1, r3, #28
    d270:	d50a      	bpl.n	d288 <spi_nrfx_transceive+0x98>
    d272:	4977      	ldr	r1, [pc, #476]	; (d450 <spi_nrfx_transceive+0x260>)
    d274:	4b77      	ldr	r3, [pc, #476]	; (d454 <spi_nrfx_transceive+0x264>)
		LOG_ERR("Loopback mode is not supported");
    d276:	4879      	ldr	r0, [pc, #484]	; (d45c <spi_nrfx_transceive+0x26c>)
    d278:	1ac9      	subs	r1, r1, r3
    d27a:	08c9      	lsrs	r1, r1, #3
    d27c:	0189      	lsls	r1, r1, #6
    d27e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
    d282:	f00a fe23 	bl	17ecc <log_0>
    d286:	e7db      	b.n	d240 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    d288:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    d28c:	d008      	beq.n	d2a0 <spi_nrfx_transceive+0xb0>
    d28e:	4970      	ldr	r1, [pc, #448]	; (d450 <spi_nrfx_transceive+0x260>)
    d290:	4b70      	ldr	r3, [pc, #448]	; (d454 <spi_nrfx_transceive+0x264>)
		LOG_ERR("Only single line mode is supported");
    d292:	4873      	ldr	r0, [pc, #460]	; (d460 <spi_nrfx_transceive+0x270>)
    d294:	1ac9      	subs	r1, r1, r3
    d296:	08c9      	lsrs	r1, r1, #3
    d298:	0189      	lsls	r1, r1, #6
    d29a:	f041 0101 	orr.w	r1, r1, #1
    d29e:	e7f0      	b.n	d282 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    d2a0:	f3c3 1345 	ubfx	r3, r3, #5, #6
    d2a4:	2b08      	cmp	r3, #8
    d2a6:	d008      	beq.n	d2ba <spi_nrfx_transceive+0xca>
    d2a8:	4969      	ldr	r1, [pc, #420]	; (d450 <spi_nrfx_transceive+0x260>)
    d2aa:	4b6a      	ldr	r3, [pc, #424]	; (d454 <spi_nrfx_transceive+0x264>)
		LOG_ERR("Word sizes other than 8 bits"
    d2ac:	486d      	ldr	r0, [pc, #436]	; (d464 <spi_nrfx_transceive+0x274>)
    d2ae:	1ac9      	subs	r1, r1, r3
    d2b0:	08c9      	lsrs	r1, r1, #3
    d2b2:	0189      	lsls	r1, r1, #6
    d2b4:	f041 0101 	orr.w	r1, r1, #1
    d2b8:	e7e3      	b.n	d282 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
    d2ba:	6829      	ldr	r1, [r5, #0]
    d2bc:	4b6a      	ldr	r3, [pc, #424]	; (d468 <spi_nrfx_transceive+0x278>)
    d2be:	4299      	cmp	r1, r3
    d2c0:	d808      	bhi.n	d2d4 <spi_nrfx_transceive+0xe4>
    d2c2:	4963      	ldr	r1, [pc, #396]	; (d450 <spi_nrfx_transceive+0x260>)
    d2c4:	4b63      	ldr	r3, [pc, #396]	; (d454 <spi_nrfx_transceive+0x264>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    d2c6:	4869      	ldr	r0, [pc, #420]	; (d46c <spi_nrfx_transceive+0x27c>)
    d2c8:	1ac9      	subs	r1, r1, r3
    d2ca:	08c9      	lsrs	r1, r1, #3
    d2cc:	0189      	lsls	r1, r1, #6
    d2ce:	f041 0101 	orr.w	r1, r1, #1
    d2d2:	e7d6      	b.n	d282 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    d2d4:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    d2d6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
    d2da:	6015      	str	r5, [r2, #0]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	f000 8082 	beq.w	d3e6 <spi_nrfx_transceive+0x1f6>
    d2e2:	6818      	ldr	r0, [r3, #0]
    d2e4:	2800      	cmp	r0, #0
    d2e6:	d07e      	beq.n	d3e6 <spi_nrfx_transceive+0x1f6>
				   ctx->config->cs->gpio_dt_flags |
    d2e8:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    d2ec:	7a19      	ldrb	r1, [r3, #8]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    d2ee:	f01a 0f01 	tst.w	sl, #1
    d2f2:	bf0c      	ite	eq
    d2f4:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    d2f8:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	struct gpio_driver_data *data =
    d2fc:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	return api->pin_configure(port, pin, flags);
    d300:	6883      	ldr	r3, [r0, #8]
    d302:	4652      	mov	r2, sl
    d304:	681b      	ldr	r3, [r3, #0]
    d306:	9101      	str	r1, [sp, #4]
    d308:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    d30a:	b960      	cbnz	r0, d326 <spi_nrfx_transceive+0x136>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    d30c:	2201      	movs	r2, #1
    d30e:	9901      	ldr	r1, [sp, #4]
    d310:	f8db 3000 	ldr.w	r3, [fp]
    d314:	fa02 f101 	lsl.w	r1, r2, r1
    d318:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d31c:	bf14      	ite	ne
    d31e:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d320:	438b      	biceq	r3, r1
    d322:	f8cb 3000 	str.w	r3, [fp]
	nrf_spim_configure(spim->p_reg,
    d326:	88a9      	ldrh	r1, [r5, #4]
    d328:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    d32c:	0788      	lsls	r0, r1, #30
    d32e:	f001 0304 	and.w	r3, r1, #4
    d332:	d563      	bpl.n	d3fc <spi_nrfx_transceive+0x20c>
			return NRF_SPIM_MODE_2;
    d334:	2b00      	cmp	r3, #0
    d336:	bf14      	ite	ne
    d338:	2303      	movne	r3, #3
    d33a:	2302      	moveq	r3, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    d33c:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    d33e:	f3c1 1100 	ubfx	r1, r1, #4, #1
    d342:	d05f      	beq.n	d404 <spi_nrfx_transceive+0x214>
    d344:	2b03      	cmp	r3, #3
    d346:	d060      	beq.n	d40a <spi_nrfx_transceive+0x21a>
    d348:	2b01      	cmp	r3, #1
    d34a:	d101      	bne.n	d350 <spi_nrfx_transceive+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    d34c:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
    d350:	4b47      	ldr	r3, [pc, #284]	; (d470 <spi_nrfx_transceive+0x280>)
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    d352:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spim_frequency_set(spim->p_reg,
    d356:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
    d358:	4299      	cmp	r1, r3
    d35a:	d959      	bls.n	d410 <spi_nrfx_transceive+0x220>
	} else if (frequency < 500000) {
    d35c:	4b45      	ldr	r3, [pc, #276]	; (d474 <spi_nrfx_transceive+0x284>)
    d35e:	4299      	cmp	r1, r3
    d360:	d959      	bls.n	d416 <spi_nrfx_transceive+0x226>
	} else if (frequency < 1000000) {
    d362:	4b45      	ldr	r3, [pc, #276]	; (d478 <spi_nrfx_transceive+0x288>)
    d364:	4299      	cmp	r1, r3
    d366:	d959      	bls.n	d41c <spi_nrfx_transceive+0x22c>
	} else if (frequency < 2000000) {
    d368:	4b44      	ldr	r3, [pc, #272]	; (d47c <spi_nrfx_transceive+0x28c>)
    d36a:	4299      	cmp	r1, r3
    d36c:	d959      	bls.n	d422 <spi_nrfx_transceive+0x232>
	} else if (frequency < 4000000) {
    d36e:	4b44      	ldr	r3, [pc, #272]	; (d480 <spi_nrfx_transceive+0x290>)
    d370:	4299      	cmp	r1, r3
    d372:	d959      	bls.n	d428 <spi_nrfx_transceive+0x238>
	} else if (frequency < 8000000) {
    d374:	4b43      	ldr	r3, [pc, #268]	; (d484 <spi_nrfx_transceive+0x294>)
    d376:	4299      	cmp	r1, r3
    d378:	d359      	bcc.n	d42e <spi_nrfx_transceive+0x23e>
	} else if (frequency < 16000000) {
    d37a:	4b43      	ldr	r3, [pc, #268]	; (d488 <spi_nrfx_transceive+0x298>)
    d37c:	4299      	cmp	r1, r3
    d37e:	d359      	bcc.n	d434 <spi_nrfx_transceive+0x244>
		return NRF_SPIM_FREQ_32M;
    d380:	4b42      	ldr	r3, [pc, #264]	; (d48c <spi_nrfx_transceive+0x29c>)
    d382:	4299      	cmp	r1, r3
    d384:	bf34      	ite	cc
    d386:	f04f 6120 	movcc.w	r1, #167772160	; 0xa000000
    d38a:	f04f 51a0 	movcs.w	r1, #335544320	; 0x14000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    d38e:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    d392:	2301      	movs	r3, #1
    d394:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
    d398:	2f00      	cmp	r7, #0
    d39a:	d04e      	beq.n	d43a <spi_nrfx_transceive+0x24a>
		ctx->current_tx = tx_bufs->buffers;
    d39c:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    d39e:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    d3a0:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
    d3a2:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    d3a4:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    d3a6:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    d3a8:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
    d3aa:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
    d3ac:	2e00      	cmp	r6, #0
    d3ae:	d049      	beq.n	d444 <spi_nrfx_transceive+0x254>
		ctx->current_rx = rx_bufs->buffers;
    d3b0:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    d3b2:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    d3b4:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
    d3b6:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    d3b8:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    d3ba:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    d3bc:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
    d3be:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
    d3c0:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    d3c2:	2101      	movs	r1, #1
    d3c4:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    d3c6:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
    d3c8:	f00e fb13 	bl	1b9f2 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    d3cc:	4640      	mov	r0, r8
    d3ce:	f7ff febd 	bl	d14c <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    d3d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3da:	f104 0020 	add.w	r0, r4, #32
    d3de:	f009 fb47 	bl	16a70 <z_impl_k_sem_take>
	status = ctx->sync_status;
    d3e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
    d3e4:	e72e      	b.n	d244 <spi_nrfx_transceive+0x54>
    d3e6:	4b1b      	ldr	r3, [pc, #108]	; (d454 <spi_nrfx_transceive+0x264>)
    d3e8:	4919      	ldr	r1, [pc, #100]	; (d450 <spi_nrfx_transceive+0x260>)
		LOG_INF("CS control inhibited (no GPIO device)");
    d3ea:	4829      	ldr	r0, [pc, #164]	; (d490 <spi_nrfx_transceive+0x2a0>)
    d3ec:	1ac9      	subs	r1, r1, r3
    d3ee:	08c9      	lsrs	r1, r1, #3
    d3f0:	0189      	lsls	r1, r1, #6
    d3f2:	f041 0103 	orr.w	r1, r1, #3
    d3f6:	f00a fd69 	bl	17ecc <log_0>
    d3fa:	e794      	b.n	d326 <spi_nrfx_transceive+0x136>
			return NRF_SPIM_MODE_0;
    d3fc:	3b00      	subs	r3, #0
    d3fe:	bf18      	it	ne
    d400:	2301      	movne	r3, #1
    d402:	e79b      	b.n	d33c <spi_nrfx_transceive+0x14c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    d404:	f041 0104 	orr.w	r1, r1, #4
        break;
    d408:	e7a2      	b.n	d350 <spi_nrfx_transceive+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    d40a:	f041 0106 	orr.w	r1, r1, #6
        break;
    d40e:	e79f      	b.n	d350 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_125K;
    d410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    d414:	e7bb      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_250K;
    d416:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    d41a:	e7b8      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_500K;
    d41c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    d420:	e7b5      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_1M;
    d422:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    d426:	e7b2      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_2M;
    d428:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    d42c:	e7af      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_4M;
    d42e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d432:	e7ac      	b.n	d38e <spi_nrfx_transceive+0x19e>
		return NRF_SPIM_FREQ_8M;
    d434:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    d438:	e7a9      	b.n	d38e <spi_nrfx_transceive+0x19e>
		ctx->tx_count = 0;
    d43a:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
    d43e:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
    d442:	e7b3      	b.n	d3ac <spi_nrfx_transceive+0x1bc>
		ctx->rx_count = 0;
    d444:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
    d448:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
    d44c:	e7b8      	b.n	d3c0 <spi_nrfx_transceive+0x1d0>
    d44e:	bf00      	nop
    d450:	000233dc 	.word	0x000233dc
    d454:	000232ec 	.word	0x000232ec
    d458:	00026aa0 	.word	0x00026aa0
    d45c:	00026ac2 	.word	0x00026ac2
    d460:	00026ae1 	.word	0x00026ae1
    d464:	00026b04 	.word	0x00026b04
    d468:	0001e847 	.word	0x0001e847
    d46c:	00026b33 	.word	0x00026b33
    d470:	0003d08f 	.word	0x0003d08f
    d474:	0007a11f 	.word	0x0007a11f
    d478:	000f423f 	.word	0x000f423f
    d47c:	001e847f 	.word	0x001e847f
    d480:	003d08ff 	.word	0x003d08ff
    d484:	007a1200 	.word	0x007a1200
    d488:	00f42400 	.word	0x00f42400
    d48c:	01e84800 	.word	0x01e84800
    d490:	00026b64 	.word	0x00026b64

0000d494 <event_handler>:
{
    d494:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    d496:	7803      	ldrb	r3, [r0, #0]
{
    d498:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    d49a:	2b00      	cmp	r3, #0
    d49c:	d14e      	bne.n	d53c <event_handler+0xa8>
	if (!ctx->tx_len) {
    d49e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    d4a0:	b163      	cbz	r3, d4bc <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    d4a2:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
    d4a4:	429a      	cmp	r2, r3
    d4a6:	d91d      	bls.n	d4e4 <event_handler+0x50>
    d4a8:	4925      	ldr	r1, [pc, #148]	; (d540 <event_handler+0xac>)
    d4aa:	4b26      	ldr	r3, [pc, #152]	; (d544 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    d4ac:	4826      	ldr	r0, [pc, #152]	; (d548 <event_handler+0xb4>)
    d4ae:	1ac9      	subs	r1, r1, r3
    d4b0:	08c9      	lsrs	r1, r1, #3
    d4b2:	0189      	lsls	r1, r1, #6
    d4b4:	f041 0101 	orr.w	r1, r1, #1
    d4b8:	f00a fd08 	bl	17ecc <log_0>
	if (!ctx->rx_len) {
    d4bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    d4be:	b163      	cbz	r3, d4da <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    d4c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
    d4c2:	429a      	cmp	r2, r3
    d4c4:	d924      	bls.n	d510 <event_handler+0x7c>
    d4c6:	491e      	ldr	r1, [pc, #120]	; (d540 <event_handler+0xac>)
    d4c8:	4b1e      	ldr	r3, [pc, #120]	; (d544 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    d4ca:	481f      	ldr	r0, [pc, #124]	; (d548 <event_handler+0xb4>)
    d4cc:	1ac9      	subs	r1, r1, r3
    d4ce:	08c9      	lsrs	r1, r1, #3
    d4d0:	0189      	lsls	r1, r1, #6
    d4d2:	f041 0101 	orr.w	r1, r1, #1
    d4d6:	f00a fcf9 	bl	17ecc <log_0>
		transfer_next_chunk(dev_data->dev);
    d4da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
    d4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    d4e0:	f7ff be34 	b.w	d14c <transfer_next_chunk>
	ctx->tx_len -= len;
    d4e4:	1a9b      	subs	r3, r3, r2
    d4e6:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
    d4e8:	b963      	cbnz	r3, d504 <event_handler+0x70>
		ctx->tx_count--;
    d4ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d4ec:	3b01      	subs	r3, #1
    d4ee:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
    d4f0:	b163      	cbz	r3, d50c <event_handler+0x78>
			ctx->current_tx++;
    d4f2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    d4f4:	f103 0208 	add.w	r2, r3, #8
    d4f8:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    d4fa:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    d4fc:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    d4fe:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
    d500:	650b      	str	r3, [r1, #80]	; 0x50
    d502:	e7db      	b.n	d4bc <event_handler+0x28>
	} else if (ctx->tx_buf) {
    d504:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    d506:	2b00      	cmp	r3, #0
    d508:	d0d8      	beq.n	d4bc <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    d50a:	4413      	add	r3, r2
    d50c:	64e3      	str	r3, [r4, #76]	; 0x4c
    d50e:	e7d5      	b.n	d4bc <event_handler+0x28>
	ctx->rx_len -= len;
    d510:	1a9b      	subs	r3, r3, r2
    d512:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    d514:	b963      	cbnz	r3, d530 <event_handler+0x9c>
		ctx->rx_count--;
    d516:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d518:	3b01      	subs	r3, #1
    d51a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
    d51c:	b163      	cbz	r3, d538 <event_handler+0xa4>
			ctx->current_rx++;
    d51e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    d520:	f103 0208 	add.w	r2, r3, #8
    d524:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    d526:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    d528:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    d52a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
    d52c:	65a3      	str	r3, [r4, #88]	; 0x58
    d52e:	e7d4      	b.n	d4da <event_handler+0x46>
	} else if (ctx->rx_buf) {
    d530:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d532:	2b00      	cmp	r3, #0
    d534:	d0d1      	beq.n	d4da <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    d536:	4413      	add	r3, r2
    d538:	6563      	str	r3, [r4, #84]	; 0x54
    d53a:	e7ce      	b.n	d4da <event_handler+0x46>
}
    d53c:	bd10      	pop	{r4, pc}
    d53e:	bf00      	nop
    d540:	000233dc 	.word	0x000233dc
    d544:	000232ec 	.word	0x000232ec
    d548:	00026b8a 	.word	0x00026b8a

0000d54c <ft5336_configure>:
}
#endif

static int ft5336_configure(const struct device *dev,
			    kscan_callback_t callback)
{
    d54c:	b508      	push	{r3, lr}
	struct ft5336_data *data = dev->data;
    d54e:	68c3      	ldr	r3, [r0, #12]

	if (!callback) {
    d550:	b961      	cbnz	r1, d56c <ft5336_configure+0x20>
    d552:	4b08      	ldr	r3, [pc, #32]	; (d574 <ft5336_configure+0x28>)
    d554:	4908      	ldr	r1, [pc, #32]	; (d578 <ft5336_configure+0x2c>)
		LOG_ERR("Invalid callback (NULL)");
    d556:	4809      	ldr	r0, [pc, #36]	; (d57c <ft5336_configure+0x30>)
    d558:	1ac9      	subs	r1, r1, r3
    d55a:	08c9      	lsrs	r1, r1, #3
    d55c:	0189      	lsls	r1, r1, #6
    d55e:	f041 0101 	orr.w	r1, r1, #1
    d562:	f00a fcb3 	bl	17ecc <log_0>
		return -EINVAL;
    d566:	f06f 0015 	mvn.w	r0, #21
	}

	data->callback = callback;

	return 0;
}
    d56a:	bd08      	pop	{r3, pc}
	return 0;
    d56c:	2000      	movs	r0, #0
	data->callback = callback;
    d56e:	6099      	str	r1, [r3, #8]
	return 0;
    d570:	e7fb      	b.n	d56a <ft5336_configure+0x1e>
    d572:	bf00      	nop
    d574:	000232ec 	.word	0x000232ec
    d578:	0002336c 	.word	0x0002336c
    d57c:	00026bb6 	.word	0x00026bb6

0000d580 <ft5336_init>:

	return 0;
}

static int ft5336_init(const struct device *dev)
{
    d580:	b538      	push	{r3, r4, r5, lr}
	const struct ft5336_config *config = dev->config;
	struct ft5336_data *data = dev->data;

	data->i2c = device_get_binding(config->i2c_name);
    d582:	6843      	ldr	r3, [r0, #4]
{
    d584:	4604      	mov	r4, r0
	struct ft5336_data *data = dev->data;
    d586:	68c5      	ldr	r5, [r0, #12]
	data->i2c = device_get_binding(config->i2c_name);
    d588:	6818      	ldr	r0, [r3, #0]
    d58a:	f008 fa7f 	bl	15a8c <z_impl_device_get_binding>
    d58e:	6068      	str	r0, [r5, #4]
	if (!data->i2c) {
    d590:	b960      	cbnz	r0, d5ac <ft5336_init+0x2c>
    d592:	4b0d      	ldr	r3, [pc, #52]	; (d5c8 <ft5336_init+0x48>)
    d594:	490d      	ldr	r1, [pc, #52]	; (d5cc <ft5336_init+0x4c>)
		LOG_ERR("Could not find I2C controller");
    d596:	480e      	ldr	r0, [pc, #56]	; (d5d0 <ft5336_init+0x50>)
    d598:	1ac9      	subs	r1, r1, r3
    d59a:	08c9      	lsrs	r1, r1, #3
    d59c:	0189      	lsls	r1, r1, #6
    d59e:	f041 0101 	orr.w	r1, r1, #1
    d5a2:	f00a fc93 	bl	17ecc <log_0>
		return -ENODEV;
    d5a6:	f06f 0012 	mvn.w	r0, #18
#else
	k_timer_init(&data->timer, ft5336_timer_handler, NULL);
#endif

	return 0;
}
    d5aa:	bd38      	pop	{r3, r4, r5, pc}
	data->dev = dev;
    d5ac:	602c      	str	r4, [r5, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d5ae:	2400      	movs	r4, #0
    d5b0:	4b08      	ldr	r3, [pc, #32]	; (d5d4 <ft5336_init+0x54>)
	k_timer_init(&data->timer, ft5336_timer_handler, NULL);
    d5b2:	f105 0018 	add.w	r0, r5, #24
    d5b6:	4622      	mov	r2, r4
    d5b8:	e9c5 3404 	strd	r3, r4, [r5, #16]
    d5bc:	4906      	ldr	r1, [pc, #24]	; (d5d8 <ft5336_init+0x58>)
    d5be:	60ec      	str	r4, [r5, #12]
    d5c0:	f015 fb54 	bl	22c6c <k_timer_init>
	return 0;
    d5c4:	4620      	mov	r0, r4
    d5c6:	e7f0      	b.n	d5aa <ft5336_init+0x2a>
    d5c8:	000232ec 	.word	0x000232ec
    d5cc:	0002336c 	.word	0x0002336c
    d5d0:	00026bce 	.word	0x00026bce
    d5d4:	0001baab 	.word	0x0001baab
    d5d8:	0000d5dd 	.word	0x0000d5dd

0000d5dc <ft5336_timer_handler>:
    d5dc:	1f03      	subs	r3, r0, #4
    d5de:	e8d3 2fef 	ldaex	r2, [r3]
    d5e2:	f042 0101 	orr.w	r1, r2, #1
    d5e6:	e8c3 1fec 	stlex	ip, r1, [r3]
    d5ea:	f1bc 0f00 	cmp.w	ip, #0
    d5ee:	d1f6      	bne.n	d5de <ft5336_timer_handler+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d5f0:	07d3      	lsls	r3, r2, #31
    d5f2:	d404      	bmi.n	d5fe <ft5336_timer_handler+0x22>
		k_queue_append(&work_q->queue, work);
    d5f4:	f1a0 010c 	sub.w	r1, r0, #12
    d5f8:	4801      	ldr	r0, [pc, #4]	; (d600 <ft5336_timer_handler+0x24>)
    d5fa:	f015 b8b6 	b.w	2276a <k_queue_append>
}
    d5fe:	4770      	bx	lr
    d600:	200010f8 	.word	0x200010f8

0000d604 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d604:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d606:	794b      	ldrb	r3, [r1, #5]
    d608:	2b01      	cmp	r3, #1
    d60a:	d02b      	beq.n	d664 <uarte_nrfx_configure+0x60>
    d60c:	2b03      	cmp	r3, #3
    d60e:	d126      	bne.n	d65e <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d610:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d612:	798b      	ldrb	r3, [r1, #6]
    d614:	2b03      	cmp	r3, #3
    d616:	d122      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d618:	79cd      	ldrb	r5, [r1, #7]
    d61a:	b125      	cbz	r5, d626 <uarte_nrfx_configure+0x22>
    d61c:	2d01      	cmp	r5, #1
    d61e:	d11e      	bne.n	d65e <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    d620:	6843      	ldr	r3, [r0, #4]
    d622:	791b      	ldrb	r3, [r3, #4]
    d624:	b1db      	cbz	r3, d65e <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d626:	790a      	ldrb	r2, [r1, #4]
    d628:	2a01      	cmp	r2, #1
    d62a:	d01d      	beq.n	d668 <uarte_nrfx_configure+0x64>
    d62c:	2a02      	cmp	r2, #2
    d62e:	d01f      	beq.n	d670 <uarte_nrfx_configure+0x6c>
    d630:	b9aa      	cbnz	r2, d65e <uarte_nrfx_configure+0x5a>
    d632:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d634:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d636:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    d638:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    d63c:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    d63e:	d06e      	beq.n	d71e <uarte_nrfx_configure+0x11a>
    d640:	d833      	bhi.n	d6aa <uarte_nrfx_configure+0xa6>
    d642:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    d646:	d06d      	beq.n	d724 <uarte_nrfx_configure+0x120>
    d648:	d81c      	bhi.n	d684 <uarte_nrfx_configure+0x80>
    d64a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    d64e:	d06b      	beq.n	d728 <uarte_nrfx_configure+0x124>
    d650:	d810      	bhi.n	d674 <uarte_nrfx_configure+0x70>
    d652:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    d656:	d06a      	beq.n	d72e <uarte_nrfx_configure+0x12a>
    d658:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    d65c:	d06a      	beq.n	d734 <uarte_nrfx_configure+0x130>
    d65e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d662:	e05b      	b.n	d71c <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    d664:	2700      	movs	r7, #0
    d666:	e7d4      	b.n	d612 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    d668:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d66c:	220e      	movs	r2, #14
    d66e:	e7e1      	b.n	d634 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    d670:	2400      	movs	r4, #0
    d672:	e7fb      	b.n	d66c <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    d674:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    d678:	d05f      	beq.n	d73a <uarte_nrfx_configure+0x136>
    d67a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    d67e:	d1ee      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    d680:	4b38      	ldr	r3, [pc, #224]	; (d764 <uarte_nrfx_configure+0x160>)
    d682:	e03e      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d684:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    d688:	d05a      	beq.n	d740 <uarte_nrfx_configure+0x13c>
    d68a:	d807      	bhi.n	d69c <uarte_nrfx_configure+0x98>
    d68c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    d690:	d058      	beq.n	d744 <uarte_nrfx_configure+0x140>
    d692:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    d696:	d1e2      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    d698:	4b33      	ldr	r3, [pc, #204]	; (d768 <uarte_nrfx_configure+0x164>)
    d69a:	e032      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d69c:	f647 2c12 	movw	ip, #31250	; 0x7a12
    d6a0:	4563      	cmp	r3, ip
    d6a2:	d1dc      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    d6a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    d6a8:	e02b      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d6aa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    d6ae:	d04b      	beq.n	d748 <uarte_nrfx_configure+0x144>
    d6b0:	d813      	bhi.n	d6da <uarte_nrfx_configure+0xd6>
    d6b2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    d6b6:	d04a      	beq.n	d74e <uarte_nrfx_configure+0x14a>
    d6b8:	d809      	bhi.n	d6ce <uarte_nrfx_configure+0xca>
    d6ba:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    d6be:	4563      	cmp	r3, ip
    d6c0:	d047      	beq.n	d752 <uarte_nrfx_configure+0x14e>
    d6c2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    d6c6:	d1ca      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    d6c8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    d6cc:	e019      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d6ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    d6d2:	d1c4      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    d6d4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    d6d8:	e013      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d6da:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    d6de:	d03b      	beq.n	d758 <uarte_nrfx_configure+0x154>
    d6e0:	d809      	bhi.n	d6f6 <uarte_nrfx_configure+0xf2>
    d6e2:	f8df c098 	ldr.w	ip, [pc, #152]	; d77c <uarte_nrfx_configure+0x178>
    d6e6:	4563      	cmp	r3, ip
    d6e8:	d039      	beq.n	d75e <uarte_nrfx_configure+0x15a>
    d6ea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    d6ee:	d1b6      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    d6f0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    d6f4:	e005      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d6f6:	f8df c088 	ldr.w	ip, [pc, #136]	; d780 <uarte_nrfx_configure+0x17c>
    d6fa:	4563      	cmp	r3, ip
    d6fc:	d1af      	bne.n	d65e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    d6fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    d702:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    d706:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    d708:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    d70a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    d70c:	4322      	orrs	r2, r4
    d70e:	3304      	adds	r3, #4
    d710:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d712:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    d716:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    d71a:	2000      	movs	r0, #0
}
    d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    d71e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    d722:	e7ee      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    d724:	4b11      	ldr	r3, [pc, #68]	; (d76c <uarte_nrfx_configure+0x168>)
    d726:	e7ec      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    d728:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    d72c:	e7e9      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    d72e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    d732:	e7e6      	b.n	d702 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    d734:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    d738:	e7e3      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    d73a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    d73e:	e7e0      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    d740:	4b0b      	ldr	r3, [pc, #44]	; (d770 <uarte_nrfx_configure+0x16c>)
    d742:	e7de      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    d744:	4b0b      	ldr	r3, [pc, #44]	; (d774 <uarte_nrfx_configure+0x170>)
    d746:	e7dc      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    d748:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    d74c:	e7d9      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    d74e:	4b0a      	ldr	r3, [pc, #40]	; (d778 <uarte_nrfx_configure+0x174>)
    d750:	e7d7      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    d752:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    d756:	e7d4      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    d758:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d75c:	e7d1      	b.n	d702 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    d75e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    d762:	e7ce      	b.n	d702 <uarte_nrfx_configure+0xfe>
    d764:	0013b000 	.word	0x0013b000
    d768:	004ea000 	.word	0x004ea000
    d76c:	00275000 	.word	0x00275000
    d770:	0075c000 	.word	0x0075c000
    d774:	003af000 	.word	0x003af000
    d778:	013a9000 	.word	0x013a9000
    d77c:	0003d090 	.word	0x0003d090
    d780:	000f4240 	.word	0x000f4240

0000d784 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d788:	4606      	mov	r6, r0
    d78a:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    d78c:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d78e:	f015 f979 	bl	22a84 <k_is_in_isr>
    d792:	b9b8      	cbnz	r0, d7c4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    d794:	4b28      	ldr	r3, [pc, #160]	; (d838 <uarte_nrfx_poll_out+0xb4>)
    d796:	781b      	ldrb	r3, [r3, #0]
    d798:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    d79c:	6872      	ldr	r2, [r6, #4]
    d79e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    d7a0:	b193      	cbz	r3, d7c8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    d7a2:	f04f 0320 	mov.w	r3, #32
    d7a6:	f3ef 8411 	mrs	r4, BASEPRI
    d7aa:	f383 8811 	msr	BASEPRI, r3
    d7ae:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    d7b2:	4630      	mov	r0, r6
    d7b4:	f00e fa09 	bl	1bbca <is_tx_ready>
    d7b8:	bb38      	cbnz	r0, d80a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    d7ba:	f384 8811 	msr	BASEPRI, r4
    d7be:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d7c2:	e7ee      	b.n	d7a2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d7c4:	2301      	movs	r3, #1
    d7c6:	e7e9      	b.n	d79c <uarte_nrfx_poll_out+0x18>
    d7c8:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    d7ca:	4630      	mov	r0, r6
    d7cc:	f00e f9fd 	bl	1bbca <is_tx_ready>
    d7d0:	b970      	cbnz	r0, d7f0 <uarte_nrfx_poll_out+0x6c>
    d7d2:	2001      	movs	r0, #1
    d7d4:	f00e fa25 	bl	1bc22 <nrfx_busy_wait>
    d7d8:	3c01      	subs	r4, #1
    d7da:	d1f6      	bne.n	d7ca <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    d7dc:	2100      	movs	r1, #0
    d7de:	2021      	movs	r0, #33	; 0x21
    d7e0:	f009 f8f8 	bl	169d4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d7e4:	e7f0      	b.n	d7c8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    d7e6:	f384 8811 	msr	BASEPRI, r4
    d7ea:	f3bf 8f6f 	isb	sy
}
    d7ee:	e7f5      	b.n	d7dc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    d7f0:	f04f 0320 	mov.w	r3, #32
    d7f4:	f3ef 8411 	mrs	r4, BASEPRI
    d7f8:	f383 8811 	msr	BASEPRI, r3
    d7fc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    d800:	4630      	mov	r0, r6
    d802:	f00e f9e2 	bl	1bbca <is_tx_ready>
    d806:	2800      	cmp	r0, #0
    d808:	d0ed      	beq.n	d7e6 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    d80a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d80c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    d80e:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d812:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d816:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d81a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    d81e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    d822:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    d826:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d82a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    d82c:	f384 8811 	msr	BASEPRI, r4
    d830:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d838:	2002a186 	.word	0x2002a186

0000d83c <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
    d83c:	4b07      	ldr	r3, [pc, #28]	; (d85c <nrf_gpio_cfg_output+0x20>)
    d83e:	4908      	ldr	r1, [pc, #32]	; (d860 <nrf_gpio_cfg_output+0x24>)
    *p_pin = pin_number & 0x1F;
    d840:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    d844:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    d846:	2801      	cmp	r0, #1
    d848:	bf14      	ite	ne
    d84a:	4618      	movne	r0, r3
    d84c:	4608      	moveq	r0, r1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d84e:	f102 0380 	add.w	r3, r2, #128	; 0x80
    d852:	2203      	movs	r2, #3
    d854:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    d858:	4770      	bx	lr
    d85a:	bf00      	nop
    d85c:	50842500 	.word	0x50842500
    d860:	50842800 	.word	0x50842800

0000d864 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    d864:	4b06      	ldr	r3, [pc, #24]	; (d880 <nrf_gpio_pin_set+0x1c>)
    d866:	4907      	ldr	r1, [pc, #28]	; (d884 <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    d868:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    d86c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    d86e:	2801      	cmp	r0, #1
    d870:	bf14      	ite	ne
    d872:	4618      	movne	r0, r3
    d874:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d876:	2301      	movs	r3, #1
    d878:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    d87a:	6083      	str	r3, [r0, #8]
}
    d87c:	4770      	bx	lr
    d87e:	bf00      	nop
    d880:	50842500 	.word	0x50842500
    d884:	50842800 	.word	0x50842800

0000d888 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d88a:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d88c:	2700      	movs	r7, #0
    d88e:	2101      	movs	r1, #1
    d890:	2200      	movs	r2, #0
    d892:	2008      	movs	r0, #8
    d894:	f7f6 fc0e 	bl	40b4 <z_arm_irq_priority_set>
    d898:	2008      	movs	r0, #8
    d89a:	f7f6 fbed 	bl	4078 <arch_irq_enable>
	return config->uarte_regs;
    d89e:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    d8a0:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    d8a2:	681c      	ldr	r4, [r3, #0]
        nrf_gpio_pin_set(pin_number);
    d8a4:	2014      	movs	r0, #20
    d8a6:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
    d8aa:	6035      	str	r5, [r6, #0]
    d8ac:	f7ff ffda 	bl	d864 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    d8b0:	2014      	movs	r0, #20
    d8b2:	f7ff ffc3 	bl	d83c <nrf_gpio_cfg_output>
    p_reg->PSEL.TXD = pseltxd;
    d8b6:	2214      	movs	r2, #20
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d8b8:	4b31      	ldr	r3, [pc, #196]	; (d980 <uarte_0_init+0xf8>)
        nrf_gpio_pin_set(pin_number);
    d8ba:	2013      	movs	r0, #19
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d8bc:	f8c3 7258 	str.w	r7, [r3, #600]	; 0x258
    d8c0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    d8c4:	2216      	movs	r2, #22
    d8c6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    d8ca:	f8c3 7254 	str.w	r7, [r3, #596]	; 0x254
        nrf_gpio_pin_set(pin_number);
    d8ce:	f7ff ffc9 	bl	d864 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
    d8d2:	2013      	movs	r0, #19
    d8d4:	f7ff ffb2 	bl	d83c <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
    d8d8:	2313      	movs	r3, #19
    d8da:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    d8de:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    d8e0:	68e9      	ldr	r1, [r5, #12]
    d8e2:	4628      	mov	r0, r5
    d8e4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    d8e8:	3104      	adds	r1, #4
    d8ea:	f7ff fe8b 	bl	d604 <uarte_nrfx_configure>
	if (err) {
    d8ee:	4607      	mov	r7, r0
    d8f0:	b9a8      	cbnz	r0, d91e <uarte_0_init+0x96>
	if (get_dev_config(dev)->ppi_endtx) {
    d8f2:	686b      	ldr	r3, [r5, #4]
    d8f4:	799b      	ldrb	r3, [r3, #6]
    d8f6:	b30b      	cbz	r3, d93c <uarte_0_init+0xb4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    d8f8:	f106 0012 	add.w	r0, r6, #18
    d8fc:	f000 fa32 	bl	dd64 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    d900:	4b20      	ldr	r3, [pc, #128]	; (d984 <uarte_0_init+0xfc>)
    d902:	4298      	cmp	r0, r3
    d904:	d00d      	beq.n	d922 <uarte_0_init+0x9a>
    d906:	4b20      	ldr	r3, [pc, #128]	; (d988 <uarte_0_init+0x100>)
    d908:	4920      	ldr	r1, [pc, #128]	; (d98c <uarte_0_init+0x104>)
		LOG_ERR("Failed to allocate PPI Channel");
    d90a:	4821      	ldr	r0, [pc, #132]	; (d990 <uarte_0_init+0x108>)
    d90c:	1ac9      	subs	r1, r1, r3
    d90e:	08c9      	lsrs	r1, r1, #3
    d910:	0189      	lsls	r1, r1, #6
    d912:	f041 0101 	orr.w	r1, r1, #1
    d916:	f00a fad9 	bl	17ecc <log_0>
		return -EIO;
    d91a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    d91e:	4638      	mov	r0, r7
    d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    d922:	7cb3      	ldrb	r3, [r6, #18]
    d924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d928:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    d92c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    d930:	2301      	movs	r3, #1
    d932:	7cb2      	ldrb	r2, [r6, #18]
    d934:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    d936:	4a17      	ldr	r2, [pc, #92]	; (d994 <uarte_0_init+0x10c>)
    d938:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d93c:	2308      	movs	r3, #8
    d93e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d942:	2300      	movs	r3, #0
    d944:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    d948:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    d94c:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d950:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    d954:	2301      	movs	r3, #1
    d956:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d95a:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    d95c:	686b      	ldr	r3, [r5, #4]
    d95e:	799b      	ldrb	r3, [r3, #6]
    d960:	b91b      	cbnz	r3, d96a <uarte_0_init+0xe2>
    p_reg->INTENSET = mask;
    d962:	f44f 7380 	mov.w	r3, #256	; 0x100
    d966:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    d96a:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    d96c:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d96e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d972:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d976:	2301      	movs	r3, #1
    d978:	60a3      	str	r3, [r4, #8]
    d97a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    d97c:	e7cf      	b.n	d91e <uarte_0_init+0x96>
    d97e:	bf00      	nop
    d980:	50842500 	.word	0x50842500
    d984:	0bad0000 	.word	0x0bad0000
    d988:	000232ec 	.word	0x000232ec
    d98c:	000233e4 	.word	0x000233e4
    d990:	00026bfa 	.word	0x00026bfa
    d994:	50017000 	.word	0x50017000

0000d998 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    d998:	b508      	push	{r3, lr}
	z_impl_log_panic();
    d99a:	f7f4 fd7f 	bl	249c <z_impl_log_panic>
    d99e:	4b06      	ldr	r3, [pc, #24]	; (d9b8 <k_sys_fatal_error_handler+0x20>)
    d9a0:	4906      	ldr	r1, [pc, #24]	; (d9bc <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    d9a2:	4807      	ldr	r0, [pc, #28]	; (d9c0 <k_sys_fatal_error_handler+0x28>)
    d9a4:	1ac9      	subs	r1, r1, r3
    d9a6:	08c9      	lsrs	r1, r1, #3
    d9a8:	0189      	lsls	r1, r1, #6
    d9aa:	f041 0101 	orr.w	r1, r1, #1
    d9ae:	f00a fa8d 	bl	17ecc <log_0>
	sys_arch_reboot(0);
    d9b2:	2000      	movs	r0, #0
    d9b4:	f7f6 feac 	bl	4710 <sys_arch_reboot>

	CODE_UNREACHABLE;
    d9b8:	000232ec 	.word	0x000232ec
    d9bc:	00023364 	.word	0x00023364
    d9c0:	00026c29 	.word	0x00026c29

0000d9c4 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    d9c4:	4b06      	ldr	r3, [pc, #24]	; (d9e0 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    d9c6:	681b      	ldr	r3, [r3, #0]
    d9c8:	2b07      	cmp	r3, #7
    d9ca:	d107      	bne.n	d9dc <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    d9cc:	4b05      	ldr	r3, [pc, #20]	; (d9e4 <nrf53_errata_42+0x20>)
    d9ce:	681b      	ldr	r3, [r3, #0]
    d9d0:	3b02      	subs	r3, #2
    d9d2:	2b03      	cmp	r3, #3
    d9d4:	d802      	bhi.n	d9dc <nrf53_errata_42+0x18>
    d9d6:	4a04      	ldr	r2, [pc, #16]	; (d9e8 <nrf53_errata_42+0x24>)
    d9d8:	5cd0      	ldrb	r0, [r2, r3]
    d9da:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    d9dc:	2000      	movs	r0, #0
    #endif
}
    d9de:	4770      	bx	lr
    d9e0:	00ff0130 	.word	0x00ff0130
    d9e4:	00ff0134 	.word	0x00ff0134
    d9e8:	00026c51 	.word	0x00026c51

0000d9ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    d9ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d9f0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    d9f4:	4b03      	ldr	r3, [pc, #12]	; (da04 <SystemCoreClockUpdate+0x18>)
    d9f6:	f002 0203 	and.w	r2, r2, #3
    d9fa:	40d3      	lsrs	r3, r2
    d9fc:	4a02      	ldr	r2, [pc, #8]	; (da08 <SystemCoreClockUpdate+0x1c>)
    d9fe:	6013      	str	r3, [r2, #0]
#endif
}
    da00:	4770      	bx	lr
    da02:	bf00      	nop
    da04:	07a12000 	.word	0x07a12000
    da08:	20000390 	.word	0x20000390

0000da0c <SystemInit>:

void SystemInit(void)
{
    da0c:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    da0e:	f7ff ffd9 	bl	d9c4 <nrf53_errata_42>
    da12:	b148      	cbz	r0, da28 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    da14:	4b35      	ldr	r3, [pc, #212]	; (daec <SystemInit+0xe0>)
    da16:	681a      	ldr	r2, [r3, #0]
    da18:	b932      	cbnz	r2, da28 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    da1a:	210d      	movs	r1, #13
    da1c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    da1e:	2101      	movs	r1, #1
    da20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    da24:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    da26:	601a      	str	r2, [r3, #0]
{
    da28:	2200      	movs	r2, #0
    da2a:	00d3      	lsls	r3, r2, #3
    da2c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    da30:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    da34:	3101      	adds	r1, #1
    da36:	d007      	beq.n	da48 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    da38:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    da3c:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    da3e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    da42:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    da44:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    da46:	d1f0      	bne.n	da2a <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    da48:	f7ff ffbc 	bl	d9c4 <nrf53_errata_42>
    da4c:	2800      	cmp	r0, #0
    da4e:	d146      	bne.n	dade <SystemInit+0xd2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    da50:	f7ff ffb8 	bl	d9c4 <nrf53_errata_42>
    da54:	b138      	cbz	r0, da66 <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    da56:	4b26      	ldr	r3, [pc, #152]	; (daf0 <SystemInit+0xe4>)
    da58:	4a26      	ldr	r2, [pc, #152]	; (daf4 <SystemInit+0xe8>)
    da5a:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    da5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da60:	2201      	movs	r2, #1
    da62:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    da66:	4b24      	ldr	r3, [pc, #144]	; (daf8 <SystemInit+0xec>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    da68:	681b      	ldr	r3, [r3, #0]
    da6a:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    da6c:	bf02      	ittt	eq
    da6e:	2200      	moveq	r2, #0
    da70:	4b22      	ldreq	r3, [pc, #136]	; (dafc <SystemInit+0xf0>)
    da72:	601a      	streq	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    da74:	f7ff ffa6 	bl	d9c4 <nrf53_errata_42>
    da78:	b150      	cbz	r0, da90 <SystemInit+0x84>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    da7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    da82:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    da84:	bf42      	ittt	mi
    da86:	2200      	movmi	r2, #0
    da88:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    da8c:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    da90:	4b19      	ldr	r3, [pc, #100]	; (daf8 <SystemInit+0xec>)
                if (var1 == 0x07)
    da92:	681b      	ldr	r3, [r3, #0]
    da94:	2b07      	cmp	r3, #7
    da96:	d109      	bne.n	daac <SystemInit+0xa0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    da98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    daa0:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    daa2:	bf44      	itt	mi
    daa4:	f06f 0201 	mvnmi.w	r2, #1
    daa8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    daac:	f7ff ff8a 	bl	d9c4 <nrf53_errata_42>
    dab0:	b110      	cbz	r0, dab8 <SystemInit+0xac>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    dab2:	2265      	movs	r2, #101	; 0x65
    dab4:	4b12      	ldr	r3, [pc, #72]	; (db00 <SystemInit+0xf4>)
    dab6:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    dab8:	4a12      	ldr	r2, [pc, #72]	; (db04 <SystemInit+0xf8>)
    daba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    dabe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    dac2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    dac6:	4a10      	ldr	r2, [pc, #64]	; (db08 <SystemInit+0xfc>)
    dac8:	4b10      	ldr	r3, [pc, #64]	; (db0c <SystemInit+0x100>)
    daca:	6811      	ldr	r1, [r2, #0]
    dacc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    dad0:	69d2      	ldr	r2, [r2, #28]
    dad2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    dad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    dada:	f7ff bf87 	b.w	d9ec <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    dade:	2229      	movs	r2, #41	; 0x29
    dae0:	4b07      	ldr	r3, [pc, #28]	; (db00 <SystemInit+0xf4>)
    dae2:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    dae4:	2203      	movs	r2, #3
    dae6:	631a      	str	r2, [r3, #48]	; 0x30
    dae8:	e7b2      	b.n	da50 <SystemInit+0x44>
    daea:	bf00      	nop
    daec:	50004a20 	.word	0x50004a20
    daf0:	50039530 	.word	0x50039530
    daf4:	beef0044 	.word	0xbeef0044
    daf8:	00ff0130 	.word	0x00ff0130
    dafc:	5003254c 	.word	0x5003254c
    db00:	5000470c 	.word	0x5000470c
    db04:	e000ed00 	.word	0xe000ed00
    db08:	00ff8000 	.word	0x00ff8000
    db0c:	50006000 	.word	0x50006000

0000db10 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    db10:	4b04      	ldr	r3, [pc, #16]	; (db24 <nrfx_clock_init+0x14>)
    db12:	791a      	ldrb	r2, [r3, #4]
    db14:	b922      	cbnz	r2, db20 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    db16:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    db18:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    db1a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    db1c:	4802      	ldr	r0, [pc, #8]	; (db28 <nrfx_clock_init+0x18>)
    db1e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    db20:	4802      	ldr	r0, [pc, #8]	; (db2c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    db22:	4770      	bx	lr
    db24:	20025c28 	.word	0x20025c28
    db28:	0bad0000 	.word	0x0bad0000
    db2c:	0bad000c 	.word	0x0bad000c

0000db30 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    db30:	2803      	cmp	r0, #3
    db32:	d847      	bhi.n	dbc4 <nrfx_clock_start+0x94>
    db34:	e8df f000 	tbb	[pc, r0]
    db38:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    db3c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    db40:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    db44:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    db48:	03c9      	lsls	r1, r1, #15
    db4a:	d511      	bpl.n	db70 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    db4c:	f003 0303 	and.w	r3, r3, #3
    db50:	2b02      	cmp	r3, #2
    db52:	d10d      	bne.n	db70 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    db54:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db58:	2200      	movs	r2, #0
    db5a:	4b1b      	ldr	r3, [pc, #108]	; (dbc8 <nrfx_clock_start+0x98>)
    db5c:	601a      	str	r2, [r3, #0]
    db5e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    db60:	2202      	movs	r2, #2
    db62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db6a:	2201      	movs	r2, #1
    db6c:	609a      	str	r2, [r3, #8]
}
    db6e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    db70:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db74:	2201      	movs	r2, #1
    db76:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    db7a:	e7ed      	b.n	db58 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db7c:	2200      	movs	r2, #0
    db7e:	4b13      	ldr	r3, [pc, #76]	; (dbcc <nrfx_clock_start+0x9c>)
    db80:	601a      	str	r2, [r3, #0]
    db82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    db84:	2201      	movs	r2, #1
    db86:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db8e:	601a      	str	r2, [r3, #0]
}
    db90:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db92:	2200      	movs	r2, #0
    db94:	4b0e      	ldr	r3, [pc, #56]	; (dbd0 <nrfx_clock_start+0xa0>)
    db96:	601a      	str	r2, [r3, #0]
    db98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    db9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    db9e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dba2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dba6:	2201      	movs	r2, #1
    dba8:	621a      	str	r2, [r3, #32]
}
    dbaa:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dbac:	2200      	movs	r2, #0
    dbae:	4b09      	ldr	r3, [pc, #36]	; (dbd4 <nrfx_clock_start+0xa4>)
    dbb0:	601a      	str	r2, [r3, #0]
    dbb2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    dbb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    dbb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dbbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dbc0:	2201      	movs	r2, #1
    dbc2:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    dbc4:	4770      	bx	lr
    dbc6:	bf00      	nop
    dbc8:	50005104 	.word	0x50005104
    dbcc:	50005100 	.word	0x50005100
    dbd0:	50005124 	.word	0x50005124
    dbd4:	50005120 	.word	0x50005120

0000dbd8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    dbd8:	b570      	push	{r4, r5, r6, lr}
    dbda:	4604      	mov	r4, r0
    dbdc:	2803      	cmp	r0, #3
    dbde:	d83e      	bhi.n	dc5e <nrfx_clock_stop+0x86>
    dbe0:	e8df f000 	tbb	[pc, r0]
    dbe4:	4b3e2202 	.word	0x4b3e2202
    p_reg->INTENCLR = mask;
    dbe8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dbec:	2202      	movs	r2, #2
    dbee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dbf2:	2200      	movs	r2, #0
    dbf4:	f503 7382 	add.w	r3, r3, #260	; 0x104
    dbf8:	601a      	str	r2, [r3, #0]
    dbfa:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dbfc:	4b28      	ldr	r3, [pc, #160]	; (dca0 <nrfx_clock_stop+0xc8>)
    dbfe:	2201      	movs	r2, #1
    dc00:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    dc04:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc08:	601a      	str	r2, [r3, #0]
    switch (domain)
    dc0a:	2c02      	cmp	r4, #2
    dc0c:	d042      	beq.n	dc94 <nrfx_clock_stop+0xbc>
    dc0e:	2c03      	cmp	r4, #3
    dc10:	d043      	beq.n	dc9a <nrfx_clock_stop+0xc2>
    dc12:	bb24      	cbnz	r4, dc5e <nrfx_clock_stop+0x86>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dc14:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    dc18:	03db      	lsls	r3, r3, #15
    dc1a:	d520      	bpl.n	dc5e <nrfx_clock_stop+0x86>
    dc1c:	2001      	movs	r0, #1
    dc1e:	f00e f800 	bl	1bc22 <nrfx_busy_wait>
    dc22:	3d01      	subs	r5, #1
    dc24:	d1f1      	bne.n	dc0a <nrfx_clock_stop+0x32>
    dc26:	e01a      	b.n	dc5e <nrfx_clock_stop+0x86>
    p_reg->INTENCLR = mask;
    dc28:	2301      	movs	r3, #1
    dc2a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc2e:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc30:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc34:	4a1b      	ldr	r2, [pc, #108]	; (dca4 <nrfx_clock_stop+0xcc>)
    p_reg->INTENCLR = mask;
    dc36:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc3a:	6011      	str	r1, [r2, #0]
    dc3c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc3e:	4a1a      	ldr	r2, [pc, #104]	; (dca8 <nrfx_clock_stop+0xd0>)
    dc40:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    dc42:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dc46:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    dc4a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dc4e:	03d2      	lsls	r2, r2, #15
    dc50:	d505      	bpl.n	dc5e <nrfx_clock_stop+0x86>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    dc52:	b123      	cbz	r3, dc5e <nrfx_clock_stop+0x86>
    dc54:	2001      	movs	r0, #1
    dc56:	f00d ffe4 	bl	1bc22 <nrfx_busy_wait>
    dc5a:	3d01      	subs	r5, #1
    dc5c:	d1f1      	bne.n	dc42 <nrfx_clock_stop+0x6a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    dc5e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    dc60:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc64:	f44f 7200 	mov.w	r2, #512	; 0x200
    dc68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc6c:	2200      	movs	r2, #0
    dc6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
    dc72:	601a      	str	r2, [r3, #0]
    dc74:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc76:	4b0d      	ldr	r3, [pc, #52]	; (dcac <nrfx_clock_stop+0xd4>)
    dc78:	e7c1      	b.n	dbfe <nrfx_clock_stop+0x26>
    p_reg->INTENCLR = mask;
    dc7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    dc82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc86:	2200      	movs	r2, #0
    dc88:	f503 7390 	add.w	r3, r3, #288	; 0x120
    dc8c:	601a      	str	r2, [r3, #0]
    dc8e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc90:	4b07      	ldr	r3, [pc, #28]	; (dcb0 <nrfx_clock_stop+0xd8>)
    dc92:	e7b4      	b.n	dbfe <nrfx_clock_stop+0x26>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    dc94:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    dc98:	e7be      	b.n	dc18 <nrfx_clock_stop+0x40>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    dc9a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    dc9e:	e7bb      	b.n	dc18 <nrfx_clock_stop+0x40>
    dca0:	5000500c 	.word	0x5000500c
    dca4:	50005100 	.word	0x50005100
    dca8:	50005004 	.word	0x50005004
    dcac:	50005024 	.word	0x50005024
    dcb0:	5000501c 	.word	0x5000501c

0000dcb4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dcb4:	4b26      	ldr	r3, [pc, #152]	; (dd50 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    dcb6:	b510      	push	{r4, lr}
    dcb8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    dcba:	b152      	cbz	r2, dcd2 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcbc:	2000      	movs	r0, #0
    dcbe:	6018      	str	r0, [r3, #0]
    dcc0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dcc2:	2201      	movs	r2, #1
    dcc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dcc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    dccc:	4b21      	ldr	r3, [pc, #132]	; (dd54 <nrfx_power_clock_irq_handler+0xa0>)
    dcce:	681b      	ldr	r3, [r3, #0]
    dcd0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dcd2:	4b21      	ldr	r3, [pc, #132]	; (dd58 <nrfx_power_clock_irq_handler+0xa4>)
    dcd4:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    dcd6:	b18a      	cbz	r2, dcfc <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcd8:	2200      	movs	r2, #0
    dcda:	601a      	str	r2, [r3, #0]
    dcdc:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dcde:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dce2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dce6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    dcea:	f002 0203 	and.w	r2, r2, #3
    dcee:	2a01      	cmp	r2, #1
    dcf0:	f04f 0102 	mov.w	r1, #2
    dcf4:	d124      	bne.n	dd40 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    dcf6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcfa:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dcfc:	4b17      	ldr	r3, [pc, #92]	; (dd5c <nrfx_power_clock_irq_handler+0xa8>)
    dcfe:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    dd00:	b162      	cbz	r2, dd1c <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd02:	2200      	movs	r2, #0
    dd04:	601a      	str	r2, [r3, #0]
    dd06:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dd08:	f44f 7280 	mov.w	r2, #256	; 0x100
    dd0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dd10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    dd14:	4b0f      	ldr	r3, [pc, #60]	; (dd54 <nrfx_power_clock_irq_handler+0xa0>)
    dd16:	2004      	movs	r0, #4
    dd18:	681b      	ldr	r3, [r3, #0]
    dd1a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dd1c:	4b10      	ldr	r3, [pc, #64]	; (dd60 <nrfx_power_clock_irq_handler+0xac>)
    dd1e:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    dd20:	b1aa      	cbz	r2, dd4e <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    dd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd26:	2200      	movs	r2, #0
    dd28:	601a      	str	r2, [r3, #0]
    dd2a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dd2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    dd30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dd34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    dd38:	4b06      	ldr	r3, [pc, #24]	; (dd54 <nrfx_power_clock_irq_handler+0xa0>)
    dd3a:	2005      	movs	r0, #5
    dd3c:	681b      	ldr	r3, [r3, #0]
    dd3e:	4718      	bx	r3
    dd40:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    dd44:	4b03      	ldr	r3, [pc, #12]	; (dd54 <nrfx_power_clock_irq_handler+0xa0>)
    dd46:	2001      	movs	r0, #1
    dd48:	681b      	ldr	r3, [r3, #0]
    dd4a:	4798      	blx	r3
    dd4c:	e7d6      	b.n	dcfc <nrfx_power_clock_irq_handler+0x48>
}
    dd4e:	bd10      	pop	{r4, pc}
    dd50:	50005100 	.word	0x50005100
    dd54:	20025c28 	.word	0x20025c28
    dd58:	50005104 	.word	0x50005104
    dd5c:	50005120 	.word	0x50005120
    dd60:	50005124 	.word	0x50005124

0000dd64 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    dd64:	4a0a      	ldr	r2, [pc, #40]	; (dd90 <nrfx_dppi_channel_alloc+0x2c>)
{
    dd66:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    dd68:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    dd6a:	43e6      	mvns	r6, r4
    dd6c:	d00e      	beq.n	dd8c <nrfx_dppi_channel_alloc+0x28>
    dd6e:	2300      	movs	r3, #0
    dd70:	b2d9      	uxtb	r1, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    dd72:	fa26 f501 	lsr.w	r5, r6, r1
    dd76:	07ed      	lsls	r5, r5, #31
    dd78:	f103 0301 	add.w	r3, r3, #1
    dd7c:	d5f8      	bpl.n	dd70 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    dd7e:	2301      	movs	r3, #1
    dd80:	408b      	lsls	r3, r1
    dd82:	4323      	orrs	r3, r4
    *p_channel = channel;
    dd84:	7001      	strb	r1, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    dd86:	4803      	ldr	r0, [pc, #12]	; (dd94 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    dd88:	6013      	str	r3, [r2, #0]
}
    dd8a:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    dd8c:	4802      	ldr	r0, [pc, #8]	; (dd98 <nrfx_dppi_channel_alloc+0x34>)
    dd8e:	e7fc      	b.n	dd8a <nrfx_dppi_channel_alloc+0x26>
    dd90:	20025c30 	.word	0x20025c30
    dd94:	0bad0000 	.word	0x0bad0000
    dd98:	0bad0002 	.word	0x0bad0002

0000dd9c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    dd9c:	2301      	movs	r3, #1
    dd9e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    dda2:	f010 0fff 	tst.w	r0, #255	; 0xff
    dda6:	d012      	beq.n	ddce <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    dda8:	f04f 0320 	mov.w	r3, #32
    ddac:	f3ef 8111 	mrs	r1, BASEPRI
    ddb0:	f383 8811 	msr	BASEPRI, r3
    ddb4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    ddb8:	4a06      	ldr	r2, [pc, #24]	; (ddd4 <nrfx_gpiote_channel_free+0x38>)
    ddba:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    ddbc:	ea23 0000 	bic.w	r0, r3, r0
    ddc0:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    ddc2:	f381 8811 	msr	BASEPRI, r1
    ddc6:	f3bf 8f6f 	isb	sy
    ddca:	4803      	ldr	r0, [pc, #12]	; (ddd8 <nrfx_gpiote_channel_free+0x3c>)
    ddcc:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    ddce:	4803      	ldr	r0, [pc, #12]	; (dddc <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ddd0:	4770      	bx	lr
    ddd2:	bf00      	nop
    ddd4:	20025c34 	.word	0x20025c34
    ddd8:	0bad0000 	.word	0x0bad0000
    dddc:	0bad0004 	.word	0x0bad0004

0000dde0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    dde4:	22ff      	movs	r2, #255	; 0xff
{
    dde6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    dde8:	2601      	movs	r6, #1
{
    ddea:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    ddec:	f8df e058 	ldr.w	lr, [pc, #88]	; de48 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    ddf0:	4814      	ldr	r0, [pc, #80]	; (de44 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    ddf2:	f8df 8058 	ldr.w	r8, [pc, #88]	; de4c <nrfx_gpiote_channel_alloc+0x6c>
    ddf6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    ddf8:	f04f 0120 	mov.w	r1, #32
    ddfc:	f3ef 8c11 	mrs	ip, BASEPRI
    de00:	f381 8811 	msr	BASEPRI, r1
    de04:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    de08:	fa22 f103 	lsr.w	r1, r2, r3
    de0c:	07c9      	lsls	r1, r1, #31
    de0e:	d50a      	bpl.n	de26 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    de10:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    de14:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    de18:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    de1a:	bf01      	itttt	eq
    de1c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    de1e:	4339      	orreq	r1, r7
    de20:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    de24:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    de26:	f38c 8811 	msr	BASEPRI, ip
    de2a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    de2e:	4540      	cmp	r0, r8
    de30:	d005      	beq.n	de3e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    de32:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    de36:	439a      	bics	r2, r3
    de38:	f104 0401 	add.w	r4, r4, #1
    de3c:	d1db      	bne.n	ddf6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de42:	bf00      	nop
    de44:	0bad0002 	.word	0x0bad0002
    de48:	20025c34 	.word	0x20025c34
    de4c:	0bad0000 	.word	0x0bad0000

0000de50 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    de50:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de52:	4c08      	ldr	r4, [pc, #32]	; (de74 <nrfx_ipc_init+0x24>)
{
    de54:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de56:	7923      	ldrb	r3, [r4, #4]
{
    de58:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    de5a:	b943      	cbnz	r3, de6e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    de5c:	202a      	movs	r0, #42	; 0x2a
    de5e:	f7f6 f90b 	bl	4078 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    de62:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    de64:	4804      	ldr	r0, [pc, #16]	; (de78 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    de66:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    de68:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    de6a:	60a5      	str	r5, [r4, #8]
}
    de6c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    de6e:	4803      	ldr	r0, [pc, #12]	; (de7c <nrfx_ipc_init+0x2c>)
    de70:	e7fc      	b.n	de6c <nrfx_ipc_init+0x1c>
    de72:	bf00      	nop
    de74:	20025c94 	.word	0x20025c94
    de78:	0bad0000 	.word	0x0bad0000
    de7c:	0bad000c 	.word	0x0bad000c

0000de80 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    de80:	2300      	movs	r3, #0
{
    de82:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    de84:	4a0d      	ldr	r2, [pc, #52]	; (debc <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    de86:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    de8a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    de8e:	3301      	adds	r3, #1
    de90:	2b10      	cmp	r3, #16
    de92:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    de96:	d1f6      	bne.n	de86 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    de98:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    de9a:	4a08      	ldr	r2, [pc, #32]	; (debc <nrfx_ipc_config_load+0x3c>)
    de9c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    dea0:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    dea4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    dea8:	3301      	adds	r3, #1
    deaa:	2b10      	cmp	r3, #16
    deac:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    deb0:	d1f6      	bne.n	dea0 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    deb2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    deb6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    deba:	bd30      	pop	{r4, r5, pc}
    debc:	5002a000 	.word	0x5002a000

0000dec0 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    dec0:	2301      	movs	r3, #1
    dec2:	4a02      	ldr	r2, [pc, #8]	; (decc <nrfx_ipc_receive_event_enable+0xc>)
    dec4:	4083      	lsls	r3, r0
    dec6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    deca:	4770      	bx	lr
    decc:	5002a000 	.word	0x5002a000

0000ded0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    ded0:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    ded2:	4a02      	ldr	r2, [pc, #8]	; (dedc <nrfx_ipc_receive_event_disable+0xc>)
    ded4:	4083      	lsls	r3, r0
    ded6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    deda:	4770      	bx	lr
    dedc:	5002a000 	.word	0x5002a000

0000dee0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    dee0:	4b0c      	ldr	r3, [pc, #48]	; (df14 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    dee2:	b430      	push	{r4, r5}
    dee4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
    dee8:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    deea:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    deec:	2500      	movs	r5, #0
    while (bitmask)
    deee:	b922      	cbnz	r2, defa <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    def0:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    def2:	4b09      	ldr	r3, [pc, #36]	; (df18 <nrfx_ipc_irq_handler+0x38>)
    def4:	681a      	ldr	r2, [r3, #0]
    def6:	6899      	ldr	r1, [r3, #8]
    def8:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    defa:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
    defe:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
    df02:	fa04 f103 	lsl.w	r1, r4, r3
    df06:	ea22 0201 	bic.w	r2, r2, r1
    df0a:	4904      	ldr	r1, [pc, #16]	; (df1c <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    df0c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df0e:	50cd      	str	r5, [r1, r3]
}
    df10:	e7ed      	b.n	deee <nrfx_ipc_irq_handler+0xe>
    df12:	bf00      	nop
    df14:	5002a000 	.word	0x5002a000
    df18:	20025c94 	.word	0x20025c94
    df1c:	5002a100 	.word	0x5002a100

0000df20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    df20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    df22:	f003 021f 	and.w	r2, r3, #31
    df26:	6002      	str	r2, [r0, #0]
}
    df28:	4a03      	ldr	r2, [pc, #12]	; (df38 <nrf_gpio_pin_port_decode+0x18>)
    df2a:	4804      	ldr	r0, [pc, #16]	; (df3c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    df2c:	095b      	lsrs	r3, r3, #5
}
    df2e:	2b01      	cmp	r3, #1
    df30:	bf08      	it	eq
    df32:	4610      	moveq	r0, r2
    df34:	4770      	bx	lr
    df36:	bf00      	nop
    df38:	50842800 	.word	0x50842800
    df3c:	50842500 	.word	0x50842500

0000df40 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    df40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    df44:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    df46:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    df48:	2024      	movs	r0, #36	; 0x24
    df4a:	4d52      	ldr	r5, [pc, #328]	; (e094 <nrfx_spim_init+0x154>)
    df4c:	fb00 5004 	mla	r0, r0, r4, r5
    df50:	7f00      	ldrb	r0, [r0, #28]
    df52:	2800      	cmp	r0, #0
    df54:	f040 8099 	bne.w	e08a <nrfx_spim_init+0x14a>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    df58:	2c00      	cmp	r4, #0
    df5a:	f040 8098 	bne.w	e08e <nrfx_spim_init+0x14e>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    df5e:	f8d8 4000 	ldr.w	r4, [r8]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    df62:	e9c5 2300 	strd	r2, r3, [r5]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    df66:	7b0b      	ldrb	r3, [r1, #12]
    df68:	7808      	ldrb	r0, [r1, #0]
    df6a:	2b01      	cmp	r3, #1
    df6c:	d87b      	bhi.n	e066 <nrfx_spim_init+0x126>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    df6e:	f00d fe83 	bl	1bc78 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    df72:	780b      	ldrb	r3, [r1, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    df74:	a801      	add	r0, sp, #4
    df76:	9301      	str	r3, [sp, #4]
    df78:	f7ff ffd2 	bl	df20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    df7c:	2201      	movs	r2, #1
    df7e:	9b01      	ldr	r3, [sp, #4]
    df80:	3380      	adds	r3, #128	; 0x80
    df82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    df86:	784e      	ldrb	r6, [r1, #1]
    df88:	2eff      	cmp	r6, #255	; 0xff
    df8a:	d06f      	beq.n	e06c <nrfx_spim_init+0x12c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    df8c:	4630      	mov	r0, r6
    df8e:	f00d fe73 	bl	1bc78 <nrf_gpio_pin_clear>
        nrf_gpio_cfg_output(mosi_pin);
    df92:	4630      	mov	r0, r6
    df94:	f00d fe57 	bl	1bc46 <nrf_gpio_cfg_output>
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    df98:	788f      	ldrb	r7, [r1, #2]
    df9a:	2fff      	cmp	r7, #255	; 0xff
    df9c:	d069      	beq.n	e072 <nrfx_spim_init+0x132>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    df9e:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    dfa0:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    dfa4:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dfa6:	f7ff ffbb 	bl	df20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dfaa:	9b01      	ldr	r3, [sp, #4]
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    dfac:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dfb0:	3380      	adds	r3, #128	; 0x80
    dfb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    dfb6:	78c8      	ldrb	r0, [r1, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    dfb8:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    dfba:	f885 0020 	strb.w	r0, [r5, #32]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    dfbe:	d015      	beq.n	dfec <nrfx_spim_init+0xac>
    {
        if (p_config->ss_active_high)
    dfc0:	790b      	ldrb	r3, [r1, #4]
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d058      	beq.n	e078 <nrfx_spim_init+0x138>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
    dfc6:	f00d fe57 	bl	1bc78 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
    dfca:	78c8      	ldrb	r0, [r1, #3]
    dfcc:	f00d fe3b 	bl	1bc46 <nrf_gpio_cfg_output>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (p_config->use_hw_ss)
    dfd0:	7c4a      	ldrb	r2, [r1, #17]
    dfd2:	790b      	ldrb	r3, [r1, #4]
    dfd4:	b14a      	cbz	r2, dfea <nrfx_spim_init+0xaa>
        {
            p_cb->use_hw_ss = p_config->use_hw_ss;
    dfd6:	2201      	movs	r2, #1
    dfd8:	77aa      	strb	r2, [r5, #30]
            nrf_spim_csn_configure(p_spim,
    dfda:	78c8      	ldrb	r0, [r1, #3]
    dfdc:	7c8a      	ldrb	r2, [r1, #18]
    p_reg->PSEL.CSN = pin;
    dfde:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    dfe2:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    dfe6:	f8c4 2564 	str.w	r2, [r4, #1380]	; 0x564
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    dfea:	77eb      	strb	r3, [r5, #31]
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // - DCX (optional) - output.
    if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    dfec:	7bc8      	ldrb	r0, [r1, #15]
    dfee:	28ff      	cmp	r0, #255	; 0xff
    dff0:	d007      	beq.n	e002 <nrfx_spim_init+0xc2>
    {
        nrf_gpio_pin_set(p_config->dcx_pin);
    dff2:	f00d fe35 	bl	1bc60 <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->dcx_pin);
    dff6:	7bc8      	ldrb	r0, [r1, #15]
    dff8:	f00d fe25 	bl	1bc46 <nrf_gpio_cfg_output>
        nrf_spim_dcx_pin_set(p_spim, p_config->dcx_pin);
    dffc:	7bcb      	ldrb	r3, [r1, #15]
    p_reg->PSELDCX = dcx_pin;
    dffe:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
    }

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    e002:	7c0b      	ldrb	r3, [r1, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
    e004:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    e008:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
    e00a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    e00e:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    e010:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    e014:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    e018:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    e01c:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    e01e:	7b0a      	ldrb	r2, [r1, #12]
    e020:	3b00      	subs	r3, #0
    e022:	bf18      	it	ne
    e024:	2301      	movne	r3, #1
    switch (spi_mode)
    e026:	2a02      	cmp	r2, #2
    e028:	d029      	beq.n	e07e <nrfx_spim_init+0x13e>
    e02a:	2a03      	cmp	r2, #3
    e02c:	d02a      	beq.n	e084 <nrfx_spim_init+0x144>
    e02e:	2a01      	cmp	r2, #1
    e030:	d101      	bne.n	e036 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    e032:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    e036:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    e03a:	798b      	ldrb	r3, [r1, #6]
    e03c:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    e040:	2307      	movs	r3, #7
    e042:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    e046:	682b      	ldr	r3, [r5, #0]
    e048:	b12b      	cbz	r3, e056 <nrfx_spim_init+0x116>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    e04a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    e04e:	f340 3007 	sbfx	r0, r0, #12, #8
    e052:	f7f6 f811 	bl	4078 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    e056:	2300      	movs	r3, #0
    e058:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e05a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    e05c:	480e      	ldr	r0, [pc, #56]	; (e098 <nrfx_spim_init+0x158>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e05e:	772b      	strb	r3, [r5, #28]
}
    e060:	b003      	add	sp, #12
    e062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    e066:	f00d fdfb 	bl	1bc60 <nrf_gpio_pin_set>
    e06a:	e782      	b.n	df72 <nrfx_spim_init+0x32>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    e06c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e070:	e792      	b.n	df98 <nrfx_spim_init+0x58>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    e072:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e076:	e79e      	b.n	dfb6 <nrfx_spim_init+0x76>
            nrf_gpio_pin_set(p_config->ss_pin);
    e078:	f00d fdf2 	bl	1bc60 <nrf_gpio_pin_set>
    e07c:	e7a5      	b.n	dfca <nrfx_spim_init+0x8a>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    e07e:	f043 0304 	orr.w	r3, r3, #4
        break;
    e082:	e7d8      	b.n	e036 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    e084:	f043 0306 	orr.w	r3, r3, #6
        break;
    e088:	e7d5      	b.n	e036 <nrfx_spim_init+0xf6>
        return err_code;
    e08a:	4804      	ldr	r0, [pc, #16]	; (e09c <nrfx_spim_init+0x15c>)
    e08c:	e7e8      	b.n	e060 <nrfx_spim_init+0x120>
        return err_code;
    e08e:	4804      	ldr	r0, [pc, #16]	; (e0a0 <nrfx_spim_init+0x160>)
    e090:	e7e6      	b.n	e060 <nrfx_spim_init+0x120>
    e092:	bf00      	nop
    e094:	20025ca0 	.word	0x20025ca0
    e098:	0bad0000 	.word	0x0bad0000
    e09c:	0bad0005 	.word	0x0bad0005
    e0a0:	0bad0003 	.word	0x0bad0003

0000e0a4 <nrfx_spim_xfer>:
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    e0a4:	2324      	movs	r3, #36	; 0x24
{
    e0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e0aa:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->transfer_in_progress)
    e0ac:	4f43      	ldr	r7, [pc, #268]	; (e1bc <nrfx_spim_xfer+0x118>)
    e0ae:	4373      	muls	r3, r6
{
    e0b0:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
    e0b2:	18fa      	adds	r2, r7, r3
{
    e0b4:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    e0b6:	7f51      	ldrb	r1, [r2, #29]
{
    e0b8:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    e0ba:	2900      	cmp	r1, #0
    e0bc:	d17b      	bne.n	e1b6 <nrfx_spim_xfer+0x112>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    e0be:	58fb      	ldr	r3, [r7, r3]
    e0c0:	b123      	cbz	r3, e0cc <nrfx_spim_xfer+0x28>
    e0c2:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    e0c6:	bf04      	itt	eq
    e0c8:	2301      	moveq	r3, #1
    e0ca:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    e0cc:	f04f 0c24 	mov.w	ip, #36	; 0x24
    e0d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e0d4:	fb0c 7c06 	mla	ip, ip, r6, r7
    e0d8:	f10c 0e0c 	add.w	lr, ip, #12
    e0dc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e0e0:	f89c 0020 	ldrb.w	r0, [ip, #32]
    e0e4:	28ff      	cmp	r0, #255	; 0xff
    e0e6:	d007      	beq.n	e0f8 <nrfx_spim_xfer+0x54>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
    e0e8:	f89c 301e 	ldrb.w	r3, [ip, #30]
    e0ec:	b923      	cbnz	r3, e0f8 <nrfx_spim_xfer+0x54>
#endif
        {
            if (p_cb->ss_active_high)
    e0ee:	f89c 301f 	ldrb.w	r3, [ip, #31]
    e0f2:	b1bb      	cbz	r3, e124 <nrfx_spim_xfer+0x80>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
    e0f4:	f00d fdb4 	bl	1bc60 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    e0f8:	6829      	ldr	r1, [r5, #0]
    e0fa:	b121      	cbz	r1, e106 <nrfx_spim_xfer+0x62>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    e0fc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    e100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e104:	d106      	bne.n	e114 <nrfx_spim_xfer+0x70>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    e106:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    e108:	b17a      	cbz	r2, e12a <nrfx_spim_xfer+0x86>
    e10a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    e10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e112:	d00a      	beq.n	e12a <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
    e114:	2324      	movs	r3, #36	; 0x24
    e116:	fb03 7606 	mla	r6, r3, r6, r7
    e11a:	2300      	movs	r3, #0
        return err_code;
    e11c:	4828      	ldr	r0, [pc, #160]	; (e1c0 <nrfx_spim_xfer+0x11c>)
        p_cb->transfer_in_progress = false;
    e11e:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
    e124:	f00d fda8 	bl	1bc78 <nrf_gpio_pin_clear>
    e128:	e7e6      	b.n	e0f8 <nrfx_spim_xfer+0x54>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    e12a:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    e12e:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e130:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    e134:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    e136:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e13a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e13e:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    e140:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e144:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    e148:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    e14c:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    e150:	bf18      	it	ne
    e152:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    e154:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    e158:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    e15c:	bf18      	it	ne
    e15e:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    e160:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    e164:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e168:	bf04      	itt	eq
    e16a:	2201      	moveq	r2, #1
    e16c:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
    e16e:	2224      	movs	r2, #36	; 0x24
    e170:	4372      	muls	r2, r6
    e172:	58ba      	ldr	r2, [r7, r2]
    e174:	b9b2      	cbnz	r2, e1a4 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    e176:	b919      	cbnz	r1, e180 <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e178:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    e17c:	2a00      	cmp	r2, #0
    e17e:	d0fb      	beq.n	e178 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e180:	2324      	movs	r3, #36	; 0x24
    e182:	fb03 7606 	mla	r6, r3, r6, r7
    e186:	f896 0020 	ldrb.w	r0, [r6, #32]
    e18a:	28ff      	cmp	r0, #255	; 0xff
    e18c:	d005      	beq.n	e19a <nrfx_spim_xfer+0xf6>
            if (!p_cb->use_hw_ss)
    e18e:	7fb3      	ldrb	r3, [r6, #30]
    e190:	b91b      	cbnz	r3, e19a <nrfx_spim_xfer+0xf6>
                if (p_cb->ss_active_high)
    e192:	7ff3      	ldrb	r3, [r6, #31]
    e194:	b11b      	cbz	r3, e19e <nrfx_spim_xfer+0xfa>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
    e196:	f00d fd6f 	bl	1bc78 <nrf_gpio_pin_clear>
    return err_code;
    e19a:	480a      	ldr	r0, [pc, #40]	; (e1c4 <nrfx_spim_xfer+0x120>)
    e19c:	e7c0      	b.n	e120 <nrfx_spim_xfer+0x7c>
                    nrf_gpio_pin_set(p_cb->ss_pin);
    e19e:	f00d fd5f 	bl	1bc60 <nrf_gpio_pin_set>
    e1a2:	e7fa      	b.n	e19a <nrfx_spim_xfer+0xf6>
    if (!enable)
    e1a4:	2240      	movs	r2, #64	; 0x40
    e1a6:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    e1aa:	bf14      	ite	ne
    e1ac:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    e1b0:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    e1b4:	e7f1      	b.n	e19a <nrfx_spim_xfer+0xf6>
        return err_code;
    e1b6:	4804      	ldr	r0, [pc, #16]	; (e1c8 <nrfx_spim_xfer+0x124>)
    e1b8:	e7b2      	b.n	e120 <nrfx_spim_xfer+0x7c>
    e1ba:	bf00      	nop
    e1bc:	20025ca0 	.word	0x20025ca0
    e1c0:	0bad000a 	.word	0x0bad000a
    e1c4:	0bad0000 	.word	0x0bad0000
    e1c8:	0bad000b 	.word	0x0bad000b

0000e1cc <nrfx_spim_4_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e1cc:	4b10      	ldr	r3, [pc, #64]	; (e210 <nrfx_spim_4_irq_handler+0x44>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
    e1ce:	b510      	push	{r4, lr}
    e1d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    e1d4:	b1da      	cbz	r2, e20e <nrfx_spim_4_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1d6:	2200      	movs	r2, #0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e1d8:	490e      	ldr	r1, [pc, #56]	; (e214 <nrfx_spim_4_irq_handler+0x48>)
    e1da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    e1de:	f891 0020 	ldrb.w	r0, [r1, #32]
    e1e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    e1e6:	28ff      	cmp	r0, #255	; 0xff
    e1e8:	d005      	beq.n	e1f6 <nrfx_spim_4_irq_handler+0x2a>
        if (!p_cb->use_hw_ss)
    e1ea:	7f8b      	ldrb	r3, [r1, #30]
    e1ec:	b91b      	cbnz	r3, e1f6 <nrfx_spim_4_irq_handler+0x2a>
            if (p_cb->ss_active_high)
    e1ee:	7fcb      	ldrb	r3, [r1, #31]
    e1f0:	b153      	cbz	r3, e208 <nrfx_spim_4_irq_handler+0x3c>
                nrf_gpio_pin_clear(p_cb->ss_pin);
    e1f2:	f00d fd41 	bl	1bc78 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
    e1f6:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    e1f8:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    e1fa:	774b      	strb	r3, [r1, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    e1fc:	4806      	ldr	r0, [pc, #24]	; (e218 <nrfx_spim_4_irq_handler+0x4c>)
    e1fe:	e9d1 3100 	ldrd	r3, r1, [r1]
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
    e202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    e206:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
    e208:	f00d fd2a 	bl	1bc60 <nrf_gpio_pin_set>
    e20c:	e7f3      	b.n	e1f6 <nrfx_spim_4_irq_handler+0x2a>
}
    e20e:	bd10      	pop	{r4, pc}
    e210:	5000a000 	.word	0x5000a000
    e214:	20025ca0 	.word	0x20025ca0
    e218:	20025ca8 	.word	0x20025ca8

0000e21c <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e21c:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    e220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    e224:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e226:	4d25      	ldr	r5, [pc, #148]	; (e2bc <nrfx_twim_init+0xa0>)
    e228:	fb0c fc06 	mul.w	ip, ip, r6
    e22c:	eb05 040c 	add.w	r4, r5, ip
    e230:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    e234:	2f00      	cmp	r7, #0
    e236:	d13e      	bne.n	e2b6 <nrfx_twim_init+0x9a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    e238:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e23a:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    e23c:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    e23e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    e242:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    e246:	680f      	ldr	r7, [r1, #0]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e248:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        case 1: return NRF_P1;
    e24c:	f8df 807c 	ldr.w	r8, [pc, #124]	; e2cc <nrfx_twim_init+0xb0>
    e250:	4b1b      	ldr	r3, [pc, #108]	; (e2c0 <nrfx_twim_init+0xa4>)
    return pin_number >> 5;
    e252:	097c      	lsrs	r4, r7, #5
        case 1: return NRF_P1;
    e254:	2c01      	cmp	r4, #1
    e256:	bf14      	ite	ne
    e258:	461c      	movne	r4, r3
    e25a:	4644      	moveq	r4, r8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e25c:	f240 6e0c 	movw	lr, #1548	; 0x60c
    p_cb->handler         = event_handler;
    e260:	f845 200c 	str.w	r2, [r5, ip]
    *p_pin = pin_number & 0x1F;
    e264:	f007 0c1f 	and.w	ip, r7, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e268:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    e26c:	f844 e02c 	str.w	lr, [r4, ip, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    e270:	684c      	ldr	r4, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e272:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
    e274:	ea4f 1954 	mov.w	r9, r4, lsr #5
        case 1: return NRF_P1;
    e278:	f1b9 0f01 	cmp.w	r9, #1
    e27c:	bf08      	it	eq
    e27e:	4643      	moveq	r3, r8
    *p_pin = pin_number & 0x1F;
    e280:	f004 0c1f 	and.w	ip, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e284:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    e288:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    e28c:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
    e28e:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    e292:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
    e296:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    e29a:	b11a      	cbz	r2, e2a4 <nrfx_twim_init+0x88>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    e29c:	f340 3007 	sbfx	r0, r0, #12, #8
    e2a0:	f7f5 feea 	bl	4078 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e2a4:	2334      	movs	r3, #52	; 0x34
    e2a6:	fb03 5506 	mla	r5, r3, r6, r5
    e2aa:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    e2ac:	4805      	ldr	r0, [pc, #20]	; (e2c4 <nrfx_twim_init+0xa8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e2ae:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    e2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
    e2b6:	4804      	ldr	r0, [pc, #16]	; (e2c8 <nrfx_twim_init+0xac>)
    e2b8:	e7fb      	b.n	e2b2 <nrfx_twim_init+0x96>
    e2ba:	bf00      	nop
    e2bc:	20025cc4 	.word	0x20025cc4
    e2c0:	50842500 	.word	0x50842500
    e2c4:	0bad0000 	.word	0x0bad0000
    e2c8:	0bad0005 	.word	0x0bad0005
    e2cc:	50842800 	.word	0x50842800

0000e2d0 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    e2d0:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    e2d2:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e2d4:	7903      	ldrb	r3, [r0, #4]
    e2d6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    e2da:	2134      	movs	r1, #52	; 0x34
    e2dc:	4a03      	ldr	r2, [pc, #12]	; (e2ec <nrfx_twim_enable+0x1c>)
    e2de:	fb01 2303 	mla	r3, r1, r3, r2
    e2e2:	2202      	movs	r2, #2
    e2e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    e2e8:	4770      	bx	lr
    e2ea:	bf00      	nop
    e2ec:	20025cc4 	.word	0x20025cc4

0000e2f0 <nrfx_twim_disable>:
void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e2f0:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e2f2:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
    e2f4:	2034      	movs	r0, #52	; 0x34
    e2f6:	490a      	ldr	r1, [pc, #40]	; (e320 <nrfx_twim_disable+0x30>)
    e2f8:	fb00 1303 	mla	r3, r0, r3, r1
    e2fc:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    e2fe:	4909      	ldr	r1, [pc, #36]	; (e324 <nrfx_twim_disable+0x34>)
    e300:	6098      	str	r0, [r3, #8]
    e302:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    e306:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    e30a:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    e30e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    e312:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e316:	2201      	movs	r2, #1
    e318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    e31c:	4770      	bx	lr
    e31e:	bf00      	nop
    e320:	20025cc4 	.word	0x20025cc4
    e324:	019c0202 	.word	0x019c0202

0000e328 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    e32c:	2634      	movs	r6, #52	; 0x34
    e32e:	2300      	movs	r3, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e330:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
    e334:	4fae      	ldr	r7, [pc, #696]	; (e5f0 <nrfx_twim_xfer+0x2c8>)
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    e336:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    e338:	fb06 760e 	mla	r6, r6, lr, r7
    e33c:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    e340:	68cb      	ldr	r3, [r1, #12]
{
    e342:	460d      	mov	r5, r1
    e344:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    e34c:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e34e:	d003      	beq.n	e358 <nrfx_twim_xfer+0x30>
        return err_code;
    e350:	4ea8      	ldr	r6, [pc, #672]	; (e5f4 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e352:	4630      	mov	r0, r6
    e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
    e358:	4ba7      	ldr	r3, [pc, #668]	; (e5f8 <nrfx_twim_xfer+0x2d0>)
    e35a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    e35e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    e362:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    e366:	b123      	cbz	r3, e372 <nrfx_twim_xfer+0x4a>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e368:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    e36a:	4ea4      	ldr	r6, [pc, #656]	; (e5fc <nrfx_twim_xfer+0x2d4>)
    p_reg->INTENSET = mask;
    e36c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    e370:	e7ef      	b.n	e352 <nrfx_twim_xfer+0x2a>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    e372:	f012 0f14 	tst.w	r2, #20
    e376:	bf0c      	ite	eq
    e378:	2301      	moveq	r3, #1
    e37a:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    e37c:	4689      	mov	r9, r1
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    e37e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    e382:	f106 080c 	add.w	r8, r6, #12
    e386:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    e38a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    e38e:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
    e392:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    e396:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    e39a:	f3cc 1300 	ubfx	r3, ip, #4, #1
    e39e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    e3a2:	786b      	ldrb	r3, [r5, #1]
    e3a4:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e3a8:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    e3ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e3b0:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    e3b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e3b8:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    e3bc:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    e3c0:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    e3c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    e3c8:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    e3cc:	bf18      	it	ne
    e3ce:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    e3d0:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    e3d4:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    e3d8:	bf18      	it	ne
    e3da:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    e3dc:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    e3e0:	782b      	ldrb	r3, [r5, #0]
    e3e2:	2b03      	cmp	r3, #3
    e3e4:	f200 80b2 	bhi.w	e54c <nrfx_twim_xfer+0x224>
    e3e8:	e8df f003 	tbb	[pc, r3]
    e3ec:	02669d81 	.word	0x02669d81
    e3f0:	692a      	ldr	r2, [r5, #16]
    e3f2:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e3fa:	d1a9      	bne.n	e350 <nrfx_twim_xfer+0x28>
    p_reg->SHORTS = mask;
    e3fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e400:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    e402:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e406:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e408:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e40c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e410:	2300      	movs	r3, #0
    e412:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    e416:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e41a:	2101      	movs	r1, #1
    e41c:	6221      	str	r1, [r4, #32]
    e41e:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e420:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    e424:	2900      	cmp	r1, #0
    e426:	d0fb      	beq.n	e420 <nrfx_twim_xfer+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e428:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    e42c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e430:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e432:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e436:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    e43a:	2334      	movs	r3, #52	; 0x34
    e43c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    e440:	fb03 730e 	mla	r3, r3, lr, r7
    e444:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    e446:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    e448:	4e6d      	ldr	r6, [pc, #436]	; (e600 <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    e44a:	f01c 0f08 	tst.w	ip, #8
    e44e:	d104      	bne.n	e45a <nrfx_twim_xfer+0x132>
    e450:	782a      	ldrb	r2, [r5, #0]
    e452:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e454:	bf1c      	itt	ne
    e456:	2201      	movne	r2, #1
    e458:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
    e45a:	2334      	movs	r3, #52	; 0x34
    e45c:	fb03 f30e 	mul.w	r3, r3, lr
    e460:	18fa      	adds	r2, r7, r3
    e462:	58fb      	ldr	r3, [r7, r3]
    e464:	2b00      	cmp	r3, #0
    e466:	d174      	bne.n	e552 <nrfx_twim_xfer+0x22a>
                transmission_finished = true;
    e468:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e46a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    e46e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e472:	2900      	cmp	r1, #0
    e474:	f040 8087 	bne.w	e586 <nrfx_twim_xfer+0x25e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    e478:	3a00      	subs	r2, #0
    e47a:	bf18      	it	ne
    e47c:	2201      	movne	r2, #1
    e47e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e482:	2900      	cmp	r1, #0
    e484:	f000 8085 	beq.w	e592 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e488:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e48c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e490:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    e494:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    e498:	b110      	cbz	r0, e4a0 <nrfx_twim_xfer+0x178>
    e49a:	f411 7f00 	tst.w	r1, #512	; 0x200
    e49e:	d104      	bne.n	e4aa <nrfx_twim_xfer+0x182>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4a0:	6225      	str	r5, [r4, #32]
    e4a2:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    e4a4:	2800      	cmp	r0, #0
    e4a6:	d0e0      	beq.n	e46a <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
    e4a8:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    e4aa:	05c9      	lsls	r1, r1, #23
    e4ac:	d571      	bpl.n	e592 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4ae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    e4b2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
    e4b6:	e7d8      	b.n	e46a <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e4b8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e4ba:	68ea      	ldr	r2, [r5, #12]
    e4bc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e4c0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e4c4:	692b      	ldr	r3, [r5, #16]
    e4c6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e4ca:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    e4ce:	f47f af3f 	bne.w	e350 <nrfx_twim_xfer+0x28>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e4d2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e4d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    e4d8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    e4dc:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e4e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e4e4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e4e6:	2202      	movs	r2, #2
    e4e8:	fb03 730e 	mla	r3, r3, lr, r7
    e4ec:	e012      	b.n	e514 <nrfx_twim_xfer+0x1ec>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e4ee:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e4f0:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    e4f2:	f01c 0f20 	tst.w	ip, #32
    e4f6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e4fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e4fe:	f04f 0334 	mov.w	r3, #52	; 0x34
    e502:	d00b      	beq.n	e51c <nrfx_twim_xfer+0x1f4>
    p_reg->SHORTS = mask;
    e504:	f44f 7280 	mov.w	r2, #256	; 0x100
    e508:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    e50c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    e510:	fb03 730e 	mla	r3, r3, lr, r7
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e514:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e516:	2301      	movs	r3, #1
    e518:	6223      	str	r3, [r4, #32]
    e51a:	e794      	b.n	e446 <nrfx_twim_xfer+0x11e>
    p_reg->SHORTS = mask;
    e51c:	f44f 7200 	mov.w	r2, #512	; 0x200
    e520:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    e524:	e7df      	b.n	e4e6 <nrfx_twim_xfer+0x1be>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e526:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e528:	68ea      	ldr	r2, [r5, #12]
    e52a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e52e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e536:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e53a:	2334      	movs	r3, #52	; 0x34
    e53c:	2202      	movs	r2, #2
    e53e:	fb03 730e 	mla	r3, r3, lr, r7
    e542:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e544:	2301      	movs	r3, #1
    e546:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    e548:	2300      	movs	r3, #0
    e54a:	e77d      	b.n	e448 <nrfx_twim_xfer+0x120>
    switch (p_xfer_desc->type)
    e54c:	2308      	movs	r3, #8
    e54e:	4e2d      	ldr	r6, [pc, #180]	; (e604 <nrfx_twim_xfer+0x2dc>)
    e550:	e77b      	b.n	e44a <nrfx_twim_xfer+0x122>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    e552:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
    e556:	bf1c      	itt	ne
    e558:	2300      	movne	r3, #0
    e55a:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    e55c:	f01c 0f40 	tst.w	ip, #64	; 0x40
    e560:	d106      	bne.n	e570 <nrfx_twim_xfer+0x248>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    e562:	2334      	movs	r3, #52	; 0x34
    e564:	fb03 730e 	mla	r3, r3, lr, r7
    e568:	689a      	ldr	r2, [r3, #8]
    e56a:	f042 0202 	orr.w	r2, r2, #2
    e56e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    e570:	2334      	movs	r3, #52	; 0x34
    e572:	fb03 770e 	mla	r7, r3, lr, r7
    e576:	68bb      	ldr	r3, [r7, #8]
    e578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e57c:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e57e:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
    e580:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    e584:	e6e5      	b.n	e352 <nrfx_twim_xfer+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e586:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    e58a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
    e58e:	2201      	movs	r2, #1
    e590:	e775      	b.n	e47e <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
    e592:	2a00      	cmp	r2, #0
    e594:	f43f af69 	beq.w	e46a <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
    e598:	2134      	movs	r1, #52	; 0x34
    e59a:	2000      	movs	r0, #0
    e59c:	fb01 720e 	mla	r2, r1, lr, r7
    uint32_t error_source = p_reg->ERRORSRC;
    e5a0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    e5a4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    e5a8:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    e5ac:	b18b      	cbz	r3, e5d2 <nrfx_twim_xfer+0x2aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    e5ae:	4a16      	ldr	r2, [pc, #88]	; (e608 <nrfx_twim_xfer+0x2e0>)
    e5b0:	f013 0f01 	tst.w	r3, #1
    e5b4:	4e15      	ldr	r6, [pc, #84]	; (e60c <nrfx_twim_xfer+0x2e4>)
    e5b6:	bf18      	it	ne
    e5b8:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    e5ba:	f013 0f02 	tst.w	r3, #2
    e5be:	f102 0201 	add.w	r2, r2, #1
    e5c2:	bf18      	it	ne
    e5c4:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    e5c6:	f013 0f04 	tst.w	r3, #4
    e5ca:	4b11      	ldr	r3, [pc, #68]	; (e610 <nrfx_twim_xfer+0x2e8>)
    e5cc:	bf18      	it	ne
    e5ce:	461e      	movne	r6, r3
    e5d0:	e6bf      	b.n	e352 <nrfx_twim_xfer+0x2a>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    e5d2:	f01c 0f40 	tst.w	ip, #64	; 0x40
    e5d6:	f47f aebc 	bne.w	e352 <nrfx_twim_xfer+0x2a>
                !xfer_completeness_check(p_twim, p_cb))
    e5da:	4620      	mov	r0, r4
    e5dc:	fb0e 7101 	mla	r1, lr, r1, r7
    e5e0:	f00d fb56 	bl	1bc90 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    e5e4:	4b09      	ldr	r3, [pc, #36]	; (e60c <nrfx_twim_xfer+0x2e4>)
    e5e6:	2800      	cmp	r0, #0
    e5e8:	bf08      	it	eq
    e5ea:	461e      	moveq	r6, r3
    e5ec:	e6b1      	b.n	e352 <nrfx_twim_xfer+0x2a>
    e5ee:	bf00      	nop
    e5f0:	20025cc4 	.word	0x20025cc4
    e5f4:	0bad000a 	.word	0x0bad000a
    e5f8:	019c0202 	.word	0x019c0202
    e5fc:	0bad000b 	.word	0x0bad000b
    e600:	0bad0000 	.word	0x0bad0000
    e604:	0bad0004 	.word	0x0bad0004
    e608:	0bae0000 	.word	0x0bae0000
    e60c:	0bad0001 	.word	0x0bad0001
    e610:	0bae0002 	.word	0x0bae0002

0000e614 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    e614:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e616:	4b5b      	ldr	r3, [pc, #364]	; (e784 <nrfx_twim_1_irq_handler+0x170>)
    e618:	4c5b      	ldr	r4, [pc, #364]	; (e788 <nrfx_twim_1_irq_handler+0x174>)
    e61a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    e61e:	461d      	mov	r5, r3
    e620:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e622:	b1fa      	cbz	r2, e664 <nrfx_twim_1_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e624:	2200      	movs	r2, #0
    e626:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    e62a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e62e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e632:	b9ba      	cbnz	r2, e664 <nrfx_twim_1_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    e634:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e636:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e63a:	2202      	movs	r2, #2
    e63c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e63e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    e640:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e644:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    e648:	b11a      	cbz	r2, e652 <nrfx_twim_1_irq_handler+0x3e>
    return p_reg->SHORTS;
    e64a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    e64e:	059e      	lsls	r6, r3, #22
    e650:	d403      	bmi.n	e65a <nrfx_twim_1_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e652:	2201      	movs	r2, #1
    e654:	4b4b      	ldr	r3, [pc, #300]	; (e784 <nrfx_twim_1_irq_handler+0x170>)
    e656:	621a      	str	r2, [r3, #32]
    e658:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    e65a:	2301      	movs	r3, #1
    e65c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
    e660:	b007      	add	sp, #28
    e662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e664:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e668:	2b00      	cmp	r3, #0
    e66a:	d054      	beq.n	e716 <nrfx_twim_1_irq_handler+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e66c:	2300      	movs	r3, #0
    e66e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    e672:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    e676:	6a23      	ldr	r3, [r4, #32]
    e678:	065d      	lsls	r5, r3, #25
    e67a:	d40a      	bmi.n	e692 <nrfx_twim_1_irq_handler+0x7e>
    e67c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e680:	b93b      	cbnz	r3, e692 <nrfx_twim_1_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    e682:	4941      	ldr	r1, [pc, #260]	; (e788 <nrfx_twim_1_irq_handler+0x174>)
    e684:	483f      	ldr	r0, [pc, #252]	; (e784 <nrfx_twim_1_irq_handler+0x170>)
    e686:	f00d fb03 	bl	1bc90 <xfer_completeness_check>
    e68a:	f080 0001 	eor.w	r0, r0, #1
    e68e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    e692:	6a23      	ldr	r3, [r4, #32]
    e694:	f013 0704 	ands.w	r7, r3, #4
    e698:	d122      	bne.n	e6e0 <nrfx_twim_1_irq_handler+0xcc>
            event.xfer_desc = p_cb->xfer_desc;
    e69a:	4e3c      	ldr	r6, [pc, #240]	; (e78c <nrfx_twim_1_irq_handler+0x178>)
    e69c:	ad01      	add	r5, sp, #4
    e69e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e6a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e6a2:	6833      	ldr	r3, [r6, #0]
    e6a4:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    e6a8:	602b      	str	r3, [r5, #0]
    e6aa:	4b36      	ldr	r3, [pc, #216]	; (e784 <nrfx_twim_1_irq_handler+0x170>)
    e6ac:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    e6b0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    e6b4:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    e6b8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    e6bc:	f1bc 0f00 	cmp.w	ip, #0
    e6c0:	d002      	beq.n	e6c8 <nrfx_twim_1_irq_handler+0xb4>
    e6c2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    e6c6:	b15a      	cbz	r2, e6e0 <nrfx_twim_1_irq_handler+0xcc>
    p_reg->SHORTS = mask;
    e6c8:	2200      	movs	r2, #0
    e6ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    e6ce:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e6d0:	4a2f      	ldr	r2, [pc, #188]	; (e790 <nrfx_twim_1_irq_handler+0x17c>)
    e6d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e6d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    e6da:	4b2e      	ldr	r3, [pc, #184]	; (e794 <nrfx_twim_1_irq_handler+0x180>)
    e6dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    e6e0:	4a28      	ldr	r2, [pc, #160]	; (e784 <nrfx_twim_1_irq_handler+0x170>)
    e6e2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    e6e6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    e6e8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    e6ec:	d53c      	bpl.n	e768 <nrfx_twim_1_irq_handler+0x154>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    e6ee:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    e6f0:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    e6f4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e6f8:	b90b      	cbnz	r3, e6fe <nrfx_twim_1_irq_handler+0xea>
        p_cb->busy = false;
    e6fa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    e6fe:	6a23      	ldr	r3, [r4, #32]
    e700:	075b      	lsls	r3, r3, #29
    e702:	d503      	bpl.n	e70c <nrfx_twim_1_irq_handler+0xf8>
    e704:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e708:	2b00      	cmp	r3, #0
    e70a:	d0a9      	beq.n	e660 <nrfx_twim_1_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
    e70c:	e9d4 3100 	ldrd	r3, r1, [r4]
    e710:	4668      	mov	r0, sp
    e712:	4798      	blx	r3
}
    e714:	e7a4      	b.n	e660 <nrfx_twim_1_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e716:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    e71a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    e71e:	7b23      	ldrb	r3, [r4, #12]
    e720:	b983      	cbnz	r3, e744 <nrfx_twim_1_irq_handler+0x130>
            event.xfer_desc = p_cb->xfer_desc;
    e722:	4f1a      	ldr	r7, [pc, #104]	; (e78c <nrfx_twim_1_irq_handler+0x178>)
    e724:	ae01      	add	r6, sp, #4
    e726:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    e728:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e72a:	683b      	ldr	r3, [r7, #0]
    e72c:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    e72e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e732:	2b00      	cmp	r3, #0
    e734:	d1d4      	bne.n	e6e0 <nrfx_twim_1_irq_handler+0xcc>
    p_reg->SHORTS = mask;
    e736:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    e73a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    e73c:	4b14      	ldr	r3, [pc, #80]	; (e790 <nrfx_twim_1_irq_handler+0x17c>)
    e73e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    e742:	e7c8      	b.n	e6d6 <nrfx_twim_1_irq_handler+0xc2>
    p_reg->SHORTS = mask;
    e744:	f44f 7300 	mov.w	r3, #512	; 0x200
    e748:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    e74c:	f240 2302 	movw	r3, #514	; 0x202
    e750:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    e752:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    e756:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e75a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    e75c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e760:	2301      	movs	r3, #1
    e762:	60ab      	str	r3, [r5, #8]
    e764:	622b      	str	r3, [r5, #32]
            return;
    e766:	e77b      	b.n	e660 <nrfx_twim_1_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    e768:	0759      	lsls	r1, r3, #29
    e76a:	d501      	bpl.n	e770 <nrfx_twim_1_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    e76c:	2302      	movs	r3, #2
    e76e:	e7bf      	b.n	e6f0 <nrfx_twim_1_irq_handler+0xdc>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    e770:	07da      	lsls	r2, r3, #31
    e772:	d501      	bpl.n	e778 <nrfx_twim_1_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    e774:	2303      	movs	r3, #3
    e776:	e7bb      	b.n	e6f0 <nrfx_twim_1_irq_handler+0xdc>
    else if (p_cb->error)
    e778:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e77c:	2b00      	cmp	r3, #0
    e77e:	d0b7      	beq.n	e6f0 <nrfx_twim_1_irq_handler+0xdc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    e780:	2304      	movs	r3, #4
    e782:	e7b5      	b.n	e6f0 <nrfx_twim_1_irq_handler+0xdc>
    e784:	50009000 	.word	0x50009000
    e788:	20025cc4 	.word	0x20025cc4
    e78c:	20025cd0 	.word	0x20025cd0
    e790:	019c0202 	.word	0x019c0202
    e794:	e000e100 	.word	0xe000e100

0000e798 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e79c:	460e      	mov	r6, r1
    e79e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e7a0:	4d0c      	ldr	r5, [pc, #48]	; (e7d4 <metal_generic_dev_open+0x3c>)
    e7a2:	f855 4f18 	ldr.w	r4, [r5, #24]!
    e7a6:	42ac      	cmp	r4, r5
    e7a8:	d103      	bne.n	e7b2 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    e7aa:	f06f 0012 	mvn.w	r0, #18
    e7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    e7b2:	4631      	mov	r1, r6
    e7b4:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    e7b8:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    e7bc:	f00a fcf9 	bl	191b2 <strcmp>
    e7c0:	b930      	cbnz	r0, e7d0 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    e7c2:	4640      	mov	r0, r8
			*device = dev;
    e7c4:	f8c7 8000 	str.w	r8, [r7]
}
    e7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    e7cc:	f00d bb67 	b.w	1be9e <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e7d0:	6824      	ldr	r4, [r4, #0]
    e7d2:	e7e8      	b.n	e7a6 <metal_generic_dev_open+0xe>
    e7d4:	20025cf8 	.word	0x20025cf8

0000e7d8 <metal_bus_find>:
{
    e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7dc:	4607      	mov	r7, r0
    e7de:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    e7e0:	4e0b      	ldr	r6, [pc, #44]	; (e810 <metal_bus_find+0x38>)
    e7e2:	f856 4f08 	ldr.w	r4, [r6, #8]!
    e7e6:	42b4      	cmp	r4, r6
    e7e8:	d102      	bne.n	e7f0 <metal_bus_find+0x18>
	return -ENOENT;
    e7ea:	f06f 0001 	mvn.w	r0, #1
    e7ee:	e00a      	b.n	e806 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    e7f0:	4639      	mov	r1, r7
    e7f2:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    e7f6:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    e7fa:	f00a fcda 	bl	191b2 <strcmp>
    e7fe:	b920      	cbnz	r0, e80a <metal_bus_find+0x32>
    e800:	b11d      	cbz	r5, e80a <metal_bus_find+0x32>
			*result = bus;
    e802:	f8c5 8000 	str.w	r8, [r5]
}
    e806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    e80a:	6824      	ldr	r4, [r4, #0]
    e80c:	e7eb      	b.n	e7e6 <metal_bus_find+0xe>
    e80e:	bf00      	nop
    e810:	20025cf8 	.word	0x20025cf8

0000e814 <metal_bus_register>:
{
    e814:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    e816:	4604      	mov	r4, r0
    e818:	b910      	cbnz	r0, e820 <metal_bus_register+0xc>
		return -EINVAL;
    e81a:	f06f 0015 	mvn.w	r0, #21
}
    e81e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    e820:	6800      	ldr	r0, [r0, #0]
    e822:	2800      	cmp	r0, #0
    e824:	d0f9      	beq.n	e81a <metal_bus_register+0x6>
    e826:	f00a fcb4 	bl	19192 <strlen>
    e82a:	2800      	cmp	r0, #0
    e82c:	d0f5      	beq.n	e81a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    e82e:	2100      	movs	r1, #0
    e830:	6820      	ldr	r0, [r4, #0]
    e832:	f7ff ffd1 	bl	e7d8 <metal_bus_find>
    e836:	b1c0      	cbz	r0, e86a <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    e838:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    e83c:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    e840:	4b0c      	ldr	r3, [pc, #48]	; (e874 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    e842:	f104 0224 	add.w	r2, r4, #36	; 0x24
    e846:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    e848:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    e84c:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    e84e:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    e850:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    e852:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    e854:	781a      	ldrb	r2, [r3, #0]
    e856:	2a06      	cmp	r2, #6
    e858:	d905      	bls.n	e866 <metal_bus_register+0x52>
    e85a:	685b      	ldr	r3, [r3, #4]
    e85c:	b143      	cbz	r3, e870 <metal_bus_register+0x5c>
    e85e:	2007      	movs	r0, #7
    e860:	6822      	ldr	r2, [r4, #0]
    e862:	4905      	ldr	r1, [pc, #20]	; (e878 <metal_bus_register+0x64>)
    e864:	4798      	blx	r3
	return 0;
    e866:	2000      	movs	r0, #0
    e868:	e7d9      	b.n	e81e <metal_bus_register+0xa>
		return -EEXIST;
    e86a:	f06f 0010 	mvn.w	r0, #16
    e86e:	e7d6      	b.n	e81e <metal_bus_register+0xa>
	return 0;
    e870:	4618      	mov	r0, r3
    e872:	e7d4      	b.n	e81e <metal_bus_register+0xa>
    e874:	20025cf8 	.word	0x20025cf8
    e878:	00026c55 	.word	0x00026c55

0000e87c <metal_register_generic_device>:
{
    e87c:	b510      	push	{r4, lr}
    e87e:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    e880:	6800      	ldr	r0, [r0, #0]
    e882:	b910      	cbnz	r0, e88a <metal_register_generic_device+0xe>
		return -EINVAL;
    e884:	f06f 0015 	mvn.w	r0, #21
}
    e888:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    e88a:	f00a fc82 	bl	19192 <strlen>
    e88e:	2800      	cmp	r0, #0
    e890:	d0f8      	beq.n	e884 <metal_register_generic_device+0x8>
    e892:	68a3      	ldr	r3, [r4, #8]
    e894:	2b01      	cmp	r3, #1
    e896:	d8f5      	bhi.n	e884 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    e898:	4b06      	ldr	r3, [pc, #24]	; (e8b4 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    e89a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    e89e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    e8a0:	4b05      	ldr	r3, [pc, #20]	; (e8b8 <metal_register_generic_device+0x3c>)
    e8a2:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    e8a4:	f103 0018 	add.w	r0, r3, #24
    e8a8:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    e8aa:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    e8ac:	61d9      	str	r1, [r3, #28]
	return 0;
    e8ae:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    e8b0:	6011      	str	r1, [r2, #0]
}
    e8b2:	e7e9      	b.n	e888 <metal_register_generic_device+0xc>
    e8b4:	20000394 	.word	0x20000394
    e8b8:	20025cf8 	.word	0x20025cf8

0000e8bc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    e8bc:	b538      	push	{r3, r4, r5, lr}
    e8be:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    e8c0:	4c0d      	ldr	r4, [pc, #52]	; (e8f8 <metal_init+0x3c>)
    e8c2:	2220      	movs	r2, #32
    e8c4:	4620      	mov	r0, r4
    e8c6:	2100      	movs	r1, #0
    e8c8:	f00a fcc9 	bl	1925e <memset>

	_metal.common.log_handler   = params->log_handler;
    e8cc:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    e8ce:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    e8d0:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    e8d2:	4623      	mov	r3, r4
    e8d4:	792a      	ldrb	r2, [r5, #4]
    e8d6:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    e8da:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    e8de:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    e8e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    e8e6:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    e8ea:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    e8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    e8f2:	f000 b803 	b.w	e8fc <metal_sys_init>
    e8f6:	bf00      	nop
    e8f8:	20025cf8 	.word	0x20025cf8

0000e8fc <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    e8fc:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    e8fe:	4802      	ldr	r0, [pc, #8]	; (e908 <metal_sys_init+0xc>)
    e900:	f7ff ff88 	bl	e814 <metal_bus_register>
	return 0;
}
    e904:	2000      	movs	r0, #0
    e906:	bd08      	pop	{r3, pc}
    e908:	20000394 	.word	0x20000394

0000e90c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    e90c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    e90e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    e910:	2b06      	cmp	r3, #6
{
    e912:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    e914:	bf88      	it	hi
    e916:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    e918:	4b09      	ldr	r3, [pc, #36]	; (e940 <metal_zephyr_log_handler+0x34>)
{
    e91a:	ac05      	add	r4, sp, #20
    e91c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    e920:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    e924:	4807      	ldr	r0, [pc, #28]	; (e944 <metal_zephyr_log_handler+0x38>)
    e926:	f008 feaa 	bl	1767e <printk>

	va_start(args, format);
	vprintk(format, args);
    e92a:	4621      	mov	r1, r4
    e92c:	4628      	mov	r0, r5
	va_start(args, format);
    e92e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    e930:	f7f2 fe1e 	bl	1570 <vprintk>
	va_end(args);
}
    e934:	b002      	add	sp, #8
    e936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e93a:	b003      	add	sp, #12
    e93c:	4770      	bx	lr
    e93e:	bf00      	nop
    e940:	00023d28 	.word	0x00023d28
    e944:	00025a7b 	.word	0x00025a7b

0000e948 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    e948:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
    e94a:	4604      	mov	r4, r0
    e94c:	b970      	cbnz	r0, e96c <lv_disp_get_scr_act+0x24>
    e94e:	f003 fddd 	bl	1250c <lv_disp_get_default>
    if(!disp) {
    e952:	4604      	mov	r4, r0
    e954:	b950      	cbnz	r0, e96c <lv_disp_get_scr_act+0x24>
        LV_LOG_WARN("no display registered to get its active screen");
    e956:	4b06      	ldr	r3, [pc, #24]	; (e970 <lv_disp_get_scr_act+0x28>)
    e958:	2235      	movs	r2, #53	; 0x35
    e95a:	9300      	str	r3, [sp, #0]
    e95c:	2002      	movs	r0, #2
    e95e:	4b05      	ldr	r3, [pc, #20]	; (e974 <lv_disp_get_scr_act+0x2c>)
    e960:	4905      	ldr	r1, [pc, #20]	; (e978 <lv_disp_get_scr_act+0x30>)
    e962:	f004 f82b 	bl	129bc <_lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
    e966:	4620      	mov	r0, r4
    e968:	b002      	add	sp, #8
    e96a:	bd10      	pop	{r4, pc}
    return disp->act_scr;
    e96c:	6c24      	ldr	r4, [r4, #64]	; 0x40
    e96e:	e7fa      	b.n	e966 <lv_disp_get_scr_act+0x1e>
    e970:	00026d37 	.word	0x00026d37
    e974:	00026e0a 	.word	0x00026e0a
    e978:	00026d00 	.word	0x00026d00

0000e97c <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
    e97c:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
    e97e:	4604      	mov	r4, r0
    e980:	b970      	cbnz	r0, e9a0 <lv_disp_get_scr_prev+0x24>
    e982:	f003 fdc3 	bl	1250c <lv_disp_get_default>
    if(!disp) {
    e986:	4604      	mov	r4, r0
    e988:	b950      	cbnz	r0, e9a0 <lv_disp_get_scr_prev+0x24>
        LV_LOG_WARN("no display registered to get its previous screen");
    e98a:	4b06      	ldr	r3, [pc, #24]	; (e9a4 <lv_disp_get_scr_prev+0x28>)
    e98c:	2246      	movs	r2, #70	; 0x46
    e98e:	9300      	str	r3, [sp, #0]
    e990:	2002      	movs	r0, #2
    e992:	4b05      	ldr	r3, [pc, #20]	; (e9a8 <lv_disp_get_scr_prev+0x2c>)
    e994:	4905      	ldr	r1, [pc, #20]	; (e9ac <lv_disp_get_scr_prev+0x30>)
    e996:	f004 f811 	bl	129bc <_lv_log_add>
        return NULL;
    }

    return disp->prev_scr;
}
    e99a:	4620      	mov	r0, r4
    e99c:	b002      	add	sp, #8
    e99e:	bd10      	pop	{r4, pc}
    return disp->prev_scr;
    e9a0:	6c64      	ldr	r4, [r4, #68]	; 0x44
    e9a2:	e7fa      	b.n	e99a <lv_disp_get_scr_prev+0x1e>
    e9a4:	00026d66 	.word	0x00026d66
    e9a8:	00026e1e 	.word	0x00026e1e
    e9ac:	00026d00 	.word	0x00026d00

0000e9b0 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    e9b0:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
    e9b2:	4604      	mov	r4, r0
    e9b4:	b970      	cbnz	r0, e9d4 <lv_disp_get_layer_top+0x24>
    e9b6:	f003 fda9 	bl	1250c <lv_disp_get_default>
    if(!disp) {
    e9ba:	4604      	mov	r4, r0
    e9bc:	b950      	cbnz	r0, e9d4 <lv_disp_get_layer_top+0x24>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
    e9be:	4b06      	ldr	r3, [pc, #24]	; (e9d8 <lv_disp_get_layer_top+0x28>)
    e9c0:	2263      	movs	r2, #99	; 0x63
    e9c2:	9300      	str	r3, [sp, #0]
    e9c4:	2002      	movs	r0, #2
    e9c6:	4b05      	ldr	r3, [pc, #20]	; (e9dc <lv_disp_get_layer_top+0x2c>)
    e9c8:	4905      	ldr	r1, [pc, #20]	; (e9e0 <lv_disp_get_layer_top+0x30>)
    e9ca:	f003 fff7 	bl	129bc <_lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
    e9ce:	4620      	mov	r0, r4
    e9d0:	b002      	add	sp, #8
    e9d2:	bd10      	pop	{r4, pc}
    return disp->top_layer;
    e9d4:	6ca4      	ldr	r4, [r4, #72]	; 0x48
    e9d6:	e7fa      	b.n	e9ce <lv_disp_get_layer_top+0x1e>
    e9d8:	00026d97 	.word	0x00026d97
    e9dc:	00026e33 	.word	0x00026e33
    e9e0:	00026d00 	.word	0x00026d00

0000e9e4 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    e9e4:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
    e9e6:	4604      	mov	r4, r0
    e9e8:	b970      	cbnz	r0, ea08 <lv_disp_get_layer_sys+0x24>
    e9ea:	f003 fd8f 	bl	1250c <lv_disp_get_default>
    if(!disp) {
    e9ee:	4604      	mov	r4, r0
    e9f0:	b950      	cbnz	r0, ea08 <lv_disp_get_layer_sys+0x24>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
    e9f2:	4b06      	ldr	r3, [pc, #24]	; (ea0c <lv_disp_get_layer_sys+0x28>)
    e9f4:	2274      	movs	r2, #116	; 0x74
    e9f6:	9300      	str	r3, [sp, #0]
    e9f8:	2002      	movs	r0, #2
    e9fa:	4b05      	ldr	r3, [pc, #20]	; (ea10 <lv_disp_get_layer_sys+0x2c>)
    e9fc:	4905      	ldr	r1, [pc, #20]	; (ea14 <lv_disp_get_layer_sys+0x30>)
    e9fe:	f003 ffdd 	bl	129bc <_lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
    ea02:	4620      	mov	r0, r4
    ea04:	b002      	add	sp, #8
    ea06:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
    ea08:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
    ea0a:	e7fa      	b.n	ea02 <lv_disp_get_layer_sys+0x1e>
    ea0c:	00026dd0 	.word	0x00026dd0
    ea10:	00026e49 	.word	0x00026e49
    ea14:	00026d00 	.word	0x00026d00

0000ea18 <lv_indev_reset.part.0>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
    ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea1a:	4604      	mov	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
    ea1c:	2000      	movs	r0, #0
    ea1e:	f003 fe57 	bl	126d0 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
    ea22:	2500      	movs	r5, #0
    ea24:	4e0a      	ldr	r6, [pc, #40]	; (ea50 <lv_indev_reset.part.0+0x38>)
    ea26:	4f0b      	ldr	r7, [pc, #44]	; (ea54 <lv_indev_reset.part.0+0x3c>)
        while(i) {
    ea28:	b900      	cbnz	r0, ea2c <lv_indev_reset.part.0+0x14>
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
    ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
    ea2c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
    ea30:	f043 0302 	orr.w	r3, r3, #2
    ea34:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
            if(indev_act == i) indev_obj_act = NULL;
    ea38:	6833      	ldr	r3, [r6, #0]
    ea3a:	4298      	cmp	r0, r3
    ea3c:	bf08      	it	eq
    ea3e:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    ea40:	b114      	cbz	r4, ea48 <lv_indev_reset.part.0+0x30>
    ea42:	6c03      	ldr	r3, [r0, #64]	; 0x40
    ea44:	429c      	cmp	r4, r3
    ea46:	d100      	bne.n	ea4a <lv_indev_reset.part.0+0x32>
                i->proc.types.pointer.last_pressed = NULL;
    ea48:	6405      	str	r5, [r0, #64]	; 0x40
            i = lv_indev_get_next(i);
    ea4a:	f003 fe41 	bl	126d0 <lv_indev_get_next>
    ea4e:	e7eb      	b.n	ea28 <lv_indev_reset.part.0+0x10>
    ea50:	20025d18 	.word	0x20025d18
    ea54:	20025d1c 	.word	0x20025d1c

0000ea58 <lv_indev_get_act>:
}
    ea58:	4b01      	ldr	r3, [pc, #4]	; (ea60 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
    ea5a:	6818      	ldr	r0, [r3, #0]
    ea5c:	4770      	bx	lr
    ea5e:	bf00      	nop
    ea60:	20025d18 	.word	0x20025d18

0000ea64 <lv_indev_reset>:
{
    ea64:	4603      	mov	r3, r0
    ea66:	4608      	mov	r0, r1
    if(indev) {
    ea68:	b19b      	cbz	r3, ea92 <lv_indev_reset+0x2e>
        indev->proc.reset_query = 1;
    ea6a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    ea6e:	f042 0202 	orr.w	r2, r2, #2
    ea72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        if(indev_act == indev) indev_obj_act = NULL;
    ea76:	4a08      	ldr	r2, [pc, #32]	; (ea98 <lv_indev_reset+0x34>)
    ea78:	6812      	ldr	r2, [r2, #0]
    ea7a:	429a      	cmp	r2, r3
    ea7c:	bf02      	ittt	eq
    ea7e:	2100      	moveq	r1, #0
    ea80:	4a06      	ldreq	r2, [pc, #24]	; (ea9c <lv_indev_reset+0x38>)
    ea82:	6011      	streq	r1, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    ea84:	b110      	cbz	r0, ea8c <lv_indev_reset+0x28>
    ea86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ea88:	4282      	cmp	r2, r0
    ea8a:	d104      	bne.n	ea96 <lv_indev_reset+0x32>
            indev->proc.types.pointer.last_pressed = NULL;
    ea8c:	2200      	movs	r2, #0
    ea8e:	641a      	str	r2, [r3, #64]	; 0x40
    ea90:	4770      	bx	lr
    ea92:	f7ff bfc1 	b.w	ea18 <lv_indev_reset.part.0>
}
    ea96:	4770      	bx	lr
    ea98:	20025d18 	.word	0x20025d18
    ea9c:	20025d1c 	.word	0x20025d1c

0000eaa0 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
    eaa0:	2872      	cmp	r0, #114	; 0x72
    eaa2:	d867      	bhi.n	eb74 <style_prop_is_cacheble+0xd4>
    eaa4:	2853      	cmp	r0, #83	; 0x53
    eaa6:	d816      	bhi.n	ead6 <style_prop_is_cacheble+0x36>
    eaa8:	2833      	cmp	r0, #51	; 0x33
    eaaa:	d85b      	bhi.n	eb64 <style_prop_is_cacheble+0xc4>
    eaac:	281f      	cmp	r0, #31
    eaae:	d81c      	bhi.n	eaea <style_prop_is_cacheble+0x4a>
    eab0:	3801      	subs	r0, #1
    eab2:	b283      	uxth	r3, r0
    eab4:	2b17      	cmp	r3, #23
    eab6:	d920      	bls.n	eafa <style_prop_is_cacheble+0x5a>
    eab8:	2000      	movs	r0, #0
    eaba:	4770      	bx	lr
    eabc:	2301      	movs	r3, #1
    eabe:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    eac2:	b280      	uxth	r0, r0
    eac4:	fa03 f000 	lsl.w	r0, r3, r0
    eac8:	f244 030b 	movw	r3, #16395	; 0x400b
    eacc:	4218      	tst	r0, r3
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
    eace:	bf14      	ite	ne
    ead0:	2001      	movne	r0, #1
    ead2:	2000      	moveq	r0, #0
    ead4:	4770      	bx	lr
    ead6:	2301      	movs	r3, #1
    ead8:	3854      	subs	r0, #84	; 0x54
    eada:	b280      	uxth	r0, r0
    eadc:	4083      	lsls	r3, r0
    eade:	4835      	ldr	r0, [pc, #212]	; (ebb4 <style_prop_is_cacheble+0x114>)
    eae0:	4018      	ands	r0, r3
    eae2:	3800      	subs	r0, #0
    eae4:	bf18      	it	ne
    eae6:	2001      	movne	r0, #1
    eae8:	4770      	bx	lr
    eaea:	2301      	movs	r3, #1
    eaec:	3820      	subs	r0, #32
    eaee:	b280      	uxth	r0, r0
    eaf0:	fa03 f000 	lsl.w	r0, r3, r0
    eaf4:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
    eaf8:	e7e8      	b.n	eacc <style_prop_is_cacheble+0x2c>
    eafa:	2817      	cmp	r0, #23
    eafc:	d8dc      	bhi.n	eab8 <style_prop_is_cacheble+0x18>
    eafe:	a301      	add	r3, pc, #4	; (adr r3, eb04 <style_prop_is_cacheble+0x64>)
    eb00:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    eb04:	0000ebaf 	.word	0x0000ebaf
    eb08:	0000ebaf 	.word	0x0000ebaf
    eb0c:	0000eab9 	.word	0x0000eab9
    eb10:	0000ebaf 	.word	0x0000ebaf
    eb14:	0000ebaf 	.word	0x0000ebaf
    eb18:	0000ebaf 	.word	0x0000ebaf
    eb1c:	0000ebaf 	.word	0x0000ebaf
    eb20:	0000eab9 	.word	0x0000eab9
    eb24:	0000eab9 	.word	0x0000eab9
    eb28:	0000eab9 	.word	0x0000eab9
    eb2c:	0000eab9 	.word	0x0000eab9
    eb30:	0000eab9 	.word	0x0000eab9
    eb34:	0000eab9 	.word	0x0000eab9
    eb38:	0000eab9 	.word	0x0000eab9
    eb3c:	0000eab9 	.word	0x0000eab9
    eb40:	0000ebaf 	.word	0x0000ebaf
    eb44:	0000ebaf 	.word	0x0000ebaf
    eb48:	0000ebaf 	.word	0x0000ebaf
    eb4c:	0000ebaf 	.word	0x0000ebaf
    eb50:	0000eab9 	.word	0x0000eab9
    eb54:	0000ebaf 	.word	0x0000ebaf
    eb58:	0000ebaf 	.word	0x0000ebaf
    eb5c:	0000ebaf 	.word	0x0000ebaf
    eb60:	0000ebaf 	.word	0x0000ebaf
    switch(prop) {
    eb64:	3840      	subs	r0, #64	; 0x40
    eb66:	b280      	uxth	r0, r0
    eb68:	2810      	cmp	r0, #16
    eb6a:	d8a5      	bhi.n	eab8 <style_prop_is_cacheble+0x18>
    eb6c:	2301      	movs	r3, #1
    eb6e:	4083      	lsls	r3, r0
    eb70:	4811      	ldr	r0, [pc, #68]	; (ebb8 <style_prop_is_cacheble+0x118>)
    eb72:	e7b5      	b.n	eae0 <style_prop_is_cacheble+0x40>
    eb74:	f248 038e 	movw	r3, #32910	; 0x808e
    eb78:	4298      	cmp	r0, r3
    eb7a:	d811      	bhi.n	eba0 <style_prop_is_cacheble+0x100>
    eb7c:	f248 037f 	movw	r3, #32895	; 0x807f
    eb80:	4298      	cmp	r0, r3
    eb82:	d89b      	bhi.n	eabc <style_prop_is_cacheble+0x1c>
    eb84:	28ff      	cmp	r0, #255	; 0xff
    eb86:	d012      	beq.n	ebae <style_prop_is_cacheble+0x10e>
    eb88:	d806      	bhi.n	eb98 <style_prop_is_cacheble+0xf8>
    eb8a:	287f      	cmp	r0, #127	; 0x7f
    eb8c:	d00f      	beq.n	ebae <style_prop_is_cacheble+0x10e>
            return true;
    eb8e:	2891      	cmp	r0, #145	; 0x91
    eb90:	bf14      	ite	ne
    eb92:	2000      	movne	r0, #0
    eb94:	2001      	moveq	r0, #1
    eb96:	4770      	bx	lr
    eb98:	f248 030c 	movw	r3, #32780	; 0x800c
    eb9c:	4298      	cmp	r0, r3
    eb9e:	e7f7      	b.n	eb90 <style_prop_is_cacheble+0xf0>
    switch(prop) {
    eba0:	f248 03a0 	movw	r3, #32928	; 0x80a0
    eba4:	4298      	cmp	r0, r3
    eba6:	d002      	beq.n	ebae <style_prop_is_cacheble+0x10e>
            return true;
    eba8:	f248 03ad 	movw	r3, #32941	; 0x80ad
    ebac:	e7f6      	b.n	eb9c <style_prop_is_cacheble+0xfc>
    ebae:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
    ebb0:	4770      	bx	lr
    ebb2:	bf00      	nop
    ebb4:	44001001 	.word	0x44001001
    ebb8:	00010005 	.word	0x00010005

0000ebbc <lv_init>:
{
    ebbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(lv_initialized) {
    ebbe:	4c1e      	ldr	r4, [pc, #120]	; (ec38 <lv_init+0x7c>)
    ebc0:	7823      	ldrb	r3, [r4, #0]
    ebc2:	b14b      	cbz	r3, ebd8 <lv_init+0x1c>
        LV_LOG_WARN("lv_init: already inited");
    ebc4:	22aa      	movs	r2, #170	; 0xaa
    ebc6:	2002      	movs	r0, #2
    ebc8:	4b1c      	ldr	r3, [pc, #112]	; (ec3c <lv_init+0x80>)
    ebca:	491d      	ldr	r1, [pc, #116]	; (ec40 <lv_init+0x84>)
    ebcc:	9300      	str	r3, [sp, #0]
    ebce:	4b1d      	ldr	r3, [pc, #116]	; (ec44 <lv_init+0x88>)
    LV_LOG_INFO("lv_init ready");
    ebd0:	f003 fef4 	bl	129bc <_lv_log_add>
}
    ebd4:	b004      	add	sp, #16
    ebd6:	bd10      	pop	{r4, pc}
    _lv_mem_init();
    ebd8:	f012 fdb2 	bl	21740 <_lv_mem_init>
    _lv_task_core_init();
    ebdc:	f004 f856 	bl	12c8c <_lv_task_core_init>
    _lv_anim_core_init();
    ebe0:	f003 fe4a 	bl	12878 <_lv_anim_core_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    ebe4:	2110      	movs	r1, #16
    ebe6:	4818      	ldr	r0, [pc, #96]	; (ec48 <lv_init+0x8c>)
    ebe8:	f012 fc84 	bl	214f4 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    ebec:	f44f 71c2 	mov.w	r1, #388	; 0x184
    ebf0:	4816      	ldr	r0, [pc, #88]	; (ec4c <lv_init+0x90>)
    ebf2:	f012 fc7f 	bl	214f4 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    ebf6:	2164      	movs	r1, #100	; 0x64
    ebf8:	4815      	ldr	r0, [pc, #84]	; (ec50 <lv_init+0x94>)
    ebfa:	f012 fc7b 	bl	214f4 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    ebfe:	4b15      	ldr	r3, [pc, #84]	; (ec54 <lv_init+0x98>)
    ec00:	4915      	ldr	r1, [pc, #84]	; (ec58 <lv_init+0x9c>)
    ec02:	2202      	movs	r2, #2
    ec04:	4608      	mov	r0, r1
    ec06:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ec0a:	9300      	str	r3, [sp, #0]
    ec0c:	f004 fd44 	bl	13698 <lv_theme_material_init>
    lv_theme_set_act(th);
    ec10:	f004 fc9a 	bl	13548 <lv_theme_set_act>
    _lv_refr_init();
    ec14:	f00e fac7 	bl	1d1a6 <_lv_refr_init>
    _lv_indev_init();
    ec18:	f00d f943 	bl	1bea2 <_lv_indev_init>
    _lv_img_decoder_init();
    ec1c:	f003 fc2c 	bl	12478 <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    ec20:	2001      	movs	r0, #1
    ec22:	f003 f923 	bl	11e6c <lv_img_cache_set_size>
    lv_initialized = true;
    ec26:	2001      	movs	r0, #1
    LV_LOG_INFO("lv_init ready");
    ec28:	4b0c      	ldr	r3, [pc, #48]	; (ec5c <lv_init+0xa0>)
    ec2a:	22e1      	movs	r2, #225	; 0xe1
    ec2c:	9300      	str	r3, [sp, #0]
    ec2e:	4904      	ldr	r1, [pc, #16]	; (ec40 <lv_init+0x84>)
    ec30:	4b04      	ldr	r3, [pc, #16]	; (ec44 <lv_init+0x88>)
    lv_initialized = true;
    ec32:	7020      	strb	r0, [r4, #0]
    LV_LOG_INFO("lv_init ready");
    ec34:	e7cc      	b.n	ebd0 <lv_init+0x14>
    ec36:	bf00      	nop
    ec38:	2002a05c 	.word	0x2002a05c
    ec3c:	00026e95 	.word	0x00026e95
    ec40:	00026e5f 	.word	0x00026e5f
    ec44:	00026f7e 	.word	0x00026f7e
    ec48:	20025e78 	.word	0x20025e78
    ec4c:	20025d4c 	.word	0x20025d4c
    ec50:	20025dec 	.word	0x20025dec
    ec54:	200003f8 	.word	0x200003f8
    ec58:	ffff0000 	.word	0xffff0000
    ec5c:	00026ead 	.word	0x00026ead

0000ec60 <lv_event_send_func>:
{
    ec60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ec64:	461e      	mov	r6, r3
    event_temp_data.deleted = false;
    ec66:	2300      	movs	r3, #0
    ec68:	4f1d      	ldr	r7, [pc, #116]	; (ece0 <lv_event_send_func+0x80>)
    ec6a:	f88d 3008 	strb.w	r3, [sp, #8]
        event_temp_data.prev = event_temp_data_head;
    ec6e:	683b      	ldr	r3, [r7, #0]
    const void * event_act_data_save = event_act_data;
    ec70:	f8df a070 	ldr.w	sl, [pc, #112]	; ece4 <lv_event_send_func+0x84>
        event_temp_data.prev = event_temp_data_head;
    ec74:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
    ec76:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
    ec78:	f8da 9000 	ldr.w	r9, [sl]
{
    ec7c:	4680      	mov	r8, r0
    ec7e:	460c      	mov	r4, r1
    ec80:	4615      	mov	r5, r2
    event_temp_data.obj     = obj;
    ec82:	9101      	str	r1, [sp, #4]
    event_temp_data_head = &event_temp_data;
    ec84:	603b      	str	r3, [r7, #0]
    event_act_data                   = data;
    ec86:	f8ca 6000 	str.w	r6, [sl]
    lv_indev_t * indev_act = lv_indev_get_act();
    ec8a:	f7ff fee5 	bl	ea58 <lv_indev_get_act>
    if(indev_act) {
    ec8e:	b118      	cbz	r0, ec98 <lv_event_send_func+0x38>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    ec90:	6883      	ldr	r3, [r0, #8]
    ec92:	b10b      	cbz	r3, ec98 <lv_event_send_func+0x38>
    ec94:	4629      	mov	r1, r5
    ec96:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    ec98:	f1b8 0f00 	cmp.w	r8, #0
    ec9c:	d002      	beq.n	eca4 <lv_event_send_func+0x44>
    ec9e:	4629      	mov	r1, r5
    eca0:	4620      	mov	r0, r4
    eca2:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
    eca4:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
    eca6:	f8ca 9000 	str.w	r9, [sl]
    event_temp_data_head = event_temp_data_head->prev;
    ecaa:	689b      	ldr	r3, [r3, #8]
    ecac:	603b      	str	r3, [r7, #0]
    if(event_temp_data.deleted) {
    ecae:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ecb2:	b983      	cbnz	r3, ecd6 <lv_event_send_func+0x76>
    if(obj) {
    ecb4:	b18c      	cbz	r4, ecda <lv_event_send_func+0x7a>
        if(obj->parent_event && obj->parent) {
    ecb6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    ecba:	065a      	lsls	r2, r3, #25
    ecbc:	d50d      	bpl.n	ecda <lv_event_send_func+0x7a>
    ecbe:	6820      	ldr	r0, [r4, #0]
    ecc0:	b158      	cbz	r0, ecda <lv_event_send_func+0x7a>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    ecc2:	4632      	mov	r2, r6
    ecc4:	4629      	mov	r1, r5
    ecc6:	f00d f919 	bl	1befc <lv_event_send>
        return LV_RES_INV;
    ecca:	1e43      	subs	r3, r0, #1
    eccc:	4258      	negs	r0, r3
    ecce:	4158      	adcs	r0, r3
}
    ecd0:	b004      	add	sp, #16
    ecd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
    ecd6:	2000      	movs	r0, #0
    ecd8:	e7fa      	b.n	ecd0 <lv_event_send_func+0x70>
    return LV_RES_OK;
    ecda:	2001      	movs	r0, #1
    ecdc:	e7f8      	b.n	ecd0 <lv_event_send_func+0x70>
    ecde:	bf00      	nop
    ece0:	20025d24 	.word	0x20025d24
    ece4:	20025d20 	.word	0x20025d20

0000ece8 <lv_obj_get_disp>:
    if(obj->parent == NULL)
    ece8:	6803      	ldr	r3, [r0, #0]
{
    ecea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecec:	4605      	mov	r5, r0
    if(obj->parent == NULL)
    ecee:	b123      	cbz	r3, ecfa <lv_obj_get_disp+0x12>
    return obj->parent;
    ecf0:	462b      	mov	r3, r5
    ecf2:	682d      	ldr	r5, [r5, #0]
    } while(par != NULL);
    ecf4:	2d00      	cmp	r5, #0
    ecf6:	d1fb      	bne.n	ecf0 <lv_obj_get_disp+0x8>
    ecf8:	461d      	mov	r5, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    ecfa:	4812      	ldr	r0, [pc, #72]	; (ed44 <lv_obj_get_disp+0x5c>)
    ecfc:	f012 fc39 	bl	21572 <_lv_ll_get_head>
    ed00:	4604      	mov	r4, r0
    ed02:	4f10      	ldr	r7, [pc, #64]	; (ed44 <lv_obj_get_disp+0x5c>)
    ed04:	b95c      	cbnz	r4, ed1e <lv_obj_get_disp+0x36>
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    ed06:	4b10      	ldr	r3, [pc, #64]	; (ed48 <lv_obj_get_disp+0x60>)
    ed08:	f640 0254 	movw	r2, #2132	; 0x854
    ed0c:	9300      	str	r3, [sp, #0]
    ed0e:	2002      	movs	r0, #2
    ed10:	4b0e      	ldr	r3, [pc, #56]	; (ed4c <lv_obj_get_disp+0x64>)
    ed12:	490f      	ldr	r1, [pc, #60]	; (ed50 <lv_obj_get_disp+0x68>)
    ed14:	f003 fe52 	bl	129bc <_lv_log_add>
}
    ed18:	4620      	mov	r0, r4
    ed1a:	b003      	add	sp, #12
    ed1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
    ed1e:	f104 0634 	add.w	r6, r4, #52	; 0x34
    ed22:	4630      	mov	r0, r6
    ed24:	f012 fc25 	bl	21572 <_lv_ll_get_head>
    ed28:	4601      	mov	r1, r0
    ed2a:	b928      	cbnz	r0, ed38 <lv_obj_get_disp+0x50>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    ed2c:	4621      	mov	r1, r4
    ed2e:	4638      	mov	r0, r7
    ed30:	f012 fc25 	bl	2157e <_lv_ll_get_next>
    ed34:	4604      	mov	r4, r0
    ed36:	e7e5      	b.n	ed04 <lv_obj_get_disp+0x1c>
            if(s == scr) return d;
    ed38:	428d      	cmp	r5, r1
    ed3a:	d0ed      	beq.n	ed18 <lv_obj_get_disp+0x30>
        _LV_LL_READ(d->scr_ll, s) {
    ed3c:	4630      	mov	r0, r6
    ed3e:	f012 fc1e 	bl	2157e <_lv_ll_get_next>
    ed42:	e7f1      	b.n	ed28 <lv_obj_get_disp+0x40>
    ed44:	20025d4c 	.word	0x20025d4c
    ed48:	00026ebb 	.word	0x00026ebb
    ed4c:	00026fac 	.word	0x00026fac
    ed50:	00026e5f 	.word	0x00026e5f

0000ed54 <lv_obj_create>:
{
    ed54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ed58:	460d      	mov	r5, r1
    if(parent == NULL) {
    ed5a:	4606      	mov	r6, r0
    ed5c:	2800      	cmp	r0, #0
    ed5e:	d169      	bne.n	ee34 <lv_obj_create+0xe0>
        lv_disp_t * disp = lv_disp_get_default();
    ed60:	f003 fbd4 	bl	1250c <lv_disp_get_default>
        if(!disp) {
    ed64:	4604      	mov	r4, r0
    ed66:	b948      	cbnz	r0, ed7c <lv_obj_create+0x28>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
    ed68:	f44f 7287 	mov.w	r2, #270	; 0x10e
    ed6c:	2002      	movs	r0, #2
    ed6e:	4bb0      	ldr	r3, [pc, #704]	; (f030 <lv_obj_create+0x2dc>)
    ed70:	49b0      	ldr	r1, [pc, #704]	; (f034 <lv_obj_create+0x2e0>)
    ed72:	9300      	str	r3, [sp, #0]
    ed74:	4bb0      	ldr	r3, [pc, #704]	; (f038 <lv_obj_create+0x2e4>)
    LV_LOG_INFO("Object create ready");
    ed76:	f003 fe21 	bl	129bc <_lv_log_add>
    return new_obj;
    ed7a:	e005      	b.n	ed88 <lv_obj_create+0x34>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    ed7c:	3034      	adds	r0, #52	; 0x34
    ed7e:	f012 fbc1 	bl	21504 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
    ed82:	4604      	mov	r4, r0
    ed84:	b920      	cbnz	r0, ed90 <lv_obj_create+0x3c>
    ed86:	2400      	movs	r4, #0
}
    ed88:	4620      	mov	r0, r4
    ed8a:	b002      	add	sp, #8
    ed8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
    ed90:	223c      	movs	r2, #60	; 0x3c
    ed92:	4631      	mov	r1, r6
    ed94:	f00a fa63 	bl	1925e <memset>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    ed98:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    ed9c:	4630      	mov	r0, r6
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    ed9e:	f366 1346 	bfi	r3, r6, #5, #2
    eda2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
    eda6:	4ba5      	ldr	r3, [pc, #660]	; (f03c <lv_obj_create+0x2e8>)
        new_obj->event_cb = NULL;
    eda8:	61a6      	str	r6, [r4, #24]
        new_obj->signal_cb = lv_obj_signal;
    edaa:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    edac:	4ba4      	ldr	r3, [pc, #656]	; (f040 <lv_obj_create+0x2ec>)
        new_obj->coords.x1    = 0;
    edae:	6126      	str	r6, [r4, #16]
        new_obj->design_cb = lv_obj_design;
    edb0:	6223      	str	r3, [r4, #32]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    edb2:	f003 fbb1 	bl	12518 <lv_disp_get_hor_res>
    edb6:	3801      	subs	r0, #1
    edb8:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    edba:	4630      	mov	r0, r6
    edbc:	f003 fbbe 	bl	1253c <lv_disp_get_ver_res>
    edc0:	3801      	subs	r0, #1
    edc2:	82e0      	strh	r0, [r4, #22]
    new_obj->ext_draw_pad = 0;
    edc4:	f04f 0800 	mov.w	r8, #0
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    edc8:	213c      	movs	r1, #60	; 0x3c
    edca:	1d20      	adds	r0, r4, #4
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
    edcc:	f104 0738 	add.w	r7, r4, #56	; 0x38
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    edd0:	f012 fb90 	bl	214f4 <_lv_ll_init>
    edd4:	2204      	movs	r2, #4
    edd6:	4641      	mov	r1, r8
    new_obj->ext_draw_pad = 0;
    edd8:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
    eddc:	4638      	mov	r0, r7
    edde:	f00a fa3e 	bl	1925e <memset>
    new_obj->gesture_parent = parent ? 1 : 0;
    ede2:	ebb6 0208 	subs.w	r2, r6, r8
    ede6:	bf18      	it	ne
    ede8:	2201      	movne	r2, #1
    new_obj->click        = 1;
    edea:	f640 4301 	movw	r3, #3073	; 0xc01
    edee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    edf2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    new_obj->protect      = LV_PROTECT_NONE;
    edf4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    new_obj->click        = 1;
    edf8:	f422 52ff 	bic.w	r2, r2, #8160	; 0x1fe0
    edfc:	f022 021f 	bic.w	r2, r2, #31
    ee00:	4313      	orrs	r3, r2
    new_obj->ext_attr = NULL;
    ee02:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    ee06:	f104 0828 	add.w	r8, r4, #40	; 0x28
    ee0a:	4640      	mov	r0, r8
    new_obj->click        = 1;
    ee0c:	8663      	strh	r3, [r4, #50]	; 0x32
    lv_style_list_init(&new_obj->style_list);
    ee0e:	f00e faa7 	bl	1d360 <lv_style_list_init>
    if(copy == NULL) {
    ee12:	2d00      	cmp	r5, #0
    ee14:	d16e      	bne.n	eef4 <lv_obj_create+0x1a0>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    ee16:	2e00      	cmp	r6, #0
    ee18:	d060      	beq.n	eedc <lv_obj_create+0x188>
    ee1a:	2102      	movs	r1, #2
    ee1c:	4620      	mov	r0, r4
    ee1e:	f004 fb99 	bl	13554 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    ee22:	4622      	mov	r2, r4
    ee24:	2101      	movs	r1, #1
    ee26:	4630      	mov	r0, r6
    ee28:	69f3      	ldr	r3, [r6, #28]
    ee2a:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    ee2c:	4620      	mov	r0, r4
    ee2e:	f00d f8f6 	bl	1c01e <lv_obj_invalidate>
    ee32:	e057      	b.n	eee4 <lv_obj_create+0x190>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    ee34:	3004      	adds	r0, #4
    ee36:	f012 fb65 	bl	21504 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
    ee3a:	4604      	mov	r4, r0
    ee3c:	2800      	cmp	r0, #0
    ee3e:	d0a2      	beq.n	ed86 <lv_obj_create+0x32>
        new_obj->event_cb = NULL;
    ee40:	f04f 0900 	mov.w	r9, #0
    ee44:	223c      	movs	r2, #60	; 0x3c
    ee46:	2100      	movs	r1, #0
    ee48:	f00a fa09 	bl	1925e <memset>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    ee4c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    ee50:	4648      	mov	r0, r9
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    ee52:	f36f 1346 	bfc	r3, #5, #2
    ee56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
    ee5a:	4b78      	ldr	r3, [pc, #480]	; (f03c <lv_obj_create+0x2e8>)
        new_obj->parent = parent;
    ee5c:	6026      	str	r6, [r4, #0]
        new_obj->signal_cb = lv_obj_signal;
    ee5e:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    ee60:	4b77      	ldr	r3, [pc, #476]	; (f040 <lv_obj_create+0x2ec>)
        new_obj->event_cb = NULL;
    ee62:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->design_cb = lv_obj_design;
    ee66:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
    ee68:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    ee6c:	2732      	movs	r7, #50	; 0x32
        new_obj->coords.y1    = parent->coords.y1;
    ee6e:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    ee70:	f04f 0a50 	mov.w	sl, #80	; 0x50
    ee74:	f9b6 8012 	ldrsh.w	r8, [r6, #18]
    ee78:	f003 fb70 	bl	1255c <lv_disp_get_dpi>
    ee7c:	fb00 a007 	mla	r0, r0, r7, sl
    ee80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    ee84:	db26      	blt.n	eed4 <lv_obj_create+0x180>
    ee86:	4648      	mov	r0, r9
    ee88:	f003 fb68 	bl	1255c <lv_disp_get_dpi>
    ee8c:	fb00 a707 	mla	r7, r0, r7, sl
    ee90:	20a0      	movs	r0, #160	; 0xa0
    ee92:	fb97 f7f0 	sdiv	r7, r7, r0
    ee96:	b23f      	sxth	r7, r7
            new_obj->coords.x1    = parent->coords.x1;
    ee98:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    ee9c:	4447      	add	r7, r8
    ee9e:	82e7      	strh	r7, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
    eea0:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    eea2:	2000      	movs	r0, #0
    eea4:	2764      	movs	r7, #100	; 0x64
    eea6:	f04f 0950 	mov.w	r9, #80	; 0x50
    eeaa:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
    eeae:	f003 fb55 	bl	1255c <lv_disp_get_dpi>
    eeb2:	fb00 9007 	mla	r0, r0, r7, r9
    eeb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    eeba:	db0d      	blt.n	eed8 <lv_obj_create+0x184>
    eebc:	2000      	movs	r0, #0
    eebe:	f003 fb4d 	bl	1255c <lv_disp_get_dpi>
    eec2:	fb00 9707 	mla	r7, r0, r7, r9
    eec6:	20a0      	movs	r0, #160	; 0xa0
    eec8:	fb97 f7f0 	sdiv	r7, r7, r0
    eecc:	b23f      	sxth	r7, r7
    eece:	4447      	add	r7, r8
    eed0:	82a7      	strh	r7, [r4, #20]
    eed2:	e777      	b.n	edc4 <lv_obj_create+0x70>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    eed4:	2701      	movs	r7, #1
    eed6:	e7df      	b.n	ee98 <lv_obj_create+0x144>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    eed8:	2701      	movs	r7, #1
    eeda:	e7f8      	b.n	eece <lv_obj_create+0x17a>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    eedc:	2101      	movs	r1, #1
    eede:	4620      	mov	r0, r4
    eee0:	f004 fb38 	bl	13554 <lv_theme_apply>
    LV_LOG_INFO("Object create ready");
    eee4:	4b57      	ldr	r3, [pc, #348]	; (f044 <lv_obj_create+0x2f0>)
    eee6:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
    eeea:	9300      	str	r3, [sp, #0]
    eeec:	2001      	movs	r0, #1
    eeee:	4b52      	ldr	r3, [pc, #328]	; (f038 <lv_obj_create+0x2e4>)
    eef0:	4950      	ldr	r1, [pc, #320]	; (f034 <lv_obj_create+0x2e0>)
    eef2:	e740      	b.n	ed76 <lv_obj_create+0x22>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    eef4:	4640      	mov	r0, r8
    eef6:	f105 0128 	add.w	r1, r5, #40	; 0x28
    eefa:	f00e fc3a 	bl	1d772 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
    eefe:	f105 0110 	add.w	r1, r5, #16
    ef02:	f104 0010 	add.w	r0, r4, #16
    ef06:	f00c ffef 	bl	1bee8 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    ef0a:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
    return memcpy(dst, src, len);
    ef0e:	2204      	movs	r2, #4
    ef10:	8623      	strh	r3, [r4, #48]	; 0x30
    ef12:	4638      	mov	r0, r7
    ef14:	f105 0138 	add.w	r1, r5, #56	; 0x38
    ef18:	f00a f976 	bl	19208 <memcpy>
        new_obj->base_dir = copy->base_dir;
    ef1c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    ef20:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    ef24:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ef28:	f363 1246 	bfi	r2, r3, #5, #2
    ef2c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->event_cb = copy->event_cb;
    ef30:	69ab      	ldr	r3, [r5, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    ef32:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
        new_obj->event_cb = copy->event_cb;
    ef36:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    ef38:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    ef3c:	09db      	lsrs	r3, r3, #7
    ef3e:	f363 12c7 	bfi	r2, r3, #7, #1
    ef42:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->click        = copy->click;
    ef46:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    ef4a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    ef4e:	f362 0300 	bfi	r3, r2, #0, #1
    ef52:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->drag         = copy->drag;
    ef56:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    ef5a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    ef5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ef62:	f363 0241 	bfi	r2, r3, #1, #1
    ef66:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_dir     = copy->drag_dir;
    ef6a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    ef6e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    ef72:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ef76:	f363 0284 	bfi	r2, r3, #2, #3
    ef7a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->drag_throw   = copy->drag_throw;
    ef7e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    ef82:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    ef86:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ef8a:	f363 0282 	bfi	r2, r3, #2, #1
    ef8e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_parent  = copy->drag_parent;
    ef92:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    ef96:	b2d2      	uxtb	r2, r2
    ef98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ef9c:	f363 02c3 	bfi	r2, r3, #3, #1
    efa0:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->hidden       = copy->hidden;
    efa4:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    efa8:	b2d2      	uxtb	r2, r2
    efaa:	f3c3 1300 	ubfx	r3, r3, #4, #1
    efae:	f363 1204 	bfi	r2, r3, #4, #1
    efb2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->top          = copy->top;
    efb6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    efba:	b2d2      	uxtb	r2, r2
    efbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    efc0:	f363 1245 	bfi	r2, r3, #5, #1
    efc4:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->parent_event = copy->parent_event;
    efc8:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    efcc:	b2d2      	uxtb	r2, r2
    efce:	f3c3 1380 	ubfx	r3, r3, #6, #1
    efd2:	f363 1286 	bfi	r2, r3, #6, #1
    efd6:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->protect      = copy->protect;
    efda:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    efde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->gesture_parent = copy->gesture_parent;
    efe2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    efe6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    efea:	f362 0300 	bfi	r3, r2, #0, #1
    efee:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->focus_parent = copy->focus_parent;
    eff2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    eff6:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    effa:	f3c3 0340 	ubfx	r3, r3, #1, #1
    effe:	f363 0241 	bfi	r2, r3, #1, #1
    f002:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    f006:	682b      	ldr	r3, [r5, #0]
    f008:	b173      	cbz	r3, f028 <lv_obj_create+0x2d4>
    f00a:	2e00      	cmp	r6, #0
    f00c:	f43f af6a 	beq.w	eee4 <lv_obj_create+0x190>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    f010:	4628      	mov	r0, r5
    f012:	f00d f8f3 	bl	1c1fc <lv_obj_get_x>
    f016:	4601      	mov	r1, r0
    f018:	4628      	mov	r0, r5
    f01a:	f00d f8f7 	bl	1c20c <lv_obj_get_y>
    f01e:	4602      	mov	r2, r0
    f020:	4620      	mov	r0, r4
    f022:	f00d f81f 	bl	1c064 <lv_obj_set_pos>
    if(parent != NULL) {
    f026:	e6fc      	b.n	ee22 <lv_obj_create+0xce>
    f028:	2e00      	cmp	r6, #0
    f02a:	f47f aefa 	bne.w	ee22 <lv_obj_create+0xce>
    f02e:	e759      	b.n	eee4 <lv_obj_create+0x190>
    f030:	00026edd 	.word	0x00026edd
    f034:	00026e5f 	.word	0x00026e5f
    f038:	00026f86 	.word	0x00026f86
    f03c:	0000fd95 	.word	0x0000fd95
    f040:	0001c8b3 	.word	0x0001c8b3
    f044:	00026f2d 	.word	0x00026f2d

0000f048 <trans_del>:
{
    f048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f04c:	4607      	mov	r7, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    f04e:	481a      	ldr	r0, [pc, #104]	; (f0b8 <trans_del+0x70>)
{
    f050:	460d      	mov	r5, r1
    f052:	4616      	mov	r6, r2
    f054:	4698      	mov	r8, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    f056:	f012 fa8f 	bl	21578 <_lv_ll_get_tail>
    f05a:	4604      	mov	r4, r0
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    f05c:	f8df a058 	ldr.w	sl, [pc, #88]	; f0b8 <trans_del+0x70>
    while(tr != NULL) {
    f060:	b90c      	cbnz	r4, f066 <trans_del+0x1e>
}
    f062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(tr == tr_limit) break;
    f066:	4544      	cmp	r4, r8
    f068:	d0fb      	beq.n	f062 <trans_del+0x1a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    f06a:	4621      	mov	r1, r4
    f06c:	4650      	mov	r0, sl
    f06e:	f012 fa8b 	bl	21588 <_lv_ll_get_prev>
    f072:	4681      	mov	r9, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    f074:	6820      	ldr	r0, [r4, #0]
    f076:	42b8      	cmp	r0, r7
    f078:	d11b      	bne.n	f0b2 <trans_del+0x6a>
    f07a:	79a1      	ldrb	r1, [r4, #6]
    f07c:	42a9      	cmp	r1, r5
    f07e:	d001      	beq.n	f084 <trans_del+0x3c>
    f080:	2dff      	cmp	r5, #255	; 0xff
    f082:	d116      	bne.n	f0b2 <trans_del+0x6a>
    f084:	88a3      	ldrh	r3, [r4, #4]
    f086:	42b3      	cmp	r3, r6
    f088:	d001      	beq.n	f08e <trans_del+0x46>
    f08a:	2eff      	cmp	r6, #255	; 0xff
    f08c:	d111      	bne.n	f0b2 <trans_del+0x6a>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    f08e:	f00d f8c5 	bl	1c21c <lv_obj_get_style_list>
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    f092:	f00e fb3a 	bl	1d70a <_lv_style_list_get_transition_style>
            lv_style_remove_prop(style_trans, tr->prop);
    f096:	88a1      	ldrh	r1, [r4, #4]
    f098:	f00e f994 	bl	1d3c4 <lv_style_remove_prop>
            lv_anim_del(tr, NULL);
    f09c:	2100      	movs	r1, #0
    f09e:	4620      	mov	r0, r4
    f0a0:	f003 fc2a 	bl	128f8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    f0a4:	4650      	mov	r0, sl
    f0a6:	4621      	mov	r1, r4
    f0a8:	f012 faa4 	bl	215f4 <_lv_ll_remove>
            lv_mem_free(tr);
    f0ac:	4620      	mov	r0, r4
    f0ae:	f003 fcd5 	bl	12a5c <lv_mem_free>
{
    f0b2:	464c      	mov	r4, r9
    f0b4:	e7d4      	b.n	f060 <trans_del+0x18>
    f0b6:	bf00      	nop
    f0b8:	20025e78 	.word	0x20025e78

0000f0bc <obj_del_core>:
{
    f0bc:	b570      	push	{r4, r5, r6, lr}
    f0be:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
    f0c0:	2200      	movs	r2, #0
    f0c2:	2115      	movs	r1, #21
    f0c4:	f00c ff1a 	bl	1befc <lv_event_send>
    lv_anim_del(obj, NULL);
    f0c8:	2100      	movs	r1, #0
    f0ca:	4620      	mov	r0, r4
    f0cc:	f003 fc14 	bl	128f8 <lv_anim_del>
    trans_del(obj, 0xFF, 0xFF, NULL);
    f0d0:	22ff      	movs	r2, #255	; 0xff
    f0d2:	2300      	movs	r3, #0
    f0d4:	4611      	mov	r1, r2
    f0d6:	4620      	mov	r0, r4
    f0d8:	f7ff ffb6 	bl	f048 <trans_del>
    i = _lv_ll_get_head(&(obj->child_ll));
    f0dc:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
    f0de:	4628      	mov	r0, r5
    f0e0:	f012 fa47 	bl	21572 <_lv_ll_get_head>
    while(i != NULL) {
    f0e4:	b9f8      	cbnz	r0, f126 <obj_del_core+0x6a>
    lv_event_temp_data_t * t = event_temp_data_head;
    f0e6:	4b1e      	ldr	r3, [pc, #120]	; (f160 <obj_del_core+0xa4>)
    f0e8:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
    f0ea:	2301      	movs	r3, #1
    while(t) {
    f0ec:	b9f6      	cbnz	r6, f12c <obj_del_core+0x70>
    lv_indev_t * indev = lv_indev_get_next(NULL);
    f0ee:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
    f0f0:	f003 faee 	bl	126d0 <lv_indev_get_next>
    f0f4:	4605      	mov	r5, r0
    while(indev) {
    f0f6:	b9f8      	cbnz	r0, f138 <obj_del_core+0x7c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
    f0f8:	4602      	mov	r2, r0
    f0fa:	4601      	mov	r1, r0
    f0fc:	69e3      	ldr	r3, [r4, #28]
    f0fe:	4620      	mov	r0, r4
    f100:	4798      	blx	r3
    return obj->parent;
    f102:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
    f104:	bb40      	cbnz	r0, f158 <obj_del_core+0x9c>
        lv_disp_t * d = lv_obj_get_disp(obj);
    f106:	4620      	mov	r0, r4
    f108:	f7ff fdee 	bl	ece8 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
    f10c:	4621      	mov	r1, r4
    f10e:	3034      	adds	r0, #52	; 0x34
        _lv_ll_remove(&(par->child_ll), obj);
    f110:	f012 fa70 	bl	215f4 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
    f114:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f116:	b108      	cbz	r0, f11c <obj_del_core+0x60>
    f118:	f003 fca0 	bl	12a5c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
    f11c:	4620      	mov	r0, r4
}
    f11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(obj); /*Free the object itself*/
    f122:	f003 bc9b 	b.w	12a5c <lv_mem_free>
        obj_del_core(i);
    f126:	f7ff ffc9 	bl	f0bc <obj_del_core>
    f12a:	e7d8      	b.n	f0de <obj_del_core+0x22>
        if(t->obj == obj) t->deleted = true;
    f12c:	6832      	ldr	r2, [r6, #0]
    f12e:	4294      	cmp	r4, r2
    f130:	bf08      	it	eq
    f132:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
    f134:	68b6      	ldr	r6, [r6, #8]
    f136:	e7d9      	b.n	f0ec <obj_del_core+0x30>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
    f138:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f13a:	42a3      	cmp	r3, r4
    f13c:	d002      	beq.n	f144 <obj_del_core+0x88>
    f13e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    f140:	42a3      	cmp	r3, r4
    f142:	d103      	bne.n	f14c <obj_del_core+0x90>
            lv_indev_reset(indev, obj);
    f144:	4621      	mov	r1, r4
    f146:	4628      	mov	r0, r5
    f148:	f7ff fc8c 	bl	ea64 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
    f14c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        indev = lv_indev_get_next(indev);
    f14e:	4628      	mov	r0, r5
        if(indev->proc.types.pointer.last_pressed == obj) {
    f150:	42a3      	cmp	r3, r4
            indev->proc.types.pointer.last_pressed = NULL;
    f152:	bf08      	it	eq
    f154:	642e      	streq	r6, [r5, #64]	; 0x40
        indev = lv_indev_get_next(indev);
    f156:	e7cb      	b.n	f0f0 <obj_del_core+0x34>
        _lv_ll_remove(&(par->child_ll), obj);
    f158:	4621      	mov	r1, r4
    f15a:	3004      	adds	r0, #4
    f15c:	e7d8      	b.n	f110 <obj_del_core+0x54>
    f15e:	bf00      	nop
    f160:	20025d24 	.word	0x20025d24

0000f164 <lv_obj_clean_style_list>:
{
    f164:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f166:	4604      	mov	r4, r0
    f168:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    f16a:	f00d f857 	bl	1c21c <lv_obj_get_style_list>
    if(style_dsc == NULL) {
    f16e:	b950      	cbnz	r0, f186 <lv_obj_clean_style_list+0x22>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
    f170:	4b0a      	ldr	r3, [pc, #40]	; (f19c <lv_obj_clean_style_list+0x38>)
    f172:	f240 42d5 	movw	r2, #1237	; 0x4d5
    f176:	9300      	str	r3, [sp, #0]
    f178:	2002      	movs	r0, #2
    f17a:	4b09      	ldr	r3, [pc, #36]	; (f1a0 <lv_obj_clean_style_list+0x3c>)
    f17c:	4909      	ldr	r1, [pc, #36]	; (f1a4 <lv_obj_clean_style_list+0x40>)
    f17e:	f003 fc1d 	bl	129bc <_lv_log_add>
}
    f182:	b003      	add	sp, #12
    f184:	bd30      	pop	{r4, r5, pc}
    _lv_style_list_reset(style_dsc);
    f186:	f00e fac8 	bl	1d71a <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
    f18a:	2300      	movs	r3, #0
    f18c:	22ff      	movs	r2, #255	; 0xff
    f18e:	4629      	mov	r1, r5
    f190:	4620      	mov	r0, r4
}
    f192:	b003      	add	sp, #12
    f194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    trans_del(obj, part, 0xFF, NULL);
    f198:	f7ff bf56 	b.w	f048 <trans_del>
    f19c:	00026f41 	.word	0x00026f41
    f1a0:	00026f94 	.word	0x00026f94
    f1a4:	00026e5f 	.word	0x00026e5f

0000f1a8 <trans_anim_ready_cb>:
{
    f1a8:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    f1aa:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    f1ac:	4816      	ldr	r0, [pc, #88]	; (f208 <trans_anim_ready_cb+0x60>)
    f1ae:	f012 f9e0 	bl	21572 <_lv_ll_get_head>
    bool running = false;
    f1b2:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    f1b4:	4601      	mov	r1, r0
    f1b6:	4e14      	ldr	r6, [pc, #80]	; (f208 <trans_anim_ready_cb+0x60>)
    f1b8:	b991      	cbnz	r1, f1e0 <trans_anim_ready_cb+0x38>
    if(!running) {
    f1ba:	b945      	cbnz	r5, f1ce <trans_anim_ready_cb+0x26>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    f1bc:	79a1      	ldrb	r1, [r4, #6]
    f1be:	6820      	ldr	r0, [r4, #0]
    f1c0:	f00d f82c 	bl	1c21c <lv_obj_get_style_list>
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    f1c4:	f00e faa1 	bl	1d70a <_lv_style_list_get_transition_style>
        lv_style_remove_prop(style_trans, tr->prop);
    f1c8:	88a1      	ldrh	r1, [r4, #4]
    f1ca:	f00e f8fb 	bl	1d3c4 <lv_style_remove_prop>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    f1ce:	4621      	mov	r1, r4
    f1d0:	480d      	ldr	r0, [pc, #52]	; (f208 <trans_anim_ready_cb+0x60>)
    f1d2:	f012 fa0f 	bl	215f4 <_lv_ll_remove>
    lv_mem_free(tr);
    f1d6:	4620      	mov	r0, r4
}
    f1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(tr);
    f1dc:	f003 bc3e 	b.w	12a5c <lv_mem_free>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    f1e0:	42a1      	cmp	r1, r4
    f1e2:	d00c      	beq.n	f1fe <trans_anim_ready_cb+0x56>
    f1e4:	680a      	ldr	r2, [r1, #0]
    f1e6:	6823      	ldr	r3, [r4, #0]
    f1e8:	429a      	cmp	r2, r3
    f1ea:	d108      	bne.n	f1fe <trans_anim_ready_cb+0x56>
    f1ec:	684b      	ldr	r3, [r1, #4]
    f1ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    f1f2:	6863      	ldr	r3, [r4, #4]
    f1f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
    f1f8:	429a      	cmp	r2, r3
    f1fa:	bf08      	it	eq
    f1fc:	2501      	moveq	r5, #1
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    f1fe:	4630      	mov	r0, r6
    f200:	f012 f9bd 	bl	2157e <_lv_ll_get_next>
    f204:	4601      	mov	r1, r0
    f206:	e7d7      	b.n	f1b8 <trans_anim_ready_cb+0x10>
    f208:	20025e78 	.word	0x20025e78

0000f20c <_lv_obj_get_style_int>:
{
    f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f210:	4606      	mov	r6, r0
    f212:	468b      	mov	fp, r1
    f214:	4617      	mov	r7, r2
    while(parent) {
    f216:	4615      	mov	r5, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f218:	f248 0982 	movw	r9, #32898	; 0x8082
    f21c:	f248 0a83 	movw	sl, #32899	; 0x8083
{
    f220:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
    f222:	ea4f 2812 	mov.w	r8, r2, lsr #8
    while(parent) {
    f226:	2e00      	cmp	r6, #0
    f228:	f000 80ae 	beq.w	f388 <_lv_obj_get_style_int+0x17c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
    f22c:	4659      	mov	r1, fp
    f22e:	4630      	mov	r0, r6
    f230:	f00c fff4 	bl	1c21c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
    f234:	7942      	ldrb	r2, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
    f236:	4604      	mov	r4, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
    f238:	0711      	lsls	r1, r2, #28
    f23a:	d414      	bmi.n	f266 <_lv_obj_get_style_int+0x5a>
    f23c:	7901      	ldrb	r1, [r0, #4]
    f23e:	068b      	lsls	r3, r1, #26
    f240:	d011      	beq.n	f266 <_lv_obj_get_style_int+0x5a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
    f242:	f012 0f04 	tst.w	r2, #4
    f246:	f425 42fe 	bic.w	r2, r5, #32512	; 0x7f00
    f24a:	d105      	bne.n	f258 <_lv_obj_get_style_int+0x4c>
    f24c:	4659      	mov	r1, fp
    f24e:	4630      	mov	r0, r6
    f250:	9201      	str	r2, [sp, #4]
    f252:	f000 f8d7 	bl	f404 <update_style_cache>
    f256:	9a01      	ldr	r2, [sp, #4]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f258:	2a33      	cmp	r2, #51	; 0x33
    f25a:	dc68      	bgt.n	f32e <_lv_obj_get_style_int+0x122>
    f25c:	2a2f      	cmp	r2, #47	; 0x2f
    f25e:	dc20      	bgt.n	f2a2 <_lv_obj_get_style_int+0x96>
    f260:	2a18      	cmp	r2, #24
    f262:	dc61      	bgt.n	f328 <_lv_obj_get_style_int+0x11c>
    f264:	bb52      	cbnz	r2, f2bc <_lv_obj_get_style_int+0xb0>
        lv_state_t state = lv_obj_get_state(parent, part);
    f266:	4659      	mov	r1, fp
    f268:	4630      	mov	r0, r6
    f26a:	f00d f828 	bl	1c2be <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    f26e:	eb07 2500 	add.w	r5, r7, r0, lsl #8
    f272:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_int(list, prop, &value_act);
    f274:	4629      	mov	r1, r5
    f276:	4620      	mov	r0, r4
    f278:	f10d 020e 	add.w	r2, sp, #14
    f27c:	f00e fae9 	bl	1d852 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
    f280:	2801      	cmp	r0, #1
    f282:	f040 80a6 	bne.w	f3d2 <_lv_obj_get_style_int+0x1c6>
    f286:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
    f28a:	b005      	add	sp, #20
    f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f290:	f1a2 0154 	sub.w	r1, r2, #84	; 0x54
    f294:	2201      	movs	r2, #1
    f296:	4b5a      	ldr	r3, [pc, #360]	; (f400 <_lv_obj_get_style_int+0x1f4>)
    f298:	408a      	lsls	r2, r1
    f29a:	421a      	tst	r2, r3
    f29c:	d0e3      	beq.n	f266 <_lv_obj_get_style_int+0x5a>
                    if(list->blend_mode_all_normal) def = true;
    f29e:	79a2      	ldrb	r2, [r4, #6]
    f2a0:	e08c      	b.n	f3bc <_lv_obj_get_style_int+0x1b0>
    f2a2:	3a31      	subs	r2, #49	; 0x31
    f2a4:	2a02      	cmp	r2, #2
    f2a6:	d87d      	bhi.n	f3a4 <_lv_obj_get_style_int+0x198>
    f2a8:	a301      	add	r3, pc, #4	; (adr r3, f2b0 <_lv_obj_get_style_int+0xa4>)
    f2aa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    f2ae:	bf00      	nop
    f2b0:	0000f3a9 	.word	0x0000f3a9
    f2b4:	0000f29f 	.word	0x0000f29f
    f2b8:	0000f3ad 	.word	0x0000f3ad
    f2bc:	3a01      	subs	r2, #1
    f2be:	2a17      	cmp	r2, #23
    f2c0:	d8d1      	bhi.n	f266 <_lv_obj_get_style_int+0x5a>
    f2c2:	a301      	add	r3, pc, #4	; (adr r3, f2c8 <_lv_obj_get_style_int+0xbc>)
    f2c4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    f2c8:	0000f3b3 	.word	0x0000f3b3
    f2cc:	0000f377 	.word	0x0000f377
    f2d0:	0000f267 	.word	0x0000f267
    f2d4:	0000f37f 	.word	0x0000f37f
    f2d8:	0000f37f 	.word	0x0000f37f
    f2dc:	0000f37f 	.word	0x0000f37f
    f2e0:	0000f37f 	.word	0x0000f37f
    f2e4:	0000f267 	.word	0x0000f267
    f2e8:	0000f267 	.word	0x0000f267
    f2ec:	0000f267 	.word	0x0000f267
    f2f0:	0000f267 	.word	0x0000f267
    f2f4:	0000f267 	.word	0x0000f267
    f2f8:	0000f267 	.word	0x0000f267
    f2fc:	0000f267 	.word	0x0000f267
    f300:	0000f267 	.word	0x0000f267
    f304:	0000f3c3 	.word	0x0000f3c3
    f308:	0000f3c3 	.word	0x0000f3c3
    f30c:	0000f3c3 	.word	0x0000f3c3
    f310:	0000f3c3 	.word	0x0000f3c3
    f314:	0000f267 	.word	0x0000f267
    f318:	0000f3c7 	.word	0x0000f3c7
    f31c:	0000f3c7 	.word	0x0000f3c7
    f320:	0000f3c7 	.word	0x0000f3c7
    f324:	0000f3c7 	.word	0x0000f3c7
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f328:	2a20      	cmp	r2, #32
    f32a:	d0b8      	beq.n	f29e <_lv_obj_get_style_int+0x92>
    f32c:	e79b      	b.n	f266 <_lv_obj_get_style_int+0x5a>
    f32e:	2a72      	cmp	r2, #114	; 0x72
    f330:	dc0b      	bgt.n	f34a <_lv_obj_get_style_int+0x13e>
    f332:	2a53      	cmp	r2, #83	; 0x53
    f334:	dcac      	bgt.n	f290 <_lv_obj_get_style_int+0x84>
    f336:	2a42      	cmp	r2, #66	; 0x42
    f338:	d0b1      	beq.n	f29e <_lv_obj_get_style_int+0x92>
    f33a:	2a50      	cmp	r2, #80	; 0x50
    f33c:	d03d      	beq.n	f3ba <_lv_obj_get_style_int+0x1ae>
    f33e:	2a40      	cmp	r2, #64	; 0x40
    f340:	d191      	bne.n	f266 <_lv_obj_get_style_int+0x5a>
                    if(list->outline_width_zero) def = true;
    f342:	79e2      	ldrb	r2, [r4, #7]
                    if(list->pad_all_zero) def = true;
    f344:	f012 0f01 	tst.w	r2, #1
    f348:	e00c      	b.n	f364 <_lv_obj_get_style_int+0x158>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f34a:	454a      	cmp	r2, r9
    f34c:	d03f      	beq.n	f3ce <_lv_obj_get_style_int+0x1c2>
    f34e:	dc0c      	bgt.n	f36a <_lv_obj_get_style_int+0x15e>
    f350:	2a91      	cmp	r2, #145	; 0x91
    f352:	d0a4      	beq.n	f29e <_lv_obj_get_style_int+0x92>
    f354:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    f358:	3a80      	subs	r2, #128	; 0x80
    f35a:	2a01      	cmp	r2, #1
    f35c:	d883      	bhi.n	f266 <_lv_obj_get_style_int+0x5a>
                    if(list->text_space_zero) def = true;
    f35e:	79e2      	ldrb	r2, [r4, #7]
                    if(list->border_width_zero) def = true;
    f360:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
    f364:	f43f af7f 	beq.w	f266 <_lv_obj_get_style_int+0x5a>
    f368:	e00e      	b.n	f388 <_lv_obj_get_style_int+0x17c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f36a:	4552      	cmp	r2, sl
    f36c:	d097      	beq.n	f29e <_lv_obj_get_style_int+0x92>
    f36e:	f248 01a0 	movw	r1, #32928	; 0x80a0
    f372:	428a      	cmp	r2, r1
    f374:	e7d9      	b.n	f32a <_lv_obj_get_style_int+0x11e>
                    if(list->clip_corner_off) def = true;
    f376:	7962      	ldrb	r2, [r4, #5]
                    if(list->text_decor_none) def = true;
    f378:	f012 0f40 	tst.w	r2, #64	; 0x40
    f37c:	e7f2      	b.n	f364 <_lv_obj_get_style_int+0x158>
                    if(list->transform_all_zero) def = true;
    f37e:	f994 2005 	ldrsb.w	r2, [r4, #5]
                    if(list->border_post_off) def = true;
    f382:	2a00      	cmp	r2, #0
    f384:	f6bf af6f 	bge.w	f266 <_lv_obj_get_style_int+0x5a>
    prop = prop & (~LV_STYLE_STATE_MASK);
    f388:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
    f38c:	2d22      	cmp	r5, #34	; 0x22
    prop = prop & (~LV_STYLE_STATE_MASK);
    f38e:	b2ab      	uxth	r3, r5
    switch(prop) {
    f390:	d030      	beq.n	f3f4 <_lv_obj_get_style_int+0x1e8>
    f392:	d828      	bhi.n	f3e6 <_lv_obj_get_style_int+0x1da>
    f394:	2b03      	cmp	r3, #3
    f396:	d02f      	beq.n	f3f8 <_lv_obj_get_style_int+0x1ec>
            return LV_IMG_ZOOM_NONE;
    f398:	2b07      	cmp	r3, #7
    f39a:	bf14      	ite	ne
    f39c:	2000      	movne	r0, #0
    f39e:	f44f 7080 	moveq.w	r0, #256	; 0x100
    f3a2:	e772      	b.n	f28a <_lv_obj_get_style_int+0x7e>
                    if(list->border_width_zero) def = true;
    f3a4:	79a2      	ldrb	r2, [r4, #6]
    f3a6:	e7db      	b.n	f360 <_lv_obj_get_style_int+0x154>
                    if(list->border_side_full) def = true;
    f3a8:	79a2      	ldrb	r2, [r4, #6]
    f3aa:	e7e5      	b.n	f378 <_lv_obj_get_style_int+0x16c>
                    if(list->border_post_off) def = true;
    f3ac:	f994 2006 	ldrsb.w	r2, [r4, #6]
    f3b0:	e7e7      	b.n	f382 <_lv_obj_get_style_int+0x176>
                    if(list->radius_zero) def = true;
    f3b2:	7962      	ldrb	r2, [r4, #5]
    f3b4:	f012 0f10 	tst.w	r2, #16
    f3b8:	e7d4      	b.n	f364 <_lv_obj_get_style_int+0x158>
                    if(list->shadow_width_zero) def = true;
    f3ba:	79e2      	ldrb	r2, [r4, #7]
                    if(list->blend_mode_all_normal) def = true;
    f3bc:	f012 0f04 	tst.w	r2, #4
    f3c0:	e7d0      	b.n	f364 <_lv_obj_get_style_int+0x158>
                    if(list->pad_all_zero) def = true;
    f3c2:	79a2      	ldrb	r2, [r4, #6]
    f3c4:	e7be      	b.n	f344 <_lv_obj_get_style_int+0x138>
                    if(list->margin_all_zero) def = true;
    f3c6:	79a2      	ldrb	r2, [r4, #6]
    f3c8:	f012 0f02 	tst.w	r2, #2
    f3cc:	e7ca      	b.n	f364 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
    f3ce:	79e2      	ldrb	r2, [r4, #7]
    f3d0:	e7d2      	b.n	f378 <_lv_obj_get_style_int+0x16c>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
    f3d2:	f018 0f80 	tst.w	r8, #128	; 0x80
    f3d6:	d0d7      	beq.n	f388 <_lv_obj_get_style_int+0x17c>
        if(part != LV_OBJ_PART_MAIN) {
    f3d8:	f1bb 0f00 	cmp.w	fp, #0
    f3dc:	d100      	bne.n	f3e0 <_lv_obj_get_style_int+0x1d4>
    return obj->parent;
    f3de:	6836      	ldr	r6, [r6, #0]
{
    f3e0:	f04f 0b00 	mov.w	fp, #0
    f3e4:	e71f      	b.n	f226 <_lv_obj_get_style_int+0x1a>
    switch(prop) {
    f3e6:	2b31      	cmp	r3, #49	; 0x31
    f3e8:	d008      	beq.n	f3fc <_lv_obj_get_style_int+0x1f0>
            return LV_DPI / 8;
    f3ea:	2bc0      	cmp	r3, #192	; 0xc0
    f3ec:	bf14      	ite	ne
    f3ee:	2000      	movne	r0, #0
    f3f0:	2010      	moveq	r0, #16
    f3f2:	e74a      	b.n	f28a <_lv_obj_get_style_int+0x7e>
            return 255;
    f3f4:	20ff      	movs	r0, #255	; 0xff
    f3f6:	e748      	b.n	f28a <_lv_obj_get_style_int+0x7e>
    switch(prop) {
    f3f8:	2006      	movs	r0, #6
    f3fa:	e746      	b.n	f28a <_lv_obj_get_style_int+0x7e>
            return LV_BORDER_SIDE_FULL;
    f3fc:	200f      	movs	r0, #15
    f3fe:	e744      	b.n	f28a <_lv_obj_get_style_int+0x7e>
    f400:	40001001 	.word	0x40001001

0000f404 <update_style_cache>:
 * @param obj pointer to an obejct
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
    f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f406:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
    f408:	4610      	mov	r0, r2
{
    f40a:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
    f40c:	f7ff fb48 	bl	eaa0 <style_prop_is_cacheble>
    f410:	2800      	cmp	r0, #0
    f412:	f000 80fe 	beq.w	f612 <update_style_cache+0x20e>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
    f416:	4628      	mov	r0, r5
    f418:	f00c ff00 	bl	1c21c <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
    f41c:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
    f41e:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
    f420:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
    f424:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    f428:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    f42c:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
    f42e:	f248 0282 	movw	r2, #32898	; 0x8082
    f432:	4631      	mov	r1, r6
    f434:	4628      	mov	r0, r5
    f436:	f7ff fee9 	bl	f20c <_lv_obj_get_style_int>
#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
    f43a:	b2c0      	uxtb	r0, r0
    f43c:	fab0 f080 	clz	r0, r0
    f440:	79e3      	ldrb	r3, [r4, #7]
    f442:	0940      	lsrs	r0, r0, #5
    f444:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    f448:	f248 028e 	movw	r2, #32910	; 0x808e
    f44c:	4631      	mov	r1, r6
    f44e:	71e3      	strb	r3, [r4, #7]
    f450:	4628      	mov	r0, r5
    f452:	f000 f931 	bl	f6b8 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;

    list->text_space_zero = 1;
    f456:	4b96      	ldr	r3, [pc, #600]	; (f6b0 <update_style_cache+0x2ac>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
    f458:	f248 0280 	movw	r2, #32896	; 0x8080
    f45c:	4283      	cmp	r3, r0
    f45e:	bf0c      	ite	eq
    f460:	23a0      	moveq	r3, #160	; 0xa0
    f462:	2320      	movne	r3, #32
    f464:	79e0      	ldrb	r0, [r4, #7]
    f466:	4631      	mov	r1, r6
    f468:	f000 005f 	and.w	r0, r0, #95	; 0x5f
    f46c:	4303      	orrs	r3, r0
    f46e:	71e3      	strb	r3, [r4, #7]
    f470:	4628      	mov	r0, r5
    f472:	f7ff fecb 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
    f476:	2800      	cmp	r0, #0
    f478:	f000 80cc 	beq.w	f614 <update_style_cache+0x210>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
    f47c:	79e3      	ldrb	r3, [r4, #7]
    f47e:	f36f 1345 	bfc	r3, #5, #1
    f482:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    f484:	222c      	movs	r2, #44	; 0x2c
    f486:	4631      	mov	r1, r6
    f488:	4628      	mov	r0, r5
    f48a:	f00c ff65 	bl	1c358 <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
    f48e:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    f492:	fab0 f080 	clz	r0, r0
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
    f496:	4253      	negs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    f498:	ea4f 1050 	mov.w	r0, r0, lsr #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
    f49c:	4153      	adcs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    f49e:	00c0      	lsls	r0, r0, #3
    f4a0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    f4a4:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    f4a6:	2230      	movs	r2, #48	; 0x30
    f4a8:	f023 0318 	bic.w	r3, r3, #24
    f4ac:	4318      	orrs	r0, r3
    f4ae:	4631      	mov	r1, r6
    f4b0:	71a0      	strb	r0, [r4, #6]
    f4b2:	4628      	mov	r0, r5
    f4b4:	f7ff feaa 	bl	f20c <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
    f4b8:	fab0 f080 	clz	r0, r0
    f4bc:	79a3      	ldrb	r3, [r4, #6]
    f4be:	0940      	lsrs	r0, r0, #5
    f4c0:	f360 1345 	bfi	r3, r0, #5, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    f4c4:	2231      	movs	r2, #49	; 0x31
    f4c6:	4631      	mov	r1, r6
    f4c8:	71a3      	strb	r3, [r4, #6]
    f4ca:	4628      	mov	r0, r5
    f4cc:	f7ff fe9e 	bl	f20c <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
    f4d0:	b2c0      	uxtb	r0, r0
    f4d2:	f1a0 010f 	sub.w	r1, r0, #15
    f4d6:	4248      	negs	r0, r1
    f4d8:	79a3      	ldrb	r3, [r4, #6]
    f4da:	4148      	adcs	r0, r1
    f4dc:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    f4e0:	2233      	movs	r2, #51	; 0x33
    f4e2:	4631      	mov	r1, r6
    f4e4:	71a3      	strb	r3, [r4, #6]
    f4e6:	4628      	mov	r0, r5
    f4e8:	f7ff fe90 	bl	f20c <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
    f4ec:	fab0 f080 	clz	r0, r0
    f4f0:	79a3      	ldrb	r3, [r4, #6]
    f4f2:	0940      	lsrs	r0, r0, #5
    f4f4:	f360 13c7 	bfi	r3, r0, #7, #1
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
    f4f8:	4631      	mov	r1, r6
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
    f4fa:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
    f4fc:	4628      	mov	r0, r5
    f4fe:	f00c ff23 	bl	1c348 <lv_obj_get_style_clip_corner>
    f502:	7963      	ldrb	r3, [r4, #5]
    f504:	f080 0001 	eor.w	r0, r0, #1
    f508:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
    f50c:	f248 02ad 	movw	r2, #32941	; 0x80ad
    f510:	4631      	mov	r1, r6
    f512:	7163      	strb	r3, [r4, #5]
    f514:	4628      	mov	r0, r5
    f516:	f00c ff1f 	bl	1c358 <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
    f51a:	fab0 f080 	clz	r0, r0
    f51e:	79e3      	ldrb	r3, [r4, #7]
    f520:	0940      	lsrs	r0, r0, #5
    f522:	f360 1304 	bfi	r3, r0, #4, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    f526:	2240      	movs	r2, #64	; 0x40
    f528:	4631      	mov	r1, r6
    f52a:	71e3      	strb	r3, [r4, #7]
    f52c:	4628      	mov	r0, r5
    f52e:	f7ff fe6d 	bl	f20c <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
    f532:	fab0 f080 	clz	r0, r0
    f536:	79e3      	ldrb	r3, [r4, #7]
    f538:	0940      	lsrs	r0, r0, #5
    f53a:	f360 0300 	bfi	r3, r0, #0, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    f53e:	226e      	movs	r2, #110	; 0x6e
    f540:	4631      	mov	r1, r6
    f542:	71e3      	strb	r3, [r4, #7]
    f544:	4628      	mov	r0, r5
    f546:	f000 f8b7 	bl	f6b8 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
    f54a:	fab0 f080 	clz	r0, r0
    f54e:	79e3      	ldrb	r3, [r4, #7]
    f550:	0940      	lsrs	r0, r0, #5
    f552:	f360 0341 	bfi	r3, r0, #1, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    f556:	2201      	movs	r2, #1
    f558:	4631      	mov	r1, r6
    f55a:	71e3      	strb	r3, [r4, #7]
    f55c:	4628      	mov	r0, r5
    f55e:	f7ff fe55 	bl	f20c <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
    f562:	fab0 f080 	clz	r0, r0
    f566:	7963      	ldrb	r3, [r4, #5]
    f568:	0940      	lsrs	r0, r0, #5
    f56a:	f360 1304 	bfi	r3, r0, #4, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    f56e:	2250      	movs	r2, #80	; 0x50
    f570:	4631      	mov	r1, r6
    f572:	7163      	strb	r3, [r4, #5]
    f574:	4628      	mov	r0, r5
    f576:	f7ff fe49 	bl	f20c <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
    f57a:	fab0 f080 	clz	r0, r0
    f57e:	79e3      	ldrb	r3, [r4, #7]
    f580:	0940      	lsrs	r0, r0, #5
    f582:	f360 0382 	bfi	r3, r0, #2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    f586:	227f      	movs	r2, #127	; 0x7f
    f588:	4631      	mov	r1, r6
    f58a:	71e3      	strb	r3, [r4, #7]
    f58c:	4628      	mov	r0, r5
    f58e:	f000 f893 	bl	f6b8 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
    f592:	fab0 f080 	clz	r0, r0


    list->transform_all_zero  = 1;
    f596:	6863      	ldr	r3, [r4, #4]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
    f598:	0940      	lsrs	r0, r0, #5
    list->transform_all_zero  = 1;
    f59a:	06c0      	lsls	r0, r0, #27
    f59c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
    f5a0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    f5a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f5a8:	4318      	orrs	r0, r3
    f5aa:	6060      	str	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
    f5ac:	2206      	movs	r2, #6
    f5ae:	4631      	mov	r1, r6
    f5b0:	4628      	mov	r0, r5
    f5b2:	f7ff fe2b 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
    f5b6:	2800      	cmp	r0, #0
    f5b8:	d036      	beq.n	f628 <update_style_cache+0x224>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
    f5ba:	7963      	ldrb	r3, [r4, #5]
    f5bc:	f36f 13c7 	bfc	r3, #7, #1
    f5c0:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
    f5c2:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
    f5c4:	2210      	movs	r2, #16
    f5c6:	f043 0301 	orr.w	r3, r3, #1
    f5ca:	4631      	mov	r1, r6
    f5cc:	4628      	mov	r0, r5
    f5ce:	71a3      	strb	r3, [r4, #6]
    f5d0:	f7ff fe1c 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
    f5d4:	2800      	cmp	r0, #0
    f5d6:	d03e      	beq.n	f656 <update_style_cache+0x252>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
    f5d8:	79a3      	ldrb	r3, [r4, #6]
    f5da:	f36f 0300 	bfc	r3, #0, #1
    f5de:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
    f5e0:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
    f5e2:	2215      	movs	r2, #21
    f5e4:	f043 0302 	orr.w	r3, r3, #2
    f5e8:	4631      	mov	r1, r6
    f5ea:	4628      	mov	r0, r5
    f5ec:	71a3      	strb	r3, [r4, #6]
    f5ee:	f7ff fe0d 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
    f5f2:	2800      	cmp	r0, #0
    f5f4:	d045      	beq.n	f682 <update_style_cache+0x27e>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
    f5f6:	79a3      	ldrb	r3, [r4, #6]
    f5f8:	f36f 0341 	bfc	r3, #1, #1
    f5fc:	71a3      	strb	r3, [r4, #6]
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
    f5fe:	4b2d      	ldr	r3, [pc, #180]	; (f6b4 <update_style_cache+0x2b0>)
    f600:	ea43 27c7 	orr.w	r7, r3, r7, lsl #11
    f604:	6863      	ldr	r3, [r4, #4]
    f606:	f423 2381 	bic.w	r3, r3, #264192	; 0x40800
    f60a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f60e:	431f      	orrs	r7, r3
    f610:	6067      	str	r7, [r4, #4]
}
    f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
    f614:	f248 0281 	movw	r2, #32897	; 0x8081
    f618:	4631      	mov	r1, r6
    f61a:	4628      	mov	r0, r5
    f61c:	f7ff fdf6 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
    f620:	2800      	cmp	r0, #0
    f622:	f47f af2b 	bne.w	f47c <update_style_cache+0x78>
    f626:	e72d      	b.n	f484 <update_style_cache+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    f628:	2204      	movs	r2, #4
    f62a:	4631      	mov	r1, r6
    f62c:	4628      	mov	r0, r5
    f62e:	f7ff fded 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
    f632:	2800      	cmp	r0, #0
    f634:	d1c1      	bne.n	f5ba <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    f636:	2205      	movs	r2, #5
    f638:	4631      	mov	r1, r6
    f63a:	4628      	mov	r0, r5
    f63c:	f7ff fde6 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
    f640:	2800      	cmp	r0, #0
    f642:	d1ba      	bne.n	f5ba <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
    f644:	2207      	movs	r2, #7
    f646:	4631      	mov	r1, r6
    f648:	4628      	mov	r0, r5
    f64a:	f7ff fddf 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
    f64e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    f652:	d1b2      	bne.n	f5ba <update_style_cache+0x1b6>
    f654:	e7b5      	b.n	f5c2 <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
    f656:	2211      	movs	r2, #17
    f658:	4631      	mov	r1, r6
    f65a:	4628      	mov	r0, r5
    f65c:	f7ff fdd6 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
    f660:	2800      	cmp	r0, #0
    f662:	d1b9      	bne.n	f5d8 <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
    f664:	2212      	movs	r2, #18
    f666:	4631      	mov	r1, r6
    f668:	4628      	mov	r0, r5
    f66a:	f7ff fdcf 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
    f66e:	2800      	cmp	r0, #0
    f670:	d1b2      	bne.n	f5d8 <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
    f672:	2213      	movs	r2, #19
    f674:	4631      	mov	r1, r6
    f676:	4628      	mov	r0, r5
    f678:	f7ff fdc8 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
    f67c:	2800      	cmp	r0, #0
    f67e:	d1ab      	bne.n	f5d8 <update_style_cache+0x1d4>
    f680:	e7ae      	b.n	f5e0 <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
    f682:	2216      	movs	r2, #22
    f684:	4631      	mov	r1, r6
    f686:	4628      	mov	r0, r5
    f688:	f7ff fdc0 	bl	f20c <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
    f68c:	2800      	cmp	r0, #0
    f68e:	d1b2      	bne.n	f5f6 <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
    f690:	2217      	movs	r2, #23
    f692:	4631      	mov	r1, r6
    f694:	4628      	mov	r0, r5
    f696:	f7ff fdb9 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
    f69a:	2800      	cmp	r0, #0
    f69c:	d1ab      	bne.n	f5f6 <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
    f69e:	2218      	movs	r2, #24
    f6a0:	4631      	mov	r1, r6
    f6a2:	4628      	mov	r0, r5
    f6a4:	f7ff fdb2 	bl	f20c <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
    f6a8:	2800      	cmp	r0, #0
    f6aa:	d1a4      	bne.n	f5f6 <update_style_cache+0x1f2>
    f6ac:	e7a7      	b.n	f5fe <update_style_cache+0x1fa>
    f6ae:	bf00      	nop
    f6b0:	200003f8 	.word	0x200003f8
    f6b4:	00040400 	.word	0x00040400

0000f6b8 <_lv_obj_get_style_ptr>:
{
    f6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6bc:	4606      	mov	r6, r0
    f6be:	468b      	mov	fp, r1
    f6c0:	4690      	mov	r8, r2
    while(parent) {
    f6c2:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f6c4:	f248 098e 	movw	r9, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
    f6c8:	f342 2a07 	sbfx	sl, r2, #8, #8
    while(parent) {
    f6cc:	b316      	cbz	r6, f714 <_lv_obj_get_style_ptr+0x5c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
    f6ce:	4659      	mov	r1, fp
    f6d0:	4630      	mov	r0, r6
    f6d2:	f00c fda3 	bl	1c21c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
    f6d6:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
    f6d8:	4607      	mov	r7, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
    f6da:	0719      	lsls	r1, r3, #28
    f6dc:	d42c      	bmi.n	f738 <_lv_obj_get_style_ptr+0x80>
    f6de:	7902      	ldrb	r2, [r0, #4]
    f6e0:	0692      	lsls	r2, r2, #26
    f6e2:	d029      	beq.n	f738 <_lv_obj_get_style_ptr+0x80>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
    f6e4:	f013 0f04 	tst.w	r3, #4
    f6e8:	f424 45fe 	bic.w	r5, r4, #32512	; 0x7f00
    f6ec:	d104      	bne.n	f6f8 <_lv_obj_get_style_ptr+0x40>
    f6ee:	462a      	mov	r2, r5
    f6f0:	4659      	mov	r1, fp
    f6f2:	4630      	mov	r0, r6
    f6f4:	f7ff fe86 	bl	f404 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
    f6f8:	2d7f      	cmp	r5, #127	; 0x7f
    f6fa:	d007      	beq.n	f70c <_lv_obj_get_style_ptr+0x54>
    f6fc:	454d      	cmp	r5, r9
    f6fe:	d017      	beq.n	f730 <_lv_obj_get_style_ptr+0x78>
    f700:	2d6e      	cmp	r5, #110	; 0x6e
    f702:	d119      	bne.n	f738 <_lv_obj_get_style_ptr+0x80>
                    if(list->pattern_img_null) def = true;
    f704:	79fb      	ldrb	r3, [r7, #7]
    f706:	f013 0f02 	tst.w	r3, #2
    f70a:	e002      	b.n	f712 <_lv_obj_get_style_ptr+0x5a>
                    if(list->value_txt_str) def = true;
    f70c:	79fb      	ldrb	r3, [r7, #7]
    f70e:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
    f712:	d011      	beq.n	f738 <_lv_obj_get_style_ptr+0x80>
    prop = prop & (~LV_STYLE_STATE_MASK);
    f714:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    f718:	2cbe      	cmp	r4, #190	; 0xbe
    prop = prop & (~LV_STYLE_STATE_MASK);
    f71a:	b2a3      	uxth	r3, r4
    switch(prop) {
    f71c:	d028      	beq.n	f770 <_lv_obj_get_style_ptr+0xb8>
    f71e:	f248 028e 	movw	r2, #32910	; 0x808e
    f722:	4293      	cmp	r3, r2
    f724:	d001      	beq.n	f72a <_lv_obj_get_style_ptr+0x72>
    f726:	2b7e      	cmp	r3, #126	; 0x7e
    f728:	d124      	bne.n	f774 <_lv_obj_get_style_ptr+0xbc>
            return lv_theme_get_font_normal();
    f72a:	f003 ff3b 	bl	135a4 <lv_theme_get_font_normal>
    f72e:	e012      	b.n	f756 <_lv_obj_get_style_ptr+0x9e>
                    if(list->text_font_normal) def = true;
    f730:	f997 3007 	ldrsb.w	r3, [r7, #7]
    f734:	2b00      	cmp	r3, #0
    f736:	dbed      	blt.n	f714 <_lv_obj_get_style_ptr+0x5c>
        lv_state_t state = lv_obj_get_state(parent, part);
    f738:	4659      	mov	r1, fp
    f73a:	4630      	mov	r0, r6
    f73c:	f00c fdbf 	bl	1c2be <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    f740:	eb08 2400 	add.w	r4, r8, r0, lsl #8
    f744:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
    f746:	4621      	mov	r1, r4
    f748:	4638      	mov	r0, r7
    f74a:	aa01      	add	r2, sp, #4
    f74c:	f00e f943 	bl	1d9d6 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
    f750:	2801      	cmp	r0, #1
    f752:	d103      	bne.n	f75c <_lv_obj_get_style_ptr+0xa4>
    f754:	9801      	ldr	r0, [sp, #4]
}
    f756:	b003      	add	sp, #12
    f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
    f75c:	f1ba 0f00 	cmp.w	sl, #0
    f760:	dad8      	bge.n	f714 <_lv_obj_get_style_ptr+0x5c>
        if(part != LV_OBJ_PART_MAIN) {
    f762:	f1bb 0f00 	cmp.w	fp, #0
    f766:	d100      	bne.n	f76a <_lv_obj_get_style_ptr+0xb2>
    return obj->parent;
    f768:	6836      	ldr	r6, [r6, #0]
{
    f76a:	f04f 0b00 	mov.w	fp, #0
    f76e:	e7ad      	b.n	f6cc <_lv_obj_get_style_ptr+0x14>
            return &lv_anim_path_def;
    f770:	4801      	ldr	r0, [pc, #4]	; (f778 <_lv_obj_get_style_ptr+0xc0>)
    f772:	e7f0      	b.n	f756 <_lv_obj_get_style_ptr+0x9e>
    switch(prop) {
    f774:	2000      	movs	r0, #0
    f776:	e7ee      	b.n	f756 <_lv_obj_get_style_ptr+0x9e>
    f778:	00023d48 	.word	0x00023d48

0000f77c <lv_obj_refresh_style>:
{
    f77c:	b538      	push	{r3, r4, r5, lr}
    f77e:	4614      	mov	r4, r2
    f780:	4605      	mov	r5, r0
    invalidate_style_cache(obj, part, prop);
    f782:	f00c feee 	bl	1c562 <invalidate_style_cache>
    switch(prop) {
    f786:	2c7f      	cmp	r4, #127	; 0x7f
    f788:	d857      	bhi.n	f83a <lv_obj_refresh_style+0xbe>
    f78a:	2c6f      	cmp	r4, #111	; 0x6f
    f78c:	d81b      	bhi.n	f7c6 <lv_obj_refresh_style+0x4a>
    f78e:	2c5c      	cmp	r4, #92	; 0x5c
    f790:	d849      	bhi.n	f826 <lv_obj_refresh_style+0xaa>
    f792:	2c3f      	cmp	r4, #63	; 0x3f
    f794:	d83e      	bhi.n	f814 <lv_obj_refresh_style+0x98>
    f796:	2c07      	cmp	r4, #7
    f798:	d84a      	bhi.n	f830 <lv_obj_refresh_style+0xb4>
    f79a:	2c01      	cmp	r4, #1
    f79c:	d943      	bls.n	f826 <lv_obj_refresh_style+0xaa>
        lv_obj_invalidate(obj);
    f79e:	4628      	mov	r0, r5
    f7a0:	f00c fc3d 	bl	1c01e <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    f7a4:	2200      	movs	r2, #0
    f7a6:	2104      	movs	r1, #4
    f7a8:	4628      	mov	r0, r5
    f7aa:	69eb      	ldr	r3, [r5, #28]
    f7ac:	4798      	blx	r3
        switch(prop) {
    f7ae:	2c18      	cmp	r4, #24
    f7b0:	d854      	bhi.n	f85c <lv_obj_refresh_style+0xe0>
    f7b2:	2c14      	cmp	r4, #20
    f7b4:	d954      	bls.n	f860 <lv_obj_refresh_style+0xe4>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    f7b6:	6828      	ldr	r0, [r5, #0]
    f7b8:	2800      	cmp	r0, #0
    f7ba:	d051      	beq.n	f860 <lv_obj_refresh_style+0xe4>
    f7bc:	2200      	movs	r2, #0
    f7be:	2101      	movs	r1, #1
    f7c0:	69c3      	ldr	r3, [r0, #28]
    f7c2:	4798      	blx	r3
    f7c4:	e04c      	b.n	f860 <lv_obj_refresh_style+0xe4>
    f7c6:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
    f7ca:	2b0f      	cmp	r3, #15
    f7cc:	d82b      	bhi.n	f826 <lv_obj_refresh_style+0xaa>
    f7ce:	a201      	add	r2, pc, #4	; (adr r2, f7d4 <lv_obj_refresh_style+0x58>)
    f7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f7d4:	0000f79f 	.word	0x0000f79f
    f7d8:	0000f79f 	.word	0x0000f79f
    f7dc:	0000f827 	.word	0x0000f827
    f7e0:	0000f79f 	.word	0x0000f79f
    f7e4:	0000f79f 	.word	0x0000f79f
    f7e8:	0000f79f 	.word	0x0000f79f
    f7ec:	0000f827 	.word	0x0000f827
    f7f0:	0000f827 	.word	0x0000f827
    f7f4:	0000f827 	.word	0x0000f827
    f7f8:	0000f827 	.word	0x0000f827
    f7fc:	0000f827 	.word	0x0000f827
    f800:	0000f827 	.word	0x0000f827
    f804:	0000f79f 	.word	0x0000f79f
    f808:	0000f827 	.word	0x0000f827
    f80c:	0000f79f 	.word	0x0000f79f
    f810:	0000f79f 	.word	0x0000f79f
    f814:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
    f818:	b293      	uxth	r3, r2
    f81a:	2201      	movs	r2, #1
    f81c:	409a      	lsls	r2, r3
    f81e:	4b17      	ldr	r3, [pc, #92]	; (f87c <lv_obj_refresh_style+0x100>)
    f820:	4013      	ands	r3, r2
    f822:	2b00      	cmp	r3, #0
    f824:	d1bb      	bne.n	f79e <lv_obj_refresh_style+0x22>
        lv_obj_invalidate(obj);
    f826:	4628      	mov	r0, r5
}
    f828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
    f82c:	f00c bbf7 	b.w	1c01e <lv_obj_invalidate>
    switch(prop) {
    f830:	f1a4 0310 	sub.w	r3, r4, #16
    f834:	2b08      	cmp	r3, #8
    f836:	d8f6      	bhi.n	f826 <lv_obj_refresh_style+0xaa>
    f838:	e7b1      	b.n	f79e <lv_obj_refresh_style+0x22>
    f83a:	f248 0381 	movw	r3, #32897	; 0x8081
    f83e:	429c      	cmp	r4, r3
    f840:	d808      	bhi.n	f854 <lv_obj_refresh_style+0xd8>
    f842:	f248 037f 	movw	r3, #32895	; 0x807f
    f846:	429c      	cmp	r4, r3
    f848:	d8a9      	bhi.n	f79e <lv_obj_refresh_style+0x22>
    f84a:	2c90      	cmp	r4, #144	; 0x90
    f84c:	d0a7      	beq.n	f79e <lv_obj_refresh_style+0x22>
    f84e:	2cff      	cmp	r4, #255	; 0xff
    f850:	d1e9      	bne.n	f826 <lv_obj_refresh_style+0xaa>
    f852:	e7a4      	b.n	f79e <lv_obj_refresh_style+0x22>
    f854:	f248 038e 	movw	r3, #32910	; 0x808e
    f858:	429c      	cmp	r4, r3
    f85a:	e7f9      	b.n	f850 <lv_obj_refresh_style+0xd4>
        switch(prop) {
    f85c:	2cff      	cmp	r4, #255	; 0xff
    f85e:	d0aa      	beq.n	f7b6 <lv_obj_refresh_style+0x3a>
        lv_obj_invalidate(obj);
    f860:	4628      	mov	r0, r5
    f862:	f00c fbdc 	bl	1c01e <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    f866:	2cff      	cmp	r4, #255	; 0xff
    f868:	d001      	beq.n	f86e <lv_obj_refresh_style+0xf2>
    f86a:	0423      	lsls	r3, r4, #16
    f86c:	d504      	bpl.n	f878 <lv_obj_refresh_style+0xfc>
    f86e:	4628      	mov	r0, r5
}
    f870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    f874:	f00c bca1 	b.w	1c1ba <refresh_children_style>
}
    f878:	bd38      	pop	{r3, r4, r5, pc}
    f87a:	bf00      	nop
    f87c:	100f1003 	.word	0x100f1003

0000f880 <lv_obj_set_state>:
{
    f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->state == new_state) return;
    f884:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
    f888:	b0fb      	sub	sp, #492	; 0x1ec
    if(obj->state == new_state) return;
    f88a:	428b      	cmp	r3, r1
{
    f88c:	4604      	mov	r4, r0
    f88e:	468b      	mov	fp, r1
    if(obj->state == new_state) return;
    f890:	9301      	str	r3, [sp, #4]
    f892:	f000 80bc 	beq.w	fa0e <lv_obj_set_state+0x18e>
    f896:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
    f898:	462e      	mov	r6, r5
    f89a:	b2ef      	uxtb	r7, r5
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    f89c:	4639      	mov	r1, r7
    f89e:	4620      	mov	r0, r4
    f8a0:	f00c fcbc 	bl	1c21c <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
    f8a4:	2800      	cmp	r0, #0
    f8a6:	f000 8097 	beq.w	f9d8 <lv_obj_set_state+0x158>
        obj->state = prev_state;
    f8aa:	9b01      	ldr	r3, [sp, #4]
        style_snapshot(obj, part, &shot_pre);
    f8ac:	4639      	mov	r1, r7
    f8ae:	4620      	mov	r0, r4
        obj->state = prev_state;
    f8b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        style_snapshot(obj, part, &shot_pre);
    f8b4:	aa0c      	add	r2, sp, #48	; 0x30
    f8b6:	f00d f9d2 	bl	1cc5e <style_snapshot>
        style_snapshot(obj, part, &shot_post);
    f8ba:	4639      	mov	r1, r7
    f8bc:	4620      	mov	r0, r4
    f8be:	aa43      	add	r2, sp, #268	; 0x10c
        obj->state = new_state;
    f8c0:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        style_snapshot(obj, part, &shot_post);
    f8c4:	f00d f9cb 	bl	1cc5e <style_snapshot>
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
    f8c8:	22dc      	movs	r2, #220	; 0xdc
    f8ca:	a943      	add	r1, sp, #268	; 0x10c
    f8cc:	a80c      	add	r0, sp, #48	; 0x30
    f8ce:	f009 fc8b 	bl	191e8 <memcmp>
    f8d2:	2800      	cmp	r0, #0
    f8d4:	d07c      	beq.n	f9d0 <lv_obj_set_state+0x150>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    f8d6:	f9bd 20dc 	ldrsh.w	r2, [sp, #220]	; 0xdc
    f8da:	f9bd 31b8 	ldrsh.w	r3, [sp, #440]	; 0x1b8
    f8de:	429a      	cmp	r2, r3
    f8e0:	f040 8098 	bne.w	fa14 <lv_obj_set_state+0x194>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
    f8e4:	f9bd 20de 	ldrsh.w	r2, [sp, #222]	; 0xde
    f8e8:	f9bd 31ba 	ldrsh.w	r3, [sp, #442]	; 0x1ba
    f8ec:	429a      	cmp	r2, r3
    f8ee:	f040 8091 	bne.w	fa14 <lv_obj_set_state+0x194>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
    f8f2:	f9bd 21bc 	ldrsh.w	r2, [sp, #444]	; 0x1bc
    f8f6:	f9bd 30e2 	ldrsh.w	r3, [sp, #226]	; 0xe2
    f8fa:	4293      	cmp	r3, r2
    f8fc:	f040 808a 	bne.w	fa14 <lv_obj_set_state+0x194>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
    f900:	f9bd 20e0 	ldrsh.w	r2, [sp, #224]	; 0xe0
    f904:	429a      	cmp	r2, r3
    f906:	f040 8085 	bne.w	fa14 <lv_obj_set_state+0x194>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
    f90a:	f9bd 20e4 	ldrsh.w	r2, [sp, #228]	; 0xe4
    f90e:	f9bd 31c0 	ldrsh.w	r3, [sp, #448]	; 0x1c0
    f912:	429a      	cmp	r2, r3
    f914:	d17e      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    f916:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    f91a:	f9bd 31c2 	ldrsh.w	r3, [sp, #450]	; 0x1c2
    f91e:	429a      	cmp	r2, r3
    f920:	d178      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
    f922:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
    f926:	f9bd 31c4 	ldrsh.w	r3, [sp, #452]	; 0x1c4
    f92a:	429a      	cmp	r2, r3
    f92c:	d172      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
    f92e:	f9bd 31c8 	ldrsh.w	r3, [sp, #456]	; 0x1c8
    f932:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
    f936:	429a      	cmp	r2, r3
    f938:	d16c      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
    f93a:	f9bd 20ec 	ldrsh.w	r2, [sp, #236]	; 0xec
    f93e:	429a      	cmp	r2, r3
    f940:	d168      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
    f942:	f9bd 20f0 	ldrsh.w	r2, [sp, #240]	; 0xf0
    f946:	f9bd 31cc 	ldrsh.w	r3, [sp, #460]	; 0x1cc
    f94a:	429a      	cmp	r2, r3
    f94c:	d162      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
    f94e:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
    f952:	f9bd 31ce 	ldrsh.w	r3, [sp, #462]	; 0x1ce
    f956:	429a      	cmp	r2, r3
    f958:	d15c      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
    f95a:	f9bd 20f4 	ldrsh.w	r2, [sp, #244]	; 0xf4
    f95e:	f9bd 31d0 	ldrsh.w	r3, [sp, #464]	; 0x1d0
    f962:	429a      	cmp	r2, r3
    f964:	d156      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
    f966:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
    f96a:	f9bd 31d2 	ldrsh.w	r3, [sp, #466]	; 0x1d2
    f96e:	429a      	cmp	r2, r3
    f970:	d150      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
    f972:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    f976:	f9bd 3130 	ldrsh.w	r3, [sp, #304]	; 0x130
    f97a:	429a      	cmp	r2, r3
    f97c:	d14a      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
    f97e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    f982:	f9bd 3132 	ldrsh.w	r3, [sp, #306]	; 0x132
    f986:	429a      	cmp	r2, r3
    f988:	d144      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    f98a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f98c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    f98e:	429a      	cmp	r2, r3
    f990:	d140      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
    f992:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
    f996:	f89d 3170 	ldrb.w	r3, [sp, #368]	; 0x170
    f99a:	429a      	cmp	r2, r3
    f99c:	d13a      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
    f99e:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    f9a2:	f9bd 3142 	ldrsh.w	r3, [sp, #322]	; 0x142
    f9a6:	429a      	cmp	r2, r3
    f9a8:	d134      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
    f9aa:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
    f9ae:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
    f9b2:	429a      	cmp	r2, r3
    f9b4:	d12e      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
    f9b6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    f9ba:	f9bd 313e 	ldrsh.w	r3, [sp, #318]	; 0x13e
    f9be:	429a      	cmp	r2, r3
    f9c0:	d128      	bne.n	fa14 <lv_obj_set_state+0x194>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
    f9c2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
    f9c6:	f9bd 3140 	ldrsh.w	r3, [sp, #320]	; 0x140
    f9ca:	429a      	cmp	r2, r3
    f9cc:	d122      	bne.n	fa14 <lv_obj_set_state+0x194>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
    f9ce:	2601      	movs	r6, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
    f9d0:	3501      	adds	r5, #1
    f9d2:	2d40      	cmp	r5, #64	; 0x40
    f9d4:	f47f af61 	bne.w	f89a <lv_obj_set_state+0x1a>
    obj->state = new_state;
    f9d8:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
    if(cmp_res == STYLE_COMPARE_SAME) {
    f9dc:	b1be      	cbz	r6, fa0e <lv_obj_set_state+0x18e>
    f9de:	2300      	movs	r3, #0
    f9e0:	9304      	str	r3, [sp, #16]
    f9e2:	f89d 5010 	ldrb.w	r5, [sp, #16]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    f9e6:	4620      	mov	r0, r4
    f9e8:	4629      	mov	r1, r5
    f9ea:	f00c fc17 	bl	1c21c <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
    f9ee:	9005      	str	r0, [sp, #20]
    f9f0:	b140      	cbz	r0, fa04 <lv_obj_set_state+0x184>
        if(style_list->ignore_trans) continue;
    f9f2:	7947      	ldrb	r7, [r0, #5]
    f9f4:	f017 0702 	ands.w	r7, r7, #2
    f9f8:	d00e      	beq.n	fa18 <lv_obj_set_state+0x198>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    f9fa:	9b04      	ldr	r3, [sp, #16]
    f9fc:	3301      	adds	r3, #1
    f9fe:	2b40      	cmp	r3, #64	; 0x40
    fa00:	9304      	str	r3, [sp, #16]
    fa02:	d1ee      	bne.n	f9e2 <lv_obj_set_state+0x162>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
    fa04:	2e01      	cmp	r6, #1
    fa06:	d102      	bne.n	fa0e <lv_obj_set_state+0x18e>
        lv_obj_invalidate(obj);
    fa08:	4620      	mov	r0, r4
    fa0a:	f00c fb08 	bl	1c01e <lv_obj_invalidate>
}
    fa0e:	b07b      	add	sp, #492	; 0x1ec
    fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            cmp_res = STYLE_COMPARE_DIFF;
    fa14:	2602      	movs	r6, #2
    fa16:	e7df      	b.n	f9d8 <lv_obj_set_state+0x158>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    fa18:	22b0      	movs	r2, #176	; 0xb0
    fa1a:	4629      	mov	r1, r5
    fa1c:	4620      	mov	r0, r4
    fa1e:	f7ff fbf5 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    fa22:	22b1      	movs	r2, #177	; 0xb1
    fa24:	4629      	mov	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    fa26:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    fa28:	4620      	mov	r0, r4
    fa2a:	f7ff fbef 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    fa2e:	22be      	movs	r2, #190	; 0xbe
    fa30:	4629      	mov	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    fa32:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    fa34:	4620      	mov	r0, r4
    fa36:	f7ff fe3f 	bl	f6b8 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    fa3a:	22b2      	movs	r2, #178	; 0xb2
    fa3c:	4629      	mov	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    fa3e:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    fa40:	4620      	mov	r0, r4
    fa42:	f7ff fbe3 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    fa46:	22b3      	movs	r2, #179	; 0xb3
    fa48:	4629      	mov	r1, r5
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    fa4a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    fa4e:	4620      	mov	r0, r4
    fa50:	f7ff fbdc 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    fa54:	22b4      	movs	r2, #180	; 0xb4
    fa56:	4629      	mov	r1, r5
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    fa58:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    fa5c:	4620      	mov	r0, r4
    fa5e:	f7ff fbd5 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    fa62:	22b5      	movs	r2, #181	; 0xb5
    fa64:	4629      	mov	r1, r5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    fa66:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    fa6a:	4620      	mov	r0, r4
    fa6c:	f7ff fbce 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    fa70:	22b6      	movs	r2, #182	; 0xb6
    fa72:	4629      	mov	r1, r5
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    fa74:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    fa78:	4620      	mov	r0, r4
    fa7a:	f7ff fbc7 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    fa7e:	22b7      	movs	r2, #183	; 0xb7
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    fa80:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    fa84:	4629      	mov	r1, r5
    fa86:	4620      	mov	r0, r4
    fa88:	f7ff fbc0 	bl	f20c <_lv_obj_get_style_int>
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    fa8c:	9703      	str	r7, [sp, #12]
    fa8e:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
            if(props[i] != 0) {
    fa92:	9a03      	ldr	r2, [sp, #12]
    fa94:	ab0c      	add	r3, sp, #48	; 0x30
    fa96:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    fa9a:	2f00      	cmp	r7, #0
    fa9c:	f000 8099 	beq.w	fbd2 <lv_obj_set_state+0x352>
                _lv_style_list_add_trans_style(style_list);
    faa0:	9805      	ldr	r0, [sp, #20]
    faa2:	f000 fdcb 	bl	1063c <_lv_style_list_add_trans_style>
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    faa6:	4629      	mov	r1, r5
    faa8:	4620      	mov	r0, r4
    faaa:	f00c fbb7 	bl	1c21c <lv_obj_get_style_list>
    faae:	4680      	mov	r8, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    fab0:	f00d fe2b 	bl	1d70a <_lv_style_list_get_transition_style>
    bool cahche_ori = style_list->ignore_cache;
    fab4:	f898 3005 	ldrb.w	r3, [r8, #5]
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    fab8:	4682      	mov	sl, r0
    bool cahche_ori = style_list->ignore_cache;
    faba:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    fabe:	9202      	str	r2, [sp, #8]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    fac0:	f007 020f 	and.w	r2, r7, #15
    fac4:	2a08      	cmp	r2, #8
    fac6:	f200 8094 	bhi.w	fbf2 <lv_obj_set_state+0x372>
        style_list->skip_trans = 1;
    faca:	f023 0309 	bic.w	r3, r3, #9
    face:	f043 0309 	orr.w	r3, r3, #9
    fad2:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
    fad6:	9b01      	ldr	r3, [sp, #4]
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    fad8:	463a      	mov	r2, r7
        obj->state = prev_state;
    fada:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    fade:	4629      	mov	r1, r5
    fae0:	4620      	mov	r0, r4
    fae2:	f7ff fb93 	bl	f20c <_lv_obj_get_style_int>
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    fae6:	463a      	mov	r2, r7
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    fae8:	9009      	str	r0, [sp, #36]	; 0x24
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    faea:	4629      	mov	r1, r5
    faec:	4620      	mov	r0, r4
        obj->state = new_state;
    faee:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    faf2:	f7ff fb8b 	bl	f20c <_lv_obj_get_style_int>
        style_list->skip_trans = 0;
    faf6:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
    fafa:	9b02      	ldr	r3, [sp, #8]
    fafc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    fb00:	f363 02c3 	bfi	r2, r3, #3, #1
    fb04:	f888 2005 	strb.w	r2, [r8, #5]
        if(int1 == int2)  return NULL;
    fb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    fb0a:	4681      	mov	r9, r0
        if(int1 == int2)  return NULL;
    fb0c:	4283      	cmp	r3, r0
    fb0e:	d060      	beq.n	fbd2 <lv_obj_set_state+0x352>
        obj->state = prev_state;
    fb10:	9b01      	ldr	r3, [sp, #4]
        int1 = _lv_obj_get_style_int(obj, part, prop);
    fb12:	463a      	mov	r2, r7
    fb14:	4629      	mov	r1, r5
        obj->state = prev_state;
    fb16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        int1 = _lv_obj_get_style_int(obj, part, prop);
    fb1a:	4620      	mov	r0, r4
    fb1c:	f7ff fb76 	bl	f20c <_lv_obj_get_style_int>
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    fb20:	4639      	mov	r1, r7
    fb22:	4602      	mov	r2, r0
        int1 = _lv_obj_get_style_int(obj, part, prop);
    fb24:	4680      	mov	r8, r0
        obj->state = new_state;
    fb26:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    fb2a:	4650      	mov	r0, sl
    fb2c:	f00d fc72 	bl	1d414 <_lv_style_set_int>
        if(prop == LV_STYLE_RADIUS) {
    fb30:	2f01      	cmp	r7, #1
    fb32:	d11c      	bne.n	fb6e <lv_obj_set_state+0x2ee>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    fb34:	f647 73ff 	movw	r3, #32767	; 0x7fff
    fb38:	4598      	cmp	r8, r3
    fb3a:	d001      	beq.n	fb40 <lv_obj_set_state+0x2c0>
    fb3c:	4599      	cmp	r9, r3
    fb3e:	d116      	bne.n	fb6e <lv_obj_set_state+0x2ee>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    fb40:	8aa3      	ldrh	r3, [r4, #20]
    fb42:	8a22      	ldrh	r2, [r4, #16]
    fb44:	3301      	adds	r3, #1
    fb46:	1a9b      	subs	r3, r3, r2
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    fb48:	f3c3 32c0 	ubfx	r2, r3, #15, #1
    fb4c:	fa02 f383 	sxtah	r3, r2, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    fb50:	f647 72ff 	movw	r2, #32767	; 0x7fff
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    fb54:	105b      	asrs	r3, r3, #1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    fb56:	4590      	cmp	r8, r2
    fb58:	bf04      	itt	eq
    fb5a:	f103 0801 	addeq.w	r8, r3, #1
    fb5e:	fa0f f888 	sxtheq.w	r8, r8
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    fb62:	4591      	cmp	r9, r2
    fb64:	bf04      	itt	eq
    fb66:	f103 0901 	addeq.w	r9, r3, #1
    fb6a:	fa0f f989 	sxtheq.w	r9, r9
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    fb6e:	4885      	ldr	r0, [pc, #532]	; (fd84 <lv_obj_set_state+0x504>)
    fb70:	f011 fcc8 	bl	21504 <_lv_ll_ins_head>
        if(tr == NULL) return NULL;
    fb74:	4682      	mov	sl, r0
    fb76:	b360      	cbz	r0, fbd2 <lv_obj_set_state+0x352>
        tr->start_value._int = int1;
    fb78:	f8a0 8008 	strh.w	r8, [r0, #8]
        tr->end_value._int = int2;
    fb7c:	f8a0 900c 	strh.w	r9, [r0, #12]
                    tr->prop = props[i];
    fb80:	f8aa 7004 	strh.w	r7, [sl, #4]
                    lv_anim_init(&a);
    fb84:	a843      	add	r0, sp, #268	; 0x10c
                    tr->obj = obj;
    fb86:	f8ca 4000 	str.w	r4, [sl]
                    tr->part = part;
    fb8a:	f88a 5006 	strb.w	r5, [sl, #6]
                    lv_anim_init(&a);
    fb8e:	f002 fe95 	bl	128bc <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    fb92:	4b7d      	ldr	r3, [pc, #500]	; (fd88 <lv_obj_set_state+0x508>)
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
    a->start = start;
    fb94:	2700      	movs	r7, #0
    a->exec_cb = exec_cb;
    fb96:	9344      	str	r3, [sp, #272]	; 0x110
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    fb98:	4b7c      	ldr	r3, [pc, #496]	; (fd8c <lv_obj_set_state+0x50c>)
    fb9a:	2208      	movs	r2, #8
    fb9c:	9345      	str	r3, [sp, #276]	; 0x114
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    fb9e:	4b7c      	ldr	r3, [pc, #496]	; (fd90 <lv_obj_set_state+0x510>)
    fba0:	9906      	ldr	r1, [sp, #24]
    fba2:	9346      	str	r3, [sp, #280]	; 0x118
    a->end   = end;
    fba4:	23ff      	movs	r3, #255	; 0xff
    fba6:	934b      	str	r3, [sp, #300]	; 0x12c
    a->time     = duration;
    fba8:	9b08      	ldr	r3, [sp, #32]
    fbaa:	a847      	add	r0, sp, #284	; 0x11c
    fbac:	934c      	str	r3, [sp, #304]	; 0x130
    a->act_time = -(int32_t)(delay);
    fbae:	9b07      	ldr	r3, [sp, #28]
    a->current = start;
    fbb0:	e9cd 7749 	strd	r7, r7, [sp, #292]	; 0x124
    a->act_time = -(int32_t)(delay);
    fbb4:	425b      	negs	r3, r3
    fbb6:	934d      	str	r3, [sp, #308]	; 0x134
    a->var     = var;
    fbb8:	f8cd a10c 	str.w	sl, [sp, #268]	; 0x10c
    fbbc:	f009 fb24 	bl	19208 <memcpy>
                    a.early_apply = 0;
    fbc0:	f89d 3146 	ldrb.w	r3, [sp, #326]	; 0x146
                    lv_anim_start(&a);
    fbc4:	a843      	add	r0, sp, #268	; 0x10c
                    a.early_apply = 0;
    fbc6:	f367 0300 	bfi	r3, r7, #0, #1
    fbca:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
                    lv_anim_start(&a);
    fbce:	f002 febf 	bl	12950 <lv_anim_start>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    fbd2:	9b03      	ldr	r3, [sp, #12]
    fbd4:	3301      	adds	r3, #1
    fbd6:	2b06      	cmp	r3, #6
    fbd8:	9303      	str	r3, [sp, #12]
    fbda:	f47f af5a 	bne.w	fa92 <lv_obj_set_state+0x212>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
    fbde:	2e02      	cmp	r6, #2
    fbe0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fbe4:	4629      	mov	r1, r5
    fbe6:	4620      	mov	r0, r4
    fbe8:	f040 80c9 	bne.w	fd7e <lv_obj_set_state+0x4fe>
    fbec:	f7ff fdc6 	bl	f77c <lv_obj_refresh_style>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
    fbf0:	e703      	b.n	f9fa <lv_obj_set_state+0x17a>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    fbf2:	2a0b      	cmp	r2, #11
    fbf4:	d83d      	bhi.n	fc72 <lv_obj_set_state+0x3f2>
        style_list->skip_trans = 1;
    fbf6:	f023 0309 	bic.w	r3, r3, #9
    fbfa:	f043 0309 	orr.w	r3, r3, #9
    fbfe:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
    fc02:	9b01      	ldr	r3, [sp, #4]
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    fc04:	463a      	mov	r2, r7
    fc06:	4629      	mov	r1, r5
        obj->state = prev_state;
    fc08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    fc0c:	4620      	mov	r0, r4
    fc0e:	f00c fb6a 	bl	1c2e6 <_lv_obj_get_style_color>
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    fc12:	463a      	mov	r2, r7
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    fc14:	4681      	mov	r9, r0
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    fc16:	4629      	mov	r1, r5
    fc18:	4620      	mov	r0, r4
        obj->state = new_state;
    fc1a:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    fc1e:	f00c fb62 	bl	1c2e6 <_lv_obj_get_style_color>
        style_list->skip_trans = 0;
    fc22:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
    fc26:	9902      	ldr	r1, [sp, #8]
    fc28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    fc2c:	f361 02c3 	bfi	r2, r1, #3, #1
        if(c1.full == c2.full) return NULL;
    fc30:	4581      	cmp	r9, r0
        style_list->ignore_cache = cahche_ori;
    fc32:	f888 2005 	strb.w	r2, [r8, #5]
        if(c1.full == c2.full) return NULL;
    fc36:	9002      	str	r0, [sp, #8]
    fc38:	d0cb      	beq.n	fbd2 <lv_obj_set_state+0x352>
        obj->state = prev_state;
    fc3a:	9b01      	ldr	r3, [sp, #4]
        c1 = _lv_obj_get_style_color(obj, part, prop);
    fc3c:	463a      	mov	r2, r7
        obj->state = prev_state;
    fc3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        c1 = _lv_obj_get_style_color(obj, part, prop);
    fc42:	4629      	mov	r1, r5
    fc44:	4620      	mov	r0, r4
    fc46:	f00c fb4e 	bl	1c2e6 <_lv_obj_get_style_color>
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    fc4a:	4639      	mov	r1, r7
    fc4c:	4602      	mov	r2, r0
        c1 = _lv_obj_get_style_color(obj, part, prop);
    fc4e:	4681      	mov	r9, r0
        obj->state = new_state;
    fc50:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    fc54:	4650      	mov	r0, sl
    fc56:	f00d fc21 	bl	1d49c <_lv_style_set_color>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    fc5a:	484a      	ldr	r0, [pc, #296]	; (fd84 <lv_obj_set_state+0x504>)
    fc5c:	f011 fc52 	bl	21504 <_lv_ll_ins_head>
        if(tr == NULL) return NULL;
    fc60:	4682      	mov	sl, r0
    fc62:	2800      	cmp	r0, #0
    fc64:	d0b5      	beq.n	fbd2 <lv_obj_set_state+0x352>
        tr->end_value._color = c2;
    fc66:	9b02      	ldr	r3, [sp, #8]
        tr->start_value._color = c1;
    fc68:	f8c0 9008 	str.w	r9, [r0, #8]
        tr->end_value._ptr = p2;
    fc6c:	f8ca 300c 	str.w	r3, [sl, #12]
    fc70:	e786      	b.n	fb80 <lv_obj_set_state+0x300>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    fc72:	2a0d      	cmp	r2, #13
    fc74:	d83e      	bhi.n	fcf4 <lv_obj_set_state+0x474>
        style_list->skip_trans = 1;
    fc76:	f023 0309 	bic.w	r3, r3, #9
    fc7a:	f043 0309 	orr.w	r3, r3, #9
    fc7e:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
    fc82:	9b01      	ldr	r3, [sp, #4]
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    fc84:	463a      	mov	r2, r7
        obj->state = prev_state;
    fc86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    fc8a:	4629      	mov	r1, r5
    fc8c:	4620      	mov	r0, r4
    fc8e:	f00c fb63 	bl	1c358 <_lv_obj_get_style_opa>
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    fc92:	463a      	mov	r2, r7
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    fc94:	9009      	str	r0, [sp, #36]	; 0x24
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    fc96:	4629      	mov	r1, r5
    fc98:	4620      	mov	r0, r4
        obj->state = new_state;
    fc9a:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    fc9e:	f00c fb5b 	bl	1c358 <_lv_obj_get_style_opa>
        style_list->skip_trans = 0;
    fca2:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
    fca6:	9b02      	ldr	r3, [sp, #8]
    fca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    fcac:	f363 02c3 	bfi	r2, r3, #3, #1
    fcb0:	f888 2005 	strb.w	r2, [r8, #5]
        if(o1 == o2) return NULL;
    fcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    fcb6:	4681      	mov	r9, r0
        if(o1 == o2) return NULL;
    fcb8:	4283      	cmp	r3, r0
    fcba:	d08a      	beq.n	fbd2 <lv_obj_set_state+0x352>
        obj->state = prev_state;
    fcbc:	9b01      	ldr	r3, [sp, #4]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    fcbe:	463a      	mov	r2, r7
        obj->state = prev_state;
    fcc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    fcc4:	4629      	mov	r1, r5
    fcc6:	4620      	mov	r0, r4
    fcc8:	f00c fb46 	bl	1c358 <_lv_obj_get_style_opa>
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    fccc:	4639      	mov	r1, r7
    fcce:	4602      	mov	r2, r0
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    fcd0:	4680      	mov	r8, r0
        obj->state = new_state;
    fcd2:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    fcd6:	4650      	mov	r0, sl
    fcd8:	f00d fc24 	bl	1d524 <_lv_style_set_opa>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    fcdc:	4829      	ldr	r0, [pc, #164]	; (fd84 <lv_obj_set_state+0x504>)
    fcde:	f011 fc11 	bl	21504 <_lv_ll_ins_head>
        if(tr == NULL) return NULL;
    fce2:	4682      	mov	sl, r0
    fce4:	2800      	cmp	r0, #0
    fce6:	f43f af74 	beq.w	fbd2 <lv_obj_set_state+0x352>
        tr->start_value._opa = o1;
    fcea:	f880 8008 	strb.w	r8, [r0, #8]
        tr->end_value._opa = o2;
    fcee:	f880 900c 	strb.w	r9, [r0, #12]
    fcf2:	e745      	b.n	fb80 <lv_obj_set_state+0x300>
        obj->state = prev_state;
    fcf4:	9b01      	ldr	r3, [sp, #4]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fcf6:	463a      	mov	r2, r7
        obj->state = prev_state;
    fcf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        style_list->skip_trans = 1;
    fcfc:	f898 3005 	ldrb.w	r3, [r8, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd00:	4629      	mov	r1, r5
        style_list->skip_trans = 1;
    fd02:	f023 0309 	bic.w	r3, r3, #9
    fd06:	f043 0309 	orr.w	r3, r3, #9
    fd0a:	f888 3005 	strb.w	r3, [r8, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd0e:	4620      	mov	r0, r4
    fd10:	f7ff fcd2 	bl	f6b8 <_lv_obj_get_style_ptr>
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    fd14:	463a      	mov	r2, r7
    fd16:	4629      	mov	r1, r5
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd18:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
    fd1a:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    fd1e:	4620      	mov	r0, r4
    fd20:	f7ff fcca 	bl	f6b8 <_lv_obj_get_style_ptr>
    fd24:	9043      	str	r0, [sp, #268]	; 0x10c
        style_list->skip_trans = 0;
    fd26:	f898 3005 	ldrb.w	r3, [r8, #5]
        style_list->ignore_cache = cahche_ori;
    fd2a:	9a02      	ldr	r2, [sp, #8]
    fd2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    fd30:	f362 03c3 	bfi	r3, r2, #3, #1
    fd34:	f888 3005 	strb.w	r3, [r8, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    fd38:	2204      	movs	r2, #4
    fd3a:	a943      	add	r1, sp, #268	; 0x10c
    fd3c:	a80b      	add	r0, sp, #44	; 0x2c
    fd3e:	f009 fa53 	bl	191e8 <memcmp>
    fd42:	2800      	cmp	r0, #0
    fd44:	f43f af45 	beq.w	fbd2 <lv_obj_set_state+0x352>
        obj->state = prev_state;
    fd48:	9b01      	ldr	r3, [sp, #4]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd4a:	463a      	mov	r2, r7
        obj->state = prev_state;
    fd4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd50:	4629      	mov	r1, r5
    fd52:	4620      	mov	r0, r4
    fd54:	f7ff fcb0 	bl	f6b8 <_lv_obj_get_style_ptr>
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    fd58:	4639      	mov	r1, r7
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    fd5a:	4602      	mov	r2, r0
    fd5c:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
    fd5e:	f884 b035 	strb.w	fp, [r4, #53]	; 0x35
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    fd62:	4650      	mov	r0, sl
    fd64:	f00d fc24 	bl	1d5b0 <_lv_style_set_ptr>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    fd68:	4806      	ldr	r0, [pc, #24]	; (fd84 <lv_obj_set_state+0x504>)
    fd6a:	f011 fbcb 	bl	21504 <_lv_ll_ins_head>
        if(tr == NULL) return NULL;
    fd6e:	4682      	mov	sl, r0
    fd70:	2800      	cmp	r0, #0
    fd72:	f43f af2e 	beq.w	fbd2 <lv_obj_set_state+0x352>
        tr->start_value._ptr = p1;
    fd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fd78:	6083      	str	r3, [r0, #8]
        tr->end_value._ptr = p2;
    fd7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    fd7c:	e776      	b.n	fc6c <lv_obj_set_state+0x3ec>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
    fd7e:	f00c fbf0 	bl	1c562 <invalidate_style_cache>
    fd82:	e63a      	b.n	f9fa <lv_obj_set_state+0x17a>
    fd84:	20025e78 	.word	0x20025e78
    fd88:	0001c6a7 	.word	0x0001c6a7
    fd8c:	0001c423 	.word	0x0001c423
    fd90:	0000f1a9 	.word	0x0000f1a9

0000fd94 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
    fd94:	2908      	cmp	r1, #8
{
    fd96:	b510      	push	{r4, lr}
    fd98:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
    fd9a:	d108      	bne.n	fdae <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    fd9c:	7813      	ldrb	r3, [r2, #0]
    fd9e:	b91b      	cbnz	r3, fda8 <lv_obj_signal+0x14>
    fda0:	3428      	adds	r4, #40	; 0x28
    fda2:	6054      	str	r4, [r2, #4]
    fda4:	2001      	movs	r0, #1
    fda6:	e011      	b.n	fdcc <lv_obj_signal+0x38>
        else info->result = NULL;
    fda8:	2300      	movs	r3, #0
    fdaa:	6053      	str	r3, [r2, #4]
    fdac:	e7fa      	b.n	fda4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    fdae:	2907      	cmp	r1, #7
    fdb0:	d105      	bne.n	fdbe <lv_obj_signal+0x2a>
}
    fdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    fdb6:	4610      	mov	r0, r2
    fdb8:	491f      	ldr	r1, [pc, #124]	; (fe38 <lv_obj_signal+0xa4>)
    fdba:	f00c bcef 	b.w	1c79c <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    fdbe:	2901      	cmp	r1, #1
    fdc0:	d105      	bne.n	fdce <lv_obj_signal+0x3a>
    return (obj->protect & prot) == 0 ? false : true;
    fdc2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    fdc6:	43c0      	mvns	r0, r0
    fdc8:	f000 0001 	and.w	r0, r0, #1
}
    fdcc:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    fdce:	2906      	cmp	r1, #6
    fdd0:	d109      	bne.n	fde6 <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    fdd2:	2100      	movs	r1, #0
    fdd4:	f00d f84b 	bl	1ce6e <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    fdd8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    fddc:	4283      	cmp	r3, r0
    fdde:	bfb8      	it	lt
    fde0:	4603      	movlt	r3, r0
    fde2:	8623      	strh	r3, [r4, #48]	; 0x30
    fde4:	e7de      	b.n	fda4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    fde6:	2904      	cmp	r1, #4
    fde8:	d102      	bne.n	fdf0 <lv_obj_signal+0x5c>
        lv_obj_refresh_ext_draw_pad(obj);
    fdea:	f00c f8a6 	bl	1bf3a <lv_obj_refresh_ext_draw_pad>
    fdee:	e7d9      	b.n	fda4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
    fdf0:	290b      	cmp	r1, #11
    fdf2:	d103      	bne.n	fdfc <lv_obj_signal+0x68>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    fdf4:	2110      	movs	r1, #16
    fdf6:	f00d f826 	bl	1ce46 <lv_obj_add_state>
    fdfa:	e7d3      	b.n	fda4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    fdfc:	f1a1 030d 	sub.w	r3, r1, #13
    fe00:	2b01      	cmp	r3, #1
    fe02:	d803      	bhi.n	fe0c <lv_obj_signal+0x78>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    fe04:	2110      	movs	r1, #16
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    fe06:	f00d f828 	bl	1ce5a <lv_obj_clear_state>
    fe0a:	e7cb      	b.n	fda4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
    fe0c:	2916      	cmp	r1, #22
    fe0e:	d108      	bne.n	fe22 <lv_obj_signal+0x8e>
            obj = lv_obj_get_focused_obj(obj);
    fe10:	f00d f924 	bl	1d05c <lv_obj_get_focused_obj>
    fe14:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    fe16:	2102      	movs	r1, #2
    fe18:	f00d f815 	bl	1ce46 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    fe1c:	2104      	movs	r1, #4
    fe1e:	4620      	mov	r0, r4
    fe20:	e7f1      	b.n	fe06 <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    fe22:	2917      	cmp	r1, #23
    fe24:	d103      	bne.n	fe2e <lv_obj_signal+0x9a>
        obj = lv_obj_get_focused_obj(obj);
    fe26:	f00d f919 	bl	1d05c <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    fe2a:	2106      	movs	r1, #6
    fe2c:	e7eb      	b.n	fe06 <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_CLEANUP) {
    fe2e:	2900      	cmp	r1, #0
    fe30:	d1b8      	bne.n	fda4 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    fe32:	f7ff f997 	bl	f164 <lv_obj_clean_style_list>
    fe36:	e7b5      	b.n	fda4 <lv_obj_signal+0x10>
    fe38:	00026f77 	.word	0x00026f77

0000fe3c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    fe3c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    fe3e:	4d19      	ldr	r5, [pc, #100]	; (fea4 <lv_refr_vdb_flush+0x68>)
    fe40:	6828      	ldr	r0, [r5, #0]
    fe42:	f011 f863 	bl	20f0c <lv_disp_get_buf>
    fe46:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    fe48:	6828      	ldr	r0, [r5, #0]
    fe4a:	f011 f861 	bl	20f10 <lv_disp_is_double_buf>
    fe4e:	b958      	cbnz	r0, fe68 <lv_refr_vdb_flush+0x2c>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    fe50:	2301      	movs	r3, #1

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    fe52:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
    fe54:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    fe56:	686a      	ldr	r2, [r5, #4]
    fe58:	6a11      	ldr	r1, [r2, #32]
    fe5a:	07c9      	lsls	r1, r1, #31
    fe5c:	d409      	bmi.n	fe72 <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
    fe5e:	2300      	movs	r3, #0
    fe60:	e00a      	b.n	fe78 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    fe62:	69c3      	ldr	r3, [r0, #28]
    fe64:	b10b      	cbz	r3, fe6a <lv_refr_vdb_flush+0x2e>
    fe66:	4798      	blx	r3
    fe68:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    fe6a:	69a3      	ldr	r3, [r4, #24]
    fe6c:	2b00      	cmp	r3, #0
    fe6e:	d1f8      	bne.n	fe62 <lv_refr_vdb_flush+0x26>
    fe70:	e7ee      	b.n	fe50 <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    fe72:	6a12      	ldr	r2, [r2, #32]
    fe74:	0792      	lsls	r2, r2, #30
    fe76:	d5f2      	bpl.n	fe5e <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
    fe78:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
    fe7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fe7c:	b10b      	cbz	r3, fe82 <lv_refr_vdb_flush+0x46>
    fe7e:	4628      	mov	r0, r5
    fe80:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    fe82:	68eb      	ldr	r3, [r5, #12]
    fe84:	b123      	cbz	r3, fe90 <lv_refr_vdb_flush+0x54>
    fe86:	4628      	mov	r0, r5
    fe88:	68a2      	ldr	r2, [r4, #8]
    fe8a:	f104 0110 	add.w	r1, r4, #16
    fe8e:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    fe90:	6823      	ldr	r3, [r4, #0]
    fe92:	b133      	cbz	r3, fea2 <lv_refr_vdb_flush+0x66>
    fe94:	6862      	ldr	r2, [r4, #4]
    fe96:	b122      	cbz	r2, fea2 <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
    fe98:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    fe9a:	428b      	cmp	r3, r1
    fe9c:	bf08      	it	eq
    fe9e:	4613      	moveq	r3, r2
    fea0:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
    fea2:	bd38      	pop	{r3, r4, r5, pc}
    fea4:	20025d28 	.word	0x20025d28

0000fea8 <lv_refr_obj_and_children>:
{
    fea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    feaa:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    feac:	4604      	mov	r4, r0
    feae:	b928      	cbnz	r0, febc <lv_refr_obj_and_children+0x14>
    feb0:	4b13      	ldr	r3, [pc, #76]	; (ff00 <lv_refr_obj_and_children+0x58>)
    feb2:	6818      	ldr	r0, [r3, #0]
    feb4:	f7fe fd48 	bl	e948 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
    feb8:	4604      	mov	r4, r0
    feba:	b140      	cbz	r0, fece <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
    febc:	4620      	mov	r0, r4
    febe:	4631      	mov	r1, r6
    fec0:	f00d f902 	bl	1d0c8 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
    fec4:	4620      	mov	r0, r4
    fec6:	f00c f970 	bl	1c1aa <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
    feca:	4605      	mov	r5, r0
    while(par != NULL) {
    fecc:	b900      	cbnz	r0, fed0 <lv_refr_obj_and_children+0x28>
}
    fece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    fed0:	1d2f      	adds	r7, r5, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
    fed2:	4621      	mov	r1, r4
    fed4:	4638      	mov	r0, r7
    fed6:	f011 fb57 	bl	21588 <_lv_ll_get_prev>
    feda:	4604      	mov	r4, r0
        while(i != NULL) {
    fedc:	b950      	cbnz	r0, fef4 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    fede:	6a2b      	ldr	r3, [r5, #32]
    fee0:	b11b      	cbz	r3, feea <lv_refr_obj_and_children+0x42>
    fee2:	2201      	movs	r2, #1
    fee4:	4631      	mov	r1, r6
    fee6:	4628      	mov	r0, r5
    fee8:	4798      	blx	r3
        par = lv_obj_get_parent(par);
    feea:	4628      	mov	r0, r5
    feec:	f00c f95d 	bl	1c1aa <lv_obj_get_parent>
    fef0:	462c      	mov	r4, r5
    fef2:	e7ea      	b.n	feca <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
    fef4:	4631      	mov	r1, r6
    fef6:	4620      	mov	r0, r4
    fef8:	f00d f8e6 	bl	1d0c8 <lv_refr_obj>
    fefc:	e7e9      	b.n	fed2 <lv_refr_obj_and_children+0x2a>
    fefe:	bf00      	nop
    ff00:	20025d28 	.word	0x20025d28

0000ff04 <lv_refr_area_part>:
{
    ff04:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    ff06:	4c4b      	ldr	r4, [pc, #300]	; (10034 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x34>)
{
    ff08:	b0a2      	sub	sp, #136	; 0x88
    ff0a:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    ff0c:	6820      	ldr	r0, [r4, #0]
    ff0e:	f010 fffd 	bl	20f0c <lv_disp_get_buf>
    ff12:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    ff14:	6820      	ldr	r0, [r4, #0]
    ff16:	f010 fffb 	bl	20f10 <lv_disp_is_double_buf>
    ff1a:	b1b0      	cbz	r0, ff4a <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    ff1c:	4631      	mov	r1, r6
    ff1e:	f105 0210 	add.w	r2, r5, #16
    ff22:	a804      	add	r0, sp, #16
    ff24:	f011 f86e 	bl	21004 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    ff28:	6820      	ldr	r0, [r4, #0]
    ff2a:	f7fe fd0d 	bl	e948 <lv_disp_get_scr_act>
    ff2e:	4601      	mov	r1, r0
    ff30:	a804      	add	r0, sp, #16
    ff32:	f00d f89b 	bl	1d06c <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
    ff36:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    ff38:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
    ff3a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    ff3c:	b955      	cbnz	r5, ff54 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
    ff3e:	2800      	cmp	r0, #0
    ff40:	d13a      	bne.n	ffb8 <lv_refr_area_part+0xb4>
    ff42:	e00e      	b.n	ff62 <lv_refr_area_part+0x5e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    ff44:	69c3      	ldr	r3, [r0, #28]
    ff46:	b10b      	cbz	r3, ff4c <lv_refr_area_part+0x48>
    ff48:	4798      	blx	r3
    ff4a:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
    ff4c:	69ab      	ldr	r3, [r5, #24]
    ff4e:	2b00      	cmp	r3, #0
    ff50:	d1f8      	bne.n	ff44 <lv_refr_area_part+0x40>
    ff52:	e7e3      	b.n	ff1c <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
    ff54:	4629      	mov	r1, r5
    ff56:	a804      	add	r0, sp, #16
    ff58:	f00d f888 	bl	1d06c <lv_refr_get_top_obj>
    ff5c:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
    ff5e:	bb5e      	cbnz	r6, ffb8 <lv_refr_area_part+0xb4>
    ff60:	bb50      	cbnz	r0, ffb8 <lv_refr_area_part+0xb4>
        if(disp_refr->bg_img) {
    ff62:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
    ff64:	a808      	add	r0, sp, #32
        if(disp_refr->bg_img) {
    ff66:	6d9d      	ldr	r5, [r3, #88]	; 0x58
    ff68:	2d00      	cmp	r5, #0
    ff6a:	d053      	beq.n	10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
            lv_draw_img_dsc_init(&dsc);
    ff6c:	f00e fd15 	bl	1e99a <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
    ff70:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
    ff72:	a903      	add	r1, sp, #12
            dsc.opa = disp_refr->bg_opa;
    ff74:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    ff78:	f88d 2020 	strb.w	r2, [sp, #32]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
    ff7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    ff7e:	f002 fa03 	bl	12388 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
    ff82:	2801      	cmp	r0, #1
    ff84:	d13c      	bne.n	10000 <CONFIG_RPMSG_NRF53_SRAM_SIZE>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
    ff86:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ff8a:	9b03      	ldr	r3, [sp, #12]
    ff8c:	f3c2 124a 	ubfx	r2, r2, #5, #11
    ff90:	3a01      	subs	r2, #1
    ff92:	b212      	sxth	r2, r2
    ff94:	9200      	str	r2, [sp, #0]
    ff96:	2200      	movs	r2, #0
    ff98:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ff9c:	3b01      	subs	r3, #1
    ff9e:	4611      	mov	r1, r2
    ffa0:	b21b      	sxth	r3, r3
    ffa2:	a806      	add	r0, sp, #24
    ffa4:	f011 f814 	bl	20fd0 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
    ffa8:	6822      	ldr	r2, [r4, #0]
    ffaa:	ab08      	add	r3, sp, #32
    ffac:	6d92      	ldr	r2, [r2, #88]	; 0x58
    ffae:	a904      	add	r1, sp, #16
    ffb0:	a806      	add	r0, sp, #24
    ffb2:	f000 fb81 	bl	106b8 <lv_draw_img>
    ffb6:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
    ffb8:	6823      	ldr	r3, [r4, #0]
    ffba:	6c58      	ldr	r0, [r3, #68]	; 0x44
    ffbc:	b128      	cbz	r0, ffca <lv_refr_area_part+0xc6>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
    ffbe:	2d00      	cmp	r5, #0
    ffc0:	bf18      	it	ne
    ffc2:	4628      	movne	r0, r5
    ffc4:	a904      	add	r1, sp, #16
    ffc6:	f7ff ff6f 	bl	fea8 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
    ffca:	b90e      	cbnz	r6, ffd0 <lv_refr_area_part+0xcc>
        top_act_scr = disp_refr->act_scr;
    ffcc:	6823      	ldr	r3, [r4, #0]
    ffce:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    lv_refr_obj_and_children(top_act_scr, &start_mask);
    ffd0:	a904      	add	r1, sp, #16
    ffd2:	4630      	mov	r0, r6
    ffd4:	f7ff ff68 	bl	fea8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    ffd8:	6820      	ldr	r0, [r4, #0]
    ffda:	f7fe fce9 	bl	e9b0 <lv_disp_get_layer_top>
    ffde:	a904      	add	r1, sp, #16
    ffe0:	f7ff ff62 	bl	fea8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    ffe4:	6820      	ldr	r0, [r4, #0]
    ffe6:	f7fe fcfd 	bl	e9e4 <lv_disp_get_layer_sys>
    ffea:	a904      	add	r1, sp, #16
    ffec:	f7ff ff5c 	bl	fea8 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    fff0:	6820      	ldr	r0, [r4, #0]
    fff2:	f010 ff95 	bl	20f20 <lv_disp_is_true_double_buf>
    fff6:	b908      	cbnz	r0, fffc <lv_refr_area_part+0xf8>
        lv_refr_vdb_flush();
    fff8:	f7ff ff20 	bl	fe3c <lv_refr_vdb_flush>
}
    fffc:	b022      	add	sp, #136	; 0x88
    fffe:	bd70      	pop	{r4, r5, r6, pc}
                LV_LOG_WARN("Can't draw the background image")
   10000:	4b0d      	ldr	r3, [pc, #52]	; (10038 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x38>)
   10002:	f240 220a 	movw	r2, #522	; 0x20a
   10006:	9300      	str	r3, [sp, #0]
   10008:	2002      	movs	r0, #2
   1000a:	4b0c      	ldr	r3, [pc, #48]	; (1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>)
   1000c:	490c      	ldr	r1, [pc, #48]	; (10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>)
   1000e:	f002 fcd5 	bl	129bc <_lv_log_add>
   10012:	e7d0      	b.n	ffb6 <lv_refr_area_part+0xb2>
            lv_draw_rect_dsc_init(&dsc);
   10014:	f001 fe1a 	bl	11c4c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
   10018:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1001a:	a904      	add	r1, sp, #16
            dsc.bg_color = disp_refr->bg_color;
   1001c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1001e:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
   10020:	9209      	str	r2, [sp, #36]	; 0x24
            dsc.bg_opa = disp_refr->bg_opa;
   10022:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   10026:	aa08      	add	r2, sp, #32
            dsc.bg_opa = disp_refr->bg_opa;
   10028:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1002c:	f00f fa77 	bl	1f51e <lv_draw_rect>
   10030:	e7c2      	b.n	ffb8 <lv_refr_area_part+0xb4>
   10032:	bf00      	nop
   10034:	20025d28 	.word	0x20025d28
   10038:	00026ff3 	.word	0x00026ff3
   1003c:	000270d1 	.word	0x000270d1
   10040:	00026fbc 	.word	0x00026fbc

00010044 <_lv_refr_get_disp_refreshing>:
}
   10044:	4b01      	ldr	r3, [pc, #4]	; (1004c <_lv_refr_get_disp_refreshing+0x8>)
   10046:	6818      	ldr	r0, [r3, #0]
   10048:	4770      	bx	lr
   1004a:	bf00      	nop
   1004c:	20025d28 	.word	0x20025d28

00010050 <_lv_disp_refr_task>:
{
   10050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10054:	4605      	mov	r5, r0
   10056:	b08b      	sub	sp, #44	; 0x2c
    uint32_t start = lv_tick_get();
   10058:	f010 ff71 	bl	20f3e <lv_tick_get>
    disp_refr = task->user_data;
   1005c:	4cbb      	ldr	r4, [pc, #748]	; (1034c <_lv_disp_refr_task+0x2fc>)
   1005e:	68eb      	ldr	r3, [r5, #12]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   10060:	2100      	movs	r1, #0
    uint32_t start = lv_tick_get();
   10062:	9005      	str	r0, [sp, #20]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   10064:	4628      	mov	r0, r5
    disp_refr = task->user_data;
   10066:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   10068:	f002 ff6c 	bl	12f44 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
   1006c:	6823      	ldr	r3, [r4, #0]
   1006e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   10070:	2900      	cmp	r1, #0
   10072:	f040 8095 	bne.w	101a0 <_lv_disp_refr_task+0x150>
        disp_refr->inv_p = 0;
   10076:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
   1007a:	f361 0209 	bfi	r2, r1, #0, #10
   1007e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
}
   10082:	b00b      	add	sp, #44	; 0x2c
   10084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   10088:	4433      	add	r3, r6
   1008a:	f893 515e 	ldrb.w	r5, [r3, #350]	; 0x15e
   1008e:	2d00      	cmp	r5, #0
   10090:	d048      	beq.n	10124 <_lv_disp_refr_task+0xd4>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   10092:	3601      	adds	r6, #1
   10094:	6823      	ldr	r3, [r4, #0]
   10096:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
   1009a:	f3c2 0709 	ubfx	r7, r2, #0, #10
   1009e:	42be      	cmp	r6, r7
   100a0:	d3f2      	bcc.n	10088 <_lv_disp_refr_task+0x38>
    px_num = 0;
   100a2:	2000      	movs	r0, #0
   100a4:	49aa      	ldr	r1, [pc, #680]	; (10350 <_lv_disp_refr_task+0x300>)
   100a6:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
   100a8:	2f00      	cmp	r7, #0
   100aa:	d17b      	bne.n	101a4 <_lv_disp_refr_task+0x154>
    if(disp_refr->inv_p != 0) {
   100ac:	4da7      	ldr	r5, [pc, #668]	; (1034c <_lv_disp_refr_task+0x2fc>)
   100ae:	6828      	ldr	r0, [r5, #0]
   100b0:	46aa      	mov	sl, r5
   100b2:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
   100b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   100ba:	b373      	cbz	r3, 1011a <_lv_disp_refr_task+0xca>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   100bc:	f010 ff30 	bl	20f20 <lv_disp_is_true_double_buf>
   100c0:	b160      	cbz	r0, 100dc <_lv_disp_refr_task+0x8c>
            if(disp_refr->driver.set_px_cb) {
   100c2:	6828      	ldr	r0, [r5, #0]
   100c4:	6943      	ldr	r3, [r0, #20]
   100c6:	2b00      	cmp	r3, #0
   100c8:	f000 8192 	beq.w	103f0 <_lv_disp_refr_task+0x3a0>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
   100cc:	4ba1      	ldr	r3, [pc, #644]	; (10354 <_lv_disp_refr_task+0x304>)
   100ce:	22cf      	movs	r2, #207	; 0xcf
   100d0:	9300      	str	r3, [sp, #0]
   100d2:	2002      	movs	r0, #2
   100d4:	4ba0      	ldr	r3, [pc, #640]	; (10358 <_lv_disp_refr_task+0x308>)
   100d6:	49a1      	ldr	r1, [pc, #644]	; (1035c <_lv_disp_refr_task+0x30c>)
   100d8:	f002 fc70 	bl	129bc <_lv_log_add>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
   100dc:	6820      	ldr	r0, [r4, #0]
    memset(dst, 0x00, len);
   100de:	f44f 7280 	mov.w	r2, #256	; 0x100
   100e2:	2100      	movs	r1, #0
   100e4:	305e      	adds	r0, #94	; 0x5e
   100e6:	f009 f8ba 	bl	1925e <memset>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
   100ea:	6820      	ldr	r0, [r4, #0]
   100ec:	2100      	movs	r1, #0
   100ee:	2220      	movs	r2, #32
   100f0:	f500 70af 	add.w	r0, r0, #350	; 0x15e
   100f4:	f009 f8b3 	bl	1925e <memset>
        disp_refr->inv_p = 0;
   100f8:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
   100fa:	9805      	ldr	r0, [sp, #20]
        disp_refr->inv_p = 0;
   100fc:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
   10100:	f36f 0209 	bfc	r2, #0, #10
   10104:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
        elaps = lv_tick_elaps(start);
   10108:	f010 ff26 	bl	20f58 <lv_tick_elaps>
   1010c:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
   1010e:	6820      	ldr	r0, [r4, #0]
   10110:	6983      	ldr	r3, [r0, #24]
   10112:	b113      	cbz	r3, 1011a <_lv_disp_refr_task+0xca>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
   10114:	4a8e      	ldr	r2, [pc, #568]	; (10350 <_lv_disp_refr_task+0x300>)
   10116:	6812      	ldr	r2, [r2, #0]
   10118:	4798      	blx	r3
    _lv_mem_buf_free_all();
   1011a:	f002 fd93 	bl	12c44 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
   1011e:	f003 f9eb 	bl	134f8 <_lv_font_clean_up_fmt_txt>
    LV_LOG_TRACE("lv_refr_task: ready");
   10122:	e7ae      	b.n	10082 <_lv_disp_refr_task+0x32>
                disp_refr->inv_area_joined[join_from] = 1;
   10124:	f04f 0901 	mov.w	r9, #1
   10128:	00f7      	lsls	r7, r6, #3
   1012a:	375e      	adds	r7, #94	; 0x5e
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1012c:	6820      	ldr	r0, [r4, #0]
   1012e:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
   10132:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10136:	429d      	cmp	r5, r3
   10138:	d2ab      	bcs.n	10092 <_lv_disp_refr_task+0x42>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   1013a:	1943      	adds	r3, r0, r5
   1013c:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   10140:	bb63      	cbnz	r3, 1019c <_lv_disp_refr_task+0x14c>
   10142:	42ae      	cmp	r6, r5
   10144:	d02a      	beq.n	1019c <_lv_disp_refr_task+0x14c>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   10146:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1014a:	f10a 0a5e 	add.w	sl, sl, #94	; 0x5e
   1014e:	eb00 010a 	add.w	r1, r0, sl
   10152:	4438      	add	r0, r7
   10154:	f011 f82c 	bl	211b0 <_lv_area_is_on>
   10158:	b300      	cbz	r0, 1019c <_lv_disp_refr_task+0x14c>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   1015a:	6821      	ldr	r1, [r4, #0]
   1015c:	a808      	add	r0, sp, #32
   1015e:	eb01 020a 	add.w	r2, r1, sl
   10162:	4439      	add	r1, r7
   10164:	f010 ff79 	bl	2105a <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   10168:	a808      	add	r0, sp, #32
   1016a:	f010 ff3d 	bl	20fe8 <lv_area_get_size>
   1016e:	4683      	mov	fp, r0
   10170:	6820      	ldr	r0, [r4, #0]
   10172:	4438      	add	r0, r7
   10174:	f010 ff38 	bl	20fe8 <lv_area_get_size>
   10178:	4680      	mov	r8, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   1017a:	6820      	ldr	r0, [r4, #0]
   1017c:	4450      	add	r0, sl
   1017e:	f010 ff33 	bl	20fe8 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   10182:	4480      	add	r8, r0
   10184:	45c3      	cmp	fp, r8
   10186:	d209      	bcs.n	1019c <_lv_disp_refr_task+0x14c>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   10188:	6820      	ldr	r0, [r4, #0]
    return memcpy(dst, src, len);
   1018a:	2208      	movs	r2, #8
   1018c:	a908      	add	r1, sp, #32
   1018e:	4438      	add	r0, r7
   10190:	f009 f83a 	bl	19208 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
   10194:	6823      	ldr	r3, [r4, #0]
   10196:	442b      	add	r3, r5
   10198:	f883 915e 	strb.w	r9, [r3, #350]	; 0x15e
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1019c:	3501      	adds	r5, #1
   1019e:	e7c5      	b.n	1012c <_lv_disp_refr_task+0xdc>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   101a0:	2600      	movs	r6, #0
   101a2:	e777      	b.n	10094 <_lv_disp_refr_task+0x44>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   101a4:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
   101a6:	f503 72af 	add.w	r2, r3, #350	; 0x15e
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   101aa:	1c79      	adds	r1, r7, #1
   101ac:	d15a      	bne.n	10264 <_lv_disp_refr_task+0x214>
    int32_t last_i = 0;
   101ae:	2700      	movs	r7, #0
    for(i = 0; i < disp_refr->inv_p; i++) {
   101b0:	f04f 0b00 	mov.w	fp, #0
    disp_refr->driver.buffer->last_area = 0;
   101b4:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
   101b6:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1034c <_lv_disp_refr_task+0x2fc>
    disp_refr->driver.buffer->last_area = 0;
   101ba:	f893 2020 	ldrb.w	r2, [r3, #32]
   101be:	f36f 0200 	bfc	r2, #0, #1
   101c2:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
   101c6:	f893 2020 	ldrb.w	r2, [r3, #32]
   101ca:	f36f 0241 	bfc	r2, #1, #1
   101ce:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
   101d2:	f8d9 8000 	ldr.w	r8, [r9]
   101d6:	f8b8 317e 	ldrh.w	r3, [r8, #382]	; 0x17e
   101da:	f3c3 0309 	ubfx	r3, r3, #0, #10
   101de:	459b      	cmp	fp, r3
   101e0:	f6bf af64 	bge.w	100ac <_lv_disp_refr_task+0x5c>
        if(disp_refr->inv_area_joined[i] == 0) {
   101e4:	eb08 030b 	add.w	r3, r8, fp
   101e8:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   101ec:	2b00      	cmp	r3, #0
   101ee:	f040 80a6 	bne.w	1033e <_lv_disp_refr_task+0x2ee>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
   101f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   101f6:	45bb      	cmp	fp, r7
   101f8:	bf08      	it	eq
   101fa:	f893 2020 	ldrbeq.w	r2, [r3, #32]
   101fe:	ea4f 05cb 	mov.w	r5, fp, lsl #3
   10202:	bf04      	itt	eq
   10204:	f042 0201 	orreq.w	r2, r2, #1
   10208:	f883 2020 	strbeq.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
   1020c:	f893 2020 	ldrb.w	r2, [r3, #32]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   10210:	4640      	mov	r0, r8
            disp_refr->driver.buffer->last_part = 0;
   10212:	f36f 0241 	bfc	r2, #1, #1
   10216:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
   1021a:	f105 035e 	add.w	r3, r5, #94	; 0x5e
   1021e:	9304      	str	r3, [sp, #16]
   10220:	4443      	add	r3, r8
   10222:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   10224:	f010 fe7c 	bl	20f20 <lv_disp_is_true_double_buf>
   10228:	b308      	cbz	r0, 1026e <_lv_disp_refr_task+0x21e>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1022a:	6820      	ldr	r0, [r4, #0]
   1022c:	f010 fe6e 	bl	20f0c <lv_disp_get_buf>
        vdb->area.x1        = 0;
   10230:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   10232:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
   10234:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   10236:	6820      	ldr	r0, [r4, #0]
   10238:	f002 f96e 	bl	12518 <lv_disp_get_hor_res>
   1023c:	3801      	subs	r0, #1
   1023e:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
   10240:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   10242:	6820      	ldr	r0, [r4, #0]
   10244:	f002 f97a 	bl	1253c <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
   10248:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1024a:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
   1024c:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1024e:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
   10250:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   10254:	9803      	ldr	r0, [sp, #12]
            disp_refr->driver.buffer->last_part = 1;
   10256:	f043 0302 	orr.w	r3, r3, #2
   1025a:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   1025e:	f7ff fe51 	bl	ff04 <lv_refr_area_part>
   10262:	e060      	b.n	10326 <_lv_disp_refr_task+0x2d6>
        if(disp_refr->inv_area_joined[i] == 0) {
   10264:	5dd1      	ldrb	r1, [r2, r7]
   10266:	2900      	cmp	r1, #0
   10268:	d0a2      	beq.n	101b0 <_lv_disp_refr_task+0x160>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1026a:	3f01      	subs	r7, #1
   1026c:	e79d      	b.n	101aa <_lv_disp_refr_task+0x15a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1026e:	6820      	ldr	r0, [r4, #0]
   10270:	f010 fe4c 	bl	20f0c <lv_disp_get_buf>
   10274:	4445      	add	r5, r8
   10276:	f8b5 8062 	ldrh.w	r8, [r5, #98]	; 0x62
   1027a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1027e:	f108 0801 	add.w	r8, r8, #1
   10282:	eba8 0803 	sub.w	r8, r8, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10286:	f9b5 3064 	ldrsh.w	r3, [r5, #100]	; 0x64
   1028a:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   1028e:	f103 0a01 	add.w	sl, r3, #1
   10292:	4606      	mov	r6, r0
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   10294:	6820      	ldr	r0, [r4, #0]
   10296:	9302      	str	r3, [sp, #8]
   10298:	ebaa 0a02 	sub.w	sl, sl, r2
   1029c:	f002 f94e 	bl	1253c <lv_disp_get_ver_res>
        lv_coord_t y2 =
   102a0:	9b02      	ldr	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   102a2:	fa0f f888 	sxth.w	r8, r8
   102a6:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   102a8:	fa0f fa8a 	sxth.w	sl, sl
   102ac:	db4a      	blt.n	10344 <_lv_disp_refr_task+0x2f4>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   102ae:	6820      	ldr	r0, [r4, #0]
   102b0:	f002 f944 	bl	1253c <lv_disp_get_ver_res>
        lv_coord_t y2 =
   102b4:	1e43      	subs	r3, r0, #1
   102b6:	b21b      	sxth	r3, r3
        int32_t max_row = (uint32_t)vdb->size / w;
   102b8:	68f2      	ldr	r2, [r6, #12]
   102ba:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
   102be:	45c2      	cmp	sl, r8
   102c0:	4652      	mov	r2, sl
   102c2:	bfa8      	it	ge
   102c4:	4642      	movge	r2, r8
   102c6:	9202      	str	r2, [sp, #8]
        if(disp_refr->driver.rounder_cb) {
   102c8:	4a20      	ldr	r2, [pc, #128]	; (1034c <_lv_disp_refr_task+0x2fc>)
   102ca:	6812      	ldr	r2, [r2, #0]
   102cc:	6912      	ldr	r2, [r2, #16]
   102ce:	2a00      	cmp	r2, #0
   102d0:	d04e      	beq.n	10370 <_lv_disp_refr_task+0x320>
            tmp.x1 = 0;
   102d2:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
   102d4:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
            tmp.x1 = 0;
   102d8:	9208      	str	r2, [sp, #32]
            tmp.x2 = 0;
   102da:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   102de:	f8d9 0000 	ldr.w	r0, [r9]
   102e2:	46c2      	mov	sl, r8
                tmp.y2 = h_tmp - 1;
   102e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   102e8:	fa0f f888 	sxth.w	r8, r8
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   102ec:	6902      	ldr	r2, [r0, #16]
   102ee:	a908      	add	r1, sp, #32
                tmp.y2 = h_tmp - 1;
   102f0:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
   102f4:	9306      	str	r3, [sp, #24]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   102f6:	4790      	blx	r2
   102f8:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
   102fc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   10300:	3101      	adds	r1, #1
                if(lv_area_get_height(&tmp) <= max_row) break;
   10302:	9b02      	ldr	r3, [sp, #8]
   10304:	1a8a      	subs	r2, r1, r2
   10306:	b212      	sxth	r2, r2
   10308:	4293      	cmp	r3, r2
   1030a:	9b06      	ldr	r3, [sp, #24]
   1030c:	da2c      	bge.n	10368 <_lv_disp_refr_task+0x318>
            } while(h_tmp > 0);
   1030e:	f1b8 0f00 	cmp.w	r8, #0
   10312:	dce4      	bgt.n	102de <_lv_disp_refr_task+0x28e>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
   10314:	4b12      	ldr	r3, [pc, #72]	; (10360 <_lv_disp_refr_task+0x310>)
   10316:	f240 12b7 	movw	r2, #439	; 0x1b7
   1031a:	9300      	str	r3, [sp, #0]
   1031c:	2002      	movs	r0, #2
   1031e:	4b11      	ldr	r3, [pc, #68]	; (10364 <_lv_disp_refr_task+0x314>)
   10320:	490e      	ldr	r1, [pc, #56]	; (1035c <_lv_disp_refr_task+0x30c>)
   10322:	f002 fb4b 	bl	129bc <_lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   10326:	f8d9 0000 	ldr.w	r0, [r9]
   1032a:	6983      	ldr	r3, [r0, #24]
   1032c:	b13b      	cbz	r3, 1033e <_lv_disp_refr_task+0x2ee>
   1032e:	9b04      	ldr	r3, [sp, #16]
   10330:	4418      	add	r0, r3
   10332:	f010 fe59 	bl	20fe8 <lv_area_get_size>
   10336:	4a06      	ldr	r2, [pc, #24]	; (10350 <_lv_disp_refr_task+0x300>)
   10338:	6813      	ldr	r3, [r2, #0]
   1033a:	4403      	add	r3, r0
   1033c:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1033e:	f10b 0b01 	add.w	fp, fp, #1
   10342:	e746      	b.n	101d2 <_lv_disp_refr_task+0x182>
        lv_coord_t y2 =
   10344:	f9b5 3064 	ldrsh.w	r3, [r5, #100]	; 0x64
   10348:	e7b6      	b.n	102b8 <_lv_disp_refr_task+0x268>
   1034a:	bf00      	nop
   1034c:	20025d28 	.word	0x20025d28
   10350:	20025d2c 	.word	0x20025d2c
   10354:	00027063 	.word	0x00027063
   10358:	000270b1 	.word	0x000270b1
   1035c:	00026fbc 	.word	0x00026fbc
   10360:	00027013 	.word	0x00027013
   10364:	000270c4 	.word	0x000270c4
            if(h_tmp <= 0) {
   10368:	f1ba 0f00 	cmp.w	sl, #0
   1036c:	ddd2      	ble.n	10314 <_lv_disp_refr_task+0x2c4>
                max_row = tmp.y2 + 1;
   1036e:	9102      	str	r1, [sp, #8]
        lv_coord_t row_last = 0;
   10370:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   10374:	9a02      	ldr	r2, [sp, #8]
   10376:	f9b5 a060 	ldrsh.w	sl, [r5, #96]	; 0x60
   1037a:	3a01      	subs	r2, #1
   1037c:	eb02 010a 	add.w	r1, r2, sl
   10380:	4299      	cmp	r1, r3
   10382:	dd0d      	ble.n	103a0 <_lv_disp_refr_task+0x350>
        if(y2 != row_last) {
   10384:	4543      	cmp	r3, r8
   10386:	d0ce      	beq.n	10326 <_lv_disp_refr_task+0x2d6>
            vdb->area.x1 = area_p->x1;
   10388:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
   1038c:	6822      	ldr	r2, [r4, #0]
   1038e:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   10390:	f9b5 1062 	ldrsh.w	r1, [r5, #98]	; 0x62
            disp_refr->driver.buffer->last_part = 1;
   10394:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
   10396:	82b1      	strh	r1, [r6, #20]
            vdb->area.y1 = row;
   10398:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.y2 = y2;
   1039c:	82f3      	strh	r3, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
   1039e:	e757      	b.n	10250 <_lv_disp_refr_task+0x200>
            vdb->area.x1 = area_p->x1;
   103a0:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
   103a4:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   103a6:	f9b5 1062 	ldrsh.w	r1, [r5, #98]	; 0x62
            vdb->area.y1 = row;
   103aa:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.x2 = area_p->x2;
   103ae:	82b1      	strh	r1, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
   103b0:	9902      	ldr	r1, [sp, #8]
   103b2:	448a      	add	sl, r1
   103b4:	fa0f fa8a 	sxth.w	sl, sl
   103b8:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   103bc:	fa0f f888 	sxth.w	r8, r8
   103c0:	4598      	cmp	r8, r3
   103c2:	bfa8      	it	ge
   103c4:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   103c6:	4543      	cmp	r3, r8
            vdb->area.y2 = row + max_row - 1;
   103c8:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   103cc:	d108      	bne.n	103e0 <_lv_disp_refr_task+0x390>
   103ce:	f8d9 1000 	ldr.w	r1, [r9]
   103d2:	6848      	ldr	r0, [r1, #4]
   103d4:	f890 1020 	ldrb.w	r1, [r0, #32]
   103d8:	f041 0102 	orr.w	r1, r1, #2
   103dc:	f880 1020 	strb.w	r1, [r0, #32]
            lv_refr_area_part(area_p);
   103e0:	9803      	ldr	r0, [sp, #12]
   103e2:	e9cd 3206 	strd	r3, r2, [sp, #24]
   103e6:	f7ff fd8d 	bl	ff04 <lv_refr_area_part>
   103ea:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   103ee:	e7c5      	b.n	1037c <_lv_disp_refr_task+0x32c>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   103f0:	f010 fd8c 	bl	20f0c <lv_disp_get_buf>
   103f4:	4606      	mov	r6, r0
                lv_refr_vdb_flush();
   103f6:	f7ff fd21 	bl	fe3c <lv_refr_vdb_flush>
                while(vdb->flushing);
   103fa:	69b3      	ldr	r3, [r6, #24]
   103fc:	2b00      	cmp	r3, #0
   103fe:	d1fc      	bne.n	103fa <_lv_disp_refr_task+0x3aa>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   10400:	6823      	ldr	r3, [r4, #0]
   10402:	f9b3 0000 	ldrsh.w	r0, [r3]
   10406:	0080      	lsls	r0, r0, #2
   10408:	f002 fb82 	bl	12b10 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   1040c:	68b3      	ldr	r3, [r6, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1040e:	f8d6 b000 	ldr.w	fp, [r6]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   10412:	4605      	mov	r5, r0
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   10414:	459b      	cmp	fp, r3
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   10416:	f8da 0000 	ldr.w	r0, [sl]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1041a:	bf08      	it	eq
   1041c:	f8d6 b004 	ldreq.w	fp, [r6, #4]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   10420:	9302      	str	r3, [sp, #8]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   10422:	f002 f879 	bl	12518 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
   10426:	2600      	movs	r6, #0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   10428:	4603      	mov	r3, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
   1042a:	f8da 2000 	ldr.w	r2, [sl]
   1042e:	b2b0      	uxth	r0, r6
   10430:	f8b2 117e 	ldrh.w	r1, [r2, #382]	; 0x17e
   10434:	f3c1 0109 	ubfx	r1, r1, #0, #10
   10438:	4281      	cmp	r1, r0
   1043a:	d806      	bhi.n	1044a <_lv_disp_refr_task+0x3fa>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
   1043c:	2d00      	cmp	r5, #0
   1043e:	f43f ae4d 	beq.w	100dc <_lv_disp_refr_task+0x8c>
   10442:	4628      	mov	r0, r5
   10444:	f002 fbc6 	bl	12bd4 <_lv_mem_buf_release>
   10448:	e648      	b.n	100dc <_lv_disp_refr_task+0x8c>
                    if(disp_refr->inv_area_joined[a] == 0) {
   1044a:	1991      	adds	r1, r2, r6
   1044c:	f891 115e 	ldrb.w	r1, [r1, #350]	; 0x15e
   10450:	b109      	cbz	r1, 10456 <_lv_disp_refr_task+0x406>
                for(a = 0; a < disp_refr->inv_p; a++) {
   10452:	3601      	adds	r6, #1
   10454:	e7e9      	b.n	1042a <_lv_disp_refr_task+0x3da>
                        uint32_t start_offs =
   10456:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   1045a:	f9b2 105e 	ldrsh.w	r1, [r2, #94]	; 0x5e
   1045e:	f9b2 7060 	ldrsh.w	r7, [r2, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10462:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
   10466:	fb03 1807 	mla	r8, r3, r7, r1
   1046a:	3201      	adds	r2, #1
   1046c:	1a52      	subs	r2, r2, r1
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   1046e:	b212      	sxth	r2, r2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   10470:	f106 010b 	add.w	r1, r6, #11
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   10474:	ea4f 0982 	mov.w	r9, r2, lsl #2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   10478:	00ca      	lsls	r2, r1, #3
                        uint32_t start_offs =
   1047a:	ea4f 0888 	mov.w	r8, r8, lsl #2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1047e:	9203      	str	r2, [sp, #12]
   10480:	f8da 1000 	ldr.w	r1, [sl]
   10484:	9a03      	ldr	r2, [sp, #12]
   10486:	4411      	add	r1, r2
   10488:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1048c:	42b9      	cmp	r1, r7
   1048e:	dbe0      	blt.n	10452 <_lv_disp_refr_task+0x402>
   10490:	eb0b 0108 	add.w	r1, fp, r8
   10494:	464a      	mov	r2, r9
   10496:	4628      	mov	r0, r5
   10498:	9304      	str	r3, [sp, #16]
   1049a:	f008 feb5 	bl	19208 <memcpy>
   1049e:	9b02      	ldr	r3, [sp, #8]
   104a0:	464a      	mov	r2, r9
   104a2:	eb03 0008 	add.w	r0, r3, r8
   104a6:	4629      	mov	r1, r5
   104a8:	f008 feae 	bl	19208 <memcpy>
                            start_offs += hres * sizeof(lv_color_t);
   104ac:	9b04      	ldr	r3, [sp, #16]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   104ae:	3701      	adds	r7, #1
                            start_offs += hres * sizeof(lv_color_t);
   104b0:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   104b4:	b23f      	sxth	r7, r7
   104b6:	e7e3      	b.n	10480 <_lv_disp_refr_task+0x430>

000104b8 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
   104b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104ba:	4604      	mov	r4, r0
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
   104bc:	7900      	ldrb	r0, [r0, #4]
{
   104be:	460e      	mov	r6, r1
    if(list->style_cnt == 0) return;
   104c0:	f010 013f 	ands.w	r1, r0, #63	; 0x3f
   104c4:	d004      	beq.n	104d0 <_lv_style_list_remove_style+0x18>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
   104c6:	460b      	mov	r3, r1
   104c8:	2200      	movs	r2, #0
   104ca:	b2d0      	uxtb	r0, r2
   104cc:	4283      	cmp	r3, r0
   104ce:	d801      	bhi.n	104d4 <_lv_style_list_remove_style+0x1c>

    lv_mem_free(list->style_list);

    list->style_cnt--;
    list->style_list = new_classes;
}
   104d0:	b003      	add	sp, #12
   104d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
   104d4:	6820      	ldr	r0, [r4, #0]
   104d6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   104da:	3201      	adds	r2, #1
   104dc:	42b5      	cmp	r5, r6
   104de:	d1f4      	bne.n	104ca <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
   104e0:	2901      	cmp	r1, #1
   104e2:	d108      	bne.n	104f6 <_lv_style_list_remove_style+0x3e>
        lv_mem_free(list->style_list);
   104e4:	f002 faba 	bl	12a5c <lv_mem_free>
        list->style_list = NULL;
   104e8:	2300      	movs	r3, #0
   104ea:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
   104ec:	7923      	ldrb	r3, [r4, #4]
   104ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   104f2:	7123      	strb	r3, [r4, #4]
        return;
   104f4:	e7ec      	b.n	104d0 <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
   104f6:	1e58      	subs	r0, r3, #1
   104f8:	0080      	lsls	r0, r0, #2
   104fa:	f002 fa87 	bl	12a0c <lv_mem_alloc>
    if(new_classes == NULL) {
   104fe:	4605      	mov	r5, r0
   10500:	b190      	cbz	r0, 10528 <_lv_style_list_remove_style+0x70>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   10502:	2300      	movs	r3, #0
   10504:	461a      	mov	r2, r3
   10506:	7921      	ldrb	r1, [r4, #4]
   10508:	6820      	ldr	r0, [r4, #0]
   1050a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1050e:	b2df      	uxtb	r7, r3
   10510:	42b9      	cmp	r1, r7
   10512:	d813      	bhi.n	1053c <_lv_style_list_remove_style+0x84>
    lv_mem_free(list->style_list);
   10514:	f002 faa2 	bl	12a5c <lv_mem_free>
    list->style_cnt--;
   10518:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
   1051a:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
   1051c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
   10520:	f362 0305 	bfi	r3, r2, #0, #6
   10524:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
   10526:	e7d3      	b.n	104d0 <_lv_style_list_remove_style+0x18>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
   10528:	4b09      	ldr	r3, [pc, #36]	; (10550 <_lv_style_list_remove_style+0x98>)
   1052a:	f240 1207 	movw	r2, #263	; 0x107
   1052e:	9300      	str	r3, [sp, #0]
   10530:	2002      	movs	r0, #2
   10532:	4b08      	ldr	r3, [pc, #32]	; (10554 <_lv_style_list_remove_style+0x9c>)
   10534:	4908      	ldr	r1, [pc, #32]	; (10558 <_lv_style_list_remove_style+0xa0>)
   10536:	f002 fa41 	bl	129bc <_lv_log_add>
        return;
   1053a:	e7c9      	b.n	104d0 <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
   1053c:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
   10540:	3301      	adds	r3, #1
   10542:	42b7      	cmp	r7, r6
        new_classes[j] = list->style_list[i];
   10544:	bf1e      	ittt	ne
   10546:	f845 7022 	strne.w	r7, [r5, r2, lsl #2]
        j++;
   1054a:	3201      	addne	r2, #1
   1054c:	b2d2      	uxtbne	r2, r2
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   1054e:	e7de      	b.n	1050e <_lv_style_list_remove_style+0x56>
   10550:	0002711b 	.word	0x0002711b
   10554:	0002720c 	.word	0x0002720c
   10558:	000270e3 	.word	0x000270e3

0001055c <_lv_style_list_add_style>:
{
   1055c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1055e:	460d      	mov	r5, r1
    if(list == NULL) return;
   10560:	4604      	mov	r4, r0
   10562:	b180      	cbz	r0, 10586 <_lv_style_list_add_style+0x2a>
    _lv_style_list_remove_style(list, style);
   10564:	f7ff ffa8 	bl	104b8 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
   10568:	7921      	ldrb	r1, [r4, #4]
   1056a:	0688      	lsls	r0, r1, #26
   1056c:	d10d      	bne.n	1058a <_lv_style_list_add_style+0x2e>
   1056e:	2004      	movs	r0, #4
   10570:	f002 fa4c 	bl	12a0c <lv_mem_alloc>
    if(new_classes == NULL) {
   10574:	b988      	cbnz	r0, 1059a <_lv_style_list_add_style+0x3e>
        LV_LOG_WARN("lv_style_list_add_style: couldn't add the class");
   10576:	4b17      	ldr	r3, [pc, #92]	; (105d4 <_lv_style_list_add_style+0x78>)
   10578:	22d3      	movs	r2, #211	; 0xd3
   1057a:	9300      	str	r3, [sp, #0]
   1057c:	2002      	movs	r0, #2
   1057e:	4b16      	ldr	r3, [pc, #88]	; (105d8 <_lv_style_list_add_style+0x7c>)
   10580:	4916      	ldr	r1, [pc, #88]	; (105dc <_lv_style_list_add_style+0x80>)
   10582:	f002 fa1b 	bl	129bc <_lv_log_add>
}
   10586:	b003      	add	sp, #12
   10588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
   1058a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1058e:	3101      	adds	r1, #1
   10590:	6820      	ldr	r0, [r4, #0]
   10592:	0089      	lsls	r1, r1, #2
   10594:	f002 fa80 	bl	12a98 <lv_mem_realloc>
   10598:	e7ec      	b.n	10574 <_lv_style_list_add_style+0x18>
    if(list->has_trans) first_style++;
   1059a:	7923      	ldrb	r3, [r4, #4]
    if(list->has_local) first_style++;
   1059c:	0659      	lsls	r1, r3, #25
    if(list->has_trans) first_style++;
   1059e:	ea4f 12d3 	mov.w	r2, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
   105a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   105a6:	4619      	mov	r1, r3
    if(list->has_local) first_style++;
   105a8:	bf48      	it	mi
   105aa:	3201      	addmi	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
   105ac:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   105b0:	4291      	cmp	r1, r2
   105b2:	d808      	bhi.n	105c6 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
   105b4:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    list->style_cnt++;
   105b8:	7922      	ldrb	r2, [r4, #4]
   105ba:	3301      	adds	r3, #1
   105bc:	f363 0205 	bfi	r2, r3, #0, #6
   105c0:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
   105c2:	6020      	str	r0, [r4, #0]
   105c4:	e7df      	b.n	10586 <_lv_style_list_add_style+0x2a>
        new_classes[i] = new_classes[i - 1];
   105c6:	f856 7c04 	ldr.w	r7, [r6, #-4]
    for(i = list->style_cnt; i > first_style; i--) {
   105ca:	3901      	subs	r1, #1
        new_classes[i] = new_classes[i - 1];
   105cc:	f846 7904 	str.w	r7, [r6], #-4
    for(i = list->style_cnt; i > first_style; i--) {
   105d0:	b2c9      	uxtb	r1, r1
   105d2:	e7ed      	b.n	105b0 <_lv_style_list_add_style+0x54>
   105d4:	00027156 	.word	0x00027156
   105d8:	000271f3 	.word	0x000271f3
   105dc:	000270e3 	.word	0x000270e3

000105e0 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
   105e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   105e2:	7901      	ldrb	r1, [r0, #4]
{
   105e4:	4604      	mov	r4, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   105e6:	064b      	lsls	r3, r1, #25
   105e8:	d505      	bpl.n	105f6 <get_alloc_local_style+0x16>
   105ea:	09c9      	lsrs	r1, r1, #7
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
   105ec:	b003      	add	sp, #12
   105ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   105f2:	f00c be38 	b.w	1d266 <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
   105f6:	2004      	movs	r0, #4
   105f8:	f002 fa08 	bl	12a0c <lv_mem_alloc>
    if(local_style == NULL) {
   105fc:	4605      	mov	r5, r0
   105fe:	b958      	cbnz	r0, 10618 <get_alloc_local_style+0x38>
        LV_LOG_WARN("get_local_style: couldn't create local style");
   10600:	4b0b      	ldr	r3, [pc, #44]	; (10630 <get_alloc_local_style+0x50>)
   10602:	f44f 628b 	mov.w	r2, #1112	; 0x458
   10606:	9300      	str	r3, [sp, #0]
   10608:	2002      	movs	r0, #2
   1060a:	4b0a      	ldr	r3, [pc, #40]	; (10634 <get_alloc_local_style+0x54>)
   1060c:	490a      	ldr	r1, [pc, #40]	; (10638 <get_alloc_local_style+0x58>)
   1060e:	f002 f9d5 	bl	129bc <_lv_log_add>
}
   10612:	4628      	mov	r0, r5
   10614:	b003      	add	sp, #12
   10616:	bd30      	pop	{r4, r5, pc}
    lv_style_init(local_style);
   10618:	f00c fe9e 	bl	1d358 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
   1061c:	4629      	mov	r1, r5
   1061e:	4620      	mov	r0, r4
   10620:	f7ff ff9c 	bl	1055c <_lv_style_list_add_style>
    list->has_local = 1;
   10624:	7923      	ldrb	r3, [r4, #4]
   10626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1062a:	7123      	strb	r3, [r4, #4]
    return local_style;
   1062c:	e7f1      	b.n	10612 <get_alloc_local_style+0x32>
   1062e:	bf00      	nop
   10630:	00027186 	.word	0x00027186
   10634:	00027247 	.word	0x00027247
   10638:	000270e3 	.word	0x000270e3

0001063c <_lv_style_list_add_trans_style>:
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
   1063c:	f990 3004 	ldrsb.w	r3, [r0, #4]
{
   10640:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
   10642:	2b00      	cmp	r3, #0
{
   10644:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
   10646:	da04      	bge.n	10652 <_lv_style_list_add_trans_style+0x16>
}
   10648:	b003      	add	sp, #12
   1064a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
   1064e:	f00d b85c 	b.w	1d70a <_lv_style_list_get_transition_style>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
   10652:	2004      	movs	r0, #4
   10654:	f002 f9da 	bl	12a0c <lv_mem_alloc>
    if(trans_style == NULL) {
   10658:	4605      	mov	r5, r0
   1065a:	b958      	cbnz	r0, 10674 <_lv_style_list_add_trans_style+0x38>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
   1065c:	4b0e      	ldr	r3, [pc, #56]	; (10698 <_lv_style_list_add_trans_style+0x5c>)
   1065e:	f240 22cd 	movw	r2, #717	; 0x2cd
   10662:	9300      	str	r3, [sp, #0]
   10664:	2002      	movs	r0, #2
   10666:	4b0d      	ldr	r3, [pc, #52]	; (1069c <_lv_style_list_add_trans_style+0x60>)
   10668:	490d      	ldr	r1, [pc, #52]	; (106a0 <_lv_style_list_add_trans_style+0x64>)
   1066a:	f002 f9a7 	bl	129bc <_lv_log_add>
}
   1066e:	4628      	mov	r0, r5
   10670:	b003      	add	sp, #12
   10672:	bd30      	pop	{r4, r5, pc}
    lv_style_init(trans_style);
   10674:	f00c fe70 	bl	1d358 <lv_style_init>
    _lv_style_list_add_style(list, trans_style);
   10678:	4629      	mov	r1, r5
   1067a:	4620      	mov	r0, r4
   1067c:	f7ff ff6e 	bl	1055c <_lv_style_list_add_style>
    list->has_trans = 1;
   10680:	7923      	ldrb	r3, [r4, #4]
   10682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10686:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
   10688:	065b      	lsls	r3, r3, #25
        lv_style_t * tmp = list->style_list[0];
   1068a:	bf42      	ittt	mi
   1068c:	6823      	ldrmi	r3, [r4, #0]
        list->style_list[0] = list->style_list[1];
   1068e:	e9d3 2100 	ldrdmi	r2, r1, [r3]
        list->style_list[1] = tmp;
   10692:	e9c3 1200 	strdmi	r1, r2, [r3]
   10696:	e7ea      	b.n	1066e <_lv_style_list_add_trans_style+0x32>
   10698:	000271b3 	.word	0x000271b3
   1069c:	00027228 	.word	0x00027228
   106a0:	000270e3 	.word	0x000270e3

000106a4 <lv_img_cf_get_px_size>:
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
   106a4:	3804      	subs	r0, #4
   106a6:	b2c0      	uxtb	r0, r0
   106a8:	280a      	cmp	r0, #10
   106aa:	bf9a      	itte	ls
   106ac:	4b01      	ldrls	r3, [pc, #4]	; (106b4 <lv_img_cf_get_px_size+0x10>)
   106ae:	5c18      	ldrbls	r0, [r3, r0]
{
   106b0:	2000      	movhi	r0, #0
            px_size = 0;
            break;
    }

    return px_size;
}
   106b2:	4770      	bx	lr
   106b4:	000272e8 	.word	0x000272e8

000106b8 <lv_draw_img>:
{
   106b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106bc:	4604      	mov	r4, r0
   106be:	460f      	mov	r7, r1
   106c0:	461e      	mov	r6, r3
    if(src == NULL) {
   106c2:	4610      	mov	r0, r2
{
   106c4:	b08d      	sub	sp, #52	; 0x34
    if(src == NULL) {
   106c6:	b94a      	cbnz	r2, 106dc <lv_draw_img+0x24>
        LV_LOG_WARN("Image draw: src is NULL");
   106c8:	2249      	movs	r2, #73	; 0x49
   106ca:	4b76      	ldr	r3, [pc, #472]	; (108a4 <lv_draw_img+0x1ec>)
   106cc:	9300      	str	r3, [sp, #0]
   106ce:	4b76      	ldr	r3, [pc, #472]	; (108a8 <lv_draw_img+0x1f0>)
        LV_LOG_WARN("Image draw error");
   106d0:	2002      	movs	r0, #2
   106d2:	4976      	ldr	r1, [pc, #472]	; (108ac <lv_draw_img+0x1f4>)
   106d4:	f002 f972 	bl	129bc <_lv_log_add>
        show_error(coords, mask, "No\ndata");
   106d8:	4a75      	ldr	r2, [pc, #468]	; (108b0 <lv_draw_img+0x1f8>)
   106da:	e014      	b.n	10706 <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
   106dc:	781b      	ldrb	r3, [r3, #0]
   106de:	2b02      	cmp	r3, #2
   106e0:	d96b      	bls.n	107ba <lv_draw_img+0x102>
                                                       const void * src,
                                                       const lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;

    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
   106e2:	68f1      	ldr	r1, [r6, #12]
   106e4:	f001 fad6 	bl	11c94 <_lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
   106e8:	4605      	mov	r5, r0
   106ea:	2800      	cmp	r0, #0
   106ec:	f000 80bc 	beq.w	10868 <lv_draw_img+0x1b0>

    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);

    if(cdsc->dec_dsc.error_msg != NULL) {
   106f0:	69c3      	ldr	r3, [r0, #28]
   106f2:	b16b      	cbz	r3, 10710 <lv_draw_img+0x58>
        LV_LOG_WARN("Image draw error");
   106f4:	4b6f      	ldr	r3, [pc, #444]	; (108b4 <lv_draw_img+0x1fc>)
   106f6:	22f3      	movs	r2, #243	; 0xf3
   106f8:	9300      	str	r3, [sp, #0]
   106fa:	2002      	movs	r0, #2
   106fc:	4b6e      	ldr	r3, [pc, #440]	; (108b8 <lv_draw_img+0x200>)
   106fe:	496b      	ldr	r1, [pc, #428]	; (108ac <lv_draw_img+0x1f4>)
   10700:	f002 f95c 	bl	129bc <_lv_log_add>

        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
   10704:	69ea      	ldr	r2, [r5, #28]
        show_error(coords, mask, "No\ndata");
   10706:	4639      	mov	r1, r7
   10708:	4620      	mov	r0, r4
   1070a:	f00d fee9 	bl	1e4e0 <show_error>
        return;
   1070e:	e054      	b.n	107ba <lv_draw_img+0x102>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
   10710:	7c03      	ldrb	r3, [r0, #16]
   10712:	f003 031f 	and.w	r3, r3, #31
   10716:	4618      	mov	r0, r3
   10718:	f00e f952 	bl	1e9c0 <lv_img_cf_is_chroma_keyed>
   1071c:	9002      	str	r0, [sp, #8]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1071e:	4618      	mov	r0, r3
   10720:	f00e f958 	bl	1e9d4 <lv_img_cf_has_alpha>
    }
    /* The decoder could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
   10724:	696b      	ldr	r3, [r5, #20]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   10726:	9003      	str	r0, [sp, #12]
    else if(cdsc->dec_dsc.img_data) {
   10728:	2b00      	cmp	r3, #0
   1072a:	d049      	beq.n	107c0 <lv_draw_img+0x108>
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
   1072c:	2208      	movs	r2, #8
   1072e:	4621      	mov	r1, r4
   10730:	a808      	add	r0, sp, #32
   10732:	f008 fd69 	bl	19208 <memcpy>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
   10736:	8873      	ldrh	r3, [r6, #2]
   10738:	8930      	ldrh	r0, [r6, #8]
   1073a:	b913      	cbnz	r3, 10742 <lv_draw_img+0x8a>
   1073c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   10740:	d02b      	beq.n	1079a <lv_draw_img+0xe2>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10742:	88e2      	ldrh	r2, [r4, #6]
   10744:	8861      	ldrh	r1, [r4, #2]
   10746:	3201      	adds	r2, #1
   10748:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1074a:	88a1      	ldrh	r1, [r4, #4]
   1074c:	f8b4 c000 	ldrh.w	ip, [r4]
   10750:	3101      	adds	r1, #1
   10752:	eba1 010c 	sub.w	r1, r1, ip
            int32_t w = lv_area_get_width(coords);
            int32_t h = lv_area_get_height(coords);

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
   10756:	f106 0c04 	add.w	ip, r6, #4
   1075a:	e9cd 0c00 	strd	r0, ip, [sp]
   1075e:	b21b      	sxth	r3, r3
   10760:	b212      	sxth	r2, r2
   10762:	b209      	sxth	r1, r1
   10764:	a808      	add	r0, sp, #32
   10766:	f010 fb83 	bl	20e70 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
   1076a:	f9b4 2000 	ldrsh.w	r2, [r4]
   1076e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   10772:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
   10776:	4413      	add	r3, r2
   10778:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   1077c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   10780:	4419      	add	r1, r3
   10782:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
   10786:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   1078a:	440a      	add	r2, r1
   1078c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
   10790:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   10794:	4413      	add	r3, r2
   10796:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        }

        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
   1079a:	4639      	mov	r1, r7
   1079c:	aa08      	add	r2, sp, #32
   1079e:	a80a      	add	r0, sp, #40	; 0x28
   107a0:	f010 fc30 	bl	21004 <_lv_area_intersect>
        if(union_ok == false) {
   107a4:	b148      	cbz	r0, 107ba <lv_draw_img+0x102>
            return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                                 successfully.*/
        }

        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
   107a6:	9b03      	ldr	r3, [sp, #12]
   107a8:	4620      	mov	r0, r4
   107aa:	9301      	str	r3, [sp, #4]
   107ac:	9b02      	ldr	r3, [sp, #8]
   107ae:	a90a      	add	r1, sp, #40	; 0x28
   107b0:	9300      	str	r3, [sp, #0]
   107b2:	696a      	ldr	r2, [r5, #20]
   107b4:	4633      	mov	r3, r6
   107b6:	f00d feb0 	bl	1e51a <lv_draw_map>
}
   107ba:	b00d      	add	sp, #52	; 0x34
   107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
   107c0:	4622      	mov	r2, r4
   107c2:	4639      	mov	r1, r7
   107c4:	a806      	add	r0, sp, #24
   107c6:	f010 fc1d 	bl	21004 <_lv_area_intersect>
        if(union_ok == false) {
   107ca:	2800      	cmp	r0, #0
   107cc:	d0f5      	beq.n	107ba <lv_draw_img+0x102>
   107ce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   107d2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   107d6:	3301      	adds	r3, #1
   107d8:	1a9b      	subs	r3, r3, r2
   107da:	b21b      	sxth	r3, r3
                                 successfully.*/
        }

        int32_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   107dc:	0098      	lsls	r0, r3, #2
   107de:	9304      	str	r3, [sp, #16]
   107e0:	f002 f996 	bl	12b10 <_lv_mem_buf_get>
   107e4:	f10d 0920 	add.w	r9, sp, #32
   107e8:	2208      	movs	r2, #8
   107ea:	a906      	add	r1, sp, #24
   107ec:	4680      	mov	r8, r0
   107ee:	4648      	mov	r0, r9
   107f0:	f008 fd0a 	bl	19208 <memcpy>
                                         LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
   107f4:	2101      	movs	r1, #1
   107f6:	4648      	mov	r0, r9
   107f8:	f010 fbf1 	bl	20fde <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
   107fc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   10800:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
   10804:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
   10808:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
            if(union_ok == false) continue;

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1080c:	1a9b      	subs	r3, r3, r2
   1080e:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
   10810:	ebab 0a0a 	sub.w	sl, fp, sl
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   10814:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   10816:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1081a:	459b      	cmp	fp, r3
   1081c:	dd03      	ble.n	10826 <lv_draw_img+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
            line.y1++;
            line.y2++;
            y++;
        }
        _lv_mem_buf_release(buf);
   1081e:	4640      	mov	r0, r8
   10820:	f002 f9d8 	bl	12bd4 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
   10824:	e7c9      	b.n	107ba <lv_draw_img+0x102>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
   10826:	464a      	mov	r2, r9
   10828:	4639      	mov	r1, r7
   1082a:	a80a      	add	r0, sp, #40	; 0x28
   1082c:	f010 fbea 	bl	21004 <_lv_area_intersect>
            if(union_ok == false) continue;
   10830:	2800      	cmp	r0, #0
   10832:	d034      	beq.n	1089e <lv_draw_img+0x1e6>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   10834:	4628      	mov	r0, r5
   10836:	9b04      	ldr	r3, [sp, #16]
   10838:	9905      	ldr	r1, [sp, #20]
   1083a:	f8cd 8000 	str.w	r8, [sp]
   1083e:	fa0f f28a 	sxth.w	r2, sl
   10842:	f010 fb2f 	bl	20ea4 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
   10846:	2801      	cmp	r0, #1
   10848:	d013      	beq.n	10872 <lv_draw_img+0x1ba>
                lv_img_decoder_close(&cdsc->dec_dsc);
   1084a:	4628      	mov	r0, r5
   1084c:	f010 fb3a 	bl	20ec4 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
   10850:	4b1a      	ldr	r3, [pc, #104]	; (108bc <lv_draw_img+0x204>)
   10852:	2002      	movs	r0, #2
   10854:	9300      	str	r3, [sp, #0]
   10856:	f44f 7298 	mov.w	r2, #304	; 0x130
   1085a:	4b17      	ldr	r3, [pc, #92]	; (108b8 <lv_draw_img+0x200>)
   1085c:	4913      	ldr	r1, [pc, #76]	; (108ac <lv_draw_img+0x1f4>)
   1085e:	f002 f8ad 	bl	129bc <_lv_log_add>
                _lv_mem_buf_release(buf);
   10862:	4640      	mov	r0, r8
   10864:	f002 f9b6 	bl	12bd4 <_lv_mem_buf_release>
        LV_LOG_WARN("Image draw error");
   10868:	4b12      	ldr	r3, [pc, #72]	; (108b4 <lv_draw_img+0x1fc>)
   1086a:	2254      	movs	r2, #84	; 0x54
   1086c:	9300      	str	r3, [sp, #0]
   1086e:	4b0e      	ldr	r3, [pc, #56]	; (108a8 <lv_draw_img+0x1f0>)
   10870:	e72e      	b.n	106d0 <lv_draw_img+0x18>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
   10872:	9b03      	ldr	r3, [sp, #12]
   10874:	4642      	mov	r2, r8
   10876:	9301      	str	r3, [sp, #4]
   10878:	9b02      	ldr	r3, [sp, #8]
   1087a:	4648      	mov	r0, r9
   1087c:	9300      	str	r3, [sp, #0]
   1087e:	a90a      	add	r1, sp, #40	; 0x28
   10880:	4633      	mov	r3, r6
   10882:	f00d fe4a 	bl	1e51a <lv_draw_map>
            line.y1++;
   10886:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
            y++;
   1088a:	f10a 0a01 	add.w	sl, sl, #1
            line.y1++;
   1088e:	3301      	adds	r3, #1
   10890:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
   10894:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10898:	3301      	adds	r3, #1
   1089a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   1089e:	f10b 0b01 	add.w	fp, fp, #1
   108a2:	e7b8      	b.n	10816 <lv_draw_img+0x15e>
   108a4:	00027298 	.word	0x00027298
   108a8:	000272f3 	.word	0x000272f3
   108ac:	0002725d 	.word	0x0002725d
   108b0:	000272b0 	.word	0x000272b0
   108b4:	000272b8 	.word	0x000272b8
   108b8:	000272ff 	.word	0x000272ff
   108bc:	000272c9 	.word	0x000272c9

000108c0 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
   108c0:	b510      	push	{r4, lr}
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
   108c2:	2224      	movs	r2, #36	; 0x24
   108c4:	2100      	movs	r1, #0
   108c6:	4604      	mov	r4, r0
   108c8:	f008 fcc9 	bl	1925e <memset>
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    dsc->opa = LV_OPA_COVER;
   108cc:	23ff      	movs	r3, #255	; 0xff
   108ce:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
   108d0:	4b07      	ldr	r3, [pc, #28]	; (108f0 <lv_draw_label_dsc_init+0x30>)
   108d2:	60a3      	str	r3, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
   108d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
   108d8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    dsc->color = LV_COLOR_BLACK;
   108dc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   108e0:	6023      	str	r3, [r4, #0]
    dsc->sel_color = LV_COLOR_BLUE;
   108e2:	33ff      	adds	r3, #255	; 0xff
   108e4:	6063      	str	r3, [r4, #4]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
   108e6:	2300      	movs	r3, #0
   108e8:	f884 3020 	strb.w	r3, [r4, #32]
}
   108ec:	bd10      	pop	{r4, pc}
   108ee:	bf00      	nop
   108f0:	200003f8 	.word	0x200003f8

000108f4 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
   108f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108f8:	b0d3      	sub	sp, #332	; 0x14c
   108fa:	9309      	str	r3, [sp, #36]	; 0x24

    if(dsc->opa <= LV_OPA_MIN) return;
   108fc:	7b13      	ldrb	r3, [r2, #12]
{
   108fe:	4688      	mov	r8, r1
    if(dsc->opa <= LV_OPA_MIN) return;
   10900:	2b02      	cmp	r3, #2
{
   10902:	4614      	mov	r4, r2
   10904:	9e5c      	ldr	r6, [sp, #368]	; 0x170
   10906:	9006      	str	r0, [sp, #24]
    if(dsc->opa <= LV_OPA_MIN) return;
   10908:	f240 80d4 	bls.w	10ab4 <lv_draw_label+0x1c0>
    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
   1090c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1090e:	781b      	ldrb	r3, [r3, #0]
   10910:	2b00      	cmp	r3, #0
   10912:	f000 80cf 	beq.w	10ab4 <lv_draw_label+0x1c0>
    const lv_font_t * font = dsc->font;
   10916:	f8d2 b008 	ldr.w	fp, [r2, #8]

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
   1091a:	460a      	mov	r2, r1
   1091c:	4601      	mov	r1, r0
   1091e:	a82e      	add	r0, sp, #184	; 0xb8
   10920:	f010 fb70 	bl	21004 <_lv_area_intersect>
    if(!clip_ok) return;
   10924:	2800      	cmp	r0, #0
   10926:	f000 80c5 	beq.w	10ab4 <lv_draw_label+0x1c0>


    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
   1092a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1092e:	079f      	lsls	r7, r3, #30
   10930:	f100 80c3 	bmi.w	10aba <lv_draw_label+0x1c6>
   10934:	9b06      	ldr	r3, [sp, #24]
   10936:	9a06      	ldr	r2, [sp, #24]
   10938:	889b      	ldrh	r3, [r3, #4]
   1093a:	8812      	ldrh	r2, [r2, #0]
   1093c:	3301      	adds	r3, #1
   1093e:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
   10940:	b21b      	sxth	r3, r3
                         dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
    int32_t line_height = line_height_font + dsc->line_space;
   10942:	f9b4 200e 	ldrsh.w	r2, [r4, #14]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
    pos.y += y_ofs;
   10946:	9906      	ldr	r1, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
   10948:	9208      	str	r2, [sp, #32]
    pos.x = coords->x1;
   1094a:	9a06      	ldr	r2, [sp, #24]
    pos.y += y_ofs;
   1094c:	884d      	ldrh	r5, [r1, #2]
    pos.x = coords->x1;
   1094e:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t line_height_font = lv_font_get_line_height(font);
   10952:	f9bb a008 	ldrsh.w	sl, [fp, #8]
    pos.x = coords->x1;
   10956:	920b      	str	r2, [sp, #44]	; 0x2c
    x_ofs = dsc->ofs_x;
   10958:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
   1095c:	9225      	str	r2, [sp, #148]	; 0x94
    y_ofs = dsc->ofs_y;
   1095e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
    pos.y += y_ofs;
   10962:	4415      	add	r5, r2
   10964:	b22d      	sxth	r5, r5

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   10966:	2e00      	cmp	r6, #0
   10968:	f000 80b8 	beq.w	10adc <lv_draw_label+0x1e8>
   1096c:	2a00      	cmp	r2, #0
   1096e:	f040 80b7 	bne.w	10ae0 <lv_draw_label+0x1ec>
   10972:	2d00      	cmp	r5, #0
   10974:	f280 80b5 	bge.w	10ae2 <lv_draw_label+0x1ee>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   10978:	68b2      	ldr	r2, [r6, #8]
   1097a:	9908      	ldr	r1, [sp, #32]
   1097c:	1b52      	subs	r2, r2, r5
   1097e:	2a00      	cmp	r2, #0
   10980:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
   10984:	bfb8      	it	lt
   10986:	4252      	neglt	r2, r2
   10988:	eba1 010a 	sub.w	r1, r1, sl
   1098c:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
            hint->line_start = -1;
   10990:	bfc4      	itt	gt
   10992:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
   10996:	6032      	strgt	r2, [r6, #0]
        }
        last_line_start = hint->line_start;
   10998:	6832      	ldr	r2, [r6, #0]
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
   1099a:	2a00      	cmp	r2, #0
   1099c:	f2c0 80a0 	blt.w	10ae0 <lv_draw_label+0x1ec>
        line_start = last_line_start;
   109a0:	9205      	str	r2, [sp, #20]
        pos.y += hint->y;
   109a2:	6872      	ldr	r2, [r6, #4]
   109a4:	4415      	add	r5, r2
   109a6:	b22d      	sxth	r5, r5
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   109a8:	b21b      	sxth	r3, r3
   109aa:	9f05      	ldr	r7, [sp, #20]
   109ac:	931b      	str	r3, [sp, #108]	; 0x6c
   109ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   109b0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   109b4:	4438      	add	r0, r7
   109b6:	9300      	str	r3, [sp, #0]
   109b8:	4659      	mov	r1, fp
   109ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   109bc:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   109c0:	f002 fb3e 	bl	13040 <_lv_txt_get_next_line>
   109c4:	9b05      	ldr	r3, [sp, #20]
   109c6:	18c3      	adds	r3, r0, r3
   109c8:	9307      	str	r3, [sp, #28]
    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
        pos.y += line_height;
   109ca:	9b08      	ldr	r3, [sp, #32]
   109cc:	4453      	add	r3, sl
   109ce:	461f      	mov	r7, r3
    while(pos.y + line_height_font < mask->y1) {
   109d0:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
   109d4:	eb05 020a 	add.w	r2, r5, sl
   109d8:	428a      	cmp	r2, r1
   109da:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   109de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    while(pos.y + line_height_font < mask->y1) {
   109e0:	f2c0 8081 	blt.w	10ae6 <lv_draw_label+0x1f2>

        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
   109e4:	9905      	ldr	r1, [sp, #20]
   109e6:	075e      	lsls	r6, r3, #29
   109e8:	eb02 0001 	add.w	r0, r2, r1
   109ec:	f140 80a1 	bpl.w	10b32 <lv_draw_label+0x23e>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   109f0:	9907      	ldr	r1, [sp, #28]
   109f2:	9e05      	ldr	r6, [sp, #20]
   109f4:	465a      	mov	r2, fp
   109f6:	9300      	str	r3, [sp, #0]
   109f8:	1b89      	subs	r1, r1, r6
   109fa:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   109fe:	f002 facd 	bl	12f9c <_lv_txt_get_width>
   10a02:	9b06      	ldr	r3, [sp, #24]
   10a04:	9a06      	ldr	r2, [sp, #24]
   10a06:	889b      	ldrh	r3, [r3, #4]
   10a08:	8812      	ldrh	r2, [r2, #0]
   10a0a:	3301      	adds	r3, #1
   10a0c:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   10a0e:	b21b      	sxth	r3, r3
   10a10:	1a18      	subs	r0, r3, r0
   10a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a14:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   10a18:	eb03 0060 	add.w	r0, r3, r0, asr #1
   10a1c:	b203      	sxth	r3, r0

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
   10a1e:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    lv_opa_t opa = dsc->opa;
   10a20:	7b23      	ldrb	r3, [r4, #12]
   10a22:	931f      	str	r3, [sp, #124]	; 0x7c

    uint32_t sel_start = dsc->sel_start;
   10a24:	6963      	ldr	r3, [r4, #20]
   10a26:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t sel_end = dsc->sel_end;
   10a28:	69a3      	ldr	r3, [r4, #24]
   10a2a:	930f      	str	r3, [sp, #60]	; 0x3c
    if(sel_start > sel_end) {
   10a2c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   10a30:	4293      	cmp	r3, r2
   10a32:	bf88      	it	hi
   10a34:	e9cd 230e 	strdhi	r2, r3, [sp, #56]	; 0x38
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
   10a38:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10a3c:	079a      	lsls	r2, r3, #30
   10a3e:	d016      	beq.n	10a6e <lv_draw_label+0x17a>
        lv_draw_line_dsc_init(&line_dsc);
   10a40:	a832      	add	r0, sp, #200	; 0xc8
   10a42:	f00d fff7 	bl	1ea34 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
   10a46:	6823      	ldr	r3, [r4, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
   10a48:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
        line_dsc.color = dsc->color;
   10a4c:	9332      	str	r3, [sp, #200]	; 0xc8
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   10a4e:	f99b 300e 	ldrsb.w	r3, [fp, #14]
   10a52:	2b00      	cmp	r3, #0
   10a54:	bf08      	it	eq
   10a56:	2301      	moveq	r3, #1
   10a58:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        line_dsc.opa = dsc->opa;
   10a5c:	7b23      	ldrb	r3, [r4, #12]
   10a5e:	f88d 30d2 	strb.w	r3, [sp, #210]	; 0xd2
        line_dsc.blend_mode = dsc->blend_mode;
   10a62:	f89d 30d3 	ldrb.w	r3, [sp, #211]	; 0xd3
   10a66:	f362 0301 	bfi	r3, r2, #0, #2
   10a6a:	f88d 30d3 	strb.w	r3, [sp, #211]	; 0xd3
    lv_color_t recolor;
    int32_t letter_w;


    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
   10a6e:	a838      	add	r0, sp, #224	; 0xe0
   10a70:	f001 f8ec 	bl	11c4c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_color;
   10a74:	6863      	ldr	r3, [r4, #4]
   10a76:	9339      	str	r3, [sp, #228]	; 0xe4

    int32_t pos_x_start = pos.x;
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
   10a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10a7a:	2bfd      	cmp	r3, #253	; 0xfd
   10a7c:	bf88      	it	hi
   10a7e:	23ff      	movhi	r3, #255	; 0xff
   10a80:	9315      	str	r3, [sp, #84]	; 0x54
   10a82:	9b08      	ldr	r3, [sp, #32]
   10a84:	4453      	add	r3, sl
   10a86:	b29b      	uxth	r3, r3
   10a88:	9326      	str	r3, [sp, #152]	; 0x98
   10a8a:	b2ab      	uxth	r3, r5
   10a8c:	9318      	str	r3, [sp, #96]	; 0x60
    uint32_t par_start = 0;
   10a8e:	2300      	movs	r3, #0
   10a90:	931e      	str	r3, [sp, #120]	; 0x78
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
                    sel_coords.y1 = pos.y;
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
                    sel_coords.y2 = pos.y + line_height - 1;
   10a92:	9b08      	ldr	r3, [sp, #32]
    while(txt[line_start] != '\0') {
   10a94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                    sel_coords.y2 = pos.y + line_height - 1;
   10a96:	1e5f      	subs	r7, r3, #1
   10a98:	eb07 030a 	add.w	r3, r7, sl
   10a9c:	932b      	str	r3, [sp, #172]	; 0xac
   10a9e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    while(txt[line_start] != '\0') {
   10aa2:	9a05      	ldr	r2, [sp, #20]
   10aa4:	9317      	str	r3, [sp, #92]	; 0x5c
   10aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aa8:	4413      	add	r3, r2
   10aaa:	931d      	str	r3, [sp, #116]	; 0x74
   10aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aae:	5c9b      	ldrb	r3, [r3, r2]
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	d156      	bne.n	10b62 <lv_draw_label+0x26e>

        if(pos.y > mask->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
   10ab4:	b053      	add	sp, #332	; 0x14c
   10ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
   10aba:	9302      	str	r3, [sp, #8]
   10abc:	f647 4318 	movw	r3, #31768	; 0x7c18
   10ac0:	9301      	str	r3, [sp, #4]
   10ac2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   10ac6:	68a2      	ldr	r2, [r4, #8]
   10ac8:	9300      	str	r3, [sp, #0]
   10aca:	9909      	ldr	r1, [sp, #36]	; 0x24
   10acc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   10ad0:	a838      	add	r0, sp, #224	; 0xe0
   10ad2:	f002 fb99 	bl	13208 <_lv_txt_get_size>
        w = p.x;
   10ad6:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
   10ada:	e732      	b.n	10942 <lv_draw_label+0x4e>
    uint32_t line_start     = 0;
   10adc:	9605      	str	r6, [sp, #20]
   10ade:	e763      	b.n	109a8 <lv_draw_label+0xb4>
   10ae0:	2200      	movs	r2, #0
   10ae2:	9205      	str	r2, [sp, #20]
   10ae4:	e760      	b.n	109a8 <lv_draw_label+0xb4>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   10ae6:	9907      	ldr	r1, [sp, #28]
   10ae8:	9300      	str	r3, [sp, #0]
   10aea:	eb02 0901 	add.w	r9, r2, r1
   10aee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10af0:	4659      	mov	r1, fp
   10af2:	4648      	mov	r0, r9
   10af4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   10af8:	f002 faa2 	bl	13040 <_lv_txt_get_next_line>
   10afc:	9b07      	ldr	r3, [sp, #28]
        pos.y += line_height;
   10afe:	443d      	add	r5, r7
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   10b00:	4418      	add	r0, r3
        pos.y += line_height;
   10b02:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   10b04:	b16e      	cbz	r6, 10b22 <lv_draw_label+0x22e>
   10b06:	f515 6f80 	cmn.w	r5, #1024	; 0x400
   10b0a:	db0a      	blt.n	10b22 <lv_draw_label+0x22e>
   10b0c:	6833      	ldr	r3, [r6, #0]
   10b0e:	2b00      	cmp	r3, #0
   10b10:	da07      	bge.n	10b22 <lv_draw_label+0x22e>
            hint->line_start = line_start;
   10b12:	9b07      	ldr	r3, [sp, #28]
   10b14:	6033      	str	r3, [r6, #0]
            hint->y          = pos.y - coords->y1;
   10b16:	9b06      	ldr	r3, [sp, #24]
   10b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   10b1c:	1aea      	subs	r2, r5, r3
            hint->coord_y    = coords->y1;
   10b1e:	e9c6 2301 	strd	r2, r3, [r6, #4]
        if(txt[line_start] == '\0') return;
   10b22:	9b07      	ldr	r3, [sp, #28]
   10b24:	9305      	str	r3, [sp, #20]
   10b26:	f899 3000 	ldrb.w	r3, [r9]
   10b2a:	2b00      	cmp	r3, #0
   10b2c:	d0c2      	beq.n	10ab4 <lv_draw_label+0x1c0>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   10b2e:	9007      	str	r0, [sp, #28]
   10b30:	e74e      	b.n	109d0 <lv_draw_label+0xdc>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   10b32:	0719      	lsls	r1, r3, #28
   10b34:	f57f af74 	bpl.w	10a20 <lv_draw_label+0x12c>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   10b38:	9907      	ldr	r1, [sp, #28]
   10b3a:	9e05      	ldr	r6, [sp, #20]
   10b3c:	465a      	mov	r2, fp
   10b3e:	9300      	str	r3, [sp, #0]
   10b40:	1b89      	subs	r1, r1, r6
   10b42:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   10b46:	f002 fa29 	bl	12f9c <_lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   10b4a:	9b06      	ldr	r3, [sp, #24]
   10b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10b4e:	889b      	ldrh	r3, [r3, #4]
   10b50:	441a      	add	r2, r3
   10b52:	4613      	mov	r3, r2
   10b54:	9a06      	ldr	r2, [sp, #24]
   10b56:	3301      	adds	r3, #1
   10b58:	8812      	ldrh	r2, [r2, #0]
   10b5a:	1a9b      	subs	r3, r3, r2
   10b5c:	1a1b      	subs	r3, r3, r0
   10b5e:	b21b      	sxth	r3, r3
   10b60:	e75d      	b.n	10a1e <lv_draw_label+0x12a>
        pos.x += x_ofs;
   10b62:	9b25      	ldr	r3, [sp, #148]	; 0x94
                    sel_coords.y2 = pos.y + line_height - 1;
   10b64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
        pos.x += x_ofs;
   10b66:	441d      	add	r5, r3
   10b68:	b22b      	sxth	r3, r5
   10b6a:	930c      	str	r3, [sp, #48]	; 0x30
        i         = 0;
   10b6c:	2300      	movs	r3, #0
   10b6e:	932d      	str	r3, [sp, #180]	; 0xb4
        cmd_state = CMD_STATE_WAIT;
   10b70:	9308      	str	r3, [sp, #32]
                    sel_coords.y2 = pos.y + line_height - 1;
   10b72:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b74:	4413      	add	r3, r2
   10b76:	932a      	str	r3, [sp, #168]	; 0xa8
        while(i < line_end - line_start) {
   10b78:	9b07      	ldr	r3, [sp, #28]
   10b7a:	9a05      	ldr	r2, [sp, #20]
   10b7c:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10b7e:	1a9b      	subs	r3, r3, r2
   10b80:	428b      	cmp	r3, r1
   10b82:	d87b      	bhi.n	10c7c <lv_draw_label+0x388>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
   10b84:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10b88:	079e      	lsls	r6, r3, #30
   10b8a:	d51e      	bpl.n	10bca <lv_draw_label+0x2d6>
            p1.x = pos_x_start;
   10b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   10b8e:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
            p1.x = pos_x_start;
   10b92:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   10b96:	68a3      	ldr	r3, [r4, #8]
   10b98:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10b9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   10ba0:	a830      	add	r0, sp, #192	; 0xc0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   10ba2:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   10ba6:	1053      	asrs	r3, r2, #1
   10ba8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10baa:	eb03 0361 	add.w	r3, r3, r1, asr #1
   10bae:	4413      	add	r3, r2
            p2.x = pos.x;
   10bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   10bb2:	b21b      	sxth	r3, r3
   10bb4:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
            p2.x = pos.x;
   10bb8:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
            p2.y = p1.y;
   10bbc:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   10bc0:	4642      	mov	r2, r8
   10bc2:	ab32      	add	r3, sp, #200	; 0xc8
   10bc4:	a935      	add	r1, sp, #212	; 0xd4
   10bc6:	f000 fb01 	bl	111cc <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
   10bca:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10bce:	07dd      	lsls	r5, r3, #31
   10bd0:	d519      	bpl.n	10c06 <lv_draw_label+0x312>
            p1.x = pos_x_start;
   10bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   10bd4:	68a2      	ldr	r2, [r4, #8]
            p1.x = pos_x_start;
   10bd6:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   10bda:	8913      	ldrh	r3, [r2, #8]
   10bdc:	8952      	ldrh	r2, [r2, #10]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   10bde:	a935      	add	r1, sp, #212	; 0xd4
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   10be0:	1a9b      	subs	r3, r3, r2
   10be2:	f99b 200d 	ldrsb.w	r2, [fp, #13]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   10be6:	a830      	add	r0, sp, #192	; 0xc0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   10be8:	1a9b      	subs	r3, r3, r2
   10bea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10bec:	441a      	add	r2, r3
   10bee:	b213      	sxth	r3, r2
            p2.x = pos.x;
   10bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   10bf2:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
            p2.x = pos.x;
   10bf6:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
            p2.y = p1.y;
   10bfa:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   10bfe:	4642      	mov	r2, r8
   10c00:	ab32      	add	r3, sp, #200	; 0xc8
   10c02:	f000 fae3 	bl	111cc <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   10c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c08:	9a07      	ldr	r2, [sp, #28]
   10c0a:	4659      	mov	r1, fp
   10c0c:	189f      	adds	r7, r3, r2
   10c0e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10c12:	4638      	mov	r0, r7
   10c14:	9300      	str	r3, [sp, #0]
   10c16:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   10c1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10c1c:	f002 fa10 	bl	13040 <_lv_txt_get_next_line>
   10c20:	9b07      	ldr	r3, [sp, #28]
   10c22:	4601      	mov	r1, r0
   10c24:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
   10c26:	9b06      	ldr	r3, [sp, #24]
   10c28:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   10c2c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10c30:	0758      	lsls	r0, r3, #29
   10c32:	f140 8285 	bpl.w	11140 <lv_draw_label+0x84c>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   10c36:	465a      	mov	r2, fp
   10c38:	9300      	str	r3, [sp, #0]
   10c3a:	4638      	mov	r0, r7
   10c3c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   10c40:	f002 f9ac 	bl	12f9c <_lv_txt_get_width>
   10c44:	9b06      	ldr	r3, [sp, #24]
   10c46:	9a06      	ldr	r2, [sp, #24]
   10c48:	889b      	ldrh	r3, [r3, #4]
   10c4a:	8812      	ldrh	r2, [r2, #0]
   10c4c:	3301      	adds	r3, #1
   10c4e:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   10c50:	b21b      	sxth	r3, r3
   10c52:	1a18      	subs	r0, r3, r0
   10c54:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   10c58:	eb05 0560 	add.w	r5, r5, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   10c5c:	b22d      	sxth	r5, r5
        if(pos.y > mask->y2) return;
   10c5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10c60:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10c62:	4413      	add	r3, r2
   10c64:	b29a      	uxth	r2, r3
   10c66:	9218      	str	r2, [sp, #96]	; 0x60
        line_start = line_end;
   10c68:	9a07      	ldr	r2, [sp, #28]
        if(pos.y > mask->y2) return;
   10c6a:	b21b      	sxth	r3, r3
        line_start = line_end;
   10c6c:	9205      	str	r2, [sp, #20]
        if(pos.y > mask->y2) return;
   10c6e:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   10c72:	429a      	cmp	r2, r3
   10c74:	f6ff af1e 	blt.w	10ab4 <lv_draw_label+0x1c0>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   10c78:	9607      	str	r6, [sp, #28]
   10c7a:	e710      	b.n	10a9e <lv_draw_label+0x1aa>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   10c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10c82:	429a      	cmp	r2, r3
   10c84:	d024      	beq.n	10cd0 <lv_draw_label+0x3dc>
   10c86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10c88:	429a      	cmp	r2, r3
   10c8a:	d021      	beq.n	10cd0 <lv_draw_label+0x3dc>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
   10c8c:	9a05      	ldr	r2, [sp, #20]
   10c8e:	4b83      	ldr	r3, [pc, #524]	; (10e9c <lv_draw_label+0x5a8>)
   10c90:	9809      	ldr	r0, [sp, #36]	; 0x24
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	4411      	add	r1, r2
   10c96:	4798      	blx	r3
   10c98:	4606      	mov	r6, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   10c9a:	4f81      	ldr	r7, [pc, #516]	; (10ea0 <lv_draw_label+0x5ac>)
   10c9c:	a92d      	add	r1, sp, #180	; 0xb4
   10c9e:	683b      	ldr	r3, [r7, #0]
   10ca0:	981d      	ldr	r0, [sp, #116]	; 0x74
   10ca2:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   10ca4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   10ca6:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   10ca8:	982d      	ldr	r0, [sp, #180]	; 0xb4
   10caa:	683b      	ldr	r3, [r7, #0]
   10cac:	4410      	add	r0, r2
   10cae:	2100      	movs	r1, #0
   10cb0:	4798      	blx	r3
   10cb2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10cb6:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   10cb8:	f013 0301 	ands.w	r3, r3, #1
   10cbc:	f000 808f 	beq.w	10dde <lv_draw_label+0x4ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   10cc0:	2d23      	cmp	r5, #35	; 0x23
   10cc2:	d10e      	bne.n	10ce2 <lv_draw_label+0x3ee>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   10cc4:	9908      	ldr	r1, [sp, #32]
   10cc6:	b929      	cbnz	r1, 10cd4 <lv_draw_label+0x3e0>
                        par_start = i;
   10cc8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10cca:	921e      	str	r2, [sp, #120]	; 0x78
                        cmd_state = CMD_STATE_WAIT;
   10ccc:	9308      	str	r3, [sp, #32]
   10cce:	e753      	b.n	10b78 <lv_draw_label+0x284>
            uint32_t logical_char_pos = 0;
   10cd0:	2600      	movs	r6, #0
   10cd2:	e7e2      	b.n	10c9a <lv_draw_label+0x3a6>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
   10cd4:	9b08      	ldr	r3, [sp, #32]
   10cd6:	2b01      	cmp	r3, #1
   10cd8:	d045      	beq.n	10d66 <lv_draw_label+0x472>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
   10cda:	2b02      	cmp	r3, #2
   10cdc:	d17f      	bne.n	10dde <lv_draw_label+0x4ea>
                        cmd_state = CMD_STATE_WAIT;
   10cde:	2300      	movs	r3, #0
   10ce0:	e7f4      	b.n	10ccc <lv_draw_label+0x3d8>
                if(cmd_state == CMD_STATE_PAR) {
   10ce2:	9b08      	ldr	r3, [sp, #32]
   10ce4:	2b01      	cmp	r3, #1
   10ce6:	d17a      	bne.n	10dde <lv_draw_label+0x4ea>
                    if(letter == ' ') {
   10ce8:	2d20      	cmp	r5, #32
   10cea:	f47f af45 	bne.w	10b78 <lv_draw_label+0x284>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   10cee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10cf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10cf2:	1a9b      	subs	r3, r3, r2
   10cf4:	2b07      	cmp	r3, #7
   10cf6:	d134      	bne.n	10d62 <lv_draw_label+0x46e>
    return memcpy(dst, src, len);
   10cf8:	e9dd 311d 	ldrd	r3, r1, [sp, #116]	; 0x74
   10cfc:	2206      	movs	r2, #6
   10cfe:	1859      	adds	r1, r3, r1
   10d00:	a835      	add	r0, sp, #212	; 0xd4
   10d02:	f008 fa81 	bl	19208 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   10d06:	f89d 00d4 	ldrb.w	r0, [sp, #212]	; 0xd4
   10d0a:	f00d fe81 	bl	1ea10 <hex_char_to_num>
   10d0e:	4601      	mov	r1, r0
   10d10:	f89d 00d5 	ldrb.w	r0, [sp, #213]	; 0xd5
   10d14:	f00d fe7c 	bl	1ea10 <hex_char_to_num>
   10d18:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   10d1c:	f89d 00d6 	ldrb.w	r0, [sp, #214]	; 0xd6
   10d20:	f00d fe76 	bl	1ea10 <hex_char_to_num>
   10d24:	4605      	mov	r5, r0
   10d26:	f89d 00d7 	ldrb.w	r0, [sp, #215]	; 0xd7
   10d2a:	f00d fe71 	bl	1ea10 <hex_char_to_num>
   10d2e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   10d32:	f89d 00d8 	ldrb.w	r0, [sp, #216]	; 0xd8
   10d36:	f00d fe6b 	bl	1ea10 <hex_char_to_num>
   10d3a:	4606      	mov	r6, r0
   10d3c:	f89d 00d9 	ldrb.w	r0, [sp, #217]	; 0xd9
   10d40:	f00d fe66 	bl	1ea10 <hex_char_to_num>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   10d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d46:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   10d4a:	f360 0307 	bfi	r3, r0, #0, #8
   10d4e:	f365 230f 	bfi	r3, r5, #8, #8
   10d52:	f361 4317 	bfi	r3, r1, #16, #8
   10d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   10d5a:	930a      	str	r3, [sp, #40]	; 0x28
                            recolor.full = dsc->color.full;
   10d5c:	9320      	str	r3, [sp, #128]	; 0x80
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   10d5e:	2302      	movs	r3, #2
   10d60:	e7b4      	b.n	10ccc <lv_draw_label+0x3d8>
                            recolor.full = dsc->color.full;
   10d62:	6823      	ldr	r3, [r4, #0]
   10d64:	e7fa      	b.n	10d5c <lv_draw_label+0x468>
            lv_color_t color = dsc->color;
   10d66:	6823      	ldr	r3, [r4, #0]
   10d68:	9316      	str	r3, [sp, #88]	; 0x58
                        cmd_state = CMD_STATE_WAIT;
   10d6a:	2300      	movs	r3, #0
   10d6c:	9308      	str	r3, [sp, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   10d6e:	4629      	mov	r1, r5
   10d70:	4658      	mov	r0, fp
   10d72:	f010 fd50 	bl	21816 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   10d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   10d7c:	901c      	str	r0, [sp, #112]	; 0x70
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   10d7e:	429a      	cmp	r2, r3
   10d80:	d01c      	beq.n	10dbc <lv_draw_label+0x4c8>
   10d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10d84:	429a      	cmp	r2, r3
   10d86:	d019      	beq.n	10dbc <lv_draw_label+0x4c8>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   10d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d8a:	42b3      	cmp	r3, r6
   10d8c:	d816      	bhi.n	10dbc <lv_draw_label+0x4c8>
   10d8e:	42b2      	cmp	r2, r6
   10d90:	d914      	bls.n	10dbc <lv_draw_label+0x4c8>
                    sel_coords.x1 = pos.x;
   10d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
   10d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    sel_coords.x1 = pos.x;
   10d96:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
                    sel_coords.y1 = pos.y;
   10d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   10d9c:	4641      	mov	r1, r8
                    sel_coords.y1 = pos.y;
   10d9e:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
   10da2:	8a23      	ldrh	r3, [r4, #16]
   10da4:	3b01      	subs	r3, #1
   10da6:	4413      	add	r3, r2
   10da8:	4403      	add	r3, r0
   10daa:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
                    sel_coords.y2 = pos.y + line_height - 1;
   10dae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   10db0:	aa38      	add	r2, sp, #224	; 0xe0
   10db2:	a835      	add	r0, sp, #212	; 0xd4
                    sel_coords.y2 = pos.y + line_height - 1;
   10db4:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   10db8:	f00e fbb1 	bl	1f51e <lv_draw_rect>
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    if(opa < LV_OPA_MIN) return;
   10dbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10dbe:	2b01      	cmp	r3, #1
   10dc0:	f200 81e4 	bhi.w	1118c <lv_draw_label+0x898>
            if(letter_w > 0) {
   10dc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	f43f aed6 	beq.w	10b78 <lv_draw_label+0x284>
                pos.x += letter_w + dsc->letter_space;
   10dcc:	8a25      	ldrh	r5, [r4, #16]
   10dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10dd0:	442b      	add	r3, r5
   10dd2:	461d      	mov	r5, r3
   10dd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   10dd6:	441d      	add	r5, r3
   10dd8:	b22b      	sxth	r3, r5
   10dda:	930c      	str	r3, [sp, #48]	; 0x30
   10ddc:	e6cc      	b.n	10b78 <lv_draw_label+0x284>
            lv_color_t color = dsc->color;
   10dde:	6823      	ldr	r3, [r4, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
   10de0:	9920      	ldr	r1, [sp, #128]	; 0x80
   10de2:	9808      	ldr	r0, [sp, #32]
   10de4:	2802      	cmp	r0, #2
   10de6:	bf08      	it	eq
   10de8:	460b      	moveq	r3, r1
   10dea:	9316      	str	r3, [sp, #88]	; 0x58
   10dec:	e7bf      	b.n	10d6e <lv_draw_label+0x47a>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
   10dee:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
   10df2:	2b00      	cmp	r3, #0
   10df4:	d0e6      	beq.n	10dc4 <lv_draw_label+0x4d0>
   10df6:	f8bd 20d6 	ldrh.w	r2, [sp, #214]	; 0xd6
   10dfa:	2a00      	cmp	r2, #0
   10dfc:	d0e2      	beq.n	10dc4 <lv_draw_label+0x4d0>

    int32_t pos_x = pos_p->x + g.ofs_x;
   10dfe:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e00:	f9bd a0da 	ldrsh.w	sl, [sp, #218]	; 0xda
   10e04:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
   10e06:	f9b8 1000 	ldrsh.w	r1, [r8]
   10e0a:	4452      	add	r2, sl
   10e0c:	428a      	cmp	r2, r1
   10e0e:	dbd9      	blt.n	10dc4 <lv_draw_label+0x4d0>
       pos_x > clip_area->x2 ||
   10e10:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
   10e14:	4592      	cmp	sl, r2
   10e16:	dcd5      	bgt.n	10dc4 <lv_draw_label+0x4d0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   10e18:	f9bd 20dc 	ldrsh.w	r2, [sp, #220]	; 0xdc
   10e1c:	f9bb 9008 	ldrsh.w	r9, [fp, #8]
   10e20:	441a      	add	r2, r3
   10e22:	eba9 0902 	sub.w	r9, r9, r2
   10e26:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
   10e2a:	eba9 0902 	sub.w	r9, r9, r2
   10e2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10e30:	4491      	add	r9, r2
       pos_y + g.box_h < clip_area->y1 ||
   10e32:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
   10e36:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
   10e38:	4293      	cmp	r3, r2
   10e3a:	dbc3      	blt.n	10dc4 <lv_draw_label+0x4d0>
       pos_y > clip_area->y2)  {
   10e3c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
       pos_y + g.box_h < clip_area->y1 ||
   10e40:	4599      	cmp	r9, r3
   10e42:	dcbf      	bgt.n	10dc4 <lv_draw_label+0x4d0>
        return;
    }


    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   10e44:	4629      	mov	r1, r5
   10e46:	4658      	mov	r0, fp
   10e48:	f010 fcde 	bl	21808 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
   10e4c:	b928      	cbnz	r0, 10e5a <lv_draw_label+0x566>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
   10e4e:	4b15      	ldr	r3, [pc, #84]	; (10ea4 <lv_draw_label+0x5b0>)
   10e50:	f240 12b9 	movw	r2, #441	; 0x1b9
   10e54:	9300      	str	r3, [sp, #0]
   10e56:	4b14      	ldr	r3, [pc, #80]	; (10ea8 <lv_draw_label+0x5b4>)
   10e58:	e1ac      	b.n	111b4 <lv_draw_label+0x8c0>
        return;
    }

    if(font_p->subpx) {
   10e5a:	f89b 300c 	ldrb.w	r3, [fp, #12]
   10e5e:	079b      	lsls	r3, r3, #30
   10e60:	d005      	beq.n	10e6e <lv_draw_label+0x57a>
    }

    _lv_mem_buf_release(mask_buf);
    _lv_mem_buf_release(color_buf);
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   10e62:	4b12      	ldr	r3, [pc, #72]	; (10eac <lv_draw_label+0x5b8>)
   10e64:	f240 322d 	movw	r2, #813	; 0x32d
   10e68:	9300      	str	r3, [sp, #0]
   10e6a:	4b11      	ldr	r3, [pc, #68]	; (10eb0 <lv_draw_label+0x5bc>)
   10e6c:	e1a2      	b.n	111b4 <lv_draw_label+0x8c0>
    uint32_t bpp = g->bpp;
   10e6e:	f89d 30de 	ldrb.w	r3, [sp, #222]	; 0xde
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
   10e72:	fa0f fa8a 	sxth.w	sl, sl
    if(bpp == 3) bpp = 4;
   10e76:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
   10e78:	fa0f f989 	sxth.w	r9, r9
    if(bpp == 3) bpp = 4;
   10e7c:	f000 80c4 	beq.w	11008 <lv_draw_label+0x714>
    switch(bpp) {
   10e80:	3b01      	subs	r3, #1
   10e82:	2b07      	cmp	r3, #7
   10e84:	f200 80ba 	bhi.w	10ffc <lv_draw_label+0x708>
   10e88:	e8df f013 	tbh	[pc, r3, lsl #1]
   10e8c:	00c40014 	.word	0x00c40014
   10e90:	00be00b8 	.word	0x00be00b8
   10e94:	00b800b8 	.word	0x00b800b8
   10e98:	00b100b8 	.word	0x00b100b8
   10e9c:	200003d0 	.word	0x200003d0
   10ea0:	200003d4 	.word	0x200003d4
   10ea4:	00027372 	.word	0x00027372
   10ea8:	0002740c 	.word	0x0002740c
   10eac:	0002739f 	.word	0x0002739f
   10eb0:	0002742e 	.word	0x0002742e
    if(bpp == 3) bpp = 4;
   10eb4:	2280      	movs	r2, #128	; 0x80
   10eb6:	2601      	movs	r6, #1
   10eb8:	2302      	movs	r3, #2
   10eba:	9212      	str	r2, [sp, #72]	; 0x48
   10ebc:	4aaa      	ldr	r2, [pc, #680]	; (11168 <lv_draw_label+0x874>)
            bpp_opa_table_p = _lv_bpp2_opa_table;
   10ebe:	920d      	str	r2, [sp, #52]	; 0x34
    if(opa < LV_OPA_MAX) {
   10ec0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10ec2:	2afc      	cmp	r2, #252	; 0xfc
   10ec4:	d811      	bhi.n	10eea <lv_draw_label+0x5f6>
        if(prev_opa != opa || prev_bpp != bpp) {
   10ec6:	4aa9      	ldr	r2, [pc, #676]	; (1116c <lv_draw_label+0x878>)
   10ec8:	9915      	ldr	r1, [sp, #84]	; 0x54
   10eca:	7812      	ldrb	r2, [r2, #0]
   10ecc:	428a      	cmp	r2, r1
   10ece:	f040 80a7 	bne.w	11020 <lv_draw_label+0x72c>
   10ed2:	4aa7      	ldr	r2, [pc, #668]	; (11170 <lv_draw_label+0x87c>)
   10ed4:	6812      	ldr	r2, [r2, #0]
   10ed6:	42b2      	cmp	r2, r6
   10ed8:	f040 80a2 	bne.w	11020 <lv_draw_label+0x72c>
        prev_opa = opa;
   10edc:	4ba3      	ldr	r3, [pc, #652]	; (1116c <lv_draw_label+0x878>)
   10ede:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10ee0:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
   10ee2:	4ba3      	ldr	r3, [pc, #652]	; (11170 <lv_draw_label+0x87c>)
   10ee4:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
   10ee6:	4ba3      	ldr	r3, [pc, #652]	; (11174 <lv_draw_label+0x880>)
   10ee8:	930d      	str	r3, [sp, #52]	; 0x34
    int32_t box_w = g->box_w;
   10eea:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   10eee:	f9b8 7000 	ldrsh.w	r7, [r8]
    int32_t box_w = g->box_w;
   10ef2:	9313      	str	r3, [sp, #76]	; 0x4c
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   10ef4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
   10ef6:	fb06 f503 	mul.w	r5, r6, r3
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   10efa:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   10efe:	45ba      	cmp	sl, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   10f00:	4451      	add	r1, sl
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   10f02:	bfb4      	ite	lt
   10f04:	eba7 070a 	sublt.w	r7, r7, sl
   10f08:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   10f0a:	4299      	cmp	r1, r3
   10f0c:	bfd2      	itee	le
   10f0e:	9b13      	ldrle	r3, [sp, #76]	; 0x4c
   10f10:	3301      	addgt	r3, #1
   10f12:	eba3 030a 	subgt.w	r3, r3, sl
   10f16:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
   10f18:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
    int32_t box_h = g->box_h;
   10f1c:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	; 0xd8
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
   10f20:	4599      	cmp	r9, r3
   10f22:	bfac      	ite	ge
   10f24:	2300      	movge	r3, #0
   10f26:	eba3 0309 	sublt.w	r3, r3, r9
   10f2a:	9310      	str	r3, [sp, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   10f2c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
   10f30:	eb02 0109 	add.w	r1, r2, r9
   10f34:	4299      	cmp	r1, r3
   10f36:	bfc2      	ittt	gt
   10f38:	3301      	addgt	r3, #1
   10f3a:	eba3 0309 	subgt.w	r3, r3, r9
   10f3e:	9323      	strgt	r3, [sp, #140]	; 0x8c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   10f40:	fb07 f306 	mul.w	r3, r7, r6
   10f44:	9910      	ldr	r1, [sp, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   10f46:	bfd8      	it	le
   10f48:	9223      	strle	r2, [sp, #140]	; 0x8c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   10f4a:	fb01 3505 	mla	r5, r1, r5, r3
    map_p += bit_ofs >> 3;
   10f4e:	eb00 03d5 	add.w	r3, r0, r5, lsr #3
   10f52:	9314      	str	r3, [sp, #80]	; 0x50
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   10f54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   10f56:	f005 0507 	and.w	r5, r5, #7
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   10f5a:	4353      	muls	r3, r2
   10f5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   10f60:	bfa8      	it	ge
   10f62:	f44f 73a0 	movge.w	r3, #320	; 0x140
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   10f66:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   10f68:	9319      	str	r3, [sp, #100]	; 0x64
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   10f6a:	f001 fdd1 	bl	12b10 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
   10f6e:	eb0a 0307 	add.w	r3, sl, r7
   10f72:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
    fill_area.x2 = col_end  + pos_x - 1;
   10f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f78:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   10f7c:	449a      	add	sl, r3
    fill_area.y1 = row_start + pos_y;
   10f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
   10f80:	f8ad a0c4 	strh.w	sl, [sp, #196]	; 0xc4
    fill_area.y1 = row_start + pos_y;
   10f84:	4499      	add	r9, r3
   10f86:	fa0f f989 	sxth.w	r9, r9
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   10f8a:	901a      	str	r0, [sp, #104]	; 0x68
    fill_area.y1 = row_start + pos_y;
   10f8c:	f8ad 90c2 	strh.w	r9, [sp, #194]	; 0xc2
    fill_area.y2 = fill_area.y1;
   10f90:	f8ad 90c6 	strh.w	r9, [sp, #198]	; 0xc6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   10f94:	f000 fd84 	bl	11aa0 <lv_draw_mask_get_cnt>
    int32_t mask_p = 0;
   10f98:	f04f 0a00 	mov.w	sl, #0
    uint32_t col_bit_max = 8 - bpp;
   10f9c:	f1c6 0308 	rsb	r3, r6, #8
   10fa0:	9322      	str	r3, [sp, #136]	; 0x88
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   10fa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10fa6:	443b      	add	r3, r7
   10fa8:	1a9b      	subs	r3, r3, r2
   10faa:	4373      	muls	r3, r6
   10fac:	9328      	str	r3, [sp, #160]	; 0xa0
   10fae:	1bd3      	subs	r3, r2, r7
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   10fb0:	9027      	str	r0, [sp, #156]	; 0x9c
    for(row = row_start ; row < row_end; row++) {
   10fb2:	9324      	str	r3, [sp, #144]	; 0x90
   10fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10fb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   10fb8:	4293      	cmp	r3, r2
   10fba:	db42      	blt.n	11042 <lv_draw_label+0x74e>
    if(fill_area.y1 != fill_area.y2) {
   10fbc:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	; 0xc6
   10fc0:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
   10fc4:	429a      	cmp	r2, r3
   10fc6:	d00e      	beq.n	10fe6 <lv_draw_label+0x6f2>
        fill_area.y2--;
   10fc8:	3b01      	subs	r3, #1
   10fca:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
        _lv_blend_fill(clip_area, &fill_area,
   10fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10fd0:	27ff      	movs	r7, #255	; 0xff
   10fd2:	9302      	str	r3, [sp, #8]
   10fd4:	2302      	movs	r3, #2
   10fd6:	4640      	mov	r0, r8
   10fd8:	e9cd 3700 	strd	r3, r7, [sp]
   10fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10fde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10fe0:	a930      	add	r1, sp, #192	; 0xc0
   10fe2:	f00c fd59 	bl	1da98 <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
   10fe6:	981a      	ldr	r0, [sp, #104]	; 0x68
   10fe8:	f001 fdf4 	bl	12bd4 <_lv_mem_buf_release>
   10fec:	e6ea      	b.n	10dc4 <lv_draw_label+0x4d0>
            bitmask_init  = 0xFF;
   10fee:	22ff      	movs	r2, #255	; 0xff
            break;       /*No opa table, pixel value will be used directly*/
   10ff0:	2608      	movs	r6, #8
            bitmask_init  = 0xFF;
   10ff2:	9212      	str	r2, [sp, #72]	; 0x48
            shades = 256;
   10ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
            bpp_opa_table_p = _lv_bpp8_opa_table;
   10ff8:	4a5f      	ldr	r2, [pc, #380]	; (11178 <lv_draw_label+0x884>)
   10ffa:	e760      	b.n	10ebe <lv_draw_label+0x5ca>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
   10ffc:	4b5f      	ldr	r3, [pc, #380]	; (1117c <lv_draw_label+0x888>)
   10ffe:	f240 12e7 	movw	r2, #487	; 0x1e7
   11002:	9300      	str	r3, [sp, #0]
   11004:	4b5e      	ldr	r3, [pc, #376]	; (11180 <lv_draw_label+0x88c>)
   11006:	e0d5      	b.n	111b4 <lv_draw_label+0x8c0>
            bitmask_init  = 0xF0;
   11008:	22f0      	movs	r2, #240	; 0xf0
    if(bpp == 3) bpp = 4;
   1100a:	2604      	movs	r6, #4
            bitmask_init  = 0xF0;
   1100c:	9212      	str	r2, [sp, #72]	; 0x48
            shades = 16;
   1100e:	2310      	movs	r3, #16
            bpp_opa_table_p = _lv_bpp4_opa_table;
   11010:	4a5c      	ldr	r2, [pc, #368]	; (11184 <lv_draw_label+0x890>)
   11012:	e754      	b.n	10ebe <lv_draw_label+0x5ca>
            bitmask_init  = 0xC0;
   11014:	22c0      	movs	r2, #192	; 0xc0
    if(bpp == 3) bpp = 4;
   11016:	2602      	movs	r6, #2
            bitmask_init  = 0xC0;
   11018:	9212      	str	r2, [sp, #72]	; 0x48
            shades = 4;
   1101a:	2304      	movs	r3, #4
            bpp_opa_table_p = _lv_bpp2_opa_table;
   1101c:	4a5a      	ldr	r2, [pc, #360]	; (11188 <lv_draw_label+0x894>)
   1101e:	e74e      	b.n	10ebe <lv_draw_label+0x5ca>
   11020:	990d      	ldr	r1, [sp, #52]	; 0x34
   11022:	4d54      	ldr	r5, [pc, #336]	; (11174 <lv_draw_label+0x880>)
   11024:	440b      	add	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   11026:	f811 2b01 	ldrb.w	r2, [r1], #1
   1102a:	2aff      	cmp	r2, #255	; 0xff
   1102c:	bf17      	itett	ne
   1102e:	9f15      	ldrne	r7, [sp, #84]	; 0x54
   11030:	9a15      	ldreq	r2, [sp, #84]	; 0x54
   11032:	fb12 f207 	smulbbne	r2, r2, r7
   11036:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
   11038:	428b      	cmp	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   1103a:	f805 2b01 	strb.w	r2, [r5], #1
            for(i = 0; i < shades; i++) {
   1103e:	d1f2      	bne.n	11026 <lv_draw_label+0x732>
   11040:	e74c      	b.n	10edc <lv_draw_label+0x5e8>
        bitmask = bitmask_init >> col_bit;
   11042:	9b12      	ldr	r3, [sp, #72]	; 0x48
        for(col = col_start; col < col_end; col++) {
   11044:	46be      	mov	lr, r7
        bitmask = bitmask_init >> col_bit;
   11046:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
   1104a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1104c:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
   11050:	eb03 090a 	add.w	r9, r3, sl
   11054:	4649      	mov	r1, r9
   11056:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11058:	4573      	cmp	r3, lr
   1105a:	dc3a      	bgt.n	110d2 <lv_draw_label+0x7de>
   1105c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1105e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11060:	4297      	cmp	r7, r2
   11062:	bfc8      	it	gt
   11064:	2300      	movgt	r3, #0
   11066:	9313      	str	r3, [sp, #76]	; 0x4c
   11068:	449a      	add	sl, r3
        if(other_mask_cnt) {
   1106a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1106c:	b1bb      	cbz	r3, 1109e <lv_draw_label+0x7aa>
   1106e:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
   11072:	f9bd 10c0 	ldrsh.w	r1, [sp, #192]	; 0xc0
   11076:	3301      	adds	r3, #1
   11078:	1a5b      	subs	r3, r3, r1
   1107a:	4648      	mov	r0, r9
   1107c:	f9bd 20c6 	ldrsh.w	r2, [sp, #198]	; 0xc6
   11080:	b21b      	sxth	r3, r3
   11082:	f000 fcc5 	bl	11a10 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   11086:	4601      	mov	r1, r0
   11088:	b948      	cbnz	r0, 1109e <lv_draw_label+0x7aa>
   1108a:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
   1108e:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
   11092:	3201      	adds	r2, #1
   11094:	1ad2      	subs	r2, r2, r3
    memset(dst, 0x00, len);
   11096:	4648      	mov	r0, r9
   11098:	b212      	sxth	r2, r2
   1109a:	f008 f8e0 	bl	1925e <memset>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
   1109e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   110a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   110a2:	4413      	add	r3, r2
   110a4:	4699      	mov	r9, r3
   110a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   110a8:	4499      	add	r9, r3
   110aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   110ac:	454b      	cmp	r3, r9
   110ae:	d92f      	bls.n	11110 <lv_draw_label+0x81c>
            fill_area.y2 ++;
   110b0:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
   110b4:	3301      	adds	r3, #1
   110b6:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
        col_bit += col_bit_row_ofs;
   110ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   110bc:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
   110be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   110c0:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   110c4:	9314      	str	r3, [sp, #80]	; 0x50
    for(row = row_start ; row < row_end; row++) {
   110c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
        col_bit = col_bit & 0x7;
   110c8:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
   110cc:	3301      	adds	r3, #1
   110ce:	9310      	str	r3, [sp, #64]	; 0x40
   110d0:	e770      	b.n	10fb4 <lv_draw_label+0x6c0>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
   110d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   110d4:	9822      	ldr	r0, [sp, #136]	; 0x88
   110d6:	781b      	ldrb	r3, [r3, #0]
   110d8:	eba0 0c05 	sub.w	ip, r0, r5
   110dc:	4013      	ands	r3, r2
   110de:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
   110e2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
   110e6:	bf18      	it	ne
   110e8:	980d      	ldrne	r0, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
   110ea:	f10e 0e01 	add.w	lr, lr, #1
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
   110ee:	bf18      	it	ne
   110f0:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
   110f2:	3101      	adds	r1, #1
   110f4:	f801 3c01 	strb.w	r3, [r1, #-1]
            if(col_bit < col_bit_max) {
   110f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   110fa:	42ab      	cmp	r3, r5
                map_p++;
   110fc:	bf9f      	itttt	ls
   110fe:	9b14      	ldrls	r3, [sp, #80]	; 0x50
                col_bit = 0;
   11100:	2500      	movls	r5, #0
                map_p++;
   11102:	3301      	addls	r3, #1
                bitmask = bitmask_init;
   11104:	9a12      	ldrls	r2, [sp, #72]	; 0x48
                col_bit += bpp;
   11106:	bf86      	itte	hi
   11108:	19ad      	addhi	r5, r5, r6
                bitmask = bitmask >> bpp;
   1110a:	40f2      	lsrhi	r2, r6
                map_p++;
   1110c:	9314      	strls	r3, [sp, #80]	; 0x50
        for(col = col_start; col < col_end; col++) {
   1110e:	e7a2      	b.n	11056 <lv_draw_label+0x762>
            _lv_blend_fill(clip_area, &fill_area,
   11110:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11112:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11116:	9302      	str	r3, [sp, #8]
   11118:	2302      	movs	r3, #2
   1111a:	4640      	mov	r0, r8
   1111c:	e9cd 3c00 	strd	r3, ip, [sp]
   11120:	9a16      	ldr	r2, [sp, #88]	; 0x58
   11122:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11124:	a930      	add	r1, sp, #192	; 0xc0
   11126:	f00c fcb7 	bl	1da98 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1112a:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
            mask_p = 0;
   1112e:	f04f 0a00 	mov.w	sl, #0
            fill_area.y1 = fill_area.y2 + 1;
   11132:	3301      	adds	r3, #1
   11134:	b21b      	sxth	r3, r3
   11136:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
            fill_area.y2 = fill_area.y1;
   1113a:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            mask_p = 0;
   1113e:	e7bc      	b.n	110ba <lv_draw_label+0x7c6>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   11140:	071a      	lsls	r2, r3, #28
   11142:	f57f ad8c 	bpl.w	10c5e <lv_draw_label+0x36a>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   11146:	9300      	str	r3, [sp, #0]
   11148:	465a      	mov	r2, fp
   1114a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   1114e:	4638      	mov	r0, r7
   11150:	f001 ff24 	bl	12f9c <_lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   11154:	9b06      	ldr	r3, [sp, #24]
   11156:	889b      	ldrh	r3, [r3, #4]
   11158:	441d      	add	r5, r3
   1115a:	9b06      	ldr	r3, [sp, #24]
   1115c:	3501      	adds	r5, #1
   1115e:	881b      	ldrh	r3, [r3, #0]
   11160:	1aed      	subs	r5, r5, r3
   11162:	1a2d      	subs	r5, r5, r0
   11164:	e57a      	b.n	10c5c <lv_draw_label+0x368>
   11166:	bf00      	nop
   11168:	00027440 	.word	0x00027440
   1116c:	2002a15d 	.word	0x2002a15d
   11170:	20025d30 	.word	0x20025d30
   11174:	2002a05d 	.word	0x2002a05d
   11178:	00027456 	.word	0x00027456
   1117c:	000273f0 	.word	0x000273f0
   11180:	0002741b 	.word	0x0002741b
   11184:	00027446 	.word	0x00027446
   11188:	00027442 	.word	0x00027442
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
   1118c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   11190:	462a      	mov	r2, r5
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
   11192:	9321      	str	r3, [sp, #132]	; 0x84
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   11194:	4658      	mov	r0, fp
   11196:	2300      	movs	r3, #0
   11198:	a935      	add	r1, sp, #212	; 0xd4
   1119a:	f010 fb37 	bl	2180c <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
   1119e:	2800      	cmp	r0, #0
   111a0:	f47f ae25 	bne.w	10dee <lv_draw_label+0x4fa>
        if(letter >= 0x20) {
   111a4:	2d1f      	cmp	r5, #31
   111a6:	f67f ae0d 	bls.w	10dc4 <lv_draw_label+0x4d0>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found");
   111aa:	f240 12a3 	movw	r2, #419	; 0x1a3
   111ae:	4b04      	ldr	r3, [pc, #16]	; (111c0 <lv_draw_label+0x8cc>)
   111b0:	9300      	str	r3, [sp, #0]
   111b2:	4b04      	ldr	r3, [pc, #16]	; (111c4 <lv_draw_label+0x8d0>)
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   111b4:	2002      	movs	r0, #2
   111b6:	4904      	ldr	r1, [pc, #16]	; (111c8 <lv_draw_label+0x8d4>)
   111b8:	f001 fc00 	bl	129bc <_lv_log_add>
#endif
}
   111bc:	e602      	b.n	10dc4 <lv_draw_label+0x4d0>
   111be:	bf00      	nop
   111c0:	0002734d 	.word	0x0002734d
   111c4:	0002740c 	.word	0x0002740c
   111c8:	00027310 	.word	0x00027310

000111cc <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
   111cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111d0:	b0cf      	sub	sp, #316	; 0x13c
   111d2:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
   111d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
{
   111d8:	469b      	mov	fp, r3
   111da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if(dsc->width == 0) return;
   111de:	2a00      	cmp	r2, #0
   111e0:	f000 80e4 	beq.w	113ac <lv_draw_line+0x1e0>
    if(dsc->opa <= LV_OPA_MIN) return;
   111e4:	7a9b      	ldrb	r3, [r3, #10]
   111e6:	2b02      	cmp	r3, #2
   111e8:	f240 80e0 	bls.w	113ac <lv_draw_line+0x1e0>

    if(point1->x == point2->x && point1->y == point2->y) return;
   111ec:	9b05      	ldr	r3, [sp, #20]
   111ee:	f9b0 1000 	ldrsh.w	r1, [r0]
   111f2:	f9b3 5000 	ldrsh.w	r5, [r3]
   111f6:	9b05      	ldr	r3, [sp, #20]
   111f8:	42a9      	cmp	r1, r5
   111fa:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   111fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   11202:	d102      	bne.n	1120a <lv_draw_line+0x3e>
   11204:	42a3      	cmp	r3, r4
   11206:	f000 80d1 	beq.w	113ac <lv_draw_line+0x1e0>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1120a:	42a9      	cmp	r1, r5
   1120c:	460e      	mov	r6, r1
   1120e:	bfa8      	it	ge
   11210:	462e      	movge	r6, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   11212:	42a9      	cmp	r1, r5
   11214:	bfb8      	it	lt
   11216:	4629      	movlt	r1, r5
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   11218:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1121c:	42a3      	cmp	r3, r4
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1121e:	eb01 0162 	add.w	r1, r1, r2, asr #1
   11222:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   11226:	4619      	mov	r1, r3
   11228:	bfa8      	it	ge
   1122a:	4621      	movge	r1, r4
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1122c:	42a3      	cmp	r3, r4
   1122e:	bfb8      	it	lt
   11230:	4623      	movlt	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   11232:	1050      	asrs	r0, r2, #1
   11234:	4240      	negs	r0, r0
   11236:	fa06 f680 	sxtah	r6, r6, r0
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1123a:	fa01 f080 	sxtah	r0, r1, r0

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1123e:	a90d      	add	r1, sp, #52	; 0x34
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   11240:	eb03 0362 	add.w	r3, r3, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   11244:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   11248:	9a06      	ldr	r2, [sp, #24]
   1124a:	4608      	mov	r0, r1
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1124c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   11250:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   11254:	f00f fed6 	bl	21004 <_lv_area_intersect>
    if(!is_common) return;
   11258:	2800      	cmp	r0, #0
   1125a:	f000 80a7 	beq.w	113ac <lv_draw_line+0x1e0>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
   1125e:	9b04      	ldr	r3, [sp, #16]
   11260:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   11264:	9b05      	ldr	r3, [sp, #20]
   11266:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   1126a:	45c1      	cmp	r9, r8
   1126c:	f040 813b 	bne.w	114e6 <lv_draw_line+0x31a>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
   11270:	f89b 500a 	ldrb.w	r5, [fp, #10]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   11274:	f7fe fee6 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   11278:	f00f fe48 	bl	20f0c <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
   1127c:	f9bb 6004 	ldrsh.w	r6, [fp, #4]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   11280:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
    int32_t w = dsc->width - 1;
   11284:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   11286:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1128a:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   1128c:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   11290:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   11294:	b124      	cbz	r4, 112a0 <lv_draw_line+0xd4>
   11296:	f9bb 4006 	ldrsh.w	r4, [fp, #6]
   1129a:	3c00      	subs	r4, #0
   1129c:	bf18      	it	ne
   1129e:	2401      	movne	r4, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   112a0:	f000 fbfe 	bl	11aa0 <lv_draw_mask_get_cnt>
   112a4:	2800      	cmp	r0, #0
   112a6:	f040 8084 	bne.w	113b2 <lv_draw_line+0x1e6>
    else if(dashed) simple_mode = false;
   112aa:	f084 0201 	eor.w	r2, r4, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   112ae:	9b05      	ldr	r3, [sp, #20]
   112b0:	9904      	ldr	r1, [sp, #16]
   112b2:	f9b3 3000 	ldrsh.w	r3, [r3]
   112b6:	f9b1 1000 	ldrsh.w	r1, [r1]
   112ba:	4618      	mov	r0, r3
   112bc:	428b      	cmp	r3, r1
   112be:	bfa8      	it	ge
   112c0:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
   112c2:	428b      	cmp	r3, r1
   112c4:	bfb8      	it	lt
   112c6:	460b      	movlt	r3, r1
   112c8:	3b01      	subs	r3, #1
   112ca:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    draw_area.y1 = point1->y - w_half1;
   112ce:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   112d0:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
   112d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   112d8:	1b9e      	subs	r6, r3, r6
    draw_area.y2 = point1->y + w_half0;
   112da:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
   112dc:	f8ad 60a6 	strh.w	r6, [sp, #166]	; 0xa6
    draw_area.y2 = point1->y + w_half0;
   112e0:	f8ad 80aa 	strh.w	r8, [sp, #170]	; 0xaa

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
   112e4:	2a00      	cmp	r2, #0
   112e6:	d066      	beq.n	113b6 <lv_draw_line+0x1ea>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
   112e8:	f89b 300b 	ldrb.w	r3, [fp, #11]
        _lv_blend_fill(clip, &draw_area,
   112ec:	f003 0303 	and.w	r3, r3, #3
   112f0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
   112f4:	2301      	movs	r3, #1
   112f6:	f8db 2000 	ldr.w	r2, [fp]
   112fa:	9300      	str	r3, [sp, #0]
   112fc:	a929      	add	r1, sp, #164	; 0xa4
   112fe:	2300      	movs	r3, #0
   11300:	a80d      	add	r0, sp, #52	; 0x34
   11302:	f00c fbc9 	bl	1da98 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
   11306:	f89b 300b 	ldrb.w	r3, [fp, #11]
   1130a:	f013 0f0c 	tst.w	r3, #12
   1130e:	d04d      	beq.n	113ac <lv_draw_line+0x1e0>
        lv_draw_rect_dsc_init(&cir_dsc);
   11310:	a834      	add	r0, sp, #208	; 0xd0
   11312:	f000 fc9b 	bl	11c4c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
   11316:	f8db 3000 	ldr.w	r3, [fp]
        int32_t r = (dsc->width >> 1);
   1131a:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
        cir_dsc.bg_color = dsc->color;
   1131e:	9335      	str	r3, [sp, #212]	; 0xd4
        cir_dsc.radius = LV_RADIUS_CIRCLE;
   11320:	f647 73ff 	movw	r3, #32767	; 0x7fff
        int32_t r = (dsc->width >> 1);
   11324:	106c      	asrs	r4, r5, #1
   11326:	43ed      	mvns	r5, r5
        cir_dsc.radius = LV_RADIUS_CIRCLE;
   11328:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
        cir_dsc.bg_opa = dsc->opa;
   1132c:	f89b 300a 	ldrb.w	r3, [fp, #10]
   11330:	f005 0501 	and.w	r5, r5, #1
   11334:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
        if(dsc->round_start) {
   11338:	f89b 300b 	ldrb.w	r3, [fp, #11]
   1133c:	075a      	lsls	r2, r3, #29
   1133e:	d518      	bpl.n	11372 <lv_draw_line+0x1a6>
            cir_area.x1 = point1->x - r;
   11340:	9b04      	ldr	r3, [sp, #16]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   11342:	a829      	add	r0, sp, #164	; 0xa4
            cir_area.x1 = point1->x - r;
   11344:	f9b3 2000 	ldrsh.w	r2, [r3]
   11348:	1b13      	subs	r3, r2, r4
   1134a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            cir_area.y1 = point1->y - r;
   1134e:	9b04      	ldr	r3, [sp, #16]
            cir_area.x2 = point1->x + r - r_corr;
   11350:	4422      	add	r2, r4
            cir_area.y1 = point1->y - r;
   11352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            cir_area.x2 = point1->x + r - r_corr;
   11356:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point1->y - r;
   11358:	1b19      	subs	r1, r3, r4
            cir_area.y2 = point1->y + r - r_corr ;
   1135a:	4423      	add	r3, r4
            cir_area.y1 = point1->y - r;
   1135c:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
            cir_area.x2 = point1->x + r - r_corr;
   11360:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
            cir_area.y2 = point1->y + r - r_corr ;
   11364:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   11366:	9906      	ldr	r1, [sp, #24]
   11368:	aa34      	add	r2, sp, #208	; 0xd0
            cir_area.y2 = point1->y + r - r_corr ;
   1136a:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1136e:	f00e f8d6 	bl	1f51e <lv_draw_rect>
        if(dsc->round_end) {
   11372:	f89b 300b 	ldrb.w	r3, [fp, #11]
   11376:	071b      	lsls	r3, r3, #28
   11378:	d518      	bpl.n	113ac <lv_draw_line+0x1e0>
            cir_area.x1 = point2->x - r;
   1137a:	9b05      	ldr	r3, [sp, #20]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1137c:	a829      	add	r0, sp, #164	; 0xa4
            cir_area.x1 = point2->x - r;
   1137e:	f9b3 3000 	ldrsh.w	r3, [r3]
   11382:	1b1a      	subs	r2, r3, r4
   11384:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y1 = point2->y - r;
   11388:	9a05      	ldr	r2, [sp, #20]
            cir_area.x2 = point2->x + r - r_corr;
   1138a:	4423      	add	r3, r4
            cir_area.y1 = point2->y - r;
   1138c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
   11390:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
   11392:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
   11394:	4414      	add	r4, r2
            cir_area.y1 = point2->y - r;
   11396:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
            cir_area.y2 = point2->y + r - r_corr ;
   1139a:	1b64      	subs	r4, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1139c:	9906      	ldr	r1, [sp, #24]
   1139e:	aa34      	add	r2, sp, #208	; 0xd0
            cir_area.x2 = point2->x + r - r_corr;
   113a0:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
            cir_area.y2 = point2->y + r - r_corr ;
   113a4:	f8ad 40aa 	strh.w	r4, [sp, #170]	; 0xaa
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   113a8:	f00e f8b9 	bl	1f51e <lv_draw_rect>
}
   113ac:	b04f      	add	sp, #316	; 0x13c
   113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   113b2:	2200      	movs	r2, #0
   113b4:	e77b      	b.n	112ae <lv_draw_line+0xe2>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   113b6:	aa29      	add	r2, sp, #164	; 0xa4
   113b8:	4610      	mov	r0, r2
   113ba:	a90d      	add	r1, sp, #52	; 0x34
   113bc:	f00f fe22 	bl	21004 <_lv_area_intersect>
        if(!is_common) return;
   113c0:	2800      	cmp	r0, #0
   113c2:	d0a0      	beq.n	11306 <lv_draw_line+0x13a>
        draw_area.y1 -= disp_area->y1;
   113c4:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
   113c8:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
        draw_area.x1 -= disp_area->x1;
   113cc:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
        draw_area.y1 -= disp_area->y1;
   113d0:	1b91      	subs	r1, r2, r6
   113d2:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
        draw_area.x2 -= disp_area->x1;
   113d6:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	; 0xa8
        draw_area.x1 -= disp_area->x1;
   113da:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
        draw_area.x2 -= disp_area->x1;
   113de:	eba1 0508 	sub.w	r5, r1, r8
   113e2:	f8ad 50a8 	strh.w	r5, [sp, #168]	; 0xa8
        draw_area.y2 -= disp_area->y1;
   113e6:	f8bd 50aa 	ldrh.w	r5, [sp, #170]	; 0xaa
        draw_area.x1 -= disp_area->x1;
   113ea:	eba0 0308 	sub.w	r3, r0, r8
        draw_area.y2 -= disp_area->y1;
   113ee:	1bad      	subs	r5, r5, r6
   113f0:	f8ad 50aa 	strh.w	r5, [sp, #170]	; 0xaa
   113f4:	1c4d      	adds	r5, r1, #1
        draw_area.x1 -= disp_area->x1;
   113f6:	b21b      	sxth	r3, r3
   113f8:	1a2d      	subs	r5, r5, r0
   113fa:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
   113fe:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   11400:	f8ad 00d0 	strh.w	r0, [sp, #208]	; 0xd0
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   11404:	f8ad 10d4 	strh.w	r1, [sp, #212]	; 0xd4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   11408:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        fill_area.y2 = fill_area.y1;
   1140c:	f8ad 20d6 	strh.w	r2, [sp, #214]	; 0xd6
        if(dashed) {
   11410:	b1dc      	cbz	r4, 1144a <lv_draw_line+0x27e>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
   11412:	4498      	add	r8, r3
   11414:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
   11418:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
   1141c:	4413      	add	r3, r2
   1141e:	fb98 f2f3 	sdiv	r2, r8, r3
   11422:	fb03 8812 	mls	r8, r3, r2, r8
   11426:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1142a:	4628      	mov	r0, r5
   1142c:	f001 fb70 	bl	12b10 <_lv_mem_buf_get>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   11430:	f04f 0a00 	mov.w	sl, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   11434:	4606      	mov	r6, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   11436:	f9bd 90a6 	ldrsh.w	r9, [sp, #166]	; 0xa6
   1143a:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
   1143e:	4599      	cmp	r9, r3
   11440:	dd05      	ble.n	1144e <lv_draw_line+0x282>
        _lv_mem_buf_release(mask_buf);
   11442:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
   11444:	f001 fbc6 	bl	12bd4 <_lv_mem_buf_release>
   11448:	e75d      	b.n	11306 <lv_draw_line+0x13a>
        lv_style_int_t dash_start = 0;
   1144a:	46a0      	mov	r8, r4
   1144c:	e7ed      	b.n	1142a <lv_draw_line+0x25e>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
    memset(dst, 0xFF, len);
   1144e:	462a      	mov	r2, r5
   11450:	21ff      	movs	r1, #255	; 0xff
   11452:	4630      	mov	r0, r6
   11454:	f007 ff03 	bl	1925e <memset>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   11458:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
   1145c:	8a7a      	ldrh	r2, [r7, #18]
   1145e:	8a39      	ldrh	r1, [r7, #16]
   11460:	444a      	add	r2, r9
   11462:	4419      	add	r1, r3
   11464:	b212      	sxth	r2, r2
   11466:	462b      	mov	r3, r5
   11468:	4630      	mov	r0, r6
   1146a:	b209      	sxth	r1, r1
   1146c:	f000 fad0 	bl	11a10 <lv_draw_mask_apply>
   11470:	4602      	mov	r2, r0
            if(dashed) {
   11472:	b18c      	cbz	r4, 11498 <lv_draw_line+0x2cc>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   11474:	b180      	cbz	r0, 11498 <lv_draw_line+0x2cc>
                    lv_style_int_t dash_cnt = dash_start;
   11476:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   11478:	2300      	movs	r3, #0
   1147a:	e00a      	b.n	11492 <lv_draw_line+0x2c6>
                        if(dash_cnt <= dsc->dash_width) {
   1147c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
   11480:	428a      	cmp	r2, r1
   11482:	db26      	blt.n	114d2 <lv_draw_line+0x306>
                            i += diff;
   11484:	4413      	add	r3, r2
   11486:	1a5b      	subs	r3, r3, r1
   11488:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1148a:	3301      	adds	r3, #1
   1148c:	3201      	adds	r2, #1
   1148e:	b21b      	sxth	r3, r3
   11490:	b211      	sxth	r1, r2
   11492:	429d      	cmp	r5, r3
   11494:	dcf2      	bgt.n	1147c <lv_draw_line+0x2b0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
   11496:	2202      	movs	r2, #2
                           dsc->blend_mode);
   11498:	f89b 300b 	ldrb.w	r3, [fp, #11]
            _lv_blend_fill(clip, &fill_area,
   1149c:	a934      	add	r1, sp, #208	; 0xd0
   1149e:	f003 0303 	and.w	r3, r3, #3
   114a2:	9302      	str	r3, [sp, #8]
   114a4:	f89b 300a 	ldrb.w	r3, [fp, #10]
   114a8:	a80d      	add	r0, sp, #52	; 0x34
   114aa:	e9cd 2300 	strd	r2, r3, [sp]
   114ae:	4633      	mov	r3, r6
   114b0:	f8db 2000 	ldr.w	r2, [fp]
   114b4:	f00c faf0 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   114b8:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   114bc:	f109 0901 	add.w	r9, r9, #1
            fill_area.y1++;
   114c0:	3301      	adds	r3, #1
   114c2:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
            fill_area.y2++;
   114c6:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
   114ca:	3301      	adds	r3, #1
   114cc:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   114d0:	e7b3      	b.n	1143a <lv_draw_line+0x26e>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   114d2:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
   114d6:	4402      	add	r2, r0
   114d8:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
   114da:	bfb6      	itet	lt
   114dc:	460a      	movlt	r2, r1
                            dash_cnt = 0;
   114de:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
   114e0:	f806 a003 	strblt.w	sl, [r6, r3]
   114e4:	e7d1      	b.n	1148a <lv_draw_line+0x2be>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
   114e6:	9b04      	ldr	r3, [sp, #16]
   114e8:	f9b3 7000 	ldrsh.w	r7, [r3]
   114ec:	9b05      	ldr	r3, [sp, #20]
   114ee:	f9b3 6000 	ldrsh.w	r6, [r3]
   114f2:	42b7      	cmp	r7, r6
   114f4:	f040 80c5 	bne.w	11682 <lv_draw_line+0x4b6>
    lv_opa_t opa = dsc->opa;
   114f8:	f89b 400a 	ldrb.w	r4, [fp, #10]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   114fc:	f7fe fda2 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   11500:	f00f fd04 	bl	20f0c <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
   11504:	f9bb 6004 	ldrsh.w	r6, [fp, #4]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   11508:	f9bb 5008 	ldrsh.w	r5, [fp, #8]
    int32_t w = dsc->width - 1;
   1150c:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1150e:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   11512:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   11514:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   11518:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1151c:	b125      	cbz	r5, 11528 <lv_draw_line+0x35c>
   1151e:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
   11522:	3d00      	subs	r5, #0
   11524:	bf18      	it	ne
   11526:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   11528:	f000 faba 	bl	11aa0 <lv_draw_mask_get_cnt>
   1152c:	bb20      	cbnz	r0, 11578 <lv_draw_line+0x3ac>
    else if(dashed) simple_mode = false;
   1152e:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
   11532:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   11534:	9904      	ldr	r1, [sp, #16]
    draw_area.x1 = point1->x - w_half1;
   11536:	f9b3 3000 	ldrsh.w	r3, [r3]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1153a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
   1153e:	1b9e      	subs	r6, r3, r6
    draw_area.x2 = point1->x + w_half0;
   11540:	4443      	add	r3, r8
   11542:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   11546:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
   11548:	f8ad 60a4 	strh.w	r6, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1154c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   11550:	428b      	cmp	r3, r1
   11552:	4618      	mov	r0, r3
   11554:	bfa8      	it	ge
   11556:	4608      	movge	r0, r1
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   11558:	428b      	cmp	r3, r1
   1155a:	bfb8      	it	lt
   1155c:	460b      	movlt	r3, r1
   1155e:	3b01      	subs	r3, #1
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   11560:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   11564:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    if(simple_mode) {
   11568:	b142      	cbz	r2, 1157c <lv_draw_line+0x3b0>
                       dsc->blend_mode);
   1156a:	f89b 300b 	ldrb.w	r3, [fp, #11]
        _lv_blend_fill(clip, &draw_area,
   1156e:	f003 0303 	and.w	r3, r3, #3
   11572:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11576:	e6bd      	b.n	112f4 <lv_draw_line+0x128>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   11578:	2200      	movs	r2, #0
   1157a:	e7da      	b.n	11532 <lv_draw_line+0x366>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   1157c:	aa29      	add	r2, sp, #164	; 0xa4
   1157e:	4610      	mov	r0, r2
   11580:	a90d      	add	r1, sp, #52	; 0x34
   11582:	f00f fd3f 	bl	21004 <_lv_area_intersect>
        if(!is_common) return;
   11586:	2800      	cmp	r0, #0
   11588:	f43f aebd 	beq.w	11306 <lv_draw_line+0x13a>
        draw_area.x1 -= vdb->area.x1;
   1158c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   11590:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
        draw_area.y1 -= vdb->area.y1;
   11594:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
        draw_area.x1 -= vdb->area.x1;
   11598:	1ac2      	subs	r2, r0, r3
   1159a:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
        draw_area.y1 -= vdb->area.y1;
   1159e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   115a2:	f8ad 00d0 	strh.w	r0, [sp, #208]	; 0xd0
        draw_area.y1 -= vdb->area.y1;
   115a6:	1b11      	subs	r1, r2, r4
   115a8:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
        draw_area.x2 -= vdb->area.x1;
   115ac:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	; 0xa8
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   115b0:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        draw_area.x2 -= vdb->area.x1;
   115b4:	1acb      	subs	r3, r1, r3
   115b6:	f101 0801 	add.w	r8, r1, #1
   115ba:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
   115be:	eba8 0800 	sub.w	r8, r8, r0
        draw_area.y2 -= vdb->area.y1;
   115c2:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
   115c6:	fa0f f888 	sxth.w	r8, r8
   115ca:	1b1b      	subs	r3, r3, r4
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   115cc:	4640      	mov	r0, r8
        draw_area.y2 -= vdb->area.y1;
   115ce:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   115d2:	f8ad 10d4 	strh.w	r1, [sp, #212]	; 0xd4
        fill_area.y2 = fill_area.y1;
   115d6:	f8ad 20d6 	strh.w	r2, [sp, #214]	; 0xd6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   115da:	f001 fa99 	bl	12b10 <_lv_mem_buf_get>
   115de:	f9bd 60a6 	ldrsh.w	r6, [sp, #166]	; 0xa6
   115e2:	4681      	mov	r9, r0
        if(dashed) {
   115e4:	b195      	cbz	r5, 1160c <lv_draw_line+0x440>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
   115e6:	f9bb 4006 	ldrsh.w	r4, [fp, #6]
   115ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
   115ee:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
   115f2:	4432      	add	r2, r6
   115f4:	4423      	add	r3, r4
   115f6:	fb92 f4f3 	sdiv	r4, r2, r3
   115fa:	fb03 2414 	mls	r4, r3, r4, r2
   115fe:	b224      	sxth	r4, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   11600:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
   11604:	429e      	cmp	r6, r3
   11606:	dd03      	ble.n	11610 <lv_draw_line+0x444>
        _lv_mem_buf_release(mask_buf);
   11608:	4648      	mov	r0, r9
   1160a:	e71b      	b.n	11444 <lv_draw_line+0x278>
        lv_style_int_t dash_start = 0;
   1160c:	462c      	mov	r4, r5
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1160e:	e7f7      	b.n	11600 <lv_draw_line+0x434>
   11610:	4642      	mov	r2, r8
   11612:	21ff      	movs	r1, #255	; 0xff
   11614:	4648      	mov	r0, r9
   11616:	f007 fe22 	bl	1925e <memset>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   1161a:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
   1161e:	8a7a      	ldrh	r2, [r7, #18]
   11620:	8a39      	ldrh	r1, [r7, #16]
   11622:	4432      	add	r2, r6
   11624:	4419      	add	r1, r3
   11626:	4648      	mov	r0, r9
   11628:	4643      	mov	r3, r8
   1162a:	b212      	sxth	r2, r2
   1162c:	b209      	sxth	r1, r1
   1162e:	f000 f9ef 	bl	11a10 <lv_draw_mask_apply>
            if(dashed) {
   11632:	b16d      	cbz	r5, 11650 <lv_draw_line+0x484>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   11634:	b150      	cbz	r0, 1164c <lv_draw_line+0x480>
                    if(dash_cnt > dsc->dash_width) {
   11636:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   1163a:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
   1163e:	42a2      	cmp	r2, r4
   11640:	bfb8      	it	lt
   11642:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   11644:	4413      	add	r3, r2
                        dash_cnt = 0;
   11646:	429c      	cmp	r4, r3
   11648:	bfa8      	it	ge
   1164a:	2400      	movge	r4, #0
                dash_cnt ++;
   1164c:	3401      	adds	r4, #1
   1164e:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   11650:	2300      	movs	r3, #0
   11652:	9302      	str	r3, [sp, #8]
   11654:	f89b 300a 	ldrb.w	r3, [fp, #10]
   11658:	f8db 2000 	ldr.w	r2, [fp]
   1165c:	e9cd 0300 	strd	r0, r3, [sp]
   11660:	a934      	add	r1, sp, #208	; 0xd0
   11662:	464b      	mov	r3, r9
   11664:	a80d      	add	r0, sp, #52	; 0x34
   11666:	f00c fa17 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   1166a:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1166e:	3601      	adds	r6, #1
            fill_area.y1++;
   11670:	3301      	adds	r3, #1
   11672:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
            fill_area.y2++;
   11676:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
   1167a:	3301      	adds	r3, #1
   1167c:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   11680:	e7be      	b.n	11600 <lv_draw_line+0x434>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
   11682:	45c1      	cmp	r9, r8
   11684:	db05      	blt.n	11692 <lv_draw_line+0x4c6>
   11686:	464b      	mov	r3, r9
   11688:	46c1      	mov	r9, r8
   1168a:	4698      	mov	r8, r3
   1168c:	463b      	mov	r3, r7
   1168e:	4637      	mov	r7, r6
   11690:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
   11692:	1bf3      	subs	r3, r6, r7
    int32_t ydiff = p2.y - p1.y;
   11694:	eba8 0a09 	sub.w	sl, r8, r9
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   11698:	2b00      	cmp	r3, #0
    int32_t xdiff = p2.x - p1.x;
   1169a:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   1169c:	bfb8      	it	lt
   1169e:	425b      	neglt	r3, r3
   116a0:	f1ba 0f00 	cmp.w	sl, #0
   116a4:	bfb8      	it	lt
   116a6:	f1ca 0a00 	rsblt	sl, sl, #0
        181,
    };

    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   116aa:	4553      	cmp	r3, sl
   116ac:	bfcb      	itete	gt
   116ae:	ea4f 124a 	movgt.w	r2, sl, lsl #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   116b2:	015a      	lslle	r2, r3, #5
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   116b4:	fbb2 f2f3 	udivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   116b8:	fbb2 f2fa 	udivle	r2, r2, sl

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   116bc:	49c0      	ldr	r1, [pc, #768]	; (119c0 <lv_draw_line+0x7f4>)
    int32_t w = dsc->width;
   116be:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   116c2:	5c89      	ldrb	r1, [r1, r2]
   116c4:	223f      	movs	r2, #63	; 0x3f
   116c6:	fb14 2401 	smlabb	r4, r4, r1, r2
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
   116ca:	f344 12cf 	sbfx	r2, r4, #7, #16
   116ce:	42be      	cmp	r6, r7
   116d0:	bfd4      	ite	le
   116d2:	ebc2 0106 	rsble	r1, r2, r6
   116d6:	ebc2 0107 	rsbgt	r1, r2, r7
   116da:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
   116de:	42be      	cmp	r6, r7
   116e0:	bfac      	ite	ge
   116e2:	1991      	addge	r1, r2, r6
   116e4:	19d1      	addlt	r1, r2, r7
   116e6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
   116ea:	45c8      	cmp	r8, r9
   116ec:	bfd4      	ite	le
   116ee:	ebc2 0108 	rsble	r1, r2, r8
   116f2:	ebc2 0109 	rsbgt	r1, r2, r9
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   116f6:	45c8      	cmp	r8, r9
   116f8:	bfac      	ite	ge
   116fa:	4442      	addge	r2, r8
   116fc:	444a      	addlt	r2, r9
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
   116fe:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   11702:	a90f      	add	r1, sp, #60	; 0x3c
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   11704:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   11708:	4608      	mov	r0, r1
   1170a:	aa0d      	add	r2, sp, #52	; 0x34
   1170c:	9307      	str	r3, [sp, #28]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1170e:	11e5      	asrs	r5, r4, #7
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   11710:	f00f fc78 	bl	21004 <_lv_area_intersect>
    if(is_common == false) return;
   11714:	2800      	cmp	r0, #0
   11716:	f43f adf6 	beq.w	11306 <lv_draw_line+0x13a>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
   1171a:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1171c:	f005 0501 	and.w	r5, r5, #1
   11720:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
   11724:	4553      	cmp	r3, sl
   11726:	b22d      	sxth	r5, r5
   11728:	f344 240f 	sbfx	r4, r4, #8, #16
   1172c:	f340 80ef 	ble.w	1190e <lv_draw_line+0x742>
        if(xdiff > 0) {
   11730:	eb09 0305 	add.w	r3, r9, r5
   11734:	b21b      	sxth	r3, r3
   11736:	9307      	str	r3, [sp, #28]
   11738:	1bf3      	subs	r3, r6, r7
   1173a:	2b00      	cmp	r3, #0
   1173c:	f04f 0300 	mov.w	r3, #0
   11740:	eba9 0a04 	sub.w	sl, r9, r4
   11744:	4445      	add	r5, r8
   11746:	eba8 0404 	sub.w	r4, r8, r4
   1174a:	b22d      	sxth	r5, r5
   1174c:	fa0f fa8a 	sxth.w	sl, sl
   11750:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   11752:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
   11754:	f340 80ce 	ble.w	118f4 <lv_draw_line+0x728>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   11758:	4633      	mov	r3, r6
   1175a:	4652      	mov	r2, sl
   1175c:	4639      	mov	r1, r7
   1175e:	9400      	str	r4, [sp, #0]
   11760:	a813      	add	r0, sp, #76	; 0x4c
   11762:	f000 f9ab 	bl	11abc <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   11766:	2301      	movs	r3, #1
   11768:	e9cd 5300 	strd	r5, r3, [sp]
   1176c:	4633      	mov	r3, r6
   1176e:	9a07      	ldr	r2, [sp, #28]
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   11770:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   11772:	a81e      	add	r0, sp, #120	; 0x78
   11774:	f000 f9a2 	bl	11abc <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   11778:	2100      	movs	r1, #0
   1177a:	a813      	add	r0, sp, #76	; 0x4c
   1177c:	f000 f922 	bl	119c4 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   11780:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   11782:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   11784:	a81e      	add	r0, sp, #120	; 0x78
   11786:	f000 f91d 	bl	119c4 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
   1178a:	f89b 400b 	ldrb.w	r4, [fp, #11]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1178e:	900a      	str	r0, [sp, #40]	; 0x28
    if(!dsc->raw_end) {
   11790:	f014 0410 	ands.w	r4, r4, #16
   11794:	f040 80cf 	bne.w	11936 <lv_draw_line+0x76a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   11798:	2103      	movs	r1, #3
   1179a:	1bf2      	subs	r2, r6, r7
   1179c:	eba9 0308 	sub.w	r3, r9, r8
   117a0:	b215      	sxth	r5, r2
   117a2:	fa09 f282 	sxtah	r2, r9, r2
   117a6:	fa0f fa83 	sxth.w	sl, r3
   117aa:	b212      	sxth	r2, r2
   117ac:	fa07 f383 	sxtah	r3, r7, r3
   117b0:	9101      	str	r1, [sp, #4]
   117b2:	9200      	str	r2, [sp, #0]
   117b4:	4639      	mov	r1, r7
   117b6:	464a      	mov	r2, r9
   117b8:	b21b      	sxth	r3, r3
   117ba:	a829      	add	r0, sp, #164	; 0xa4
   117bc:	f000 f97e 	bl	11abc <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   117c0:	2202      	movs	r2, #2
   117c2:	4445      	add	r5, r8
   117c4:	eb06 030a 	add.w	r3, r6, sl
   117c8:	b22d      	sxth	r5, r5
   117ca:	b21b      	sxth	r3, r3
   117cc:	4631      	mov	r1, r6
   117ce:	9201      	str	r2, [sp, #4]
   117d0:	a834      	add	r0, sp, #208	; 0xd0
   117d2:	4642      	mov	r2, r8
   117d4:	9500      	str	r5, [sp, #0]
   117d6:	f000 f971 	bl	11abc <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   117da:	4621      	mov	r1, r4
   117dc:	a829      	add	r0, sp, #164	; 0xa4
   117de:	f000 f8f1 	bl	119c4 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   117e2:	4621      	mov	r1, r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   117e4:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   117e6:	a834      	add	r0, sp, #208	; 0xd0
   117e8:	f000 f8ec 	bl	119c4 <lv_draw_mask_add>
   117ec:	4680      	mov	r8, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   117ee:	f7fe fc29 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   117f2:	f00f fb8b 	bl	20f0c <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
   117f6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
   117fa:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   117fe:	4604      	mov	r4, r0
    draw_area.x1 -= disp_area->x1;
   11800:	1a8b      	subs	r3, r1, r2
    draw_area.y1 -= disp_area->y1;
   11802:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
   11806:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y1 -= disp_area->y1;
   1180a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   1180e:	1a1b      	subs	r3, r3, r0
   11810:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    draw_area.x2 -= disp_area->x1;
   11814:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   11818:	1a9a      	subs	r2, r3, r2
   1181a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    draw_area.y2 -= disp_area->y1;
   1181e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
   11822:	f103 0901 	add.w	r9, r3, #1
   11826:	1a12      	subs	r2, r2, r0
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   11828:	a80f      	add	r0, sp, #60	; 0x3c
   1182a:	eba9 0901 	sub.w	r9, r9, r1
    draw_area.y2 -= disp_area->y1;
   1182e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   11832:	f00f fbd9 	bl	20fe8 <lv_area_get_size>
   11836:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1183a:	fa0f f989 	sxth.w	r9, r9
   1183e:	d27f      	bcs.n	11940 <lv_draw_line+0x774>
   11840:	a80f      	add	r0, sp, #60	; 0x3c
   11842:	f00f fbd1 	bl	20fe8 <lv_area_get_size>
   11846:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   11848:	4630      	mov	r0, r6
   1184a:	f001 f961 	bl	12b10 <_lv_mem_buf_get>
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
   1184e:	2700      	movs	r7, #0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
   11850:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   11854:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   11858:	21ff      	movs	r1, #255	; 0xff
   1185a:	441a      	add	r2, r3
   1185c:	b212      	sxth	r2, r2
   1185e:	9207      	str	r2, [sp, #28]
   11860:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    fill_area.x2 = draw_area.x2 + disp_area->x1;
   11864:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   11868:	4605      	mov	r5, r0
    fill_area.x2 = draw_area.x2 + disp_area->x1;
   1186a:	4413      	add	r3, r2
   1186c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   11870:	8a62      	ldrh	r2, [r4, #18]
   11872:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   11876:	4413      	add	r3, r2
   11878:	b21b      	sxth	r3, r3
   1187a:	4632      	mov	r2, r6
   1187c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    fill_area.y2 = fill_area.y1;
   11880:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   11884:	f007 fceb 	bl	1925e <memset>

    _lv_memset_ff(mask_buf, mask_buf_size);
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   11888:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   1188c:	f9b4 a012 	ldrsh.w	sl, [r4, #18]
   11890:	449a      	add	sl, r3
   11892:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   11896:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   1189a:	4413      	add	r3, r2
   1189c:	459a      	cmp	sl, r3
   1189e:	dd52      	ble.n	11946 <lv_draw_line+0x77a>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
   118a0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   118a4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
   118a8:	429a      	cmp	r2, r3
   118aa:	d013      	beq.n	118d4 <lv_draw_line+0x708>
        fill_area.y2--;
   118ac:	3b01      	subs	r3, #1
   118ae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
   118b2:	f89b 300b 	ldrb.w	r3, [fp, #11]
        _lv_blend_fill(&fill_area, clip,
   118b6:	f8db 2000 	ldr.w	r2, [fp]
   118ba:	f003 0303 	and.w	r3, r3, #3
   118be:	9302      	str	r3, [sp, #8]
   118c0:	f89b 300a 	ldrb.w	r3, [fp, #10]
   118c4:	a90d      	add	r1, sp, #52	; 0x34
   118c6:	9301      	str	r3, [sp, #4]
   118c8:	2302      	movs	r3, #2
   118ca:	a811      	add	r0, sp, #68	; 0x44
   118cc:	9300      	str	r3, [sp, #0]
   118ce:	462b      	mov	r3, r5
   118d0:	f00c f8e2 	bl	1da98 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
   118d4:	4628      	mov	r0, r5
   118d6:	f001 f97d 	bl	12bd4 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
   118da:	9809      	ldr	r0, [sp, #36]	; 0x24
   118dc:	f000 f8ba 	bl	11a54 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
   118e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   118e2:	f000 f8b7 	bl	11a54 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
   118e6:	9808      	ldr	r0, [sp, #32]
   118e8:	f000 f8b4 	bl	11a54 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
   118ec:	4640      	mov	r0, r8
   118ee:	f000 f8b1 	bl	11a54 <lv_draw_mask_remove_id>
   118f2:	e508      	b.n	11306 <lv_draw_line+0x13a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   118f4:	4633      	mov	r3, r6
   118f6:	9a07      	ldr	r2, [sp, #28]
   118f8:	4639      	mov	r1, r7
   118fa:	9500      	str	r5, [sp, #0]
   118fc:	a813      	add	r0, sp, #76	; 0x4c
   118fe:	f000 f8dd 	bl	11abc <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   11902:	2301      	movs	r3, #1
   11904:	4652      	mov	r2, sl
   11906:	e9cd 4300 	strd	r4, r3, [sp]
   1190a:	4633      	mov	r3, r6
   1190c:	e730      	b.n	11770 <lv_draw_line+0x5a4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
   1190e:	2200      	movs	r2, #0
   11910:	1973      	adds	r3, r6, r5
   11912:	443d      	add	r5, r7
   11914:	e9cd 8200 	strd	r8, r2, [sp]
   11918:	b21b      	sxth	r3, r3
   1191a:	464a      	mov	r2, r9
   1191c:	b229      	sxth	r1, r5
   1191e:	a813      	add	r0, sp, #76	; 0x4c
   11920:	f000 f8cc 	bl	11abc <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   11924:	2201      	movs	r2, #1
   11926:	1b33      	subs	r3, r6, r4
   11928:	1b39      	subs	r1, r7, r4
   1192a:	e9cd 8200 	strd	r8, r2, [sp]
   1192e:	b21b      	sxth	r3, r3
   11930:	464a      	mov	r2, r9
   11932:	b209      	sxth	r1, r1
   11934:	e71d      	b.n	11772 <lv_draw_line+0x5a6>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
   11936:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
   1193a:	f8cd 8020 	str.w	r8, [sp, #32]
   1193e:	e756      	b.n	117ee <lv_draw_line+0x622>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   11940:	f44f 76a0 	mov.w	r6, #320	; 0x140
   11944:	e780      	b.n	11848 <lv_draw_line+0x67c>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
   11946:	19eb      	adds	r3, r5, r7
   11948:	9907      	ldr	r1, [sp, #28]
   1194a:	930b      	str	r3, [sp, #44]	; 0x2c
   1194c:	fa0f f28a 	sxth.w	r2, sl
   11950:	464b      	mov	r3, r9
   11952:	19e8      	adds	r0, r5, r7
   11954:	f000 f85c 	bl	11a10 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   11958:	4601      	mov	r1, r0
   1195a:	b918      	cbnz	r0, 11964 <lv_draw_line+0x798>
    memset(dst, 0x00, len);
   1195c:	464a      	mov	r2, r9
   1195e:	19e8      	adds	r0, r5, r7
   11960:	f007 fc7d 	bl	1925e <memset>
        mask_p += draw_area_w;
   11964:	444f      	add	r7, r9
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
   11966:	eb07 0309 	add.w	r3, r7, r9
   1196a:	429e      	cmp	r6, r3
   1196c:	d907      	bls.n	1197e <lv_draw_line+0x7b2>
            fill_area.y2 ++;
   1196e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   11972:	3301      	adds	r3, #1
   11974:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   11978:	f10a 0a01 	add.w	sl, sl, #1
   1197c:	e789      	b.n	11892 <lv_draw_line+0x6c6>
                           dsc->blend_mode);
   1197e:	f89b 300b 	ldrb.w	r3, [fp, #11]
            _lv_blend_fill(&fill_area, clip,
   11982:	f8db 2000 	ldr.w	r2, [fp]
   11986:	f003 0303 	and.w	r3, r3, #3
   1198a:	9302      	str	r3, [sp, #8]
   1198c:	f89b 300a 	ldrb.w	r3, [fp, #10]
   11990:	a90d      	add	r1, sp, #52	; 0x34
   11992:	9301      	str	r3, [sp, #4]
   11994:	2302      	movs	r3, #2
   11996:	a811      	add	r0, sp, #68	; 0x44
   11998:	9300      	str	r3, [sp, #0]
   1199a:	462b      	mov	r3, r5
   1199c:	f00c f87c 	bl	1da98 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   119a0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    memset(dst, 0xFF, len);
   119a4:	4632      	mov	r2, r6
   119a6:	3301      	adds	r3, #1
   119a8:	b21b      	sxth	r3, r3
   119aa:	21ff      	movs	r1, #255	; 0xff
   119ac:	4628      	mov	r0, r5
   119ae:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area.y2 = fill_area.y1;
   119b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            mask_p = 0;
   119b6:	2700      	movs	r7, #0
   119b8:	f007 fc51 	bl	1925e <memset>
}
   119bc:	e7dc      	b.n	11978 <lv_draw_line+0x7ac>
   119be:	bf00      	nop
   119c0:	00027556 	.word	0x00027556

000119c4 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
   119c4:	2300      	movs	r3, #0
   119c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   119c8:	4c0d      	ldr	r4, [pc, #52]	; (11a00 <lv_draw_mask_add+0x3c>)
   119ca:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
   119ce:	b2da      	uxtb	r2, r3
   119d0:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
   119d4:	b176      	cbz	r6, 119f4 <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   119d6:	3301      	adds	r3, #1
   119d8:	2b10      	cmp	r3, #16
   119da:	d1f6      	bne.n	119ca <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
   119dc:	4b09      	ldr	r3, [pc, #36]	; (11a04 <lv_draw_mask_add+0x40>)
   119de:	2002      	movs	r0, #2
   119e0:	9300      	str	r3, [sp, #0]
   119e2:	2253      	movs	r2, #83	; 0x53
   119e4:	4b08      	ldr	r3, [pc, #32]	; (11a08 <lv_draw_mask_add+0x44>)
   119e6:	4909      	ldr	r1, [pc, #36]	; (11a0c <lv_draw_mask_add+0x48>)
   119e8:	f000 ffe8 	bl	129bc <_lv_log_add>
        return LV_MASK_ID_INV;
   119ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
   119f0:	b002      	add	sp, #8
   119f2:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
   119f4:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
   119f8:	6069      	str	r1, [r5, #4]
    return i;
   119fa:	b210      	sxth	r0, r2
   119fc:	e7f8      	b.n	119f0 <lv_draw_mask_add+0x2c>
   119fe:	bf00      	nop
   11a00:	20025d58 	.word	0x20025d58
   11a04:	000275b3 	.word	0x000275b3
   11a08:	000275d9 	.word	0x000275d9
   11a0c:	00027577 	.word	0x00027577

00011a10 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
   11a10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11a14:	4607      	mov	r7, r0
   11a16:	4688      	mov	r8, r1
   11a18:	4691      	mov	r9, r2
   11a1a:	469a      	mov	sl, r3
    bool changed = false;
   11a1c:	2500      	movs	r5, #0
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
   11a1e:	4e0c      	ldr	r6, [pc, #48]	; (11a50 <lv_draw_mask_apply+0x40>)

    while(m->param) {
   11a20:	6834      	ldr	r4, [r6, #0]
   11a22:	b934      	cbnz	r4, 11a32 <lv_draw_mask_apply+0x22>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
   11a24:	2d00      	cmp	r5, #0
   11a26:	bf14      	ite	ne
   11a28:	2002      	movne	r0, #2
   11a2a:	2001      	moveq	r0, #1
}
   11a2c:	b002      	add	sp, #8
   11a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
   11a32:	9400      	str	r4, [sp, #0]
   11a34:	4653      	mov	r3, sl
   11a36:	464a      	mov	r2, r9
   11a38:	4641      	mov	r1, r8
   11a3a:	4638      	mov	r0, r7
   11a3c:	6824      	ldr	r4, [r4, #0]
   11a3e:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
   11a40:	2800      	cmp	r0, #0
   11a42:	d0f3      	beq.n	11a2c <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
   11a44:	2802      	cmp	r0, #2
   11a46:	bf08      	it	eq
   11a48:	2501      	moveq	r5, #1
        m++;
   11a4a:	3608      	adds	r6, #8
   11a4c:	e7e8      	b.n	11a20 <lv_draw_mask_apply+0x10>
   11a4e:	bf00      	nop
   11a50:	20025d58 	.word	0x20025d58

00011a54 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
   11a54:	4603      	mov	r3, r0
   11a56:	2100      	movs	r1, #0
    void * p = NULL;

    if(id != LV_MASK_ID_INV) {
   11a58:	1c42      	adds	r2, r0, #1
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
   11a5a:	bf1f      	itttt	ne
   11a5c:	4a05      	ldrne	r2, [pc, #20]	; (11a74 <lv_draw_mask_remove_id+0x20>)
   11a5e:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
   11a62:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   11a66:	eb02 03c3 	addne.w	r3, r2, r3, lsl #3
   11a6a:	bf14      	ite	ne
   11a6c:	6059      	strne	r1, [r3, #4]
    void * p = NULL;
   11a6e:	4608      	moveq	r0, r1
    }

    return p;
}
   11a70:	4770      	bx	lr
   11a72:	bf00      	nop
   11a74:	20025d58 	.word	0x20025d58

00011a78 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
   11a78:	2200      	movs	r2, #0
   11a7a:	4601      	mov	r1, r0
   11a7c:	b530      	push	{r4, r5, lr}
    void * p = NULL;
   11a7e:	4610      	mov	r0, r2
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
   11a80:	4614      	mov	r4, r2
   11a82:	4b06      	ldr	r3, [pc, #24]	; (11a9c <lv_draw_mask_remove_custom+0x24>)
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
   11a84:	685d      	ldr	r5, [r3, #4]
   11a86:	3201      	adds	r2, #1
   11a88:	428d      	cmp	r5, r1
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
   11a8a:	bf04      	itt	eq
   11a8c:	6818      	ldreq	r0, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
   11a8e:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   11a92:	2a10      	cmp	r2, #16
   11a94:	f103 0308 	add.w	r3, r3, #8
   11a98:	d1f4      	bne.n	11a84 <lv_draw_mask_remove_custom+0xc>
        }
    }
    return p;
}
   11a9a:	bd30      	pop	{r4, r5, pc}
   11a9c:	20025d58 	.word	0x20025d58

00011aa0 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
   11aa0:	2300      	movs	r3, #0
    uint8_t cnt = 0;
   11aa2:	4618      	mov	r0, r3
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   11aa4:	4a04      	ldr	r2, [pc, #16]	; (11ab8 <lv_draw_mask_get_cnt+0x18>)
   11aa6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   11aaa:	b109      	cbz	r1, 11ab0 <lv_draw_mask_get_cnt+0x10>
   11aac:	3001      	adds	r0, #1
   11aae:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   11ab0:	3301      	adds	r3, #1
   11ab2:	2b10      	cmp	r3, #16
   11ab4:	d1f7      	bne.n	11aa6 <lv_draw_mask_get_cnt+0x6>
    }
    return cnt;
}
   11ab6:	4770      	bx	lr
   11ab8:	20025d58 	.word	0x20025d58

00011abc <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
   11abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ac0:	4615      	mov	r5, r2
   11ac2:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   11ac6:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   11ac8:	212c      	movs	r1, #44	; 0x2c
{
   11aca:	4604      	mov	r4, r0
   11acc:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   11ace:	f00c ffbf 	bl	1ea50 <_lv_memset_00>

    if(p1y > p2y) {
   11ad2:	4545      	cmp	r5, r8
   11ad4:	dd05      	ble.n	11ae2 <lv_draw_mask_line_points_init+0x26>
   11ad6:	462b      	mov	r3, r5
   11ad8:	4645      	mov	r5, r8
   11ada:	4698      	mov	r8, r3
   11adc:	4633      	mov	r3, r6
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
   11ade:	463e      	mov	r6, r7
        p2x = p1x;
   11ae0:	461f      	mov	r7, r3

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
   11ae2:	7c23      	ldrb	r3, [r4, #16]
   11ae4:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
   11ae8:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
   11aea:	f362 0301 	bfi	r3, r2, #0, #2
   11aee:	7423      	strb	r3, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   11af0:	eba8 0205 	sub.w	r2, r8, r5
   11af4:	1bbb      	subs	r3, r7, r6
   11af6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
   11afa:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   11afe:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
   11b02:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   11b06:	4288      	cmp	r0, r1
   11b08:	bfd4      	ite	le
   11b0a:	2000      	movle	r0, #0
   11b0c:	2001      	movgt	r0, #1
   11b0e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->origo.y = p1y;
   11b12:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   11b14:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
   11b18:	2000      	movs	r0, #0
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   11b1a:	4d29      	ldr	r5, [pc, #164]	; (11bc0 <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   11b1c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
   11b20:	07c9      	lsls	r1, r1, #31
    param->xy_steep = 0;
   11b22:	e9c4 0006 	strd	r0, r0, [r4, #24]
    param->cfg.p1.x = p1x;
   11b26:	8126      	strh	r6, [r4, #8]
    param->cfg.p2.x = p2x;
   11b28:	81a7      	strh	r7, [r4, #12]
    param->cfg.p2.y = p2y;
   11b2a:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->origo.x = p1x;
   11b2e:	8266      	strh	r6, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   11b30:	6025      	str	r5, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
   11b32:	7120      	strb	r0, [r4, #4]
    if(param->flat) {
   11b34:	d524      	bpl.n	11b80 <lv_draw_mask_line_points_init+0xc4>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
   11b36:	b133      	cbz	r3, 11b46 <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
   11b38:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   11b3c:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
   11b40:	4351      	muls	r1, r2
   11b42:	1289      	asrs	r1, r1, #10
   11b44:	61e1      	str	r1, [r4, #28]
        }

        if(dy) {
   11b46:	b132      	cbz	r2, 11b56 <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   11b48:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   11b4c:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
   11b50:	4353      	muls	r3, r2
   11b52:	129b      	asrs	r3, r3, #10
   11b54:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
   11b56:	69e3      	ldr	r3, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   11b58:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
   11b5a:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   11b5c:	f012 0203 	ands.w	r2, r2, #3
   11b60:	6a21      	ldr	r1, [r4, #32]
   11b62:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11b66:	d11d      	bne.n	11ba4 <lv_draw_mask_line_points_init+0xe8>
   11b68:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   11b6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
    if(param->steep < 0) param->spx = -param->spx;
   11b70:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
   11b72:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
   11b76:	bfb8      	it	lt
   11b78:	425b      	neglt	r3, r3
   11b7a:	6263      	str	r3, [r4, #36]	; 0x24
}
   11b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
   11b80:	b132      	cbz	r2, 11b90 <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   11b82:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   11b86:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
   11b8a:	4359      	muls	r1, r3
   11b8c:	1289      	asrs	r1, r1, #10
   11b8e:	61a1      	str	r1, [r4, #24]
        if(dx) {
   11b90:	b133      	cbz	r3, 11ba0 <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
   11b92:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   11b96:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
   11b9a:	435a      	muls	r2, r3
   11b9c:	1292      	asrs	r2, r2, #10
   11b9e:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
   11ba0:	69a3      	ldr	r3, [r4, #24]
   11ba2:	e7d9      	b.n	11b58 <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   11ba4:	2a01      	cmp	r2, #1
   11ba6:	d102      	bne.n	11bae <lv_draw_mask_line_points_init+0xf2>
   11ba8:	f043 0302 	orr.w	r3, r3, #2
   11bac:	e7de      	b.n	11b6c <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
   11bae:	2a02      	cmp	r2, #2
   11bb0:	d102      	bne.n	11bb8 <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
   11bb2:	2900      	cmp	r1, #0
   11bb4:	dcf8      	bgt.n	11ba8 <lv_draw_mask_line_points_init+0xec>
   11bb6:	e7d7      	b.n	11b68 <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
   11bb8:	2900      	cmp	r1, #0
   11bba:	dcd5      	bgt.n	11b68 <lv_draw_mask_line_points_init+0xac>
   11bbc:	e7f4      	b.n	11ba8 <lv_draw_mask_line_points_init+0xec>
   11bbe:	bf00      	nop
   11bc0:	0001ea75 	.word	0x0001ea75

00011bc4 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
   11bc4:	b570      	push	{r4, r5, r6, lr}
   11bc6:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11bc8:	88c8      	ldrh	r0, [r1, #6]
   11bca:	461e      	mov	r6, r3
   11bcc:	884b      	ldrh	r3, [r1, #2]
   11bce:	3001      	adds	r0, #1
   11bd0:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11bd2:	888b      	ldrh	r3, [r1, #4]
   11bd4:	4615      	mov	r5, r2
   11bd6:	880a      	ldrh	r2, [r1, #0]
   11bd8:	3301      	adds	r3, #1
   11bda:	1a9b      	subs	r3, r3, r2
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MATH_MIN(w, h);
   11bdc:	b200      	sxth	r0, r0
   11bde:	b21b      	sxth	r3, r3
   11be0:	4298      	cmp	r0, r3
   11be2:	bfa8      	it	ge
   11be4:	4618      	movge	r0, r3
    return memcpy(dst, src, len);
   11be6:	2208      	movs	r2, #8
    if(radius > short_side >> 1) radius = short_side >> 1;
   11be8:	1043      	asrs	r3, r0, #1
   11bea:	ebb5 0f60 	cmp.w	r5, r0, asr #1
   11bee:	eb04 0002 	add.w	r0, r4, r2
   11bf2:	bfc8      	it	gt
   11bf4:	b21d      	sxthgt	r5, r3
   11bf6:	f007 fb07 	bl	19208 <memcpy>

    lv_area_copy(&param->cfg.rect, rect);
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
   11bfa:	7ca3      	ldrb	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    param->y_prev = INT32_MIN;
    param->y_prev_x.f = 0;
    param->y_prev_x.i = 0;
   11bfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->cfg.outer = inv ? 1 : 0;
   11c00:	f366 0300 	bfi	r3, r6, #0, #1
   11c04:	74a3      	strb	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
   11c06:	4b04      	ldr	r3, [pc, #16]	; (11c18 <lv_draw_mask_radius_init+0x54>)
    param->cfg.radius = radius;
   11c08:	8225      	strh	r5, [r4, #16]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
   11c0a:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   11c0c:	2302      	movs	r3, #2
   11c0e:	7123      	strb	r3, [r4, #4]
    param->y_prev_x.i = 0;
   11c10:	2300      	movs	r3, #0
   11c12:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
   11c16:	bd70      	pop	{r4, r5, r6, pc}
   11c18:	0001ee8d 	.word	0x0001ee8d

00011c1c <lv_draw_mask_fade_init>:
 * @param y_bottom at which coordinate reach `opa_bottom`.
 */
void lv_draw_mask_fade_init(lv_draw_mask_fade_param_t * param, const lv_area_t * coords, lv_opa_t opa_top,
                            lv_coord_t y_top,
                            lv_opa_t opa_bottom, lv_coord_t y_bottom)
{
   11c1c:	b570      	push	{r4, r5, r6, lr}
   11c1e:	4616      	mov	r6, r2
   11c20:	2208      	movs	r2, #8
   11c22:	4604      	mov	r4, r0
   11c24:	4410      	add	r0, r2
   11c26:	461d      	mov	r5, r3
   11c28:	f007 faee 	bl	19208 <memcpy>
    lv_area_copy(&param->cfg.coords, coords);
    param->cfg.opa_top = opa_top;
    param->cfg.opa_bottom = opa_bottom;
   11c2c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    param->cfg.opa_top = opa_top;
   11c30:	7526      	strb	r6, [r4, #20]
    param->cfg.opa_bottom = opa_bottom;
   11c32:	7563      	strb	r3, [r4, #21]
    param->cfg.y_top = y_top;
    param->cfg.y_bottom = y_bottom;
   11c34:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    param->cfg.y_top = y_top;
   11c38:	8225      	strh	r5, [r4, #16]
    param->cfg.y_bottom = y_bottom;
   11c3a:	8263      	strh	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_fade;
   11c3c:	4b02      	ldr	r3, [pc, #8]	; (11c48 <lv_draw_mask_fade_init+0x2c>)
   11c3e:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_FADE;
   11c40:	2303      	movs	r3, #3
   11c42:	7123      	strb	r3, [r4, #4]
}
   11c44:	bd70      	pop	{r4, r5, r6, pc}
   11c46:	bf00      	nop
   11c48:	0001eddb 	.word	0x0001eddb

00011c4c <lv_draw_rect_dsc_init>:
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
   11c4c:	2268      	movs	r2, #104	; 0x68
   11c4e:	2100      	movs	r1, #0
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
   11c50:	b510      	push	{r4, lr}
   11c52:	4604      	mov	r4, r0
   11c54:	f007 fb03 	bl	1925e <memset>
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = LV_COLOR_WHITE;
    dsc->bg_grad_color = LV_COLOR_BLACK;
   11c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c5c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    dsc->border_color = LV_COLOR_BLACK;
    dsc->pattern_recolor = LV_COLOR_BLACK;
    dsc->value_color = LV_COLOR_BLACK;
    dsc->shadow_color = LV_COLOR_BLACK;
    dsc->bg_grad_color_stop = 0xFF;
   11c60:	21ff      	movs	r1, #255	; 0xff
    dsc->bg_grad_color = LV_COLOR_BLACK;
   11c62:	e9c4 3201 	strd	r3, r2, [r4, #4]
    dsc->bg_opa = LV_OPA_COVER;
   11c66:	74a3      	strb	r3, [r4, #18]
    dsc->outline_opa = LV_OPA_COVER;
    dsc->border_opa = LV_OPA_COVER;
   11c68:	7723      	strb	r3, [r4, #28]
    dsc->pattern_opa = LV_OPA_COVER;
   11c6a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    dsc->value_opa = LV_OPA_COVER;
   11c6e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    dsc->shadow_opa = LV_OPA_COVER;
   11c72:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    dsc->border_side = LV_BORDER_SIDE_FULL;
   11c76:	230f      	movs	r3, #15
    dsc->border_color = LV_COLOR_BLACK;
   11c78:	6162      	str	r2, [r4, #20]
    dsc->value_color = LV_COLOR_BLACK;
   11c7a:	65a2      	str	r2, [r4, #88]	; 0x58
    dsc->shadow_color = LV_COLOR_BLACK;
   11c7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->pattern_recolor = LV_COLOR_BLACK;
   11c7e:	6462      	str	r2, [r4, #68]	; 0x44
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   11c80:	4a03      	ldr	r2, [pc, #12]	; (11c90 <lv_draw_rect_dsc_init+0x44>)
    dsc->bg_grad_color_stop = 0xFF;
   11c82:	8221      	strh	r1, [r4, #16]
    dsc->outline_opa = LV_OPA_COVER;
   11c84:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   11c88:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
   11c8a:	6522      	str	r2, [r4, #80]	; 0x50
    dsc->border_side = LV_BORDER_SIDE_FULL;
   11c8c:	8363      	strh	r3, [r4, #26]

}
   11c8e:	bd10      	pop	{r4, pc}
   11c90:	200003f8 	.word	0x200003f8

00011c94 <_lv_img_cache_open>:
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    if(entry_cnt == 0) {
   11c94:	4b56      	ldr	r3, [pc, #344]	; (11df0 <_lv_img_cache_open+0x15c>)
{
   11c96:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if(entry_cnt == 0) {
   11c9a:	881c      	ldrh	r4, [r3, #0]
{
   11c9c:	4605      	mov	r5, r0
   11c9e:	460e      	mov	r6, r1
   11ca0:	4699      	mov	r9, r3
    if(entry_cnt == 0) {
   11ca2:	b95c      	cbnz	r4, 11cbc <_lv_img_cache_open+0x28>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
   11ca4:	4b53      	ldr	r3, [pc, #332]	; (11df4 <_lv_img_cache_open+0x160>)
   11ca6:	2244      	movs	r2, #68	; 0x44
   11ca8:	9300      	str	r3, [sp, #0]
   11caa:	2002      	movs	r0, #2
   11cac:	4b52      	ldr	r3, [pc, #328]	; (11df8 <_lv_img_cache_open+0x164>)
   11cae:	4953      	ldr	r1, [pc, #332]	; (11dfc <_lv_img_cache_open+0x168>)
   11cb0:	f000 fe84 	bl	129bc <_lv_log_add>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
   11cb4:	4620      	mov	r0, r4
   11cb6:	b002      	add	sp, #8
   11cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   11cbc:	4b50      	ldr	r3, [pc, #320]	; (11e00 <_lv_img_cache_open+0x16c>)
    for(i = 0; i < entry_cnt; i++) {
   11cbe:	2100      	movs	r1, #0
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   11cc0:	681f      	ldr	r7, [r3, #0]
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   11cc2:	4850      	ldr	r0, [pc, #320]	; (11e04 <_lv_img_cache_open+0x170>)
   11cc4:	463b      	mov	r3, r7
    for(i = 0; i < entry_cnt; i++) {
   11cc6:	b28a      	uxth	r2, r1
   11cc8:	4294      	cmp	r4, r2
   11cca:	d846      	bhi.n	11d5a <_lv_img_cache_open+0xc6>
   11ccc:	f04f 0800 	mov.w	r8, #0
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   11cd0:	f04f 0a28 	mov.w	sl, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
   11cd4:	f8b9 1000 	ldrh.w	r1, [r9]
   11cd8:	fa1f f388 	uxth.w	r3, r8
   11cdc:	4299      	cmp	r1, r3
   11cde:	d845      	bhi.n	11d6c <_lv_img_cache_open+0xd8>
        cached_src = &cache[0];
   11ce0:	463c      	mov	r4, r7
        for(i = 1; i < entry_cnt; i++) {
   11ce2:	2301      	movs	r3, #1
   11ce4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   11ce8:	4299      	cmp	r1, r3
   11cea:	d863      	bhi.n	11db4 <_lv_img_cache_open+0x120>
        if(cached_src->dec_dsc.src) {
   11cec:	6863      	ldr	r3, [r4, #4]
   11cee:	2b00      	cmp	r3, #0
   11cf0:	d069      	beq.n	11dc6 <_lv_img_cache_open+0x132>
            lv_img_decoder_close(&cached_src->dec_dsc);
   11cf2:	4620      	mov	r0, r4
   11cf4:	f00f f8e6 	bl	20ec4 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
   11cf8:	2277      	movs	r2, #119	; 0x77
   11cfa:	4b43      	ldr	r3, [pc, #268]	; (11e08 <_lv_img_cache_open+0x174>)
   11cfc:	9300      	str	r3, [sp, #0]
   11cfe:	4b3e      	ldr	r3, [pc, #248]	; (11df8 <_lv_img_cache_open+0x164>)
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   11d00:	493e      	ldr	r1, [pc, #248]	; (11dfc <_lv_img_cache_open+0x168>)
   11d02:	2001      	movs	r0, #1
   11d04:	f000 fe5a 	bl	129bc <_lv_log_add>
        cached_src->dec_dsc.time_to_open = 0;
   11d08:	f04f 0800 	mov.w	r8, #0
        t_start                          = lv_tick_get();
   11d0c:	f00f f917 	bl	20f3e <lv_tick_get>
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   11d10:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
   11d12:	4607      	mov	r7, r0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   11d14:	4632      	mov	r2, r6
   11d16:	4620      	mov	r0, r4
        cached_src->dec_dsc.time_to_open = 0;
   11d18:	f8c4 8018 	str.w	r8, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   11d1c:	f000 fb58 	bl	123d0 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
   11d20:	4605      	mov	r5, r0
   11d22:	2800      	cmp	r0, #0
   11d24:	d154      	bne.n	11dd0 <_lv_img_cache_open+0x13c>
            LV_LOG_WARN("Image draw cannot open the image resource");
   11d26:	4b39      	ldr	r3, [pc, #228]	; (11e0c <_lv_img_cache_open+0x178>)
   11d28:	2283      	movs	r2, #131	; 0x83
   11d2a:	4934      	ldr	r1, [pc, #208]	; (11dfc <_lv_img_cache_open+0x168>)
   11d2c:	2002      	movs	r0, #2
   11d2e:	9300      	str	r3, [sp, #0]
   11d30:	4b31      	ldr	r3, [pc, #196]	; (11df8 <_lv_img_cache_open+0x164>)
   11d32:	f000 fe43 	bl	129bc <_lv_log_add>
            lv_img_decoder_close(&cached_src->dec_dsc);
   11d36:	4620      	mov	r0, r4
   11d38:	f00f f8c4 	bl	20ec4 <lv_img_decoder_close>
    memset(dst, 0x00, len);
   11d3c:	2224      	movs	r2, #36	; 0x24
   11d3e:	4629      	mov	r1, r5
   11d40:	4620      	mov	r0, r4
   11d42:	f007 fa8c 	bl	1925e <memset>
   11d46:	4620      	mov	r0, r4
   11d48:	2228      	movs	r2, #40	; 0x28
   11d4a:	4629      	mov	r1, r5
   11d4c:	f007 fa87 	bl	1925e <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
   11d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   11d54:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
   11d56:	462c      	mov	r4, r5
   11d58:	e7ac      	b.n	11cb4 <_lv_img_cache_open+0x20>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   11d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11d5c:	3101      	adds	r1, #1
   11d5e:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
   11d60:	bfa4      	itt	ge
   11d62:	f102 32ff 	addge.w	r2, r2, #4294967295	; 0xffffffff
   11d66:	625a      	strge	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
   11d68:	3328      	adds	r3, #40	; 0x28
   11d6a:	e7ac      	b.n	11cc6 <_lv_img_cache_open+0x32>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   11d6c:	fa1f f488 	uxth.w	r4, r8
   11d70:	fb0a 7404 	mla	r4, sl, r4, r7
   11d74:	6860      	ldr	r0, [r4, #4]
   11d76:	f00c fe3b 	bl	1e9f0 <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
   11d7a:	b968      	cbnz	r0, 11d98 <_lv_img_cache_open+0x104>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   11d7c:	6863      	ldr	r3, [r4, #4]
   11d7e:	42ab      	cmp	r3, r5
   11d80:	d112      	bne.n	11da8 <_lv_img_cache_open+0x114>
   11d82:	68a3      	ldr	r3, [r4, #8]
   11d84:	42b3      	cmp	r3, r6
   11d86:	d10f      	bne.n	11da8 <_lv_img_cache_open+0x114>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
   11d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11d8a:	69a2      	ldr	r2, [r4, #24]
   11d8c:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   11d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   11d92:	dc0c      	bgt.n	11dae <_lv_img_cache_open+0x11a>
   11d94:	6263      	str	r3, [r4, #36]	; 0x24
   11d96:	e78d      	b.n	11cb4 <_lv_img_cache_open+0x20>
        else if(src_type == LV_IMG_SRC_FILE) {
   11d98:	2801      	cmp	r0, #1
   11d9a:	d105      	bne.n	11da8 <_lv_img_cache_open+0x114>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
   11d9c:	4629      	mov	r1, r5
   11d9e:	6860      	ldr	r0, [r4, #4]
   11da0:	f007 fa07 	bl	191b2 <strcmp>
   11da4:	2800      	cmp	r0, #0
   11da6:	d0ef      	beq.n	11d88 <_lv_img_cache_open+0xf4>
    for(i = 0; i < entry_cnt; i++) {
   11da8:	f108 0801 	add.w	r8, r8, #1
   11dac:	e792      	b.n	11cd4 <_lv_img_cache_open+0x40>
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   11dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11db2:	e7ef      	b.n	11d94 <_lv_img_cache_open+0x100>
            if(cache[i].life < cached_src->life) {
   11db4:	6a57      	ldr	r7, [r2, #36]	; 0x24
   11db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        for(i = 1; i < entry_cnt; i++) {
   11db8:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
   11dba:	4287      	cmp	r7, r0
   11dbc:	bfb8      	it	lt
   11dbe:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
   11dc0:	b29b      	uxth	r3, r3
   11dc2:	3228      	adds	r2, #40	; 0x28
   11dc4:	e790      	b.n	11ce8 <_lv_img_cache_open+0x54>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   11dc6:	4b12      	ldr	r3, [pc, #72]	; (11e10 <_lv_img_cache_open+0x17c>)
   11dc8:	227a      	movs	r2, #122	; 0x7a
   11dca:	9300      	str	r3, [sp, #0]
   11dcc:	4b0a      	ldr	r3, [pc, #40]	; (11df8 <_lv_img_cache_open+0x164>)
   11dce:	e797      	b.n	11d00 <_lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
   11dd0:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
   11dd2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
   11dd6:	2b00      	cmp	r3, #0
   11dd8:	f47f af6c 	bne.w	11cb4 <_lv_img_cache_open+0x20>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   11ddc:	4638      	mov	r0, r7
   11dde:	f00f f8bb 	bl	20f58 <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   11de2:	b108      	cbz	r0, 11de8 <_lv_img_cache_open+0x154>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   11de4:	61a0      	str	r0, [r4, #24]
   11de6:	e765      	b.n	11cb4 <_lv_img_cache_open+0x20>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   11de8:	2301      	movs	r3, #1
   11dea:	61a3      	str	r3, [r4, #24]
   11dec:	e762      	b.n	11cb4 <_lv_img_cache_open+0x20>
   11dee:	bf00      	nop
   11df0:	20029f62 	.word	0x20029f62
   11df4:	00027626 	.word	0x00027626
   11df8:	000276d9 	.word	0x000276d9
   11dfc:	000275ea 	.word	0x000275ea
   11e00:	20025ddc 	.word	0x20025ddc
   11e04:	80000002 	.word	0x80000002
   11e08:	0002764d 	.word	0x0002764d
   11e0c:	000276af 	.word	0x000276af
   11e10:	0002767e 	.word	0x0002767e

00011e14 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   11e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e18:	4606      	mov	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   11e1a:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   11e1c:	f04f 0928 	mov.w	r9, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   11e20:	4b10      	ldr	r3, [pc, #64]	; (11e64 <lv_img_cache_invalidate_src+0x50>)
    for(i = 0; i < entry_cnt; i++) {
   11e22:	4f11      	ldr	r7, [pc, #68]	; (11e68 <lv_img_cache_invalidate_src+0x54>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   11e24:	f8d3 8000 	ldr.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
   11e28:	883a      	ldrh	r2, [r7, #0]
   11e2a:	b2ab      	uxth	r3, r5
   11e2c:	429a      	cmp	r2, r3
   11e2e:	d801      	bhi.n	11e34 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
   11e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   11e34:	b2ac      	uxth	r4, r5
   11e36:	fb09 8404 	mla	r4, r9, r4, r8
   11e3a:	6863      	ldr	r3, [r4, #4]
   11e3c:	42b3      	cmp	r3, r6
   11e3e:	d000      	beq.n	11e42 <lv_img_cache_invalidate_src+0x2e>
   11e40:	b96e      	cbnz	r6, 11e5e <lv_img_cache_invalidate_src+0x4a>
            if(cache[i].dec_dsc.src != NULL) {
   11e42:	b113      	cbz	r3, 11e4a <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   11e44:	4620      	mov	r0, r4
   11e46:	f00f f83d 	bl	20ec4 <lv_img_decoder_close>
   11e4a:	2224      	movs	r2, #36	; 0x24
   11e4c:	2100      	movs	r1, #0
   11e4e:	4620      	mov	r0, r4
   11e50:	f007 fa05 	bl	1925e <memset>
   11e54:	2228      	movs	r2, #40	; 0x28
   11e56:	2100      	movs	r1, #0
   11e58:	4620      	mov	r0, r4
   11e5a:	f007 fa00 	bl	1925e <memset>
    for(i = 0; i < entry_cnt; i++) {
   11e5e:	3501      	adds	r5, #1
   11e60:	e7e2      	b.n	11e28 <lv_img_cache_invalidate_src+0x14>
   11e62:	bf00      	nop
   11e64:	20025ddc 	.word	0x20025ddc
   11e68:	20029f62 	.word	0x20029f62

00011e6c <lv_img_cache_set_size>:
{
   11e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   11e70:	4c17      	ldr	r4, [pc, #92]	; (11ed0 <lv_img_cache_set_size+0x64>)
{
   11e72:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   11e74:	6823      	ldr	r3, [r4, #0]
   11e76:	b12b      	cbz	r3, 11e84 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   11e78:	2000      	movs	r0, #0
   11e7a:	f7ff ffcb 	bl	11e14 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   11e7e:	6820      	ldr	r0, [r4, #0]
   11e80:	f000 fdec 	bl	12a5c <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   11e84:	2728      	movs	r7, #40	; 0x28
   11e86:	fb07 f005 	mul.w	r0, r7, r5
   11e8a:	f000 fdbf 	bl	12a0c <lv_mem_alloc>
   11e8e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 11ed4 <lv_img_cache_set_size+0x68>
   11e92:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   11e94:	b918      	cbnz	r0, 11e9e <lv_img_cache_set_size+0x32>
        entry_cnt = 0;
   11e96:	f8a8 0000 	strh.w	r0, [r8]
}
   11e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   11e9e:	f8a8 5000 	strh.w	r5, [r8]
    for(i = 0; i < entry_cnt; i++) {
   11ea2:	2500      	movs	r5, #0
   11ea4:	f8b8 2000 	ldrh.w	r2, [r8]
   11ea8:	b2ab      	uxth	r3, r5
   11eaa:	429a      	cmp	r2, r3
   11eac:	d9f5      	bls.n	11e9a <lv_img_cache_set_size+0x2e>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   11eae:	b2ae      	uxth	r6, r5
   11eb0:	437e      	muls	r6, r7
   11eb2:	6820      	ldr	r0, [r4, #0]
   11eb4:	2224      	movs	r2, #36	; 0x24
   11eb6:	2100      	movs	r1, #0
   11eb8:	4430      	add	r0, r6
   11eba:	f007 f9d0 	bl	1925e <memset>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
   11ebe:	6820      	ldr	r0, [r4, #0]
   11ec0:	2228      	movs	r2, #40	; 0x28
   11ec2:	2100      	movs	r1, #0
   11ec4:	4430      	add	r0, r6
   11ec6:	f007 f9ca 	bl	1925e <memset>
    for(i = 0; i < entry_cnt; i++) {
   11eca:	3501      	adds	r5, #1
   11ecc:	e7ea      	b.n	11ea4 <lv_img_cache_set_size+0x38>
   11ece:	bf00      	nop
   11ed0:	20025ddc 	.word	0x20025ddc
   11ed4:	20029f62 	.word	0x20029f62

00011ed8 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
   11ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   11edc:	7b0c      	ldrb	r4, [r1, #12]
{
   11ede:	4606      	mov	r6, r0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   11ee0:	2c01      	cmp	r4, #1
{
   11ee2:	460d      	mov	r5, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   11ee4:	d109      	bne.n	11efa <lv_img_decoder_built_in_open+0x22>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));

#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   11ee6:	f44f 72b3 	mov.w	r2, #358	; 0x166
   11eea:	4b4a      	ldr	r3, [pc, #296]	; (12014 <lv_img_decoder_built_in_open+0x13c>)
   11eec:	9300      	str	r3, [sp, #0]
   11eee:	4b4a      	ldr	r3, [pc, #296]	; (12018 <lv_img_decoder_built_in_open+0x140>)
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);

        LV_LOG_WARN("Image decoder open: unknown color format")
   11ef0:	2002      	movs	r0, #2
   11ef2:	494a      	ldr	r1, [pc, #296]	; (1201c <lv_img_decoder_built_in_open+0x144>)
   11ef4:	f000 fd62 	bl	129bc <_lv_log_add>
   11ef8:	e053      	b.n	11fa2 <lv_img_decoder_built_in_open+0xca>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   11efa:	b914      	cbnz	r4, 11f02 <lv_img_decoder_built_in_open+0x2a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
   11efc:	684a      	ldr	r2, [r1, #4]
   11efe:	6892      	ldr	r2, [r2, #8]
   11f00:	b15a      	cbz	r2, 11f1a <lv_img_decoder_built_in_open+0x42>
    lv_img_cf_t cf = dsc->header.cf;
   11f02:	7c2a      	ldrb	r2, [r5, #16]
   11f04:	f002 001f 	and.w	r0, r2, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   11f08:	1f02      	subs	r2, r0, #4
   11f0a:	2a02      	cmp	r2, #2
   11f0c:	d809      	bhi.n	11f22 <lv_img_decoder_built_in_open+0x4a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   11f0e:	2c00      	cmp	r4, #0
   11f10:	d15a      	bne.n	11fc8 <lv_img_decoder_built_in_open+0xf0>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   11f12:	686b      	ldr	r3, [r5, #4]
   11f14:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
   11f16:	2401      	movs	r4, #1
            dsc->img_data = NULL;
   11f18:	616b      	str	r3, [r5, #20]
        return LV_RES_INV;
    }
}
   11f1a:	4620      	mov	r0, r4
   11f1c:	b003      	add	sp, #12
   11f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   11f22:	1fc3      	subs	r3, r0, #7
   11f24:	2b03      	cmp	r3, #3
   11f26:	d867      	bhi.n	11ff8 <lv_img_decoder_built_in_open+0x120>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   11f28:	f7fe fbbc 	bl	106a4 <lv_img_cf_get_px_size>
        uint32_t palette_size = 1 << px_size;
   11f2c:	2701      	movs	r7, #1
        if(dsc->user_data == NULL) {
   11f2e:	f8d5 9020 	ldr.w	r9, [r5, #32]
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   11f32:	4680      	mov	r8, r0
        uint32_t palette_size = 1 << px_size;
   11f34:	4087      	lsls	r7, r0
        if(dsc->user_data == NULL) {
   11f36:	f1b9 0f00 	cmp.w	r9, #0
   11f3a:	d117      	bne.n	11f6c <lv_img_decoder_built_in_open+0x94>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   11f3c:	2008      	movs	r0, #8
   11f3e:	f000 fd65 	bl	12a0c <lv_mem_alloc>
   11f42:	4604      	mov	r4, r0
   11f44:	6228      	str	r0, [r5, #32]
            if(dsc->user_data == NULL) {
   11f46:	b968      	cbnz	r0, 11f64 <lv_img_decoder_built_in_open+0x8c>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   11f48:	4b35      	ldr	r3, [pc, #212]	; (12020 <lv_img_decoder_built_in_open+0x148>)
   11f4a:	f240 128d 	movw	r2, #397	; 0x18d
   11f4e:	9300      	str	r3, [sp, #0]
   11f50:	2003      	movs	r0, #3
   11f52:	4b31      	ldr	r3, [pc, #196]	; (12018 <lv_img_decoder_built_in_open+0x140>)
   11f54:	4931      	ldr	r1, [pc, #196]	; (1201c <lv_img_decoder_built_in_open+0x144>)
   11f56:	f000 fd31 	bl	129bc <_lv_log_add>
                lv_img_decoder_built_in_close(decoder, dsc);
   11f5a:	4629      	mov	r1, r5
   11f5c:	4630      	mov	r0, r6
   11f5e:	f00e ff8f 	bl	20e80 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
   11f62:	e7da      	b.n	11f1a <lv_img_decoder_built_in_open+0x42>
   11f64:	2208      	movs	r2, #8
   11f66:	4649      	mov	r1, r9
   11f68:	f007 f979 	bl	1925e <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   11f6c:	2004      	movs	r0, #4
   11f6e:	fa00 f008 	lsl.w	r0, r0, r8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   11f72:	6a2c      	ldr	r4, [r5, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   11f74:	f000 fd4a 	bl	12a0c <lv_mem_alloc>
   11f78:	6020      	str	r0, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   11f7a:	4638      	mov	r0, r7
   11f7c:	f000 fd46 	bl	12a0c <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   11f80:	6823      	ldr	r3, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   11f82:	6060      	str	r0, [r4, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   11f84:	b103      	cbz	r3, 11f88 <lv_img_decoder_built_in_open+0xb0>
   11f86:	b970      	cbnz	r0, 11fa6 <lv_img_decoder_built_in_open+0xce>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   11f88:	4b25      	ldr	r3, [pc, #148]	; (12020 <lv_img_decoder_built_in_open+0x148>)
   11f8a:	2003      	movs	r0, #3
   11f8c:	4923      	ldr	r1, [pc, #140]	; (1201c <lv_img_decoder_built_in_open+0x144>)
   11f8e:	9300      	str	r3, [sp, #0]
   11f90:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   11f94:	4b20      	ldr	r3, [pc, #128]	; (12018 <lv_img_decoder_built_in_open+0x140>)
   11f96:	f000 fd11 	bl	129bc <_lv_log_add>
            lv_img_decoder_built_in_close(decoder, dsc);
   11f9a:	4629      	mov	r1, r5
   11f9c:	4630      	mov	r0, r6
   11f9e:	f00e ff6f 	bl	20e80 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
   11fa2:	2400      	movs	r4, #0
   11fa4:	e7b9      	b.n	11f1a <lv_img_decoder_built_in_open+0x42>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   11fa6:	7b2b      	ldrb	r3, [r5, #12]
   11fa8:	2b01      	cmp	r3, #1
   11faa:	d105      	bne.n	11fb8 <lv_img_decoder_built_in_open+0xe0>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
   11fac:	4b1d      	ldr	r3, [pc, #116]	; (12024 <lv_img_decoder_built_in_open+0x14c>)
   11fae:	f240 12ab 	movw	r2, #427	; 0x1ab
   11fb2:	9300      	str	r3, [sp, #0]
   11fb4:	4b18      	ldr	r3, [pc, #96]	; (12018 <lv_img_decoder_built_in_open+0x140>)
   11fb6:	e79b      	b.n	11ef0 <lv_img_decoder_built_in_open+0x18>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   11fb8:	686b      	ldr	r3, [r5, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   11fba:	26ff      	movs	r6, #255	; 0xff
   11fbc:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   11fbe:	2300      	movs	r3, #0
   11fc0:	42bb      	cmp	r3, r7
   11fc2:	f102 0204 	add.w	r2, r2, #4
   11fc6:	d101      	bne.n	11fcc <lv_img_decoder_built_in_open+0xf4>
            dsc->img_data = NULL;
   11fc8:	2300      	movs	r3, #0
   11fca:	e7a4      	b.n	11f16 <lv_img_decoder_built_in_open+0x3e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   11fcc:	6820      	ldr	r0, [r4, #0]
   11fce:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   11fd2:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   11fd6:	f812 8c04 	ldrb.w	r8, [r2, #-4]
   11fda:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   11fde:	f800 8023 	strb.w	r8, [r0, r3, lsl #2]
   11fe2:	f881 e001 	strb.w	lr, [r1, #1]
   11fe6:	f881 c002 	strb.w	ip, [r1, #2]
   11fea:	70ce      	strb	r6, [r1, #3]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   11fec:	f812 0c01 	ldrb.w	r0, [r2, #-1]
   11ff0:	6861      	ldr	r1, [r4, #4]
   11ff2:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
   11ff4:	3301      	adds	r3, #1
   11ff6:	e7e3      	b.n	11fc0 <lv_img_decoder_built_in_open+0xe8>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   11ff8:	f1a0 030b 	sub.w	r3, r0, #11
   11ffc:	2b03      	cmp	r3, #3
   11ffe:	d9e3      	bls.n	11fc8 <lv_img_decoder_built_in_open+0xf0>
        lv_img_decoder_built_in_close(decoder, dsc);
   12000:	4629      	mov	r1, r5
   12002:	4630      	mov	r0, r6
   12004:	f00e ff3c 	bl	20e80 <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
   12008:	4b07      	ldr	r3, [pc, #28]	; (12028 <lv_img_decoder_built_in_open+0x150>)
   1200a:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1200e:	9300      	str	r3, [sp, #0]
   12010:	4b01      	ldr	r3, [pc, #4]	; (12018 <lv_img_decoder_built_in_open+0x140>)
   12012:	e76d      	b.n	11ef0 <lv_img_decoder_built_in_open+0x18>
   12014:	0002772a 	.word	0x0002772a
   12018:	00027961 	.word	0x00027961
   1201c:	000276ec 	.word	0x000276ec
   12020:	00027770 	.word	0x00027770
   12024:	00027799 	.word	0x00027799
   12028:	000277e3 	.word	0x000277e3

0001202c <lv_img_decoder_built_in_info>:
{
   1202c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
   1202e:	4608      	mov	r0, r1
{
   12030:	460d      	mov	r5, r1
   12032:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   12034:	f00c fcdc 	bl	1e9f0 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   12038:	b9d0      	cbnz	r0, 12070 <lv_img_decoder_built_in_info+0x44>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1203a:	782b      	ldrb	r3, [r5, #0]
   1203c:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   12040:	3b04      	subs	r3, #4
   12042:	b2db      	uxtb	r3, r3
   12044:	2b0a      	cmp	r3, #10
   12046:	d811      	bhi.n	1206c <lv_img_decoder_built_in_info+0x40>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   12048:	886b      	ldrh	r3, [r5, #2]
   1204a:	8862      	ldrh	r2, [r4, #2]
   1204c:	f3c3 134a 	ubfx	r3, r3, #5, #11
   12050:	f363 124f 	bfi	r2, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   12054:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   12056:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   12058:	6823      	ldr	r3, [r4, #0]
   1205a:	4a0e      	ldr	r2, [pc, #56]	; (12094 <lv_img_decoder_built_in_info+0x68>)
   1205c:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   12060:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   12064:	400a      	ands	r2, r1
    return LV_RES_OK;
   12066:	2001      	movs	r0, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   12068:	4313      	orrs	r3, r2
   1206a:	6023      	str	r3, [r4, #0]
}
   1206c:	b003      	add	sp, #12
   1206e:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   12070:	2802      	cmp	r0, #2
   12072:	d104      	bne.n	1207e <lv_img_decoder_built_in_info+0x52>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   12074:	6823      	ldr	r3, [r4, #0]
   12076:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   1207a:	4b07      	ldr	r3, [pc, #28]	; (12098 <lv_img_decoder_built_in_info+0x6c>)
   1207c:	e7f3      	b.n	12066 <lv_img_decoder_built_in_info+0x3a>
        LV_LOG_WARN("Image get info found unknown src type");
   1207e:	4b07      	ldr	r3, [pc, #28]	; (1209c <lv_img_decoder_built_in_info+0x70>)
   12080:	2002      	movs	r0, #2
   12082:	9300      	str	r3, [sp, #0]
   12084:	f240 1233 	movw	r2, #307	; 0x133
   12088:	4b05      	ldr	r3, [pc, #20]	; (120a0 <lv_img_decoder_built_in_info+0x74>)
   1208a:	4906      	ldr	r1, [pc, #24]	; (120a4 <lv_img_decoder_built_in_info+0x78>)
   1208c:	f000 fc96 	bl	129bc <_lv_log_add>
   12090:	2000      	movs	r0, #0
   12092:	e7eb      	b.n	1206c <lv_img_decoder_built_in_info+0x40>
   12094:	001ffc1f 	.word	0x001ffc1f
   12098:	0020040b 	.word	0x0020040b
   1209c:	0002780c 	.word	0x0002780c
   120a0:	00027944 	.word	0x00027944
   120a4:	000276ec 	.word	0x000276ec

000120a8 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   120a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   120ac:	7c08      	ldrb	r0, [r1, #16]
{
   120ae:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   120b0:	f000 031e 	and.w	r3, r0, #30
{
   120b4:	b089      	sub	sp, #36	; 0x24
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   120b6:	2b04      	cmp	r3, #4
{
   120b8:	460d      	mov	r5, r1
   120ba:	4614      	mov	r4, r2
   120bc:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
   120c0:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   120c4:	d003      	beq.n	120ce <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   120c6:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   120ca:	2b06      	cmp	r3, #6
   120cc:	d10d      	bne.n	120ea <lv_img_decoder_built_in_read_line+0x42>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   120ce:	7b2b      	ldrb	r3, [r5, #12]
   120d0:	2b01      	cmp	r3, #1
   120d2:	d108      	bne.n	120e6 <lv_img_decoder_built_in_read_line+0x3e>
    LV_UNUSED(dsc);
    LV_UNUSED(x);
    LV_UNUSED(y);
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   120d4:	f240 223f 	movw	r2, #575	; 0x23f
   120d8:	4ba1      	ldr	r3, [pc, #644]	; (12360 <lv_img_decoder_built_in_read_line+0x2b8>)
   120da:	9300      	str	r3, [sp, #0]
   120dc:	4ba1      	ldr	r3, [pc, #644]	; (12364 <lv_img_decoder_built_in_read_line+0x2bc>)
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   120de:	2002      	movs	r0, #2
   120e0:	49a1      	ldr	r1, [pc, #644]	; (12368 <lv_img_decoder_built_in_read_line+0x2c0>)
   120e2:	f000 fc6b 	bl	129bc <_lv_log_add>
    lv_res_t res = LV_RES_INV;
   120e6:	2000      	movs	r0, #0
   120e8:	e05c      	b.n	121a4 <lv_img_decoder_built_in_read_line+0xfc>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   120ea:	f1a3 020b 	sub.w	r2, r3, #11
   120ee:	2a03      	cmp	r2, #3
   120f0:	f200 80a8 	bhi.w	12244 <lv_img_decoder_built_in_read_line+0x19c>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   120f4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   120f8:	aa04      	add	r2, sp, #16
   120fa:	4691      	mov	r9, r2
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   120fc:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   12100:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   12104:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   12108:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   1210a:	4b98      	ldr	r3, [pc, #608]	; (1236c <lv_img_decoder_built_in_read_line+0x2c4>)
   1210c:	f103 0e10 	add.w	lr, r3, #16
   12110:	4694      	mov	ip, r2
   12112:	6818      	ldr	r0, [r3, #0]
   12114:	6859      	ldr	r1, [r3, #4]
   12116:	3308      	adds	r3, #8
   12118:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1211c:	4573      	cmp	r3, lr
   1211e:	4662      	mov	r2, ip
   12120:	d1f6      	bne.n	12110 <lv_img_decoder_built_in_read_line+0x68>
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   12122:	2300      	movs	r3, #0
    lv_color_t bg_color = dsc->color;
   12124:	68a9      	ldr	r1, [r5, #8]
    for(i = 0; i < len; i++) {
   12126:	b21a      	sxth	r2, r3
   12128:	4297      	cmp	r7, r2
   1212a:	dc16      	bgt.n	1215a <lv_img_decoder_built_in_read_line+0xb2>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
   1212c:	7c28      	ldrb	r0, [r5, #16]
   1212e:	f000 001f 	and.w	r0, r0, #31
   12132:	f7fe fab7 	bl	106a4 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   12136:	f04f 0c01 	mov.w	ip, #1

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   1213a:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1213c:	fa0c fc00 	lsl.w	ip, ip, r0
   12140:	f003 031f 	and.w	r3, r3, #31
   12144:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   12148:	3b0b      	subs	r3, #11
   1214a:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   1214e:	2b03      	cmp	r3, #3
   12150:	d855      	bhi.n	121fe <lv_img_decoder_built_in_read_line+0x156>
   12152:	e8df f003 	tbb	[pc, r3]
   12156:	2a06      	.short	0x2a06
   12158:	4c3c      	.short	0x4c3c
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
   1215a:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
    for(i = 0; i < len; i++) {
   1215e:	3301      	adds	r3, #1
   12160:	e7e1      	b.n	12126 <lv_img_decoder_built_in_read_line+0x7e>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   12162:	692a      	ldr	r2, [r5, #16]
   12164:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   12168:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
            ofs += w * y + (x >> 3); /*First pixel*/
   1216c:	ea4f 02e4 	mov.w	r2, r4, asr #3
            pos       = 7 - (x & 0x7);
   12170:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x7) w++;
   12174:	bf18      	it	ne
   12176:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   12178:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   1217c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   12180:	ae02      	add	r6, sp, #8
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = _lv_mem_buf_get(w);
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   12182:	7b29      	ldrb	r1, [r5, #12]
   12184:	2900      	cmp	r1, #0
   12186:	d13d      	bne.n	12204 <lv_img_decoder_built_in_read_line+0x15c>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   12188:	686a      	ldr	r2, [r5, #4]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   1218a:	b240      	sxtb	r0, r0
        data_tmp = img_dsc->data + ofs;
   1218c:	6892      	ldr	r2, [r2, #8]
        if(pos < 0) {
            pos = 8 - px_size;
   1218e:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   12192:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   12194:	f108 0803 	add.w	r8, r8, #3
            pos = 8 - px_size;
   12198:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1219c:	b20a      	sxth	r2, r1
   1219e:	4297      	cmp	r7, r2
   121a0:	dc36      	bgt.n	12210 <lv_img_decoder_built_in_read_line+0x168>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
#endif
    return LV_RES_OK;
   121a2:	2001      	movs	r0, #1
}
   121a4:	b009      	add	sp, #36	; 0x24
   121a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   121aa:	692a      	ldr	r2, [r5, #16]
   121ac:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   121b0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            ofs += w * y + (x >> 2); /*First pixel*/
   121b4:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   121b8:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   121bc:	bf18      	it	ne
   121be:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   121c0:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   121c4:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   121c8:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   121ca:	ae03      	add	r6, sp, #12
            break;
   121cc:	e7d9      	b.n	12182 <lv_img_decoder_built_in_read_line+0xda>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   121ce:	692a      	ldr	r2, [r5, #16]
   121d0:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   121d4:	0551      	lsls	r1, r2, #21
   121d6:	bf48      	it	mi
   121d8:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   121da:	1062      	asrs	r2, r4, #1
            pos       = 4 - ((x & 0x1) * 4);
   121dc:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   121e0:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   121e4:	bf0c      	ite	eq
   121e6:	2404      	moveq	r4, #4
   121e8:	2400      	movne	r4, #0
   121ea:	464e      	mov	r6, r9
   121ec:	e7c9      	b.n	12182 <lv_img_decoder_built_in_read_line+0xda>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   121ee:	692b      	ldr	r3, [r5, #16]
   121f0:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   121f4:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   121f8:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
   121fa:	4626      	mov	r6, r4
   121fc:	e7c1      	b.n	12182 <lv_img_decoder_built_in_read_line+0xda>
   121fe:	2400      	movs	r4, #0
   12200:	4623      	mov	r3, r4
   12202:	e7fa      	b.n	121fa <lv_img_decoder_built_in_read_line+0x152>
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
   12204:	4b5a      	ldr	r3, [pc, #360]	; (12370 <lv_img_decoder_built_in_read_line+0x2c8>)
   12206:	f240 2295 	movw	r2, #661	; 0x295
   1220a:	9300      	str	r3, [sp, #0]
   1220c:	4b59      	ldr	r3, [pc, #356]	; (12374 <lv_img_decoder_built_in_read_line+0x2cc>)
   1220e:	e766      	b.n	120de <lv_img_decoder_built_in_read_line+0x36>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   12210:	781a      	ldrb	r2, [r3, #0]
   12212:	fa0c f904 	lsl.w	r9, ip, r4
   12216:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   1221a:	f895 9010 	ldrb.w	r9, [r5, #16]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1221e:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   12220:	f009 091f 	and.w	r9, r9, #31
   12224:	f1b9 0f0e 	cmp.w	r9, #14
   12228:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   1222a:	eba4 0400 	sub.w	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1222e:	bf18      	it	ne
   12230:	5cb2      	ldrbne	r2, [r6, r2]
        pos -= px_size;
   12232:	b264      	sxtb	r4, r4
        if(pos < 0) {
   12234:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   12236:	f808 2021 	strb.w	r2, [r8, r1, lsl #2]
            pos = 8 - px_size;
   1223a:	bfbc      	itt	lt
   1223c:	4674      	movlt	r4, lr
            data_tmp++;
   1223e:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   12240:	3101      	adds	r1, #1
   12242:	e7ab      	b.n	1219c <lv_img_decoder_built_in_read_line+0xf4>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   12244:	3b07      	subs	r3, #7
   12246:	2b03      	cmp	r3, #3
   12248:	f200 8084 	bhi.w	12354 <lv_img_decoder_built_in_read_line+0x2ac>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
   1224c:	f000 001f 	and.w	r0, r0, #31
   12250:	f7fe fa28 	bl	106a4 <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   12254:	2101      	movs	r1, #1
    switch(dsc->header.cf) {
   12256:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   12258:	4081      	lsls	r1, r0
   1225a:	f003 031f 	and.w	r3, r3, #31
   1225e:	3901      	subs	r1, #1
   12260:	3b07      	subs	r3, #7
   12262:	b289      	uxth	r1, r1
    switch(dsc->header.cf) {
   12264:	2b03      	cmp	r3, #3
   12266:	d86c      	bhi.n	12342 <lv_img_decoder_built_in_read_line+0x29a>
   12268:	e8df f003 	tbb	[pc, r3]
   1226c:	62524002 	.word	0x62524002
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   12270:	692a      	ldr	r2, [r5, #16]
   12272:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   12276:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
            ofs += w * y + (x >> 3); /*First pixel*/
   1227a:	ea4f 02e4 	mov.w	r2, r4, asr #3
            pos = 7 - (x & 0x7);
   1227e:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x7) w++;
   12282:	bf18      	it	ne
   12284:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   12286:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   1228a:	f004 0407 	and.w	r4, r4, #7
            ofs += 8;                /*Skip the palette*/
   1228e:	3308      	adds	r3, #8
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   12290:	7b2a      	ldrb	r2, [r5, #12]
   12292:	2a00      	cmp	r2, #0
   12294:	d158      	bne.n	12348 <lv_img_decoder_built_in_read_line+0x2a0>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   12296:	f8d5 c020 	ldr.w	ip, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
   1229a:	686d      	ldr	r5, [r5, #4]
        pos -= px_size;
   1229c:	b240      	sxtb	r0, r0
        data_tmp                     = img_dsc->data + ofs;
   1229e:	68ae      	ldr	r6, [r5, #8]
    for(i = 0; i < len; i++) {
   122a0:	4615      	mov	r5, r2
            pos = 8 - px_size;
   122a2:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   122a6:	4433      	add	r3, r6
    for(i = 0; i < len; i++) {
   122a8:	f1a8 0804 	sub.w	r8, r8, #4
            pos = 8 - px_size;
   122ac:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   122b0:	b22a      	sxth	r2, r5
   122b2:	4297      	cmp	r7, r2
   122b4:	f77f af75 	ble.w	121a2 <lv_img_decoder_built_in_read_line+0xfa>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   122b8:	781a      	ldrb	r2, [r3, #0]
   122ba:	fa01 f604 	lsl.w	r6, r1, r4
   122be:	4032      	ands	r2, r6
   122c0:	4122      	asrs	r2, r4
        lv_color_t color = user_data->palette[val_act];
   122c2:	f8dc 6000 	ldr.w	r6, [ip]
   122c6:	b2d2      	uxtb	r2, r2
   122c8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
        pos -= px_size;
   122cc:	1a24      	subs	r4, r4, r0
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
   122ce:	f848 6f04 	str.w	r6, [r8, #4]!
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   122d2:	f8dc 6004 	ldr.w	r6, [ip, #4]
        pos -= px_size;
   122d6:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   122d8:	5cb2      	ldrb	r2, [r6, r2]
        if(pos < 0) {
   122da:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   122dc:	bfb8      	it	lt
   122de:	4674      	movlt	r4, lr
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   122e0:	f888 2003 	strb.w	r2, [r8, #3]
            data_tmp++;
   122e4:	bfb8      	it	lt
   122e6:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   122e8:	3501      	adds	r5, #1
   122ea:	e7e1      	b.n	122b0 <lv_img_decoder_built_in_read_line+0x208>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   122ec:	692a      	ldr	r2, [r5, #16]
   122ee:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   122f2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            ofs += w * y + (x >> 2); /*First pixel*/
   122f6:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos = 6 - ((x & 0x3) * 2);
   122fa:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   122fe:	bf18      	it	ne
   12300:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   12302:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   12306:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
   1230a:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   1230c:	0064      	lsls	r4, r4, #1
            break;
   1230e:	e7bf      	b.n	12290 <lv_img_decoder_built_in_read_line+0x1e8>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   12310:	692a      	ldr	r2, [r5, #16]
   12312:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   12316:	0552      	lsls	r2, r2, #21
   12318:	bf48      	it	mi
   1231a:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1231c:	1062      	asrs	r2, r4, #1
   1231e:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
   12322:	f014 0f01 	tst.w	r4, #1
   12326:	bf0c      	ite	eq
   12328:	2404      	moveq	r4, #4
   1232a:	2400      	movne	r4, #0
            ofs += 64;               /*Skip the palette*/
   1232c:	3340      	adds	r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1232e:	e7af      	b.n	12290 <lv_img_decoder_built_in_read_line+0x1e8>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   12330:	692b      	ldr	r3, [r5, #16]
   12332:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   12336:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   1233a:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
   1233c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            break;
   12340:	e7a6      	b.n	12290 <lv_img_decoder_built_in_read_line+0x1e8>
    switch(dsc->header.cf) {
   12342:	2300      	movs	r3, #0
   12344:	461c      	mov	r4, r3
   12346:	e7a3      	b.n	12290 <lv_img_decoder_built_in_read_line+0x1e8>
        LV_LOG_WARN("Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0");
   12348:	4b0b      	ldr	r3, [pc, #44]	; (12378 <lv_img_decoder_built_in_read_line+0x2d0>)
   1234a:	f240 22eb 	movw	r2, #747	; 0x2eb
   1234e:	9300      	str	r3, [sp, #0]
   12350:	4b0a      	ldr	r3, [pc, #40]	; (1237c <lv_img_decoder_built_in_read_line+0x2d4>)
   12352:	e6c4      	b.n	120de <lv_img_decoder_built_in_read_line+0x36>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   12354:	4b0a      	ldr	r3, [pc, #40]	; (12380 <lv_img_decoder_built_in_read_line+0x2d8>)
   12356:	f240 12fb 	movw	r2, #507	; 0x1fb
   1235a:	9300      	str	r3, [sp, #0]
   1235c:	4b09      	ldr	r3, [pc, #36]	; (12384 <lv_img_decoder_built_in_read_line+0x2dc>)
   1235e:	e6be      	b.n	120de <lv_img_decoder_built_in_read_line+0x36>
   12360:	0002772a 	.word	0x0002772a
   12364:	000279a0 	.word	0x000279a0
   12368:	000276ec 	.word	0x000276ec
   1236c:	000234d3 	.word	0x000234d3
   12370:	00027832 	.word	0x00027832
   12374:	000279c8 	.word	0x000279c8
   12378:	00027881 	.word	0x00027881
   1237c:	000279eb 	.word	0x000279eb
   12380:	000278d2 	.word	0x000278d2
   12384:	0002797e 	.word	0x0002797e

00012388 <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
   12388:	680b      	ldr	r3, [r1, #0]
{
   1238a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    header->cf = LV_IMG_CF_UNKNOWN;
   1238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
   12392:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
   12394:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   12396:	480d      	ldr	r0, [pc, #52]	; (123cc <lv_img_decoder_get_info+0x44>)
{
   12398:	460e      	mov	r6, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1239a:	f00f f8ea 	bl	21572 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   1239e:	2400      	movs	r4, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   123a0:	4605      	mov	r5, r0
   123a2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 123cc <lv_img_decoder_get_info+0x44>
   123a6:	b915      	cbnz	r5, 123ae <lv_img_decoder_get_info+0x26>
}
   123a8:	4620      	mov	r0, r4
   123aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
   123ae:	682c      	ldr	r4, [r5, #0]
   123b0:	b134      	cbz	r4, 123c0 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
   123b2:	4632      	mov	r2, r6
   123b4:	4639      	mov	r1, r7
   123b6:	4628      	mov	r0, r5
   123b8:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
   123ba:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
   123bc:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
   123be:	d0f3      	beq.n	123a8 <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   123c0:	4629      	mov	r1, r5
   123c2:	4640      	mov	r0, r8
   123c4:	f00f f8db 	bl	2157e <_lv_ll_get_next>
   123c8:	4605      	mov	r5, r0
   123ca:	e7ec      	b.n	123a6 <lv_img_decoder_get_info+0x1e>
   123cc:	20025de0 	.word	0x20025de0

000123d0 <lv_img_decoder_open>:
{
   123d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   123d4:	4605      	mov	r5, r0
    dsc->color     = color;
   123d6:	6082      	str	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
   123d8:	4608      	mov	r0, r1
{
   123da:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
   123dc:	f00c fb08 	bl	1e9f0 <lv_img_src_get_type>
    dsc->user_data = NULL;
   123e0:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   123e2:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
   123e4:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
   123e6:	622b      	str	r3, [r5, #32]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   123e8:	d117      	bne.n	1241a <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
   123ea:	4638      	mov	r0, r7
   123ec:	f006 fed1 	bl	19192 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
   123f0:	3001      	adds	r0, #1
   123f2:	f000 fb0b 	bl	12a0c <lv_mem_alloc>
        strcpy((char *)dsc->src, src);
   123f6:	4639      	mov	r1, r7
        dsc->src = lv_mem_alloc(fnlen + 1);
   123f8:	6068      	str	r0, [r5, #4]
        strcpy((char *)dsc->src, src);
   123fa:	f006 fead 	bl	19158 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   123fe:	4816      	ldr	r0, [pc, #88]	; (12458 <lv_img_decoder_open+0x88>)
   12400:	f00f f8b7 	bl	21572 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   12404:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   12406:	4604      	mov	r4, r0
        dsc->error_msg = NULL;
   12408:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1240a:	f8df a04c 	ldr.w	sl, [pc, #76]	; 12458 <lv_img_decoder_open+0x88>
        res = d->info_cb(d, src, &dsc->header);
   1240e:	f105 0910 	add.w	r9, r5, #16
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   12412:	b924      	cbnz	r4, 1241e <lv_img_decoder_open+0x4e>
}
   12414:	4630      	mov	r0, r6
   12416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
   1241a:	606f      	str	r7, [r5, #4]
   1241c:	e7ef      	b.n	123fe <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
   1241e:	6823      	ldr	r3, [r4, #0]
   12420:	b1a3      	cbz	r3, 1244c <lv_img_decoder_open+0x7c>
   12422:	6862      	ldr	r2, [r4, #4]
   12424:	b192      	cbz	r2, 1244c <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
   12426:	464a      	mov	r2, r9
   12428:	4639      	mov	r1, r7
   1242a:	4620      	mov	r0, r4
   1242c:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
   1242e:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
   12430:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
   12432:	d10b      	bne.n	1244c <lv_img_decoder_open+0x7c>
        res = d->open_cb(d, dsc);
   12434:	4629      	mov	r1, r5
   12436:	4620      	mov	r0, r4
   12438:	6863      	ldr	r3, [r4, #4]
        dsc->error_msg = NULL;
   1243a:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
   1243e:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
   12442:	602c      	str	r4, [r5, #0]
        res = d->open_cb(d, dsc);
   12444:	4798      	blx	r3
        if(res == LV_RES_OK) break;
   12446:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
   12448:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
   1244a:	d0e3      	beq.n	12414 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1244c:	4621      	mov	r1, r4
   1244e:	4650      	mov	r0, sl
   12450:	f00f f895 	bl	2157e <_lv_ll_get_next>
   12454:	4604      	mov	r4, r0
   12456:	e7dc      	b.n	12412 <lv_img_decoder_open+0x42>
   12458:	20025de0 	.word	0x20025de0

0001245c <lv_img_decoder_create>:
{
   1245c:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   1245e:	4805      	ldr	r0, [pc, #20]	; (12474 <lv_img_decoder_create+0x18>)
   12460:	f00f f850 	bl	21504 <_lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   12464:	4604      	mov	r4, r0
   12466:	b118      	cbz	r0, 12470 <lv_img_decoder_create+0x14>
   12468:	2214      	movs	r2, #20
   1246a:	2100      	movs	r1, #0
   1246c:	f006 fef7 	bl	1925e <memset>
}
   12470:	4620      	mov	r0, r4
   12472:	bd10      	pop	{r4, pc}
   12474:	20025de0 	.word	0x20025de0

00012478 <_lv_img_decoder_init>:
{
   12478:	b507      	push	{r0, r1, r2, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   1247a:	2114      	movs	r1, #20
   1247c:	480c      	ldr	r0, [pc, #48]	; (124b0 <_lv_img_decoder_init+0x38>)
   1247e:	f00f f839 	bl	214f4 <_lv_ll_init>
    decoder = lv_img_decoder_create();
   12482:	f7ff ffeb 	bl	1245c <lv_img_decoder_create>
    if(decoder == NULL) {
   12486:	b950      	cbnz	r0, 1249e <_lv_img_decoder_init+0x26>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   12488:	4b0a      	ldr	r3, [pc, #40]	; (124b4 <_lv_img_decoder_init+0x3c>)
   1248a:	2247      	movs	r2, #71	; 0x47
   1248c:	9300      	str	r3, [sp, #0]
   1248e:	2002      	movs	r0, #2
   12490:	4b09      	ldr	r3, [pc, #36]	; (124b8 <_lv_img_decoder_init+0x40>)
   12492:	490a      	ldr	r1, [pc, #40]	; (124bc <_lv_img_decoder_init+0x44>)
   12494:	f000 fa92 	bl	129bc <_lv_log_add>
}
   12498:	b003      	add	sp, #12
   1249a:	f85d fb04 	ldr.w	pc, [sp], #4
    decoder->info_cb = info_cb;
   1249e:	4b08      	ldr	r3, [pc, #32]	; (124c0 <_lv_img_decoder_init+0x48>)
   124a0:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   124a2:	4b08      	ldr	r3, [pc, #32]	; (124c4 <_lv_img_decoder_init+0x4c>)
   124a4:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   124a6:	4b08      	ldr	r3, [pc, #32]	; (124c8 <_lv_img_decoder_init+0x50>)
   124a8:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   124aa:	4b08      	ldr	r3, [pc, #32]	; (124cc <_lv_img_decoder_init+0x54>)
   124ac:	60c3      	str	r3, [r0, #12]
}
   124ae:	e7f3      	b.n	12498 <_lv_img_decoder_init+0x20>
   124b0:	20025de0 	.word	0x20025de0
   124b4:	0002790c 	.word	0x0002790c
   124b8:	0002792f 	.word	0x0002792f
   124bc:	000276ec 	.word	0x000276ec
   124c0:	0001202d 	.word	0x0001202d
   124c4:	00011ed9 	.word	0x00011ed9
   124c8:	000120a9 	.word	0x000120a9
   124cc:	00020e81 	.word	0x00020e81

000124d0 <lv_disp_drv_init>:
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
   124d0:	2230      	movs	r2, #48	; 0x30
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
   124d2:	b510      	push	{r4, lr}
   124d4:	2100      	movs	r1, #0
   124d6:	4604      	mov	r4, r0
   124d8:	f006 fec1 	bl	1925e <memset>
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));

    driver->flush_cb         = NULL;
   124dc:	2200      	movs	r2, #0
    driver->hor_res          = LV_HOR_RES_MAX;
   124de:	4b0a      	ldr	r3, [pc, #40]	; (12508 <lv_disp_drv_init+0x38>)
    driver->flush_cb         = NULL;
   124e0:	60e2      	str	r2, [r4, #12]
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
   124e2:	e9c4 3200 	strd	r3, r2, [r4]
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
    driver->dpi = LV_DPI;

#if LV_ANTIALIAS
    driver->antialiasing = true;
   124e6:	8923      	ldrh	r3, [r4, #8]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
   124e8:	6162      	str	r2, [r4, #20]
    driver->antialiasing = true;
   124ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   124ee:	f023 030f 	bic.w	r3, r3, #15
   124f2:	f443 7302 	orr.w	r3, r3, #520	; 0x208
   124f6:	f043 0301 	orr.w	r3, r3, #1
   124fa:	8123      	strh	r3, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
   124fc:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
    driver->user_data = NULL;
   12500:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
}
   12504:	bd10      	pop	{r4, pc}
   12506:	bf00      	nop
   12508:	00f00140 	.word	0x00f00140

0001250c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <lv_disp_get_default+0x8>)
   1250e:	6818      	ldr	r0, [r3, #0]
   12510:	4770      	bx	lr
   12512:	bf00      	nop
   12514:	20025d34 	.word	0x20025d34

00012518 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   12518:	b910      	cbnz	r0, 12520 <lv_disp_get_hor_res+0x8>
    return disp_def;
   1251a:	4b07      	ldr	r3, [pc, #28]	; (12538 <lv_disp_get_hor_res+0x20>)
   1251c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1251e:	b138      	cbz	r0, 12530 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   12520:	7a03      	ldrb	r3, [r0, #8]
   12522:	079b      	lsls	r3, r3, #30
   12524:	bf54      	ite	pl
   12526:	f9b0 0000 	ldrshpl.w	r0, [r0]
   1252a:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   1252e:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   12530:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
   12534:	4770      	bx	lr
   12536:	bf00      	nop
   12538:	20025d34 	.word	0x20025d34

0001253c <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1253c:	b910      	cbnz	r0, 12544 <lv_disp_get_ver_res+0x8>
    return disp_def;
   1253e:	4b06      	ldr	r3, [pc, #24]	; (12558 <lv_disp_get_ver_res+0x1c>)
   12540:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   12542:	b138      	cbz	r0, 12554 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   12544:	7a03      	ldrb	r3, [r0, #8]
   12546:	079b      	lsls	r3, r3, #30
   12548:	bf54      	ite	pl
   1254a:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   1254e:	f9b0 0000 	ldrshmi.w	r0, [r0]
   12552:	4770      	bx	lr
        return LV_VER_RES_MAX;
   12554:	20f0      	movs	r0, #240	; 0xf0
}
   12556:	4770      	bx	lr
   12558:	20025d34 	.word	0x20025d34

0001255c <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1255c:	b910      	cbnz	r0, 12564 <lv_disp_get_dpi+0x8>
    return disp_def;
   1255e:	4b04      	ldr	r3, [pc, #16]	; (12570 <lv_disp_get_dpi+0x14>)
   12560:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   12562:	b118      	cbz	r0, 1256c <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
   12564:	8900      	ldrh	r0, [r0, #8]
   12566:	f3c0 0089 	ubfx	r0, r0, #2, #10
   1256a:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   1256c:	2082      	movs	r0, #130	; 0x82
}
   1256e:	4770      	bx	lr
   12570:	20025d34 	.word	0x20025d34

00012574 <lv_disp_get_size_category>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   12574:	4602      	mov	r2, r0
{
   12576:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
   12578:	b910      	cbnz	r0, 12580 <lv_disp_get_size_category+0xc>
    return disp_def;
   1257a:	4b0f      	ldr	r3, [pc, #60]	; (125b8 <lv_disp_get_size_category+0x44>)
   1257c:	681a      	ldr	r2, [r3, #0]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
   1257e:	b19a      	cbz	r2, 125a8 <lv_disp_get_size_category+0x34>
    else w = lv_disp_get_hor_res(disp);
   12580:	4610      	mov	r0, r2
   12582:	f7ff ffc9 	bl	12518 <lv_disp_get_hor_res>
   12586:	4601      	mov	r1, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
   12588:	4610      	mov	r0, r2
   1258a:	f7ff ffe7 	bl	1255c <lv_disp_get_dpi>

    w = w * 10 / dpi;
   1258e:	230a      	movs	r3, #10
   12590:	434b      	muls	r3, r1
   12592:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   12596:	281d      	cmp	r0, #29
   12598:	d909      	bls.n	125ae <lv_disp_get_size_category+0x3a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   1259a:	2831      	cmp	r0, #49	; 0x31
   1259c:	d909      	bls.n	125b2 <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
   1259e:	2846      	cmp	r0, #70	; 0x46
   125a0:	bf34      	ite	cc
   125a2:	2002      	movcc	r0, #2
   125a4:	2003      	movcs	r0, #3
}
   125a6:	bd08      	pop	{r3, pc}
    if(disp == NULL) w = LV_HOR_RES_MAX;
   125a8:	f44f 71a0 	mov.w	r1, #320	; 0x140
   125ac:	e7ec      	b.n	12588 <lv_disp_get_size_category+0x14>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   125ae:	2000      	movs	r0, #0
   125b0:	e7f9      	b.n	125a6 <lv_disp_get_size_category+0x32>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   125b2:	2001      	movs	r0, #1
   125b4:	e7f7      	b.n	125a6 <lv_disp_get_size_category+0x32>
   125b6:	bf00      	nop
   125b8:	20025d34 	.word	0x20025d34

000125bc <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
   125bc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   125be:	4803      	ldr	r0, [pc, #12]	; (125cc <lv_disp_get_next+0x10>)
    if(disp == NULL)
   125c0:	b909      	cbnz	r1, 125c6 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   125c2:	f00e bfd6 	b.w	21572 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
   125c6:	f00e bfda 	b.w	2157e <_lv_ll_get_next>
   125ca:	bf00      	nop
   125cc:	20025d4c 	.word	0x20025d4c

000125d0 <lv_disp_drv_register>:
{
   125d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125d2:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   125d4:	4838      	ldr	r0, [pc, #224]	; (126b8 <lv_disp_drv_register+0xe8>)
   125d6:	f00e ff95 	bl	21504 <_lv_ll_ins_head>
    if(!disp) {
   125da:	4604      	mov	r4, r0
   125dc:	b918      	cbnz	r0, 125e6 <lv_disp_drv_register+0x16>
        return NULL;
   125de:	2400      	movs	r4, #0
}
   125e0:	4620      	mov	r0, r4
   125e2:	b003      	add	sp, #12
   125e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125e6:	f44f 72c2 	mov.w	r2, #388	; 0x184
   125ea:	2100      	movs	r1, #0
   125ec:	f006 fe37 	bl	1925e <memset>
    return memcpy(dst, src, len);
   125f0:	2230      	movs	r2, #48	; 0x30
   125f2:	4629      	mov	r1, r5
   125f4:	4620      	mov	r0, r4
   125f6:	f006 fe07 	bl	19208 <memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   125fa:	213c      	movs	r1, #60	; 0x3c
   125fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   12600:	f00e ff78 	bl	214f4 <_lv_ll_init>
    disp->last_activity_time = 0;
   12604:	2300      	movs	r3, #0
    if(disp_def == NULL) disp_def = disp;
   12606:	4e2d      	ldr	r6, [pc, #180]	; (126bc <lv_disp_drv_register+0xec>)
    disp->last_activity_time = 0;
   12608:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    if(disp_def == NULL) disp_def = disp;
   1260c:	6833      	ldr	r3, [r6, #0]
   1260e:	b903      	cbnz	r3, 12612 <lv_disp_drv_register+0x42>
   12610:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   12612:	4623      	mov	r3, r4
   12614:	2203      	movs	r2, #3
   12616:	211e      	movs	r1, #30
   12618:	4829      	ldr	r0, [pc, #164]	; (126c0 <lv_disp_drv_register+0xf0>)
    lv_disp_t * disp_def_tmp = disp_def;
   1261a:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1261c:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1261e:	f00f f890 	bl	21742 <lv_task_create>
   12622:	6320      	str	r0, [r4, #48]	; 0x30
    if(disp->refr_task == NULL) return NULL;
   12624:	2800      	cmp	r0, #0
   12626:	d0da      	beq.n	125de <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
   12628:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
    disp->last_activity_time = 0;
   1262c:	2500      	movs	r5, #0
    disp->inv_p = 0;
   1262e:	f36f 0309 	bfc	r3, #0, #10
   12632:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
    disp->bg_color = LV_COLOR_WHITE;
   12636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1263a:	4629      	mov	r1, r5
    disp->bg_img = NULL;
   1263c:	e9c4 3515 	strd	r3, r5, [r4, #84]	; 0x54
    disp->bg_opa = LV_OPA_COVER;
   12640:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   12644:	4628      	mov	r0, r5
    disp->last_activity_time = 0;
   12646:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    disp->prev_scr  = NULL;
   1264a:	6465      	str	r5, [r4, #68]	; 0x44
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1264c:	f7fc fb82 	bl	ed54 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   12650:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   12652:	6420      	str	r0, [r4, #64]	; 0x40
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   12654:	4628      	mov	r0, r5
   12656:	f7fc fb7d 	bl	ed54 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1265a:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1265c:	64a0      	str	r0, [r4, #72]	; 0x48
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1265e:	4628      	mov	r0, r5
   12660:	f7fc fb78 	bl	ed54 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   12664:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   12666:	64e0      	str	r0, [r4, #76]	; 0x4c
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   12668:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1266a:	f009 ffb5 	bl	1c5d8 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   1266e:	4629      	mov	r1, r5
   12670:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   12672:	f009 ffb1 	bl	1c5d8 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
   12676:	4629      	mov	r1, r5
   12678:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1267a:	f009 fc38 	bl	1beee <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
   1267e:	4629      	mov	r1, r5
   12680:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   12682:	f009 fc34 	bl	1beee <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
   12686:	6c20      	ldr	r0, [r4, #64]	; 0x40
   12688:	f009 fcc9 	bl	1c01e <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1268c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    disp_def = disp_def_tmp; /*Revert the default display*/
   1268e:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   12690:	f00f f86b 	bl	2176a <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
   12694:	4620      	mov	r0, r4
   12696:	f00e fc43 	bl	20f20 <lv_disp_is_true_double_buf>
   1269a:	2800      	cmp	r0, #0
   1269c:	d0a0      	beq.n	125e0 <lv_disp_drv_register+0x10>
   1269e:	6963      	ldr	r3, [r4, #20]
   126a0:	2b00      	cmp	r3, #0
   126a2:	d09d      	beq.n	125e0 <lv_disp_drv_register+0x10>
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
   126a4:	4b07      	ldr	r3, [pc, #28]	; (126c4 <lv_disp_drv_register+0xf4>)
   126a6:	22ac      	movs	r2, #172	; 0xac
   126a8:	9300      	str	r3, [sp, #0]
   126aa:	2003      	movs	r0, #3
   126ac:	4b06      	ldr	r3, [pc, #24]	; (126c8 <lv_disp_drv_register+0xf8>)
   126ae:	4907      	ldr	r1, [pc, #28]	; (126cc <lv_disp_drv_register+0xfc>)
   126b0:	f000 f984 	bl	129bc <_lv_log_add>
   126b4:	e794      	b.n	125e0 <lv_disp_drv_register+0x10>
   126b6:	bf00      	nop
   126b8:	20025d4c 	.word	0x20025d4c
   126bc:	20025d34 	.word	0x20025d34
   126c0:	00010051 	.word	0x00010051
   126c4:	00027a4a 	.word	0x00027a4a
   126c8:	00027a9d 	.word	0x00027a9d
   126cc:	00027a10 	.word	0x00027a10

000126d0 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   126d0:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   126d2:	4803      	ldr	r0, [pc, #12]	; (126e0 <lv_indev_get_next+0x10>)
    if(indev == NULL)
   126d4:	b909      	cbnz	r1, 126da <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   126d6:	f00e bf4c 	b.w	21572 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   126da:	f00e bf50 	b.w	2157e <_lv_ll_get_next>
   126de:	bf00      	nop
   126e0:	20025dec 	.word	0x20025dec

000126e4 <anim_mark_list_change>:

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
    anim_list_changed = true;
   126e4:	2201      	movs	r2, #1
{
   126e6:	b508      	push	{r3, lr}
    anim_list_changed = true;
   126e8:	4b07      	ldr	r3, [pc, #28]	; (12708 <anim_mark_list_change+0x24>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   126ea:	4808      	ldr	r0, [pc, #32]	; (1270c <anim_mark_list_change+0x28>)
    anim_list_changed = true;
   126ec:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   126ee:	f00e ff40 	bl	21572 <_lv_ll_get_head>
   126f2:	4b07      	ldr	r3, [pc, #28]	; (12710 <anim_mark_list_change+0x2c>)
   126f4:	4601      	mov	r1, r0
   126f6:	b920      	cbnz	r0, 12702 <anim_mark_list_change+0x1e>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   126f8:	6818      	ldr	r0, [r3, #0]
}
   126fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   126fe:	f000 bc21 	b.w	12f44 <lv_task_set_prio>
   12702:	2104      	movs	r1, #4
   12704:	e7f8      	b.n	126f8 <anim_mark_list_change+0x14>
   12706:	bf00      	nop
   12708:	2002a15e 	.word	0x2002a15e
   1270c:	20025d40 	.word	0x20025d40
   12710:	20025d38 	.word	0x20025d38

00012714 <anim_task>:
{
   12714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   12718:	4854      	ldr	r0, [pc, #336]	; (1286c <anim_task+0x158>)
{
   1271a:	b092      	sub	sp, #72	; 0x48
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   1271c:	f00e ff29 	bl	21572 <_lv_ll_get_head>
   12720:	4601      	mov	r1, r0
   12722:	4c52      	ldr	r4, [pc, #328]	; (1286c <anim_task+0x158>)
   12724:	b991      	cbnz	r1, 1274c <anim_task+0x38>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   12726:	4d52      	ldr	r5, [pc, #328]	; (12870 <anim_task+0x15c>)
        anim_list_changed = false;
   12728:	f8df 8148 	ldr.w	r8, [pc, #328]	; 12874 <anim_task+0x160>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   1272c:	6828      	ldr	r0, [r5, #0]
   1272e:	f00e fc13 	bl	20f58 <lv_tick_elaps>
   12732:	4606      	mov	r6, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   12734:	484d      	ldr	r0, [pc, #308]	; (1286c <anim_task+0x158>)
   12736:	f00e ff1c 	bl	21572 <_lv_ll_get_head>
   1273a:	4604      	mov	r4, r0
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   1273c:	4f4b      	ldr	r7, [pc, #300]	; (1286c <anim_task+0x158>)
    while(a != NULL) {
   1273e:	b984      	cbnz	r4, 12762 <anim_task+0x4e>
    last_task_run = lv_tick_get();
   12740:	f00e fbfd 	bl	20f3e <lv_tick_get>
   12744:	6028      	str	r0, [r5, #0]
}
   12746:	b012      	add	sp, #72	; 0x48
   12748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
   1274c:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   12750:	4620      	mov	r0, r4
        a->has_run = 0;
   12752:	f36f 0341 	bfc	r3, #1, #1
   12756:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   1275a:	f00e ff10 	bl	2157e <_lv_ll_get_next>
   1275e:	4601      	mov	r1, r0
   12760:	e7e0      	b.n	12724 <anim_task+0x10>
        anim_list_changed = false;
   12762:	2300      	movs	r3, #0
   12764:	f888 3000 	strb.w	r3, [r8]
        if(!a->has_run) {
   12768:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1276c:	079a      	lsls	r2, r3, #30
   1276e:	d477      	bmi.n	12860 <anim_task+0x14c>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
   12770:	f043 0302 	orr.w	r3, r3, #2
   12774:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            int32_t new_act_time = a->act_time + elaps;
   12778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if(a->act_time <= 0 && new_act_time >= 0) {
   1277a:	2b00      	cmp	r3, #0
   1277c:	dc05      	bgt.n	1278a <anim_task+0x76>
   1277e:	42f3      	cmn	r3, r6
   12780:	d403      	bmi.n	1278a <anim_task+0x76>
                if(a->start_cb) a->start_cb(a);
   12782:	68a3      	ldr	r3, [r4, #8]
   12784:	b10b      	cbz	r3, 1278a <anim_task+0x76>
   12786:	4620      	mov	r0, r4
   12788:	4798      	blx	r3
            a->act_time += elaps;
   1278a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1278c:	4433      	add	r3, r6
            if(a->act_time >= 0) {
   1278e:	2b00      	cmp	r3, #0
            a->act_time += elaps;
   12790:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
   12792:	db33      	blt.n	127fc <anim_task+0xe8>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   12794:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
   12796:	6a62      	ldr	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   12798:	4621      	mov	r1, r4
                if(a->act_time > a->time) a->act_time = a->time;
   1279a:	4293      	cmp	r3, r2
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   1279c:	f850 3f10 	ldr.w	r3, [r0, #16]!
                if(a->act_time > a->time) a->act_time = a->time;
   127a0:	bfc8      	it	gt
   127a2:	62a2      	strgt	r2, [r4, #40]	; 0x28
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   127a4:	2b00      	cmp	r3, #0
   127a6:	d032      	beq.n	1280e <anim_task+0xfa>
   127a8:	4798      	blx	r3
                if(new_value != a->current) {
   127aa:	69e3      	ldr	r3, [r4, #28]
   127ac:	4283      	cmp	r3, r0
   127ae:	d005      	beq.n	127bc <anim_task+0xa8>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
   127b0:	6863      	ldr	r3, [r4, #4]
                    a->current = new_value;
   127b2:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
   127b4:	b113      	cbz	r3, 127bc <anim_task+0xa8>
   127b6:	b201      	sxth	r1, r0
   127b8:	6820      	ldr	r0, [r4, #0]
   127ba:	4798      	blx	r3
                if(a->act_time >= a->time) {
   127bc:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
   127c0:	429a      	cmp	r2, r3
   127c2:	db1b      	blt.n	127fc <anim_task+0xe8>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   127c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   127c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   127ca:	f013 0301 	ands.w	r3, r3, #1
   127ce:	d127      	bne.n	12820 <anim_task+0x10c>
   127d0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   127d2:	b9fa      	cbnz	r2, 12814 <anim_task+0x100>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   127d4:	2900      	cmp	r1, #0
   127d6:	d140      	bne.n	1285a <anim_task+0x146>
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * _lv_memcpy(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
   127d8:	2248      	movs	r2, #72	; 0x48
   127da:	4621      	mov	r1, r4
   127dc:	4668      	mov	r0, sp
   127de:	f006 fd13 	bl	19208 <memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   127e2:	4621      	mov	r1, r4
   127e4:	4638      	mov	r0, r7
   127e6:	f00e ff05 	bl	215f4 <_lv_ll_remove>
        lv_mem_free(a);
   127ea:	4620      	mov	r0, r4
   127ec:	f000 f936 	bl	12a5c <lv_mem_free>
        anim_mark_list_change();
   127f0:	f7ff ff78 	bl	126e4 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
   127f4:	9b03      	ldr	r3, [sp, #12]
   127f6:	b10b      	cbz	r3, 127fc <anim_task+0xe8>
   127f8:	4668      	mov	r0, sp
   127fa:	4798      	blx	r3
        if(anim_list_changed)
   127fc:	f898 3000 	ldrb.w	r3, [r8]
   12800:	2b00      	cmp	r3, #0
   12802:	d02d      	beq.n	12860 <anim_task+0x14c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   12804:	4638      	mov	r0, r7
   12806:	f00e feb4 	bl	21572 <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   1280a:	4604      	mov	r4, r0
   1280c:	e797      	b.n	1273e <anim_task+0x2a>
                else new_value = lv_anim_path_linear(&a->path, a);
   1280e:	f00e fbb2 	bl	20f76 <lv_anim_path_linear>
   12812:	e7ca      	b.n	127aa <anim_task+0x96>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   12814:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12818:	4282      	cmp	r2, r0
   1281a:	d004      	beq.n	12826 <anim_task+0x112>
        a->repeat_cnt--;
   1281c:	3a01      	subs	r2, #1
   1281e:	8722      	strh	r2, [r4, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   12820:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   12822:	2a00      	cmp	r2, #0
   12824:	d0d6      	beq.n	127d4 <anim_task+0xc0>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
   12826:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12828:	4252      	negs	r2, r2
   1282a:	62a2      	str	r2, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
   1282c:	2900      	cmp	r1, #0
   1282e:	d0e5      	beq.n	127fc <anim_task+0xe8>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
   12830:	b913      	cbnz	r3, 12838 <anim_task+0x124>
   12832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12834:	4252      	negs	r2, r2
   12836:	62a2      	str	r2, [r4, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   12838:	f083 0201 	eor.w	r2, r3, #1
   1283c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
            tmp      = a->start;
   12840:	69a0      	ldr	r0, [r4, #24]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   12842:	f362 0300 	bfi	r3, r2, #0, #1
   12846:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   1284a:	07db      	lsls	r3, r3, #31
            a->start = a->end;
   1284c:	6a22      	ldr	r2, [r4, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   1284e:	bf58      	it	pl
   12850:	6c21      	ldrpl	r1, [r4, #64]	; 0x40
            a->start = a->end;
   12852:	61a2      	str	r2, [r4, #24]
            a->end   = tmp;
   12854:	6220      	str	r0, [r4, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   12856:	6261      	str	r1, [r4, #36]	; 0x24
   12858:	e7d0      	b.n	127fc <anim_task+0xe8>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   1285a:	2b00      	cmp	r3, #0
   1285c:	d0e3      	beq.n	12826 <anim_task+0x112>
   1285e:	e7bb      	b.n	127d8 <anim_task+0xc4>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   12860:	4621      	mov	r1, r4
   12862:	4638      	mov	r0, r7
   12864:	f00e fe8b 	bl	2157e <_lv_ll_get_next>
   12868:	e7cf      	b.n	1280a <anim_task+0xf6>
   1286a:	bf00      	nop
   1286c:	20025d40 	.word	0x20025d40
   12870:	20025d3c 	.word	0x20025d3c
   12874:	2002a15e 	.word	0x2002a15e

00012878 <_lv_anim_core_init>:
{
   12878:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
   1287a:	2148      	movs	r1, #72	; 0x48
   1287c:	480a      	ldr	r0, [pc, #40]	; (128a8 <_lv_anim_core_init+0x30>)
   1287e:	f00e fe39 	bl	214f4 <_lv_ll_init>
    last_task_run = lv_tick_get();
   12882:	f00e fb5c 	bl	20f3e <lv_tick_get>
   12886:	4b09      	ldr	r3, [pc, #36]	; (128ac <_lv_anim_core_init+0x34>)
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   12888:	2204      	movs	r2, #4
    last_task_run = lv_tick_get();
   1288a:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   1288c:	211e      	movs	r1, #30
   1288e:	2300      	movs	r3, #0
   12890:	4807      	ldr	r0, [pc, #28]	; (128b0 <_lv_anim_core_init+0x38>)
   12892:	f00e ff56 	bl	21742 <lv_task_create>
   12896:	4b07      	ldr	r3, [pc, #28]	; (128b4 <_lv_anim_core_init+0x3c>)
   12898:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
   1289a:	f7ff ff23 	bl	126e4 <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
   1289e:	2200      	movs	r2, #0
   128a0:	4b05      	ldr	r3, [pc, #20]	; (128b8 <_lv_anim_core_init+0x40>)
   128a2:	701a      	strb	r2, [r3, #0]
}
   128a4:	bd08      	pop	{r3, pc}
   128a6:	bf00      	nop
   128a8:	20025d40 	.word	0x20025d40
   128ac:	20025d3c 	.word	0x20025d3c
   128b0:	00012715 	.word	0x00012715
   128b4:	20025d38 	.word	0x20025d38
   128b8:	2002a15e 	.word	0x2002a15e

000128bc <lv_anim_init>:
{
   128bc:	b510      	push	{r4, lr}
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
   128be:	2248      	movs	r2, #72	; 0x48
   128c0:	2100      	movs	r1, #0
   128c2:	4604      	mov	r4, r0
   128c4:	f006 fccb 	bl	1925e <memset>
    a->time    = 500;
   128c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   128cc:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
   128ce:	2300      	movs	r3, #0
   128d0:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
   128d2:	2364      	movs	r3, #100	; 0x64
    return memcpy(dst, src, len);
   128d4:	2204      	movs	r2, #4
   128d6:	6223      	str	r3, [r4, #32]
   128d8:	4906      	ldr	r1, [pc, #24]	; (128f4 <lv_anim_init+0x38>)
   128da:	f104 0010 	add.w	r0, r4, #16
   128de:	f006 fc93 	bl	19208 <memcpy>
    a->repeat_cnt = 1;
   128e2:	2301      	movs	r3, #1
   128e4:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
   128e6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   128ea:	f043 0301 	orr.w	r3, r3, #1
   128ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
   128f2:	bd10      	pop	{r4, pc}
   128f4:	00023d48 	.word	0x00023d48

000128f8 <lv_anim_del>:
{
   128f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   128fc:	4606      	mov	r6, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   128fe:	4813      	ldr	r0, [pc, #76]	; (1294c <lv_anim_del+0x54>)
{
   12900:	460d      	mov	r5, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   12902:	f00e fe36 	bl	21572 <_lv_ll_get_head>
    bool del = false;
   12906:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   1290a:	4604      	mov	r4, r0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   1290c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1294c <lv_anim_del+0x54>
    while(a != NULL) {
   12910:	b914      	cbnz	r4, 12918 <lv_anim_del+0x20>
}
   12912:	4640      	mov	r0, r8
   12914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   12918:	4621      	mov	r1, r4
   1291a:	4648      	mov	r0, r9
   1291c:	f00e fe2f 	bl	2157e <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   12920:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   12922:	4607      	mov	r7, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   12924:	42b3      	cmp	r3, r6
   12926:	d10e      	bne.n	12946 <lv_anim_del+0x4e>
   12928:	6863      	ldr	r3, [r4, #4]
   1292a:	42ab      	cmp	r3, r5
   1292c:	d000      	beq.n	12930 <lv_anim_del+0x38>
   1292e:	b955      	cbnz	r5, 12946 <lv_anim_del+0x4e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   12930:	4621      	mov	r1, r4
   12932:	4648      	mov	r0, r9
   12934:	f00e fe5e 	bl	215f4 <_lv_ll_remove>
            lv_mem_free(a);
   12938:	4620      	mov	r0, r4
   1293a:	f000 f88f 	bl	12a5c <lv_mem_free>
            del = true;
   1293e:	f04f 0801 	mov.w	r8, #1
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
   12942:	f7ff fecf 	bl	126e4 <anim_mark_list_change>
            del = true;
   12946:	463c      	mov	r4, r7
   12948:	e7e2      	b.n	12910 <lv_anim_del+0x18>
   1294a:	bf00      	nop
   1294c:	20025d40 	.word	0x20025d40

00012950 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   12950:	6841      	ldr	r1, [r0, #4]
{
   12952:	b538      	push	{r3, r4, r5, lr}
   12954:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   12956:	b111      	cbz	r1, 1295e <lv_anim_start+0xe>
   12958:	6800      	ldr	r0, [r0, #0]
   1295a:	f7ff ffcd 	bl	128f8 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
   1295e:	4812      	ldr	r0, [pc, #72]	; (129a8 <lv_anim_start+0x58>)
   12960:	f00e fed1 	bl	21706 <_lv_ll_is_empty>
   12964:	b120      	cbz	r0, 12970 <lv_anim_start+0x20>
        last_task_run = lv_tick_get() - 1;
   12966:	f00e faea 	bl	20f3e <lv_tick_get>
   1296a:	4b10      	ldr	r3, [pc, #64]	; (129ac <lv_anim_start+0x5c>)
   1296c:	3801      	subs	r0, #1
   1296e:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
   12970:	480d      	ldr	r0, [pc, #52]	; (129a8 <lv_anim_start+0x58>)
   12972:	f00e fdc7 	bl	21504 <_lv_ll_ins_head>
    if(new_anim == NULL) return;
   12976:	4604      	mov	r4, r0
   12978:	b1a0      	cbz	r0, 129a4 <lv_anim_start+0x54>
    a->time_orig = a->time;
   1297a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1297c:	2248      	movs	r2, #72	; 0x48
   1297e:	642b      	str	r3, [r5, #64]	; 0x40
   12980:	4629      	mov	r1, r5
   12982:	f006 fc41 	bl	19208 <memcpy>
    if(new_anim->early_apply) {
   12986:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1298a:	07db      	lsls	r3, r3, #31
   1298c:	d506      	bpl.n	1299c <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
   1298e:	6863      	ldr	r3, [r4, #4]
   12990:	b123      	cbz	r3, 1299c <lv_anim_start+0x4c>
   12992:	6820      	ldr	r0, [r4, #0]
   12994:	b110      	cbz	r0, 1299c <lv_anim_start+0x4c>
   12996:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
   1299a:	4798      	blx	r3
}
   1299c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
   129a0:	f7ff bea0 	b.w	126e4 <anim_mark_list_change>
}
   129a4:	bd38      	pop	{r3, r4, r5, pc}
   129a6:	bf00      	nop
   129a8:	20025d40 	.word	0x20025d40
   129ac:	20025d3c 	.word	0x20025d3c

000129b0 <lv_log_register_print_cb>:
 * and send the formatted log message to a console or serial port.
 * @param print_cb a function pointer to print a log
 */
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)
{
    custom_print_cb = print_cb;
   129b0:	4b01      	ldr	r3, [pc, #4]	; (129b8 <lv_log_register_print_cb+0x8>)
   129b2:	6018      	str	r0, [r3, #0]
}
   129b4:	4770      	bx	lr
   129b6:	bf00      	nop
   129b8:	20025e98 	.word	0x20025e98

000129bc <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
   129bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   129c0:	461f      	mov	r7, r3
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   129c2:	1e43      	subs	r3, r0, #1
   129c4:	b2db      	uxtb	r3, r3
   129c6:	2b04      	cmp	r3, #4
{
   129c8:	4604      	mov	r4, r0
   129ca:	460d      	mov	r5, r1
   129cc:	4616      	mov	r6, r2
   129ce:	b0c5      	sub	sp, #276	; 0x114
    if(level >= LV_LOG_LEVEL) {
   129d0:	d816      	bhi.n	12a00 <_lv_log_add+0x44>
        va_list args;
        va_start(args, format);
        char buf[256];
        lv_vsnprintf(buf, sizeof(buf), format, args);
   129d2:	f10d 0910 	add.w	r9, sp, #16
        va_start(args, format);
   129d6:	ab4d      	add	r3, sp, #308	; 0x134
        lv_vsnprintf(buf, sizeof(buf), format, args);
   129d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   129dc:	4648      	mov	r0, r9
   129de:	9a4c      	ldr	r2, [sp, #304]	; 0x130
        va_start(args, format);
   129e0:	9303      	str	r3, [sp, #12]
        lv_vsnprintf(buf, sizeof(buf), format, args);
   129e2:	f7f2 f887 	bl	4af4 <vsnprintf>
        }

        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error", "User"};
        printf("%s: %s \t(%s #%d %s())\n", lvl_prefix[level], buf, &file[p], line, func);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, func, buf);
   129e6:	4b08      	ldr	r3, [pc, #32]	; (12a08 <_lv_log_add+0x4c>)
   129e8:	f8d3 8000 	ldr.w	r8, [r3]
   129ec:	f1b8 0f00 	cmp.w	r8, #0
   129f0:	d006      	beq.n	12a00 <_lv_log_add+0x44>
   129f2:	463b      	mov	r3, r7
   129f4:	4632      	mov	r2, r6
   129f6:	4629      	mov	r1, r5
   129f8:	4620      	mov	r0, r4
   129fa:	f8cd 9000 	str.w	r9, [sp]
   129fe:	47c0      	blx	r8
#endif
    }
}
   12a00:	b045      	add	sp, #276	; 0x114
   12a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12a06:	bf00      	nop
   12a08:	20025e98 	.word	0x20025e98

00012a0c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   12a0c:	b513      	push	{r0, r1, r4, lr}
    if(size == 0) {
   12a0e:	b1d0      	cbz	r0, 12a46 <lv_mem_alloc+0x3a>
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
   12a10:	3003      	adds	r0, #3
   12a12:	f020 0403 	bic.w	r4, r0, #3
	return k_aligned_alloc(sizeof(void *), size);
   12a16:	1d21      	adds	r1, r4, #4
   12a18:	2004      	movs	r0, #4
   12a1a:	f004 fc63 	bl	172e4 <k_aligned_alloc>
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
    if(alloc != NULL) {
   12a1e:	b950      	cbnz	r0, 12a36 <lv_mem_alloc+0x2a>
#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
        LV_LOG_WARN("Couldn't allocate memory");
   12a20:	4b0a      	ldr	r3, [pc, #40]	; (12a4c <lv_mem_alloc+0x40>)
   12a22:	2002      	movs	r0, #2
   12a24:	9300      	str	r3, [sp, #0]
   12a26:	22d0      	movs	r2, #208	; 0xd0
   12a28:	4b09      	ldr	r3, [pc, #36]	; (12a50 <lv_mem_alloc+0x44>)
   12a2a:	490a      	ldr	r1, [pc, #40]	; (12a54 <lv_mem_alloc+0x48>)
   12a2c:	f7ff ffc6 	bl	129bc <_lv_log_add>
   12a30:	2000      	movs	r0, #0
        }
#endif
    }

    return alloc;
}
   12a32:	b002      	add	sp, #8
   12a34:	bd10      	pop	{r4, pc}
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   12a36:	0064      	lsls	r4, r4, #1
   12a38:	f044 0401 	orr.w	r4, r4, #1
   12a3c:	f840 4b04 	str.w	r4, [r0], #4
    if(alloc == NULL) {
   12a40:	2800      	cmp	r0, #0
   12a42:	d1f6      	bne.n	12a32 <lv_mem_alloc+0x26>
   12a44:	e7ec      	b.n	12a20 <lv_mem_alloc+0x14>
        return &zero_mem;
   12a46:	4804      	ldr	r0, [pc, #16]	; (12a58 <lv_mem_alloc+0x4c>)
   12a48:	e7f3      	b.n	12a32 <lv_mem_alloc+0x26>
   12a4a:	bf00      	nop
   12a4c:	00027ae8 	.word	0x00027ae8
   12a50:	00027b2d 	.word	0x00027b2d
   12a54:	00027ab2 	.word	0x00027ab2
   12a58:	20025e9c 	.word	0x20025e9c

00012a5c <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   12a5c:	4b06      	ldr	r3, [pc, #24]	; (12a78 <lv_mem_free+0x1c>)
   12a5e:	4298      	cmp	r0, r3
   12a60:	d008      	beq.n	12a74 <lv_mem_free+0x18>
    if(data == NULL) return;
   12a62:	b138      	cbz	r0, 12a74 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   12a64:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   12a68:	f36f 0300 	bfc	r3, #0, #1
   12a6c:	f800 3d04 	strb.w	r3, [r0, #-4]!


#endif /*LV_MEM_AUTO_DEFRAG*/
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   12a70:	f010 ba96 	b.w	22fa0 <k_free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   12a74:	4770      	bx	lr
   12a76:	bf00      	nop
   12a78:	20025e9c 	.word	0x20025e9c

00012a7c <_lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   12a7c:	b140      	cbz	r0, 12a90 <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   12a7e:	4b05      	ldr	r3, [pc, #20]	; (12a94 <_lv_mem_get_size+0x18>)
   12a80:	4298      	cmp	r0, r3
   12a82:	d004      	beq.n	12a8e <_lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   12a84:	f850 0c04 	ldr.w	r0, [r0, #-4]
   12a88:	f3c0 005e 	ubfx	r0, r0, #1, #31
   12a8c:	4770      	bx	lr
    if(data == NULL) return 0;
   12a8e:	2000      	movs	r0, #0
}
   12a90:	4770      	bx	lr
   12a92:	bf00      	nop
   12a94:	20025e9c 	.word	0x20025e9c

00012a98 <lv_mem_realloc>:
{
   12a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
   12a9a:	1ccd      	adds	r5, r1, #3
    if(data_p != NULL) {
   12a9c:	4604      	mov	r4, r0
    new_size = (new_size + 3) & (~0x3);
   12a9e:	f025 0503 	bic.w	r5, r5, #3
    if(data_p != NULL) {
   12aa2:	b130      	cbz	r0, 12ab2 <lv_mem_realloc+0x1a>
        if(e->header.s.used == 0) {
   12aa4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   12aa8:	f013 0f01 	tst.w	r3, #1
   12aac:	bf14      	ite	ne
   12aae:	4604      	movne	r4, r0
   12ab0:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   12ab2:	4620      	mov	r0, r4
   12ab4:	f7ff ffe2 	bl	12a7c <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   12ab8:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
   12aba:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   12abc:	d01f      	beq.n	12afe <lv_mem_realloc+0x66>
    new_p = lv_mem_alloc(new_size);
   12abe:	4628      	mov	r0, r5
   12ac0:	f7ff ffa4 	bl	12a0c <lv_mem_alloc>
    if(new_p == NULL) {
   12ac4:	4606      	mov	r6, r0
   12ac6:	b958      	cbnz	r0, 12ae0 <lv_mem_realloc+0x48>
        LV_LOG_WARN("Couldn't allocate memory");
   12ac8:	4b0e      	ldr	r3, [pc, #56]	; (12b04 <lv_mem_realloc+0x6c>)
   12aca:	f240 1243 	movw	r2, #323	; 0x143
   12ace:	9300      	str	r3, [sp, #0]
   12ad0:	2002      	movs	r0, #2
   12ad2:	4b0d      	ldr	r3, [pc, #52]	; (12b08 <lv_mem_realloc+0x70>)
   12ad4:	490d      	ldr	r1, [pc, #52]	; (12b0c <lv_mem_realloc+0x74>)
   12ad6:	f7ff ff71 	bl	129bc <_lv_log_add>
}
   12ada:	4630      	mov	r0, r6
   12adc:	b003      	add	sp, #12
   12ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data_p != NULL) {
   12ae0:	2c00      	cmp	r4, #0
   12ae2:	d0fa      	beq.n	12ada <lv_mem_realloc+0x42>
        if(old_size != 0) {
   12ae4:	2f00      	cmp	r7, #0
   12ae6:	d0f8      	beq.n	12ada <lv_mem_realloc+0x42>
   12ae8:	42bd      	cmp	r5, r7
   12aea:	462a      	mov	r2, r5
   12aec:	4621      	mov	r1, r4
   12aee:	bf28      	it	cs
   12af0:	463a      	movcs	r2, r7
   12af2:	f006 fb89 	bl	19208 <memcpy>
            lv_mem_free(data_p);
   12af6:	4620      	mov	r0, r4
   12af8:	f7ff ffb0 	bl	12a5c <lv_mem_free>
   12afc:	e7ed      	b.n	12ada <lv_mem_realloc+0x42>
   12afe:	4626      	mov	r6, r4
   12b00:	e7eb      	b.n	12ada <lv_mem_realloc+0x42>
   12b02:	bf00      	nop
   12b04:	00027ae8 	.word	0x00027ae8
   12b08:	00027b3a 	.word	0x00027b3a
   12b0c:	00027ab2 	.word	0x00027ab2

00012b10 <_lv_mem_buf_get>:
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
    if(size == 0) return NULL;
   12b10:	4601      	mov	r1, r0
{
   12b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
   12b14:	b190      	cbz	r0, 12b3c <_lv_mem_buf_get+0x2c>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
   12b16:	2810      	cmp	r0, #16
   12b18:	d811      	bhi.n	12b3e <_lv_mem_buf_get+0x2e>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
            if(mem_buf_small[i].used == 0) {
   12b1a:	4a2c      	ldr	r2, [pc, #176]	; (12bcc <_lv_mem_buf_get+0xbc>)
   12b1c:	7993      	ldrb	r3, [r2, #6]
   12b1e:	f013 0301 	ands.w	r3, r3, #1
   12b22:	d003      	beq.n	12b2c <_lv_mem_buf_get+0x1c>
   12b24:	7b93      	ldrb	r3, [r2, #14]
   12b26:	07df      	lsls	r7, r3, #31
   12b28:	d409      	bmi.n	12b3e <_lv_mem_buf_get+0x2e>
   12b2a:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
   12b2c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   12b30:	7981      	ldrb	r1, [r0, #6]
   12b32:	f041 0101 	orr.w	r1, r1, #1
   12b36:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
   12b38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_DRAW_BUF_MAX_NUM.", 0x00);
    return NULL;
}
   12b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12b3e:	4824      	ldr	r0, [pc, #144]	; (12bd0 <_lv_mem_buf_get+0xc0>)
            if(mem_buf_small[i].used == 0) {
   12b40:	2300      	movs	r3, #0
   12b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b46:	4605      	mov	r5, r0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12b48:	f100 0c04 	add.w	ip, r0, #4
   12b4c:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
   12b50:	79be      	ldrb	r6, [r7, #6]
   12b52:	4634      	mov	r4, r6
   12b54:	07f6      	lsls	r6, r6, #31
   12b56:	d413      	bmi.n	12b80 <_lv_mem_buf_get+0x70>
   12b58:	f83c 6033 	ldrh.w	r6, [ip, r3, lsl #3]
   12b5c:	428e      	cmp	r6, r1
   12b5e:	d30f      	bcc.n	12b80 <_lv_mem_buf_get+0x70>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   12b60:	d105      	bne.n	12b6e <_lv_mem_buf_get+0x5e>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12b62:	f044 0401 	orr.w	r4, r4, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   12b66:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12b6a:	71bc      	strb	r4, [r7, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   12b6c:	e7e6      	b.n	12b3c <_lv_mem_buf_get+0x2c>
            else if(i_guess < 0) {
   12b6e:	1c57      	adds	r7, r2, #1
   12b70:	d101      	bne.n	12b76 <_lv_mem_buf_get+0x66>
                i_guess = i;
   12b72:	b25a      	sxtb	r2, r3
   12b74:	e004      	b.n	12b80 <_lv_mem_buf_get+0x70>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   12b76:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   12b7a:	88a4      	ldrh	r4, [r4, #4]
   12b7c:	42b4      	cmp	r4, r6
   12b7e:	d8f8      	bhi.n	12b72 <_lv_mem_buf_get+0x62>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12b80:	3301      	adds	r3, #1
   12b82:	2b10      	cmp	r3, #16
   12b84:	d1e2      	bne.n	12b4c <_lv_mem_buf_get+0x3c>
    if(i_guess >= 0) {
   12b86:	1c54      	adds	r4, r2, #1
   12b88:	d008      	beq.n	12b9c <_lv_mem_buf_get+0x8c>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   12b8a:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
   12b8e:	798b      	ldrb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   12b90:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   12b94:	f043 0301 	orr.w	r3, r3, #1
   12b98:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   12b9a:	e7cf      	b.n	12b3c <_lv_mem_buf_get+0x2c>
   12b9c:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   12b9e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   12ba2:	7998      	ldrb	r0, [r3, #6]
   12ba4:	4602      	mov	r2, r0
   12ba6:	07c0      	lsls	r0, r0, #31
   12ba8:	d40a      	bmi.n	12bc0 <_lv_mem_buf_get+0xb0>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12baa:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   12bae:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12bb2:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   12bb4:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   12bb6:	f7ff ff6f 	bl	12a98 <lv_mem_realloc>
   12bba:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   12bbe:	e7bd      	b.n	12b3c <_lv_mem_buf_get+0x2c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12bc0:	3401      	adds	r4, #1
   12bc2:	2c10      	cmp	r4, #16
   12bc4:	d1eb      	bne.n	12b9e <_lv_mem_buf_get+0x8e>
    if(size == 0) return NULL;
   12bc6:	2000      	movs	r0, #0
   12bc8:	e7b8      	b.n	12b3c <_lv_mem_buf_get+0x2c>
   12bca:	bf00      	nop
   12bcc:	200003c0 	.word	0x200003c0
   12bd0:	20025df8 	.word	0x20025df8

00012bd4 <_lv_mem_buf_release>:
{
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        if(mem_buf_small[i].p == p) {
   12bd4:	4b16      	ldr	r3, [pc, #88]	; (12c30 <_lv_mem_buf_release+0x5c>)
{
   12bd6:	b513      	push	{r0, r1, r4, lr}
        if(mem_buf_small[i].p == p) {
   12bd8:	681a      	ldr	r2, [r3, #0]
   12bda:	4290      	cmp	r0, r2
   12bdc:	d00b      	beq.n	12bf6 <_lv_mem_buf_release+0x22>
   12bde:	689a      	ldr	r2, [r3, #8]
   12be0:	4290      	cmp	r0, r2
   12be2:	d10a      	bne.n	12bfa <_lv_mem_buf_release+0x26>
   12be4:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
   12be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12bea:	799a      	ldrb	r2, [r3, #6]
   12bec:	f36f 0200 	bfc	r2, #0, #1
   12bf0:	719a      	strb	r2, [r3, #6]
            return;
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
   12bf2:	b002      	add	sp, #8
   12bf4:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   12bf6:	2200      	movs	r2, #0
   12bf8:	e7f5      	b.n	12be6 <_lv_mem_buf_release+0x12>
   12bfa:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   12bfc:	4a0d      	ldr	r2, [pc, #52]	; (12c34 <_lv_mem_buf_release+0x60>)
   12bfe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   12c02:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   12c06:	4284      	cmp	r4, r0
   12c08:	d104      	bne.n	12c14 <_lv_mem_buf_release+0x40>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12c0a:	798b      	ldrb	r3, [r1, #6]
   12c0c:	f36f 0300 	bfc	r3, #0, #1
   12c10:	718b      	strb	r3, [r1, #6]
            return;
   12c12:	e7ee      	b.n	12bf2 <_lv_mem_buf_release+0x1e>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12c14:	3301      	adds	r3, #1
   12c16:	2b10      	cmp	r3, #16
   12c18:	d1f1      	bne.n	12bfe <_lv_mem_buf_release+0x2a>
    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
   12c1a:	4b07      	ldr	r3, [pc, #28]	; (12c38 <_lv_mem_buf_release+0x64>)
   12c1c:	f240 2236 	movw	r2, #566	; 0x236
   12c20:	9300      	str	r3, [sp, #0]
   12c22:	2003      	movs	r0, #3
   12c24:	4b05      	ldr	r3, [pc, #20]	; (12c3c <_lv_mem_buf_release+0x68>)
   12c26:	4906      	ldr	r1, [pc, #24]	; (12c40 <_lv_mem_buf_release+0x6c>)
   12c28:	f7ff fec8 	bl	129bc <_lv_log_add>
   12c2c:	e7e1      	b.n	12bf2 <_lv_mem_buf_release+0x1e>
   12c2e:	bf00      	nop
   12c30:	200003c0 	.word	0x200003c0
   12c34:	20025df8 	.word	0x20025df8
   12c38:	00027b01 	.word	0x00027b01
   12c3c:	00027b49 	.word	0x00027b49
   12c40:	00027ab2 	.word	0x00027ab2

00012c44 <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
   12c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        mem_buf_small[i].used = 0;
   12c46:	2500      	movs	r5, #0
   12c48:	4c0e      	ldr	r4, [pc, #56]	; (12c84 <_lv_mem_buf_free_all+0x40>)
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   12c4a:	462e      	mov	r6, r5
   12c4c:	4627      	mov	r7, r4
        mem_buf_small[i].used = 0;
   12c4e:	4b0e      	ldr	r3, [pc, #56]	; (12c88 <_lv_mem_buf_free_all+0x44>)
   12c50:	799a      	ldrb	r2, [r3, #6]
   12c52:	f36f 0200 	bfc	r2, #0, #1
   12c56:	719a      	strb	r2, [r3, #6]
   12c58:	7b9a      	ldrb	r2, [r3, #14]
   12c5a:	f36f 0200 	bfc	r2, #0, #1
   12c5e:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   12c60:	6820      	ldr	r0, [r4, #0]
   12c62:	b148      	cbz	r0, 12c78 <_lv_mem_buf_free_all+0x34>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   12c64:	f7ff fefa 	bl	12a5c <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   12c68:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12c6a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   12c6e:	799a      	ldrb	r2, [r3, #6]
   12c70:	f366 0200 	bfi	r2, r6, #0, #1
   12c74:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   12c76:	80a6      	strh	r6, [r4, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12c78:	3501      	adds	r5, #1
   12c7a:	2d10      	cmp	r5, #16
   12c7c:	f104 0408 	add.w	r4, r4, #8
   12c80:	d1ee      	bne.n	12c60 <_lv_mem_buf_free_all+0x1c>
        }
    }
}
   12c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c84:	20025df8 	.word	0x20025df8
   12c88:	200003c0 	.word	0x200003c0

00012c8c <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   12c8c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   12c8e:	2118      	movs	r1, #24
   12c90:	4804      	ldr	r0, [pc, #16]	; (12ca4 <_lv_task_core_init+0x18>)
   12c92:	f00e fc2f 	bl	214f4 <_lv_ll_init>

    task_list_changed = false;
   12c96:	2200      	movs	r2, #0
   12c98:	4b03      	ldr	r3, [pc, #12]	; (12ca8 <_lv_task_core_init+0x1c>)
   12c9a:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   12c9c:	2201      	movs	r2, #1
   12c9e:	4b03      	ldr	r3, [pc, #12]	; (12cac <_lv_task_core_init+0x20>)
   12ca0:	701a      	strb	r2, [r3, #0]
}
   12ca2:	bd08      	pop	{r3, pc}
   12ca4:	20025e88 	.word	0x20025e88
   12ca8:	2002a184 	.word	0x2002a184
   12cac:	2002a181 	.word	0x2002a181

00012cb0 <lv_task_create_basic>:
{
   12cb0:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12cb2:	481c      	ldr	r0, [pc, #112]	; (12d24 <lv_task_create_basic+0x74>)
   12cb4:	f00e fc5d 	bl	21572 <_lv_ll_get_head>
    if(NULL == tmp) {
   12cb8:	4601      	mov	r1, r0
   12cba:	b148      	cbz	r0, 12cd0 <lv_task_create_basic+0x20>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   12cbc:	4c19      	ldr	r4, [pc, #100]	; (12d24 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
   12cbe:	7d0b      	ldrb	r3, [r1, #20]
   12cc0:	f003 0307 	and.w	r3, r3, #7
   12cc4:	2b03      	cmp	r3, #3
   12cc6:	d80b      	bhi.n	12ce0 <lv_task_create_basic+0x30>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   12cc8:	4816      	ldr	r0, [pc, #88]	; (12d24 <lv_task_create_basic+0x74>)
   12cca:	f00e fc61 	bl	21590 <_lv_ll_ins_prev>
   12cce:	e002      	b.n	12cd6 <lv_task_create_basic+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   12cd0:	4814      	ldr	r0, [pc, #80]	; (12d24 <lv_task_create_basic+0x74>)
   12cd2:	f00e fc17 	bl	21504 <_lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   12cd6:	4604      	mov	r4, r0
   12cd8:	b960      	cbnz	r0, 12cf4 <lv_task_create_basic+0x44>
   12cda:	2400      	movs	r4, #0
}
   12cdc:	4620      	mov	r0, r4
   12cde:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   12ce0:	4620      	mov	r0, r4
   12ce2:	f00e fc4c 	bl	2157e <_lv_ll_get_next>
        } while(tmp != NULL);
   12ce6:	4601      	mov	r1, r0
   12ce8:	2800      	cmp	r0, #0
   12cea:	d1e8      	bne.n	12cbe <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   12cec:	480d      	ldr	r0, [pc, #52]	; (12d24 <lv_task_create_basic+0x74>)
   12cee:	f00e fc24 	bl	2153a <_lv_ll_ins_tail>
   12cf2:	e7f0      	b.n	12cd6 <lv_task_create_basic+0x26>
    task_list_changed = true;
   12cf4:	2501      	movs	r5, #1
   12cf6:	4b0c      	ldr	r3, [pc, #48]	; (12d28 <lv_task_create_basic+0x78>)
    new_task->prio    = DEF_PRIO;
   12cf8:	2203      	movs	r2, #3
    task_list_changed = true;
   12cfa:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
   12cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   12d00:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   12d02:	7d03      	ldrb	r3, [r0, #20]
    new_task->task_cb = NULL;
   12d04:	2600      	movs	r6, #0
    new_task->prio    = DEF_PRIO;
   12d06:	f362 0302 	bfi	r3, r2, #0, #3
   12d0a:	7503      	strb	r3, [r0, #20]
    new_task->repeat_count = -1;
   12d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    new_task->task_cb = NULL;
   12d10:	6086      	str	r6, [r0, #8]
    new_task->repeat_count = -1;
   12d12:	6103      	str	r3, [r0, #16]
    new_task->last_run = lv_tick_get();
   12d14:	f00e f913 	bl	20f3e <lv_tick_get>
    task_created = true;
   12d18:	4b04      	ldr	r3, [pc, #16]	; (12d2c <lv_task_create_basic+0x7c>)
    new_task->last_run = lv_tick_get();
   12d1a:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
   12d1c:	60e6      	str	r6, [r4, #12]
    task_created = true;
   12d1e:	701d      	strb	r5, [r3, #0]
    return new_task;
   12d20:	e7dc      	b.n	12cdc <lv_task_create_basic+0x2c>
   12d22:	bf00      	nop
   12d24:	20025e88 	.word	0x20025e88
   12d28:	2002a184 	.word	0x2002a184
   12d2c:	2002a182 	.word	0x2002a182

00012d30 <lv_task_del>:
{
   12d30:	b538      	push	{r3, r4, r5, lr}
   12d32:	4604      	mov	r4, r0
    task_list_changed = true;
   12d34:	2501      	movs	r5, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   12d36:	4601      	mov	r1, r0
   12d38:	4807      	ldr	r0, [pc, #28]	; (12d58 <lv_task_del+0x28>)
   12d3a:	f00e fc5b 	bl	215f4 <_lv_ll_remove>
    task_list_changed = true;
   12d3e:	4b07      	ldr	r3, [pc, #28]	; (12d5c <lv_task_del+0x2c>)
    lv_mem_free(task);
   12d40:	4620      	mov	r0, r4
    task_list_changed = true;
   12d42:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
   12d44:	f7ff fe8a 	bl	12a5c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   12d48:	4b05      	ldr	r3, [pc, #20]	; (12d60 <lv_task_del+0x30>)
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	42a3      	cmp	r3, r4
   12d4e:	bf04      	itt	eq
   12d50:	4b04      	ldreq	r3, [pc, #16]	; (12d64 <lv_task_del+0x34>)
   12d52:	701d      	strbeq	r5, [r3, #0]
}
   12d54:	bd38      	pop	{r3, r4, r5, pc}
   12d56:	bf00      	nop
   12d58:	20025e88 	.word	0x20025e88
   12d5c:	2002a184 	.word	0x2002a184
   12d60:	20025e84 	.word	0x20025e84
   12d64:	2002a183 	.word	0x2002a183

00012d68 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   12d68:	b538      	push	{r3, r4, r5, lr}
   12d6a:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   12d6c:	6840      	ldr	r0, [r0, #4]
   12d6e:	f00e f8f3 	bl	20f58 <lv_tick_elaps>
    if(elp >= task->period)
   12d72:	6823      	ldr	r3, [r4, #0]
   12d74:	4298      	cmp	r0, r3
   12d76:	d31c      	bcc.n	12db2 <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
   12d78:	f00e f8e1 	bl	20f3e <lv_tick_get>
        task_deleted   = false;
   12d7c:	2300      	movs	r3, #0
   12d7e:	4d0e      	ldr	r5, [pc, #56]	; (12db8 <lv_task_exec+0x50>)
        task_created   = false;
   12d80:	4a0e      	ldr	r2, [pc, #56]	; (12dbc <lv_task_exec+0x54>)
        task_deleted   = false;
   12d82:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   12d84:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   12d86:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
   12d88:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
   12d8a:	b943      	cbnz	r3, 12d9e <lv_task_exec+0x36>
            if(task->repeat_count > 0) {
   12d8c:	6923      	ldr	r3, [r4, #16]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	dc0c      	bgt.n	12dac <lv_task_exec+0x44>
            if(task->repeat_count == 0) {
   12d92:	6923      	ldr	r3, [r4, #16]
   12d94:	b943      	cbnz	r3, 12da8 <lv_task_exec+0x40>
                lv_task_del(task);
   12d96:	4620      	mov	r0, r4
   12d98:	f7ff ffca 	bl	12d30 <lv_task_del>
   12d9c:	e004      	b.n	12da8 <lv_task_exec+0x40>
        if(task->task_cb) task->task_cb(task);
   12d9e:	4620      	mov	r0, r4
   12da0:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   12da2:	782b      	ldrb	r3, [r5, #0]
   12da4:	2b00      	cmp	r3, #0
   12da6:	d0f1      	beq.n	12d8c <lv_task_exec+0x24>
                lv_task_del(task);
   12da8:	2001      	movs	r0, #1
}
   12daa:	bd38      	pop	{r3, r4, r5, pc}
                task->repeat_count--;
   12dac:	3b01      	subs	r3, #1
   12dae:	6123      	str	r3, [r4, #16]
   12db0:	e7ef      	b.n	12d92 <lv_task_exec+0x2a>
    bool exec = false;
   12db2:	2000      	movs	r0, #0
   12db4:	e7f9      	b.n	12daa <lv_task_exec+0x42>
   12db6:	bf00      	nop
   12db8:	2002a183 	.word	0x2002a183
   12dbc:	2002a182 	.word	0x2002a182

00012dc0 <lv_task_handler>:
    if(already_running) return 1;
   12dc0:	4b54      	ldr	r3, [pc, #336]	; (12f14 <lv_task_handler+0x154>)
{
   12dc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
   12dc6:	781c      	ldrb	r4, [r3, #0]
   12dc8:	2001      	movs	r0, #1
   12dca:	b924      	cbnz	r4, 12dd6 <lv_task_handler+0x16>
    if(lv_task_run == false) {
   12dcc:	4a52      	ldr	r2, [pc, #328]	; (12f18 <lv_task_handler+0x158>)
    already_running = true;
   12dce:	7018      	strb	r0, [r3, #0]
    if(lv_task_run == false) {
   12dd0:	7812      	ldrb	r2, [r2, #0]
   12dd2:	b91a      	cbnz	r2, 12ddc <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
   12dd4:	701a      	strb	r2, [r3, #0]
}
   12dd6:	b003      	add	sp, #12
   12dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   12ddc:	f00e f8af 	bl	20f3e <lv_tick_get>
        task_deleted             = false;
   12de0:	46a3      	mov	fp, r4
    handler_start = lv_tick_get();
   12de2:	4b4e      	ldr	r3, [pc, #312]	; (12f1c <lv_task_handler+0x15c>)
        task_deleted             = false;
   12de4:	4d4e      	ldr	r5, [pc, #312]	; (12f20 <lv_task_handler+0x160>)
    handler_start = lv_tick_get();
   12de6:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   12de8:	9301      	str	r3, [sp, #4]
        task_created             = false;
   12dea:	4f4e      	ldr	r7, [pc, #312]	; (12f24 <lv_task_handler+0x164>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12dec:	f8df 814c 	ldr.w	r8, [pc, #332]	; 12f3c <lv_task_handler+0x17c>
   12df0:	484d      	ldr	r0, [pc, #308]	; (12f28 <lv_task_handler+0x168>)
        task_deleted             = false;
   12df2:	f885 b000 	strb.w	fp, [r5]
        task_created             = false;
   12df6:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12dfa:	f00e fbba 	bl	21572 <_lv_ll_get_head>
   12dfe:	46c1      	mov	r9, r8
            if(task_list_changed) {
   12e00:	f8df a13c 	ldr.w	sl, [pc, #316]	; 12f40 <lv_task_handler+0x180>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12e04:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   12e08:	f8d9 1000 	ldr.w	r1, [r9]
   12e0c:	b1b9      	cbz	r1, 12e3e <lv_task_handler+0x7e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   12e0e:	4846      	ldr	r0, [pc, #280]	; (12f28 <lv_task_handler+0x168>)
   12e10:	f00e fbb5 	bl	2157e <_lv_ll_get_next>
   12e14:	4606      	mov	r6, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   12e16:	f8d9 0000 	ldr.w	r0, [r9]
   12e1a:	7d03      	ldrb	r3, [r0, #20]
   12e1c:	f013 0207 	ands.w	r2, r3, #7
   12e20:	d00d      	beq.n	12e3e <lv_task_handler+0x7e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   12e22:	42a0      	cmp	r0, r4
   12e24:	d103      	bne.n	12e2e <lv_task_handler+0x6e>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   12e26:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
   12e28:	f8c9 6000 	str.w	r6, [r9]
                continue; /*Load the next task*/
   12e2c:	e7ec      	b.n	12e08 <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   12e2e:	2a05      	cmp	r2, #5
   12e30:	d138      	bne.n	12ea4 <lv_task_handler+0xe4>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   12e32:	f7ff ff99 	bl	12d68 <lv_task_exec>
            if(task_created || task_deleted) {
   12e36:	4b3b      	ldr	r3, [pc, #236]	; (12f24 <lv_task_handler+0x164>)
   12e38:	781b      	ldrb	r3, [r3, #0]
   12e3a:	2b00      	cmp	r3, #0
   12e3c:	d05f      	beq.n	12efe <lv_task_handler+0x13e>
    busy_time += lv_tick_elaps(handler_start);
   12e3e:	9b01      	ldr	r3, [sp, #4]
   12e40:	4c3a      	ldr	r4, [pc, #232]	; (12f2c <lv_task_handler+0x16c>)
   12e42:	6818      	ldr	r0, [r3, #0]
   12e44:	f00e f888 	bl	20f58 <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   12e48:	4d39      	ldr	r5, [pc, #228]	; (12f30 <lv_task_handler+0x170>)
    busy_time += lv_tick_elaps(handler_start);
   12e4a:	6823      	ldr	r3, [r4, #0]
   12e4c:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   12e4e:	6828      	ldr	r0, [r5, #0]
    busy_time += lv_tick_elaps(handler_start);
   12e50:	6023      	str	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   12e52:	f00e f881 	bl	20f58 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   12e56:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   12e5a:	d315      	bcc.n	12e88 <lv_task_handler+0xc8>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   12e5c:	2364      	movs	r3, #100	; 0x64
   12e5e:	6822      	ldr	r2, [r4, #0]
   12e60:	4353      	muls	r3, r2
   12e62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12e66:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   12e6a:	b2da      	uxtb	r2, r3
   12e6c:	2a64      	cmp	r2, #100	; 0x64
   12e6e:	bf8c      	ite	hi
   12e70:	2300      	movhi	r3, #0
   12e72:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   12e76:	4a2f      	ldr	r2, [pc, #188]	; (12f34 <lv_task_handler+0x174>)
   12e78:	bf98      	it	ls
   12e7a:	b2db      	uxtbls	r3, r3
   12e7c:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   12e7e:	2300      	movs	r3, #0
   12e80:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   12e82:	f00e f85c 	bl	20f3e <lv_tick_get>
   12e86:	6028      	str	r0, [r5, #0]
    time_till_next = LV_NO_TASK_READY;
   12e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e8c:	4d2a      	ldr	r5, [pc, #168]	; (12f38 <lv_task_handler+0x178>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12e8e:	4826      	ldr	r0, [pc, #152]	; (12f28 <lv_task_handler+0x168>)
    time_till_next = LV_NO_TASK_READY;
   12e90:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12e92:	f00e fb6e 	bl	21572 <_lv_ll_get_head>
   12e96:	4604      	mov	r4, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   12e98:	4e23      	ldr	r6, [pc, #140]	; (12f28 <lv_task_handler+0x168>)
    while(next) {
   12e9a:	b9dc      	cbnz	r4, 12ed4 <lv_task_handler+0x114>
    already_running = false; /*Release the mutex*/
   12e9c:	4b1d      	ldr	r3, [pc, #116]	; (12f14 <lv_task_handler+0x154>)
    return time_till_next;
   12e9e:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
   12ea0:	701c      	strb	r4, [r3, #0]
    return time_till_next;
   12ea2:	e798      	b.n	12dd6 <lv_task_handler+0x16>
            else if(task_interrupter) {
   12ea4:	b134      	cbz	r4, 12eb4 <lv_task_handler+0xf4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   12ea6:	7d22      	ldrb	r2, [r4, #20]
   12ea8:	f003 0307 	and.w	r3, r3, #7
   12eac:	f002 0207 	and.w	r2, r2, #7
   12eb0:	4293      	cmp	r3, r2
   12eb2:	d9c0      	bls.n	12e36 <lv_task_handler+0x76>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   12eb4:	f7ff ff58 	bl	12d68 <lv_task_exec>
   12eb8:	2800      	cmp	r0, #0
   12eba:	d0bc      	beq.n	12e36 <lv_task_handler+0x76>
                    if(!task_created && !task_deleted) {
   12ebc:	783b      	ldrb	r3, [r7, #0]
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d1bd      	bne.n	12e3e <lv_task_handler+0x7e>
   12ec2:	782b      	ldrb	r3, [r5, #0]
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d1ba      	bne.n	12e3e <lv_task_handler+0x7e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   12ec8:	f8d8 4000 	ldr.w	r4, [r8]
    } while(!end_flag);
   12ecc:	e78d      	b.n	12dea <lv_task_handler+0x2a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   12ece:	f8c9 6000 	str.w	r6, [r9]
   12ed2:	e799      	b.n	12e08 <lv_task_handler+0x48>
        if(next->prio != LV_TASK_PRIO_OFF) {
   12ed4:	7d23      	ldrb	r3, [r4, #20]
   12ed6:	075b      	lsls	r3, r3, #29
   12ed8:	d00b      	beq.n	12ef2 <lv_task_handler+0x132>
    uint32_t elp = lv_tick_elaps(task->last_run);
   12eda:	6860      	ldr	r0, [r4, #4]
   12edc:	f00e f83c 	bl	20f58 <lv_tick_elaps>
    if(elp >= task->period)
   12ee0:	6823      	ldr	r3, [r4, #0]
   12ee2:	4298      	cmp	r0, r3
        return 0;
   12ee4:	bf2c      	ite	cs
   12ee6:	2000      	movcs	r0, #0
    return task->period - elp;
   12ee8:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
   12eea:	682b      	ldr	r3, [r5, #0]
   12eec:	4283      	cmp	r3, r0
                time_till_next = delay;
   12eee:	bf88      	it	hi
   12ef0:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   12ef2:	4621      	mov	r1, r4
   12ef4:	4630      	mov	r0, r6
   12ef6:	f00e fb42 	bl	2157e <_lv_ll_get_next>
   12efa:	4604      	mov	r4, r0
   12efc:	e7cd      	b.n	12e9a <lv_task_handler+0xda>
            if(task_created || task_deleted) {
   12efe:	782b      	ldrb	r3, [r5, #0]
   12f00:	2b00      	cmp	r3, #0
   12f02:	d19c      	bne.n	12e3e <lv_task_handler+0x7e>
            if(task_list_changed) {
   12f04:	f89a 2000 	ldrb.w	r2, [sl]
   12f08:	2a00      	cmp	r2, #0
   12f0a:	d0e0      	beq.n	12ece <lv_task_handler+0x10e>
                task_interrupter = NULL;
   12f0c:	461c      	mov	r4, r3
                task_list_changed = false;
   12f0e:	f88a 3000 	strb.w	r3, [sl]
    } while(!end_flag);
   12f12:	e76a      	b.n	12dea <lv_task_handler+0x2a>
   12f14:	2002a17f 	.word	0x2002a17f
   12f18:	2002a181 	.word	0x2002a181
   12f1c:	20025ea4 	.word	0x20025ea4
   12f20:	2002a183 	.word	0x2002a183
   12f24:	2002a182 	.word	0x2002a182
   12f28:	20025e88 	.word	0x20025e88
   12f2c:	20025ea0 	.word	0x20025ea0
   12f30:	20025ea8 	.word	0x20025ea8
   12f34:	2002a180 	.word	0x2002a180
   12f38:	20025eac 	.word	0x20025eac
   12f3c:	20025e84 	.word	0x20025e84
   12f40:	2002a184 	.word	0x2002a184

00012f44 <lv_task_set_prio>:
    if(task->prio == prio) return;
   12f44:	7d03      	ldrb	r3, [r0, #20]
{
   12f46:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
   12f48:	f003 0307 	and.w	r3, r3, #7
   12f4c:	428b      	cmp	r3, r1
{
   12f4e:	4604      	mov	r4, r0
   12f50:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   12f52:	d017      	beq.n	12f84 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   12f54:	480f      	ldr	r0, [pc, #60]	; (12f94 <lv_task_set_prio+0x50>)
   12f56:	f00e fb0c 	bl	21572 <_lv_ll_get_head>
   12f5a:	4602      	mov	r2, r0
   12f5c:	4e0d      	ldr	r6, [pc, #52]	; (12f94 <lv_task_set_prio+0x50>)
   12f5e:	b132      	cbz	r2, 12f6e <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   12f60:	7d13      	ldrb	r3, [r2, #20]
   12f62:	f003 0307 	and.w	r3, r3, #7
   12f66:	429d      	cmp	r5, r3
   12f68:	db0d      	blt.n	12f86 <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   12f6a:	42a2      	cmp	r2, r4
   12f6c:	d003      	beq.n	12f76 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   12f6e:	4621      	mov	r1, r4
   12f70:	4808      	ldr	r0, [pc, #32]	; (12f94 <lv_task_set_prio+0x50>)
   12f72:	f00e fb9c 	bl	216ae <_lv_ll_move_before>
    task_list_changed = true;
   12f76:	2201      	movs	r2, #1
   12f78:	4b07      	ldr	r3, [pc, #28]	; (12f98 <lv_task_set_prio+0x54>)
   12f7a:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   12f7c:	7d23      	ldrb	r3, [r4, #20]
   12f7e:	f365 0302 	bfi	r3, r5, #0, #3
   12f82:	7523      	strb	r3, [r4, #20]
}
   12f84:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   12f86:	4611      	mov	r1, r2
   12f88:	4630      	mov	r0, r6
   12f8a:	f00e faf8 	bl	2157e <_lv_ll_get_next>
   12f8e:	4602      	mov	r2, r0
   12f90:	e7e5      	b.n	12f5e <lv_task_set_prio+0x1a>
   12f92:	bf00      	nop
   12f94:	20025e88 	.word	0x20025e88
   12f98:	2002a184 	.word	0x2002a184

00012f9c <_lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                             lv_txt_flag_t flag)
{
   12f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa0:	4688      	mov	r8, r1
   12fa2:	4617      	mov	r7, r2
   12fa4:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   12fa6:	4605      	mov	r5, r0
   12fa8:	2400      	movs	r4, #0
{
   12faa:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
   12fac:	2800      	cmp	r0, #0
   12fae:	d040      	beq.n	13032 <_lv_txt_get_width+0x96>
    if(font == NULL) return 0;
   12fb0:	2a00      	cmp	r2, #0
   12fb2:	d040      	beq.n	13036 <_lv_txt_get_width+0x9a>

    uint32_t i                   = 0;
   12fb4:	9403      	str	r4, [sp, #12]
    lv_coord_t width             = 0;
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   12fb6:	f88d 400b 	strb.w	r4, [sp, #11]

    if(length != 0) {
   12fba:	2900      	cmp	r1, #0
   12fbc:	d132      	bne.n	13024 <_lv_txt_get_width+0x88>
    lv_coord_t width             = 0;
   12fbe:	460c      	mov	r4, r1
                                      aligned */
        }
    }

    return width;
}
   12fc0:	4620      	mov	r0, r4
   12fc2:	b005      	add	sp, #20
   12fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   12fc8:	f8da 3000 	ldr.w	r3, [sl]
   12fcc:	a903      	add	r1, sp, #12
   12fce:	4628      	mov	r0, r5
   12fd0:	4798      	blx	r3
   12fd2:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   12fd4:	9803      	ldr	r0, [sp, #12]
   12fd6:	2100      	movs	r1, #0
   12fd8:	f8da 3000 	ldr.w	r3, [sl]
   12fdc:	4428      	add	r0, r5
   12fde:	4798      	blx	r3
   12fe0:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   12fe2:	f1b9 0f00 	cmp.w	r9, #0
   12fe6:	d10e      	bne.n	13006 <_lv_txt_get_width+0x6a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   12fe8:	4659      	mov	r1, fp
   12fea:	4638      	mov	r0, r7
   12fec:	f00e fc13 	bl	21816 <lv_font_get_glyph_width>
   12ff0:	b200      	sxth	r0, r0
            if(char_width > 0) {
   12ff2:	2800      	cmp	r0, #0
   12ff4:	dc11      	bgt.n	1301a <_lv_txt_get_width+0x7e>
        while(i < length) {
   12ff6:	9b03      	ldr	r3, [sp, #12]
   12ff8:	4598      	cmp	r8, r3
   12ffa:	d8e5      	bhi.n	12fc8 <_lv_txt_get_width+0x2c>
        if(width > 0) {
   12ffc:	2c00      	cmp	r4, #0
   12ffe:	dddf      	ble.n	12fc0 <_lv_txt_get_width+0x24>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   13000:	1ba4      	subs	r4, r4, r6
   13002:	b224      	sxth	r4, r4
   13004:	e7dc      	b.n	12fc0 <_lv_txt_get_width+0x24>
   13006:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   13008:	4659      	mov	r1, fp
   1300a:	f10d 000b 	add.w	r0, sp, #11
   1300e:	f00e fbbf 	bl	21790 <_lv_txt_is_cmd>
   13012:	9a01      	ldr	r2, [sp, #4]
   13014:	2800      	cmp	r0, #0
   13016:	d0e7      	beq.n	12fe8 <_lv_txt_get_width+0x4c>
   13018:	e7ed      	b.n	12ff6 <_lv_txt_get_width+0x5a>
                width += letter_space;
   1301a:	4434      	add	r4, r6
   1301c:	fa00 f484 	sxtah	r4, r0, r4
   13020:	b224      	sxth	r4, r4
   13022:	e7e8      	b.n	12ff6 <_lv_txt_get_width+0x5a>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   13024:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   13028:	f8df a010 	ldr.w	sl, [pc, #16]	; 1303c <_lv_txt_get_width+0xa0>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1302c:	f009 0901 	and.w	r9, r9, #1
   13030:	e7e1      	b.n	12ff6 <_lv_txt_get_width+0x5a>
    if(txt == NULL) return 0;
   13032:	4604      	mov	r4, r0
   13034:	e7c4      	b.n	12fc0 <_lv_txt_get_width+0x24>
   13036:	4614      	mov	r4, r2
   13038:	e7c2      	b.n	12fc0 <_lv_txt_get_width+0x24>
   1303a:	bf00      	nop
   1303c:	200003d4 	.word	0x200003d4

00013040 <_lv_txt_get_next_line>:
{
   13040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	b08f      	sub	sp, #60	; 0x3c
   13046:	4699      	mov	r9, r3
   13048:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    if(txt == NULL) return 0;
   1304c:	4606      	mov	r6, r0
{
   1304e:	9102      	str	r1, [sp, #8]
   13050:	9204      	str	r2, [sp, #16]
   13052:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   13054:	b190      	cbz	r0, 1307c <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
   13056:	2900      	cmp	r1, #0
   13058:	f000 80cd 	beq.w	131f6 <_lv_txt_get_next_line+0x1b6>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   1305c:	9b03      	ldr	r3, [sp, #12]
   1305e:	f013 0312 	ands.w	r3, r3, #18
   13062:	d00e      	beq.n	13082 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   13064:	2000      	movs	r0, #0
   13066:	e000      	b.n	1306a <_lv_txt_get_next_line+0x2a>
   13068:	3001      	adds	r0, #1
   1306a:	5c33      	ldrb	r3, [r6, r0]
   1306c:	2b0a      	cmp	r3, #10
   1306e:	f000 80c4 	beq.w	131fa <_lv_txt_get_next_line+0x1ba>
   13072:	2b0d      	cmp	r3, #13
   13074:	f000 80c1 	beq.w	131fa <_lv_txt_get_next_line+0x1ba>
   13078:	2b00      	cmp	r3, #0
   1307a:	d1f5      	bne.n	13068 <_lv_txt_get_next_line+0x28>
}
   1307c:	b00f      	add	sp, #60	; 0x3c
   1307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   13082:	9a03      	ldr	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   13084:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   13088:	f012 0202 	ands.w	r2, r2, #2
   1308c:	9205      	str	r2, [sp, #20]
   1308e:	f647 4218 	movw	r2, #31768	; 0x7c18
   13092:	bf18      	it	ne
   13094:	4691      	movne	r9, r2
    uint32_t i = 0;                                        /* Iterating index into txt */
   13096:	930b      	str	r3, [sp, #44]	; 0x2c
    while(txt[i] != '\0' && max_width > 0) {
   13098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1309a:	9300      	str	r3, [sp, #0]
   1309c:	eb06 0a03 	add.w	sl, r6, r3
   130a0:	5cf3      	ldrb	r3, [r6, r3]
   130a2:	2b00      	cmp	r3, #0
   130a4:	f000 808e 	beq.w	131c4 <_lv_txt_get_next_line+0x184>
   130a8:	f1b9 0f00 	cmp.w	r9, #0
   130ac:	f340 808a 	ble.w	131c4 <_lv_txt_get_next_line+0x184>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   130b0:	f647 4318 	movw	r3, #31768	; 0x7c18
   130b4:	9a05      	ldr	r2, [sp, #20]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   130b6:	2400      	movs	r4, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   130b8:	2a00      	cmp	r2, #0
   130ba:	bf08      	it	eq
   130bc:	464b      	moveq	r3, r9
   130be:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
   130c0:	4b4f      	ldr	r3, [pc, #316]	; (13200 <_lv_txt_get_next_line+0x1c0>)
   130c2:	4650      	mov	r0, sl
   130c4:	681a      	ldr	r2, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   130c6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
   130ca:	a90c      	add	r1, sp, #48	; 0x30
   130cc:	4790      	blx	r2
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   130ce:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    letter = _lv_txt_encoded_next(txt, &i_next);
   130d2:	4680      	mov	r8, r0
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   130d4:	4627      	mov	r7, r4
    uint32_t letter_next = 0; /* Letter at i_next */
   130d6:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   130d8:	4625      	mov	r5, r4
    i_next_next = i_next;
   130da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   130dc:	9401      	str	r4, [sp, #4]
    i_next_next = i_next;
   130de:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   130e0:	9b03      	ldr	r3, [sp, #12]
   130e2:	f003 0301 	and.w	r3, r3, #1
   130e6:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
   130e8:	f81a 1005 	ldrb.w	r1, [sl, r5]
   130ec:	b949      	cbnz	r1, 13102 <_lv_txt_get_next_line+0xc2>
    if(break_index == NO_BREAK_FOUND) {
   130ee:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   130f2:	d053      	beq.n	1319c <_lv_txt_get_next_line+0x15c>
    if(force) return break_index;
   130f4:	9b00      	ldr	r3, [sp, #0]
   130f6:	465d      	mov	r5, fp
   130f8:	2b00      	cmp	r3, #0
   130fa:	d057      	beq.n	131ac <_lv_txt_get_next_line+0x16c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   130fc:	2400      	movs	r4, #0
    return 0;
   130fe:	4625      	mov	r5, r4
   13100:	e054      	b.n	131ac <_lv_txt_get_next_line+0x16c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   13102:	4b3f      	ldr	r3, [pc, #252]	; (13200 <_lv_txt_get_next_line+0x1c0>)
   13104:	4650      	mov	r0, sl
   13106:	681a      	ldr	r2, [r3, #0]
   13108:	a90d      	add	r1, sp, #52	; 0x34
   1310a:	4790      	blx	r2
        word_len++;
   1310c:	9b01      	ldr	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1310e:	4602      	mov	r2, r0
        word_len++;
   13110:	3301      	adds	r3, #1
   13112:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   13114:	9b08      	ldr	r3, [sp, #32]
   13116:	b173      	cbz	r3, 13136 <_lv_txt_get_next_line+0xf6>
   13118:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   1311a:	4641      	mov	r1, r8
   1311c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   13120:	f00e fb36 	bl	21790 <_lv_txt_is_cmd>
   13124:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13126:	b130      	cbz	r0, 13136 <_lv_txt_get_next_line+0xf6>
        i_next = i_next_next;
   13128:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1312c:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1312e:	4690      	mov	r8, r2
        i_next = i_next_next;
   13130:	910c      	str	r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   13132:	9301      	str	r3, [sp, #4]
   13134:	e7d8      	b.n	130e8 <_lv_txt_get_next_line+0xa8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   13136:	4641      	mov	r1, r8
   13138:	9802      	ldr	r0, [sp, #8]
   1313a:	9209      	str	r2, [sp, #36]	; 0x24
   1313c:	f00e fb6b 	bl	21816 <lv_font_get_glyph_width>
   13140:	b201      	sxth	r1, r0
        if(letter_w > 0) {
   13142:	2900      	cmp	r1, #0
            cur_w += letter_space;
   13144:	bfc8      	it	gt
   13146:	9b04      	ldrgt	r3, [sp, #16]
        cur_w += letter_w;
   13148:	fa07 f780 	sxtah	r7, r7, r0
   1314c:	b23f      	sxth	r7, r7
            cur_w += letter_space;
   1314e:	bfc4      	itt	gt
   13150:	18ff      	addgt	r7, r7, r3
   13152:	b23f      	sxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   13154:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
        if(letter_w > 0) {
   13158:	9a09      	ldr	r2, [sp, #36]	; 0x24
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   1315a:	d105      	bne.n	13168 <_lv_txt_get_next_line+0x128>
   1315c:	9b04      	ldr	r3, [sp, #16]
   1315e:	1af9      	subs	r1, r7, r3
   13160:	9b07      	ldr	r3, [sp, #28]
   13162:	4299      	cmp	r1, r3
   13164:	bfc8      	it	gt
   13166:	46ab      	movgt	fp, r5
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   13168:	f1b8 0f0a 	cmp.w	r8, #10
   1316c:	d010      	beq.n	13190 <_lv_txt_get_next_line+0x150>
   1316e:	f1b8 0f0d 	cmp.w	r8, #13
   13172:	d00d      	beq.n	13190 <_lv_txt_get_next_line+0x150>
   13174:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   13176:	4b23      	ldr	r3, [pc, #140]	; (13204 <_lv_txt_get_next_line+0x1c4>)
   13178:	b2c8      	uxtb	r0, r1
   1317a:	5c18      	ldrb	r0, [r3, r0]
   1317c:	b920      	cbnz	r0, 13188 <_lv_txt_get_next_line+0x148>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   1317e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   13182:	bf08      	it	eq
   13184:	463c      	moveq	r4, r7
   13186:	e7cf      	b.n	13128 <_lv_txt_get_next_line+0xe8>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   13188:	4580      	cmp	r8, r0
   1318a:	f101 0101 	add.w	r1, r1, #1
   1318e:	d1f2      	bne.n	13176 <_lv_txt_get_next_line+0x136>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   13190:	2d00      	cmp	r5, #0
   13192:	d1ac      	bne.n	130ee <_lv_txt_get_next_line+0xae>
   13194:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   13198:	d1ac      	bne.n	130f4 <_lv_txt_get_next_line+0xb4>
   1319a:	463c      	mov	r4, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   1319c:	9b01      	ldr	r3, [sp, #4]
   1319e:	b123      	cbz	r3, 131aa <_lv_txt_get_next_line+0x16a>
   131a0:	f1b8 0f0d 	cmp.w	r8, #13
   131a4:	d102      	bne.n	131ac <_lv_txt_get_next_line+0x16c>
   131a6:	2a0a      	cmp	r2, #10
   131a8:	d100      	bne.n	131ac <_lv_txt_get_next_line+0x16c>
   131aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
        max_width -= word_w;
   131ac:	eba9 0904 	sub.w	r9, r9, r4
   131b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   131b2:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
   131b6:	b975      	cbnz	r5, 131d6 <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   131b8:	b95b      	cbnz	r3, 131d2 <_lv_txt_get_next_line+0x192>
   131ba:	4b11      	ldr	r3, [pc, #68]	; (13200 <_lv_txt_get_next_line+0x1c0>)
   131bc:	4630      	mov	r0, r6
   131be:	681b      	ldr	r3, [r3, #0]
   131c0:	a90b      	add	r1, sp, #44	; 0x2c
   131c2:	4798      	blx	r3
    if(i == 0) {
   131c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   131c6:	b923      	cbnz	r3, 131d2 <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
   131c8:	4b0d      	ldr	r3, [pc, #52]	; (13200 <_lv_txt_get_next_line+0x1c0>)
   131ca:	4630      	mov	r0, r6
   131cc:	681b      	ldr	r3, [r3, #0]
   131ce:	a90b      	add	r1, sp, #44	; 0x2c
   131d0:	4798      	blx	r3
    return i;
   131d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   131d4:	e752      	b.n	1307c <_lv_txt_get_next_line+0x3c>
        i += advance;
   131d6:	441d      	add	r5, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   131d8:	7833      	ldrb	r3, [r6, #0]
        i += advance;
   131da:	950b      	str	r5, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
   131dc:	2b0a      	cmp	r3, #10
   131de:	d0f1      	beq.n	131c4 <_lv_txt_get_next_line+0x184>
   131e0:	2b0d      	cmp	r3, #13
   131e2:	d0ef      	beq.n	131c4 <_lv_txt_get_next_line+0x184>
        if(txt[i] == '\n' || txt[i] == '\r') {
   131e4:	5d73      	ldrb	r3, [r6, r5]
   131e6:	2b0a      	cmp	r3, #10
   131e8:	d002      	beq.n	131f0 <_lv_txt_get_next_line+0x1b0>
   131ea:	2b0d      	cmp	r3, #13
   131ec:	f47f af54 	bne.w	13098 <_lv_txt_get_next_line+0x58>
            i++;  /* Include the following newline in the current line */
   131f0:	3501      	adds	r5, #1
   131f2:	950b      	str	r5, [sp, #44]	; 0x2c
            break;
   131f4:	e7e6      	b.n	131c4 <_lv_txt_get_next_line+0x184>
    if(txt == NULL) return 0;
   131f6:	9802      	ldr	r0, [sp, #8]
   131f8:	e740      	b.n	1307c <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   131fa:	3001      	adds	r0, #1
   131fc:	e73e      	b.n	1307c <_lv_txt_get_next_line+0x3c>
   131fe:	bf00      	nop
   13200:	200003d4 	.word	0x200003d4
   13204:	00027b5d 	.word	0x00027b5d

00013208 <_lv_txt_get_size>:
{
   13208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
   1320c:	2500      	movs	r5, #0
{
   1320e:	b087      	sub	sp, #28
   13210:	4698      	mov	r8, r3
   13212:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13216:	4604      	mov	r4, r0
   13218:	4616      	mov	r6, r2
   1321a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
   1321e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   13222:	9303      	str	r3, [sp, #12]
    size_res->x = 0;
   13224:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   13226:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   13228:	9102      	str	r1, [sp, #8]
   1322a:	b329      	cbz	r1, 13278 <_lv_txt_get_size+0x70>
    if(font == NULL) return;
   1322c:	b322      	cbz	r2, 13278 <_lv_txt_get_size+0x70>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1322e:	9b03      	ldr	r3, [sp, #12]
    uint16_t letter_height = lv_font_get_line_height(font);
   13230:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   13234:	f013 0f02 	tst.w	r3, #2
   13238:	f647 4318 	movw	r3, #31768	; 0x7c18
   1323c:	bf18      	it	ne
   1323e:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
   13240:	8913      	ldrh	r3, [r2, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   13242:	443b      	add	r3, r7
   13244:	9304      	str	r3, [sp, #16]
            size_res->y += line_space;
   13246:	eb07 030b 	add.w	r3, r7, fp
   1324a:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   1324c:	9b02      	ldr	r3, [sp, #8]
   1324e:	eb03 0905 	add.w	r9, r3, r5
   13252:	5d5b      	ldrb	r3, [r3, r5]
   13254:	b99b      	cbnz	r3, 1327e <_lv_txt_get_size+0x76>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   13256:	b155      	cbz	r5, 1326e <_lv_txt_get_size+0x66>
   13258:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1325c:	2b0a      	cmp	r3, #10
   1325e:	d001      	beq.n	13264 <_lv_txt_get_size+0x5c>
   13260:	2b0d      	cmp	r3, #13
   13262:	d104      	bne.n	1326e <_lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
   13264:	8862      	ldrh	r2, [r4, #2]
   13266:	eb07 030b 	add.w	r3, r7, fp
   1326a:	4413      	add	r3, r2
   1326c:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   1326e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   13272:	bb8b      	cbnz	r3, 132d8 <_lv_txt_get_size+0xd0>
        size_res->y = letter_height;
   13274:	f8a4 b002 	strh.w	fp, [r4, #2]
}
   13278:	b007      	add	sp, #28
   1327a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1327e:	9b03      	ldr	r3, [sp, #12]
   13280:	4642      	mov	r2, r8
   13282:	4631      	mov	r1, r6
   13284:	9300      	str	r3, [sp, #0]
   13286:	4648      	mov	r0, r9
   13288:	4653      	mov	r3, sl
   1328a:	f7ff fed9 	bl	13040 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1328e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   13292:	9a04      	ldr	r2, [sp, #16]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   13294:	4601      	mov	r1, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   13296:	441a      	add	r2, r3
   13298:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1329c:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1329e:	d30a      	bcc.n	132b6 <_lv_txt_get_size+0xae>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   132a0:	2271      	movs	r2, #113	; 0x71
   132a2:	2002      	movs	r0, #2
   132a4:	4b0e      	ldr	r3, [pc, #56]	; (132e0 <_lv_txt_get_size+0xd8>)
   132a6:	490f      	ldr	r1, [pc, #60]	; (132e4 <_lv_txt_get_size+0xdc>)
   132a8:	9310      	str	r3, [sp, #64]	; 0x40
   132aa:	4b0f      	ldr	r3, [pc, #60]	; (132e8 <_lv_txt_get_size+0xe0>)
}
   132ac:	b007      	add	sp, #28
   132ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   132b2:	f7ff bb83 	b.w	129bc <_lv_log_add>
            size_res->y += line_space;
   132b6:	9a05      	ldr	r2, [sp, #20]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   132b8:	4648      	mov	r0, r9
            size_res->y += line_space;
   132ba:	4413      	add	r3, r2
   132bc:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   132be:	9b03      	ldr	r3, [sp, #12]
   132c0:	4632      	mov	r2, r6
   132c2:	9300      	str	r3, [sp, #0]
   132c4:	4643      	mov	r3, r8
   132c6:	f7ff fe69 	bl	12f9c <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   132ca:	f9b4 3000 	ldrsh.w	r3, [r4]
   132ce:	4283      	cmp	r3, r0
   132d0:	bfb8      	it	lt
   132d2:	4603      	movlt	r3, r0
   132d4:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
   132d6:	e7b9      	b.n	1324c <_lv_txt_get_size+0x44>
        size_res->y -= line_space;
   132d8:	1bdf      	subs	r7, r3, r7
   132da:	8067      	strh	r7, [r4, #2]
   132dc:	e7cc      	b.n	13278 <_lv_txt_get_size+0x70>
   132de:	bf00      	nop
   132e0:	00027b9b 	.word	0x00027b9b
   132e4:	00027b65 	.word	0x00027b65
   132e8:	00027bdb 	.word	0x00027bdb

000132ec <get_glyph_dsc_id.isra.0.part.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   132ec:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if(letter == '\0') return 0;

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   132ee:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   132f0:	460d      	mov	r5, r1

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   132f2:	69a3      	ldr	r3, [r4, #24]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   132f4:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   132f6:	428b      	cmp	r3, r1
   132f8:	d00b      	beq.n	13312 <get_glyph_dsc_id.isra.0.part.0+0x26>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
   132fa:	2300      	movs	r3, #0
   132fc:	f04f 0c14 	mov.w	ip, #20
   13300:	8a67      	ldrh	r7, [r4, #18]
   13302:	f3c7 0709 	ubfx	r7, r7, #0, #10
   13306:	b29a      	uxth	r2, r3
   13308:	4297      	cmp	r7, r2
   1330a:	d805      	bhi.n	13318 <get_glyph_dsc_id.isra.0.part.0+0x2c>
        fdsc->last_glyph_id = glyph_id;
        return glyph_id;
    }

    fdsc->last_letter = letter;
    fdsc->last_glyph_id = 0;
   1330c:	2000      	movs	r0, #0
    fdsc->last_letter = letter;
   1330e:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   13310:	e011      	b.n	13336 <get_glyph_dsc_id.isra.0.part.0+0x4a>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   13312:	69e0      	ldr	r0, [r4, #28]
    return 0;

}
   13314:	b005      	add	sp, #20
   13316:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   13318:	fb0c f603 	mul.w	r6, ip, r3
   1331c:	68a2      	ldr	r2, [r4, #8]
   1331e:	3301      	adds	r3, #1
   13320:	1991      	adds	r1, r2, r6
   13322:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   13324:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   13326:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   13328:	4282      	cmp	r2, r0
   1332a:	d8ec      	bhi.n	13306 <get_glyph_dsc_id.isra.0.part.0+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   1332c:	7c8b      	ldrb	r3, [r1, #18]
   1332e:	b923      	cbnz	r3, 1333a <get_glyph_dsc_id.isra.0.part.0+0x4e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   13330:	88c8      	ldrh	r0, [r1, #6]
   13332:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   13334:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   13336:	61e0      	str	r0, [r4, #28]
    return 0;
   13338:	e7ec      	b.n	13314 <get_glyph_dsc_id.isra.0.part.0+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1333a:	2b01      	cmp	r3, #1
   1333c:	d104      	bne.n	13348 <get_glyph_dsc_id.isra.0.part.0+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1333e:	68cb      	ldr	r3, [r1, #12]
   13340:	5c98      	ldrb	r0, [r3, r2]
   13342:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   13344:	4418      	add	r0, r3
   13346:	e7f5      	b.n	13334 <get_glyph_dsc_id.isra.0.part.0+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   13348:	2b02      	cmp	r3, #2
   1334a:	d113      	bne.n	13374 <get_glyph_dsc_id.isra.0.part.0+0x88>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1334c:	4816      	ldr	r0, [pc, #88]	; (133a8 <get_glyph_dsc_id.isra.0.part.0+0xbc>)
            uint16_t key = rcp;
   1334e:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   13352:	8a0a      	ldrh	r2, [r1, #16]
   13354:	9000      	str	r0, [sp, #0]
   13356:	6889      	ldr	r1, [r1, #8]
   13358:	f10d 000e 	add.w	r0, sp, #14
   1335c:	f00e fa34 	bl	217c8 <_lv_utils_bsearch>
            if(p) {
   13360:	2800      	cmp	r0, #0
   13362:	d0e7      	beq.n	13334 <get_glyph_dsc_id.isra.0.part.0+0x48>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   13364:	68a3      	ldr	r3, [r4, #8]
   13366:	441e      	add	r6, r3
   13368:	68b3      	ldr	r3, [r6, #8]
   1336a:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   1336c:	88f3      	ldrh	r3, [r6, #6]
   1336e:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   13372:	e7df      	b.n	13334 <get_glyph_dsc_id.isra.0.part.0+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   13374:	2b03      	cmp	r3, #3
   13376:	d115      	bne.n	133a4 <get_glyph_dsc_id.isra.0.part.0+0xb8>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   13378:	4b0b      	ldr	r3, [pc, #44]	; (133a8 <get_glyph_dsc_id.isra.0.part.0+0xbc>)
            uint16_t key = rcp;
   1337a:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1337e:	8a0a      	ldrh	r2, [r1, #16]
   13380:	9300      	str	r3, [sp, #0]
   13382:	6889      	ldr	r1, [r1, #8]
   13384:	2302      	movs	r3, #2
   13386:	f10d 000e 	add.w	r0, sp, #14
   1338a:	f00e fa1d 	bl	217c8 <_lv_utils_bsearch>
            if(p) {
   1338e:	2800      	cmp	r0, #0
   13390:	d0d0      	beq.n	13334 <get_glyph_dsc_id.isra.0.part.0+0x48>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   13392:	68a3      	ldr	r3, [r4, #8]
   13394:	441e      	add	r6, r3
   13396:	68b3      	ldr	r3, [r6, #8]
   13398:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1339a:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   1339c:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1339e:	5c18      	ldrb	r0, [r3, r0]
   133a0:	88f3      	ldrh	r3, [r6, #6]
   133a2:	e7cf      	b.n	13344 <get_glyph_dsc_id.isra.0.part.0+0x58>
        uint32_t glyph_id = 0;
   133a4:	2000      	movs	r0, #0
   133a6:	e7c5      	b.n	13334 <get_glyph_dsc_id.isra.0.part.0+0x48>
   133a8:	00021853 	.word	0x00021853

000133ac <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
   133ac:	2a09      	cmp	r2, #9
{
   133ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   133b2:	460c      	mov	r4, r1
   133b4:	4680      	mov	r8, r0
   133b6:	4611      	mov	r1, r2
   133b8:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
   133ba:	d006      	beq.n	133ca <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
   133bc:	2a00      	cmp	r2, #0
   133be:	d136      	bne.n	1342e <lv_font_get_glyph_dsc_fmt_txt+0x82>
    if(!gid) return false;
   133c0:	2600      	movs	r6, #0
}
   133c2:	4630      	mov	r0, r6
   133c4:	b004      	add	sp, #16
   133c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
   133ca:	2601      	movs	r6, #1
        unicode_letter = ' ';
   133cc:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   133ce:	46c1      	mov	r9, r8
   133d0:	f859 7f10 	ldr.w	r7, [r9, #16]!
   133d4:	4648      	mov	r0, r9
   133d6:	f7ff ff89 	bl	132ec <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
   133da:	4605      	mov	r5, r0
   133dc:	2800      	cmp	r0, #0
   133de:	d0ef      	beq.n	133c0 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
   133e0:	68fb      	ldr	r3, [r7, #12]
   133e2:	bb33      	cbnz	r3, 13432 <lv_font_get_glyph_dsc_fmt_txt+0x86>
    int8_t kvalue = 0;
   133e4:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   133e6:	687b      	ldr	r3, [r7, #4]
   133e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   133ec:	8a3b      	ldrh	r3, [r7, #16]
   133ee:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
   133f0:	8868      	ldrh	r0, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   133f2:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   133f4:	f3c0 120b 	ubfx	r2, r0, #4, #12
   133f8:	4610      	mov	r0, r2
    if(is_tab) adv_w *= 2;
   133fa:	b10e      	cbz	r6, 13400 <lv_font_get_glyph_dsc_fmt_txt+0x54>
   133fc:	b210      	sxth	r0, r2
   133fe:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   13400:	3308      	adds	r3, #8
   13402:	4403      	add	r3, r0
   13404:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   13406:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   13408:	796b      	ldrb	r3, [r5, #5]
   1340a:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   1340c:	792b      	ldrb	r3, [r5, #4]
   1340e:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   13410:	f995 2006 	ldrsb.w	r2, [r5, #6]
   13414:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   13416:	f995 2007 	ldrsb.w	r2, [r5, #7]
   1341a:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   1341c:	7cfa      	ldrb	r2, [r7, #19]
   1341e:	f3c2 0283 	ubfx	r2, r2, #2, #4
   13422:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   13424:	2e00      	cmp	r6, #0
   13426:	d060      	beq.n	134ea <lv_font_get_glyph_dsc_fmt_txt+0x13e>
   13428:	005b      	lsls	r3, r3, #1
   1342a:	8063      	strh	r3, [r4, #2]
   1342c:	e7c9      	b.n	133c2 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
   1342e:	2600      	movs	r6, #0
   13430:	e7cd      	b.n	133ce <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
   13432:	f1ba 0f00 	cmp.w	sl, #0
   13436:	d0d5      	beq.n	133e4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
   13438:	4651      	mov	r1, sl
   1343a:	4648      	mov	r0, r9
   1343c:	f7ff ff56 	bl	132ec <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
   13440:	2800      	cmp	r0, #0
   13442:	d0cf      	beq.n	133e4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
   13444:	f8d8 3010 	ldr.w	r3, [r8, #16]
{
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
   13448:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1344c:	7cdb      	ldrb	r3, [r3, #19]
   1344e:	065b      	lsls	r3, r3, #25
   13450:	d436      	bmi.n	134c0 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
        if(kdsc->glyph_ids_size == 0) {
   13452:	f898 300b 	ldrb.w	r3, [r8, #11]
   13456:	f013 0303 	ands.w	r3, r3, #3
   1345a:	d119      	bne.n	13490 <lv_font_get_glyph_dsc_fmt_txt+0xe4>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
   1345c:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   13460:	f8d8 2008 	ldr.w	r2, [r8, #8]
   13464:	4b22      	ldr	r3, [pc, #136]	; (134f0 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   13466:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1346a:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1346e:	9300      	str	r3, [sp, #0]
   13470:	4649      	mov	r1, r9
   13472:	2302      	movs	r3, #2
   13474:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13478:	a803      	add	r0, sp, #12
   1347a:	f00e f9a5 	bl	217c8 <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
   1347e:	2800      	cmp	r0, #0
   13480:	d0b1      	beq.n	133e6 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   13482:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   13486:	0840      	lsrs	r0, r0, #1

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
                value = kdsc->values[ofs];
   13488:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1348c:	5618      	ldrsb	r0, [r3, r0]
   1348e:	e7aa      	b.n	133e6 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
   13490:	2b01      	cmp	r3, #1
   13492:	d1a7      	bne.n	133e4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
   13494:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   13498:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1349c:	4b15      	ldr	r3, [pc, #84]	; (134f4 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   1349e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   134a2:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   134a4:	9300      	str	r3, [sp, #0]
   134a6:	4649      	mov	r1, r9
   134a8:	2304      	movs	r3, #4
   134aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   134ae:	a803      	add	r0, sp, #12
   134b0:	f00e f98a 	bl	217c8 <_lv_utils_bsearch>
            if(kid_p) {
   134b4:	2800      	cmp	r0, #0
   134b6:	d096      	beq.n	133e6 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   134b8:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   134bc:	0900      	lsrs	r0, r0, #4
   134be:	e7e3      	b.n	13488 <lv_font_get_glyph_dsc_fmt_txt+0xdc>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   134c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   134c4:	5d5b      	ldrb	r3, [r3, r5]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
   134c6:	2b00      	cmp	r3, #0
   134c8:	d08c      	beq.n	133e4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   134ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
   134ce:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   134d0:	2900      	cmp	r1, #0
   134d2:	d087      	beq.n	133e4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   134d4:	f8d8 2000 	ldr.w	r2, [r8]
   134d8:	f898 000d 	ldrb.w	r0, [r8, #13]
   134dc:	3b01      	subs	r3, #1
   134de:	440a      	add	r2, r1
   134e0:	fb00 2303 	mla	r3, r0, r3, r2
   134e4:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   134e8:	e77d      	b.n	133e6 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
   134ea:	2601      	movs	r6, #1
   134ec:	e769      	b.n	133c2 <lv_font_get_glyph_dsc_fmt_txt+0x16>
   134ee:	bf00      	nop
   134f0:	0002182f 	.word	0x0002182f
   134f4:	00021841 	.word	0x00021841

000134f8 <_lv_font_clean_up_fmt_txt>:
{
   134f8:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
   134fa:	4c04      	ldr	r4, [pc, #16]	; (1350c <_lv_font_clean_up_fmt_txt+0x14>)
   134fc:	6820      	ldr	r0, [r4, #0]
   134fe:	b118      	cbz	r0, 13508 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
   13500:	f7ff faac 	bl	12a5c <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
   13504:	2300      	movs	r3, #0
   13506:	6023      	str	r3, [r4, #0]
}
   13508:	bd10      	pop	{r4, pc}
   1350a:	bf00      	nop
   1350c:	20025dd8 	.word	0x20025dd8

00013510 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
   13510:	b570      	push	{r4, r5, r6, lr}
   13512:	4604      	mov	r4, r0
    if(th->base) {
   13514:	6880      	ldr	r0, [r0, #8]
{
   13516:	460d      	mov	r5, r1
   13518:	4616      	mov	r6, r2
    if(th->base) {
   1351a:	b108      	cbz	r0, 13520 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
   1351c:	f7ff fff8 	bl	13510 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
   13520:	6863      	ldr	r3, [r4, #4]
   13522:	b123      	cbz	r3, 1352e <apply_theme+0x1e>
        th->apply_xcb(obj, name);
   13524:	4631      	mov	r1, r6
   13526:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
   13528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
   1352c:	4718      	bx	r3
    else if(th->apply_cb) {
   1352e:	6823      	ldr	r3, [r4, #0]
   13530:	b133      	cbz	r3, 13540 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
   13532:	4804      	ldr	r0, [pc, #16]	; (13544 <apply_theme+0x34>)
   13534:	4632      	mov	r2, r6
   13536:	4629      	mov	r1, r5
}
   13538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
   1353c:	6800      	ldr	r0, [r0, #0]
   1353e:	4718      	bx	r3
}
   13540:	bd70      	pop	{r4, r5, r6, pc}
   13542:	bf00      	nop
   13544:	20025eb0 	.word	0x20025eb0

00013548 <lv_theme_set_act>:
    act_theme = th;
   13548:	4b01      	ldr	r3, [pc, #4]	; (13550 <lv_theme_set_act+0x8>)
   1354a:	6018      	str	r0, [r3, #0]
}
   1354c:	4770      	bx	lr
   1354e:	bf00      	nop
   13550:	20025eb0 	.word	0x20025eb0

00013554 <lv_theme_apply>:
{
   13554:	b538      	push	{r3, r4, r5, lr}
   13556:	1e4b      	subs	r3, r1, #1
   13558:	4604      	mov	r4, r0
   1355a:	460d      	mov	r5, r1
   1355c:	2b07      	cmp	r3, #7
   1355e:	d809      	bhi.n	13574 <lv_theme_apply+0x20>
   13560:	e8df f003 	tbb	[pc, r3]
   13564:	10040404 	.word	0x10040404
   13568:	04040415 	.word	0x04040415
    switch(name) {
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1356c:	2100      	movs	r1, #0

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   1356e:	4620      	mov	r0, r4
   13570:	f7fb fdf8 	bl	f164 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
   13574:	4b0a      	ldr	r3, [pc, #40]	; (135a0 <lv_theme_apply+0x4c>)
   13576:	462a      	mov	r2, r5
   13578:	4621      	mov	r1, r4
   1357a:	6818      	ldr	r0, [r3, #0]
}
   1357c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
   13580:	f7ff bfc6 	b.w	13510 <apply_theme>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   13584:	2100      	movs	r1, #0
   13586:	f7fb fded 	bl	f164 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   1358a:	2140      	movs	r1, #64	; 0x40
   1358c:	e7ef      	b.n	1356e <lv_theme_apply+0x1a>
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   1358e:	2100      	movs	r1, #0
   13590:	f7fb fde8 	bl	f164 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   13594:	2101      	movs	r1, #1
   13596:	4620      	mov	r0, r4
   13598:	f7fb fde4 	bl	f164 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   1359c:	2102      	movs	r1, #2
   1359e:	e7e6      	b.n	1356e <lv_theme_apply+0x1a>
   135a0:	20025eb0 	.word	0x20025eb0

000135a4 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
   135a4:	4b01      	ldr	r3, [pc, #4]	; (135ac <lv_theme_get_font_normal+0x8>)
   135a6:	681b      	ldr	r3, [r3, #0]
}
   135a8:	6998      	ldr	r0, [r3, #24]
   135aa:	4770      	bx	lr
   135ac:	20025eb0 	.word	0x20025eb0

000135b0 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
   135b0:	3a01      	subs	r2, #1
{
   135b2:	b570      	push	{r4, r5, r6, lr}
   135b4:	460c      	mov	r4, r1
   135b6:	2a05      	cmp	r2, #5
   135b8:	d80c      	bhi.n	135d4 <theme_apply+0x24>
   135ba:	e8df f002 	tbb	[pc, r2]
   135be:	1203      	.short	0x1203
   135c0:	1238221a 	.word	0x1238221a
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   135c4:	2100      	movs	r1, #0
   135c6:	4620      	mov	r0, r4
   135c8:	f008 fe28 	bl	1c21c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
   135cc:	4b2c      	ldr	r3, [pc, #176]	; (13680 <theme_apply+0xd0>)
   135ce:	6819      	ldr	r1, [r3, #0]
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
            _lv_style_list_add_style(list, &styles->pad_small);
            _lv_style_list_add_style(list, &styles->chart_series_bg);

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
            _lv_style_list_add_style(list, &styles->chart_series);
   135d0:	f7fc ffc4 	bl	1055c <_lv_style_list_add_style>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   135d4:	22ff      	movs	r2, #255	; 0xff
   135d6:	4620      	mov	r0, r4
}
   135d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   135dc:	4611      	mov	r1, r2
   135de:	f7fc b8cd 	b.w	f77c <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   135e2:	2100      	movs	r1, #0
   135e4:	4620      	mov	r0, r4
   135e6:	f008 fe19 	bl	1c21c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   135ea:	4b25      	ldr	r3, [pc, #148]	; (13680 <theme_apply+0xd0>)
   135ec:	6819      	ldr	r1, [r3, #0]
   135ee:	3104      	adds	r1, #4
   135f0:	e7ee      	b.n	135d0 <theme_apply+0x20>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   135f2:	2100      	movs	r1, #0
   135f4:	4620      	mov	r0, r4
   135f6:	f008 fe11 	bl	1c21c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
   135fa:	4b21      	ldr	r3, [pc, #132]	; (13680 <theme_apply+0xd0>)
   135fc:	6819      	ldr	r1, [r3, #0]
   135fe:	3110      	adds	r1, #16
   13600:	e7e6      	b.n	135d0 <theme_apply+0x20>
            _lv_style_list_add_style(list, &styles->cb_bg);
   13602:	4e1f      	ldr	r6, [pc, #124]	; (13680 <theme_apply+0xd0>)
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   13604:	2100      	movs	r1, #0
   13606:	4620      	mov	r0, r4
   13608:	f008 fe08 	bl	1c21c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cb_bg);
   1360c:	6831      	ldr	r1, [r6, #0]
   1360e:	3128      	adds	r1, #40	; 0x28
   13610:	f7fc ffa4 	bl	1055c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   13614:	2140      	movs	r1, #64	; 0x40
   13616:	4620      	mov	r0, r4
   13618:	f008 fe00 	bl	1c21c <lv_obj_get_style_list>
   1361c:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->btn);
   1361e:	6831      	ldr	r1, [r6, #0]
   13620:	3110      	adds	r1, #16
   13622:	f7fc ff9b 	bl	1055c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
   13626:	6831      	ldr	r1, [r6, #0]
   13628:	4628      	mov	r0, r5
   1362a:	312c      	adds	r1, #44	; 0x2c
   1362c:	e7d0      	b.n	135d0 <theme_apply+0x20>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   1362e:	2100      	movs	r1, #0
   13630:	4620      	mov	r0, r4
   13632:	f008 fdf3 	bl	1c21c <lv_obj_get_style_list>
   13636:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
   13638:	4d11      	ldr	r5, [pc, #68]	; (13680 <theme_apply+0xd0>)
   1363a:	6829      	ldr	r1, [r5, #0]
   1363c:	3104      	adds	r1, #4
   1363e:	f7fc ff8d 	bl	1055c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
   13642:	6829      	ldr	r1, [r5, #0]
   13644:	4630      	mov	r0, r6
   13646:	311c      	adds	r1, #28
   13648:	f7fc ff88 	bl	1055c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
   1364c:	6829      	ldr	r1, [r5, #0]
   1364e:	4630      	mov	r0, r6
   13650:	3118      	adds	r1, #24
   13652:	f7fc ff83 	bl	1055c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   13656:	2101      	movs	r1, #1
   13658:	4620      	mov	r0, r4
   1365a:	f008 fddf 	bl	1c21c <lv_obj_get_style_list>
   1365e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->pad_small);
   13660:	6829      	ldr	r1, [r5, #0]
   13662:	3118      	adds	r1, #24
   13664:	f7fc ff7a 	bl	1055c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   13668:	6829      	ldr	r1, [r5, #0]
   1366a:	4630      	mov	r0, r6
   1366c:	3120      	adds	r1, #32
   1366e:	f7fc ff75 	bl	1055c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   13672:	2102      	movs	r1, #2
   13674:	4620      	mov	r0, r4
   13676:	f008 fdd1 	bl	1c21c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->chart_series);
   1367a:	6829      	ldr	r1, [r5, #0]
   1367c:	3124      	adds	r1, #36	; 0x24
   1367e:	e7a7      	b.n	135d0 <theme_apply+0x20>
   13680:	20025eb4 	.word	0x20025eb4

00013684 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
   13684:	4b03      	ldr	r3, [pc, #12]	; (13694 <style_init_reset+0x10>)
   13686:	781b      	ldrb	r3, [r3, #0]
   13688:	b10b      	cbz	r3, 1368e <style_init_reset+0xa>
   1368a:	f009 be6d 	b.w	1d368 <lv_style_reset>
    else lv_style_init(style);
   1368e:	f009 be63 	b.w	1d358 <lv_style_init>
   13692:	bf00      	nop
   13694:	2002a185 	.word	0x2002a185

00013698 <lv_theme_material_init>:
{
   13698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1369c:	461f      	mov	r7, r3
    if(!inited) {
   1369e:	4bca      	ldr	r3, [pc, #808]	; (139c8 <lv_theme_material_init+0x330>)
{
   136a0:	4680      	mov	r8, r0
    if(!inited) {
   136a2:	781b      	ldrb	r3, [r3, #0]
{
   136a4:	4689      	mov	r9, r1
   136a6:	4616      	mov	r6, r2
   136a8:	4cc8      	ldr	r4, [pc, #800]	; (139cc <lv_theme_material_init+0x334>)
    if(!inited) {
   136aa:	b92b      	cbnz	r3, 136b8 <lv_theme_material_init+0x20>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   136ac:	2030      	movs	r0, #48	; 0x30
   136ae:	f7ff f9ad 	bl	12a0c <lv_mem_alloc>
   136b2:	4bc7      	ldr	r3, [pc, #796]	; (139d0 <lv_theme_material_init+0x338>)
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   136b4:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   136b6:	6018      	str	r0, [r3, #0]
    theme.color_primary = color_primary;
   136b8:	4dc6      	ldr	r5, [pc, #792]	; (139d4 <lv_theme_material_init+0x33c>)
    theme.font_normal = font_normal;
   136ba:	9b08      	ldr	r3, [sp, #32]
    style_init_reset(&styles->scr);
   136bc:	6820      	ldr	r0, [r4, #0]
    theme.font_normal = font_normal;
   136be:	61ab      	str	r3, [r5, #24]
    theme.font_subtitle = font_subtitle;
   136c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    theme.font_small = font_small;
   136c2:	616f      	str	r7, [r5, #20]
    theme.font_subtitle = font_subtitle;
   136c4:	61eb      	str	r3, [r5, #28]
    theme.font_title = font_title;
   136c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    theme.color_secondary = color_secondary;
   136c8:	e9c5 8903 	strd	r8, r9, [r5, #12]
    theme.flags = flags;
   136cc:	e9c5 3608 	strd	r3, r6, [r5, #32]
    style_init_reset(&styles->scr);
   136d0:	f7ff ffd8 	bl	13684 <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   136d4:	6820      	ldr	r0, [r4, #0]
   136d6:	22ff      	movs	r2, #255	; 0xff
   136d8:	212c      	movs	r1, #44	; 0x2c
   136da:	f009 ff23 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   136de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   136e0:	6826      	ldr	r6, [r4, #0]
   136e2:	079b      	lsls	r3, r3, #30
   136e4:	bf4c      	ite	mi
   136e6:	48bc      	ldrmi	r0, [pc, #752]	; (139d8 <lv_theme_material_init+0x340>)
   136e8:	48bc      	ldrpl	r0, [pc, #752]	; (139dc <lv_theme_material_init+0x344>)
   136ea:	f00e f8d2 	bl	21892 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   136ee:	2129      	movs	r1, #41	; 0x29
   136f0:	4602      	mov	r2, r0
   136f2:	4630      	mov	r0, r6
   136f4:	f009 fed2 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   136f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   136fa:	6826      	ldr	r6, [r4, #0]
   136fc:	079f      	lsls	r7, r3, #30
   136fe:	bf4c      	ite	mi
   13700:	48b7      	ldrmi	r0, [pc, #732]	; (139e0 <lv_theme_material_init+0x348>)
   13702:	48b8      	ldrpl	r0, [pc, #736]	; (139e4 <lv_theme_material_init+0x34c>)
   13704:	f00e f8c5 	bl	21892 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13708:	f248 0189 	movw	r1, #32905	; 0x8089
   1370c:	4602      	mov	r2, r0
   1370e:	4630      	mov	r0, r6
   13710:	f009 fec4 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   13714:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13716:	6826      	ldr	r6, [r4, #0]
   13718:	0798      	lsls	r0, r3, #30
   1371a:	bf4c      	ite	mi
   1371c:	48b0      	ldrmi	r0, [pc, #704]	; (139e0 <lv_theme_material_init+0x348>)
   1371e:	48b1      	ldrpl	r0, [pc, #708]	; (139e4 <lv_theme_material_init+0x34c>)
   13720:	f00e f8b7 	bl	21892 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13724:	2179      	movs	r1, #121	; 0x79
   13726:	4602      	mov	r2, r0
   13728:	4630      	mov	r0, r6
   1372a:	f009 feb7 	bl	1d49c <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   1372e:	217e      	movs	r1, #126	; 0x7e
   13730:	69aa      	ldr	r2, [r5, #24]
   13732:	6820      	ldr	r0, [r4, #0]
   13734:	f009 ff3c 	bl	1d5b0 <_lv_style_set_ptr>
    style_init_reset(&styles->bg);
   13738:	6820      	ldr	r0, [r4, #0]
   1373a:	3004      	adds	r0, #4
   1373c:	f7ff ffa2 	bl	13684 <style_init_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13740:	2000      	movs	r0, #0
   13742:	6826      	ldr	r6, [r4, #0]
   13744:	f7fe ff0a 	bl	1255c <lv_disp_get_dpi>
   13748:	300a      	adds	r0, #10
   1374a:	00c0      	lsls	r0, r0, #3
   1374c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13750:	f106 0604 	add.w	r6, r6, #4
   13754:	f2c1 8097 	blt.w	14886 <lv_theme_material_init+0x11ee>
   13758:	2000      	movs	r0, #0
   1375a:	f7fe feff 	bl	1255c <lv_disp_get_dpi>
   1375e:	f100 020a 	add.w	r2, r0, #10
   13762:	20a0      	movs	r0, #160	; 0xa0
   13764:	00d2      	lsls	r2, r2, #3
   13766:	fb92 f2f0 	sdiv	r2, r2, r0
   1376a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1376c:	4630      	mov	r0, r6
   1376e:	2101      	movs	r1, #1
   13770:	f009 fe50 	bl	1d414 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   13774:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13776:	212c      	movs	r1, #44	; 0x2c
   13778:	3004      	adds	r0, #4
   1377a:	22ff      	movs	r2, #255	; 0xff
   1377c:	f009 fed2 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   13780:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13782:	6826      	ldr	r6, [r4, #0]
   13784:	0799      	lsls	r1, r3, #30
   13786:	bf4c      	ite	mi
   13788:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
   1378c:	4896      	ldrpl	r0, [pc, #600]	; (139e8 <lv_theme_material_init+0x350>)
   1378e:	f00e f880 	bl	21892 <lv_color_hex>
   13792:	3604      	adds	r6, #4
   13794:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13796:	2129      	movs	r1, #41	; 0x29
   13798:	4630      	mov	r0, r6
   1379a:	f009 fe7f 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   1379e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   137a0:	6826      	ldr	r6, [r4, #0]
   137a2:	079a      	lsls	r2, r3, #30
   137a4:	bf4c      	ite	mi
   137a6:	4891      	ldrmi	r0, [pc, #580]	; (139ec <lv_theme_material_init+0x354>)
   137a8:	4891      	ldrpl	r0, [pc, #580]	; (139f0 <lv_theme_material_init+0x358>)
   137aa:	f00e f872 	bl	21892 <lv_color_hex>
   137ae:	3604      	adds	r6, #4
   137b0:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   137b2:	2139      	movs	r1, #57	; 0x39
   137b4:	4630      	mov	r0, r6
   137b6:	f009 fe71 	bl	1d49c <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
   137ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   137bc:	069b      	lsls	r3, r3, #26
   137be:	d406      	bmi.n	137ce <lv_theme_material_init+0x136>
   137c0:	6820      	ldr	r0, [r4, #0]
   137c2:	f240 2139 	movw	r1, #569	; 0x239
   137c6:	68ea      	ldr	r2, [r5, #12]
   137c8:	3004      	adds	r0, #4
   137ca:	f009 fe67 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   137ce:	6820      	ldr	r0, [r4, #0]
   137d0:	f240 4139 	movw	r1, #1081	; 0x439
   137d4:	692a      	ldr	r2, [r5, #16]
   137d6:	3004      	adds	r0, #4
   137d8:	f009 fe60 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   137dc:	2000      	movs	r0, #0
   137de:	6826      	ldr	r6, [r4, #0]
   137e0:	f7fe febc 	bl	1255c <lv_disp_get_dpi>
   137e4:	3028      	adds	r0, #40	; 0x28
   137e6:	0040      	lsls	r0, r0, #1
   137e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   137ec:	f106 0604 	add.w	r6, r6, #4
   137f0:	f2c1 804c 	blt.w	1488c <lv_theme_material_init+0x11f4>
   137f4:	2000      	movs	r0, #0
   137f6:	f7fe feb1 	bl	1255c <lv_disp_get_dpi>
   137fa:	f100 0228 	add.w	r2, r0, #40	; 0x28
   137fe:	20a0      	movs	r0, #160	; 0xa0
   13800:	0052      	lsls	r2, r2, #1
   13802:	fb92 f2f0 	sdiv	r2, r2, r0
   13806:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13808:	4630      	mov	r0, r6
   1380a:	2130      	movs	r1, #48	; 0x30
   1380c:	f009 fe02 	bl	1d414 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   13810:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   13812:	2201      	movs	r2, #1
   13814:	3004      	adds	r0, #4
   13816:	2133      	movs	r1, #51	; 0x33
   13818:	f009 fdfc 	bl	1d414 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1381c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1381e:	6826      	ldr	r6, [r4, #0]
   13820:	079f      	lsls	r7, r3, #30
   13822:	bf54      	ite	pl
   13824:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13828:	486d      	ldrmi	r0, [pc, #436]	; (139e0 <lv_theme_material_init+0x348>)
   1382a:	f00e f832 	bl	21892 <lv_color_hex>
   1382e:	3604      	adds	r6, #4
   13830:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13832:	f248 0189 	movw	r1, #32905	; 0x8089
   13836:	4630      	mov	r0, r6
   13838:	f009 fe30 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   1383c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   1383e:	217e      	movs	r1, #126	; 0x7e
   13840:	3004      	adds	r0, #4
   13842:	69aa      	ldr	r2, [r5, #24]
   13844:	f009 feb4 	bl	1d5b0 <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1384a:	6826      	ldr	r6, [r4, #0]
   1384c:	0798      	lsls	r0, r3, #30
   1384e:	bf54      	ite	pl
   13850:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13854:	4862      	ldrmi	r0, [pc, #392]	; (139e0 <lv_theme_material_init+0x348>)
   13856:	f00e f81c 	bl	21892 <lv_color_hex>
   1385a:	3604      	adds	r6, #4
   1385c:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1385e:	2179      	movs	r1, #121	; 0x79
   13860:	4630      	mov	r0, r6
   13862:	f009 fe1b 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13868:	6826      	ldr	r6, [r4, #0]
   1386a:	0799      	lsls	r1, r3, #30
   1386c:	bf54      	ite	pl
   1386e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13872:	485b      	ldrmi	r0, [pc, #364]	; (139e0 <lv_theme_material_init+0x348>)
   13874:	f00e f80d 	bl	21892 <lv_color_hex>
   13878:	3604      	adds	r6, #4
   1387a:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1387c:	f248 01a9 	movw	r1, #32937	; 0x80a9
   13880:	4630      	mov	r0, r6
   13882:	f009 fe0b 	bl	1d49c <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13888:	6826      	ldr	r6, [r4, #0]
   1388a:	079a      	lsls	r2, r3, #30
   1388c:	bf54      	ite	pl
   1388e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13892:	4853      	ldrmi	r0, [pc, #332]	; (139e0 <lv_theme_material_init+0x348>)
   13894:	f00d fffd 	bl	21892 <lv_color_hex>
   13898:	3604      	adds	r6, #4
   1389a:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1389c:	2199      	movs	r1, #153	; 0x99
   1389e:	4630      	mov	r0, r6
   138a0:	f009 fdfc 	bl	1d49c <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   138a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   138a6:	2201      	movs	r2, #1
   138a8:	2190      	movs	r1, #144	; 0x90
   138aa:	3004      	adds	r0, #4
   138ac:	f009 fdb2 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   138b0:	2000      	movs	r0, #0
   138b2:	6827      	ldr	r7, [r4, #0]
   138b4:	f7fe fe5e 	bl	12574 <lv_disp_get_size_category>
   138b8:	2801      	cmp	r0, #1
   138ba:	f107 0704 	add.w	r7, r7, #4
   138be:	f04f 0000 	mov.w	r0, #0
   138c2:	f200 87e6 	bhi.w	14892 <lv_theme_material_init+0x11fa>
   138c6:	f7fe fe49 	bl	1255c <lv_disp_get_dpi>
   138ca:	260f      	movs	r6, #15
   138cc:	f04f 0850 	mov.w	r8, #80	; 0x50
   138d0:	fb00 8006 	mla	r0, r0, r6, r8
   138d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   138d8:	f280 87e0 	bge.w	1489c <lv_theme_material_init+0x1204>
   138dc:	2601      	movs	r6, #1
   138de:	2000      	movs	r0, #0
   138e0:	f7fe fe3c 	bl	1255c <lv_disp_get_dpi>
   138e4:	3028      	adds	r0, #40	; 0x28
   138e6:	0040      	lsls	r0, r0, #1
   138e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   138ec:	f2c0 87e1 	blt.w	148b2 <lv_theme_material_init+0x121a>
   138f0:	2000      	movs	r0, #0
   138f2:	f7fe fe33 	bl	1255c <lv_disp_get_dpi>
   138f6:	f100 0228 	add.w	r2, r0, #40	; 0x28
   138fa:	20a0      	movs	r0, #160	; 0xa0
   138fc:	0052      	lsls	r2, r2, #1
   138fe:	fb92 f2f0 	sdiv	r2, r2, r0
   13902:	b212      	sxth	r2, r2
   13904:	4432      	add	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13906:	4638      	mov	r0, r7
   13908:	2112      	movs	r1, #18
   1390a:	b212      	sxth	r2, r2
   1390c:	f009 fd82 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13910:	2000      	movs	r0, #0
   13912:	6827      	ldr	r7, [r4, #0]
   13914:	f7fe fe2e 	bl	12574 <lv_disp_get_size_category>
   13918:	2801      	cmp	r0, #1
   1391a:	f107 0704 	add.w	r7, r7, #4
   1391e:	f04f 0000 	mov.w	r0, #0
   13922:	f200 87c9 	bhi.w	148b8 <lv_theme_material_init+0x1220>
   13926:	f7fe fe19 	bl	1255c <lv_disp_get_dpi>
   1392a:	260f      	movs	r6, #15
   1392c:	f04f 0850 	mov.w	r8, #80	; 0x50
   13930:	fb00 8006 	mla	r0, r0, r6, r8
   13934:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13938:	f280 87c3 	bge.w	148c2 <lv_theme_material_init+0x122a>
   1393c:	2601      	movs	r6, #1
   1393e:	2000      	movs	r0, #0
   13940:	f7fe fe0c 	bl	1255c <lv_disp_get_dpi>
   13944:	3028      	adds	r0, #40	; 0x28
   13946:	0040      	lsls	r0, r0, #1
   13948:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1394c:	f2c0 87c4 	blt.w	148d8 <lv_theme_material_init+0x1240>
   13950:	2000      	movs	r0, #0
   13952:	f7fe fe03 	bl	1255c <lv_disp_get_dpi>
   13956:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1395a:	20a0      	movs	r0, #160	; 0xa0
   1395c:	0052      	lsls	r2, r2, #1
   1395e:	fb92 f2f0 	sdiv	r2, r2, r0
   13962:	b212      	sxth	r2, r2
   13964:	4432      	add	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13966:	4638      	mov	r0, r7
   13968:	2113      	movs	r1, #19
   1396a:	b212      	sxth	r2, r2
   1396c:	f009 fd52 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13970:	2000      	movs	r0, #0
   13972:	6827      	ldr	r7, [r4, #0]
   13974:	f7fe fdfe 	bl	12574 <lv_disp_get_size_category>
   13978:	2801      	cmp	r0, #1
   1397a:	f107 0704 	add.w	r7, r7, #4
   1397e:	f04f 0000 	mov.w	r0, #0
   13982:	f200 87ac 	bhi.w	148de <lv_theme_material_init+0x1246>
   13986:	f7fe fde9 	bl	1255c <lv_disp_get_dpi>
   1398a:	260f      	movs	r6, #15
   1398c:	f04f 0850 	mov.w	r8, #80	; 0x50
   13990:	fb00 8006 	mla	r0, r0, r6, r8
   13994:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13998:	f280 87a6 	bge.w	148e8 <lv_theme_material_init+0x1250>
   1399c:	2601      	movs	r6, #1
   1399e:	2000      	movs	r0, #0
   139a0:	f7fe fddc 	bl	1255c <lv_disp_get_dpi>
   139a4:	3028      	adds	r0, #40	; 0x28
   139a6:	0040      	lsls	r0, r0, #1
   139a8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   139ac:	f2c0 87a7 	blt.w	148fe <lv_theme_material_init+0x1266>
   139b0:	2000      	movs	r0, #0
   139b2:	f7fe fdd3 	bl	1255c <lv_disp_get_dpi>
   139b6:	f100 0228 	add.w	r2, r0, #40	; 0x28
   139ba:	20a0      	movs	r0, #160	; 0xa0
   139bc:	0052      	lsls	r2, r2, #1
   139be:	fb92 f2f0 	sdiv	r2, r2, r0
   139c2:	b212      	sxth	r2, r2
   139c4:	e016      	b.n	139f4 <lv_theme_material_init+0x35c>
   139c6:	bf00      	nop
   139c8:	2002a185 	.word	0x2002a185
   139cc:	20025eb4 	.word	0x20025eb4
   139d0:	20025e94 	.word	0x20025e94
   139d4:	20025eb8 	.word	0x20025eb8
   139d8:	00eaeff3 	.word	0x00eaeff3
   139dc:	00444b5a 	.word	0x00444b5a
   139e0:	003b3e42 	.word	0x003b3e42
   139e4:	00e7e9ec 	.word	0x00e7e9ec
   139e8:	00586273 	.word	0x00586273
   139ec:	00d6dde3 	.word	0x00d6dde3
   139f0:	00808a97 	.word	0x00808a97
   139f4:	4432      	add	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   139f6:	4638      	mov	r0, r7
   139f8:	2110      	movs	r1, #16
   139fa:	b212      	sxth	r2, r2
   139fc:	f009 fd0a 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13a00:	2000      	movs	r0, #0
   13a02:	6827      	ldr	r7, [r4, #0]
   13a04:	f7fe fdb6 	bl	12574 <lv_disp_get_size_category>
   13a08:	2801      	cmp	r0, #1
   13a0a:	f107 0704 	add.w	r7, r7, #4
   13a0e:	f04f 0000 	mov.w	r0, #0
   13a12:	f200 8777 	bhi.w	14904 <lv_theme_material_init+0x126c>
   13a16:	f7fe fda1 	bl	1255c <lv_disp_get_dpi>
   13a1a:	260f      	movs	r6, #15
   13a1c:	f04f 0850 	mov.w	r8, #80	; 0x50
   13a20:	fb00 8006 	mla	r0, r0, r6, r8
   13a24:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13a28:	f280 8771 	bge.w	1490e <lv_theme_material_init+0x1276>
   13a2c:	2601      	movs	r6, #1
   13a2e:	2000      	movs	r0, #0
   13a30:	f7fe fd94 	bl	1255c <lv_disp_get_dpi>
   13a34:	3028      	adds	r0, #40	; 0x28
   13a36:	0040      	lsls	r0, r0, #1
   13a38:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13a3c:	f2c0 8772 	blt.w	14924 <lv_theme_material_init+0x128c>
   13a40:	2000      	movs	r0, #0
   13a42:	f7fe fd8b 	bl	1255c <lv_disp_get_dpi>
   13a46:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13a4a:	20a0      	movs	r0, #160	; 0xa0
   13a4c:	0052      	lsls	r2, r2, #1
   13a4e:	fb92 f2f0 	sdiv	r2, r2, r0
   13a52:	b212      	sxth	r2, r2
   13a54:	4432      	add	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13a56:	4638      	mov	r0, r7
   13a58:	2111      	movs	r1, #17
   13a5a:	b212      	sxth	r2, r2
   13a5c:	f009 fcda 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   13a60:	2000      	movs	r0, #0
   13a62:	6827      	ldr	r7, [r4, #0]
   13a64:	f7fe fd86 	bl	12574 <lv_disp_get_size_category>
   13a68:	2801      	cmp	r0, #1
   13a6a:	f107 0704 	add.w	r7, r7, #4
   13a6e:	f04f 0000 	mov.w	r0, #0
   13a72:	f200 875a 	bhi.w	1492a <lv_theme_material_init+0x1292>
   13a76:	f7fe fd71 	bl	1255c <lv_disp_get_dpi>
   13a7a:	260f      	movs	r6, #15
   13a7c:	f04f 0850 	mov.w	r8, #80	; 0x50
   13a80:	fb00 8006 	mla	r0, r0, r6, r8
   13a84:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13a88:	f280 8754 	bge.w	14934 <lv_theme_material_init+0x129c>
   13a8c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13a8e:	4638      	mov	r0, r7
   13a90:	2114      	movs	r1, #20
   13a92:	f009 fcbf 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   13a96:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   13a98:	2200      	movs	r2, #0
   13a9a:	21b0      	movs	r1, #176	; 0xb0
   13a9c:	3004      	adds	r0, #4
   13a9e:	f009 fcb9 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   13aa2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   13aa4:	2239      	movs	r2, #57	; 0x39
   13aa6:	21b7      	movs	r1, #183	; 0xb7
   13aa8:	3004      	adds	r0, #4
   13aaa:	f009 fcb3 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->bg_sec);
   13aae:	6820      	ldr	r0, [r4, #0]
   13ab0:	300c      	adds	r0, #12
   13ab2:	f7ff fde7 	bl	13684 <style_init_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
   13ab6:	6820      	ldr	r0, [r4, #0]
   13ab8:	1d01      	adds	r1, r0, #4
   13aba:	300c      	adds	r0, #12
   13abc:	f009 fc6e 	bl	1d39c <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   13ac0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13ac2:	6826      	ldr	r6, [r4, #0]
   13ac4:	079b      	lsls	r3, r3, #30
   13ac6:	bf4c      	ite	mi
   13ac8:	48c6      	ldrmi	r0, [pc, #792]	; (13de4 <lv_theme_material_init+0x74c>)
   13aca:	48c7      	ldrpl	r0, [pc, #796]	; (13de8 <lv_theme_material_init+0x750>)
   13acc:	f00d fee1 	bl	21892 <lv_color_hex>
   13ad0:	360c      	adds	r6, #12
   13ad2:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13ad4:	2129      	movs	r1, #41	; 0x29
   13ad6:	4630      	mov	r0, r6
   13ad8:	f009 fce0 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   13adc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13ade:	6826      	ldr	r6, [r4, #0]
   13ae0:	079f      	lsls	r7, r3, #30
   13ae2:	bf4c      	ite	mi
   13ae4:	48c1      	ldrmi	r0, [pc, #772]	; (13dec <lv_theme_material_init+0x754>)
   13ae6:	48c2      	ldrpl	r0, [pc, #776]	; (13df0 <lv_theme_material_init+0x758>)
   13ae8:	f00d fed3 	bl	21892 <lv_color_hex>
   13aec:	360c      	adds	r6, #12
   13aee:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13af0:	2139      	movs	r1, #57	; 0x39
   13af2:	4630      	mov	r0, r6
   13af4:	f009 fcd2 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13afa:	6826      	ldr	r6, [r4, #0]
   13afc:	0798      	lsls	r0, r3, #30
   13afe:	bf4c      	ite	mi
   13b00:	48bc      	ldrmi	r0, [pc, #752]	; (13df4 <lv_theme_material_init+0x75c>)
   13b02:	48bd      	ldrpl	r0, [pc, #756]	; (13df8 <lv_theme_material_init+0x760>)
   13b04:	f00d fec5 	bl	21892 <lv_color_hex>
   13b08:	360c      	adds	r6, #12
   13b0a:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13b0c:	f248 0189 	movw	r1, #32905	; 0x8089
   13b10:	4630      	mov	r0, r6
   13b12:	f009 fcc3 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13b18:	6826      	ldr	r6, [r4, #0]
   13b1a:	0799      	lsls	r1, r3, #30
   13b1c:	bf4c      	ite	mi
   13b1e:	48b5      	ldrmi	r0, [pc, #724]	; (13df4 <lv_theme_material_init+0x75c>)
   13b20:	48b5      	ldrpl	r0, [pc, #724]	; (13df8 <lv_theme_material_init+0x760>)
   13b22:	f00d feb6 	bl	21892 <lv_color_hex>
   13b26:	360c      	adds	r6, #12
   13b28:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13b2a:	2179      	movs	r1, #121	; 0x79
   13b2c:	4630      	mov	r0, r6
   13b2e:	f009 fcb5 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13b32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13b34:	6826      	ldr	r6, [r4, #0]
   13b36:	079a      	lsls	r2, r3, #30
   13b38:	bf4c      	ite	mi
   13b3a:	48ae      	ldrmi	r0, [pc, #696]	; (13df4 <lv_theme_material_init+0x75c>)
   13b3c:	48ae      	ldrpl	r0, [pc, #696]	; (13df8 <lv_theme_material_init+0x760>)
   13b3e:	f00d fea8 	bl	21892 <lv_color_hex>
   13b42:	360c      	adds	r6, #12
   13b44:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   13b46:	f248 01a9 	movw	r1, #32937	; 0x80a9
   13b4a:	4630      	mov	r0, r6
   13b4c:	f009 fca6 	bl	1d49c <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13b50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13b52:	6826      	ldr	r6, [r4, #0]
   13b54:	079b      	lsls	r3, r3, #30
   13b56:	bf4c      	ite	mi
   13b58:	48a6      	ldrmi	r0, [pc, #664]	; (13df4 <lv_theme_material_init+0x75c>)
   13b5a:	48a7      	ldrpl	r0, [pc, #668]	; (13df8 <lv_theme_material_init+0x760>)
   13b5c:	f00d fe99 	bl	21892 <lv_color_hex>
   13b60:	360c      	adds	r6, #12
   13b62:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13b64:	2199      	movs	r1, #153	; 0x99
   13b66:	4630      	mov	r0, r6
   13b68:	f009 fc98 	bl	1d49c <_lv_style_set_color>
    style_init_reset(&styles->bg_click);
   13b6c:	6820      	ldr	r0, [r4, #0]
   13b6e:	3008      	adds	r0, #8
   13b70:	f7ff fd88 	bl	13684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   13b74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13b76:	6826      	ldr	r6, [r4, #0]
   13b78:	079f      	lsls	r7, r3, #30
   13b7a:	bf4c      	ite	mi
   13b7c:	489f      	ldrmi	r0, [pc, #636]	; (13dfc <lv_theme_material_init+0x764>)
   13b7e:	48a0      	ldrpl	r0, [pc, #640]	; (13e00 <lv_theme_material_init+0x768>)
   13b80:	f00d fe87 	bl	21892 <lv_color_hex>
   13b84:	3608      	adds	r6, #8
   13b86:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13b88:	f241 0129 	movw	r1, #4137	; 0x1029
   13b8c:	4630      	mov	r0, r6
   13b8e:	f009 fc85 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   13b92:	6820      	ldr	r0, [r4, #0]
   13b94:	68ea      	ldr	r2, [r5, #12]
   13b96:	f240 1129 	movw	r1, #297	; 0x129
   13b9a:	3008      	adds	r0, #8
   13b9c:	f009 fc7e 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   13ba0:	6820      	ldr	r0, [r4, #0]
   13ba2:	2133      	movs	r1, #51	; 0x33
   13ba4:	f100 0608 	add.w	r6, r0, #8
   13ba8:	68e8      	ldr	r0, [r5, #12]
   13baa:	f00d fc7b 	bl	214a4 <lv_color_darken>
   13bae:	f241 1129 	movw	r1, #4393	; 0x1129
   13bb2:	4602      	mov	r2, r0
   13bb4:	4630      	mov	r0, r6
   13bb6:	f009 fc71 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   13bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13bbc:	6826      	ldr	r6, [r4, #0]
   13bbe:	0798      	lsls	r0, r3, #30
   13bc0:	bf4c      	ite	mi
   13bc2:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
   13bc6:	488f      	ldrpl	r0, [pc, #572]	; (13e04 <lv_theme_material_init+0x76c>)
   13bc8:	f00d fe63 	bl	21892 <lv_color_hex>
   13bcc:	3608      	adds	r6, #8
   13bce:	4602      	mov	r2, r0
   13bd0:	f242 0129 	movw	r1, #8233	; 0x2029
   13bd4:	4630      	mov	r0, r6
   13bd6:	f009 fc61 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   13bda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13bdc:	2200      	movs	r2, #0
   13bde:	f44f 7198 	mov.w	r1, #304	; 0x130
   13be2:	3008      	adds	r0, #8
   13be4:	f009 fc16 	bl	1d414 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   13be8:	6820      	ldr	r0, [r4, #0]
   13bea:	2133      	movs	r1, #51	; 0x33
   13bec:	f100 0608 	add.w	r6, r0, #8
   13bf0:	68e8      	ldr	r0, [r5, #12]
   13bf2:	f00d fc57 	bl	214a4 <lv_color_darken>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13bf6:	f241 2139 	movw	r1, #4665	; 0x1239
   13bfa:	4602      	mov	r2, r0
   13bfc:	4630      	mov	r0, r6
   13bfe:	f009 fc4d 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   13c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c04:	6824      	ldr	r4, [r4, #0]
   13c06:	0799      	lsls	r1, r3, #30
   13c08:	f104 0408 	add.w	r4, r4, #8
   13c0c:	f100 869d 	bmi.w	1494a <lv_theme_material_init+0x12b2>
   13c10:	487d      	ldr	r0, [pc, #500]	; (13e08 <lv_theme_material_init+0x770>)
   13c12:	f00d fe3e 	bl	21892 <lv_color_hex>
   13c16:	b2c6      	uxtb	r6, r0
   13c18:	f3c0 2107 	ubfx	r1, r0, #8, #8
   13c1c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   13c20:	0e00      	lsrs	r0, r0, #24
   13c22:	2200      	movs	r2, #0
   13c24:	f366 0207 	bfi	r2, r6, #0, #8
   13c28:	f361 220f 	bfi	r2, r1, #8, #8
   13c2c:	f363 4217 	bfi	r2, r3, #16, #8
   13c30:	f360 621f 	bfi	r2, r0, #24, #8
   13c34:	f241 0139 	movw	r1, #4153	; 0x1039
   13c38:	4620      	mov	r0, r4
   13c3a:	f009 fc2f 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   13c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c40:	4c72      	ldr	r4, [pc, #456]	; (13e0c <lv_theme_material_init+0x774>)
   13c42:	079a      	lsls	r2, r3, #30
   13c44:	bf4c      	ite	mi
   13c46:	4872      	ldrmi	r0, [pc, #456]	; (13e10 <lv_theme_material_init+0x778>)
   13c48:	486f      	ldrpl	r0, [pc, #444]	; (13e08 <lv_theme_material_init+0x770>)
   13c4a:	6826      	ldr	r6, [r4, #0]
   13c4c:	f00d fe21 	bl	21892 <lv_color_hex>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   13c50:	4d70      	ldr	r5, [pc, #448]	; (13e14 <lv_theme_material_init+0x77c>)
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   13c52:	3608      	adds	r6, #8
   13c54:	4602      	mov	r2, r0
   13c56:	f240 1139 	movw	r1, #313	; 0x139
   13c5a:	4630      	mov	r0, r6
   13c5c:	f009 fc1e 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   13c60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c62:	6826      	ldr	r6, [r4, #0]
   13c64:	079b      	lsls	r3, r3, #30
   13c66:	bf4c      	ite	mi
   13c68:	4869      	ldrmi	r0, [pc, #420]	; (13e10 <lv_theme_material_init+0x778>)
   13c6a:	4867      	ldrpl	r0, [pc, #412]	; (13e08 <lv_theme_material_init+0x770>)
   13c6c:	f00d fe11 	bl	21892 <lv_color_hex>
   13c70:	3608      	adds	r6, #8
   13c72:	4602      	mov	r2, r0
   13c74:	f241 1139 	movw	r1, #4409	; 0x1139
   13c78:	4630      	mov	r0, r6
   13c7a:	f009 fc0f 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   13c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c80:	6826      	ldr	r6, [r4, #0]
   13c82:	079f      	lsls	r7, r3, #30
   13c84:	bf4c      	ite	mi
   13c86:	4864      	ldrmi	r0, [pc, #400]	; (13e18 <lv_theme_material_init+0x780>)
   13c88:	485f      	ldrpl	r0, [pc, #380]	; (13e08 <lv_theme_material_init+0x770>)
   13c8a:	f00d fe02 	bl	21892 <lv_color_hex>
   13c8e:	3608      	adds	r6, #8
   13c90:	4602      	mov	r2, r0
   13c92:	f242 0139 	movw	r1, #8249	; 0x2039
   13c96:	4630      	mov	r0, r6
   13c98:	f009 fc00 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   13c9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c9e:	6826      	ldr	r6, [r4, #0]
   13ca0:	0798      	lsls	r0, r3, #30
   13ca2:	bf54      	ite	pl
   13ca4:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13ca8:	4859      	ldrmi	r0, [pc, #356]	; (13e10 <lv_theme_material_init+0x778>)
   13caa:	f00d fdf2 	bl	21892 <lv_color_hex>
   13cae:	3608      	adds	r6, #8
   13cb0:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13cb2:	f249 0189 	movw	r1, #37001	; 0x9089
   13cb6:	4630      	mov	r0, r6
   13cb8:	f009 fbf0 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   13cbc:	6820      	ldr	r0, [r4, #0]
   13cbe:	f100 0608 	add.w	r6, r0, #8
   13cc2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13cc6:	f00d fde4 	bl	21892 <lv_color_hex>
   13cca:	f248 1189 	movw	r1, #33161	; 0x8189
   13cce:	4602      	mov	r2, r0
   13cd0:	4630      	mov	r0, r6
   13cd2:	f009 fbe3 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   13cd6:	6820      	ldr	r0, [r4, #0]
   13cd8:	f100 0608 	add.w	r6, r0, #8
   13cdc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13ce0:	f00d fdd7 	bl	21892 <lv_color_hex>
   13ce4:	f249 1189 	movw	r1, #37257	; 0x9189
   13ce8:	4602      	mov	r2, r0
   13cea:	4630      	mov	r0, r6
   13cec:	f009 fbd6 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   13cf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13cf2:	2200      	movs	r2, #0
   13cf4:	f013 0f02 	tst.w	r3, #2
   13cf8:	bf14      	ite	ne
   13cfa:	23aa      	movne	r3, #170	; 0xaa
   13cfc:	2399      	moveq	r3, #153	; 0x99
   13cfe:	f363 0207 	bfi	r2, r3, #0, #8
   13d02:	f363 220f 	bfi	r2, r3, #8, #8
   13d06:	6820      	ldr	r0, [r4, #0]
   13d08:	f363 4217 	bfi	r2, r3, #16, #8
   13d0c:	f24a 0189 	movw	r1, #41097	; 0xa089
   13d10:	3008      	adds	r0, #8
   13d12:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
   13d16:	f009 fbc1 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   13d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13d1c:	6826      	ldr	r6, [r4, #0]
   13d1e:	0799      	lsls	r1, r3, #30
   13d20:	bf54      	ite	pl
   13d22:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13d26:	483a      	ldrmi	r0, [pc, #232]	; (13e10 <lv_theme_material_init+0x778>)
   13d28:	f00d fdb3 	bl	21892 <lv_color_hex>
   13d2c:	3608      	adds	r6, #8
   13d2e:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   13d30:	f249 01a9 	movw	r1, #37033	; 0x90a9
   13d34:	4630      	mov	r0, r6
   13d36:	f009 fbb1 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   13d3a:	6820      	ldr	r0, [r4, #0]
   13d3c:	f100 0608 	add.w	r6, r0, #8
   13d40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13d44:	f00d fda5 	bl	21892 <lv_color_hex>
   13d48:	f248 11a9 	movw	r1, #33193	; 0x81a9
   13d4c:	4602      	mov	r2, r0
   13d4e:	4630      	mov	r0, r6
   13d50:	f009 fba4 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   13d54:	6820      	ldr	r0, [r4, #0]
   13d56:	f100 0608 	add.w	r6, r0, #8
   13d5a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13d5e:	f00d fd98 	bl	21892 <lv_color_hex>
   13d62:	f249 11a9 	movw	r1, #37289	; 0x91a9
   13d66:	4602      	mov	r2, r0
   13d68:	4630      	mov	r0, r6
   13d6a:	f009 fb97 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   13d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13d70:	2200      	movs	r2, #0
   13d72:	f013 0f02 	tst.w	r3, #2
   13d76:	bf14      	ite	ne
   13d78:	23aa      	movne	r3, #170	; 0xaa
   13d7a:	2399      	moveq	r3, #153	; 0x99
   13d7c:	f363 0207 	bfi	r2, r3, #0, #8
   13d80:	f363 220f 	bfi	r2, r3, #8, #8
   13d84:	6820      	ldr	r0, [r4, #0]
   13d86:	f363 4217 	bfi	r2, r3, #16, #8
   13d8a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   13d8e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
   13d92:	3008      	adds	r0, #8
   13d94:	f009 fb82 	bl	1d49c <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   13d98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   13d9a:	2229      	movs	r2, #41	; 0x29
   13d9c:	21b6      	movs	r1, #182	; 0xb6
   13d9e:	3008      	adds	r0, #8
   13da0:	f009 fb38 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->btn);
   13da4:	6820      	ldr	r0, [r4, #0]
   13da6:	3010      	adds	r0, #16
   13da8:	f7ff fc6c 	bl	13684 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   13dac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13dae:	f647 72ff 	movw	r2, #32767	; 0x7fff
   13db2:	2101      	movs	r1, #1
   13db4:	3010      	adds	r0, #16
   13db6:	f009 fb2d 	bl	1d414 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   13dba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13dbc:	22ff      	movs	r2, #255	; 0xff
   13dbe:	3010      	adds	r0, #16
   13dc0:	212c      	movs	r1, #44	; 0x2c
   13dc2:	f009 fbaf 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   13dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13dc8:	6826      	ldr	r6, [r4, #0]
   13dca:	079a      	lsls	r2, r3, #30
   13dcc:	bf4c      	ite	mi
   13dce:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
   13dd2:	480c      	ldrpl	r0, [pc, #48]	; (13e04 <lv_theme_material_init+0x76c>)
   13dd4:	f00d fd5d 	bl	21892 <lv_color_hex>
   13dd8:	3610      	adds	r6, #16
   13dda:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13ddc:	2129      	movs	r1, #41	; 0x29
   13dde:	4630      	mov	r0, r6
   13de0:	e01c      	b.n	13e1c <lv_theme_material_init+0x784>
   13de2:	bf00      	nop
   13de4:	00d4d7d9 	.word	0x00d4d7d9
   13de8:	0045494d 	.word	0x0045494d
   13dec:	00dfe7ed 	.word	0x00dfe7ed
   13df0:	00404040 	.word	0x00404040
   13df4:	0031404f 	.word	0x0031404f
   13df8:	00a5a8ad 	.word	0x00a5a8ad
   13dfc:	00eeeeee 	.word	0x00eeeeee
   13e00:	00494f57 	.word	0x00494f57
   13e04:	00586273 	.word	0x00586273
   13e08:	005f656e 	.word	0x005f656e
   13e0c:	20025eb4 	.word	0x20025eb4
   13e10:	003b3e42 	.word	0x003b3e42
   13e14:	20025eb8 	.word	0x20025eb8
   13e18:	00d6dde3 	.word	0x00d6dde3
   13e1c:	f009 fb3e 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   13e20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13e22:	6826      	ldr	r6, [r4, #0]
   13e24:	079b      	lsls	r3, r3, #30
   13e26:	f106 0610 	add.w	r6, r6, #16
   13e2a:	f140 8594 	bpl.w	14956 <lv_theme_material_init+0x12be>
   13e2e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13e32:	f00d fd2e 	bl	21892 <lv_color_hex>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   13e36:	f04f 0ce6 	mov.w	ip, #230	; 0xe6
   13e3a:	2219      	movs	r2, #25
   13e3c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   13e40:	fb13 f30c 	smulbb	r3, r3, ip
   13e44:	7ba9      	ldrb	r1, [r5, #14]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   13e46:	f3c0 2e07 	ubfx	lr, r0, #8, #8
   13e4a:	fb1e fe0c 	smulbb	lr, lr, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   13e4e:	fb12 3101 	smlabb	r1, r2, r1, r3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   13e52:	b2c0      	uxtb	r0, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   13e54:	f248 0381 	movw	r3, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   13e58:	fb10 f00c 	smulbb	r0, r0, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   13e5c:	7b6f      	ldrb	r7, [r5, #13]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   13e5e:	4359      	muls	r1, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   13e60:	fb12 e707 	smlabb	r7, r2, r7, lr
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   13e64:	f895 e00c 	ldrb.w	lr, [r5, #12]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   13e68:	435f      	muls	r7, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   13e6a:	fb12 000e 	smlabb	r0, r2, lr, r0
   13e6e:	2200      	movs	r2, #0
   13e70:	4343      	muls	r3, r0
   13e72:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   13e76:	f363 0207 	bfi	r2, r3, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   13e7a:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   13e7e:	f3c1 51c7 	ubfx	r1, r1, #23, #8
   13e82:	f367 220f 	bfi	r2, r7, #8, #8
   13e86:	f361 4217 	bfi	r2, r1, #16, #8
   13e8a:	4630      	mov	r0, r6
   13e8c:	f241 0129 	movw	r1, #4137	; 0x1029
   13e90:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
   13e94:	f009 fb02 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   13e98:	6820      	ldr	r0, [r4, #0]
   13e9a:	68ea      	ldr	r2, [r5, #12]
   13e9c:	f240 1129 	movw	r1, #297	; 0x129
   13ea0:	3010      	adds	r0, #16
   13ea2:	f009 fafb 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   13ea6:	6820      	ldr	r0, [r4, #0]
   13ea8:	214c      	movs	r1, #76	; 0x4c
   13eaa:	f100 0610 	add.w	r6, r0, #16
   13eae:	68e8      	ldr	r0, [r5, #12]
   13eb0:	f00d faf8 	bl	214a4 <lv_color_darken>
   13eb4:	f241 1129 	movw	r1, #4393	; 0x1129
   13eb8:	4602      	mov	r2, r0
   13eba:	4630      	mov	r0, r6
   13ebc:	f009 faee 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   13ec0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13ec2:	6826      	ldr	r6, [r4, #0]
   13ec4:	079f      	lsls	r7, r3, #30
   13ec6:	bf4c      	ite	mi
   13ec8:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
   13ecc:	48d4      	ldrpl	r0, [pc, #848]	; (14220 <lv_theme_material_init+0xb88>)
   13ece:	f00d fce0 	bl	21892 <lv_color_hex>
   13ed2:	3610      	adds	r6, #16
   13ed4:	4602      	mov	r2, r0
   13ed6:	f242 0129 	movw	r1, #8233	; 0x2029
   13eda:	4630      	mov	r0, r6
   13edc:	f009 fade 	bl	1d49c <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   13ee0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13ee2:	2200      	movs	r2, #0
   13ee4:	f013 0f02 	tst.w	r3, #2
   13ee8:	bf14      	ite	ne
   13eea:	23cc      	movne	r3, #204	; 0xcc
   13eec:	2388      	moveq	r3, #136	; 0x88
   13eee:	f363 0207 	bfi	r2, r3, #0, #8
   13ef2:	f363 220f 	bfi	r2, r3, #8, #8
   13ef6:	6820      	ldr	r0, [r4, #0]
   13ef8:	f363 4217 	bfi	r2, r3, #16, #8
   13efc:	f242 1129 	movw	r1, #8489	; 0x2129
   13f00:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
   13f04:	3010      	adds	r0, #16
   13f06:	f009 fac9 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   13f0a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13f0c:	2139      	movs	r1, #57	; 0x39
   13f0e:	68ea      	ldr	r2, [r5, #12]
   13f10:	3010      	adds	r0, #16
   13f12:	f009 fac3 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   13f16:	6820      	ldr	r0, [r4, #0]
   13f18:	f241 0139 	movw	r1, #4153	; 0x1039
   13f1c:	3010      	adds	r0, #16
   13f1e:	68ea      	ldr	r2, [r5, #12]
   13f20:	f009 fabc 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   13f24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13f26:	6826      	ldr	r6, [r4, #0]
   13f28:	0798      	lsls	r0, r3, #30
   13f2a:	f106 0610 	add.w	r6, r6, #16
   13f2e:	f100 851f 	bmi.w	14970 <lv_theme_material_init+0x12d8>
   13f32:	48bc      	ldr	r0, [pc, #752]	; (14224 <lv_theme_material_init+0xb8c>)
   13f34:	f00d fcad 	bl	21892 <lv_color_hex>
   13f38:	b2c7      	uxtb	r7, r0
   13f3a:	f3c0 2107 	ubfx	r1, r0, #8, #8
   13f3e:	f3c0 4307 	ubfx	r3, r0, #16, #8
   13f42:	0e00      	lsrs	r0, r0, #24
   13f44:	2200      	movs	r2, #0
   13f46:	f367 0207 	bfi	r2, r7, #0, #8
   13f4a:	f361 220f 	bfi	r2, r1, #8, #8
   13f4e:	f363 4217 	bfi	r2, r3, #16, #8
   13f52:	f360 621f 	bfi	r2, r0, #24, #8
   13f56:	f242 0139 	movw	r1, #8249	; 0x2039
   13f5a:	4630      	mov	r0, r6
   13f5c:	f009 fa9e 	bl	1d49c <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   13f60:	2000      	movs	r0, #0
   13f62:	6826      	ldr	r6, [r4, #0]
   13f64:	f7fe fafa 	bl	1255c <lv_disp_get_dpi>
   13f68:	3028      	adds	r0, #40	; 0x28
   13f6a:	0040      	lsls	r0, r0, #1
   13f6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13f70:	f106 0610 	add.w	r6, r6, #16
   13f74:	f2c0 8502 	blt.w	1497c <lv_theme_material_init+0x12e4>
   13f78:	2000      	movs	r0, #0
   13f7a:	f7fe faef 	bl	1255c <lv_disp_get_dpi>
   13f7e:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13f82:	20a0      	movs	r0, #160	; 0xa0
   13f84:	0052      	lsls	r2, r2, #1
   13f86:	fb92 f2f0 	sdiv	r2, r2, r0
   13f8a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13f8c:	4630      	mov	r0, r6
   13f8e:	2130      	movs	r1, #48	; 0x30
   13f90:	f009 fa40 	bl	1d414 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   13f94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   13f96:	f44f 719e 	mov.w	r1, #316	; 0x13c
   13f9a:	3010      	adds	r0, #16
   13f9c:	2200      	movs	r2, #0
   13f9e:	f009 fac1 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13fa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13fa4:	6826      	ldr	r6, [r4, #0]
   13fa6:	0799      	lsls	r1, r3, #30
   13fa8:	bf54      	ite	pl
   13faa:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13fae:	489e      	ldrmi	r0, [pc, #632]	; (14228 <lv_theme_material_init+0xb90>)
   13fb0:	f00d fc6f 	bl	21892 <lv_color_hex>
   13fb4:	3610      	adds	r6, #16
   13fb6:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13fb8:	f248 0189 	movw	r1, #32905	; 0x8089
   13fbc:	4630      	mov	r0, r6
   13fbe:	f009 fa6d 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13fc4:	6826      	ldr	r6, [r4, #0]
   13fc6:	079a      	lsls	r2, r3, #30
   13fc8:	bf54      	ite	pl
   13fca:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   13fce:	4896      	ldrmi	r0, [pc, #600]	; (14228 <lv_theme_material_init+0xb90>)
   13fd0:	f00d fc5f 	bl	21892 <lv_color_hex>
   13fd4:	3610      	adds	r6, #16
   13fd6:	4602      	mov	r2, r0
   13fd8:	f249 0189 	movw	r1, #37001	; 0x9089
   13fdc:	4630      	mov	r0, r6
   13fde:	f009 fa5d 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13fe2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   13fe4:	f04f 0850 	mov.w	r8, #80	; 0x50
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13fe8:	f100 0610 	add.w	r6, r0, #16
   13fec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   13ff0:	f00d fc4f 	bl	21892 <lv_color_hex>
   13ff4:	f248 1189 	movw	r1, #33161	; 0x8189
   13ff8:	4602      	mov	r2, r0
   13ffa:	4630      	mov	r0, r6
   13ffc:	f009 fa4e 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   14000:	6820      	ldr	r0, [r4, #0]
   14002:	f100 0610 	add.w	r6, r0, #16
   14006:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   1400a:	f00d fc42 	bl	21892 <lv_color_hex>
   1400e:	f249 1189 	movw	r1, #37257	; 0x9189
   14012:	4602      	mov	r2, r0
   14014:	4630      	mov	r0, r6
   14016:	f009 fa41 	bl	1d49c <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   1401a:	6820      	ldr	r0, [r4, #0]
   1401c:	f100 0610 	add.w	r6, r0, #16
   14020:	4882      	ldr	r0, [pc, #520]	; (1422c <lv_theme_material_init+0xb94>)
   14022:	f00d fc36 	bl	21892 <lv_color_hex>
   14026:	f24a 0189 	movw	r1, #41097	; 0xa089
   1402a:	4602      	mov	r2, r0
   1402c:	4630      	mov	r0, r6
   1402e:	f009 fa35 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   14032:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14034:	6826      	ldr	r6, [r4, #0]
   14036:	079b      	lsls	r3, r3, #30
   14038:	bf54      	ite	pl
   1403a:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   1403e:	487a      	ldrmi	r0, [pc, #488]	; (14228 <lv_theme_material_init+0xb90>)
   14040:	f00d fc27 	bl	21892 <lv_color_hex>
   14044:	3610      	adds	r6, #16
   14046:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   14048:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1404c:	4630      	mov	r0, r6
   1404e:	f009 fa25 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   14052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14054:	6826      	ldr	r6, [r4, #0]
   14056:	079f      	lsls	r7, r3, #30
   14058:	bf54      	ite	pl
   1405a:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   1405e:	4872      	ldrmi	r0, [pc, #456]	; (14228 <lv_theme_material_init+0xb90>)
   14060:	f00d fc17 	bl	21892 <lv_color_hex>
   14064:	3610      	adds	r6, #16
   14066:	4602      	mov	r2, r0
   14068:	f249 01a9 	movw	r1, #37033	; 0x90a9
   1406c:	4630      	mov	r0, r6
   1406e:	f009 fa15 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   14072:	6820      	ldr	r0, [r4, #0]
   14074:	f100 0610 	add.w	r6, r0, #16
   14078:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   1407c:	f00d fc09 	bl	21892 <lv_color_hex>
   14080:	f249 01a9 	movw	r1, #37033	; 0x90a9
   14084:	4602      	mov	r2, r0
   14086:	4630      	mov	r0, r6
   14088:	f009 fa08 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   1408c:	6820      	ldr	r0, [r4, #0]
   1408e:	f100 0610 	add.w	r6, r0, #16
   14092:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   14096:	f00d fbfc 	bl	21892 <lv_color_hex>
   1409a:	f249 11a9 	movw	r1, #37289	; 0x91a9
   1409e:	4602      	mov	r2, r0
   140a0:	4630      	mov	r0, r6
   140a2:	f009 f9fb 	bl	1d49c <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   140a6:	6820      	ldr	r0, [r4, #0]
   140a8:	f100 0610 	add.w	r6, r0, #16
   140ac:	485f      	ldr	r0, [pc, #380]	; (1422c <lv_theme_material_init+0xb94>)
   140ae:	f00d fbf0 	bl	21892 <lv_color_hex>
   140b2:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   140b6:	4602      	mov	r2, r0
   140b8:	4630      	mov	r0, r6
   140ba:	f009 f9ef 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   140be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   140c0:	6826      	ldr	r6, [r4, #0]
   140c2:	0798      	lsls	r0, r3, #30
   140c4:	bf54      	ite	pl
   140c6:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   140ca:	4857      	ldrmi	r0, [pc, #348]	; (14228 <lv_theme_material_init+0xb90>)
   140cc:	f00d fbe1 	bl	21892 <lv_color_hex>
   140d0:	3610      	adds	r6, #16
   140d2:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   140d4:	2179      	movs	r1, #121	; 0x79
   140d6:	4630      	mov	r0, r6
   140d8:	f009 f9e0 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   140dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   140de:	6826      	ldr	r6, [r4, #0]
   140e0:	0799      	lsls	r1, r3, #30
   140e2:	bf54      	ite	pl
   140e4:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
   140e8:	484f      	ldrmi	r0, [pc, #316]	; (14228 <lv_theme_material_init+0xb90>)
   140ea:	f00d fbd2 	bl	21892 <lv_color_hex>
   140ee:	3610      	adds	r6, #16
   140f0:	4602      	mov	r2, r0
   140f2:	f241 0179 	movw	r1, #4217	; 0x1079
   140f6:	4630      	mov	r0, r6
   140f8:	f009 f9d0 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   140fc:	6820      	ldr	r0, [r4, #0]
   140fe:	f100 0610 	add.w	r6, r0, #16
   14102:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   14106:	f00d fbc4 	bl	21892 <lv_color_hex>
   1410a:	f240 1179 	movw	r1, #377	; 0x179
   1410e:	4602      	mov	r2, r0
   14110:	4630      	mov	r0, r6
   14112:	f009 f9c3 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   14116:	6820      	ldr	r0, [r4, #0]
   14118:	f100 0610 	add.w	r6, r0, #16
   1411c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   14120:	f00d fbb7 	bl	21892 <lv_color_hex>
   14124:	f241 1179 	movw	r1, #4473	; 0x1179
   14128:	4602      	mov	r2, r0
   1412a:	4630      	mov	r0, r6
   1412c:	f009 f9b6 	bl	1d49c <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   14130:	6820      	ldr	r0, [r4, #0]
   14132:	f100 0610 	add.w	r6, r0, #16
   14136:	483d      	ldr	r0, [pc, #244]	; (1422c <lv_theme_material_init+0xb94>)
   14138:	f00d fbab 	bl	21892 <lv_color_hex>
   1413c:	f242 0179 	movw	r1, #8313	; 0x2079
   14140:	4602      	mov	r2, r0
   14142:	4630      	mov	r0, r6
   14144:	f009 f9aa 	bl	1d49c <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   14148:	2000      	movs	r0, #0
   1414a:	6827      	ldr	r7, [r4, #0]
   1414c:	2628      	movs	r6, #40	; 0x28
   1414e:	f7fe fa05 	bl	1255c <lv_disp_get_dpi>
   14152:	fb00 8006 	mla	r0, r0, r6, r8
   14156:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1415a:	f107 0710 	add.w	r7, r7, #16
   1415e:	f2c0 8410 	blt.w	14982 <lv_theme_material_init+0x12ea>
   14162:	2000      	movs	r0, #0
   14164:	f7fe f9fa 	bl	1255c <lv_disp_get_dpi>
   14168:	fb00 8206 	mla	r2, r0, r6, r8
   1416c:	26a0      	movs	r6, #160	; 0xa0
   1416e:	fb92 f2f6 	sdiv	r2, r2, r6
   14172:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14174:	4638      	mov	r0, r7
   14176:	2112      	movs	r1, #18
   14178:	f009 f94c 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   1417c:	2000      	movs	r0, #0
   1417e:	6827      	ldr	r7, [r4, #0]
   14180:	2628      	movs	r6, #40	; 0x28
   14182:	f7fe f9eb 	bl	1255c <lv_disp_get_dpi>
   14186:	f04f 0850 	mov.w	r8, #80	; 0x50
   1418a:	fb00 8006 	mla	r0, r0, r6, r8
   1418e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14192:	f107 0710 	add.w	r7, r7, #16
   14196:	f2c0 83f7 	blt.w	14988 <lv_theme_material_init+0x12f0>
   1419a:	2000      	movs	r0, #0
   1419c:	f7fe f9de 	bl	1255c <lv_disp_get_dpi>
   141a0:	fb00 8206 	mla	r2, r0, r6, r8
   141a4:	26a0      	movs	r6, #160	; 0xa0
   141a6:	fb92 f2f6 	sdiv	r2, r2, r6
   141aa:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   141ac:	4638      	mov	r0, r7
   141ae:	2113      	movs	r1, #19
   141b0:	f009 f930 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   141b4:	2000      	movs	r0, #0
   141b6:	6827      	ldr	r7, [r4, #0]
   141b8:	260f      	movs	r6, #15
   141ba:	f7fe f9cf 	bl	1255c <lv_disp_get_dpi>
   141be:	f04f 0850 	mov.w	r8, #80	; 0x50
   141c2:	fb00 8006 	mla	r0, r0, r6, r8
   141c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   141ca:	f107 0710 	add.w	r7, r7, #16
   141ce:	f2c0 83dd 	blt.w	1498c <lv_theme_material_init+0x12f4>
   141d2:	2000      	movs	r0, #0
   141d4:	f7fe f9c2 	bl	1255c <lv_disp_get_dpi>
   141d8:	fb00 8206 	mla	r2, r0, r6, r8
   141dc:	26a0      	movs	r6, #160	; 0xa0
   141de:	fb92 f2f6 	sdiv	r2, r2, r6
   141e2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   141e4:	4638      	mov	r0, r7
   141e6:	2110      	movs	r1, #16
   141e8:	f009 f914 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   141ec:	2000      	movs	r0, #0
   141ee:	6827      	ldr	r7, [r4, #0]
   141f0:	260f      	movs	r6, #15
   141f2:	f7fe f9b3 	bl	1255c <lv_disp_get_dpi>
   141f6:	f04f 0850 	mov.w	r8, #80	; 0x50
   141fa:	fb00 8006 	mla	r0, r0, r6, r8
   141fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14202:	f107 0710 	add.w	r7, r7, #16
   14206:	f2c0 83c3 	blt.w	14990 <lv_theme_material_init+0x12f8>
   1420a:	2000      	movs	r0, #0
   1420c:	f7fe f9a6 	bl	1255c <lv_disp_get_dpi>
   14210:	fb00 8206 	mla	r2, r0, r6, r8
   14214:	26a0      	movs	r6, #160	; 0xa0
   14216:	fb92 f2f6 	sdiv	r2, r2, r6
   1421a:	b212      	sxth	r2, r2
   1421c:	e008      	b.n	14230 <lv_theme_material_init+0xb98>
   1421e:	bf00      	nop
   14220:	00586273 	.word	0x00586273
   14224:	00404040 	.word	0x00404040
   14228:	0031404f 	.word	0x0031404f
   1422c:	00888888 	.word	0x00888888
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14230:	4638      	mov	r0, r7
   14232:	2111      	movs	r1, #17
   14234:	f009 f8ee 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   14238:	2000      	movs	r0, #0
   1423a:	6827      	ldr	r7, [r4, #0]
   1423c:	2614      	movs	r6, #20
   1423e:	f7fe f98d 	bl	1255c <lv_disp_get_dpi>
   14242:	f04f 0850 	mov.w	r8, #80	; 0x50
   14246:	fb00 8006 	mla	r0, r0, r6, r8
   1424a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1424e:	f107 0710 	add.w	r7, r7, #16
   14252:	f2c0 839f 	blt.w	14994 <lv_theme_material_init+0x12fc>
   14256:	2000      	movs	r0, #0
   14258:	f7fe f980 	bl	1255c <lv_disp_get_dpi>
   1425c:	fb00 8206 	mla	r2, r0, r6, r8
   14260:	26a0      	movs	r6, #160	; 0xa0
   14262:	fb92 f2f6 	sdiv	r2, r2, r6
   14266:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14268:	4638      	mov	r0, r7
   1426a:	2114      	movs	r1, #20
   1426c:	f009 f8d2 	bl	1d414 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
   14270:	6a68      	ldr	r0, [r5, #36]	; 0x24
   14272:	6826      	ldr	r6, [r4, #0]
   14274:	f010 0720 	ands.w	r7, r0, #32
   14278:	f106 0610 	add.w	r6, r6, #16
   1427c:	f040 838c 	bne.w	14998 <lv_theme_material_init+0x1300>
   14280:	4638      	mov	r0, r7
   14282:	f7fe f96b 	bl	1255c <lv_disp_get_dpi>
   14286:	3028      	adds	r0, #40	; 0x28
   14288:	0040      	lsls	r0, r0, #1
   1428a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1428e:	f2c0 8385 	blt.w	1499c <lv_theme_material_init+0x1304>
   14292:	4638      	mov	r0, r7
   14294:	f7fe f962 	bl	1255c <lv_disp_get_dpi>
   14298:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1429c:	20a0      	movs	r0, #160	; 0xa0
   1429e:	0052      	lsls	r2, r2, #1
   142a0:	fb92 f2f0 	sdiv	r2, r2, r0
   142a4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   142a6:	2140      	movs	r1, #64	; 0x40
   142a8:	4630      	mov	r0, r6
   142aa:	f009 f8b3 	bl	1d414 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   142ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   142b0:	2200      	movs	r2, #0
   142b2:	214c      	movs	r1, #76	; 0x4c
   142b4:	3010      	adds	r0, #16
   142b6:	f009 f935 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   142ba:	6820      	ldr	r0, [r4, #0]
   142bc:	227f      	movs	r2, #127	; 0x7f
   142be:	f44f 7113 	mov.w	r1, #588	; 0x24c
   142c2:	3010      	adds	r0, #16
   142c4:	f009 f92e 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   142c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   142ca:	2149      	movs	r1, #73	; 0x49
   142cc:	68ea      	ldr	r2, [r5, #12]
   142ce:	3010      	adds	r0, #16
   142d0:	f009 f8e4 	bl	1d49c <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   142d4:	6820      	ldr	r0, [r4, #0]
   142d6:	f240 4149 	movw	r1, #1097	; 0x449
   142da:	692a      	ldr	r2, [r5, #16]
   142dc:	3010      	adds	r0, #16
   142de:	f009 f8dd 	bl	1d49c <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   142e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   142e4:	2200      	movs	r2, #0
   142e6:	21b0      	movs	r1, #176	; 0xb0
   142e8:	3010      	adds	r0, #16
   142ea:	f009 f893 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   142ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   142f0:	223c      	movs	r2, #60	; 0x3c
   142f2:	21b5      	movs	r1, #181	; 0xb5
   142f4:	3010      	adds	r0, #16
   142f6:	f009 f88d 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   142fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   142fc:	2229      	movs	r2, #41	; 0x29
   142fe:	21b6      	movs	r1, #182	; 0xb6
   14300:	3010      	adds	r0, #16
   14302:	f009 f887 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   14306:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   14308:	224c      	movs	r2, #76	; 0x4c
   1430a:	21b7      	movs	r1, #183	; 0xb7
   1430c:	3010      	adds	r0, #16
   1430e:	f009 f881 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   14312:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   14314:	2200      	movs	r2, #0
   14316:	21b1      	movs	r1, #177	; 0xb1
   14318:	3010      	adds	r0, #16
   1431a:	f009 f87b 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   1431e:	6820      	ldr	r0, [r4, #0]
   14320:	2200      	movs	r2, #0
   14322:	f241 01b1 	movw	r1, #4273	; 0x10b1
   14326:	3010      	adds	r0, #16
   14328:	f009 f874 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
   1432c:	6820      	ldr	r0, [r4, #0]
   1432e:	3014      	adds	r0, #20
   14330:	f7ff f9a8 	bl	13684 <style_init_reset>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   14334:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   14336:	6827      	ldr	r7, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   14338:	f7fe f91c 	bl	12574 <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1433c:	2832      	cmp	r0, #50	; 0x32
   1433e:	f107 0714 	add.w	r7, r7, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   14342:	f04f 0000 	mov.w	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   14346:	f200 832b 	bhi.w	149a0 <lv_theme_material_init+0x1308>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   1434a:	f7fe f907 	bl	1255c <lv_disp_get_dpi>
   1434e:	2614      	movs	r6, #20
   14350:	f04f 0850 	mov.w	r8, #80	; 0x50
   14354:	fb00 8006 	mla	r0, r0, r6, r8
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   14358:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1435c:	f280 8324 	bge.w	149a8 <lv_theme_material_init+0x1310>
   14360:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14362:	2114      	movs	r1, #20
   14364:	4638      	mov	r0, r7
   14366:	f009 f855 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
   1436a:	6820      	ldr	r0, [r4, #0]
   1436c:	3018      	adds	r0, #24
   1436e:	f7ff f989 	bl	13684 <style_init_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   14372:	2000      	movs	r0, #0
   14374:	f7fe f8fe 	bl	12574 <lv_disp_get_size_category>
   14378:	2832      	cmp	r0, #50	; 0x32
   1437a:	f04f 0000 	mov.w	r0, #0
   1437e:	f200 831d 	bhi.w	149bc <lv_theme_material_init+0x1324>
   14382:	f7fe f8eb 	bl	1255c <lv_disp_get_dpi>
   14386:	260a      	movs	r6, #10
   14388:	2750      	movs	r7, #80	; 0x50
   1438a:	fb00 7006 	mla	r0, r0, r6, r7
   1438e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14392:	f280 8317 	bge.w	149c4 <lv_theme_material_init+0x132c>
   14396:	2601      	movs	r6, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   14398:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1439a:	4632      	mov	r2, r6
   1439c:	2112      	movs	r1, #18
   1439e:	3018      	adds	r0, #24
   143a0:	f009 f838 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   143a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   143a6:	4632      	mov	r2, r6
   143a8:	2113      	movs	r1, #19
   143aa:	3018      	adds	r0, #24
   143ac:	f009 f832 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   143b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   143b2:	4632      	mov	r2, r6
   143b4:	2110      	movs	r1, #16
   143b6:	3018      	adds	r0, #24
   143b8:	f009 f82c 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   143bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   143be:	4632      	mov	r2, r6
   143c0:	2111      	movs	r1, #17
   143c2:	3018      	adds	r0, #24
   143c4:	f009 f826 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   143c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   143ca:	4632      	mov	r2, r6
   143cc:	2114      	movs	r1, #20
   143ce:	3018      	adds	r0, #24
   143d0:	f009 f820 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->chart_bg);
   143d4:	6820      	ldr	r0, [r4, #0]
   143d6:	301c      	adds	r0, #28
   143d8:	f7ff f954 	bl	13684 <style_init_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   143dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   143de:	6826      	ldr	r6, [r4, #0]
   143e0:	079a      	lsls	r2, r3, #30
   143e2:	f106 061c 	add.w	r6, r6, #28
   143e6:	f100 82f7 	bmi.w	149d8 <lv_theme_material_init+0x1340>
   143ea:	48e3      	ldr	r0, [pc, #908]	; (14778 <lv_theme_material_init+0x10e0>)
   143ec:	f00d fa51 	bl	21892 <lv_color_hex>
   143f0:	b2c7      	uxtb	r7, r0
   143f2:	f3c0 2107 	ubfx	r1, r0, #8, #8
   143f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
   143fa:	0e00      	lsrs	r0, r0, #24
   143fc:	2200      	movs	r2, #0
   143fe:	f367 0207 	bfi	r2, r7, #0, #8
   14402:	f361 220f 	bfi	r2, r1, #8, #8
   14406:	f363 4217 	bfi	r2, r3, #16, #8
   1440a:	f360 621f 	bfi	r2, r0, #24, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1440e:	f248 0189 	movw	r1, #32905	; 0x8089
   14412:	4630      	mov	r0, r6
   14414:	f009 f842 	bl	1d49c <_lv_style_set_color>
    style_init_reset(&styles->chart_series_bg);
   14418:	6820      	ldr	r0, [r4, #0]
   1441a:	3020      	adds	r0, #32
   1441c:	f7ff f932 	bl	13684 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   14420:	2000      	movs	r0, #0
   14422:	6826      	ldr	r6, [r4, #0]
   14424:	f7fe f89a 	bl	1255c <lv_disp_get_dpi>
   14428:	3050      	adds	r0, #80	; 0x50
   1442a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1442e:	f106 0620 	add.w	r6, r6, #32
   14432:	f2c0 82d6 	blt.w	149e2 <lv_theme_material_init+0x134a>
   14436:	2000      	movs	r0, #0
   14438:	f7fe f890 	bl	1255c <lv_disp_get_dpi>
   1443c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14440:	20a0      	movs	r0, #160	; 0xa0
   14442:	fb92 f2f0 	sdiv	r2, r2, r0
   14446:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14448:	4630      	mov	r0, r6
   1444a:	2190      	movs	r1, #144	; 0x90
   1444c:	f008 ffe2 	bl	1d414 <_lv_style_set_int>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14450:	2000      	movs	r0, #0
   14452:	6827      	ldr	r7, [r4, #0]
   14454:	260a      	movs	r6, #10
   14456:	f7fe f881 	bl	1255c <lv_disp_get_dpi>
   1445a:	f04f 0850 	mov.w	r8, #80	; 0x50
   1445e:	fb00 8006 	mla	r0, r0, r6, r8
   14462:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14466:	f107 0720 	add.w	r7, r7, #32
   1446a:	f2c0 82bc 	blt.w	149e6 <lv_theme_material_init+0x134e>
   1446e:	2000      	movs	r0, #0
   14470:	f7fe f874 	bl	1255c <lv_disp_get_dpi>
   14474:	fb00 8206 	mla	r2, r0, r6, r8
   14478:	26a0      	movs	r6, #160	; 0xa0
   1447a:	fb92 f2f6 	sdiv	r2, r2, r6
   1447e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   14480:	4638      	mov	r0, r7
   14482:	2192      	movs	r1, #146	; 0x92
   14484:	f008 ffc6 	bl	1d414 <_lv_style_set_int>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14488:	2000      	movs	r0, #0
   1448a:	6826      	ldr	r6, [r4, #0]
   1448c:	2750      	movs	r7, #80	; 0x50
   1448e:	f7fe f865 	bl	1255c <lv_disp_get_dpi>
   14492:	240a      	movs	r4, #10
   14494:	fb00 7004 	mla	r0, r0, r4, r7
   14498:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1449c:	f106 0620 	add.w	r6, r6, #32
   144a0:	f2c0 82a3 	blt.w	149ea <lv_theme_material_init+0x1352>
   144a4:	2000      	movs	r0, #0
   144a6:	f7fe f859 	bl	1255c <lv_disp_get_dpi>
   144aa:	fb00 7204 	mla	r2, r0, r4, r7
   144ae:	24a0      	movs	r4, #160	; 0xa0
   144b0:	fb92 f2f4 	sdiv	r2, r2, r4
   144b4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   144b6:	4630      	mov	r0, r6
   144b8:	2193      	movs	r1, #147	; 0x93
   144ba:	f008 ffab 	bl	1d414 <_lv_style_set_int>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   144be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   144c0:	4cae      	ldr	r4, [pc, #696]	; (1477c <lv_theme_material_init+0x10e4>)
   144c2:	079b      	lsls	r3, r3, #30
   144c4:	bf4c      	ite	mi
   144c6:	48ae      	ldrmi	r0, [pc, #696]	; (14780 <lv_theme_material_init+0x10e8>)
   144c8:	48ae      	ldrpl	r0, [pc, #696]	; (14784 <lv_theme_material_init+0x10ec>)
   144ca:	6826      	ldr	r6, [r4, #0]
   144cc:	f00d f9e1 	bl	21892 <lv_color_hex>
   144d0:	3620      	adds	r6, #32
   144d2:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   144d4:	2199      	movs	r1, #153	; 0x99
   144d6:	4630      	mov	r0, r6
   144d8:	f008 ffe0 	bl	1d49c <_lv_style_set_color>
    style_init_reset(&styles->chart_series);
   144dc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   144de:	2503      	movs	r5, #3
    style_init_reset(&styles->chart_series);
   144e0:	3024      	adds	r0, #36	; 0x24
   144e2:	f7ff f8cf 	bl	13684 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   144e6:	2000      	movs	r0, #0
   144e8:	6826      	ldr	r6, [r4, #0]
   144ea:	2750      	movs	r7, #80	; 0x50
   144ec:	f7fe f836 	bl	1255c <lv_disp_get_dpi>
   144f0:	fb00 7005 	mla	r0, r0, r5, r7
   144f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   144f8:	f106 0624 	add.w	r6, r6, #36	; 0x24
   144fc:	f2c0 8277 	blt.w	149ee <lv_theme_material_init+0x1356>
   14500:	2000      	movs	r0, #0
   14502:	f7fe f82b 	bl	1255c <lv_disp_get_dpi>
   14506:	fb00 7205 	mla	r2, r0, r5, r7
   1450a:	25a0      	movs	r5, #160	; 0xa0
   1450c:	fb92 f2f5 	sdiv	r2, r2, r5
   14510:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14512:	2190      	movs	r1, #144	; 0x90
   14514:	4630      	mov	r0, r6
   14516:	f008 ff7d 	bl	1d414 <_lv_style_set_int>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   1451a:	2000      	movs	r0, #0
   1451c:	6825      	ldr	r5, [r4, #0]
   1451e:	f7fe f81d 	bl	1255c <lv_disp_get_dpi>
   14522:	3014      	adds	r0, #20
   14524:	0080      	lsls	r0, r0, #2
   14526:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1452a:	f105 0524 	add.w	r5, r5, #36	; 0x24
   1452e:	f2c0 8260 	blt.w	149f2 <lv_theme_material_init+0x135a>
   14532:	2000      	movs	r0, #0
   14534:	f7fe f812 	bl	1255c <lv_disp_get_dpi>
   14538:	f100 0214 	add.w	r2, r0, #20
   1453c:	20a0      	movs	r0, #160	; 0xa0
   1453e:	0092      	lsls	r2, r2, #2
   14540:	fb92 f2f0 	sdiv	r2, r2, r0
   14544:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14546:	4628      	mov	r0, r5
   14548:	2103      	movs	r1, #3
   1454a:	f008 ff63 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   1454e:	2000      	movs	r0, #0
   14550:	6825      	ldr	r5, [r4, #0]
   14552:	f7fe f803 	bl	1255c <lv_disp_get_dpi>
   14556:	3028      	adds	r0, #40	; 0x28
   14558:	0040      	lsls	r0, r0, #1
   1455a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1455e:	f105 0524 	add.w	r5, r5, #36	; 0x24
   14562:	f2c0 8248 	blt.w	149f6 <lv_theme_material_init+0x135e>
   14566:	2000      	movs	r0, #0
   14568:	f7fd fff8 	bl	1255c <lv_disp_get_dpi>
   1456c:	f100 0228 	add.w	r2, r0, #40	; 0x28
   14570:	20a0      	movs	r0, #160	; 0xa0
   14572:	0052      	lsls	r2, r2, #1
   14574:	fb92 f2f0 	sdiv	r2, r2, r0
   14578:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1457a:	4628      	mov	r0, r5
   1457c:	2114      	movs	r1, #20
   1457e:	f008 ff49 	bl	1d414 <_lv_style_set_int>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   14582:	2000      	movs	r0, #0
   14584:	6825      	ldr	r5, [r4, #0]
   14586:	f7fd ffe9 	bl	1255c <lv_disp_get_dpi>
   1458a:	3050      	adds	r0, #80	; 0x50
   1458c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14590:	f105 0524 	add.w	r5, r5, #36	; 0x24
   14594:	f2c0 8231 	blt.w	149fa <lv_theme_material_init+0x1362>
   14598:	2000      	movs	r0, #0
   1459a:	f7fd ffdf 	bl	1255c <lv_disp_get_dpi>
   1459e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   145a2:	20a0      	movs	r0, #160	; 0xa0
   145a4:	fb92 f2f0 	sdiv	r2, r2, r0
   145a8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   145aa:	2101      	movs	r1, #1
   145ac:	4628      	mov	r0, r5
   145ae:	f008 ff31 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->cb_bg);
   145b2:	6820      	ldr	r0, [r4, #0]
   145b4:	3028      	adds	r0, #40	; 0x28
   145b6:	f7ff f865 	bl	13684 <style_init_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   145ba:	2000      	movs	r0, #0
   145bc:	6825      	ldr	r5, [r4, #0]
   145be:	f7fd ffcd 	bl	1255c <lv_disp_get_dpi>
   145c2:	3014      	adds	r0, #20
   145c4:	0080      	lsls	r0, r0, #2
   145c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145ca:	f105 0528 	add.w	r5, r5, #40	; 0x28
   145ce:	f2c0 8216 	blt.w	149fe <lv_theme_material_init+0x1366>
   145d2:	2000      	movs	r0, #0
   145d4:	f7fd ffc2 	bl	1255c <lv_disp_get_dpi>
   145d8:	f100 0214 	add.w	r2, r0, #20
   145dc:	20a0      	movs	r0, #160	; 0xa0
   145de:	0092      	lsls	r2, r2, #2
   145e0:	fb92 f2f0 	sdiv	r2, r2, r0
   145e4:	b212      	sxth	r2, r2
   145e6:	4628      	mov	r0, r5
   145e8:	2101      	movs	r1, #1
   145ea:	f008 ff13 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   145ee:	2000      	movs	r0, #0
   145f0:	6826      	ldr	r6, [r4, #0]
   145f2:	250a      	movs	r5, #10
   145f4:	f7fd ffb2 	bl	1255c <lv_disp_get_dpi>
   145f8:	2750      	movs	r7, #80	; 0x50
   145fa:	fb00 7005 	mla	r0, r0, r5, r7
   145fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14602:	f106 0628 	add.w	r6, r6, #40	; 0x28
   14606:	f2c0 81fc 	blt.w	14a02 <lv_theme_material_init+0x136a>
   1460a:	2000      	movs	r0, #0
   1460c:	f7fd ffa6 	bl	1255c <lv_disp_get_dpi>
   14610:	fb00 7205 	mla	r2, r0, r5, r7
   14614:	25a0      	movs	r5, #160	; 0xa0
   14616:	fb92 f2f5 	sdiv	r2, r2, r5
   1461a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1461c:	4630      	mov	r0, r6
   1461e:	2114      	movs	r1, #20
   14620:	f008 fef8 	bl	1d414 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   14624:	4d58      	ldr	r5, [pc, #352]	; (14788 <lv_theme_material_init+0x10f0>)
   14626:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   14628:	2149      	movs	r1, #73	; 0x49
   1462a:	68ea      	ldr	r2, [r5, #12]
   1462c:	3028      	adds	r0, #40	; 0x28
   1462e:	f008 ff35 	bl	1d49c <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   14632:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   14634:	2200      	movs	r2, #0
   14636:	214c      	movs	r1, #76	; 0x4c
   14638:	3028      	adds	r0, #40	; 0x28
   1463a:	f008 ff73 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   1463e:	6820      	ldr	r0, [r4, #0]
   14640:	227f      	movs	r2, #127	; 0x7f
   14642:	3028      	adds	r0, #40	; 0x28
   14644:	f44f 7113 	mov.w	r1, #588	; 0x24c
   14648:	f008 ff6c 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
   1464c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1464e:	6826      	ldr	r6, [r4, #0]
   14650:	f010 0720 	ands.w	r7, r0, #32
   14654:	f106 0628 	add.w	r6, r6, #40	; 0x28
   14658:	f040 81d5 	bne.w	14a06 <lv_theme_material_init+0x136e>
   1465c:	4638      	mov	r0, r7
   1465e:	f7fd ff7d 	bl	1255c <lv_disp_get_dpi>
   14662:	3028      	adds	r0, #40	; 0x28
   14664:	0040      	lsls	r0, r0, #1
   14666:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1466a:	f2c0 81ce 	blt.w	14a0a <lv_theme_material_init+0x1372>
   1466e:	4638      	mov	r0, r7
   14670:	f7fd ff74 	bl	1255c <lv_disp_get_dpi>
   14674:	f100 0228 	add.w	r2, r0, #40	; 0x28
   14678:	20a0      	movs	r0, #160	; 0xa0
   1467a:	0052      	lsls	r2, r2, #1
   1467c:	fb92 f2f0 	sdiv	r2, r2, r0
   14680:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   14682:	4630      	mov	r0, r6
   14684:	2140      	movs	r1, #64	; 0x40
   14686:	f008 fec5 	bl	1d414 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1468a:	2000      	movs	r0, #0
   1468c:	6827      	ldr	r7, [r4, #0]
   1468e:	260a      	movs	r6, #10
   14690:	f7fd ff64 	bl	1255c <lv_disp_get_dpi>
   14694:	f04f 0850 	mov.w	r8, #80	; 0x50
   14698:	fb00 8006 	mla	r0, r0, r6, r8
   1469c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   146a0:	f107 0728 	add.w	r7, r7, #40	; 0x28
   146a4:	f2c0 81b3 	blt.w	14a0e <lv_theme_material_init+0x1376>
   146a8:	2000      	movs	r0, #0
   146aa:	f7fd ff57 	bl	1255c <lv_disp_get_dpi>
   146ae:	fb00 8206 	mla	r2, r0, r6, r8
   146b2:	26a0      	movs	r6, #160	; 0xa0
   146b4:	fb92 f2f6 	sdiv	r2, r2, r6
   146b8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   146ba:	2141      	movs	r1, #65	; 0x41
   146bc:	4638      	mov	r0, r7
   146be:	f008 fea9 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   146c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   146c4:	2200      	movs	r2, #0
   146c6:	21b0      	movs	r1, #176	; 0xb0
   146c8:	3028      	adds	r0, #40	; 0x28
   146ca:	f008 fea3 	bl	1d414 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   146ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   146d0:	224c      	movs	r2, #76	; 0x4c
   146d2:	21b7      	movs	r1, #183	; 0xb7
   146d4:	3028      	adds	r0, #40	; 0x28
   146d6:	f008 fe9d 	bl	1d414 <_lv_style_set_int>
    style_init_reset(&styles->cb_bullet);
   146da:	6820      	ldr	r0, [r4, #0]
   146dc:	302c      	adds	r0, #44	; 0x2c
   146de:	f7fe ffd1 	bl	13684 <style_init_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   146e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   146e4:	2200      	movs	r2, #0
   146e6:	f44f 7113 	mov.w	r1, #588	; 0x24c
   146ea:	302c      	adds	r0, #44	; 0x2c
   146ec:	f008 ff1a 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   146f0:	2000      	movs	r0, #0
   146f2:	6826      	ldr	r6, [r4, #0]
   146f4:	f7fd ff32 	bl	1255c <lv_disp_get_dpi>
   146f8:	3014      	adds	r0, #20
   146fa:	0080      	lsls	r0, r0, #2
   146fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14700:	f106 062c 	add.w	r6, r6, #44	; 0x2c
   14704:	f2c0 8185 	blt.w	14a12 <lv_theme_material_init+0x137a>
   14708:	2000      	movs	r0, #0
   1470a:	f7fd ff27 	bl	1255c <lv_disp_get_dpi>
   1470e:	f100 0214 	add.w	r2, r0, #20
   14712:	20a0      	movs	r0, #160	; 0xa0
   14714:	0092      	lsls	r2, r2, #2
   14716:	fb92 f2f0 	sdiv	r2, r2, r0
   1471a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1471c:	4630      	mov	r0, r6
   1471e:	2101      	movs	r1, #1
   14720:	f008 fe78 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   14724:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   14726:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1472a:	4a18      	ldr	r2, [pc, #96]	; (1478c <lv_theme_material_init+0x10f4>)
   1472c:	302c      	adds	r0, #44	; 0x2c
   1472e:	f008 ff3f 	bl	1d5b0 <_lv_style_set_ptr>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   14732:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   14734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14738:	f240 1169 	movw	r1, #361	; 0x169
   1473c:	302c      	adds	r0, #44	; 0x2c
   1473e:	f008 fead 	bl	1d49c <_lv_style_set_color>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   14742:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
   14744:	2200      	movs	r2, #0
   14746:	216c      	movs	r1, #108	; 0x6c
   14748:	302c      	adds	r0, #44	; 0x2c
   1474a:	f008 feeb 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
   1474e:	6820      	ldr	r0, [r4, #0]
   14750:	22ff      	movs	r2, #255	; 0xff
   14752:	f44f 71b6 	mov.w	r1, #364	; 0x16c
   14756:	302c      	adds	r0, #44	; 0x2c
   14758:	f008 fee4 	bl	1d524 <_lv_style_set_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
   1475c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
   1475e:	226c      	movs	r2, #108	; 0x6c
   14760:	21b4      	movs	r1, #180	; 0xb4
   14762:	302c      	adds	r0, #44	; 0x2c
   14764:	f008 fe56 	bl	1d414 <_lv_style_set_int>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   14768:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1476a:	f248 118e 	movw	r1, #33166	; 0x818e
   1476e:	696a      	ldr	r2, [r5, #20]
   14770:	302c      	adds	r0, #44	; 0x2c
   14772:	f008 ff1d 	bl	1d5b0 <_lv_style_set_ptr>
   14776:	e00b      	b.n	14790 <lv_theme_material_init+0x10f8>
   14778:	00a1adbd 	.word	0x00a1adbd
   1477c:	20025eb4 	.word	0x20025eb4
   14780:	00d6dde3 	.word	0x00d6dde3
   14784:	00808a97 	.word	0x00808a97
   14788:	20025eb8 	.word	0x20025eb8
   1478c:	00027d91 	.word	0x00027d91
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14790:	2000      	movs	r0, #0
   14792:	6827      	ldr	r7, [r4, #0]
   14794:	2603      	movs	r6, #3
   14796:	f7fd fee1 	bl	1255c <lv_disp_get_dpi>
   1479a:	f04f 0850 	mov.w	r8, #80	; 0x50
   1479e:	fb00 8006 	mla	r0, r0, r6, r8
   147a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   147a6:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   147aa:	f2c0 8134 	blt.w	14a16 <lv_theme_material_init+0x137e>
   147ae:	2000      	movs	r0, #0
   147b0:	f7fd fed4 	bl	1255c <lv_disp_get_dpi>
   147b4:	fb00 8206 	mla	r2, r0, r6, r8
   147b8:	26a0      	movs	r6, #160	; 0xa0
   147ba:	fb92 f2f6 	sdiv	r2, r2, r6
   147be:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   147c0:	4638      	mov	r0, r7
   147c2:	2112      	movs	r1, #18
   147c4:	f008 fe26 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   147c8:	2000      	movs	r0, #0
   147ca:	6827      	ldr	r7, [r4, #0]
   147cc:	2603      	movs	r6, #3
   147ce:	f7fd fec5 	bl	1255c <lv_disp_get_dpi>
   147d2:	f04f 0850 	mov.w	r8, #80	; 0x50
   147d6:	fb00 8006 	mla	r0, r0, r6, r8
   147da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   147de:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   147e2:	f2c0 811a 	blt.w	14a1a <lv_theme_material_init+0x1382>
   147e6:	2000      	movs	r0, #0
   147e8:	f7fd feb8 	bl	1255c <lv_disp_get_dpi>
   147ec:	fb00 8206 	mla	r2, r0, r6, r8
   147f0:	26a0      	movs	r6, #160	; 0xa0
   147f2:	fb92 f2f6 	sdiv	r2, r2, r6
   147f6:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   147f8:	4638      	mov	r0, r7
   147fa:	2113      	movs	r1, #19
   147fc:	f008 fe0a 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14800:	2000      	movs	r0, #0
   14802:	6827      	ldr	r7, [r4, #0]
   14804:	2603      	movs	r6, #3
   14806:	f7fd fea9 	bl	1255c <lv_disp_get_dpi>
   1480a:	f04f 0850 	mov.w	r8, #80	; 0x50
   1480e:	fb00 8006 	mla	r0, r0, r6, r8
   14812:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14816:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1481a:	f2c0 8100 	blt.w	14a1e <lv_theme_material_init+0x1386>
   1481e:	2000      	movs	r0, #0
   14820:	f7fd fe9c 	bl	1255c <lv_disp_get_dpi>
   14824:	fb00 8206 	mla	r2, r0, r6, r8
   14828:	26a0      	movs	r6, #160	; 0xa0
   1482a:	fb92 f2f6 	sdiv	r2, r2, r6
   1482e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14830:	4638      	mov	r0, r7
   14832:	2110      	movs	r1, #16
   14834:	f008 fdee 	bl	1d414 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14838:	2000      	movs	r0, #0
   1483a:	6826      	ldr	r6, [r4, #0]
   1483c:	2750      	movs	r7, #80	; 0x50
   1483e:	f7fd fe8d 	bl	1255c <lv_disp_get_dpi>
   14842:	2403      	movs	r4, #3
   14844:	fb00 7004 	mla	r0, r0, r4, r7
   14848:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1484c:	f106 062c 	add.w	r6, r6, #44	; 0x2c
   14850:	f2c0 80e7 	blt.w	14a22 <lv_theme_material_init+0x138a>
   14854:	2000      	movs	r0, #0
   14856:	f7fd fe81 	bl	1255c <lv_disp_get_dpi>
   1485a:	fb00 7204 	mla	r2, r0, r4, r7
   1485e:	24a0      	movs	r4, #160	; 0xa0
   14860:	fb92 f2f4 	sdiv	r2, r2, r4
   14864:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14866:	2111      	movs	r1, #17
   14868:	4630      	mov	r0, r6
   1486a:	f008 fdd3 	bl	1d414 <_lv_style_set_int>
    theme.apply_xcb = NULL;
   1486e:	2000      	movs	r0, #0
    inited = true;
   14870:	2201      	movs	r2, #1
    theme.apply_cb = theme_apply;
   14872:	4b6d      	ldr	r3, [pc, #436]	; (14a28 <lv_theme_material_init+0x1390>)
    theme.apply_xcb = NULL;
   14874:	6068      	str	r0, [r5, #4]
    theme.apply_cb = theme_apply;
   14876:	602b      	str	r3, [r5, #0]
    inited = true;
   14878:	4b6c      	ldr	r3, [pc, #432]	; (14a2c <lv_theme_material_init+0x1394>)
   1487a:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
   1487c:	f007 fef9 	bl	1c672 <lv_obj_report_style_mod>
}
   14880:	486b      	ldr	r0, [pc, #428]	; (14a30 <lv_theme_material_init+0x1398>)
   14882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   14886:	2201      	movs	r2, #1
   14888:	f7fe bf70 	b.w	1376c <lv_theme_material_init+0xd4>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1488c:	2201      	movs	r2, #1
   1488e:	f7fe bfbb 	b.w	13808 <lv_theme_material_init+0x170>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14892:	f7fd fe63 	bl	1255c <lv_disp_get_dpi>
   14896:	261e      	movs	r6, #30
   14898:	f7ff b818 	b.w	138cc <lv_theme_material_init+0x234>
   1489c:	2000      	movs	r0, #0
   1489e:	f7fd fe5d 	bl	1255c <lv_disp_get_dpi>
   148a2:	22a0      	movs	r2, #160	; 0xa0
   148a4:	fb00 8606 	mla	r6, r0, r6, r8
   148a8:	fb96 f6f2 	sdiv	r6, r6, r2
   148ac:	b236      	sxth	r6, r6
   148ae:	f7ff b816 	b.w	138de <lv_theme_material_init+0x246>
   148b2:	2201      	movs	r2, #1
   148b4:	f7ff b826 	b.w	13904 <lv_theme_material_init+0x26c>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   148b8:	f7fd fe50 	bl	1255c <lv_disp_get_dpi>
   148bc:	261e      	movs	r6, #30
   148be:	f7ff b835 	b.w	1392c <lv_theme_material_init+0x294>
   148c2:	2000      	movs	r0, #0
   148c4:	f7fd fe4a 	bl	1255c <lv_disp_get_dpi>
   148c8:	22a0      	movs	r2, #160	; 0xa0
   148ca:	fb00 8606 	mla	r6, r0, r6, r8
   148ce:	fb96 f6f2 	sdiv	r6, r6, r2
   148d2:	b236      	sxth	r6, r6
   148d4:	f7ff b833 	b.w	1393e <lv_theme_material_init+0x2a6>
   148d8:	2201      	movs	r2, #1
   148da:	f7ff b843 	b.w	13964 <lv_theme_material_init+0x2cc>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   148de:	f7fd fe3d 	bl	1255c <lv_disp_get_dpi>
   148e2:	261e      	movs	r6, #30
   148e4:	f7ff b852 	b.w	1398c <lv_theme_material_init+0x2f4>
   148e8:	2000      	movs	r0, #0
   148ea:	f7fd fe37 	bl	1255c <lv_disp_get_dpi>
   148ee:	22a0      	movs	r2, #160	; 0xa0
   148f0:	fb00 8606 	mla	r6, r0, r6, r8
   148f4:	fb96 f6f2 	sdiv	r6, r6, r2
   148f8:	b236      	sxth	r6, r6
   148fa:	f7ff b850 	b.w	1399e <lv_theme_material_init+0x306>
   148fe:	2201      	movs	r2, #1
   14900:	f7ff b878 	b.w	139f4 <lv_theme_material_init+0x35c>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14904:	f7fd fe2a 	bl	1255c <lv_disp_get_dpi>
   14908:	261e      	movs	r6, #30
   1490a:	f7ff b887 	b.w	13a1c <lv_theme_material_init+0x384>
   1490e:	2000      	movs	r0, #0
   14910:	f7fd fe24 	bl	1255c <lv_disp_get_dpi>
   14914:	22a0      	movs	r2, #160	; 0xa0
   14916:	fb00 8606 	mla	r6, r0, r6, r8
   1491a:	fb96 f6f2 	sdiv	r6, r6, r2
   1491e:	b236      	sxth	r6, r6
   14920:	f7ff b885 	b.w	13a2e <lv_theme_material_init+0x396>
   14924:	2201      	movs	r2, #1
   14926:	f7ff b895 	b.w	13a54 <lv_theme_material_init+0x3bc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   1492a:	f7fd fe17 	bl	1255c <lv_disp_get_dpi>
   1492e:	261e      	movs	r6, #30
   14930:	f7ff b8a4 	b.w	13a7c <lv_theme_material_init+0x3e4>
   14934:	2000      	movs	r0, #0
   14936:	f7fd fe11 	bl	1255c <lv_disp_get_dpi>
   1493a:	fb00 8206 	mla	r2, r0, r6, r8
   1493e:	26a0      	movs	r6, #160	; 0xa0
   14940:	fb92 f2f6 	sdiv	r2, r2, r6
   14944:	b212      	sxth	r2, r2
   14946:	f7ff b8a2 	b.w	13a8e <lv_theme_material_init+0x3f6>
   1494a:	23cc      	movs	r3, #204	; 0xcc
   1494c:	20ff      	movs	r0, #255	; 0xff
   1494e:	4619      	mov	r1, r3
   14950:	461e      	mov	r6, r3
   14952:	f7ff b966 	b.w	13c22 <lv_theme_material_init+0x58a>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   14956:	4837      	ldr	r0, [pc, #220]	; (14a34 <lv_theme_material_init+0x139c>)
   14958:	f00c ff9b 	bl	21892 <lv_color_hex>
   1495c:	f04f 0cb3 	mov.w	ip, #179	; 0xb3
   14960:	f3c0 4307 	ubfx	r3, r0, #16, #8
   14964:	224c      	movs	r2, #76	; 0x4c
   14966:	fb13 f30c 	smulbb	r3, r3, ip
   1496a:	7ba9      	ldrb	r1, [r5, #14]
   1496c:	f7ff ba6b 	b.w	13e46 <lv_theme_material_init+0x7ae>
   14970:	2388      	movs	r3, #136	; 0x88
   14972:	20ff      	movs	r0, #255	; 0xff
   14974:	4619      	mov	r1, r3
   14976:	461f      	mov	r7, r3
   14978:	f7ff bae4 	b.w	13f44 <lv_theme_material_init+0x8ac>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   1497c:	2201      	movs	r2, #1
   1497e:	f7ff bb05 	b.w	13f8c <lv_theme_material_init+0x8f4>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   14982:	2201      	movs	r2, #1
   14984:	f7ff bbf6 	b.w	14174 <lv_theme_material_init+0xadc>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   14988:	2201      	movs	r2, #1
   1498a:	e40f      	b.n	141ac <lv_theme_material_init+0xb14>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   1498c:	2201      	movs	r2, #1
   1498e:	e429      	b.n	141e4 <lv_theme_material_init+0xb4c>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   14990:	2201      	movs	r2, #1
   14992:	e44d      	b.n	14230 <lv_theme_material_init+0xb98>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   14994:	2201      	movs	r2, #1
   14996:	e467      	b.n	14268 <lv_theme_material_init+0xbd0>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
   14998:	2200      	movs	r2, #0
   1499a:	e484      	b.n	142a6 <lv_theme_material_init+0xc0e>
   1499c:	2201      	movs	r2, #1
   1499e:	e482      	b.n	142a6 <lv_theme_material_init+0xc0e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   149a0:	f7fd fddc 	bl	1255c <lv_disp_get_dpi>
   149a4:	2628      	movs	r6, #40	; 0x28
   149a6:	e4d3      	b.n	14350 <lv_theme_material_init+0xcb8>
   149a8:	2000      	movs	r0, #0
   149aa:	f7fd fdd7 	bl	1255c <lv_disp_get_dpi>
   149ae:	fb00 8206 	mla	r2, r0, r6, r8
   149b2:	26a0      	movs	r6, #160	; 0xa0
   149b4:	fb92 f2f6 	sdiv	r2, r2, r6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   149b8:	b212      	sxth	r2, r2
   149ba:	e4d2      	b.n	14362 <lv_theme_material_init+0xcca>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   149bc:	f7fd fdce 	bl	1255c <lv_disp_get_dpi>
   149c0:	2614      	movs	r6, #20
   149c2:	e4e1      	b.n	14388 <lv_theme_material_init+0xcf0>
   149c4:	2000      	movs	r0, #0
   149c6:	f7fd fdc9 	bl	1255c <lv_disp_get_dpi>
   149ca:	22a0      	movs	r2, #160	; 0xa0
   149cc:	fb00 7606 	mla	r6, r0, r6, r7
   149d0:	fb96 f6f2 	sdiv	r6, r6, r2
   149d4:	b236      	sxth	r6, r6
   149d6:	e4df      	b.n	14398 <lv_theme_material_init+0xd00>
   149d8:	23aa      	movs	r3, #170	; 0xaa
   149da:	20ff      	movs	r0, #255	; 0xff
   149dc:	4619      	mov	r1, r3
   149de:	461f      	mov	r7, r3
   149e0:	e50c      	b.n	143fc <lv_theme_material_init+0xd64>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   149e2:	2201      	movs	r2, #1
   149e4:	e530      	b.n	14448 <lv_theme_material_init+0xdb0>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   149e6:	2201      	movs	r2, #1
   149e8:	e54a      	b.n	14480 <lv_theme_material_init+0xde8>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   149ea:	2201      	movs	r2, #1
   149ec:	e563      	b.n	144b6 <lv_theme_material_init+0xe1e>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   149ee:	2201      	movs	r2, #1
   149f0:	e58f      	b.n	14512 <lv_theme_material_init+0xe7a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   149f2:	2201      	movs	r2, #1
   149f4:	e5a7      	b.n	14546 <lv_theme_material_init+0xeae>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   149f6:	2201      	movs	r2, #1
   149f8:	e5bf      	b.n	1457a <lv_theme_material_init+0xee2>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   149fa:	2201      	movs	r2, #1
   149fc:	e5d5      	b.n	145aa <lv_theme_material_init+0xf12>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   149fe:	2201      	movs	r2, #1
   14a00:	e5f1      	b.n	145e6 <lv_theme_material_init+0xf4e>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14a02:	2201      	movs	r2, #1
   14a04:	e60a      	b.n	1461c <lv_theme_material_init+0xf84>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
   14a06:	2200      	movs	r2, #0
   14a08:	e63b      	b.n	14682 <lv_theme_material_init+0xfea>
   14a0a:	2201      	movs	r2, #1
   14a0c:	e639      	b.n	14682 <lv_theme_material_init+0xfea>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14a0e:	2201      	movs	r2, #1
   14a10:	e653      	b.n	146ba <lv_theme_material_init+0x1022>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   14a12:	2201      	movs	r2, #1
   14a14:	e682      	b.n	1471c <lv_theme_material_init+0x1084>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14a16:	2201      	movs	r2, #1
   14a18:	e6d2      	b.n	147c0 <lv_theme_material_init+0x1128>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14a1a:	2201      	movs	r2, #1
   14a1c:	e6ec      	b.n	147f8 <lv_theme_material_init+0x1160>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14a1e:	2201      	movs	r2, #1
   14a20:	e706      	b.n	14830 <lv_theme_material_init+0x1198>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14a22:	2201      	movs	r2, #1
   14a24:	e71f      	b.n	14866 <lv_theme_material_init+0x11ce>
   14a26:	bf00      	nop
   14a28:	000135b1 	.word	0x000135b1
   14a2c:	2002a185 	.word	0x2002a185
   14a30:	20025eb8 	.word	0x20025eb8
   14a34:	00586273 	.word	0x00586273

00014a38 <lv_chart_signal>:
 */
static lv_res_t lv_chart_signal(lv_obj_t * chart, lv_signal_t sign, void * param)
{
    /* Include the ancient signal function */
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
   14a38:	2908      	cmp	r1, #8
{
   14a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a3e:	4604      	mov	r4, r0
   14a40:	460e      	mov	r6, r1
   14a42:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   14a44:	d11e      	bne.n	14a84 <lv_chart_signal+0x4c>
        lv_get_style_info_t * info = param;
        info->result = lv_chart_get_style(chart, info->part);
   14a46:	7816      	ldrb	r6, [r2, #0]
 */
static lv_style_list_t * lv_chart_get_style(lv_obj_t * chart, uint8_t part)
{
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);

    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14a48:	f007 fea6 	bl	1c798 <lv_obj_get_ext_attr>
    lv_style_list_t * style_dsc_p;

    switch(part) {
   14a4c:	2e01      	cmp	r6, #1
   14a4e:	d015      	beq.n	14a7c <lv_chart_signal+0x44>
   14a50:	2e02      	cmp	r6, #2
   14a52:	d015      	beq.n	14a80 <lv_chart_signal+0x48>
   14a54:	b14e      	cbz	r6, 14a6a <lv_chart_signal+0x32>
        info->result = lv_chart_get_style(chart, info->part);
   14a56:	2300      	movs	r3, #0
   14a58:	606b      	str	r3, [r5, #4]
        else return ancestor_signal(chart, sign, param);
   14a5a:	4b24      	ldr	r3, [pc, #144]	; (14aec <lv_chart_signal+0xb4>)
   14a5c:	462a      	mov	r2, r5
   14a5e:	4620      	mov	r0, r4
}
   14a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(chart, sign, param);
   14a64:	2108      	movs	r1, #8
   14a66:	681b      	ldr	r3, [r3, #0]
   14a68:	4718      	bx	r3
        case LV_CHART_PART_BG:
            style_dsc_p = &chart->style_list;
   14a6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
        info->result = lv_chart_get_style(chart, info->part);
   14a6e:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
   14a70:	2800      	cmp	r0, #0
   14a72:	d0f2      	beq.n	14a5a <lv_chart_signal+0x22>
   14a74:	2701      	movs	r7, #1
}
   14a76:	4638      	mov	r0, r7
   14a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            break;
        case LV_CHART_PART_SERIES_BG:
            style_dsc_p = &ext->style_series_bg;
   14a7c:	3018      	adds	r0, #24
            break;
   14a7e:	e7f6      	b.n	14a6e <lv_chart_signal+0x36>
        case LV_CHART_PART_SERIES:
            style_dsc_p = &ext->style_series;
   14a80:	3020      	adds	r0, #32
            break;
   14a82:	e7f4      	b.n	14a6e <lv_chart_signal+0x36>
    res = ancestor_signal(chart, sign, param);
   14a84:	4b19      	ldr	r3, [pc, #100]	; (14aec <lv_chart_signal+0xb4>)
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   14a8a:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
   14a8c:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
   14a8e:	d1f2      	bne.n	14a76 <lv_chart_signal+0x3e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   14a90:	2e07      	cmp	r6, #7
   14a92:	d105      	bne.n	14aa0 <lv_chart_signal+0x68>
   14a94:	4628      	mov	r0, r5
}
   14a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   14a9a:	4915      	ldr	r1, [pc, #84]	; (14af0 <lv_chart_signal+0xb8>)
   14a9c:	f007 be7e 	b.w	1c79c <lv_obj_handle_get_type_signal>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14aa0:	4620      	mov	r0, r4
   14aa2:	f007 fe79 	bl	1c798 <lv_obj_get_ext_attr>
   14aa6:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   14aa8:	2e00      	cmp	r6, #0
   14aaa:	d1e3      	bne.n	14a74 <lv_chart_signal+0x3c>
        while(ext->series_ll.head != NULL) {
   14aac:	686b      	ldr	r3, [r5, #4]
            ser = _lv_ll_get_head(&ext->series_ll);
   14aae:	4628      	mov	r0, r5
        while(ext->series_ll.head != NULL) {
   14ab0:	b953      	cbnz	r3, 14ac8 <lv_chart_signal+0x90>
        _lv_ll_clear(&ext->series_ll);
   14ab2:	f00c fdd8 	bl	21666 <_lv_ll_clear>
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES);
   14ab6:	4620      	mov	r0, r4
   14ab8:	2102      	movs	r1, #2
   14aba:	f7fa fb53 	bl	f164 <lv_obj_clean_style_list>
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES_BG);
   14abe:	2101      	movs	r1, #1
   14ac0:	4620      	mov	r0, r4
   14ac2:	f7fa fb4f 	bl	f164 <lv_obj_clean_style_list>
   14ac6:	e7d6      	b.n	14a76 <lv_chart_signal+0x3e>
            ser = _lv_ll_get_head(&ext->series_ll);
   14ac8:	f00c fd53 	bl	21572 <_lv_ll_get_head>
            if(!ser->ext_buf_assigned) lv_mem_free(ser->points);
   14acc:	7a83      	ldrb	r3, [r0, #10]
            ser = _lv_ll_get_head(&ext->series_ll);
   14ace:	4606      	mov	r6, r0
            if(!ser->ext_buf_assigned) lv_mem_free(ser->points);
   14ad0:	07db      	lsls	r3, r3, #31
   14ad2:	d402      	bmi.n	14ada <lv_chart_signal+0xa2>
   14ad4:	6800      	ldr	r0, [r0, #0]
   14ad6:	f7fd ffc1 	bl	12a5c <lv_mem_free>
            _lv_ll_remove(&ext->series_ll, ser);
   14ada:	4628      	mov	r0, r5
   14adc:	4631      	mov	r1, r6
   14ade:	f00c fd89 	bl	215f4 <_lv_ll_remove>
            lv_mem_free(ser);
   14ae2:	4630      	mov	r0, r6
   14ae4:	f7fd ffba 	bl	12a5c <lv_mem_free>
   14ae8:	e7e0      	b.n	14aac <lv_chart_signal+0x74>
   14aea:	bf00      	nop
   14aec:	20025ee8 	.word	0x20025ee8
   14af0:	00027d95 	.word	0x00027d95

00014af4 <lv_chart_design>:
{
   14af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
   14af8:	2a02      	cmp	r2, #2
{
   14afa:	4683      	mov	fp, r0
   14afc:	4689      	mov	r9, r1
   14afe:	4614      	mov	r4, r2
   14b00:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
    if(mode == LV_DESIGN_COVER_CHK) {
   14b04:	d108      	bne.n	14b18 <lv_chart_design+0x24>
        return ancestor_design(chart, clip_area, mode);
   14b06:	4b03      	ldr	r3, [pc, #12]	; (14b14 <lv_chart_design+0x20>)
   14b08:	681b      	ldr	r3, [r3, #0]
   14b0a:	4798      	blx	r3
}
   14b0c:	f50d 7d29 	add.w	sp, sp, #676	; 0x2a4
   14b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b14:	20025ee4 	.word	0x20025ee4
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   14b18:	2a00      	cmp	r2, #0
   14b1a:	f040 81ba 	bne.w	14e92 <lv_chart_design+0x39e>
        lv_draw_rect_dsc_init(&bg_dsc);
   14b1e:	a833      	add	r0, sp, #204	; 0xcc
   14b20:	f7fd f894 	bl	11c4c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_BG, &bg_dsc);
   14b24:	4621      	mov	r1, r4
   14b26:	4658      	mov	r0, fp
   14b28:	aa33      	add	r2, sp, #204	; 0xcc
   14b2a:	f007 fe45 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&chart->coords, clip_area, &bg_dsc);
   14b2e:	aa33      	add	r2, sp, #204	; 0xcc
   14b30:	4649      	mov	r1, r9
   14b32:	f10b 0010 	add.w	r0, fp, #16
   14b36:	f00a fcf2 	bl	1f51e <lv_draw_rect>
        get_series_area(chart, &series_area);
   14b3a:	a917      	add	r1, sp, #92	; 0x5c
   14b3c:	4658      	mov	r0, fp
   14b3e:	f00c ff03 	bl	21948 <get_series_area>
 */
static void draw_series_bg(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * clip_area)
{
    /*Draw the background of the series*/
    lv_draw_rect_dsc_t bg_dsc;
    lv_draw_rect_dsc_init(&bg_dsc);
   14b42:	a867      	add	r0, sp, #412	; 0x19c
   14b44:	f7fd f882 	bl	11c4c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES_BG, &bg_dsc);
   14b48:	2101      	movs	r1, #1
   14b4a:	4658      	mov	r0, fp
   14b4c:	aa67      	add	r2, sp, #412	; 0x19c
   14b4e:	f007 fe33 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(series_area, clip_area, &bg_dsc);
   14b52:	4649      	mov	r1, r9
   14b54:	aa67      	add	r2, sp, #412	; 0x19c
   14b56:	a817      	add	r0, sp, #92	; 0x5c
   14b58:	f00a fce1 	bl	1f51e <lv_draw_rect>

    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
   14b5c:	4658      	mov	r0, fp
   14b5e:	f007 fe1b 	bl	1c798 <lv_obj_get_ext_attr>
   14b62:	4606      	mov	r6, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14b64:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t x_ofs = series_area->x1;
    lv_coord_t y_ofs = series_area->y1;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
   14b68:	a84d      	add	r0, sp, #308	; 0x134
   14b6a:	9304      	str	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14b6c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14b70:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14b74:	9305      	str	r3, [sp, #20]
   14b76:	f9bd a05e 	ldrsh.w	sl, [sp, #94]	; 0x5e
   14b7a:	f009 ff5b 	bl	1ea34 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES_BG, &line_dsc);
   14b7e:	2101      	movs	r1, #1
   14b80:	4658      	mov	r0, fp
   14b82:	aa4d      	add	r2, sp, #308	; 0x134
   14b84:	f008 f838 	bl	1cbf8 <lv_obj_init_draw_line_dsc>

    if(ext->hdiv_cnt != 0) {
   14b88:	7d37      	ldrb	r7, [r6, #20]
   14b8a:	2f00      	cmp	r7, #0
   14b8c:	f040 8183 	bne.w	14e96 <lv_chart_design+0x3a2>
            p2.y = p1.y;
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
        }
    }

    if(ext->vdiv_cnt != 0) {
   14b90:	7d77      	ldrb	r7, [r6, #21]
   14b92:	2f00      	cmp	r7, #0
   14b94:	f040 81ad 	bne.w	14ef2 <lv_chart_design+0x3fe>
    }
}

static void draw_axes(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_PRIMARY_Y);
   14b98:	2300      	movs	r3, #0
   14b9a:	464a      	mov	r2, r9
   14b9c:	4658      	mov	r0, fp
   14b9e:	a917      	add	r1, sp, #92	; 0x5c
   14ba0:	f00c fefc 	bl	2199c <draw_y_ticks>
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_SECONDARY_Y);
   14ba4:	2301      	movs	r3, #1
   14ba6:	464a      	mov	r2, r9
   14ba8:	4658      	mov	r0, fp
   14baa:	a917      	add	r1, sp, #92	; 0x5c
   14bac:	f00c fef6 	bl	2199c <draw_y_ticks>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14bb0:	4658      	mov	r0, fp
   14bb2:	f007 fdf1 	bl	1c798 <lv_obj_get_ext_attr>
    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
   14bb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14bb8:	4604      	mov	r4, r0
    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
   14bba:	b923      	cbnz	r3, 14bc6 <lv_chart_design+0xd2>
   14bbc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   14bc0:	2b00      	cmp	r3, #0
   14bc2:	f000 809b 	beq.w	14cfc <lv_chart_design+0x208>
    lv_coord_t x_ofs = series_area->x1;
   14bc6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   14bca:	f8bd a062 	ldrh.w	sl, [sp, #98]	; 0x62
   14bce:	9304      	str	r3, [sp, #16]
    lv_coord_t y_ofs = series_area->y1;
   14bd0:	f10a 0a01 	add.w	sl, sl, #1
   14bd4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14bd8:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
   14bdc:	fa0f fa8a 	sxth.w	sl, sl
   14be0:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14be2:	ebaa 0803 	sub.w	r8, sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14be6:	9b04      	ldr	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14be8:	2211      	movs	r2, #17
   14bea:	2101      	movs	r1, #1
   14bec:	4658      	mov	r0, fp
   14bee:	3501      	adds	r5, #1
   14bf0:	1aed      	subs	r5, r5, r3
   14bf2:	f7fa fb0b 	bl	f20c <_lv_obj_get_style_int>
   14bf6:	9006      	str	r0, [sp, #24]
    lv_draw_label_dsc_init(&label_dsc);
   14bf8:	a84d      	add	r0, sp, #308	; 0x134
   14bfa:	f7fb fe61 	bl	108c0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
   14bfe:	aa4d      	add	r2, sp, #308	; 0x134
   14c00:	2100      	movs	r1, #0
   14c02:	4658      	mov	r0, fp
   14c04:	f007 ff85 	bl	1cb12 <lv_obj_init_draw_label_dsc>
    if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   14c08:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   14c0c:	b22d      	sxth	r5, r5
   14c0e:	2fff      	cmp	r7, #255	; 0xff
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
   14c10:	bf04      	itt	eq
   14c12:	270f      	moveq	r7, #15
   14c14:	fb95 f7f7 	sdiveq	r7, r5, r7
    if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   14c18:	f894 603b 	ldrb.w	r6, [r4, #59]	; 0x3b
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
   14c1c:	bf08      	it	eq
   14c1e:	b2ff      	uxtbeq	r7, r7
    if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   14c20:	2eff      	cmp	r6, #255	; 0xff
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
   14c22:	bf02      	ittt	eq
   14c24:	2303      	moveq	r3, #3
   14c26:	007e      	lsleq	r6, r7, #1
   14c28:	fbb6 f6f3 	udiveq	r6, r6, r3
    if(h + y_ofs > mask->y2) return;
   14c2c:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14c2e:	fa0f f888 	sxth.w	r8, r8
   14c32:	4443      	add	r3, r8
   14c34:	461a      	mov	r2, r3
   14c36:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
   14c3a:	bf08      	it	eq
   14c3c:	b2f6      	uxtbeq	r6, r6
    if(h + y_ofs > mask->y2) return;
   14c3e:	429a      	cmp	r2, r3
   14c40:	dc5c      	bgt.n	14cfc <lv_chart_design+0x208>
    if(h + y_ofs + label_dist  + label_dsc.font->line_height + major_tick_len < mask->y1) return;
   14c42:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
   14c44:	f9b3 8008 	ldrsh.w	r8, [r3, #8]
   14c48:	9b06      	ldr	r3, [sp, #24]
   14c4a:	4490      	add	r8, r2
   14c4c:	4498      	add	r8, r3
   14c4e:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   14c52:	44b8      	add	r8, r7
   14c54:	4598      	cmp	r8, r3
   14c56:	db51      	blt.n	14cfc <lv_chart_design+0x208>
    lv_draw_line_dsc_init(&line_dsc);
   14c58:	a828      	add	r0, sp, #160	; 0xa0
   14c5a:	f009 feeb 	bl	1ea34 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
   14c5e:	2100      	movs	r1, #0
   14c60:	4658      	mov	r0, fp
   14c62:	aa28      	add	r2, sp, #160	; 0xa0
   14c64:	f007 ffc8 	bl	1cbf8 <lv_obj_init_draw_line_dsc>
    if(ext->type == LV_CHART_TYPE_COLUMN) {
   14c68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14c6c:	2b02      	cmp	r3, #2
   14c6e:	d117      	bne.n	14ca0 <lv_chart_design+0x1ac>
        uint32_t ser_num = _lv_ll_get_len(&ext->series_ll);
   14c70:	4620      	mov	r0, r4
   14c72:	f00c fd0c 	bl	2168e <_lv_ll_get_len>
        lv_coord_t col_w = w / ((ser_num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
   14c76:	8ae2      	ldrh	r2, [r4, #22]
   14c78:	1c41      	adds	r1, r0, #1
   14c7a:	fb00 2302 	mla	r3, r0, r2, r2
   14c7e:	fbb5 f3f3 	udiv	r3, r5, r3
   14c82:	b21b      	sxth	r3, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
   14c84:	4358      	muls	r0, r3
   14c86:	9a04      	ldr	r2, [sp, #16]
   14c88:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
        w -= col_w * ser_num + col_w;
   14c8c:	fb11 f303 	smulbb	r3, r1, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
   14c90:	eb02 026c 	add.w	r2, r2, ip, asr #1
   14c94:	eb02 0050 	add.w	r0, r2, r0, lsr #1
   14c98:	b202      	sxth	r2, r0
        w -= col_w * ser_num + col_w;
   14c9a:	1aed      	subs	r5, r5, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
   14c9c:	9204      	str	r2, [sp, #16]
        w -= col_w * ser_num + col_w;
   14c9e:	b22d      	sxth	r5, r5
    iter = create_axis_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
   14ca0:	2201      	movs	r2, #1
   14ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14ca4:	a810      	add	r0, sp, #64	; 0x40
   14ca6:	f00c fdfd 	bl	218a4 <create_axis_label_iter>
   14caa:	f10d 0888 	add.w	r8, sp, #136	; 0x88
   14cae:	c807      	ldmia	r0, {r0, r1, r2}
   14cb0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    num_of_labels = iter.items_left;
   14cb4:	f898 3008 	ldrb.w	r3, [r8, #8]
   14cb8:	9305      	str	r3, [sp, #20]
    if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
   14cba:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14cbe:	b913      	cbnz	r3, 14cc6 <lv_chart_design+0x1d2>
   14cc0:	2301      	movs	r3, #1
   14cc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if(num_of_labels < 2)
   14cc6:	9b05      	ldr	r3, [sp, #20]
   14cc8:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
   14ccc:	2b01      	cmp	r3, #1
        num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
   14cce:	bf84      	itt	hi
   14cd0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   14cd4:	fb13 f808 	smulbbhi	r8, r3, r8
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   14cd8:	f04f 0300 	mov.w	r3, #0
        num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
   14cdc:	bf88      	it	hi
   14cde:	fa5f f888 	uxtbhi.w	r8, r8
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   14ce2:	9307      	str	r3, [sp, #28]
            p2.y = p1.y + minor_tick_len; /* minor tick */
   14ce4:	4456      	add	r6, sl
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   14ce6:	f108 0301 	add.w	r3, r8, #1
   14cea:	9308      	str	r3, [sp, #32]
            p2.y = p1.y + minor_tick_len; /* minor tick */
   14cec:	b233      	sxth	r3, r6
   14cee:	9309      	str	r3, [sp, #36]	; 0x24
   14cf0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   14cf4:	9b08      	ldr	r3, [sp, #32]
   14cf6:	429e      	cmp	r6, r3
   14cf8:	f2c0 8128 	blt.w	14f4c <lv_chart_design+0x458>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14cfc:	4658      	mov	r0, fp
   14cfe:	f007 fd4b 	bl	1c798 <lv_obj_get_ext_attr>
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
   14d02:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14d06:	9009      	str	r0, [sp, #36]	; 0x24
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
   14d08:	07d8      	lsls	r0, r3, #31
   14d0a:	d561      	bpl.n	14dd0 <lv_chart_design+0x2dc>
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
   14d0c:	464a      	mov	r2, r9
   14d0e:	a917      	add	r1, sp, #92	; 0x5c
   14d10:	a819      	add	r0, sp, #100	; 0x64
   14d12:	f00c f977 	bl	21004 <_lv_area_intersect>
   14d16:	2800      	cmp	r0, #0
   14d18:	d05a      	beq.n	14dd0 <lv_chart_design+0x2dc>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14d1a:	4658      	mov	r0, fp
   14d1c:	f007 fd3c 	bl	1c798 <lv_obj_get_ext_attr>
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
   14d20:	464a      	mov	r2, r9
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14d22:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
   14d24:	a917      	add	r1, sp, #92	; 0x5c
   14d26:	a81b      	add	r0, sp, #108	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14d28:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
   14d2c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14d30:	f9bd 7062 	ldrsh.w	r7, [sp, #98]	; 0x62
   14d34:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
   14d38:	f00c f964 	bl	21004 <_lv_area_intersect>
    if(mask_ret == false) return;
   14d3c:	9007      	str	r0, [sp, #28]
   14d3e:	2800      	cmp	r0, #0
   14d40:	d046      	beq.n	14dd0 <lv_chart_design+0x2dc>
    lv_draw_line_dsc_init(&line_dsc);
   14d42:	a81f      	add	r0, sp, #124	; 0x7c
   14d44:	f009 fe76 	bl	1ea34 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES, &line_dsc);
   14d48:	2102      	movs	r1, #2
   14d4a:	4658      	mov	r0, fp
   14d4c:	aa1f      	add	r2, sp, #124	; 0x7c
   14d4e:	f007 ff53 	bl	1cbf8 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14d52:	222c      	movs	r2, #44	; 0x2c
   14d54:	2102      	movs	r1, #2
   14d56:	4658      	mov	r0, fp
   14d58:	f007 fafe 	bl	1c358 <_lv_obj_get_style_opa>
    if(has_area) {
   14d5c:	2802      	cmp	r0, #2
   14d5e:	900d      	str	r0, [sp, #52]	; 0x34
   14d60:	f200 816b 	bhi.w	1503a <lv_chart_design+0x546>
    bool has_fade = false;
   14d64:	2300      	movs	r3, #0
   14d66:	9307      	str	r3, [sp, #28]
    lv_draw_rect_dsc_init(&point_dsc);
   14d68:	a867      	add	r0, sp, #412	; 0x19c
   14d6a:	f7fc ff6f 	bl	11c4c <lv_draw_rect_dsc_init>
    point_dsc.bg_opa = line_dsc.opa;
   14d6e:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14d72:	2203      	movs	r2, #3
   14d74:	f88d 31ae 	strb.w	r3, [sp, #430]	; 0x1ae
    point_dsc.radius = LV_RADIUS_CIRCLE;
   14d78:	f647 73ff 	movw	r3, #32767	; 0x7fff
   14d7c:	2102      	movs	r1, #2
   14d7e:	4658      	mov	r0, fp
   14d80:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c
   14d84:	f7fa fa42 	bl	f20c <_lv_obj_get_style_int>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
   14d88:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14d8c:	3401      	adds	r4, #1
   14d8e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   14d92:	ebb0 0f63 	cmp.w	r0, r3, asr #1
   14d96:	bfc8      	it	gt
   14d98:	f89d 3087 	ldrbgt.w	r3, [sp, #135]	; 0x87
   14d9c:	eba4 0408 	sub.w	r4, r4, r8
   14da0:	bfc4      	itt	gt
   14da2:	f043 0310 	orrgt.w	r3, r3, #16
   14da6:	f88d 3087 	strbgt.w	r3, [sp, #135]	; 0x87
   14daa:	3701      	adds	r7, #1
   14dac:	b223      	sxth	r3, r4
   14dae:	930e      	str	r3, [sp, #56]	; 0x38
   14db0:	b23b      	sxth	r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14db2:	1b9e      	subs	r6, r3, r6
   14db4:	9308      	str	r3, [sp, #32]
   14db6:	4605      	mov	r5, r0
   14db8:	b233      	sxth	r3, r6
    _LV_LL_READ_BACK(ext->series_ll, ser) {
   14dba:	4650      	mov	r0, sl
   14dbc:	930a      	str	r3, [sp, #40]	; 0x28
   14dbe:	f00c fbdb 	bl	21578 <_lv_ll_get_tail>
    int16_t mask_fade_id = LV_MASK_ID_INV;
   14dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    _LV_LL_READ_BACK(ext->series_ll, ser) {
   14dc6:	4604      	mov	r4, r0
    int16_t mask_fade_id = LV_MASK_ID_INV;
   14dc8:	930c      	str	r3, [sp, #48]	; 0x30
    _LV_LL_READ_BACK(ext->series_ll, ser) {
   14dca:	2c00      	cmp	r4, #0
   14dcc:	f040 8154 	bne.w	15078 <lv_chart_design+0x584>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
   14dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   14dd6:	079a      	lsls	r2, r3, #30
   14dd8:	d55b      	bpl.n	14e92 <lv_chart_design+0x39e>
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
   14dda:	ad17      	add	r5, sp, #92	; 0x5c
   14ddc:	464a      	mov	r2, r9
   14dde:	4629      	mov	r1, r5
   14de0:	a822      	add	r0, sp, #136	; 0x88
   14de2:	f00c f90f 	bl	21004 <_lv_area_intersect>
   14de6:	2800      	cmp	r0, #0
   14de8:	d053      	beq.n	14e92 <lv_chart_design+0x39e>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   14dea:	4658      	mov	r0, fp
   14dec:	f007 fcd4 	bl	1c798 <lv_obj_get_ext_attr>
   14df0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   14df4:	4680      	mov	r8, r0
   14df6:	9304      	str	r3, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14df8:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
   14dfc:	f9b5 a000 	ldrsh.w	sl, [r5]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14e00:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
   14e04:	f00c fc43 	bl	2168e <_lv_ll_get_len>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14e08:	2214      	movs	r2, #20
   14e0a:	2102      	movs	r1, #2
   14e0c:	9005      	str	r0, [sp, #20]
   14e0e:	4658      	mov	r0, fp
   14e10:	f8b8 4016 	ldrh.w	r4, [r8, #22]
   14e14:	f7fa f9fa 	bl	f20c <_lv_obj_get_style_int>
   14e18:	900a      	str	r0, [sp, #40]	; 0x28
    lv_draw_rect_dsc_init(&col_dsc);
   14e1a:	a867      	add	r0, sp, #412	; 0x19c
   14e1c:	f7fc ff16 	bl	11c4c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &col_dsc);
   14e20:	4658      	mov	r0, fp
   14e22:	2102      	movs	r1, #2
   14e24:	aa67      	add	r2, sp, #412	; 0x19c
   14e26:	f007 fcc7 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_opa = LV_OPA_COVER;
   14e2a:	23ff      	movs	r3, #255	; 0xff
    col_dsc.bg_grad_dir = LV_GRAD_DIR_NONE;
   14e2c:	f04f 0b00 	mov.w	fp, #0
    col_a.y2 = series_area->y2 + col_dsc.radius;
   14e30:	f8bd 219c 	ldrh.w	r2, [sp, #412]	; 0x19c
    col_dsc.bg_opa = LV_OPA_COVER;
   14e34:	f88d 31ae 	strb.w	r3, [sp, #430]	; 0x1ae
    col_a.y2 = series_area->y2 + col_dsc.radius;
   14e38:	88eb      	ldrh	r3, [r5, #6]
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
   14e3a:	4629      	mov	r1, r5
    col_a.y2 = series_area->y2 + col_dsc.radius;
   14e3c:	4413      	add	r3, r2
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
   14e3e:	a84d      	add	r0, sp, #308	; 0x134
   14e40:	464a      	mov	r2, r9
    col_dsc.bg_grad_dir = LV_GRAD_DIR_NONE;
   14e42:	f88d b1a8 	strb.w	fp, [sp, #424]	; 0x1a8
    col_a.y2 = series_area->y2 + col_dsc.radius;
   14e46:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
   14e4a:	f00c f8db 	bl	21004 <_lv_area_intersect>
    if(mask_ret == false) return;
   14e4e:	b300      	cbz	r0, 14e92 <lv_chart_design+0x39e>
   14e50:	9b04      	ldr	r3, [sp, #16]
   14e52:	3601      	adds	r6, #1
   14e54:	eba6 0903 	sub.w	r9, r6, r3
   14e58:	fa0f f389 	sxth.w	r3, r9
   14e5c:	9304      	str	r3, [sp, #16]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
   14e5e:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14e60:	3701      	adds	r7, #1
   14e62:	fb03 4404 	mla	r4, r3, r4, r4
   14e66:	eba7 0a0a 	sub.w	sl, r7, sl
   14e6a:	fa0f fa8a 	sxth.w	sl, sl
   14e6e:	fbba f4f4 	udiv	r4, sl, r4
   14e72:	b223      	sxth	r3, r4
   14e74:	9307      	str	r3, [sp, #28]
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
   14e76:	f3c4 33c0 	ubfx	r3, r4, #15, #1
   14e7a:	fa03 f384 	sxtah	r3, r3, r4
   14e7e:	105b      	asrs	r3, r3, #1
   14e80:	9308      	str	r3, [sp, #32]
        x_act += series_area->x1 + x_ofs;
   14e82:	9506      	str	r5, [sp, #24]
    for(i = 0; i < ext->point_cnt; i++) {
   14e84:	f8b8 3016 	ldrh.w	r3, [r8, #22]
   14e88:	fa1f f28b 	uxth.w	r2, fp
   14e8c:	4293      	cmp	r3, r2
   14e8e:	f200 81ea 	bhi.w	15266 <lv_chart_design+0x772>
    return LV_DESIGN_RES_OK;
   14e92:	2000      	movs	r0, #0
   14e94:	e63a      	b.n	14b0c <lv_chart_design+0x18>
        if(bg_dsc.border_width != 0) {
   14e96:	f9bd 41b4 	ldrsh.w	r4, [sp, #436]	; 0x1b4
   14e9a:	bb44      	cbnz	r4, 14eee <lv_chart_design+0x3fa>
            div_i_end   = ext->hdiv_cnt + 1;
   14e9c:	3701      	adds	r7, #1
   14e9e:	b2ff      	uxtb	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   14ea0:	9b05      	ldr	r3, [sp, #20]
        p1.x = 0 + x_ofs;
   14ea2:	f10d 0888 	add.w	r8, sp, #136	; 0x88
   14ea6:	3301      	adds	r3, #1
   14ea8:	eba3 030a 	sub.w	r3, r3, sl
   14eac:	b21b      	sxth	r3, r3
   14eae:	9306      	str	r3, [sp, #24]
   14eb0:	9b04      	ldr	r3, [sp, #16]
        p2.x = w - 1 + x_ofs;
   14eb2:	a928      	add	r1, sp, #160	; 0xa0
        p1.x = 0 + x_ofs;
   14eb4:	f8a8 3000 	strh.w	r3, [r8]
        p2.x = w - 1 + x_ofs;
   14eb8:	800d      	strh	r5, [r1, #0]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14eba:	42bc      	cmp	r4, r7
   14ebc:	f63f ae68 	bhi.w	14b90 <lv_chart_design+0x9c>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
   14ec0:	9a06      	ldr	r2, [sp, #24]
   14ec2:	f9bd 3138 	ldrsh.w	r3, [sp, #312]	; 0x138
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
   14ec6:	4640      	mov	r0, r8
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
   14ec8:	1ad3      	subs	r3, r2, r3
   14eca:	4363      	muls	r3, r4
   14ecc:	7d32      	ldrb	r2, [r6, #20]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14ece:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
   14ed0:	3201      	adds	r2, #1
   14ed2:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
   14ed6:	4453      	add	r3, sl
   14ed8:	b21b      	sxth	r3, r3
            p2.y = p1.y;
   14eda:	804b      	strh	r3, [r1, #2]
            p1.y += y_ofs;
   14edc:	f8a8 3002 	strh.w	r3, [r8, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
   14ee0:	464a      	mov	r2, r9
   14ee2:	ab4d      	add	r3, sp, #308	; 0x134
   14ee4:	f7fc f972 	bl	111cc <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14ee8:	b2e4      	uxtb	r4, r4
   14eea:	a928      	add	r1, sp, #160	; 0xa0
   14eec:	e7e5      	b.n	14eba <lv_chart_design+0x3c6>
            div_i_start = 1;
   14eee:	2401      	movs	r4, #1
   14ef0:	e7d6      	b.n	14ea0 <lv_chart_design+0x3ac>
        if(bg_dsc.border_width != 0) {
   14ef2:	f9bd 41b4 	ldrsh.w	r4, [sp, #436]	; 0x1b4
   14ef6:	bb3c      	cbnz	r4, 14f48 <lv_chart_design+0x454>
            div_i_end   = ext->vdiv_cnt + 1;
   14ef8:	3701      	adds	r7, #1
   14efa:	b2ff      	uxtb	r7, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   14efc:	9b04      	ldr	r3, [sp, #16]
   14efe:	3501      	adds	r5, #1
   14f00:	1aed      	subs	r5, r5, r3
        p2.y = h + y_ofs - 1;
   14f02:	9b05      	ldr	r3, [sp, #20]
   14f04:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
   14f08:	b22d      	sxth	r5, r5
        p1.y = 0 + y_ofs;
   14f0a:	f8ad a08a 	strh.w	sl, [sp, #138]	; 0x8a
        p2.y = h + y_ofs - 1;
   14f0e:	f8a8 3002 	strh.w	r3, [r8, #2]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14f12:	42bc      	cmp	r4, r7
   14f14:	f63f ae40 	bhi.w	14b98 <lv_chart_design+0xa4>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * div_i) / (ext->vdiv_cnt + 1);
   14f18:	f9bd 3138 	ldrsh.w	r3, [sp, #312]	; 0x138
   14f1c:	7d72      	ldrb	r2, [r6, #21]
   14f1e:	1aeb      	subs	r3, r5, r3
   14f20:	4363      	muls	r3, r4
   14f22:	3201      	adds	r2, #1
   14f24:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
   14f28:	9a04      	ldr	r2, [sp, #16]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
   14f2a:	4641      	mov	r1, r8
            p1.x += x_ofs;
   14f2c:	4413      	add	r3, r2
   14f2e:	b21b      	sxth	r3, r3
   14f30:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            p2.x = p1.x;
   14f34:	f8a8 3000 	strh.w	r3, [r8]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
   14f38:	464a      	mov	r2, r9
   14f3a:	ab4d      	add	r3, sp, #308	; 0x134
   14f3c:	a822      	add	r0, sp, #136	; 0x88
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14f3e:	3401      	adds	r4, #1
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
   14f40:	f7fc f944 	bl	111cc <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
   14f44:	b2e4      	uxtb	r4, r4
   14f46:	e7e4      	b.n	14f12 <lv_chart_design+0x41e>
            div_i_start = 1;
   14f48:	2401      	movs	r4, #1
   14f4a:	e7d7      	b.n	14efc <lv_chart_design+0x408>
        if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
   14f4c:	9b05      	ldr	r3, [sp, #20]
        p1.y = h + y_ofs;
   14f4e:	f8ad a066 	strh.w	sl, [sp, #102]	; 0x66
        if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
   14f52:	2b00      	cmp	r3, #0
   14f54:	d06a      	beq.n	1502c <lv_chart_design+0x538>
   14f56:	b146      	cbz	r6, 14f6a <lv_chart_design+0x476>
   14f58:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   14f5c:	fbb6 f3f2 	udiv	r3, r6, r2
   14f60:	fb02 6313 	mls	r3, r2, r3, r6
   14f64:	f013 0fff 	tst.w	r3, #255	; 0xff
   14f68:	d160      	bne.n	1502c <lv_chart_design+0x538>
            p2.y = p1.y + major_tick_len; /* major tick */
   14f6a:	eb0a 0307 	add.w	r3, sl, r7
   14f6e:	b21b      	sxth	r3, r3
   14f70:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / num_scale_ticks;
   14f74:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
   14f78:	9a04      	ldr	r2, [sp, #16]
   14f7a:	1aeb      	subs	r3, r5, r3
   14f7c:	4373      	muls	r3, r6
   14f7e:	fb93 f3f8 	sdiv	r3, r3, r8
   14f82:	4413      	add	r3, r2
   14f84:	b21b      	sxth	r3, r3
        if(i != num_scale_ticks)
   14f86:	45b0      	cmp	r8, r6
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / num_scale_ticks;
   14f88:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
   14f8c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        if(i != num_scale_ticks)
   14f90:	d04e      	beq.n	15030 <lv_chart_design+0x53c>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   14f92:	464a      	mov	r2, r9
   14f94:	ab28      	add	r3, sp, #160	; 0xa0
   14f96:	a91b      	add	r1, sp, #108	; 0x6c
   14f98:	a819      	add	r0, sp, #100	; 0x64
   14f9a:	f7fc f917 	bl	111cc <lv_draw_line>
        if(num_of_labels != 0) {
   14f9e:	9b05      	ldr	r3, [sp, #20]
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d03f      	beq.n	15024 <lv_chart_design+0x530>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
   14fa4:	b146      	cbz	r6, 14fb8 <lv_chart_design+0x4c4>
   14fa6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   14faa:	fbb6 f3f2 	udiv	r3, r6, r2
   14fae:	fb02 6613 	mls	r6, r2, r3, r6
            if(is_tick_with_label(i, &(ext->x_axis))) {
   14fb2:	f016 0fff 	tst.w	r6, #255	; 0xff
   14fb6:	d135      	bne.n	15024 <lv_chart_design+0x530>
                get_next_axis_label(&iter, buf);
   14fb8:	a967      	add	r1, sp, #412	; 0x19c
   14fba:	a822      	add	r0, sp, #136	; 0x88
   14fbc:	f00c fc8c 	bl	218d8 <get_next_axis_label>
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
   14fc0:	2604      	movs	r6, #4
   14fc2:	f647 4318 	movw	r3, #31768	; 0x7c18
   14fc6:	e9cd 3601 	strd	r3, r6, [sp, #4]
   14fca:	f9bd 3142 	ldrsh.w	r3, [sp, #322]	; 0x142
   14fce:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   14fd0:	9300      	str	r3, [sp, #0]
   14fd2:	a967      	add	r1, sp, #412	; 0x19c
   14fd4:	f9bd 3144 	ldrsh.w	r3, [sp, #324]	; 0x144
   14fd8:	a81d      	add	r0, sp, #116	; 0x74
   14fda:	f7fe f915 	bl	13208 <_lv_txt_get_size>
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
   14fde:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
   14fe2:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
   14fe6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   14fea:	eba1 0362 	sub.w	r3, r1, r2, asr #1
   14fee:	eb01 0262 	add.w	r2, r1, r2, asr #1
   14ff2:	9806      	ldr	r0, [sp, #24]
   14ff4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
   14ff8:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
   14ffc:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
                               (p2.y + size.y + label_dist)
   15000:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
   15004:	1818      	adds	r0, r3, r0
                               (p2.y + size.y + label_dist)
   15006:	4413      	add	r3, r2
   15008:	9a06      	ldr	r2, [sp, #24]
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
   1500a:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
                               (p2.y + size.y + label_dist)
   1500e:	4413      	add	r3, r2
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
   15010:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
   15014:	2300      	movs	r3, #0
   15016:	4649      	mov	r1, r9
   15018:	9300      	str	r3, [sp, #0]
   1501a:	aa4d      	add	r2, sp, #308	; 0x134
   1501c:	ab67      	add	r3, sp, #412	; 0x19c
   1501e:	a81f      	add	r0, sp, #124	; 0x7c
   15020:	f7fb fc68 	bl	108f4 <lv_draw_label>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   15024:	9b07      	ldr	r3, [sp, #28]
   15026:	3301      	adds	r3, #1
   15028:	9307      	str	r3, [sp, #28]
   1502a:	e661      	b.n	14cf0 <lv_chart_design+0x1fc>
            p2.y = p1.y + minor_tick_len; /* minor tick */
   1502c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1502e:	e79f      	b.n	14f70 <lv_chart_design+0x47c>
        else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
   15030:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15034:	07db      	lsls	r3, r3, #31
   15036:	d4ac      	bmi.n	14f92 <lv_chart_design+0x49e>
   15038:	e7b1      	b.n	14f9e <lv_chart_design+0x4aa>
        lv_draw_rect_dsc_init(&area_dsc);
   1503a:	a84d      	add	r0, sp, #308	; 0x134
   1503c:	f7fc fe06 	bl	11c4c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &area_dsc);
   15040:	2102      	movs	r1, #2
   15042:	4658      	mov	r0, fp
   15044:	aa4d      	add	r2, sp, #308	; 0x134
   15046:	f007 fbb7 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
        area_dsc.border_width = 0;
   1504a:	2300      	movs	r3, #0
   1504c:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        if(has_fade) {
   15050:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
   15054:	2b01      	cmp	r3, #1
   15056:	f47f ae85 	bne.w	14d64 <lv_chart_design+0x270>
            lv_draw_mask_fade_init(&mask_fade_p, series_area, area_dsc.bg_main_color_stop, series_area->y1,
   1505a:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   1505e:	f89d 2142 	ldrb.w	r2, [sp, #322]	; 0x142
   15062:	9301      	str	r3, [sp, #4]
   15064:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
   15068:	a917      	add	r1, sp, #92	; 0x5c
   1506a:	9300      	str	r3, [sp, #0]
   1506c:	a822      	add	r0, sp, #136	; 0x88
   1506e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   15072:	f7fc fdd3 	bl	11c1c <lv_draw_mask_fade_init>
   15076:	e677      	b.n	14d68 <lv_chart_design+0x274>
        line_dsc.color = ser->color;
   15078:	6863      	ldr	r3, [r4, #4]
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
   1507a:	7aa2      	ldrb	r2, [r4, #10]
        line_dsc.color = ser->color;
   1507c:	931f      	str	r3, [sp, #124]	; 0x7c
        point_dsc.bg_color = ser->color;
   1507e:	6863      	ldr	r3, [r4, #4]
   15080:	f002 0202 	and.w	r2, r2, #2
   15084:	9368      	str	r3, [sp, #416]	; 0x1a0
        area_dsc.bg_color = ser->color;
   15086:	6863      	ldr	r3, [r4, #4]
   15088:	4452      	add	r2, sl
   1508a:	934e      	str	r3, [sp, #312]	; 0x138
        area_dsc.bg_grad_color = ser->color;
   1508c:	6863      	ldr	r3, [r4, #4]
        p1.x = 0 + x_ofs;
   1508e:	f8ad 8054 	strh.w	r8, [sp, #84]	; 0x54
        area_dsc.bg_grad_color = ser->color;
   15092:	934f      	str	r3, [sp, #316]	; 0x13c
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   15094:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
        p2.x = 0 + x_ofs;
   15098:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   1509c:	07d9      	lsls	r1, r3, #31
   1509e:	bf4c      	ite	mi
   150a0:	2300      	movmi	r3, #0
   150a2:	f9b4 3008 	ldrshpl.w	r3, [r4, #8]
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
   150a6:	6821      	ldr	r1, [r4, #0]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   150a8:	9304      	str	r3, [sp, #16]
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
   150aa:	9b04      	ldr	r3, [sp, #16]
   150ac:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
   150b0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
   150b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   150b6:	1a1b      	subs	r3, r3, r0
   150b8:	434b      	muls	r3, r1
        y_tmp  = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   150ba:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
        p2.x = 0 + x_ofs;
   150be:	ae16      	add	r6, sp, #88	; 0x58
        y_tmp  = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   150c0:	1a12      	subs	r2, r2, r0
   150c2:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
   150c6:	9a08      	ldr	r2, [sp, #32]
        p1.x = 0 + x_ofs;
   150c8:	af15      	add	r7, sp, #84	; 0x54
        p2.y   = h - y_tmp + y_ofs;
   150ca:	1ad3      	subs	r3, r2, r3
   150cc:	8073      	strh	r3, [r6, #2]
        for(i = 0; i < ext->point_cnt; i++) {
   150ce:	2300      	movs	r3, #0
        lv_coord_t p_act = start_point;
   150d0:	9a04      	ldr	r2, [sp, #16]
        for(i = 0; i < ext->point_cnt; i++) {
   150d2:	9306      	str	r3, [sp, #24]
   150d4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   150d8:	f8ba c016 	ldrh.w	ip, [sl, #22]
   150dc:	930b      	str	r3, [sp, #44]	; 0x2c
   150de:	459c      	cmp	ip, r3
   150e0:	d821      	bhi.n	15126 <lv_chart_design+0x632>
        if(point_radius) {
   150e2:	b1d5      	cbz	r5, 1511a <lv_chart_design+0x626>
            point_area.x1 = p2.x;
   150e4:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
            point_area.x2 = point_area.x1 + point_radius;
   150e8:	1959      	adds	r1, r3, r5
            point_area.x1 -= point_radius;
   150ea:	1b5b      	subs	r3, r3, r5
   150ec:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            point_area.y1 = p2.y;
   150f0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            point_area.x2 = point_area.x1 + point_radius;
   150f4:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
            point_area.y2 = point_area.y1 + point_radius;
   150f8:	1959      	adds	r1, r3, r5
            point_area.y1 -= point_radius;
   150fa:	1b5b      	subs	r3, r3, r5
   150fc:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
   15100:	6823      	ldr	r3, [r4, #0]
            point_area.y2 = point_area.y1 + point_radius;
   15102:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
   15106:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   1510a:	4a8e      	ldr	r2, [pc, #568]	; (15344 <lv_chart_design+0x850>)
   1510c:	4293      	cmp	r3, r2
   1510e:	d004      	beq.n	1511a <lv_chart_design+0x626>
                lv_draw_rect(&point_area, clip_area, &point_dsc);
   15110:	4649      	mov	r1, r9
   15112:	aa67      	add	r2, sp, #412	; 0x19c
   15114:	a828      	add	r0, sp, #160	; 0xa0
   15116:	f00a fa02 	bl	1f51e <lv_draw_rect>
    _LV_LL_READ_BACK(ext->series_ll, ser) {
   1511a:	4621      	mov	r1, r4
   1511c:	4650      	mov	r0, sl
   1511e:	f00c fa33 	bl	21588 <_lv_ll_get_prev>
   15122:	4604      	mov	r4, r0
   15124:	e651      	b.n	14dca <lv_chart_design+0x2d6>
            p1.x = p2.x;
   15126:	6833      	ldr	r3, [r6, #0]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
   15128:	980e      	ldr	r0, [sp, #56]	; 0x38
            p1.x = p2.x;
   1512a:	603b      	str	r3, [r7, #0]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
   1512c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15130:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
   15134:	4358      	muls	r0, r3
   15136:	fb90 f0fe 	sdiv	r0, r0, lr
   1513a:	4440      	add	r0, r8
   1513c:	8030      	strh	r0, [r6, #0]
            p_act = (start_point + i) % ext->point_cnt;
   1513e:	9804      	ldr	r0, [sp, #16]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   15140:	990a      	ldr	r1, [sp, #40]	; 0x28
            p_act = (start_point + i) % ext->point_cnt;
   15142:	4403      	add	r3, r0
   15144:	fb93 f0fc 	sdiv	r0, r3, ip
   15148:	fb0c 3310 	mls	r3, ip, r0, r3
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   1514c:	f894 c00a 	ldrb.w	ip, [r4, #10]
   15150:	6820      	ldr	r0, [r4, #0]
   15152:	f00c 0c02 	and.w	ip, ip, #2
            p_act = (start_point + i) % ext->point_cnt;
   15156:	b21b      	sxth	r3, r3
   15158:	44d4      	add	ip, sl
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   1515a:	f9bc e00c 	ldrsh.w	lr, [ip, #12]
            p_act = (start_point + i) % ext->point_cnt;
   1515e:	9305      	str	r3, [sp, #20]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   15160:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
            y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   15164:	f9bc c010 	ldrsh.w	ip, [ip, #16]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   15168:	eba3 030e 	sub.w	r3, r3, lr
   1516c:	434b      	muls	r3, r1
            y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   1516e:	ebac 0c0e 	sub.w	ip, ip, lr
   15172:	fb93 f3fc 	sdiv	r3, r3, ip
            p2.y  = h - y_tmp + y_ofs;
   15176:	9908      	ldr	r1, [sp, #32]
   15178:	1acb      	subs	r3, r1, r3
   1517a:	8073      	strh	r3, [r6, #2]
            if(i != 0 && ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
   1517c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1517e:	2b00      	cmp	r3, #0
   15180:	d04f      	beq.n	15222 <lv_chart_design+0x72e>
   15182:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
   15186:	4a6f      	ldr	r2, [pc, #444]	; (15344 <lv_chart_design+0x850>)
   15188:	4293      	cmp	r3, r2
   1518a:	d04a      	beq.n	15222 <lv_chart_design+0x72e>
   1518c:	9b05      	ldr	r3, [sp, #20]
   1518e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
   15192:	4293      	cmp	r3, r2
   15194:	d045      	beq.n	15222 <lv_chart_design+0x72e>
                lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
   15196:	ab1f      	add	r3, sp, #124	; 0x7c
   15198:	4631      	mov	r1, r6
   1519a:	4638      	mov	r0, r7
   1519c:	aa1b      	add	r2, sp, #108	; 0x6c
   1519e:	f7fc f815 	bl	111cc <lv_draw_line>
                if(has_area && y_top <= clip_area->y2) {
   151a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   151a4:	2b02      	cmp	r3, #2
   151a6:	d93c      	bls.n	15222 <lv_chart_design+0x72e>
                lv_coord_t y_top = LV_MATH_MIN(p1.y, p2.y);
   151a8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   151ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   151b0:	4619      	mov	r1, r3
   151b2:	4293      	cmp	r3, r2
   151b4:	bfa8      	it	ge
   151b6:	4611      	movge	r1, r2
   151b8:	910b      	str	r1, [sp, #44]	; 0x2c
                if(has_area && y_top <= clip_area->y2) {
   151ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   151bc:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   151c0:	4281      	cmp	r1, r0
   151c2:	db2e      	blt.n	15222 <lv_chart_design+0x72e>
                    lv_draw_mask_line_points_init(&mask_line_p, p1.x, p1.y, p2.x, p2.y, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   151c4:	2103      	movs	r1, #3
   151c6:	e9cd 3100 	strd	r3, r1, [sp]
   151ca:	a828      	add	r0, sp, #160	; 0xa0
   151cc:	f9b6 3000 	ldrsh.w	r3, [r6]
   151d0:	f9b7 1000 	ldrsh.w	r1, [r7]
   151d4:	f7fc fc72 	bl	11abc <lv_draw_mask_line_points_init>
                    mask_line_id = lv_draw_mask_add(&mask_line_p, NULL);
   151d8:	2100      	movs	r1, #0
   151da:	a828      	add	r0, sp, #160	; 0xa0
   151dc:	f7fc fbf2 	bl	119c4 <lv_draw_mask_add>
                    a.x1 = p1.x;
   151e0:	883b      	ldrh	r3, [r7, #0]
                    mask_line_id = lv_draw_mask_add(&mask_line_p, NULL);
   151e2:	900f      	str	r0, [sp, #60]	; 0x3c
                    a.x1 = p1.x;
   151e4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    a.x2 = p2.x - 1;
   151e8:	8833      	ldrh	r3, [r6, #0]
   151ea:	3b01      	subs	r3, #1
   151ec:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                    a.y1 = y_top;
   151f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   151f2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    a.y2 = series_area->y2;
   151f6:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   151fa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
   151fe:	9b07      	ldr	r3, [sp, #28]
   15200:	b123      	cbz	r3, 1520c <lv_chart_design+0x718>
   15202:	2100      	movs	r1, #0
   15204:	a822      	add	r0, sp, #136	; 0x88
   15206:	f7fc fbdd 	bl	119c4 <lv_draw_mask_add>
   1520a:	900c      	str	r0, [sp, #48]	; 0x30
                    lv_draw_rect(&a, &series_mask, &area_dsc);
   1520c:	aa4d      	add	r2, sp, #308	; 0x134
   1520e:	a91b      	add	r1, sp, #108	; 0x6c
   15210:	a81d      	add	r0, sp, #116	; 0x74
   15212:	f00a f984 	bl	1f51e <lv_draw_rect>
                    lv_draw_mask_remove_id(mask_line_id);
   15216:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15218:	f7fc fc1c 	bl	11a54 <lv_draw_mask_remove_id>
                    lv_draw_mask_remove_id(mask_fade_id);
   1521c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1521e:	f7fc fc19 	bl	11a54 <lv_draw_mask_remove_id>
            if(point_radius) {
   15222:	b1dd      	cbz	r5, 1525c <lv_chart_design+0x768>
                point_area.x1 = p1.x;
   15224:	f9b7 3000 	ldrsh.w	r3, [r7]
                point_area.x2 = point_area.x1 + point_radius;
   15228:	195a      	adds	r2, r3, r5
                point_area.x1 -= point_radius;
   1522a:	1b5b      	subs	r3, r3, r5
   1522c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
                point_area.y1 = p1.y;
   15230:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                point_area.x2 = point_area.x1 + point_radius;
   15234:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
                point_area.y2 = point_area.y1 + point_radius;
   15238:	195a      	adds	r2, r3, r5
                point_area.y1 -= point_radius;
   1523a:	1b5b      	subs	r3, r3, r5
                point_area.y2 = point_area.y1 + point_radius;
   1523c:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
                point_area.y1 -= point_radius;
   15240:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                if(ser->points[p_act] != LV_CHART_POINT_DEF) {
   15244:	9a05      	ldr	r2, [sp, #20]
   15246:	6823      	ldr	r3, [r4, #0]
   15248:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   1524c:	4a3d      	ldr	r2, [pc, #244]	; (15344 <lv_chart_design+0x850>)
   1524e:	4293      	cmp	r3, r2
   15250:	d004      	beq.n	1525c <lv_chart_design+0x768>
                    lv_draw_rect(&point_area, clip_area, &point_dsc);
   15252:	4649      	mov	r1, r9
   15254:	aa67      	add	r2, sp, #412	; 0x19c
   15256:	a828      	add	r0, sp, #160	; 0xa0
   15258:	f00a f961 	bl	1f51e <lv_draw_rect>
        for(i = 0; i < ext->point_cnt; i++) {
   1525c:	9b06      	ldr	r3, [sp, #24]
            p_act = (start_point + i) % ext->point_cnt;
   1525e:	9a05      	ldr	r2, [sp, #20]
   15260:	3301      	adds	r3, #1
   15262:	9306      	str	r3, [sp, #24]
   15264:	e736      	b.n	150d4 <lv_chart_design+0x5e0>
        lv_coord_t x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
   15266:	fa1f f78b 	uxth.w	r7, fp
   1526a:	fb07 f50a 	mul.w	r5, r7, sl
   1526e:	fb95 f5f3 	sdiv	r5, r5, r3
        x_act += series_area->x1 + x_ofs;
   15272:	9b06      	ldr	r3, [sp, #24]
   15274:	9a08      	ldr	r2, [sp, #32]
   15276:	881b      	ldrh	r3, [r3, #0]
        _LV_LL_READ_BACK(ext->series_ll, ser) {
   15278:	4640      	mov	r0, r8
        x_act += series_area->x1 + x_ofs;
   1527a:	4413      	add	r3, r2
   1527c:	fa03 f585 	sxtah	r5, r3, r5
        _LV_LL_READ_BACK(ext->series_ll, ser) {
   15280:	f00c f97a 	bl	21578 <_lv_ll_get_tail>
   15284:	4606      	mov	r6, r0
   15286:	b2a3      	uxth	r3, r4
   15288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1528a:	9305      	str	r3, [sp, #20]
   1528c:	9b07      	ldr	r3, [sp, #28]
        x_act += series_area->x1 + x_ofs;
   1528e:	b22d      	sxth	r5, r5
        _LV_LL_READ_BACK(ext->series_ll, ser) {
   15290:	fa1f f985 	uxth.w	r9, r5
   15294:	1a9b      	subs	r3, r3, r2
   15296:	441d      	add	r5, r3
   15298:	b2ad      	uxth	r5, r5
   1529a:	fa0f f189 	sxth.w	r1, r9
   1529e:	b1ae      	cbz	r6, 152cc <lv_chart_design+0x7d8>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   152a0:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
            if(col_a.x2 < series_mask.x1) continue;
   152a4:	f9bd 0134 	ldrsh.w	r0, [sp, #308]	; 0x134
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   152a8:	07db      	lsls	r3, r3, #31
            col_a.x2 = col_a.x1 + col_w - col_space;
   152aa:	b22a      	sxth	r2, r5
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
   152ac:	bf54      	ite	pl
   152ae:	f9b6 3008 	ldrshpl.w	r3, [r6, #8]
   152b2:	2300      	movmi	r3, #0
            if(col_a.x2 < series_mask.x1) continue;
   152b4:	4290      	cmp	r0, r2
            col_a.x1 = x_act;
   152b6:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            col_a.x2 = col_a.x1 + col_w - col_space;
   152ba:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            if(col_a.x2 < series_mask.x1) continue;
   152be:	dc37      	bgt.n	15330 <lv_chart_design+0x83c>
            if(col_a.x1 > series_mask.x2) break;
   152c0:	f9bd 2138 	ldrsh.w	r2, [sp, #312]	; 0x138
   152c4:	f8b8 0016 	ldrh.w	r0, [r8, #22]
   152c8:	428a      	cmp	r2, r1
   152ca:	da02      	bge.n	152d2 <lv_chart_design+0x7de>
    for(i = 0; i < ext->point_cnt; i++) {
   152cc:	f10b 0b01 	add.w	fp, fp, #1
   152d0:	e5d8      	b.n	14e84 <lv_chart_design+0x390>
            col_dsc.bg_color = ser->color;
   152d2:	6872      	ldr	r2, [r6, #4]
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
   152d4:	443b      	add	r3, r7
            col_dsc.bg_color = ser->color;
   152d6:	9268      	str	r2, [sp, #416]	; 0x1a0
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
   152d8:	fb93 f2f0 	sdiv	r2, r3, r0
   152dc:	fb00 3212 	mls	r2, r0, r2, r3
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   152e0:	7ab1      	ldrb	r1, [r6, #10]
   152e2:	f8d6 c000 	ldr.w	ip, [r6]
   152e6:	f001 0102 	and.w	r1, r1, #2
   152ea:	b212      	sxth	r2, r2
   152ec:	4441      	add	r1, r8
   152ee:	f9b1 e00c 	ldrsh.w	lr, [r1, #12]
   152f2:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
   152f6:	9804      	ldr	r0, [sp, #16]
   152f8:	eba3 030e 	sub.w	r3, r3, lr
   152fc:	4343      	muls	r3, r0
            col_a.y1         = h - y_tmp + series_area->y1;
   152fe:	9806      	ldr	r0, [sp, #24]
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
   15300:	9309      	str	r3, [sp, #36]	; 0x24
            col_a.y1         = h - y_tmp + series_area->y1;
   15302:	8840      	ldrh	r0, [r0, #2]
   15304:	9b04      	ldr	r3, [sp, #16]
            y_tmp            = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   15306:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
            col_a.y1         = h - y_tmp + series_area->y1;
   1530a:	4418      	add	r0, r3
            y_tmp            = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
   1530c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1530e:	eba1 0e0e 	sub.w	lr, r1, lr
   15312:	fb93 f3fe 	sdiv	r3, r3, lr
            col_a.y1         = h - y_tmp + series_area->y1;
   15316:	1ac0      	subs	r0, r0, r3
   15318:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
   1531c:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
   15320:	4a08      	ldr	r2, [pc, #32]	; (15344 <lv_chart_design+0x850>)
   15322:	4293      	cmp	r3, r2
   15324:	d004      	beq.n	15330 <lv_chart_design+0x83c>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
   15326:	aa67      	add	r2, sp, #412	; 0x19c
   15328:	a94d      	add	r1, sp, #308	; 0x134
   1532a:	a828      	add	r0, sp, #160	; 0xa0
   1532c:	f00a f8f7 	bl	1f51e <lv_draw_rect>
        _LV_LL_READ_BACK(ext->series_ll, ser) {
   15330:	4631      	mov	r1, r6
   15332:	4640      	mov	r0, r8
   15334:	f00c f928 	bl	21588 <_lv_ll_get_prev>
   15338:	9b05      	ldr	r3, [sp, #20]
   1533a:	4606      	mov	r6, r0
   1533c:	4499      	add	r9, r3
   1533e:	fa1f f989 	uxth.w	r9, r9
   15342:	e7a8      	b.n	15296 <lv_chart_design+0x7a2>
   15344:	ffff83e8 	.word	0xffff83e8

00015348 <lv_chart_create>:
{
   15348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1534c:	460e      	mov	r6, r1
    lv_obj_t * chart = lv_obj_create(par, copy);
   1534e:	f7f9 fd01 	bl	ed54 <lv_obj_create>
    if(chart == NULL) return NULL;
   15352:	4605      	mov	r5, r0
   15354:	b150      	cbz	r0, 1536c <lv_chart_create+0x24>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(chart, sizeof(lv_chart_ext_t));
   15356:	2148      	movs	r1, #72	; 0x48
   15358:	f006 fde7 	bl	1bf2a <lv_obj_allocate_ext_attr>
    if(ext == NULL) {
   1535c:	f04f 0a00 	mov.w	sl, #0
   15360:	4604      	mov	r4, r0
   15362:	b938      	cbnz	r0, 15374 <lv_chart_create+0x2c>
        lv_obj_del(chart);
   15364:	4628      	mov	r0, r5
   15366:	f006 ff6b 	bl	1c240 <lv_obj_del>
        return NULL;
   1536a:	4625      	mov	r5, r4
}
   1536c:	4628      	mov	r0, r5
   1536e:	b003      	add	sp, #12
   15370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
   15374:	210c      	movs	r1, #12
   15376:	f00c f8bd 	bl	214f4 <_lv_ll_init>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
   1537a:	f04f 1264 	mov.w	r2, #6553700	; 0x640064
   1537e:	4b4f      	ldr	r3, [pc, #316]	; (154bc <lv_chart_create+0x174>)
    _lv_memset_00(&ext->x_axis, sizeof(ext->x_axis));
   15380:	f104 0934 	add.w	r9, r4, #52	; 0x34
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
   15384:	e9c4 2304 	strd	r2, r3, [r4, #16]
    ext->type                  = LV_CHART_TYPE_LINE;
   15388:	2301      	movs	r3, #1
   1538a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
   1538e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
   15392:	4651      	mov	r1, sl
   15394:	f36a 0300 	bfi	r3, sl, #0, #1
   15398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   1539c:	2208      	movs	r2, #8
        ext->ymin[i]                  = LV_CHART_YMIN_DEF;
   1539e:	f8c4 a00c 	str.w	sl, [r4, #12]
   153a2:	4648      	mov	r0, r9
    _lv_memset_00(&ext->y_axis, sizeof(ext->y_axis));
   153a4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   153a8:	f003 ff59 	bl	1925e <memset>
    _lv_memset_00(&ext->secondary_y_axis, sizeof(ext->secondary_y_axis));
   153ac:	f104 073c 	add.w	r7, r4, #60	; 0x3c
   153b0:	4651      	mov	r1, sl
   153b2:	2208      	movs	r2, #8
   153b4:	4640      	mov	r0, r8
   153b6:	f003 ff52 	bl	1925e <memset>
   153ba:	2208      	movs	r2, #8
   153bc:	4651      	mov	r1, sl
   153be:	4638      	mov	r0, r7
   153c0:	f003 ff4d 	bl	1925e <memset>
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
   153c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_style_list_init(&ext->style_series_bg);
   153c8:	f104 0a18 	add.w	sl, r4, #24
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
   153cc:	8763      	strh	r3, [r4, #58]	; 0x3a
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
   153ce:	8663      	strh	r3, [r4, #50]	; 0x32
    ext->secondary_y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
   153d0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    lv_style_list_init(&ext->style_series_bg);
   153d4:	4650      	mov	r0, sl
    lv_style_list_init(&ext->style_series);
   153d6:	f104 0b20 	add.w	fp, r4, #32
    lv_style_list_init(&ext->style_series_bg);
   153da:	f007 ffc1 	bl	1d360 <lv_style_list_init>
    lv_style_list_init(&ext->style_series);
   153de:	4658      	mov	r0, fp
   153e0:	f007 ffbe 	bl	1d360 <lv_style_list_init>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
   153e4:	4b36      	ldr	r3, [pc, #216]	; (154c0 <lv_chart_create+0x178>)
   153e6:	681a      	ldr	r2, [r3, #0]
   153e8:	b922      	cbnz	r2, 153f4 <lv_chart_create+0xac>
   153ea:	4628      	mov	r0, r5
   153ec:	f007 f9d2 	bl	1c794 <lv_obj_get_design_cb>
   153f0:	4b33      	ldr	r3, [pc, #204]	; (154c0 <lv_chart_create+0x178>)
   153f2:	6018      	str	r0, [r3, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
   153f4:	4b33      	ldr	r3, [pc, #204]	; (154c4 <lv_chart_create+0x17c>)
   153f6:	681a      	ldr	r2, [r3, #0]
   153f8:	b922      	cbnz	r2, 15404 <lv_chart_create+0xbc>
   153fa:	4628      	mov	r0, r5
   153fc:	f007 f9c8 	bl	1c790 <lv_obj_get_signal_cb>
   15400:	4b30      	ldr	r3, [pc, #192]	; (154c4 <lv_chart_create+0x17c>)
   15402:	6018      	str	r0, [r3, #0]
    lv_obj_set_signal_cb(chart, lv_chart_signal);
   15404:	4628      	mov	r0, r5
   15406:	4930      	ldr	r1, [pc, #192]	; (154c8 <lv_chart_create+0x180>)
   15408:	f006 fd85 	bl	1bf16 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(chart, lv_chart_design);
   1540c:	4628      	mov	r0, r5
   1540e:	492f      	ldr	r1, [pc, #188]	; (154cc <lv_chart_create+0x184>)
   15410:	f006 fd89 	bl	1bf26 <lv_obj_set_design_cb>
    if(copy == NULL) {
   15414:	b99e      	cbnz	r6, 1543e <lv_chart_create+0xf6>
        lv_obj_set_size(chart, LV_DPI * 3, LV_DPI * 2);
   15416:	f44f 71c3 	mov.w	r1, #390	; 0x186
   1541a:	4628      	mov	r0, r5
   1541c:	f44f 7282 	mov.w	r2, #260	; 0x104
   15420:	f006 fe81 	bl	1c126 <lv_obj_set_size>
        lv_theme_apply(chart, LV_THEME_CHART);
   15424:	2105      	movs	r1, #5
   15426:	4628      	mov	r0, r5
   15428:	f7fe f894 	bl	13554 <lv_theme_apply>
    LV_LOG_INFO("chart created");
   1542c:	4b28      	ldr	r3, [pc, #160]	; (154d0 <lv_chart_create+0x188>)
   1542e:	229e      	movs	r2, #158	; 0x9e
   15430:	9300      	str	r3, [sp, #0]
   15432:	2001      	movs	r0, #1
   15434:	4b27      	ldr	r3, [pc, #156]	; (154d4 <lv_chart_create+0x18c>)
   15436:	4928      	ldr	r1, [pc, #160]	; (154d8 <lv_chart_create+0x190>)
   15438:	f7fd fac0 	bl	129bc <_lv_log_add>
    return chart;
   1543c:	e796      	b.n	1536c <lv_chart_create+0x24>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
   1543e:	4630      	mov	r0, r6
   15440:	f007 f9aa 	bl	1c798 <lv_obj_get_ext_attr>
   15444:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_series, &ext_copy->style_series);
   15446:	f100 0120 	add.w	r1, r0, #32
   1544a:	4658      	mov	r0, fp
   1544c:	f008 f991 	bl	1d772 <lv_style_list_copy>
        lv_style_list_copy(&ext->style_series_bg, &ext_copy->style_series_bg);
   15450:	4650      	mov	r0, sl
   15452:	f106 0118 	add.w	r1, r6, #24
   15456:	f008 f98c 	bl	1d772 <lv_style_list_copy>
        ext->type       = ext_copy->type;
   1545a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    return memcpy(dst, src, len);
   1545e:	f106 010c 	add.w	r1, r6, #12
   15462:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
   15466:	7d33      	ldrb	r3, [r6, #20]
   15468:	2204      	movs	r2, #4
   1546a:	7523      	strb	r3, [r4, #20]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
   1546c:	7d73      	ldrb	r3, [r6, #21]
   1546e:	f104 000c 	add.w	r0, r4, #12
   15472:	7563      	strb	r3, [r4, #21]
        ext->point_cnt  = ext_copy->point_cnt;
   15474:	8af3      	ldrh	r3, [r6, #22]
   15476:	82e3      	strh	r3, [r4, #22]
   15478:	f003 fec6 	bl	19208 <memcpy>
   1547c:	f106 0110 	add.w	r1, r6, #16
   15480:	2204      	movs	r2, #4
   15482:	f104 0010 	add.w	r0, r4, #16
   15486:	f003 febf 	bl	19208 <memcpy>
   1548a:	f106 0134 	add.w	r1, r6, #52	; 0x34
   1548e:	2208      	movs	r2, #8
   15490:	4648      	mov	r0, r9
   15492:	f003 feb9 	bl	19208 <memcpy>
   15496:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   1549a:	2208      	movs	r2, #8
   1549c:	4640      	mov	r0, r8
   1549e:	f003 feb3 	bl	19208 <memcpy>
   154a2:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   154a6:	2208      	movs	r2, #8
   154a8:	4638      	mov	r0, r7
   154aa:	f003 fead 	bl	19208 <memcpy>
        lv_obj_refresh_style(chart, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   154ae:	22ff      	movs	r2, #255	; 0xff
   154b0:	4628      	mov	r0, r5
   154b2:	4611      	mov	r1, r2
   154b4:	f7fa f962 	bl	f77c <lv_obj_refresh_style>
   154b8:	e7b8      	b.n	1542c <lv_chart_create+0xe4>
   154ba:	bf00      	nop
   154bc:	000a0503 	.word	0x000a0503
   154c0:	20025ee4 	.word	0x20025ee4
   154c4:	20025ee8 	.word	0x20025ee8
   154c8:	00014a39 	.word	0x00014a39
   154cc:	00014af5 	.word	0x00014af5
   154d0:	00027dd9 	.word	0x00027dd9
   154d4:	00027de7 	.word	0x00027de7
   154d8:	00027d9e 	.word	0x00027d9e

000154dc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e0:	b087      	sub	sp, #28
   154e2:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   154e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   154e6:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   154e8:	4293      	cmp	r3, r2
{
   154ea:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
   154ec:	d342      	bcc.n	15574 <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   154ee:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   154f0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   154f4:	42bd      	cmp	r5, r7
   154f6:	d103      	bne.n	15500 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   154f8:	2000      	movs	r0, #0
}
   154fa:	b007      	add	sp, #28
   154fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   15500:	fb0b f805 	mul.w	r8, fp, r5
   15504:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   15508:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1550a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1550e:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   15512:	b9ca      	cbnz	r2, 15548 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   15514:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   15516:	6863      	ldr	r3, [r4, #4]
   15518:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1551a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1551e:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
   15520:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   15522:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   15526:	1e5c      	subs	r4, r3, #1
   15528:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1552c:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   15530:	425b      	negs	r3, r3
   15532:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
   15534:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
   15536:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   1553a:	42a1      	cmp	r1, r4
   1553c:	bf28      	it	cs
   1553e:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   15542:	3306      	adds	r3, #6
   15544:	f006 fc72 	bl	1be2c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   15548:	f859 3008 	ldr.w	r3, [r9, r8]
   1554c:	9a05      	ldr	r2, [sp, #20]
   1554e:	9302      	str	r3, [sp, #8]
   15550:	6a33      	ldr	r3, [r6, #32]
   15552:	4630      	mov	r0, r6
   15554:	6a1b      	ldr	r3, [r3, #32]
   15556:	b2a9      	uxth	r1, r5
   15558:	9301      	str	r3, [sp, #4]
   1555a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1555c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   15560:	9300      	str	r3, [sp, #0]
   15562:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   15566:	4653      	mov	r3, sl
   15568:	f00c fca1 	bl	21eae <virtqueue_create>
		if (ret)
   1556c:	2800      	cmp	r0, #0
   1556e:	d1c4      	bne.n	154fa <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   15570:	3501      	adds	r5, #1
   15572:	e7bf      	b.n	154f4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   15574:	4800      	ldr	r0, [pc, #0]	; (15578 <virtio_create_virtqueues+0x9c>)
   15576:	e7c0      	b.n	154fa <virtio_create_virtqueues+0x1e>
   15578:	fffff440 	.word	0xfffff440

0001557c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1557c:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   1557e:	8944      	ldrh	r4, [r0, #10]
   15580:	428c      	cmp	r4, r1
   15582:	d312      	bcc.n	155aa <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   15584:	6a03      	ldr	r3, [r0, #32]
   15586:	3c01      	subs	r4, #1
   15588:	885d      	ldrh	r5, [r3, #2]
   1558a:	402c      	ands	r4, r5
   1558c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   15590:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   15592:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   15594:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   15598:	6a02      	ldr	r2, [r0, #32]
   1559a:	8853      	ldrh	r3, [r2, #2]
   1559c:	3301      	adds	r3, #1
   1559e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   155a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   155a2:	3301      	adds	r3, #1
   155a4:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   155a6:	2000      	movs	r0, #0
}
   155a8:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   155aa:	4801      	ldr	r0, [pc, #4]	; (155b0 <virtqueue_add_consumed_buffer+0x34>)
   155ac:	e7fc      	b.n	155a8 <virtqueue_add_consumed_buffer+0x2c>
   155ae:	bf00      	nop
   155b0:	fffff441 	.word	0xfffff441

000155b4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   155b4:	b430      	push	{r4, r5}
   155b6:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   155b8:	b148      	cbz	r0, 155ce <rpmsg_send_offchannel_raw+0x1a>
   155ba:	6a00      	ldr	r0, [r0, #32]
   155bc:	b138      	cbz	r0, 155ce <rpmsg_send_offchannel_raw+0x1a>
   155be:	b133      	cbz	r3, 155ce <rpmsg_send_offchannel_raw+0x1a>
   155c0:	3401      	adds	r4, #1
   155c2:	d004      	beq.n	155ce <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   155c4:	6f44      	ldr	r4, [r0, #116]	; 0x74
   155c6:	b114      	cbz	r4, 155ce <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   155c8:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   155ca:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   155cc:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   155ce:	4801      	ldr	r0, [pc, #4]	; (155d4 <rpmsg_send_offchannel_raw+0x20>)
}
   155d0:	bc30      	pop	{r4, r5}
   155d2:	4770      	bx	lr
   155d4:	fffff82d 	.word	0xfffff82d

000155d8 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   155d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155dc:	460e      	mov	r6, r1
   155de:	4690      	mov	r8, r2
   155e0:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   155e2:	4605      	mov	r5, r0
   155e4:	2800      	cmp	r0, #0
   155e6:	d06a      	beq.n	156be <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   155e8:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   155ec:	4638      	mov	r0, r7
   155ee:	f00c fdf7 	bl	221e0 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   155f2:	1c63      	adds	r3, r4, #1
   155f4:	d11a      	bne.n	1562c <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   155f6:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   155f8:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   155fc:	095a      	lsrs	r2, r3, #5
   155fe:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   15602:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   15606:	f003 011f 	and.w	r1, r3, #31
   1560a:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1560e:	07e4      	lsls	r4, r4, #31
   15610:	d407      	bmi.n	15622 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   15612:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   15616:	2301      	movs	r3, #1
   15618:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1561a:	4313      	orrs	r3, r2
   1561c:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   15620:	e01d      	b.n	1565e <rpmsg_create_ept+0x86>
	     bit++)
   15622:	3301      	adds	r3, #1
	for (bit = start;
   15624:	2b80      	cmp	r3, #128	; 0x80
   15626:	d1e9      	bne.n	155fc <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   15628:	4c27      	ldr	r4, [pc, #156]	; (156c8 <rpmsg_create_ept+0xf0>)
   1562a:	e044      	b.n	156b6 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1562c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   15630:	d315      	bcc.n	1565e <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   15632:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   15636:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   15638:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   1563c:	d83a      	bhi.n	156b4 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1563e:	0958      	lsrs	r0, r3, #5
   15640:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   15644:	f003 031f 	and.w	r3, r3, #31
   15648:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   1564c:	07d2      	lsls	r2, r2, #31
   1564e:	d4eb      	bmi.n	15628 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   15650:	2201      	movs	r2, #1
   15652:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   15656:	ea43 030c 	orr.w	r3, r3, ip
   1565a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1565e:	491b      	ldr	r1, [pc, #108]	; (156cc <rpmsg_create_ept+0xf4>)
   15660:	2220      	movs	r2, #32
   15662:	f1b8 0f00 	cmp.w	r8, #0
   15666:	bf18      	it	ne
   15668:	4641      	movne	r1, r8
   1566a:	4628      	mov	r0, r5
   1566c:	f003 fd7e 	bl	1916c <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   15670:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   15672:	4629      	mov	r1, r5
   15674:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   15676:	9b07      	ldr	r3, [sp, #28]
   15678:	4630      	mov	r0, r6
   1567a:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1567c:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   1567e:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   15680:	632b      	str	r3, [r5, #48]	; 0x30
   15682:	f00c fe27 	bl	222d4 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   15686:	4638      	mov	r0, r7
   15688:	f001 f9cc 	bl	16a24 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1568c:	782c      	ldrb	r4, [r5, #0]
   1568e:	b174      	cbz	r4, 156ae <rpmsg_create_ept+0xd6>
   15690:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   15694:	b15c      	cbz	r4, 156ae <rpmsg_create_ept+0xd6>
   15696:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15698:	3301      	adds	r3, #1
   1569a:	d112      	bne.n	156c2 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1569c:	2100      	movs	r1, #0
   1569e:	4628      	mov	r0, r5
   156a0:	f00c fdcf 	bl	22242 <rpmsg_send_ns_message>

	if (status)
   156a4:	4604      	mov	r4, r0
   156a6:	b110      	cbz	r0, 156ae <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   156a8:	4628      	mov	r0, r5
   156aa:	f00c fd9f 	bl	221ec <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   156ae:	4620      	mov	r0, r4
   156b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156b4:	4c06      	ldr	r4, [pc, #24]	; (156d0 <rpmsg_create_ept+0xf8>)
   156b6:	4638      	mov	r0, r7
   156b8:	f001 f9b4 	bl	16a24 <z_impl_k_sem_give>
}
   156bc:	e7f7      	b.n	156ae <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   156be:	4c04      	ldr	r4, [pc, #16]	; (156d0 <rpmsg_create_ept+0xf8>)
   156c0:	e7f5      	b.n	156ae <rpmsg_create_ept+0xd6>
   156c2:	2400      	movs	r4, #0
   156c4:	e7f3      	b.n	156ae <rpmsg_create_ept+0xd6>
   156c6:	bf00      	nop
   156c8:	fffff829 	.word	0xfffff829
   156cc:	000245a3 	.word	0x000245a3
   156d0:	fffff82d 	.word	0xfffff82d

000156d4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   156d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d8:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
   156da:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
   156dc:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   156de:	6a03      	ldr	r3, [r0, #32]
   156e0:	b08d      	sub	sp, #52	; 0x34
   156e2:	681b      	ldr	r3, [r3, #0]
   156e4:	4692      	mov	sl, r2
   156e6:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   156ea:	9103      	str	r1, [sp, #12]
   156ec:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   156ee:	0743      	lsls	r3, r0, #29
   156f0:	f140 8089 	bpl.w	15806 <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   156f4:	f643 2398 	movw	r3, #15000	; 0x3a98
   156f8:	2f00      	cmp	r7, #0
   156fa:	bf18      	it	ne
   156fc:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   156fe:	f104 0858 	add.w	r8, r4, #88	; 0x58
   15702:	4640      	mov	r0, r8
   15704:	f00c fe20 	bl	22348 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   15708:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1570a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1570c:	b373      	cbz	r3, 1576c <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
   1570e:	2b01      	cmp	r3, #1
   15710:	d108      	bne.n	15724 <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   15712:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15716:	f00c fd4b 	bl	221b0 <virtqueue_get_desc_size>
   1571a:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
   1571c:	2800      	cmp	r0, #0
   1571e:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
   15722:	dc25      	bgt.n	15770 <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   15724:	f04f 0900 	mov.w	r9, #0
   15728:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1572a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1572c:	bb3b      	cbnz	r3, 1577e <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1572e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15732:	f10d 0212 	add.w	r2, sp, #18
   15736:	a905      	add	r1, sp, #20
   15738:	f00c fc49 	bl	21fce <virtqueue_get_buffer>
		if (!data) {
   1573c:	4605      	mov	r5, r0
   1573e:	b948      	cbnz	r0, 15754 <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   15740:	f44f 7100 	mov.w	r1, #512	; 0x200
   15744:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   15748:	f00c fead 	bl	224a6 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   1574c:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   15750:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
   15752:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   15754:	4640      	mov	r0, r8
   15756:	f00c fddf 	bl	22318 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
   1575a:	2d00      	cmp	r5, #0
   1575c:	d157      	bne.n	1580e <rpmsg_virtio_send_offchannel_raw+0x13a>
   1575e:	2f00      	cmp	r7, #0
   15760:	d053      	beq.n	1580a <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
   15762:	f1b9 0f00 	cmp.w	r9, #0
   15766:	d108      	bne.n	1577a <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   15768:	3f01      	subs	r7, #1
	while (1) {
   1576a:	e7ca      	b.n	15702 <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1576c:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
   15770:	454e      	cmp	r6, r9
   15772:	ddd9      	ble.n	15728 <rpmsg_virtio_send_offchannel_raw+0x54>
   15774:	4640      	mov	r0, r8
   15776:	f00c fdcf 	bl	22318 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
   1577a:	4e31      	ldr	r6, [pc, #196]	; (15840 <rpmsg_virtio_send_offchannel_raw+0x16c>)
   1577c:	e03f      	b.n	157fe <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
   1577e:	2b01      	cmp	r3, #1
   15780:	d108      	bne.n	15794 <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   15782:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15786:	aa05      	add	r2, sp, #20
   15788:	f10d 0112 	add.w	r1, sp, #18
   1578c:	f00c fc59 	bl	22042 <virtqueue_get_available_buffer>
   15790:	4605      	mov	r5, r0
   15792:	e7df      	b.n	15754 <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
   15794:	2500      	movs	r5, #0
   15796:	e7dd      	b.n	15754 <rpmsg_virtio_send_offchannel_raw+0x80>
   15798:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1579a:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   1579c:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   157a0:	1ac9      	subs	r1, r1, r3
   157a2:	4281      	cmp	r1, r0
   157a4:	bf28      	it	cs
   157a6:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   157aa:	4633      	mov	r3, r6
   157ac:	465a      	mov	r2, fp
   157ae:	4638      	mov	r0, r7
   157b0:	f006 fb01 	bl	1bdb6 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   157b4:	4286      	cmp	r6, r0
   157b6:	d000      	beq.n	157ba <rpmsg_virtio_send_offchannel_raw+0xe6>
   157b8:	e7fe      	b.n	157b8 <rpmsg_virtio_send_offchannel_raw+0xe4>
   157ba:	4640      	mov	r0, r8
   157bc:	f00c fdc4 	bl	22348 <__metal_mutex_acquire>
   157c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   157c2:	9a05      	ldr	r2, [sp, #20]
   157c4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   157c6:	b953      	cbnz	r3, 157de <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
   157c8:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   157cc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   157d0:	2201      	movs	r2, #1
   157d2:	9500      	str	r5, [sp, #0]
   157d4:	a906      	add	r1, sp, #24
   157d6:	f00c fb9a 	bl	21f0e <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   157da:	b148      	cbz	r0, 157f0 <rpmsg_virtio_send_offchannel_raw+0x11c>
   157dc:	e7fe      	b.n	157dc <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
   157de:	2b01      	cmp	r3, #1
   157e0:	d106      	bne.n	157f0 <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   157e2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   157e6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   157ea:	f7ff fec7 	bl	1557c <virtqueue_add_consumed_buffer>
   157ee:	e7f4      	b.n	157da <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   157f0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   157f4:	f00c fca4 	bl	22140 <virtqueue_kick>
   157f8:	4640      	mov	r0, r8
   157fa:	f00c fd8d 	bl	22318 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   157fe:	4630      	mov	r0, r6
   15800:	b00d      	add	sp, #52	; 0x34
   15802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   15806:	4e0f      	ldr	r6, [pc, #60]	; (15844 <rpmsg_virtio_send_offchannel_raw+0x170>)
   15808:	e7f9      	b.n	157fe <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
   1580a:	4e0f      	ldr	r6, [pc, #60]	; (15848 <rpmsg_virtio_send_offchannel_raw+0x174>)
   1580c:	e7f7      	b.n	157fe <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
   1580e:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   15810:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
   15814:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   15816:	2300      	movs	r3, #0
   15818:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1581a:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1581c:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1581e:	4281      	cmp	r1, r0
   15820:	bf28      	it	cs
   15822:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
	rp_hdr.reserved = 0;
   15826:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   15828:	4638      	mov	r0, r7
   1582a:	2310      	movs	r3, #16
   1582c:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   1582e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   15832:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   15836:	f006 fabe 	bl	1bdb6 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1583a:	2810      	cmp	r0, #16
   1583c:	d0ac      	beq.n	15798 <rpmsg_virtio_send_offchannel_raw+0xc4>
   1583e:	e7fe      	b.n	1583e <rpmsg_virtio_send_offchannel_raw+0x16a>
   15840:	fffff82b 	.word	0xfffff82b
   15844:	fffff82c 	.word	0xfffff82c
   15848:	fffff82e 	.word	0xfffff82e

0001584c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   1584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15850:	460d      	mov	r5, r1
   15852:	b088      	sub	sp, #32
   15854:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   15856:	2100      	movs	r1, #0
   15858:	227c      	movs	r2, #124	; 0x7c
{
   1585a:	4604      	mov	r4, r0
   1585c:	461e      	mov	r6, r3
   1585e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   15862:	f003 fcfc 	bl	1925e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15866:	2201      	movs	r2, #1
   15868:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1586c:	4611      	mov	r1, r2
   1586e:	f00d f8ca 	bl	22a06 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   15872:	4b5e      	ldr	r3, [pc, #376]	; (159ec <rpmsg_init_vdev+0x1a0>)
	rvdev->vdev = vdev;
   15874:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   15876:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   15878:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1587a:	6763      	str	r3, [r4, #116]	; 0x74
   1587c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1587e:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   15882:	f1b8 0f01 	cmp.w	r8, #1
   15886:	d020      	beq.n	158ca <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   15888:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1588a:	6a03      	ldr	r3, [r0, #32]
   1588c:	689b      	ldr	r3, [r3, #8]
   1588e:	4798      	blx	r3
   15890:	2300      	movs	r3, #0
   15892:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   15894:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   15898:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1589a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   1589e:	f1b8 0f00 	cmp.w	r8, #0
   158a2:	d01e      	beq.n	158e2 <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   158a4:	f1b8 0f01 	cmp.w	r8, #1
   158a8:	d133      	bne.n	15912 <rpmsg_init_vdev+0xc6>
		vq_names[0] = "tx_vq";
   158aa:	4b51      	ldr	r3, [pc, #324]	; (159f0 <rpmsg_init_vdev+0x1a4>)
   158ac:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   158ae:	4b51      	ldr	r3, [pc, #324]	; (159f4 <rpmsg_init_vdev+0x1a8>)
   158b0:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   158b2:	4b51      	ldr	r3, [pc, #324]	; (159f8 <rpmsg_init_vdev+0x1ac>)
   158b4:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   158b6:	4b51      	ldr	r3, [pc, #324]	; (159fc <rpmsg_init_vdev+0x1b0>)
   158b8:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   158ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   158bc:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   158be:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   158c0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   158c4:	e023      	b.n	1590e <rpmsg_init_vdev+0xc2>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   158c6:	0743      	lsls	r3, r0, #29
   158c8:	d4de      	bmi.n	15888 <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
   158ca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   158cc:	6a03      	ldr	r3, [r0, #32]
   158ce:	681b      	ldr	r3, [r3, #0]
   158d0:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   158d2:	0642      	lsls	r2, r0, #25
   158d4:	d5f7      	bpl.n	158c6 <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
   158d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   158d8:	2100      	movs	r1, #0
   158da:	6a03      	ldr	r3, [r0, #32]
   158dc:	685b      	ldr	r3, [r3, #4]
   158de:	4798      	blx	r3
}
   158e0:	e7f3      	b.n	158ca <rpmsg_init_vdev+0x7e>
		if (!shpool)
   158e2:	f1b9 0f00 	cmp.w	r9, #0
   158e6:	d07d      	beq.n	159e4 <rpmsg_init_vdev+0x198>
		if (!shpool->size)
   158e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   158ec:	2b00      	cmp	r3, #0
   158ee:	d07b      	beq.n	159e8 <rpmsg_init_vdev+0x19c>
		vq_names[0] = "rx_vq";
   158f0:	4b40      	ldr	r3, [pc, #256]	; (159f4 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   158f2:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   158f6:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   158f8:	4b3d      	ldr	r3, [pc, #244]	; (159f0 <rpmsg_init_vdev+0x1a4>)
   158fa:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   158fc:	4b3f      	ldr	r3, [pc, #252]	; (159fc <rpmsg_init_vdev+0x1b0>)
   158fe:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   15900:	4b3d      	ldr	r3, [pc, #244]	; (159f8 <rpmsg_init_vdev+0x1ac>)
   15902:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   15904:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   15906:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   15908:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1590a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1590e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   15912:	ab04      	add	r3, sp, #16
   15914:	9300      	str	r3, [sp, #0]
   15916:	2202      	movs	r2, #2
   15918:	2100      	movs	r1, #0
   1591a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   1591c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   15920:	ab02      	add	r3, sp, #8
   15922:	f7ff fddb 	bl	154dc <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   15926:	4607      	mov	r7, r0
   15928:	2800      	cmp	r0, #0
   1592a:	d157      	bne.n	159dc <rpmsg_init_vdev+0x190>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   1592c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15930:	f00c fbdc 	bl	220ec <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   15934:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   15936:	681a      	ldr	r2, [r3, #0]
   15938:	699b      	ldr	r3, [r3, #24]
   1593a:	6296      	str	r6, [r2, #40]	; 0x28
   1593c:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   1593e:	f1b8 0f00 	cmp.w	r8, #0
   15942:	d108      	bne.n	15956 <rpmsg_init_vdev+0x10a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   15944:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   15948:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   1594a:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1594c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   15950:	895b      	ldrh	r3, [r3, #10]
   15952:	4553      	cmp	r3, sl
   15954:	d81f      	bhi.n	15996 <rpmsg_init_vdev+0x14a>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   15956:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1595a:	e9c4 4400 	strd	r4, r4, [r4]
   1595e:	b18b      	cbz	r3, 15984 <rpmsg_init_vdev+0x138>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   15960:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   15964:	4926      	ldr	r1, [pc, #152]	; (15a00 <rpmsg_init_vdev+0x1b4>)
   15966:	2220      	movs	r2, #32
   15968:	4628      	mov	r0, r5
   1596a:	f003 fbff 	bl	1916c <strncpy>
	ept->addr = src;
   1596e:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   15970:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   15974:	4b23      	ldr	r3, [pc, #140]	; (15a04 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   15976:	4629      	mov	r1, r5
   15978:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   1597a:	2300      	movs	r3, #0
   1597c:	4620      	mov	r0, r4
   1597e:	63a3      	str	r3, [r4, #56]	; 0x38
   15980:	f00c fca8 	bl	222d4 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   15984:	f1b8 0f00 	cmp.w	r8, #0
   15988:	d128      	bne.n	159dc <rpmsg_init_vdev+0x190>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1598a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1598c:	2104      	movs	r1, #4
   1598e:	6a03      	ldr	r3, [r0, #32]
   15990:	685b      	ldr	r3, [r3, #4]
   15992:	4798      	blx	r3
}
   15994:	e022      	b.n	159dc <rpmsg_init_vdev+0x190>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   15996:	f44f 7100 	mov.w	r1, #512	; 0x200
   1599a:	4648      	mov	r0, r9
   1599c:	f00c fd83 	bl	224a6 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   159a0:	4605      	mov	r5, r0
   159a2:	b1c8      	cbz	r0, 159d8 <rpmsg_init_vdev+0x18c>
   159a4:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   159a6:	9006      	str	r0, [sp, #24]
   159a8:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   159aa:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   159ac:	f44f 7300 	mov.w	r3, #512	; 0x200
   159b0:	4281      	cmp	r1, r0
   159b2:	bf28      	it	cs
   159b4:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   159b8:	2200      	movs	r2, #0
   159ba:	4630      	mov	r0, r6
   159bc:	f006 fa36 	bl	1be2c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   159c0:	2301      	movs	r3, #1
   159c2:	2200      	movs	r2, #0
   159c4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   159c8:	9500      	str	r5, [sp, #0]
   159ca:	a906      	add	r1, sp, #24
   159cc:	f00c fa9f 	bl	21f0e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   159d0:	b918      	cbnz	r0, 159da <rpmsg_init_vdev+0x18e>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   159d2:	f10a 0a01 	add.w	sl, sl, #1
   159d6:	e7b9      	b.n	1594c <rpmsg_init_vdev+0x100>
				return RPMSG_ERR_NO_BUFF;
   159d8:	480b      	ldr	r0, [pc, #44]	; (15a08 <rpmsg_init_vdev+0x1bc>)
   159da:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   159dc:	4638      	mov	r0, r7
   159de:	b008      	add	sp, #32
   159e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   159e4:	4f09      	ldr	r7, [pc, #36]	; (15a0c <rpmsg_init_vdev+0x1c0>)
   159e6:	e7f9      	b.n	159dc <rpmsg_init_vdev+0x190>
			return RPMSG_ERR_NO_BUFF;
   159e8:	4f07      	ldr	r7, [pc, #28]	; (15a08 <rpmsg_init_vdev+0x1bc>)
   159ea:	e7f7      	b.n	159dc <rpmsg_init_vdev+0x190>
   159ec:	000156d5 	.word	0x000156d5
   159f0:	00027dfd 	.word	0x00027dfd
   159f4:	00027df7 	.word	0x00027df7
   159f8:	00022317 	.word	0x00022317
   159fc:	000223e7 	.word	0x000223e7
   15a00:	00027e03 	.word	0x00027e03
   15a04:	00022355 	.word	0x00022355
   15a08:	fffff82e 	.word	0xfffff82e
   15a0c:	fffff82d 	.word	0xfffff82d

00015a10 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   15a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a12:	4b10      	ldr	r3, [pc, #64]	; (15a54 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   15a14:	4f10      	ldr	r7, [pc, #64]	; (15a58 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a16:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   15a1a:	3001      	adds	r0, #1
   15a1c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15a20:	42ae      	cmp	r6, r5
   15a22:	d800      	bhi.n	15a26 <z_sys_init_run_level+0x16>
		}
	}
}
   15a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   15a26:	e9d5 3400 	ldrd	r3, r4, [r5]
   15a2a:	4620      	mov	r0, r4
   15a2c:	4798      	blx	r3
   15a2e:	b170      	cbz	r0, 15a4e <z_sys_init_run_level+0x3e>
   15a30:	b16c      	cbz	r4, 15a4e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   15a32:	2301      	movs	r3, #1
				(dev - __device_start));
   15a34:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15a36:	4a09      	ldr	r2, [pc, #36]	; (15a5c <z_sys_init_run_level+0x4c>)
   15a38:	1124      	asrs	r4, r4, #4
   15a3a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   15a3c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15a40:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   15a44:	fa03 f404 	lsl.w	r4, r3, r4
   15a48:	4304      	orrs	r4, r0
   15a4a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a4e:	3508      	adds	r5, #8
   15a50:	e7e6      	b.n	15a20 <z_sys_init_run_level+0x10>
   15a52:	bf00      	nop
   15a54:	0002406c 	.word	0x0002406c
   15a58:	200004dc 	.word	0x200004dc
   15a5c:	2000059c 	.word	0x2000059c

00015a60 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   15a60:	4b08      	ldr	r3, [pc, #32]	; (15a84 <z_device_ready+0x24>)
   15a62:	1ac0      	subs	r0, r0, r3
   15a64:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15a66:	4b08      	ldr	r3, [pc, #32]	; (15a88 <z_device_ready+0x28>)
   15a68:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   15a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   15a6e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15a70:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   15a74:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   15a78:	4210      	tst	r0, r2
}
   15a7a:	bf0c      	ite	eq
   15a7c:	4618      	moveq	r0, r3
   15a7e:	2000      	movne	r0, #0
   15a80:	4770      	bx	lr
   15a82:	bf00      	nop
   15a84:	200004dc 	.word	0x200004dc
   15a88:	2000059c 	.word	0x2000059c

00015a8c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   15a8c:	4911      	ldr	r1, [pc, #68]	; (15ad4 <z_impl_device_get_binding+0x48>)
{
   15a8e:	b570      	push	{r4, r5, r6, lr}
   15a90:	4605      	mov	r5, r0
   15a92:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   15a94:	4c10      	ldr	r4, [pc, #64]	; (15ad8 <z_impl_device_get_binding+0x4c>)
   15a96:	428c      	cmp	r4, r1
   15a98:	d104      	bne.n	15aa4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   15a9a:	4c0f      	ldr	r4, [pc, #60]	; (15ad8 <z_impl_device_get_binding+0x4c>)
   15a9c:	42b4      	cmp	r4, r6
   15a9e:	d10a      	bne.n	15ab6 <z_impl_device_get_binding+0x2a>
	return NULL;
   15aa0:	2400      	movs	r4, #0
   15aa2:	e014      	b.n	15ace <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   15aa4:	4620      	mov	r0, r4
   15aa6:	f7ff ffdb 	bl	15a60 <z_device_ready>
   15aaa:	b110      	cbz	r0, 15ab2 <z_impl_device_get_binding+0x26>
   15aac:	6823      	ldr	r3, [r4, #0]
   15aae:	42ab      	cmp	r3, r5
   15ab0:	d00d      	beq.n	15ace <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   15ab2:	3410      	adds	r4, #16
   15ab4:	e7ef      	b.n	15a96 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15ab6:	4620      	mov	r0, r4
   15ab8:	f7ff ffd2 	bl	15a60 <z_device_ready>
   15abc:	b908      	cbnz	r0, 15ac2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   15abe:	3410      	adds	r4, #16
   15ac0:	e7ec      	b.n	15a9c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15ac2:	4628      	mov	r0, r5
   15ac4:	6821      	ldr	r1, [r4, #0]
   15ac6:	f003 fb74 	bl	191b2 <strcmp>
   15aca:	2800      	cmp	r0, #0
   15acc:	d1f7      	bne.n	15abe <z_impl_device_get_binding+0x32>
}
   15ace:	4620      	mov	r0, r4
   15ad0:	bd70      	pop	{r4, r5, r6, pc}
   15ad2:	bf00      	nop
   15ad4:	2000059c 	.word	0x2000059c
   15ad8:	200004dc 	.word	0x200004dc

00015adc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15ae0:	4606      	mov	r6, r0
   15ae2:	460f      	mov	r7, r1
	__asm__ volatile(
   15ae4:	f04f 0320 	mov.w	r3, #32
   15ae8:	f3ef 8811 	mrs	r8, BASEPRI
   15aec:	f383 8811 	msr	BASEPRI, r3
   15af0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   15af4:	f000 ff90 	bl	16a18 <z_impl_k_current_get>
   15af8:	4c21      	ldr	r4, [pc, #132]	; (15b80 <z_fatal_error+0xa4>)
   15afa:	4b22      	ldr	r3, [pc, #136]	; (15b84 <z_fatal_error+0xa8>)
   15afc:	2e04      	cmp	r6, #4
   15afe:	eba4 0403 	sub.w	r4, r4, r3
   15b02:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   15b06:	bf98      	it	ls
   15b08:	4a1f      	ldrls	r2, [pc, #124]	; (15b88 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15b0a:	ea4f 1484 	mov.w	r4, r4, lsl #6
   15b0e:	f044 0301 	orr.w	r3, r4, #1
   15b12:	4605      	mov	r5, r0
	switch (reason) {
   15b14:	bf94      	ite	ls
   15b16:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15b1a:	4a1c      	ldrhi	r2, [pc, #112]	; (15b8c <z_fatal_error+0xb0>)
   15b1c:	f8ad 3000 	strh.w	r3, [sp]
   15b20:	4631      	mov	r1, r6
   15b22:	2300      	movs	r3, #0
   15b24:	481a      	ldr	r0, [pc, #104]	; (15b90 <z_fatal_error+0xb4>)
   15b26:	f002 fa0b 	bl	17f40 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   15b2a:	b147      	cbz	r7, 15b3e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   15b2c:	69fb      	ldr	r3, [r7, #28]
   15b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15b32:	b123      	cbz	r3, 15b3e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   15b34:	4817      	ldr	r0, [pc, #92]	; (15b94 <z_fatal_error+0xb8>)
   15b36:	f044 0101 	orr.w	r1, r4, #1
   15b3a:	f002 f9c7 	bl	17ecc <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15b3e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   15b42:	b12d      	cbz	r5, 15b50 <z_fatal_error+0x74>
   15b44:	4628      	mov	r0, r5
   15b46:	f00c ffaa 	bl	22a9e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   15b4a:	b108      	cbz	r0, 15b50 <z_fatal_error+0x74>
   15b4c:	7803      	ldrb	r3, [r0, #0]
   15b4e:	b903      	cbnz	r3, 15b52 <z_fatal_error+0x76>
		thread_name = "unknown";
   15b50:	4811      	ldr	r0, [pc, #68]	; (15b98 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   15b52:	f7ec fb2d 	bl	21b0 <log_strdup>
   15b56:	4623      	mov	r3, r4
   15b58:	4602      	mov	r2, r0
   15b5a:	4629      	mov	r1, r5
   15b5c:	480f      	ldr	r0, [pc, #60]	; (15b9c <z_fatal_error+0xc0>)
   15b5e:	f002 f9d6 	bl	17f0e <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15b62:	4639      	mov	r1, r7
   15b64:	4630      	mov	r0, r6
   15b66:	f7f7 ff17 	bl	d998 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15b6a:	f388 8811 	msr	BASEPRI, r8
   15b6e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15b72:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   15b74:	b002      	add	sp, #8
   15b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15b7a:	f7ee bde7 	b.w	474c <z_impl_k_thread_abort>
   15b7e:	bf00      	nop
   15b80:	000233b4 	.word	0x000233b4
   15b84:	000232ec 	.word	0x000232ec
   15b88:	00024084 	.word	0x00024084
   15b8c:	00027e06 	.word	0x00027e06
   15b90:	00027e14 	.word	0x00027e14
   15b94:	00027e3c 	.word	0x00027e3c
   15b98:	00025430 	.word	0x00025430
   15b9c:	00027e5d 	.word	0x00027e5d

00015ba0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   15ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ba2:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   15ba4:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   15ba6:	4e15      	ldr	r6, [pc, #84]	; (15bfc <idle+0x5c>)
	__asm__ volatile(
   15ba8:	f04f 0220 	mov.w	r2, #32
   15bac:	f3ef 8311 	mrs	r3, BASEPRI
   15bb0:	f382 8811 	msr	BASEPRI, r2
   15bb4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   15bb8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   15bba:	b188      	cbz	r0, 15be0 <idle+0x40>
			cpu->pending_abort = NULL;
   15bbc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   15bbe:	f383 8811 	msr	BASEPRI, r3
   15bc2:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   15bc6:	f000 fd57 	bl	16678 <z_thread_single_abort>
	__asm__ volatile(
   15bca:	f04f 0320 	mov.w	r3, #32
   15bce:	f3ef 8011 	mrs	r0, BASEPRI
   15bd2:	f383 8811 	msr	BASEPRI, r3
   15bd6:	f3bf 8f6f 	isb	sy
   15bda:	f00c fe40 	bl	2285e <z_reschedule_irqlock>
			continue;
   15bde:	e7e3      	b.n	15ba8 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   15be0:	f00c ffeb 	bl	22bba <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   15be4:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   15be6:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   15be8:	2802      	cmp	r0, #2
   15bea:	bfd8      	it	le
   15bec:	4608      	movle	r0, r1
   15bee:	f00c fff4 	bl	22bda <z_set_timeout_expiry>
		_kernel.idle = ticks;
   15bf2:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   15bf4:	f7ee fab0 	bl	4158 <arch_cpu_idle>
}
   15bf8:	e7d6      	b.n	15ba8 <idle+0x8>
   15bfa:	bf00      	nop
   15bfc:	20025eec 	.word	0x20025eec

00015c00 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   15c00:	4802      	ldr	r0, [pc, #8]	; (15c0c <z_bss_zero+0xc>)
   15c02:	4a03      	ldr	r2, [pc, #12]	; (15c10 <z_bss_zero+0x10>)
   15c04:	2100      	movs	r1, #0
   15c06:	1a12      	subs	r2, r2, r0
   15c08:	f003 bb29 	b.w	1925e <memset>
   15c0c:	200007e0 	.word	0x200007e0
   15c10:	2002a188 	.word	0x2002a188

00015c14 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   15c14:	2201      	movs	r2, #1
{
   15c16:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15c18:	4b09      	ldr	r3, [pc, #36]	; (15c40 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c1a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   15c1c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c1e:	f7ff fef7 	bl	15a10 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   15c22:	f001 f8d1 	bl	16dc8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15c26:	2003      	movs	r0, #3
   15c28:	f7ff fef2 	bl	15a10 <z_sys_init_run_level>

	z_init_static_threads();
   15c2c:	f000 fff4 	bl	16c18 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   15c30:	f7eb fbe0 	bl	13f4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15c34:	4a03      	ldr	r2, [pc, #12]	; (15c44 <bg_thread_main+0x30>)
   15c36:	7b13      	ldrb	r3, [r2, #12]
   15c38:	f023 0301 	bic.w	r3, r3, #1
   15c3c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15c3e:	bd08      	pop	{r3, pc}
   15c40:	2002a186 	.word	0x2002a186
   15c44:	20001070 	.word	0x20001070

00015c48 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   15c48:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   15c4c:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   15c4e:	f7ec fa13 	bl	2078 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   15c52:	4b34      	ldr	r3, [pc, #208]	; (15d24 <z_cstart+0xdc>)
	uint32_t msp =
   15c54:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15c58:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15c5c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c60:	2400      	movs	r4, #0
   15c62:	23e0      	movs	r3, #224	; 0xe0
   15c64:	4d30      	ldr	r5, [pc, #192]	; (15d28 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15c66:	f04f 0b01 	mov.w	fp, #1
   15c6a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15c6e:	77ec      	strb	r4, [r5, #31]
   15c70:	762c      	strb	r4, [r5, #24]
   15c72:	766c      	strb	r4, [r5, #25]
   15c74:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   15c78:	4e2c      	ldr	r6, [pc, #176]	; (15d2c <z_cstart+0xe4>)
   15c7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15c7e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15c80:	f7ee fd2c 	bl	46dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15c84:	f7ee fa62 	bl	414c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c8c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15c8e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   15c90:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   15c94:	4d26      	ldr	r5, [pc, #152]	; (15d30 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   15c96:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   15c9a:	ab06      	add	r3, sp, #24
   15c9c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15c9e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   15ca0:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   15ca4:	f7ff feb4 	bl	15a10 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15ca8:	2001      	movs	r0, #1
   15caa:	f7ff feb1 	bl	15a10 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cae:	f8df a098 	ldr.w	sl, [pc, #152]	; 15d48 <z_cstart+0x100>
	z_sched_init();
   15cb2:	f000 fe35 	bl	16920 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cb6:	4b1f      	ldr	r3, [pc, #124]	; (15d34 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   15cb8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15cbe:	491e      	ldr	r1, [pc, #120]	; (15d38 <z_cstart+0xf0>)
   15cc0:	9305      	str	r3, [sp, #20]
   15cc2:	4630      	mov	r0, r6
   15cc4:	4653      	mov	r3, sl
   15cc6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   15cca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15cce:	9400      	str	r4, [sp, #0]
   15cd0:	f000 ff46 	bl	16b60 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15cd4:	7b73      	ldrb	r3, [r6, #13]
   15cd6:	4680      	mov	r8, r0
   15cd8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   15cdc:	4630      	mov	r0, r6
   15cde:	7373      	strb	r3, [r6, #13]
   15ce0:	f00c fdff 	bl	228e2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   15ce4:	230f      	movs	r3, #15
   15ce6:	4f15      	ldr	r7, [pc, #84]	; (15d3c <z_cstart+0xf4>)
   15ce8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15cec:	e9cd 4302 	strd	r4, r3, [sp, #8]
   15cf0:	4913      	ldr	r1, [pc, #76]	; (15d40 <z_cstart+0xf8>)
   15cf2:	4b14      	ldr	r3, [pc, #80]	; (15d44 <z_cstart+0xfc>)
   15cf4:	4638      	mov	r0, r7
   15cf6:	e9cd b404 	strd	fp, r4, [sp, #16]
   15cfa:	e9cd 5400 	strd	r5, r4, [sp]
   15cfe:	f000 ff2f 	bl	16b60 <z_setup_new_thread>
   15d02:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d04:	4652      	mov	r2, sl
   15d06:	f023 0304 	bic.w	r3, r3, #4
   15d0a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   15d0c:	f105 031c 	add.w	r3, r5, #28
   15d10:	4641      	mov	r1, r8
   15d12:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   15d14:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   15d18:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   15d1a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   15d1c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d20:	f7ee f9fa 	bl	4118 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d24:	2002c6f8 	.word	0x2002c6f8
   15d28:	e000ed00 	.word	0xe000ed00
   15d2c:	20001070 	.word	0x20001070
   15d30:	20025eec 	.word	0x20025eec
   15d34:	00027ebf 	.word	0x00027ebf
   15d38:	2002b5b8 	.word	0x2002b5b8
   15d3c:	20000fe8 	.word	0x20000fe8
   15d40:	2002c5b8 	.word	0x2002c5b8
   15d44:	00015ba1 	.word	0x00015ba1
   15d48:	00015c15 	.word	0x00015c15

00015d4c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   15d4c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15d4e:	4c06      	ldr	r4, [pc, #24]	; (15d68 <statics_init+0x1c>)
   15d50:	4d06      	ldr	r5, [pc, #24]	; (15d6c <statics_init+0x20>)
   15d52:	42ac      	cmp	r4, r5
   15d54:	d301      	bcc.n	15d5a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   15d56:	2000      	movs	r0, #0
   15d58:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15d5a:	4620      	mov	r0, r4
   15d5c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15d60:	f00c fbb6 	bl	224d0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15d64:	3414      	adds	r4, #20
   15d66:	e7f4      	b.n	15d52 <statics_init+0x6>
   15d68:	200005f4 	.word	0x200005f4
   15d6c:	20000608 	.word	0x20000608

00015d70 <mbox_message_put>:
 *
 * @return 0 if successful, -ENOMSG if failed immediately, -EAGAIN if timed out
 */
static int mbox_message_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
			     k_timeout_t timeout)
{
   15d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d74:	4699      	mov	r9, r3
	struct k_thread *receiving_thread;
	struct k_mbox_msg *rx_msg;
	k_spinlock_key_t key;

	/* save sender id so it can be used during message matching */
	tx_msg->rx_source_thread = _current;
   15d76:	4b37      	ldr	r3, [pc, #220]	; (15e54 <mbox_message_put+0xe4>)

	/* finish readying sending thread (actual or dummy) for send */
	sending_thread = tx_msg->_syncing_thread;
   15d78:	f8d1 b024 	ldr.w	fp, [r1, #36]	; 0x24
	tx_msg->rx_source_thread = _current;
   15d7c:	689b      	ldr	r3, [r3, #8]
{
   15d7e:	4606      	mov	r6, r0
	tx_msg->rx_source_thread = _current;
   15d80:	61cb      	str	r3, [r1, #28]
{
   15d82:	460f      	mov	r7, r1
   15d84:	4690      	mov	r8, r2
   15d86:	b085      	sub	sp, #20
	sending_thread->base.swap_data = tx_msg;
   15d88:	f8cb 1014 	str.w	r1, [fp, #20]

	/* search mailbox's rx queue for a compatible receiver */
	key = k_spin_lock(&mbox->lock);
   15d8c:	f100 0310 	add.w	r3, r0, #16
   15d90:	f04f 0220 	mov.w	r2, #32
   15d94:	f3ef 8a11 	mrs	sl, BASEPRI
   15d98:	f382 8811 	msr	BASEPRI, r2
   15d9c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15da0:	4602      	mov	r2, r0
   15da2:	f852 5f08 	ldr.w	r5, [r2, #8]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15da6:	4295      	cmp	r5, r2
   15da8:	d109      	bne.n	15dbe <mbox_message_put+0x4e>

		}
	}

	/* didn't find a matching receiver: don't wait for one */
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15daa:	ea58 0209 	orrs.w	r2, r8, r9
   15dae:	d13b      	bne.n	15e28 <mbox_message_put+0xb8>
	__asm__ volatile(
   15db0:	f38a 8811 	msr	BASEPRI, sl
   15db4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   15db8:	f06f 044f 	mvn.w	r4, #79	; 0x4f
   15dbc:	e01e      	b.n	15dfc <mbox_message_put+0x8c>
   15dbe:	2d00      	cmp	r5, #0
   15dc0:	bf38      	it	cc
   15dc2:	2500      	movcc	r5, #0
	_WAIT_Q_FOR_EACH(&mbox->rx_msg_queue, receiving_thread) {
   15dc4:	2d00      	cmp	r5, #0
   15dc6:	d0f0      	beq.n	15daa <mbox_message_put+0x3a>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   15dc8:	4638      	mov	r0, r7
   15dca:	6969      	ldr	r1, [r5, #20]
   15dcc:	9303      	str	r3, [sp, #12]
   15dce:	f00c fbeb 	bl	225a8 <mbox_message_match>
   15dd2:	9b03      	ldr	r3, [sp, #12]
   15dd4:	4604      	mov	r4, r0
   15dd6:	bb10      	cbnz	r0, 15e1e <mbox_message_put+0xae>
			z_unpend_thread(receiving_thread);
   15dd8:	4628      	mov	r0, r5
   15dda:	f00c fd62 	bl	228a2 <z_unpend_thread>
			z_ready_thread(receiving_thread);
   15dde:	4628      	mov	r0, r5
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15de0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   15de4:	f00c fd7d 	bl	228e2 <z_ready_thread>
			if ((sending_thread->base.thread_state & _THREAD_DUMMY)
   15de8:	f89b 200d 	ldrb.w	r2, [fp, #13]
   15dec:	9b03      	ldr	r3, [sp, #12]
   15dee:	f012 0f01 	tst.w	r2, #1
   15df2:	d007      	beq.n	15e04 <mbox_message_put+0x94>
				z_reschedule(&mbox->lock, key);
   15df4:	4651      	mov	r1, sl
   15df6:	4618      	mov	r0, r3
   15df8:	f000 fab8 	bl	1636c <z_reschedule>
	}
#endif

	/* synchronous send: sender waits on tx queue for receiver or timeout */
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
}
   15dfc:	4620      	mov	r0, r4
   15dfe:	b005      	add	sp, #20
   15e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return z_pend_curr(&mbox->lock, key, NULL, K_FOREVER);
   15e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15e0c:	4622      	mov	r2, r4
   15e0e:	e9cd 0100 	strd	r0, r1, [sp]
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   15e12:	4651      	mov	r1, sl
   15e14:	4618      	mov	r0, r3
   15e16:	f000 fcf1 	bl	167fc <z_pend_curr>
   15e1a:	4604      	mov	r4, r0
   15e1c:	e7ee      	b.n	15dfc <mbox_message_put+0x8c>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15e1e:	68f2      	ldr	r2, [r6, #12]
   15e20:	4295      	cmp	r5, r2
   15e22:	d0c2      	beq.n	15daa <mbox_message_put+0x3a>
   15e24:	682d      	ldr	r5, [r5, #0]
   15e26:	e7cd      	b.n	15dc4 <mbox_message_put+0x54>
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   15e28:	f89b 200d 	ldrb.w	r2, [fp, #13]
   15e2c:	07d2      	lsls	r2, r2, #31
   15e2e:	d50d      	bpl.n	15e4c <mbox_message_put+0xdc>
		z_pend_thread(sending_thread, &mbox->tx_msg_queue, K_FOREVER);
   15e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15e38:	4631      	mov	r1, r6
   15e3a:	4658      	mov	r0, fp
   15e3c:	f00c fdac 	bl	22998 <z_pend_thread>
   15e40:	f38a 8811 	msr	BASEPRI, sl
   15e44:	f3bf 8f6f 	isb	sy
		return 0;
   15e48:	2400      	movs	r4, #0
   15e4a:	e7d7      	b.n	15dfc <mbox_message_put+0x8c>
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   15e4c:	4632      	mov	r2, r6
   15e4e:	e9cd 8900 	strd	r8, r9, [sp]
   15e52:	e7de      	b.n	15e12 <mbox_message_put+0xa2>
   15e54:	20025eec 	.word	0x20025eec

00015e58 <mbox_message_dispose>:
	if (rx_msg->_syncing_thread == NULL) {
   15e58:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   15e5a:	b510      	push	{r4, lr}
	if (rx_msg->_syncing_thread == NULL) {
   15e5c:	b349      	cbz	r1, 15eb2 <mbox_message_dispose+0x5a>
	if (rx_msg->tx_block.data != NULL) {
   15e5e:	6942      	ldr	r2, [r0, #20]
   15e60:	2300      	movs	r3, #0
   15e62:	b102      	cbz	r2, 15e66 <mbox_message_dispose+0xe>
		rx_msg->tx_block.data = NULL;
   15e64:	6143      	str	r3, [r0, #20]
	rx_msg->_syncing_thread = NULL;
   15e66:	6243      	str	r3, [r0, #36]	; 0x24
	tx_msg = (struct k_mbox_msg *)sending_thread->base.swap_data;
   15e68:	694a      	ldr	r2, [r1, #20]
	tx_msg->size = rx_msg->size;
   15e6a:	6843      	ldr	r3, [r0, #4]
   15e6c:	6053      	str	r3, [r2, #4]
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   15e6e:	7b4b      	ldrb	r3, [r1, #13]
   15e70:	f013 0001 	ands.w	r0, r3, #1
   15e74:	d009      	beq.n	15e8a <mbox_message_dispose+0x32>
		struct k_sem *async_sem = tx_msg->_async_sem;
   15e76:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return z_impl_k_stack_push(stack, data);
   15e78:	480e      	ldr	r0, [pc, #56]	; (15eb4 <mbox_message_dispose+0x5c>)
   15e7a:	f00c fdd4 	bl	22a26 <z_impl_k_stack_push>
		if (async_sem != NULL) {
   15e7e:	b1c4      	cbz	r4, 15eb2 <mbox_message_dispose+0x5a>
	z_impl_k_sem_give(sem);
   15e80:	4620      	mov	r0, r4
}
   15e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15e86:	f000 bdcd 	b.w	16a24 <z_impl_k_sem_give>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   15e8a:	f023 0302 	bic.w	r3, r3, #2
   15e8e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   15e92:	734b      	strb	r3, [r1, #13]
	z_ready_thread(sending_thread);
   15e94:	4608      	mov	r0, r1
   15e96:	f00c fd24 	bl	228e2 <z_ready_thread>
	__asm__ volatile(
   15e9a:	f04f 0320 	mov.w	r3, #32
   15e9e:	f3ef 8011 	mrs	r0, BASEPRI
   15ea2:	f383 8811 	msr	BASEPRI, r3
   15ea6:	f3bf 8f6f 	isb	sy
}
   15eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   15eae:	f00c bcd6 	b.w	2285e <z_reschedule_irqlock>
   15eb2:	bd10      	pop	{r4, pc}
   15eb4:	20000658 	.word	0x20000658

00015eb8 <init_mbox_module>:
{
   15eb8:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   15eba:	2500      	movs	r5, #0
   15ebc:	4c09      	ldr	r4, [pc, #36]	; (15ee4 <init_mbox_module+0x2c>)
	return z_impl_k_stack_push(stack, data);
   15ebe:	4e0a      	ldr	r6, [pc, #40]	; (15ee8 <init_mbox_module+0x30>)
		z_init_thread_base(&async_msg[i].thread, 0, _THREAD_DUMMY, 0);
   15ec0:	2300      	movs	r3, #0
   15ec2:	2201      	movs	r2, #1
   15ec4:	4619      	mov	r1, r3
   15ec6:	4620      	mov	r0, r4
   15ec8:	f00c fdeb 	bl	22aa2 <z_init_thread_base>
   15ecc:	4621      	mov	r1, r4
   15ece:	4630      	mov	r0, r6
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   15ed0:	3501      	adds	r5, #1
   15ed2:	f00c fda8 	bl	22a26 <z_impl_k_stack_push>
   15ed6:	2d0a      	cmp	r5, #10
   15ed8:	f104 0468 	add.w	r4, r4, #104	; 0x68
   15edc:	d1f0      	bne.n	15ec0 <init_mbox_module+0x8>
}
   15ede:	2000      	movs	r0, #0
   15ee0:	bd70      	pop	{r4, r5, r6, pc}
   15ee2:	bf00      	nop
   15ee4:	2002cef8 	.word	0x2002cef8
   15ee8:	20000658 	.word	0x20000658

00015eec <k_mbox_async_put>:
}

#if (CONFIG_NUM_MBOX_ASYNC_MSGS > 0)
void k_mbox_async_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
		      struct k_sem *sem)
{
   15eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15ef0:	4680      	mov	r8, r0
   15ef2:	460c      	mov	r4, r1
   15ef4:	4691      	mov	r9, r2
   15ef6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15efa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	return z_impl_k_stack_pop(stack, data, timeout);
   15efe:	4811      	ldr	r0, [pc, #68]	; (15f44 <k_mbox_async_put+0x58>)
   15f00:	4632      	mov	r2, r6
   15f02:	463b      	mov	r3, r7
   15f04:	a901      	add	r1, sp, #4
   15f06:	f000 fddd 	bl	16ac4 <z_impl_k_stack_pop>
	 * allocate an asynchronous message descriptor, configure both parts,
	 * then send the message asynchronously
	 */
	mbox_async_alloc(&async);

	async->thread.prio = _current->base.prio;
   15f0a:	4b0f      	ldr	r3, [pc, #60]	; (15f48 <k_mbox_async_put+0x5c>)
   15f0c:	f8dd c004 	ldr.w	ip, [sp, #4]
   15f10:	689b      	ldr	r3, [r3, #8]

	async->tx_msg = *tx_msg;
   15f12:	f10c 0538 	add.w	r5, ip, #56	; 0x38
	async->thread.prio = _current->base.prio;
   15f16:	7b9b      	ldrb	r3, [r3, #14]
   15f18:	f88c 300e 	strb.w	r3, [ip, #14]
	async->tx_msg = *tx_msg;
   15f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	async->tx_msg._syncing_thread = (struct k_thread *)&async->thread;
	async->tx_msg._async_sem = sem;

	(void)mbox_message_put(mbox, &async->tx_msg, K_FOREVER);
   15f24:	463b      	mov	r3, r7
	async->tx_msg = *tx_msg;
   15f26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   15f2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	(void)mbox_message_put(mbox, &async->tx_msg, K_FOREVER);
   15f2e:	4632      	mov	r2, r6
   15f30:	4640      	mov	r0, r8
	async->tx_msg._async_sem = sem;
   15f32:	e9cc c917 	strd	ip, r9, [ip, #92]	; 0x5c
	(void)mbox_message_put(mbox, &async->tx_msg, K_FOREVER);
   15f36:	f10c 0138 	add.w	r1, ip, #56	; 0x38
   15f3a:	f7ff ff19 	bl	15d70 <mbox_message_put>
}
   15f3e:	b003      	add	sp, #12
   15f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15f44:	20000658 	.word	0x20000658
   15f48:	20025eec 	.word	0x20025eec

00015f4c <k_mbox_get>:
	struct k_mbox_msg *tx_msg;
	k_spinlock_key_t key;
	int result;

	/* save receiver id so it can be used during message matching */
	rx_msg->tx_target_thread = _current;
   15f4c:	4b2b      	ldr	r3, [pc, #172]	; (15ffc <k_mbox_get+0xb0>)
{
   15f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f52:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   15f56:	4690      	mov	r8, r2
	rx_msg->tx_target_thread = _current;
   15f58:	689a      	ldr	r2, [r3, #8]
{
   15f5a:	4681      	mov	r9, r0
   15f5c:	460d      	mov	r5, r1
	rx_msg->tx_target_thread = _current;
   15f5e:	620a      	str	r2, [r1, #32]
   15f60:	f04f 0220 	mov.w	r2, #32
   15f64:	f3ef 8a11 	mrs	sl, BASEPRI
   15f68:	f382 8811 	msr	BASEPRI, r2
   15f6c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   15f70:	6804      	ldr	r4, [r0, #0]
   15f72:	469b      	mov	fp, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f74:	42a0      	cmp	r0, r4
   15f76:	d109      	bne.n	15f8c <k_mbox_get+0x40>
		}
	}

	/* didn't find a matching sender */

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15f78:	ea56 0307 	orrs.w	r3, r6, r7
   15f7c:	d12f      	bne.n	15fde <k_mbox_get+0x92>
	__asm__ volatile(
   15f7e:	f38a 8811 	msr	BASEPRI, sl
   15f82:	f3bf 8f6f 	isb	sy
		/* don't wait for a matching sender to appear */
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   15f86:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   15f8a:	e018      	b.n	15fbe <k_mbox_get+0x72>
   15f8c:	2c00      	cmp	r4, #0
   15f8e:	bf38      	it	cc
   15f90:	2400      	movcc	r4, #0
	_WAIT_Q_FOR_EACH(&mbox->tx_msg_queue, sending_thread) {
   15f92:	2c00      	cmp	r4, #0
   15f94:	d0f0      	beq.n	15f78 <k_mbox_get+0x2c>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   15f96:	4629      	mov	r1, r5
   15f98:	6960      	ldr	r0, [r4, #20]
   15f9a:	f00c fb05 	bl	225a8 <mbox_message_match>
   15f9e:	b9c0      	cbnz	r0, 15fd2 <k_mbox_get+0x86>
			z_unpend_thread(sending_thread);
   15fa0:	4620      	mov	r0, r4
   15fa2:	f00c fc7e 	bl	228a2 <z_unpend_thread>
   15fa6:	f38a 8811 	msr	BASEPRI, sl
   15faa:	f3bf 8f6f 	isb	sy
	if (buffer != NULL) {
   15fae:	f1b8 0f00 	cmp.w	r8, #0
   15fb2:	d007      	beq.n	15fc4 <k_mbox_get+0x78>
		k_mbox_data_get(rx_msg, buffer);
   15fb4:	4641      	mov	r1, r8
   15fb6:	4628      	mov	r0, r5
   15fb8:	f00c fb26 	bl	22608 <k_mbox_data_get>
			return mbox_message_data_check(rx_msg, buffer);
   15fbc:	2000      	movs	r0, #0
	if (result == 0) {
		result = mbox_message_data_check(rx_msg, buffer);
	}

	return result;
}
   15fbe:	b003      	add	sp, #12
   15fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (rx_msg->size == 0) {
   15fc4:	686b      	ldr	r3, [r5, #4]
   15fc6:	2b00      	cmp	r3, #0
   15fc8:	d1f8      	bne.n	15fbc <k_mbox_get+0x70>
		mbox_message_dispose(rx_msg);
   15fca:	4628      	mov	r0, r5
   15fcc:	f7ff ff44 	bl	15e58 <mbox_message_dispose>
   15fd0:	e7f4      	b.n	15fbc <k_mbox_get+0x70>
	return (node == list->tail) ? NULL : node->next;
   15fd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   15fd6:	429c      	cmp	r4, r3
   15fd8:	d0ce      	beq.n	15f78 <k_mbox_get+0x2c>
   15fda:	6824      	ldr	r4, [r4, #0]
   15fdc:	e7d9      	b.n	15f92 <k_mbox_get+0x46>
	_current->base.swap_data = rx_msg;
   15fde:	f8db 3008 	ldr.w	r3, [fp, #8]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   15fe2:	4651      	mov	r1, sl
	_current->base.swap_data = rx_msg;
   15fe4:	615d      	str	r5, [r3, #20]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   15fe6:	f109 0208 	add.w	r2, r9, #8
   15fea:	e9cd 6700 	strd	r6, r7, [sp]
   15fee:	f109 0010 	add.w	r0, r9, #16
   15ff2:	f000 fc03 	bl	167fc <z_pend_curr>
	if (result == 0) {
   15ff6:	2800      	cmp	r0, #0
   15ff8:	d1e1      	bne.n	15fbe <k_mbox_get+0x72>
   15ffa:	e7d8      	b.n	15fae <k_mbox_get+0x62>
   15ffc:	20025eec 	.word	0x20025eec

00016000 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   16000:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16002:	4b0e      	ldr	r3, [pc, #56]	; (1603c <init_mem_slab_module+0x3c>)
   16004:	4c0e      	ldr	r4, [pc, #56]	; (16040 <init_mem_slab_module+0x40>)
   16006:	42a3      	cmp	r3, r4
   16008:	d301      	bcc.n	1600e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1600a:	2000      	movs	r0, #0
	return rc;
}
   1600c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1600e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   16012:	ea41 0200 	orr.w	r2, r1, r0
   16016:	f012 0203 	ands.w	r2, r2, #3
   1601a:	d10b      	bne.n	16034 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1601c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1601e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16020:	42aa      	cmp	r2, r5
   16022:	d101      	bne.n	16028 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16024:	331c      	adds	r3, #28
   16026:	e7ee      	b.n	16006 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   16028:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1602a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1602c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1602e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   16030:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   16032:	e7f5      	b.n	16020 <init_mem_slab_module+0x20>
		return -EINVAL;
   16034:	f06f 0015 	mvn.w	r0, #21
	return rc;
   16038:	e7e8      	b.n	1600c <init_mem_slab_module+0xc>
   1603a:	bf00      	nop
   1603c:	200005a0 	.word	0x200005a0
   16040:	200005f4 	.word	0x200005f4

00016044 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16044:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   16046:	460c      	mov	r4, r1
   16048:	4616      	mov	r6, r2
   1604a:	461f      	mov	r7, r3
	__asm__ volatile(
   1604c:	f04f 0320 	mov.w	r3, #32
   16050:	f3ef 8111 	mrs	r1, BASEPRI
   16054:	f383 8811 	msr	BASEPRI, r3
   16058:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1605c:	6943      	ldr	r3, [r0, #20]
   1605e:	b15b      	cbz	r3, 16078 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   16060:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   16062:	681b      	ldr	r3, [r3, #0]
   16064:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   16066:	6983      	ldr	r3, [r0, #24]
   16068:	3301      	adds	r3, #1
   1606a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1606c:	2000      	movs	r0, #0
	__asm__ volatile(
   1606e:	f381 8811 	msr	BASEPRI, r1
   16072:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   16076:	e011      	b.n	1609c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16078:	ea56 0207 	orrs.w	r2, r6, r7
   1607c:	d103      	bne.n	16086 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1607e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   16082:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   16084:	e7f3      	b.n	1606e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16086:	4602      	mov	r2, r0
   16088:	e9cd 6700 	strd	r6, r7, [sp]
   1608c:	4804      	ldr	r0, [pc, #16]	; (160a0 <k_mem_slab_alloc+0x5c>)
   1608e:	f000 fbb5 	bl	167fc <z_pend_curr>
		if (result == 0) {
   16092:	b918      	cbnz	r0, 1609c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   16094:	4b03      	ldr	r3, [pc, #12]	; (160a4 <k_mem_slab_alloc+0x60>)
   16096:	689b      	ldr	r3, [r3, #8]
   16098:	695b      	ldr	r3, [r3, #20]
   1609a:	6023      	str	r3, [r4, #0]
}
   1609c:	b002      	add	sp, #8
   1609e:	bdd0      	pop	{r4, r6, r7, pc}
   160a0:	2002a187 	.word	0x2002a187
   160a4:	20025eec 	.word	0x20025eec

000160a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160aa:	4604      	mov	r4, r0
   160ac:	460d      	mov	r5, r1
	__asm__ volatile(
   160ae:	f04f 0320 	mov.w	r3, #32
   160b2:	f3ef 8611 	mrs	r6, BASEPRI
   160b6:	f383 8811 	msr	BASEPRI, r3
   160ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   160be:	6947      	ldr	r7, [r0, #20]
   160c0:	b977      	cbnz	r7, 160e0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   160c2:	f00c fc6b 	bl	2299c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   160c6:	b158      	cbz	r0, 160e0 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   160c8:	682a      	ldr	r2, [r5, #0]
   160ca:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   160ce:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   160d0:	f00c fc07 	bl	228e2 <z_ready_thread>
			z_reschedule(&lock, key);
   160d4:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   160d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   160da:	4808      	ldr	r0, [pc, #32]	; (160fc <k_mem_slab_free+0x54>)
   160dc:	f000 b946 	b.w	1636c <z_reschedule>
	**(char ***) mem = slab->free_list;
   160e0:	682b      	ldr	r3, [r5, #0]
   160e2:	6962      	ldr	r2, [r4, #20]
   160e4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   160e6:	682b      	ldr	r3, [r5, #0]
   160e8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   160ea:	69a3      	ldr	r3, [r4, #24]
   160ec:	3b01      	subs	r3, #1
   160ee:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   160f0:	f386 8811 	msr	BASEPRI, r6
   160f4:	f3bf 8f6f 	isb	sy
}
   160f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160fa:	bf00      	nop
   160fc:	2002a187 	.word	0x2002a187

00016100 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   16100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16104:	4604      	mov	r4, r0
   16106:	4616      	mov	r6, r2
   16108:	461f      	mov	r7, r3
	__asm__ volatile(
   1610a:	f04f 0320 	mov.w	r3, #32
   1610e:	f3ef 8811 	mrs	r8, BASEPRI
   16112:	f383 8811 	msr	BASEPRI, r3
   16116:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1611a:	68c3      	ldr	r3, [r0, #12]
   1611c:	4a32      	ldr	r2, [pc, #200]	; (161e8 <z_impl_k_mutex_lock+0xe8>)
   1611e:	b16b      	cbz	r3, 1613c <z_impl_k_mutex_lock+0x3c>
   16120:	6880      	ldr	r0, [r0, #8]
   16122:	6891      	ldr	r1, [r2, #8]
   16124:	4288      	cmp	r0, r1
   16126:	d019      	beq.n	1615c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16128:	ea56 0307 	orrs.w	r3, r6, r7
   1612c:	d118      	bne.n	16160 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1612e:	f388 8811 	msr	BASEPRI, r8
   16132:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   16136:	f06f 000f 	mvn.w	r0, #15
   1613a:	e00c      	b.n	16156 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1613c:	6891      	ldr	r1, [r2, #8]
   1613e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   16142:	3301      	adds	r3, #1
   16144:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   16146:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16148:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1614a:	60a3      	str	r3, [r4, #8]
   1614c:	f388 8811 	msr	BASEPRI, r8
   16150:	f3bf 8f6f 	isb	sy
		return 0;
   16154:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   16156:	b002      	add	sp, #8
   16158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1615c:	6921      	ldr	r1, [r4, #16]
   1615e:	e7f0      	b.n	16142 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16160:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16164:	f991 100e 	ldrsb.w	r1, [r1, #14]
   16168:	4299      	cmp	r1, r3
   1616a:	bfa8      	it	ge
   1616c:	4619      	movge	r1, r3
   1616e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16172:	428b      	cmp	r3, r1
   16174:	dd2c      	ble.n	161d0 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   16176:	f000 fb8f 	bl	16898 <z_set_prio>
   1617a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1617c:	4622      	mov	r2, r4
   1617e:	4641      	mov	r1, r8
   16180:	e9cd 6700 	strd	r6, r7, [sp]
   16184:	4819      	ldr	r0, [pc, #100]	; (161ec <z_impl_k_mutex_lock+0xec>)
   16186:	f000 fb39 	bl	167fc <z_pend_curr>
	if (got_mutex == 0) {
   1618a:	2800      	cmp	r0, #0
   1618c:	d0e3      	beq.n	16156 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1618e:	f04f 0320 	mov.w	r3, #32
   16192:	f3ef 8611 	mrs	r6, BASEPRI
   16196:	f383 8811 	msr	BASEPRI, r3
   1619a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1619e:	6823      	ldr	r3, [r4, #0]
   161a0:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   161a2:	42a3      	cmp	r3, r4
   161a4:	d007      	beq.n	161b6 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   161a6:	b133      	cbz	r3, 161b6 <z_impl_k_mutex_lock+0xb6>
   161a8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   161ac:	4299      	cmp	r1, r3
   161ae:	bfa8      	it	ge
   161b0:	4619      	movge	r1, r3
   161b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   161b6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   161b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   161bc:	4299      	cmp	r1, r3
   161be:	d109      	bne.n	161d4 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   161c0:	b16d      	cbz	r5, 161de <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   161c2:	4631      	mov	r1, r6
   161c4:	4809      	ldr	r0, [pc, #36]	; (161ec <z_impl_k_mutex_lock+0xec>)
   161c6:	f000 f8d1 	bl	1636c <z_reschedule>
	return -EAGAIN;
   161ca:	f06f 000a 	mvn.w	r0, #10
   161ce:	e7c2      	b.n	16156 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   161d0:	2500      	movs	r5, #0
   161d2:	e7d3      	b.n	1617c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   161d4:	f000 fb60 	bl	16898 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   161d8:	2800      	cmp	r0, #0
   161da:	d1f2      	bne.n	161c2 <z_impl_k_mutex_lock+0xc2>
   161dc:	e7f0      	b.n	161c0 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   161de:	f386 8811 	msr	BASEPRI, r6
   161e2:	f3bf 8f6f 	isb	sy
   161e6:	e7f0      	b.n	161ca <z_impl_k_mutex_lock+0xca>
   161e8:	20025eec 	.word	0x20025eec
   161ec:	2002a187 	.word	0x2002a187

000161f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   161f0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   161f2:	6883      	ldr	r3, [r0, #8]
{
   161f4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   161f6:	2b00      	cmp	r3, #0
   161f8:	d037      	beq.n	1626a <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   161fa:	4a1f      	ldr	r2, [pc, #124]	; (16278 <z_impl_k_mutex_unlock+0x88>)
   161fc:	6892      	ldr	r2, [r2, #8]
   161fe:	4293      	cmp	r3, r2
   16200:	d136      	bne.n	16270 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   16202:	7bda      	ldrb	r2, [r3, #15]
   16204:	3a01      	subs	r2, #1
   16206:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   16208:	68c3      	ldr	r3, [r0, #12]
   1620a:	2b01      	cmp	r3, #1
   1620c:	d005      	beq.n	1621a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1620e:	3b01      	subs	r3, #1
   16210:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   16212:	f000 f90f 	bl	16434 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   16216:	2000      	movs	r0, #0
}
   16218:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1621a:	f04f 0320 	mov.w	r3, #32
   1621e:	f3ef 8511 	mrs	r5, BASEPRI
   16222:	f383 8811 	msr	BASEPRI, r3
   16226:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1622a:	6901      	ldr	r1, [r0, #16]
   1622c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1622e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16232:	4299      	cmp	r1, r3
   16234:	d001      	beq.n	1623a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   16236:	f000 fb2f 	bl	16898 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1623a:	4620      	mov	r0, r4
   1623c:	f00c fbae 	bl	2299c <z_unpend_first_thread>
	mutex->owner = new_owner;
   16240:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16242:	b160      	cbz	r0, 1625e <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   16244:	f990 200e 	ldrsb.w	r2, [r0, #14]
   16248:	6122      	str	r2, [r4, #16]
   1624a:	2200      	movs	r2, #0
   1624c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   16250:	f00c fb47 	bl	228e2 <z_ready_thread>
		z_reschedule(&lock, key);
   16254:	4629      	mov	r1, r5
   16256:	4809      	ldr	r0, [pc, #36]	; (1627c <z_impl_k_mutex_unlock+0x8c>)
   16258:	f000 f888 	bl	1636c <z_reschedule>
   1625c:	e7d9      	b.n	16212 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1625e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   16260:	f385 8811 	msr	BASEPRI, r5
   16264:	f3bf 8f6f 	isb	sy
   16268:	e7d3      	b.n	16212 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1626a:	f06f 0015 	mvn.w	r0, #21
   1626e:	e7d3      	b.n	16218 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   16270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16274:	e7d0      	b.n	16218 <z_impl_k_mutex_unlock+0x28>
   16276:	bf00      	nop
   16278:	20025eec 	.word	0x20025eec
   1627c:	2002a187 	.word	0x2002a187

00016280 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16282:	4616      	mov	r6, r2
   16284:	461f      	mov	r7, r3
	__asm__ volatile(
   16286:	f04f 0320 	mov.w	r3, #32
   1628a:	f3ef 8511 	mrs	r5, BASEPRI
   1628e:	f383 8811 	msr	BASEPRI, r3
   16292:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   16296:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16298:	b19c      	cbz	r4, 162c2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1629a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1629c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1629e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   162a2:	4294      	cmp	r4, r2
	list->head = node;
   162a4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   162a6:	bf08      	it	eq
   162a8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   162aa:	2101      	movs	r1, #1
   162ac:	4620      	mov	r0, r4
   162ae:	f00c fa44 	bl	2273a <z_queue_node_peek>
   162b2:	4604      	mov	r4, r0
	__asm__ volatile(
   162b4:	f385 8811 	msr	BASEPRI, r5
   162b8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   162bc:	4620      	mov	r0, r4
   162be:	b003      	add	sp, #12
   162c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   162c2:	ea56 0307 	orrs.w	r3, r6, r7
   162c6:	d0f5      	beq.n	162b4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   162c8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   162cc:	4629      	mov	r1, r5
   162ce:	4610      	mov	r0, r2
   162d0:	e9cd 6700 	strd	r6, r7, [sp]
   162d4:	f000 fa92 	bl	167fc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   162d8:	2800      	cmp	r0, #0
   162da:	d1ef      	bne.n	162bc <z_impl_k_queue_get+0x3c>
   162dc:	4b01      	ldr	r3, [pc, #4]	; (162e4 <z_impl_k_queue_get+0x64>)
   162de:	689b      	ldr	r3, [r3, #8]
   162e0:	695c      	ldr	r4, [r3, #20]
   162e2:	e7eb      	b.n	162bc <z_impl_k_queue_get+0x3c>
   162e4:	20025eec 	.word	0x20025eec

000162e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   162e8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   162ea:	4c08      	ldr	r4, [pc, #32]	; (1630c <z_reset_time_slice+0x24>)
   162ec:	6823      	ldr	r3, [r4, #0]
   162ee:	b15b      	cbz	r3, 16308 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   162f0:	f7ed fb8a 	bl	3a08 <z_clock_elapsed>
   162f4:	4603      	mov	r3, r0
   162f6:	6820      	ldr	r0, [r4, #0]
   162f8:	4a05      	ldr	r2, [pc, #20]	; (16310 <z_reset_time_slice+0x28>)
   162fa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   162fc:	2100      	movs	r1, #0
	}
}
   162fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16302:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   16304:	f00c bc69 	b.w	22bda <z_set_timeout_expiry>
}
   16308:	bd10      	pop	{r4, pc}
   1630a:	bf00      	nop
   1630c:	20025f28 	.word	0x20025f28
   16310:	20025eec 	.word	0x20025eec

00016314 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   16314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16316:	4605      	mov	r5, r0
   16318:	460c      	mov	r4, r1
	__asm__ volatile(
   1631a:	f04f 0320 	mov.w	r3, #32
   1631e:	f3ef 8611 	mrs	r6, BASEPRI
   16322:	f383 8811 	msr	BASEPRI, r3
   16326:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1632a:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1632c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   16330:	f240 30e7 	movw	r0, #999	; 0x3e7
   16334:	2100      	movs	r1, #0
   16336:	4b0a      	ldr	r3, [pc, #40]	; (16360 <k_sched_time_slice_set+0x4c>)
   16338:	fbe7 0105 	umlal	r0, r1, r7, r5
   1633c:	615a      	str	r2, [r3, #20]
   1633e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16342:	2300      	movs	r3, #0
   16344:	f7ea f986 	bl	654 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   16348:	4b06      	ldr	r3, [pc, #24]	; (16364 <k_sched_time_slice_set+0x50>)
   1634a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1634c:	4b06      	ldr	r3, [pc, #24]	; (16368 <k_sched_time_slice_set+0x54>)
   1634e:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   16350:	f7ff ffca 	bl	162e8 <z_reset_time_slice>
	__asm__ volatile(
   16354:	f386 8811 	msr	BASEPRI, r6
   16358:	f3bf 8f6f 	isb	sy
	}
}
   1635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1635e:	bf00      	nop
   16360:	20025eec 	.word	0x20025eec
   16364:	20025f28 	.word	0x20025f28
   16368:	20025f24 	.word	0x20025f24

0001636c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1636c:	b949      	cbnz	r1, 16382 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1636e:	f3ef 8005 	mrs	r0, IPSR
   16372:	b930      	cbnz	r0, 16382 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   16374:	4b05      	ldr	r3, [pc, #20]	; (1638c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   16376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16378:	689b      	ldr	r3, [r3, #8]
   1637a:	429a      	cmp	r2, r3
   1637c:	d001      	beq.n	16382 <z_reschedule+0x16>
	ret = arch_swap(key);
   1637e:	f7ed be23 	b.w	3fc8 <arch_swap>
   16382:	f381 8811 	msr	BASEPRI, r1
   16386:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1638a:	4770      	bx	lr
   1638c:	20025eec 	.word	0x20025eec

00016390 <k_sched_lock>:
	__asm__ volatile(
   16390:	f04f 0320 	mov.w	r3, #32
   16394:	f3ef 8111 	mrs	r1, BASEPRI
   16398:	f383 8811 	msr	BASEPRI, r3
   1639c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   163a0:	4b04      	ldr	r3, [pc, #16]	; (163b4 <k_sched_lock+0x24>)
   163a2:	689a      	ldr	r2, [r3, #8]
   163a4:	7bd3      	ldrb	r3, [r2, #15]
   163a6:	3b01      	subs	r3, #1
   163a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   163aa:	f381 8811 	msr	BASEPRI, r1
   163ae:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   163b2:	4770      	bx	lr
   163b4:	20025eec 	.word	0x20025eec

000163b8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   163b8:	4b09      	ldr	r3, [pc, #36]	; (163e0 <z_priq_dumb_remove+0x28>)
   163ba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   163be:	4282      	cmp	r2, r0
   163c0:	d105      	bne.n	163ce <z_priq_dumb_remove+0x16>
   163c2:	689b      	ldr	r3, [r3, #8]
   163c4:	428b      	cmp	r3, r1
   163c6:	d102      	bne.n	163ce <z_priq_dumb_remove+0x16>
   163c8:	7b4b      	ldrb	r3, [r1, #13]
   163ca:	06db      	lsls	r3, r3, #27
   163cc:	d106      	bne.n	163dc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   163ce:	e9d1 3200 	ldrd	r3, r2, [r1]
   163d2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   163d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   163d6:	2300      	movs	r3, #0
	node->prev = NULL;
   163d8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   163dc:	4770      	bx	lr
   163de:	bf00      	nop
   163e0:	20025eec 	.word	0x20025eec

000163e4 <update_cache>:
{
   163e4:	b538      	push	{r3, r4, r5, lr}
   163e6:	4c12      	ldr	r4, [pc, #72]	; (16430 <update_cache+0x4c>)
   163e8:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   163ea:	6923      	ldr	r3, [r4, #16]
   163ec:	68a2      	ldr	r2, [r4, #8]
   163ee:	b10b      	cbz	r3, 163f4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   163f0:	68e5      	ldr	r5, [r4, #12]
   163f2:	e00c      	b.n	1640e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   163f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   163f8:	f00c fa69 	bl	228ce <z_priq_dumb_best>
   163fc:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   163fe:	7b53      	ldrb	r3, [r2, #13]
   16400:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   16402:	bf44      	itt	mi
   16404:	f043 0308 	orrmi.w	r3, r3, #8
   16408:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1640a:	2d00      	cmp	r5, #0
   1640c:	d0f0      	beq.n	163f0 <update_cache+0xc>
	if (preempt_ok != 0) {
   1640e:	b949      	cbnz	r1, 16424 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   16410:	7b53      	ldrb	r3, [r2, #13]
   16412:	06db      	lsls	r3, r3, #27
   16414:	d106      	bne.n	16424 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16416:	69ab      	ldr	r3, [r5, #24]
   16418:	b923      	cbnz	r3, 16424 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1641a:	89d3      	ldrh	r3, [r2, #14]
   1641c:	2b7f      	cmp	r3, #127	; 0x7f
   1641e:	d901      	bls.n	16424 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   16420:	62a2      	str	r2, [r4, #40]	; 0x28
}
   16422:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   16424:	4295      	cmp	r5, r2
   16426:	d001      	beq.n	1642c <update_cache+0x48>
			z_reset_time_slice();
   16428:	f7ff ff5e 	bl	162e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1642c:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1642e:	e7f8      	b.n	16422 <update_cache+0x3e>
   16430:	20025eec 	.word	0x20025eec

00016434 <k_sched_unlock>:
{
   16434:	b510      	push	{r4, lr}
	__asm__ volatile(
   16436:	f04f 0320 	mov.w	r3, #32
   1643a:	f3ef 8411 	mrs	r4, BASEPRI
   1643e:	f383 8811 	msr	BASEPRI, r3
   16442:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   16446:	4b08      	ldr	r3, [pc, #32]	; (16468 <k_sched_unlock+0x34>)
		update_cache(0);
   16448:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1644a:	689a      	ldr	r2, [r3, #8]
   1644c:	7bd3      	ldrb	r3, [r2, #15]
   1644e:	3301      	adds	r3, #1
   16450:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16452:	f7ff ffc7 	bl	163e4 <update_cache>
	__asm__ volatile(
   16456:	f384 8811 	msr	BASEPRI, r4
   1645a:	f3bf 8f6f 	isb	sy
}
   1645e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16462:	f00c ba08 	b.w	22876 <z_reschedule_unlocked>
   16466:	bf00      	nop
   16468:	20025eec 	.word	0x20025eec

0001646c <ready_thread>:
{
   1646c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1646e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16472:	7b43      	ldrb	r3, [r0, #13]
   16474:	2a00      	cmp	r2, #0
   16476:	db2c      	blt.n	164d2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16478:	06db      	lsls	r3, r3, #27
   1647a:	d12a      	bne.n	164d2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1647c:	6983      	ldr	r3, [r0, #24]
   1647e:	bb43      	cbnz	r3, 164d2 <ready_thread+0x66>
	return list->head == list;
   16480:	4a15      	ldr	r2, [pc, #84]	; (164d8 <ready_thread+0x6c>)
   16482:	4611      	mov	r1, r2
   16484:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16488:	428c      	cmp	r4, r1
   1648a:	bf18      	it	ne
   1648c:	4623      	movne	r3, r4
   1648e:	2b00      	cmp	r3, #0
   16490:	bf38      	it	cc
   16492:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16494:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16496:	b1b3      	cbz	r3, 164c6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   16498:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1649c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   164a0:	42ae      	cmp	r6, r5
   164a2:	db03      	blt.n	164ac <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   164a4:	42a3      	cmp	r3, r4
   164a6:	d00e      	beq.n	164c6 <ready_thread+0x5a>
   164a8:	681b      	ldr	r3, [r3, #0]
   164aa:	e7f4      	b.n	16496 <ready_thread+0x2a>
	node->prev = successor->prev;
   164ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   164ae:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   164b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   164b4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   164b6:	7b43      	ldrb	r3, [r0, #13]
   164b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   164bc:	7343      	strb	r3, [r0, #13]
}
   164be:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   164c0:	2000      	movs	r0, #0
   164c2:	f7ff bf8f 	b.w	163e4 <update_cache>
	node->prev = list->tail;
   164c6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   164ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   164cc:	6018      	str	r0, [r3, #0]
	list->tail = node;
   164ce:	6310      	str	r0, [r2, #48]	; 0x30
}
   164d0:	e7f1      	b.n	164b6 <ready_thread+0x4a>
}
   164d2:	bc70      	pop	{r4, r5, r6}
   164d4:	4770      	bx	lr
   164d6:	bf00      	nop
   164d8:	20025eec 	.word	0x20025eec

000164dc <z_sched_start>:
{
   164dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   164de:	f04f 0220 	mov.w	r2, #32
   164e2:	f3ef 8411 	mrs	r4, BASEPRI
   164e6:	f382 8811 	msr	BASEPRI, r2
   164ea:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   164ee:	7b42      	ldrb	r2, [r0, #13]
   164f0:	0751      	lsls	r1, r2, #29
   164f2:	d404      	bmi.n	164fe <z_sched_start+0x22>
	__asm__ volatile(
   164f4:	f384 8811 	msr	BASEPRI, r4
   164f8:	f3bf 8f6f 	isb	sy
}
   164fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   164fe:	f022 0204 	bic.w	r2, r2, #4
   16502:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   16504:	f7ff ffb2 	bl	1646c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16508:	4621      	mov	r1, r4
}
   1650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1650e:	4801      	ldr	r0, [pc, #4]	; (16514 <z_sched_start+0x38>)
   16510:	f7ff bf2c 	b.w	1636c <z_reschedule>
   16514:	2002a187 	.word	0x2002a187

00016518 <move_thread_to_end_of_prio_q>:
{
   16518:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1651a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1651e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   16520:	2b00      	cmp	r3, #0
   16522:	da02      	bge.n	1652a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   16524:	4817      	ldr	r0, [pc, #92]	; (16584 <move_thread_to_end_of_prio_q+0x6c>)
   16526:	f7ff ff47 	bl	163b8 <z_priq_dumb_remove>
	return list->head == list;
   1652a:	4a17      	ldr	r2, [pc, #92]	; (16588 <move_thread_to_end_of_prio_q+0x70>)
   1652c:	4610      	mov	r0, r2
   1652e:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16532:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16534:	4283      	cmp	r3, r0
   16536:	bf08      	it	eq
   16538:	2300      	moveq	r3, #0
   1653a:	2b00      	cmp	r3, #0
   1653c:	bf38      	it	cc
   1653e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16540:	b1d3      	cbz	r3, 16578 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   16542:	f991 600e 	ldrsb.w	r6, [r1, #14]
   16546:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1654a:	42ae      	cmp	r6, r5
   1654c:	db03      	blt.n	16556 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1654e:	42a3      	cmp	r3, r4
   16550:	d012      	beq.n	16578 <move_thread_to_end_of_prio_q+0x60>
   16552:	681b      	ldr	r3, [r3, #0]
   16554:	e7f4      	b.n	16540 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   16556:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   16558:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1655c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1655e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   16560:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   16562:	6890      	ldr	r0, [r2, #8]
   16564:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16568:	734b      	strb	r3, [r1, #13]
   1656a:	1a43      	subs	r3, r0, r1
   1656c:	4258      	negs	r0, r3
   1656e:	4158      	adcs	r0, r3
}
   16570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   16574:	f7ff bf36 	b.w	163e4 <update_cache>
	node->prev = list->tail;
   16578:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1657c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1657e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   16580:	6311      	str	r1, [r2, #48]	; 0x30
}
   16582:	e7ed      	b.n	16560 <move_thread_to_end_of_prio_q+0x48>
   16584:	20025f18 	.word	0x20025f18
   16588:	20025eec 	.word	0x20025eec

0001658c <z_time_slice>:
{
   1658c:	4601      	mov	r1, r0
   1658e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   16590:	f04f 0320 	mov.w	r3, #32
   16594:	f3ef 8411 	mrs	r4, BASEPRI
   16598:	f383 8811 	msr	BASEPRI, r3
   1659c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   165a0:	4b16      	ldr	r3, [pc, #88]	; (165fc <z_time_slice+0x70>)
   165a2:	4a17      	ldr	r2, [pc, #92]	; (16600 <z_time_slice+0x74>)
   165a4:	6898      	ldr	r0, [r3, #8]
   165a6:	6815      	ldr	r5, [r2, #0]
   165a8:	42a8      	cmp	r0, r5
   165aa:	461d      	mov	r5, r3
   165ac:	d106      	bne.n	165bc <z_time_slice+0x30>
			z_reset_time_slice();
   165ae:	f7ff fe9b 	bl	162e8 <z_reset_time_slice>
	__asm__ volatile(
   165b2:	f384 8811 	msr	BASEPRI, r4
   165b6:	f3bf 8f6f 	isb	sy
}
   165ba:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   165bc:	2600      	movs	r6, #0
   165be:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   165c0:	4a10      	ldr	r2, [pc, #64]	; (16604 <z_time_slice+0x78>)
   165c2:	6812      	ldr	r2, [r2, #0]
   165c4:	b1ba      	cbz	r2, 165f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   165c6:	89c2      	ldrh	r2, [r0, #14]
   165c8:	2a7f      	cmp	r2, #127	; 0x7f
   165ca:	d814      	bhi.n	165f6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   165cc:	7b42      	ldrb	r2, [r0, #13]
   165ce:	06d2      	lsls	r2, r2, #27
   165d0:	d111      	bne.n	165f6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   165d2:	4a0d      	ldr	r2, [pc, #52]	; (16608 <z_time_slice+0x7c>)
   165d4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   165d8:	6812      	ldr	r2, [r2, #0]
   165da:	4296      	cmp	r6, r2
   165dc:	db0b      	blt.n	165f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   165de:	4a0b      	ldr	r2, [pc, #44]	; (1660c <z_time_slice+0x80>)
   165e0:	4290      	cmp	r0, r2
   165e2:	d008      	beq.n	165f6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   165e4:	695a      	ldr	r2, [r3, #20]
   165e6:	428a      	cmp	r2, r1
   165e8:	dc02      	bgt.n	165f0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   165ea:	f7ff ff95 	bl	16518 <move_thread_to_end_of_prio_q>
   165ee:	e7de      	b.n	165ae <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   165f0:	1a52      	subs	r2, r2, r1
   165f2:	615a      	str	r2, [r3, #20]
   165f4:	e7dd      	b.n	165b2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   165f6:	2300      	movs	r3, #0
   165f8:	616b      	str	r3, [r5, #20]
   165fa:	e7da      	b.n	165b2 <z_time_slice+0x26>
   165fc:	20025eec 	.word	0x20025eec
   16600:	20025f20 	.word	0x20025f20
   16604:	20025f28 	.word	0x20025f28
   16608:	20025f24 	.word	0x20025f24
   1660c:	20000fe8 	.word	0x20000fe8

00016610 <z_impl_k_thread_suspend>:
{
   16610:	b570      	push	{r4, r5, r6, lr}
   16612:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16614:	3018      	adds	r0, #24
   16616:	f00c faba 	bl	22b8e <z_abort_timeout>
	__asm__ volatile(
   1661a:	f04f 0320 	mov.w	r3, #32
   1661e:	f3ef 8611 	mrs	r6, BASEPRI
   16622:	f383 8811 	msr	BASEPRI, r3
   16626:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1662a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1662e:	2b00      	cmp	r3, #0
   16630:	da07      	bge.n	16642 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16632:	4621      	mov	r1, r4
   16634:	480e      	ldr	r0, [pc, #56]	; (16670 <z_impl_k_thread_suspend+0x60>)
   16636:	f7ff febf 	bl	163b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1663a:	7b63      	ldrb	r3, [r4, #13]
   1663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16640:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16642:	4d0c      	ldr	r5, [pc, #48]	; (16674 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16644:	7b63      	ldrb	r3, [r4, #13]
   16646:	68a8      	ldr	r0, [r5, #8]
   16648:	f043 0310 	orr.w	r3, r3, #16
   1664c:	7363      	strb	r3, [r4, #13]
   1664e:	1b03      	subs	r3, r0, r4
   16650:	4258      	negs	r0, r3
   16652:	4158      	adcs	r0, r3
   16654:	f7ff fec6 	bl	163e4 <update_cache>
	__asm__ volatile(
   16658:	f386 8811 	msr	BASEPRI, r6
   1665c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   16660:	68ab      	ldr	r3, [r5, #8]
   16662:	42a3      	cmp	r3, r4
   16664:	d103      	bne.n	1666e <z_impl_k_thread_suspend+0x5e>
}
   16666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1666a:	f00c b904 	b.w	22876 <z_reschedule_unlocked>
}
   1666e:	bd70      	pop	{r4, r5, r6, pc}
   16670:	20025f18 	.word	0x20025f18
   16674:	20025eec 	.word	0x20025eec

00016678 <z_thread_single_abort>:
{
   16678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1667c:	4604      	mov	r4, r0
	__asm__ volatile(
   1667e:	f04f 0320 	mov.w	r3, #32
   16682:	f3ef 8211 	mrs	r2, BASEPRI
   16686:	f383 8811 	msr	BASEPRI, r3
   1668a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1668e:	7b43      	ldrb	r3, [r0, #13]
   16690:	f013 0f28 	tst.w	r3, #40	; 0x28
   16694:	d005      	beq.n	166a2 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   16696:	f382 8811 	msr	BASEPRI, r2
   1669a:	f3bf 8f6f 	isb	sy
}
   1669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   166a2:	f043 0320 	orr.w	r3, r3, #32
   166a6:	7343      	strb	r3, [r0, #13]
   166a8:	f382 8811 	msr	BASEPRI, r2
   166ac:	f3bf 8f6f 	isb	sy
   166b0:	3018      	adds	r0, #24
   166b2:	f00c fa6c 	bl	22b8e <z_abort_timeout>
	__asm__ volatile(
   166b6:	f04f 0320 	mov.w	r3, #32
   166ba:	f3ef 8611 	mrs	r6, BASEPRI
   166be:	f383 8811 	msr	BASEPRI, r3
   166c2:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   166c6:	7b63      	ldrb	r3, [r4, #13]
   166c8:	06d8      	lsls	r0, r3, #27
   166ca:	d116      	bne.n	166fa <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   166cc:	69a2      	ldr	r2, [r4, #24]
   166ce:	b9a2      	cbnz	r2, 166fa <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   166d0:	0619      	lsls	r1, r3, #24
   166d2:	d507      	bpl.n	166e4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   166d4:	4621      	mov	r1, r4
   166d6:	4826      	ldr	r0, [pc, #152]	; (16770 <z_thread_single_abort+0xf8>)
   166d8:	f7ff fe6e 	bl	163b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   166dc:	7b63      	ldrb	r3, [r4, #13]
   166de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   166e2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   166e4:	4b23      	ldr	r3, [pc, #140]	; (16774 <z_thread_single_abort+0xfc>)
   166e6:	6898      	ldr	r0, [r3, #8]
   166e8:	1b02      	subs	r2, r0, r4
   166ea:	4250      	negs	r0, r2
   166ec:	4150      	adcs	r0, r2
   166ee:	f7ff fe79 	bl	163e4 <update_cache>
			waiter->base.pended_on = NULL;
   166f2:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   166f4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   166f8:	e01e      	b.n	16738 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   166fa:	079b      	lsls	r3, r3, #30
   166fc:	d5f9      	bpl.n	166f2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   166fe:	4621      	mov	r1, r4
   16700:	68a0      	ldr	r0, [r4, #8]
   16702:	f7ff fe59 	bl	163b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16706:	7b63      	ldrb	r3, [r4, #13]
   16708:	f023 0302 	bic.w	r3, r3, #2
   1670c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1670e:	2300      	movs	r3, #0
   16710:	60a3      	str	r3, [r4, #8]
   16712:	e7ee      	b.n	166f2 <z_thread_single_abort+0x7a>
   16714:	f105 0018 	add.w	r0, r5, #24
   16718:	f00c fa39 	bl	22b8e <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1671c:	68a8      	ldr	r0, [r5, #8]
   1671e:	4629      	mov	r1, r5
   16720:	f7ff fe4a 	bl	163b8 <z_priq_dumb_remove>
   16724:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   16726:	4628      	mov	r0, r5
   16728:	f023 0302 	bic.w	r3, r3, #2
   1672c:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1672e:	60af      	str	r7, [r5, #8]
   16730:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   16734:	f7ff fe9a 	bl	1646c <ready_thread>
	return list->head == list;
   16738:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1673a:	4545      	cmp	r5, r8
   1673c:	d001      	beq.n	16742 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1673e:	2d00      	cmp	r5, #0
   16740:	d1e8      	bne.n	16714 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   16742:	4b0c      	ldr	r3, [pc, #48]	; (16774 <z_thread_single_abort+0xfc>)
   16744:	689a      	ldr	r2, [r3, #8]
   16746:	4b0c      	ldr	r3, [pc, #48]	; (16778 <z_thread_single_abort+0x100>)
   16748:	429a      	cmp	r2, r3
   1674a:	d102      	bne.n	16752 <z_thread_single_abort+0xda>
			update_cache(1);
   1674c:	2001      	movs	r0, #1
   1674e:	f7ff fe49 	bl	163e4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   16752:	7b63      	ldrb	r3, [r4, #13]
   16754:	f043 0308 	orr.w	r3, r3, #8
   16758:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1675a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1675c:	f386 8811 	msr	BASEPRI, r6
   16760:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   16764:	2b00      	cmp	r3, #0
   16766:	d09a      	beq.n	1669e <z_thread_single_abort+0x26>
		fn_abort(thread);
   16768:	4620      	mov	r0, r4
}
   1676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1676e:	4718      	bx	r3
   16770:	20025f18 	.word	0x20025f18
   16774:	20025eec 	.word	0x20025eec
   16778:	20000fe8 	.word	0x20000fe8

0001677c <unready_thread>:
{
   1677c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1677e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   16782:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   16784:	2b00      	cmp	r3, #0
   16786:	da06      	bge.n	16796 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   16788:	4807      	ldr	r0, [pc, #28]	; (167a8 <unready_thread+0x2c>)
   1678a:	f7ff fe15 	bl	163b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1678e:	7b4b      	ldrb	r3, [r1, #13]
   16790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16794:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   16796:	4b05      	ldr	r3, [pc, #20]	; (167ac <unready_thread+0x30>)
   16798:	6898      	ldr	r0, [r3, #8]
   1679a:	1a43      	subs	r3, r0, r1
   1679c:	4258      	negs	r0, r3
   1679e:	4158      	adcs	r0, r3
}
   167a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   167a4:	f7ff be1e 	b.w	163e4 <update_cache>
   167a8:	20025f18 	.word	0x20025f18
   167ac:	20025eec 	.word	0x20025eec

000167b0 <pend>:
{
   167b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167b4:	4606      	mov	r6, r0
   167b6:	4614      	mov	r4, r2
   167b8:	461d      	mov	r5, r3
	__asm__ volatile(
   167ba:	f04f 0320 	mov.w	r3, #32
   167be:	f3ef 8711 	mrs	r7, BASEPRI
   167c2:	f383 8811 	msr	BASEPRI, r3
   167c6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   167ca:	f00c f8ba 	bl	22942 <add_to_waitq_locked>
	__asm__ volatile(
   167ce:	f387 8811 	msr	BASEPRI, r7
   167d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   167d6:	1c6b      	adds	r3, r5, #1
   167d8:	bf08      	it	eq
   167da:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   167de:	d008      	beq.n	167f2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   167e0:	4622      	mov	r2, r4
   167e2:	462b      	mov	r3, r5
   167e4:	f106 0018 	add.w	r0, r6, #24
   167e8:	4903      	ldr	r1, [pc, #12]	; (167f8 <pend+0x48>)
}
   167ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   167ee:	f000 bb61 	b.w	16eb4 <z_add_timeout>
   167f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167f6:	bf00      	nop
   167f8:	00022903 	.word	0x00022903

000167fc <z_pend_curr>:
{
   167fc:	b510      	push	{r4, lr}
   167fe:	460c      	mov	r4, r1
	pending_current = _current;
   16800:	4b06      	ldr	r3, [pc, #24]	; (1681c <z_pend_curr+0x20>)
{
   16802:	4611      	mov	r1, r2
	pending_current = _current;
   16804:	6898      	ldr	r0, [r3, #8]
   16806:	4b06      	ldr	r3, [pc, #24]	; (16820 <z_pend_curr+0x24>)
   16808:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1680a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1680e:	f7ff ffcf 	bl	167b0 <pend>
   16812:	4620      	mov	r0, r4
}
   16814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16818:	f7ed bbd6 	b.w	3fc8 <arch_swap>
   1681c:	20025eec 	.word	0x20025eec
   16820:	20025f20 	.word	0x20025f20

00016824 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   16824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16828:	4605      	mov	r5, r0
   1682a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1682c:	f00c f9ef 	bl	22c0e <z_tick_get_32>
   16830:	4604      	mov	r4, r0
	__asm__ volatile(
   16832:	f04f 0320 	mov.w	r3, #32
   16836:	f3ef 8811 	mrs	r8, BASEPRI
   1683a:	f383 8811 	msr	BASEPRI, r3
   1683e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   16842:	4e12      	ldr	r6, [pc, #72]	; (1688c <z_tick_sleep.part.0+0x68>)
   16844:	4b12      	ldr	r3, [pc, #72]	; (16890 <z_tick_sleep.part.0+0x6c>)
   16846:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + z_tick_get_32();
   16848:	442c      	add	r4, r5
	pending_current = _current;
   1684a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1684c:	f7ff ff96 	bl	1677c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16850:	68b0      	ldr	r0, [r6, #8]
   16852:	4910      	ldr	r1, [pc, #64]	; (16894 <z_tick_sleep.part.0+0x70>)
   16854:	462a      	mov	r2, r5
   16856:	463b      	mov	r3, r7
   16858:	3018      	adds	r0, #24
   1685a:	f000 fb2b 	bl	16eb4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1685e:	68b2      	ldr	r2, [r6, #8]
   16860:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16862:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   16864:	2500      	movs	r5, #0
   16866:	f043 0310 	orr.w	r3, r3, #16
   1686a:	7353      	strb	r3, [r2, #13]
   1686c:	f7ed fbac 	bl	3fc8 <arch_swap>
   16870:	f00c f9cd 	bl	22c0e <z_tick_get_32>
   16874:	1a24      	subs	r4, r4, r0
   16876:	f165 0500 	sbc.w	r5, r5, #0
   1687a:	2c00      	cmp	r4, #0
   1687c:	f175 0300 	sbcs.w	r3, r5, #0
   16880:	bfb8      	it	lt
   16882:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   16884:	4620      	mov	r0, r4
   16886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1688a:	bf00      	nop
   1688c:	20025eec 	.word	0x20025eec
   16890:	20025f20 	.word	0x20025f20
   16894:	00022903 	.word	0x00022903

00016898 <z_set_prio>:
{
   16898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1689c:	4604      	mov	r4, r0
   1689e:	f04f 0320 	mov.w	r3, #32
   168a2:	f3ef 8811 	mrs	r8, BASEPRI
   168a6:	f383 8811 	msr	BASEPRI, r3
   168aa:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   168ae:	7b43      	ldrb	r3, [r0, #13]
   168b0:	b24e      	sxtb	r6, r1
   168b2:	06db      	lsls	r3, r3, #27
   168b4:	d12e      	bne.n	16914 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   168b6:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   168b8:	bb65      	cbnz	r5, 16914 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   168ba:	4f18      	ldr	r7, [pc, #96]	; (1691c <z_set_prio+0x84>)
   168bc:	4621      	mov	r1, r4
   168be:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   168c2:	f7ff fd79 	bl	163b8 <z_priq_dumb_remove>
	return list->head == list;
   168c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   168c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   168ca:	4283      	cmp	r3, r0
   168cc:	bf18      	it	ne
   168ce:	461d      	movne	r5, r3
   168d0:	2d00      	cmp	r5, #0
   168d2:	bf38      	it	cc
   168d4:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   168d6:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   168d8:	b1b5      	cbz	r5, 16908 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   168da:	f995 100e 	ldrsb.w	r1, [r5, #14]
   168de:	42b1      	cmp	r1, r6
   168e0:	dc03      	bgt.n	168ea <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   168e2:	42aa      	cmp	r2, r5
   168e4:	d010      	beq.n	16908 <z_set_prio+0x70>
   168e6:	682d      	ldr	r5, [r5, #0]
   168e8:	e7f6      	b.n	168d8 <z_set_prio+0x40>
	node->prev = successor->prev;
   168ea:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   168ec:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   168f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   168f2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   168f4:	2001      	movs	r0, #1
   168f6:	f7ff fd75 	bl	163e4 <update_cache>
   168fa:	2001      	movs	r0, #1
	__asm__ volatile(
   168fc:	f388 8811 	msr	BASEPRI, r8
   16900:	f3bf 8f6f 	isb	sy
}
   16904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   16908:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1690e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16910:	633c      	str	r4, [r7, #48]	; 0x30
}
   16912:	e7ef      	b.n	168f4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   16914:	2000      	movs	r0, #0
   16916:	73a6      	strb	r6, [r4, #14]
   16918:	e7f0      	b.n	168fc <z_set_prio+0x64>
   1691a:	bf00      	nop
   1691c:	20025eec 	.word	0x20025eec

00016920 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   16920:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   16922:	4b04      	ldr	r3, [pc, #16]	; (16934 <z_sched_init+0x14>)
   16924:	4608      	mov	r0, r1
   16926:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1692a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1692e:	f7ff bcf1 	b.w	16314 <k_sched_time_slice_set>
   16932:	bf00      	nop
   16934:	20025eec 	.word	0x20025eec

00016938 <z_impl_k_yield>:
{
   16938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1693a:	4c24      	ldr	r4, [pc, #144]	; (169cc <z_impl_k_yield+0x94>)
   1693c:	4b24      	ldr	r3, [pc, #144]	; (169d0 <z_impl_k_yield+0x98>)
   1693e:	68a2      	ldr	r2, [r4, #8]
   16940:	429a      	cmp	r2, r3
   16942:	d030      	beq.n	169a6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   16944:	f04f 0320 	mov.w	r3, #32
   16948:	f3ef 8511 	mrs	r5, BASEPRI
   1694c:	f383 8811 	msr	BASEPRI, r3
   16950:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   16954:	68a1      	ldr	r1, [r4, #8]
   16956:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1695a:	f7ff fd2d 	bl	163b8 <z_priq_dumb_remove>
	return list->head == list;
   1695e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   16960:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16962:	4283      	cmp	r3, r0
   16964:	bf08      	it	eq
   16966:	2300      	moveq	r3, #0
   16968:	2b00      	cmp	r3, #0
   1696a:	bf38      	it	cc
   1696c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1696e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16970:	b32b      	cbz	r3, 169be <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   16972:	f992 700e 	ldrsb.w	r7, [r2, #14]
   16976:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1697a:	42b7      	cmp	r7, r6
   1697c:	db03      	blt.n	16986 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1697e:	428b      	cmp	r3, r1
   16980:	d01d      	beq.n	169be <z_impl_k_yield+0x86>
   16982:	681b      	ldr	r3, [r3, #0]
   16984:	e7f4      	b.n	16970 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   16986:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16988:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1698c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1698e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   16990:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   16992:	2001      	movs	r0, #1
   16994:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16998:	7353      	strb	r3, [r2, #13]
   1699a:	f7ff fd23 	bl	163e4 <update_cache>
	__asm__ volatile(
   1699e:	f385 8811 	msr	BASEPRI, r5
   169a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   169a6:	f04f 0320 	mov.w	r3, #32
   169aa:	f3ef 8011 	mrs	r0, BASEPRI
   169ae:	f383 8811 	msr	BASEPRI, r3
   169b2:	f3bf 8f6f 	isb	sy
}
   169b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   169ba:	f7ed bb05 	b.w	3fc8 <arch_swap>
	node->prev = list->tail;
   169be:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   169c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   169c4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   169c6:	6322      	str	r2, [r4, #48]	; 0x30
}
   169c8:	e7e2      	b.n	16990 <z_impl_k_yield+0x58>
   169ca:	bf00      	nop
   169cc:	20025eec 	.word	0x20025eec
   169d0:	20000fe8 	.word	0x20000fe8

000169d4 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   169d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   169d8:	bf08      	it	eq
   169da:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   169de:	b508      	push	{r3, lr}
   169e0:	4602      	mov	r2, r0
   169e2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   169e4:	d106      	bne.n	169f4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   169e6:	4b0b      	ldr	r3, [pc, #44]	; (16a14 <z_impl_k_sleep+0x40>)
   169e8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   169ea:	f7ff fe11 	bl	16610 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   169ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   169f2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   169f4:	4313      	orrs	r3, r2
   169f6:	d10a      	bne.n	16a0e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   169f8:	f7ff ff9e 	bl	16938 <z_impl_k_yield>
		return 0;
   169fc:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   169fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16a02:	fb80 2303 	smull	r2, r3, r0, r3
   16a06:	0bd0      	lsrs	r0, r2, #15
   16a08:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   16a0c:	e7f1      	b.n	169f2 <z_impl_k_sleep+0x1e>
   16a0e:	f7ff ff09 	bl	16824 <z_tick_sleep.part.0>
   16a12:	e7f4      	b.n	169fe <z_impl_k_sleep+0x2a>
   16a14:	20025eec 	.word	0x20025eec

00016a18 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   16a18:	4b01      	ldr	r3, [pc, #4]	; (16a20 <z_impl_k_current_get+0x8>)
   16a1a:	6898      	ldr	r0, [r3, #8]
   16a1c:	4770      	bx	lr
   16a1e:	bf00      	nop
   16a20:	20025eec 	.word	0x20025eec

00016a24 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   16a24:	b538      	push	{r3, r4, r5, lr}
   16a26:	4604      	mov	r4, r0
   16a28:	f04f 0320 	mov.w	r3, #32
   16a2c:	f3ef 8511 	mrs	r5, BASEPRI
   16a30:	f383 8811 	msr	BASEPRI, r3
   16a34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   16a38:	f00b ffb0 	bl	2299c <z_unpend_first_thread>

	if (thread != NULL) {
   16a3c:	b150      	cbz	r0, 16a54 <z_impl_k_sem_give+0x30>
   16a3e:	2200      	movs	r2, #0
   16a40:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   16a44:	f00b ff4d 	bl	228e2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   16a48:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   16a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   16a4e:	4807      	ldr	r0, [pc, #28]	; (16a6c <z_impl_k_sem_give+0x48>)
   16a50:	f7ff bc8c 	b.w	1636c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16a54:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   16a58:	429a      	cmp	r2, r3
   16a5a:	bf18      	it	ne
   16a5c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16a5e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16a60:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16a62:	f104 0010 	add.w	r0, r4, #16
   16a66:	f00c fa6f 	bl	22f48 <z_handle_obj_poll_events>
}
   16a6a:	e7ed      	b.n	16a48 <z_impl_k_sem_give+0x24>
   16a6c:	2002a187 	.word	0x2002a187

00016a70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   16a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16a72:	4614      	mov	r4, r2
   16a74:	461d      	mov	r5, r3
   16a76:	f04f 0320 	mov.w	r3, #32
   16a7a:	f3ef 8111 	mrs	r1, BASEPRI
   16a7e:	f383 8811 	msr	BASEPRI, r3
   16a82:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   16a86:	6883      	ldr	r3, [r0, #8]
   16a88:	b143      	cbz	r3, 16a9c <z_impl_k_sem_take+0x2c>
		sem->count--;
   16a8a:	3b01      	subs	r3, #1
   16a8c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   16a8e:	f381 8811 	msr	BASEPRI, r1
   16a92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16a96:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   16a98:	b003      	add	sp, #12
   16a9a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16a9c:	ea54 0305 	orrs.w	r3, r4, r5
   16aa0:	d106      	bne.n	16ab0 <z_impl_k_sem_take+0x40>
   16aa2:	f381 8811 	msr	BASEPRI, r1
   16aa6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16aaa:	f06f 000f 	mvn.w	r0, #15
   16aae:	e7f3      	b.n	16a98 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16ab0:	4602      	mov	r2, r0
   16ab2:	e9cd 4500 	strd	r4, r5, [sp]
   16ab6:	4802      	ldr	r0, [pc, #8]	; (16ac0 <z_impl_k_sem_take+0x50>)
   16ab8:	f7ff fea0 	bl	167fc <z_pend_curr>
	return ret;
   16abc:	e7ec      	b.n	16a98 <z_impl_k_sem_take+0x28>
   16abe:	bf00      	nop
   16ac0:	2002a187 	.word	0x2002a187

00016ac4 <z_impl_k_stack_pop>:
#include <syscalls/k_stack_push_mrsh.c>
#endif

int z_impl_k_stack_pop(struct k_stack *stack, stack_data_t *data,
		       k_timeout_t timeout)
{
   16ac4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   16ac6:	460c      	mov	r4, r1
   16ac8:	4616      	mov	r6, r2
   16aca:	461f      	mov	r7, r3
	__asm__ volatile(
   16acc:	f04f 0320 	mov.w	r3, #32
   16ad0:	f3ef 8111 	mrs	r1, BASEPRI
   16ad4:	f383 8811 	msr	BASEPRI, r3
   16ad8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&stack->lock);

	if (likely(stack->next > stack->base)) {
   16adc:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   16ae0:	4293      	cmp	r3, r2
   16ae2:	d90a      	bls.n	16afa <z_impl_k_stack_pop+0x36>
		stack->next--;
   16ae4:	1f1a      	subs	r2, r3, #4
		*data = *(stack->next);
   16ae6:	f853 3c04 	ldr.w	r3, [r3, #-4]
		stack->next--;
   16aea:	60c2      	str	r2, [r0, #12]
		*data = *(stack->next);
   16aec:	6023      	str	r3, [r4, #0]
	__asm__ volatile(
   16aee:	f381 8811 	msr	BASEPRI, r1
   16af2:	f3bf 8f6f 	isb	sy
	if (result == -EAGAIN) {
		return -EAGAIN;
	}

	*data = (stack_data_t)_current->base.swap_data;
	return 0;
   16af6:	2000      	movs	r0, #0
   16af8:	e008      	b.n	16b0c <z_impl_k_stack_pop+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16afa:	ea56 0307 	orrs.w	r3, r6, r7
   16afe:	d107      	bne.n	16b10 <z_impl_k_stack_pop+0x4c>
   16b00:	f381 8811 	msr	BASEPRI, r1
   16b04:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   16b08:	f06f 000f 	mvn.w	r0, #15
}
   16b0c:	b002      	add	sp, #8
   16b0e:	bdd0      	pop	{r4, r6, r7, pc}
	result = z_pend_curr(&stack->lock, key, &stack->wait_q, timeout);
   16b10:	4602      	mov	r2, r0
   16b12:	e9cd 6700 	strd	r6, r7, [sp]
   16b16:	3008      	adds	r0, #8
   16b18:	f7ff fe70 	bl	167fc <z_pend_curr>
	if (result == -EAGAIN) {
   16b1c:	f110 0f0b 	cmn.w	r0, #11
   16b20:	d0f4      	beq.n	16b0c <z_impl_k_stack_pop+0x48>
	*data = (stack_data_t)_current->base.swap_data;
   16b22:	4b02      	ldr	r3, [pc, #8]	; (16b2c <z_impl_k_stack_pop+0x68>)
   16b24:	689b      	ldr	r3, [r3, #8]
   16b26:	695b      	ldr	r3, [r3, #20]
   16b28:	6023      	str	r3, [r4, #0]
   16b2a:	e7e4      	b.n	16af6 <z_impl_k_stack_pop+0x32>
   16b2c:	20025eec 	.word	0x20025eec

00016b30 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   16b30:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   16b32:	4c08      	ldr	r4, [pc, #32]	; (16b54 <k_sys_work_q_init+0x24>)
   16b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16b3c:	4620      	mov	r0, r4
   16b3e:	4906      	ldr	r1, [pc, #24]	; (16b58 <k_sys_work_q_init+0x28>)
   16b40:	f000 f8dc 	bl	16cfc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   16b44:	4905      	ldr	r1, [pc, #20]	; (16b5c <k_sys_work_q_init+0x2c>)
   16b46:	f104 0018 	add.w	r0, r4, #24
   16b4a:	f00b ffa5 	bl	22a98 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   16b4e:	2000      	movs	r0, #0
   16b50:	bd10      	pop	{r4, pc}
   16b52:	bf00      	nop
   16b54:	200010f8 	.word	0x200010f8
   16b58:	2002d308 	.word	0x2002d308
   16b5c:	00027ec7 	.word	0x00027ec7

00016b60 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16b60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   16b64:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   16b68:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   16b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   16b6e:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   16b70:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   16b72:	2504      	movs	r5, #4
   16b74:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   16b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   16b78:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
   16b7a:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   16b7c:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   16b7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   16b80:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   16b84:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   16b88:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
   16b8c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   16b8e:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   16b90:	9202      	str	r2, [sp, #8]
   16b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   16b94:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   16b98:	9201      	str	r2, [sp, #4]
   16b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16b9c:	9200      	str	r2, [sp, #0]
   16b9e:	4642      	mov	r2, r8
   16ba0:	f7ed fa9e 	bl	40e0 <arch_new_thread>
	if (!_current) {
   16ba4:	4b05      	ldr	r3, [pc, #20]	; (16bbc <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   16ba6:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   16baa:	689b      	ldr	r3, [r3, #8]
   16bac:	b103      	cbz	r3, 16bb0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   16bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   16bb0:	4640      	mov	r0, r8
   16bb2:	67a3      	str	r3, [r4, #120]	; 0x78
   16bb4:	b004      	add	sp, #16
   16bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16bba:	bf00      	nop
   16bbc:	20025eec 	.word	0x20025eec

00016bc0 <z_impl_k_thread_create>:
{
   16bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16bc2:	2500      	movs	r5, #0
{
   16bc4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16bc6:	9505      	str	r5, [sp, #20]
   16bc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   16bca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16bce:	9504      	str	r5, [sp, #16]
   16bd0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   16bd2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16bd4:	9503      	str	r5, [sp, #12]
   16bd6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   16bd8:	9502      	str	r5, [sp, #8]
   16bda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16bdc:	9501      	str	r5, [sp, #4]
   16bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   16be0:	9500      	str	r5, [sp, #0]
   16be2:	f7ff ffbd 	bl	16b60 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   16be6:	1c7b      	adds	r3, r7, #1
   16be8:	bf08      	it	eq
   16bea:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   16bee:	d005      	beq.n	16bfc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16bf0:	ea56 0307 	orrs.w	r3, r6, r7
   16bf4:	d105      	bne.n	16c02 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   16bf6:	4620      	mov	r0, r4
   16bf8:	f7ff fc70 	bl	164dc <z_sched_start>
}
   16bfc:	4620      	mov	r0, r4
   16bfe:	b007      	add	sp, #28
   16c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   16c02:	4632      	mov	r2, r6
   16c04:	463b      	mov	r3, r7
   16c06:	4903      	ldr	r1, [pc, #12]	; (16c14 <z_impl_k_thread_create+0x54>)
   16c08:	f104 0018 	add.w	r0, r4, #24
   16c0c:	f000 f952 	bl	16eb4 <z_add_timeout>
   16c10:	e7f4      	b.n	16bfc <z_impl_k_thread_create+0x3c>
   16c12:	bf00      	nop
   16c14:	00022903 	.word	0x00022903

00016c18 <z_init_static_threads>:
{
   16c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   16c1c:	4e2a      	ldr	r6, [pc, #168]	; (16cc8 <z_init_static_threads+0xb0>)
   16c1e:	4d2b      	ldr	r5, [pc, #172]	; (16ccc <z_init_static_threads+0xb4>)
   16c20:	46b0      	mov	r8, r6
{
   16c22:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   16c24:	42b5      	cmp	r5, r6
   16c26:	f105 0430 	add.w	r4, r5, #48	; 0x30
   16c2a:	d310      	bcc.n	16c4e <z_init_static_threads+0x36>
	k_sched_lock();
   16c2c:	f7ff fbb0 	bl	16390 <k_sched_lock>
   16c30:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   16c34:	f240 36e7 	movw	r6, #999	; 0x3e7
   16c38:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   16c3a:	4c24      	ldr	r4, [pc, #144]	; (16ccc <z_init_static_threads+0xb4>)
   16c3c:	f8df a090 	ldr.w	sl, [pc, #144]	; 16cd0 <z_init_static_threads+0xb8>
   16c40:	4544      	cmp	r4, r8
   16c42:	d321      	bcc.n	16c88 <z_init_static_threads+0x70>
}
   16c44:	b006      	add	sp, #24
   16c46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   16c4a:	f7ff bbf3 	b.w	16434 <k_sched_unlock>
		z_setup_new_thread(
   16c4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   16c52:	9305      	str	r3, [sp, #20]
   16c54:	f854 3c10 	ldr.w	r3, [r4, #-16]
   16c58:	9304      	str	r3, [sp, #16]
   16c5a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   16c5e:	9303      	str	r3, [sp, #12]
   16c60:	f854 3c18 	ldr.w	r3, [r4, #-24]
   16c64:	9302      	str	r3, [sp, #8]
   16c66:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   16c6a:	9301      	str	r3, [sp, #4]
   16c6c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   16c70:	9300      	str	r3, [sp, #0]
   16c72:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   16c76:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   16c7a:	f7ff ff71 	bl	16b60 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   16c7e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   16c82:	65dd      	str	r5, [r3, #92]	; 0x5c
   16c84:	4625      	mov	r5, r4
   16c86:	e7cd      	b.n	16c24 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16c8a:	1c5a      	adds	r2, r3, #1
   16c8c:	d00d      	beq.n	16caa <z_init_static_threads+0x92>
   16c8e:	4630      	mov	r0, r6
   16c90:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   16c92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16c96:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16c9a:	42b9      	cmp	r1, r7
   16c9c:	bf08      	it	eq
   16c9e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   16ca0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16ca2:	d104      	bne.n	16cae <z_init_static_threads+0x96>
	z_sched_start(thread);
   16ca4:	4628      	mov	r0, r5
   16ca6:	f7ff fc19 	bl	164dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   16caa:	3430      	adds	r4, #48	; 0x30
   16cac:	e7c8      	b.n	16c40 <z_init_static_threads+0x28>
   16cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16cb2:	2300      	movs	r3, #0
   16cb4:	f7e9 fcce 	bl	654 <__aeabi_uldivmod>
   16cb8:	4602      	mov	r2, r0
   16cba:	460b      	mov	r3, r1
   16cbc:	f105 0018 	add.w	r0, r5, #24
   16cc0:	4651      	mov	r1, sl
   16cc2:	f000 f8f7 	bl	16eb4 <z_add_timeout>
   16cc6:	e7f0      	b.n	16caa <z_init_static_threads+0x92>
   16cc8:	200005a0 	.word	0x200005a0
   16ccc:	200005a0 	.word	0x200005a0
   16cd0:	00022903 	.word	0x00022903

00016cd4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   16cd4:	b508      	push	{r3, lr}
	__asm__ volatile(
   16cd6:	f04f 0320 	mov.w	r3, #32
   16cda:	f3ef 8411 	mrs	r4, BASEPRI
   16cde:	f383 8811 	msr	BASEPRI, r3
   16ce2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   16ce6:	4b04      	ldr	r3, [pc, #16]	; (16cf8 <z_self_abort+0x24>)
   16ce8:	6898      	ldr	r0, [r3, #8]
   16cea:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   16cec:	f7ff fc90 	bl	16610 <z_impl_k_thread_suspend>
   16cf0:	4620      	mov	r0, r4
   16cf2:	f7ed f969 	bl	3fc8 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16cf6:	bf00      	nop
   16cf8:	20025eec 	.word	0x20025eec

00016cfc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   16cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d00:	4604      	mov	r4, r0
   16d02:	b088      	sub	sp, #32
   16d04:	460d      	mov	r5, r1
   16d06:	4616      	mov	r6, r2
   16d08:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   16d0a:	f00b fd22 	bl	22752 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   16d0e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16d12:	2200      	movs	r2, #0
   16d14:	2300      	movs	r3, #0
   16d16:	e9cd 7203 	strd	r7, r2, [sp, #12]
   16d1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16d1e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   16d22:	4629      	mov	r1, r5
   16d24:	4632      	mov	r2, r6
   16d26:	4640      	mov	r0, r8
   16d28:	4b05      	ldr	r3, [pc, #20]	; (16d40 <k_work_q_start+0x44>)
   16d2a:	9400      	str	r4, [sp, #0]
   16d2c:	f7ff ff48 	bl	16bc0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16d30:	4640      	mov	r0, r8
   16d32:	4904      	ldr	r1, [pc, #16]	; (16d44 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   16d34:	b008      	add	sp, #32
   16d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16d3a:	f00b bead 	b.w	22a98 <z_impl_k_thread_name_set>
   16d3e:	bf00      	nop
   16d40:	0001781d 	.word	0x0001781d
   16d44:	00027ed0 	.word	0x00027ed0

00016d48 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   16d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d4c:	4606      	mov	r6, r0
   16d4e:	460d      	mov	r5, r1
   16d50:	4690      	mov	r8, r2
   16d52:	4699      	mov	r9, r3
   16d54:	f04f 0320 	mov.w	r3, #32
   16d58:	f3ef 8711 	mrs	r7, BASEPRI
   16d5c:	f383 8811 	msr	BASEPRI, r3
   16d60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   16d64:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   16d66:	b17b      	cbz	r3, 16d88 <k_delayed_work_submit_to_queue+0x40>
   16d68:	4283      	cmp	r3, r0
   16d6a:	d128      	bne.n	16dbe <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   16d6c:	4628      	mov	r0, r5
   16d6e:	f00b feb9 	bl	22ae4 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   16d72:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   16d76:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   16d78:	d008      	beq.n	16d8c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   16d7a:	2800      	cmp	r0, #0
   16d7c:	da07      	bge.n	16d8e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   16d7e:	f387 8811 	msr	BASEPRI, r7
   16d82:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   16d86:	e00f      	b.n	16da8 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   16d88:	2800      	cmp	r0, #0
   16d8a:	d0ef      	beq.n	16d6c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   16d8c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16d8e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   16d92:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16d94:	d10b      	bne.n	16dae <k_delayed_work_submit_to_queue+0x66>
   16d96:	f387 8811 	msr	BASEPRI, r7
   16d9a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   16d9e:	4629      	mov	r1, r5
   16da0:	4630      	mov	r0, r6
   16da2:	f00b fe86 	bl	22ab2 <k_work_submit_to_queue>
		return 0;
   16da6:	2400      	movs	r4, #0
}
   16da8:	4620      	mov	r0, r4
   16daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   16dae:	4642      	mov	r2, r8
   16db0:	464b      	mov	r3, r9
   16db2:	4904      	ldr	r1, [pc, #16]	; (16dc4 <k_delayed_work_submit_to_queue+0x7c>)
   16db4:	f105 0010 	add.w	r0, r5, #16
   16db8:	f000 f87c 	bl	16eb4 <z_add_timeout>
   16dbc:	e7df      	b.n	16d7e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   16dbe:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   16dc2:	e7dc      	b.n	16d7e <k_delayed_work_submit_to_queue+0x36>
   16dc4:	00022adb 	.word	0x00022adb

00016dc8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   16dc8:	4a02      	ldr	r2, [pc, #8]	; (16dd4 <boot_banner+0xc>)
   16dca:	4903      	ldr	r1, [pc, #12]	; (16dd8 <boot_banner+0x10>)
   16dcc:	4803      	ldr	r0, [pc, #12]	; (16ddc <boot_banner+0x14>)
   16dce:	f000 bc56 	b.w	1767e <printk>
   16dd2:	bf00      	nop
   16dd4:	000245a3 	.word	0x000245a3
   16dd8:	00027eda 	.word	0x00027eda
   16ddc:	00027ee7 	.word	0x00027ee7

00016de0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16de0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   16de2:	4806      	ldr	r0, [pc, #24]	; (16dfc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   16de4:	4a06      	ldr	r2, [pc, #24]	; (16e00 <z_data_copy+0x20>)
   16de6:	4907      	ldr	r1, [pc, #28]	; (16e04 <z_data_copy+0x24>)
   16de8:	1a12      	subs	r2, r2, r0
   16dea:	f002 fa0d 	bl	19208 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16df2:	4a05      	ldr	r2, [pc, #20]	; (16e08 <z_data_copy+0x28>)
   16df4:	4905      	ldr	r1, [pc, #20]	; (16e0c <z_data_copy+0x2c>)
   16df6:	4806      	ldr	r0, [pc, #24]	; (16e10 <z_data_copy+0x30>)
   16df8:	f002 ba06 	b.w	19208 <memcpy>
   16dfc:	20000000 	.word	0x20000000
   16e00:	200007e0 	.word	0x200007e0
   16e04:	00027f10 	.word	0x00027f10
   16e08:	00000000 	.word	0x00000000
   16e0c:	00027f10 	.word	0x00027f10
   16e10:	20000000 	.word	0x20000000

00016e14 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   16e14:	4b03      	ldr	r3, [pc, #12]	; (16e24 <elapsed+0x10>)
   16e16:	681b      	ldr	r3, [r3, #0]
   16e18:	b90b      	cbnz	r3, 16e1e <elapsed+0xa>
   16e1a:	f7ec bdf5 	b.w	3a08 <z_clock_elapsed>
}
   16e1e:	2000      	movs	r0, #0
   16e20:	4770      	bx	lr
   16e22:	bf00      	nop
   16e24:	20025f2c 	.word	0x20025f2c

00016e28 <remove_timeout>:
{
   16e28:	b530      	push	{r4, r5, lr}
   16e2a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e2c:	b168      	cbz	r0, 16e4a <remove_timeout+0x22>
   16e2e:	4a0a      	ldr	r2, [pc, #40]	; (16e58 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   16e30:	6852      	ldr	r2, [r2, #4]
   16e32:	4290      	cmp	r0, r2
   16e34:	d009      	beq.n	16e4a <remove_timeout+0x22>
	if (next(t) != NULL) {
   16e36:	b143      	cbz	r3, 16e4a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   16e38:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16e3c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16e40:	1912      	adds	r2, r2, r4
   16e42:	eb45 0101 	adc.w	r1, r5, r1
   16e46:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   16e4a:	6842      	ldr	r2, [r0, #4]
   16e4c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16e4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16e50:	2300      	movs	r3, #0
	node->prev = NULL;
   16e52:	e9c0 3300 	strd	r3, r3, [r0]
}
   16e56:	bd30      	pop	{r4, r5, pc}
   16e58:	20000410 	.word	0x20000410

00016e5c <next_timeout>:

static int32_t next_timeout(void)
{
   16e5c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   16e5e:	4b13      	ldr	r3, [pc, #76]	; (16eac <next_timeout+0x50>)
   16e60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e62:	429c      	cmp	r4, r3
   16e64:	bf08      	it	eq
   16e66:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   16e68:	f7ff ffd4 	bl	16e14 <elapsed>
   16e6c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   16e6e:	b1bc      	cbz	r4, 16ea0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16e70:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   16e74:	1b40      	subs	r0, r0, r5
   16e76:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   16e7a:	2801      	cmp	r0, #1
   16e7c:	f171 0300 	sbcs.w	r3, r1, #0
   16e80:	db11      	blt.n	16ea6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16e82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16e86:	2300      	movs	r3, #0
   16e88:	4282      	cmp	r2, r0
   16e8a:	eb73 0401 	sbcs.w	r4, r3, r1
   16e8e:	da00      	bge.n	16e92 <next_timeout+0x36>
   16e90:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   16e92:	4b07      	ldr	r3, [pc, #28]	; (16eb0 <next_timeout+0x54>)
   16e94:	695b      	ldr	r3, [r3, #20]
   16e96:	b113      	cbz	r3, 16e9e <next_timeout+0x42>
   16e98:	4298      	cmp	r0, r3
   16e9a:	bfa8      	it	ge
   16e9c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   16e9e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   16ea0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   16ea4:	e7f5      	b.n	16e92 <next_timeout+0x36>
   16ea6:	2000      	movs	r0, #0
   16ea8:	e7f3      	b.n	16e92 <next_timeout+0x36>
   16eaa:	bf00      	nop
   16eac:	20000410 	.word	0x20000410
   16eb0:	20025eec 	.word	0x20025eec

00016eb4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   16eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb8:	9101      	str	r1, [sp, #4]
   16eba:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16ebc:	1c4b      	adds	r3, r1, #1
   16ebe:	bf08      	it	eq
   16ec0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   16ec4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16ec6:	d070      	beq.n	16faa <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   16ec8:	f06f 0301 	mvn.w	r3, #1
   16ecc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   16ed0:	1c54      	adds	r4, r2, #1
   16ed2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   16ed6:	ebb3 0804 	subs.w	r8, r3, r4
   16eda:	eb6b 0905 	sbc.w	r9, fp, r5
   16ede:	f1b8 0f00 	cmp.w	r8, #0
   16ee2:	f179 0300 	sbcs.w	r3, r9, #0
   16ee6:	db0f      	blt.n	16f08 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   16ee8:	f7ff ff94 	bl	16e14 <elapsed>
   16eec:	f06f 0301 	mvn.w	r3, #1
   16ef0:	4a34      	ldr	r2, [pc, #208]	; (16fc4 <z_add_timeout+0x110>)
   16ef2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   16ef6:	1a5b      	subs	r3, r3, r1
   16ef8:	eb6b 020c 	sbc.w	r2, fp, ip
   16efc:	1b1e      	subs	r6, r3, r4
   16efe:	eb62 0705 	sbc.w	r7, r2, r5
   16f02:	1a34      	subs	r4, r6, r0
   16f04:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   16f08:	9b01      	ldr	r3, [sp, #4]
   16f0a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   16f0e:	f04f 0320 	mov.w	r3, #32
   16f12:	f3ef 8611 	mrs	r6, BASEPRI
   16f16:	f383 8811 	msr	BASEPRI, r3
   16f1a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   16f1e:	f7ff ff79 	bl	16e14 <elapsed>
	ticks = MAX(1, ticks);
   16f22:	2c01      	cmp	r4, #1
   16f24:	f175 0300 	sbcs.w	r3, r5, #0
   16f28:	bfbc      	itt	lt
   16f2a:	2401      	movlt	r4, #1
   16f2c:	2500      	movlt	r5, #0
	return list->head == list;
   16f2e:	4b26      	ldr	r3, [pc, #152]	; (16fc8 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
   16f30:	1824      	adds	r4, r4, r0
   16f32:	681a      	ldr	r2, [r3, #0]
   16f34:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16f38:	429a      	cmp	r2, r3
   16f3a:	e9ca 4504 	strd	r4, r5, [sl, #16]
   16f3e:	d001      	beq.n	16f44 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16f40:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   16f42:	b952      	cbnz	r2, 16f5a <z_add_timeout+0xa6>
	node->prev = list->tail;
   16f44:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   16f46:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   16f4a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   16f4e:	685a      	ldr	r2, [r3, #4]
   16f50:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   16f54:	f8c3 a004 	str.w	sl, [r3, #4]
}
   16f58:	e014      	b.n	16f84 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   16f5a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   16f5e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   16f62:	4544      	cmp	r4, r8
   16f64:	eb75 0109 	sbcs.w	r1, r5, r9
   16f68:	da22      	bge.n	16fb0 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
   16f6a:	ebb8 0004 	subs.w	r0, r8, r4
   16f6e:	eb69 0105 	sbc.w	r1, r9, r5
   16f72:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   16f76:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   16f78:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   16f7c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   16f80:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   16f84:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16f86:	429a      	cmp	r2, r3
   16f88:	d00b      	beq.n	16fa2 <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16f8a:	4592      	cmp	sl, r2
   16f8c:	d109      	bne.n	16fa2 <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   16f8e:	f7ff ff65 	bl	16e5c <next_timeout>

			if (next_time == 0 ||
   16f92:	b118      	cbz	r0, 16f9c <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
   16f94:	4b0d      	ldr	r3, [pc, #52]	; (16fcc <z_add_timeout+0x118>)
			if (next_time == 0 ||
   16f96:	695b      	ldr	r3, [r3, #20]
   16f98:	4283      	cmp	r3, r0
   16f9a:	d002      	beq.n	16fa2 <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
   16f9c:	2100      	movs	r1, #0
   16f9e:	f7ec fd01 	bl	39a4 <z_clock_set_timeout>
	__asm__ volatile(
   16fa2:	f386 8811 	msr	BASEPRI, r6
   16fa6:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   16faa:	b003      	add	sp, #12
   16fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   16fb0:	ebb4 0008 	subs.w	r0, r4, r8
   16fb4:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   16fb8:	42ba      	cmp	r2, r7
   16fba:	e9ca 0104 	strd	r0, r1, [sl, #16]
   16fbe:	d0c1      	beq.n	16f44 <z_add_timeout+0x90>
   16fc0:	6812      	ldr	r2, [r2, #0]
   16fc2:	e7be      	b.n	16f42 <z_add_timeout+0x8e>
   16fc4:	20001198 	.word	0x20001198
   16fc8:	20000410 	.word	0x20000410
   16fcc:	20025eec 	.word	0x20025eec

00016fd0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   16fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fd4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   16fd6:	f7ff fad9 	bl	1658c <z_time_slice>
	__asm__ volatile(
   16fda:	f04f 0320 	mov.w	r3, #32
   16fde:	f3ef 8411 	mrs	r4, BASEPRI
   16fe2:	f383 8811 	msr	BASEPRI, r3
   16fe6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   16fea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1709c <z_clock_announce+0xcc>
   16fee:	4d2a      	ldr	r5, [pc, #168]	; (17098 <z_clock_announce+0xc8>)
   16ff0:	4651      	mov	r1, sl
	return list->head == list;
   16ff2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 170a0 <z_clock_announce+0xd0>
   16ff6:	602e      	str	r6, [r5, #0]
   16ff8:	f8d5 c000 	ldr.w	ip, [r5]
   16ffc:	f8db 0000 	ldr.w	r0, [fp]
   17000:	4662      	mov	r2, ip
   17002:	e9da 8900 	ldrd	r8, r9, [sl]
   17006:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17008:	4558      	cmp	r0, fp
   1700a:	e9cd 2300 	strd	r2, r3, [sp]
   1700e:	d00d      	beq.n	1702c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   17010:	b160      	cbz	r0, 1702c <z_clock_announce+0x5c>
   17012:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   17016:	45b4      	cmp	ip, r6
   17018:	41bb      	sbcs	r3, r7
   1701a:	da1d      	bge.n	17058 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1701c:	9b00      	ldr	r3, [sp, #0]
   1701e:	ebb6 0c03 	subs.w	ip, r6, r3
   17022:	9b01      	ldr	r3, [sp, #4]
   17024:	eb67 0603 	sbc.w	r6, r7, r3
   17028:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1702c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   1702e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   17030:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   17032:	eb13 0208 	adds.w	r2, r3, r8
   17036:	9b01      	ldr	r3, [sp, #4]
   17038:	eb43 0309 	adc.w	r3, r3, r9
   1703c:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   17040:	f7ff ff0c 	bl	16e5c <next_timeout>
   17044:	4631      	mov	r1, r6
   17046:	f7ec fcad 	bl	39a4 <z_clock_set_timeout>
	__asm__ volatile(
   1704a:	f384 8811 	msr	BASEPRI, r4
   1704e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   17052:	b003      	add	sp, #12
   17054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   17058:	2200      	movs	r2, #0
   1705a:	2300      	movs	r3, #0
		curr_tick += dt;
   1705c:	eb18 0806 	adds.w	r8, r8, r6
   17060:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   17064:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   17068:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1706c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   17070:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   17072:	f7ff fed9 	bl	16e28 <remove_timeout>
   17076:	f384 8811 	msr	BASEPRI, r4
   1707a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1707e:	6883      	ldr	r3, [r0, #8]
   17080:	4798      	blx	r3
	__asm__ volatile(
   17082:	f04f 0320 	mov.w	r3, #32
   17086:	f3ef 8411 	mrs	r4, BASEPRI
   1708a:	f383 8811 	msr	BASEPRI, r3
   1708e:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   17092:	4902      	ldr	r1, [pc, #8]	; (1709c <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   17094:	e7b0      	b.n	16ff8 <z_clock_announce+0x28>
   17096:	bf00      	nop
   17098:	20025f2c 	.word	0x20025f2c
   1709c:	20001198 	.word	0x20001198
   170a0:	20000410 	.word	0x20000410

000170a4 <z_tick_get>:

int64_t z_tick_get(void)
{
   170a4:	b510      	push	{r4, lr}
   170a6:	f04f 0320 	mov.w	r3, #32
   170aa:	f3ef 8411 	mrs	r4, BASEPRI
   170ae:	f383 8811 	msr	BASEPRI, r3
   170b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   170b6:	f7ec fca7 	bl	3a08 <z_clock_elapsed>
   170ba:	4b06      	ldr	r3, [pc, #24]	; (170d4 <z_tick_get+0x30>)
   170bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   170c0:	1812      	adds	r2, r2, r0
   170c2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   170c6:	f384 8811 	msr	BASEPRI, r4
   170ca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   170ce:	4610      	mov	r0, r2
   170d0:	4619      	mov	r1, r3
   170d2:	bd10      	pop	{r4, pc}
   170d4:	20001198 	.word	0x20001198

000170d8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   170d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   170da:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   170de:	1c56      	adds	r6, r2, #1
   170e0:	f143 0700 	adc.w	r7, r3, #0
   170e4:	2f00      	cmp	r7, #0
   170e6:	bf08      	it	eq
   170e8:	2e02      	cmpeq	r6, #2
{
   170ea:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   170ec:	d302      	bcc.n	170f4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   170ee:	490c      	ldr	r1, [pc, #48]	; (17120 <z_timer_expiration_handler+0x48>)
   170f0:	f7ff fee0 	bl	16eb4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   170f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   170f6:	3301      	adds	r3, #1
   170f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   170fa:	6a23      	ldr	r3, [r4, #32]
   170fc:	b10b      	cbz	r3, 17102 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   170fe:	4620      	mov	r0, r4
   17100:	4798      	blx	r3
	return list->head == list;
   17102:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17106:	42a5      	cmp	r5, r4
   17108:	d009      	beq.n	1711e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1710a:	b145      	cbz	r5, 1711e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1710c:	4628      	mov	r0, r5
   1710e:	f00b fb96 	bl	2283e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   17112:	4628      	mov	r0, r5
   17114:	f00b fbe5 	bl	228e2 <z_ready_thread>
   17118:	2300      	movs	r3, #0
   1711a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17120:	000170d9 	.word	0x000170d9

00017124 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   17124:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   17128:	4619      	mov	r1, r3
   1712a:	4606      	mov	r6, r0
   1712c:	4610      	mov	r0, r2
   1712e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   17132:	1c4c      	adds	r4, r1, #1
   17134:	bf08      	it	eq
   17136:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1713a:	4680      	mov	r8, r0
   1713c:	4689      	mov	r9, r1
   1713e:	d047      	beq.n	171d0 <z_impl_k_timer_start+0xac>
   17140:	4614      	mov	r4, r2
   17142:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   17144:	ea54 0305 	orrs.w	r3, r4, r5
   17148:	d016      	beq.n	17178 <z_impl_k_timer_start+0x54>
   1714a:	f06f 0301 	mvn.w	r3, #1
   1714e:	ebb3 0a02 	subs.w	sl, r3, r2
   17152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17156:	eb63 0b05 	sbc.w	fp, r3, r5
   1715a:	f1ba 0f00 	cmp.w	sl, #0
   1715e:	f17b 0300 	sbcs.w	r3, fp, #0
   17162:	da09      	bge.n	17178 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   17164:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   17168:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1716c:	2c01      	cmp	r4, #1
   1716e:	f175 0300 	sbcs.w	r3, r5, #0
   17172:	bfbc      	itt	lt
   17174:	2401      	movlt	r4, #1
   17176:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   17178:	f06f 0301 	mvn.w	r3, #1
   1717c:	1a1b      	subs	r3, r3, r0
   1717e:	9300      	str	r3, [sp, #0]
   17180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17184:	eb63 0301 	sbc.w	r3, r3, r1
   17188:	9301      	str	r3, [sp, #4]
   1718a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1718e:	2a00      	cmp	r2, #0
   17190:	f173 0300 	sbcs.w	r3, r3, #0
   17194:	da0c      	bge.n	171b0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   17196:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1719a:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1719e:	f1b8 0f00 	cmp.w	r8, #0
   171a2:	f179 0300 	sbcs.w	r3, r9, #0
   171a6:	bfbc      	itt	lt
   171a8:	f04f 0800 	movlt.w	r8, #0
   171ac:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   171b0:	4630      	mov	r0, r6
   171b2:	f00b fcec 	bl	22b8e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   171b6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   171b8:	4642      	mov	r2, r8
	timer->status = 0U;
   171ba:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   171bc:	4630      	mov	r0, r6
   171be:	464b      	mov	r3, r9
   171c0:	4905      	ldr	r1, [pc, #20]	; (171d8 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   171c2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   171c6:	b002      	add	sp, #8
   171c8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   171cc:	f7ff be72 	b.w	16eb4 <z_add_timeout>
}
   171d0:	b002      	add	sp, #8
   171d2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   171d6:	bf00      	nop
   171d8:	000170d9 	.word	0x000170d9

000171dc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   171dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   171e0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   171e2:	4b2a      	ldr	r3, [pc, #168]	; (1728c <z_impl_k_poll+0xb0>)
{
   171e4:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   171e6:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   171e8:	2301      	movs	r3, #1
   171ea:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   171ee:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   171f2:	ea52 0307 	orrs.w	r3, r2, r7
   171f6:	bf0c      	ite	eq
   171f8:	2301      	moveq	r3, #1
   171fa:	2300      	movne	r3, #0
   171fc:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   17200:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   17202:	f00b fe31 	bl	22e68 <register_events>
   17206:	4681      	mov	r9, r0
	__asm__ volatile(
   17208:	f04f 0320 	mov.w	r3, #32
   1720c:	f3ef 8a11 	mrs	sl, BASEPRI
   17210:	f383 8811 	msr	BASEPRI, r3
   17214:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   17218:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1721c:	b964      	cbnz	r4, 17238 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1721e:	4601      	mov	r1, r0
   17220:	4652      	mov	r2, sl
   17222:	4640      	mov	r0, r8
   17224:	f00b fd50 	bl	22cc8 <clear_event_registrations>
	__asm__ volatile(
   17228:	f38a 8811 	msr	BASEPRI, sl
   1722c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   17230:	4620      	mov	r0, r4
   17232:	b004      	add	sp, #16
   17234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   17238:	2300      	movs	r3, #0
   1723a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1723e:	ea56 0307 	orrs.w	r3, r6, r7
   17242:	d106      	bne.n	17252 <z_impl_k_poll+0x76>
   17244:	f38a 8811 	msr	BASEPRI, sl
   17248:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1724c:	f06f 040a 	mvn.w	r4, #10
   17250:	e7ee      	b.n	17230 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   17252:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17254:	4651      	mov	r1, sl
   17256:	e9cd 6700 	strd	r6, r7, [sp]
   1725a:	480d      	ldr	r0, [pc, #52]	; (17290 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1725c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17260:	f7ff facc 	bl	167fc <z_pend_curr>
   17264:	4604      	mov	r4, r0
	__asm__ volatile(
   17266:	f04f 0320 	mov.w	r3, #32
   1726a:	f3ef 8511 	mrs	r5, BASEPRI
   1726e:	f383 8811 	msr	BASEPRI, r3
   17272:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   17276:	462a      	mov	r2, r5
   17278:	4649      	mov	r1, r9
   1727a:	4640      	mov	r0, r8
   1727c:	f00b fd24 	bl	22cc8 <clear_event_registrations>
	__asm__ volatile(
   17280:	f385 8811 	msr	BASEPRI, r5
   17284:	f3bf 8f6f 	isb	sy
	return swap_rc;
   17288:	e7d2      	b.n	17230 <z_impl_k_poll+0x54>
   1728a:	bf00      	nop
   1728c:	20025eec 	.word	0x20025eec
   17290:	2002a187 	.word	0x2002a187

00017294 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   17294:	b538      	push	{r3, r4, r5, lr}
   17296:	4603      	mov	r3, r0
	__asm__ volatile(
   17298:	f04f 0220 	mov.w	r2, #32
   1729c:	f3ef 8511 	mrs	r5, BASEPRI
   172a0:	f382 8811 	msr	BASEPRI, r2
   172a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   172a8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   172aa:	2101      	movs	r1, #1
   172ac:	6081      	str	r1, [r0, #8]
	return list->head == list;
   172ae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   172b0:	4283      	cmp	r3, r0
   172b2:	d106      	bne.n	172c2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   172b4:	f385 8811 	msr	BASEPRI, r5
   172b8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   172bc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   172be:	4620      	mov	r0, r4
   172c0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   172c2:	e9d0 3200 	ldrd	r3, r2, [r0]
   172c6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   172c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   172ca:	2300      	movs	r3, #0
	node->prev = NULL;
   172cc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   172d0:	f00b fd39 	bl	22d46 <signal_poll_event>
	z_reschedule(&lock, key);
   172d4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   172d6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   172d8:	4801      	ldr	r0, [pc, #4]	; (172e0 <z_impl_k_poll_signal_raise+0x4c>)
   172da:	f7ff f847 	bl	1636c <z_reschedule>
	return rc;
   172de:	e7ee      	b.n	172be <z_impl_k_poll_signal_raise+0x2a>
   172e0:	2002a187 	.word	0x2002a187

000172e4 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   172e4:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   172e6:	4601      	mov	r1, r0
   172e8:	4801      	ldr	r0, [pc, #4]	; (172f0 <k_aligned_alloc+0xc>)
   172ea:	f00b be3b 	b.w	22f64 <z_heap_aligned_alloc>
   172ee:	bf00      	nop
   172f0:	200005f4 	.word	0x200005f4

000172f4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   172f4:	b538      	push	{r3, r4, r5, lr}
   172f6:	4604      	mov	r4, r0
   172f8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   172fa:	f00b fbc3 	bl	22a84 <k_is_in_isr>
   172fe:	b950      	cbnz	r0, 17316 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   17300:	4b06      	ldr	r3, [pc, #24]	; (1731c <z_thread_aligned_alloc+0x28>)
   17302:	689b      	ldr	r3, [r3, #8]
   17304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   17306:	b143      	cbz	r3, 1731a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   17308:	462a      	mov	r2, r5
   1730a:	4621      	mov	r1, r4
   1730c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1730e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   17312:	f00b be27 	b.w	22f64 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   17316:	4b02      	ldr	r3, [pc, #8]	; (17320 <z_thread_aligned_alloc+0x2c>)
   17318:	e7f6      	b.n	17308 <z_thread_aligned_alloc+0x14>
}
   1731a:	bd38      	pop	{r3, r4, r5, pc}
   1731c:	20025eec 	.word	0x20025eec
   17320:	200005f4 	.word	0x200005f4

00017324 <nrf_cc3xx_platform_init_no_rng>:
   17324:	b510      	push	{r4, lr}
   17326:	4c0a      	ldr	r4, [pc, #40]	; (17350 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   17328:	6823      	ldr	r3, [r4, #0]
   1732a:	b11b      	cbz	r3, 17334 <nrf_cc3xx_platform_init_no_rng+0x10>
   1732c:	2301      	movs	r3, #1
   1732e:	2000      	movs	r0, #0
   17330:	6023      	str	r3, [r4, #0]
   17332:	bd10      	pop	{r4, pc}
   17334:	f000 f8b2 	bl	1749c <CC_LibInitNoRng>
   17338:	2800      	cmp	r0, #0
   1733a:	d0f7      	beq.n	1732c <nrf_cc3xx_platform_init_no_rng+0x8>
   1733c:	3801      	subs	r0, #1
   1733e:	2807      	cmp	r0, #7
   17340:	d803      	bhi.n	1734a <nrf_cc3xx_platform_init_no_rng+0x26>
   17342:	4b04      	ldr	r3, [pc, #16]	; (17354 <nrf_cc3xx_platform_init_no_rng+0x30>)
   17344:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17348:	bd10      	pop	{r4, pc}
   1734a:	4803      	ldr	r0, [pc, #12]	; (17358 <nrf_cc3xx_platform_init_no_rng+0x34>)
   1734c:	bd10      	pop	{r4, pc}
   1734e:	bf00      	nop
   17350:	20029f30 	.word	0x20029f30
   17354:	00024098 	.word	0x00024098
   17358:	ffff8ffe 	.word	0xffff8ffe

0001735c <nrf_cc3xx_platform_abort>:
   1735c:	f3bf 8f4f 	dsb	sy
   17360:	4905      	ldr	r1, [pc, #20]	; (17378 <nrf_cc3xx_platform_abort+0x1c>)
   17362:	4b06      	ldr	r3, [pc, #24]	; (1737c <nrf_cc3xx_platform_abort+0x20>)
   17364:	68ca      	ldr	r2, [r1, #12]
   17366:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1736a:	4313      	orrs	r3, r2
   1736c:	60cb      	str	r3, [r1, #12]
   1736e:	f3bf 8f4f 	dsb	sy
   17372:	bf00      	nop
   17374:	e7fd      	b.n	17372 <nrf_cc3xx_platform_abort+0x16>
   17376:	bf00      	nop
   17378:	e000ed00 	.word	0xe000ed00
   1737c:	05fa0004 	.word	0x05fa0004

00017380 <CC_PalAbort>:
   17380:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   17384:	2100      	movs	r1, #0
   17386:	b430      	push	{r4, r5}
   17388:	4a08      	ldr	r2, [pc, #32]	; (173ac <CC_PalAbort+0x2c>)
   1738a:	4c09      	ldr	r4, [pc, #36]	; (173b0 <CC_PalAbort+0x30>)
   1738c:	4d09      	ldr	r5, [pc, #36]	; (173b4 <CC_PalAbort+0x34>)
   1738e:	6023      	str	r3, [r4, #0]
   17390:	602b      	str	r3, [r5, #0]
   17392:	6013      	str	r3, [r2, #0]
   17394:	60e3      	str	r3, [r4, #12]
   17396:	60eb      	str	r3, [r5, #12]
   17398:	60d3      	str	r3, [r2, #12]
   1739a:	61a3      	str	r3, [r4, #24]
   1739c:	4a06      	ldr	r2, [pc, #24]	; (173b8 <CC_PalAbort+0x38>)
   1739e:	4c07      	ldr	r4, [pc, #28]	; (173bc <CC_PalAbort+0x3c>)
   173a0:	61ab      	str	r3, [r5, #24]
   173a2:	6863      	ldr	r3, [r4, #4]
   173a4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   173a8:	bc30      	pop	{r4, r5}
   173aa:	4718      	bx	r3
   173ac:	50845408 	.word	0x50845408
   173b0:	50845400 	.word	0x50845400
   173b4:	50845404 	.word	0x50845404
   173b8:	50844000 	.word	0x50844000
   173bc:	20000418 	.word	0x20000418

000173c0 <nrf_cc3xx_platform_set_abort>:
   173c0:	4b02      	ldr	r3, [pc, #8]	; (173cc <nrf_cc3xx_platform_set_abort+0xc>)
   173c2:	e9d0 1200 	ldrd	r1, r2, [r0]
   173c6:	e9c3 1200 	strd	r1, r2, [r3]
   173ca:	4770      	bx	lr
   173cc:	20000418 	.word	0x20000418

000173d0 <mutex_unlock>:
   173d0:	b148      	cbz	r0, 173e6 <mutex_unlock+0x16>
   173d2:	6843      	ldr	r3, [r0, #4]
   173d4:	b12b      	cbz	r3, 173e2 <mutex_unlock+0x12>
   173d6:	f3bf 8f5f 	dmb	sy
   173da:	2300      	movs	r3, #0
   173dc:	6003      	str	r3, [r0, #0]
   173de:	4618      	mov	r0, r3
   173e0:	4770      	bx	lr
   173e2:	4802      	ldr	r0, [pc, #8]	; (173ec <mutex_unlock+0x1c>)
   173e4:	4770      	bx	lr
   173e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   173ea:	4770      	bx	lr
   173ec:	ffff8fea 	.word	0xffff8fea

000173f0 <mutex_free>:
   173f0:	b510      	push	{r4, lr}
   173f2:	4604      	mov	r4, r0
   173f4:	b128      	cbz	r0, 17402 <mutex_free+0x12>
   173f6:	6863      	ldr	r3, [r4, #4]
   173f8:	b113      	cbz	r3, 17400 <mutex_free+0x10>
   173fa:	2300      	movs	r3, #0
   173fc:	6023      	str	r3, [r4, #0]
   173fe:	6063      	str	r3, [r4, #4]
   17400:	bd10      	pop	{r4, pc}
   17402:	4b02      	ldr	r3, [pc, #8]	; (1740c <mutex_free+0x1c>)
   17404:	4802      	ldr	r0, [pc, #8]	; (17410 <mutex_free+0x20>)
   17406:	685b      	ldr	r3, [r3, #4]
   17408:	4798      	blx	r3
   1740a:	e7f4      	b.n	173f6 <mutex_free+0x6>
   1740c:	20000418 	.word	0x20000418
   17410:	000240b8 	.word	0x000240b8

00017414 <mutex_init>:
   17414:	b510      	push	{r4, lr}
   17416:	4604      	mov	r4, r0
   17418:	b130      	cbz	r0, 17428 <mutex_init+0x14>
   1741a:	2200      	movs	r2, #0
   1741c:	6863      	ldr	r3, [r4, #4]
   1741e:	6022      	str	r2, [r4, #0]
   17420:	f043 0301 	orr.w	r3, r3, #1
   17424:	6063      	str	r3, [r4, #4]
   17426:	bd10      	pop	{r4, pc}
   17428:	4801      	ldr	r0, [pc, #4]	; (17430 <mutex_init+0x1c>)
   1742a:	f7ff ffa9 	bl	17380 <CC_PalAbort>
   1742e:	e7f4      	b.n	1741a <mutex_init+0x6>
   17430:	000240e0 	.word	0x000240e0

00017434 <mutex_lock>:
   17434:	b180      	cbz	r0, 17458 <mutex_lock+0x24>
   17436:	6843      	ldr	r3, [r0, #4]
   17438:	b163      	cbz	r3, 17454 <mutex_lock+0x20>
   1743a:	2201      	movs	r2, #1
   1743c:	e8d0 3fef 	ldaex	r3, [r0]
   17440:	e8c0 2fe1 	stlex	r1, r2, [r0]
   17444:	2900      	cmp	r1, #0
   17446:	d1f9      	bne.n	1743c <mutex_lock+0x8>
   17448:	2b01      	cmp	r3, #1
   1744a:	d0f7      	beq.n	1743c <mutex_lock+0x8>
   1744c:	f3bf 8f5f 	dmb	sy
   17450:	2000      	movs	r0, #0
   17452:	4770      	bx	lr
   17454:	4802      	ldr	r0, [pc, #8]	; (17460 <mutex_lock+0x2c>)
   17456:	4770      	bx	lr
   17458:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1745c:	4770      	bx	lr
   1745e:	bf00      	nop
   17460:	ffff8fea 	.word	0xffff8fea

00017464 <nrf_cc3xx_platform_set_mutexes>:
   17464:	b470      	push	{r4, r5, r6}
   17466:	4b0b      	ldr	r3, [pc, #44]	; (17494 <nrf_cc3xx_platform_set_mutexes+0x30>)
   17468:	6806      	ldr	r6, [r0, #0]
   1746a:	68c2      	ldr	r2, [r0, #12]
   1746c:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   17470:	e9c3 4202 	strd	r4, r2, [r3, #8]
   17474:	e9c3 6500 	strd	r6, r5, [r3]
   17478:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   1747c:	680e      	ldr	r6, [r1, #0]
   1747e:	4b06      	ldr	r3, [pc, #24]	; (17498 <nrf_cc3xx_platform_set_mutexes+0x34>)
   17480:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   17484:	e9c3 6500 	strd	r6, r5, [r3]
   17488:	e9c3 4002 	strd	r4, r0, [r3, #8]
   1748c:	611a      	str	r2, [r3, #16]
   1748e:	bc70      	pop	{r4, r5, r6}
   17490:	4770      	bx	lr
   17492:	bf00      	nop
   17494:	20000428 	.word	0x20000428
   17498:	20000438 	.word	0x20000438

0001749c <CC_LibInitNoRng>:
   1749c:	b508      	push	{r3, lr}
   1749e:	f000 f80f 	bl	174c0 <CC_HalInit>
   174a2:	b928      	cbnz	r0, 174b0 <CC_LibInitNoRng+0x14>
   174a4:	f000 f80e 	bl	174c4 <CC_PalInit>
   174a8:	b930      	cbnz	r0, 174b8 <CC_LibInitNoRng+0x1c>
   174aa:	4a04      	ldr	r2, [pc, #16]	; (174bc <CC_LibInitNoRng+0x20>)
   174ac:	6010      	str	r0, [r2, #0]
   174ae:	bd08      	pop	{r3, pc}
   174b0:	f000 f836 	bl	17520 <CC_PalTerminate>
   174b4:	2003      	movs	r0, #3
   174b6:	bd08      	pop	{r3, pc}
   174b8:	2004      	movs	r0, #4
   174ba:	bd08      	pop	{r3, pc}
   174bc:	50845a0c 	.word	0x50845a0c

000174c0 <CC_HalInit>:
   174c0:	2000      	movs	r0, #0
   174c2:	4770      	bx	lr

000174c4 <CC_PalInit>:
   174c4:	b510      	push	{r4, lr}
   174c6:	4811      	ldr	r0, [pc, #68]	; (1750c <CC_PalInit+0x48>)
   174c8:	f000 f848 	bl	1755c <CC_PalMutexCreate>
   174cc:	b100      	cbz	r0, 174d0 <CC_PalInit+0xc>
   174ce:	bd10      	pop	{r4, pc}
   174d0:	480f      	ldr	r0, [pc, #60]	; (17510 <CC_PalInit+0x4c>)
   174d2:	f000 f843 	bl	1755c <CC_PalMutexCreate>
   174d6:	2800      	cmp	r0, #0
   174d8:	d1f9      	bne.n	174ce <CC_PalInit+0xa>
   174da:	4c0e      	ldr	r4, [pc, #56]	; (17514 <CC_PalInit+0x50>)
   174dc:	4620      	mov	r0, r4
   174de:	f000 f83d 	bl	1755c <CC_PalMutexCreate>
   174e2:	2800      	cmp	r0, #0
   174e4:	d1f3      	bne.n	174ce <CC_PalInit+0xa>
   174e6:	4b0c      	ldr	r3, [pc, #48]	; (17518 <CC_PalInit+0x54>)
   174e8:	480c      	ldr	r0, [pc, #48]	; (1751c <CC_PalInit+0x58>)
   174ea:	601c      	str	r4, [r3, #0]
   174ec:	f000 f836 	bl	1755c <CC_PalMutexCreate>
   174f0:	4601      	mov	r1, r0
   174f2:	2800      	cmp	r0, #0
   174f4:	d1eb      	bne.n	174ce <CC_PalInit+0xa>
   174f6:	f000 f82d 	bl	17554 <CC_PalDmaInit>
   174fa:	4604      	mov	r4, r0
   174fc:	b108      	cbz	r0, 17502 <CC_PalInit+0x3e>
   174fe:	4620      	mov	r0, r4
   17500:	bd10      	pop	{r4, pc}
   17502:	f000 f83f 	bl	17584 <CC_PalPowerSaveModeInit>
   17506:	4620      	mov	r0, r4
   17508:	e7fa      	b.n	17500 <CC_PalInit+0x3c>
   1750a:	bf00      	nop
   1750c:	20000470 	.word	0x20000470
   17510:	20000464 	.word	0x20000464
   17514:	2000046c 	.word	0x2000046c
   17518:	20000474 	.word	0x20000474
   1751c:	20000468 	.word	0x20000468

00017520 <CC_PalTerminate>:
   17520:	b508      	push	{r3, lr}
   17522:	4808      	ldr	r0, [pc, #32]	; (17544 <CC_PalTerminate+0x24>)
   17524:	f000 f824 	bl	17570 <CC_PalMutexDestroy>
   17528:	4807      	ldr	r0, [pc, #28]	; (17548 <CC_PalTerminate+0x28>)
   1752a:	f000 f821 	bl	17570 <CC_PalMutexDestroy>
   1752e:	4807      	ldr	r0, [pc, #28]	; (1754c <CC_PalTerminate+0x2c>)
   17530:	f000 f81e 	bl	17570 <CC_PalMutexDestroy>
   17534:	4806      	ldr	r0, [pc, #24]	; (17550 <CC_PalTerminate+0x30>)
   17536:	f000 f81b 	bl	17570 <CC_PalMutexDestroy>
   1753a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1753e:	f000 b80b 	b.w	17558 <CC_PalDmaTerminate>
   17542:	bf00      	nop
   17544:	20000470 	.word	0x20000470
   17548:	20000464 	.word	0x20000464
   1754c:	2000046c 	.word	0x2000046c
   17550:	20000468 	.word	0x20000468

00017554 <CC_PalDmaInit>:
   17554:	2000      	movs	r0, #0
   17556:	4770      	bx	lr

00017558 <CC_PalDmaTerminate>:
   17558:	4770      	bx	lr
   1755a:	bf00      	nop

0001755c <CC_PalMutexCreate>:
   1755c:	b508      	push	{r3, lr}
   1755e:	4b03      	ldr	r3, [pc, #12]	; (1756c <CC_PalMutexCreate+0x10>)
   17560:	6802      	ldr	r2, [r0, #0]
   17562:	681b      	ldr	r3, [r3, #0]
   17564:	6810      	ldr	r0, [r2, #0]
   17566:	4798      	blx	r3
   17568:	2000      	movs	r0, #0
   1756a:	bd08      	pop	{r3, pc}
   1756c:	20000428 	.word	0x20000428

00017570 <CC_PalMutexDestroy>:
   17570:	b508      	push	{r3, lr}
   17572:	4b03      	ldr	r3, [pc, #12]	; (17580 <CC_PalMutexDestroy+0x10>)
   17574:	6802      	ldr	r2, [r0, #0]
   17576:	685b      	ldr	r3, [r3, #4]
   17578:	6810      	ldr	r0, [r2, #0]
   1757a:	4798      	blx	r3
   1757c:	2000      	movs	r0, #0
   1757e:	bd08      	pop	{r3, pc}
   17580:	20000428 	.word	0x20000428

00017584 <CC_PalPowerSaveModeInit>:
   17584:	b570      	push	{r4, r5, r6, lr}
   17586:	4c09      	ldr	r4, [pc, #36]	; (175ac <CC_PalPowerSaveModeInit+0x28>)
   17588:	4d09      	ldr	r5, [pc, #36]	; (175b0 <CC_PalPowerSaveModeInit+0x2c>)
   1758a:	6920      	ldr	r0, [r4, #16]
   1758c:	68ab      	ldr	r3, [r5, #8]
   1758e:	4798      	blx	r3
   17590:	b118      	cbz	r0, 1759a <CC_PalPowerSaveModeInit+0x16>
   17592:	4b08      	ldr	r3, [pc, #32]	; (175b4 <CC_PalPowerSaveModeInit+0x30>)
   17594:	4808      	ldr	r0, [pc, #32]	; (175b8 <CC_PalPowerSaveModeInit+0x34>)
   17596:	685b      	ldr	r3, [r3, #4]
   17598:	4798      	blx	r3
   1759a:	2100      	movs	r1, #0
   1759c:	4a07      	ldr	r2, [pc, #28]	; (175bc <CC_PalPowerSaveModeInit+0x38>)
   1759e:	68eb      	ldr	r3, [r5, #12]
   175a0:	6011      	str	r1, [r2, #0]
   175a2:	6920      	ldr	r0, [r4, #16]
   175a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   175a8:	4718      	bx	r3
   175aa:	bf00      	nop
   175ac:	20000438 	.word	0x20000438
   175b0:	20000428 	.word	0x20000428
   175b4:	20000418 	.word	0x20000418
   175b8:	00024104 	.word	0x00024104
   175bc:	20029f44 	.word	0x20029f44

000175c0 <chart_update>:
{
   175c0:	b570      	push	{r4, r5, r6, lr}
   175c2:	4604      	mov	r4, r0
   175c4:	460d      	mov	r5, r1
   175c6:	4616      	mov	r6, r2
    lv_chart_set_next(chart->chart_obj, chart->series[0], data[0]);
   175c8:	f9b1 2000 	ldrsh.w	r2, [r1]
   175cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   175d0:	f00a fb7c 	bl	21ccc <lv_chart_set_next>
    lv_chart_set_next(chart->chart_obj, chart->series[1], data[1]);
   175d4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   175d8:	68a1      	ldr	r1, [r4, #8]
   175da:	6820      	ldr	r0, [r4, #0]
   175dc:	f00a fb76 	bl	21ccc <lv_chart_set_next>
    lv_chart_set_next(chart->chart_obj, chart->series[2], data[2]);
   175e0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   175e4:	68e1      	ldr	r1, [r4, #12]
   175e6:	6820      	ldr	r0, [r4, #0]
   175e8:	f00a fb70 	bl	21ccc <lv_chart_set_next>
    if (refresh) {
   175ec:	b126      	cbz	r6, 175f8 <chart_update+0x38>
        lv_chart_refresh(chart->chart_obj);
   175ee:	6820      	ldr	r0, [r4, #0]
}
   175f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_chart_refresh(chart->chart_obj);
   175f4:	f00a bc3e 	b.w	21e74 <lv_chart_refresh>
}
   175f8:	bd70      	pop	{r4, r5, r6, pc}

000175fa <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   175fa:	4603      	mov	r3, r0
   175fc:	b140      	cbz	r0, 17610 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   175fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17600:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   17604:	2a02      	cmp	r2, #2
   17606:	d006      	beq.n	17616 <sys_notify_validate+0x1c>
   17608:	2a03      	cmp	r2, #3
   1760a:	d004      	beq.n	17616 <sys_notify_validate+0x1c>
   1760c:	2a01      	cmp	r2, #1
   1760e:	d005      	beq.n	1761c <sys_notify_validate+0x22>
		return -EINVAL;
   17610:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   17614:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   17616:	681a      	ldr	r2, [r3, #0]
   17618:	2a00      	cmp	r2, #0
   1761a:	d0f9      	beq.n	17610 <sys_notify_validate+0x16>
		notify->result = 0;
   1761c:	2000      	movs	r0, #0
   1761e:	6098      	str	r0, [r3, #8]
   17620:	4770      	bx	lr

00017622 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17622:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   17624:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   17626:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1762a:	2a02      	cmp	r2, #2
{
   1762c:	4603      	mov	r3, r0
	notify->result = res;
   1762e:	6081      	str	r1, [r0, #8]
	switch (method) {
   17630:	d00a      	beq.n	17648 <sys_notify_finalize+0x26>
   17632:	2a03      	cmp	r2, #3
   17634:	d10b      	bne.n	1764e <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   17636:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   17638:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1763a:	2200      	movs	r2, #0
   1763c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1763e:	b108      	cbz	r0, 17644 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   17640:	f7ff fe28 	bl	17294 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   17644:	4620      	mov	r0, r4
   17646:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   17648:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1764a:	6800      	ldr	r0, [r0, #0]
		break;
   1764c:	e7f5      	b.n	1763a <sys_notify_finalize+0x18>
	switch (method) {
   1764e:	2400      	movs	r4, #0
   17650:	4620      	mov	r0, r4
   17652:	e7f2      	b.n	1763a <sys_notify_finalize+0x18>

00017654 <arch_printk_char_out>:
}
   17654:	2000      	movs	r0, #0
   17656:	4770      	bx	lr

00017658 <str_out>:
{
   17658:	b530      	push	{r4, r5, lr}
   1765a:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1765c:	680c      	ldr	r4, [r1, #0]
   1765e:	1c55      	adds	r5, r2, #1
   17660:	b114      	cbz	r4, 17668 <str_out+0x10>
   17662:	684b      	ldr	r3, [r1, #4]
   17664:	4293      	cmp	r3, r2
   17666:	dc01      	bgt.n	1766c <str_out+0x14>
		ctx->count++;
   17668:	608d      	str	r5, [r1, #8]
}
   1766a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1766c:	3b01      	subs	r3, #1
   1766e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   17670:	bf08      	it	eq
   17672:	2200      	moveq	r2, #0
   17674:	608d      	str	r5, [r1, #8]
   17676:	bf0c      	ite	eq
   17678:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1767a:	54a0      	strbne	r0, [r4, r2]
   1767c:	e7f5      	b.n	1766a <str_out+0x12>

0001767e <printk>:
{
   1767e:	b40f      	push	{r0, r1, r2, r3}
   17680:	b507      	push	{r0, r1, r2, lr}
   17682:	a904      	add	r1, sp, #16
   17684:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   17688:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1768a:	f7e9 ff71 	bl	1570 <vprintk>
}
   1768e:	b003      	add	sp, #12
   17690:	f85d eb04 	ldr.w	lr, [sp], #4
   17694:	b004      	add	sp, #16
   17696:	4770      	bx	lr

00017698 <snprintk>:
{
   17698:	b40c      	push	{r2, r3}
   1769a:	b507      	push	{r0, r1, r2, lr}
   1769c:	ab04      	add	r3, sp, #16
   1769e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   176a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   176a4:	f7e9 ff72 	bl	158c <vsnprintk>
}
   176a8:	b003      	add	sp, #12
   176aa:	f85d eb04 	ldr.w	lr, [sp], #4
   176ae:	b002      	add	sp, #8
   176b0:	4770      	bx	lr

000176b2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   176b2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   176b4:	f013 0307 	ands.w	r3, r3, #7
   176b8:	d105      	bne.n	176c6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   176ba:	6803      	ldr	r3, [r0, #0]
   176bc:	2b00      	cmp	r3, #0
		evt = EVT_START;
   176be:	bf0c      	ite	eq
   176c0:	2000      	moveq	r0, #0
   176c2:	2003      	movne	r0, #3
   176c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   176c6:	2b02      	cmp	r3, #2
   176c8:	d105      	bne.n	176d6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   176ca:	8b43      	ldrh	r3, [r0, #26]
   176cc:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   176ce:	bf14      	ite	ne
   176d0:	2000      	movne	r0, #0
   176d2:	2004      	moveq	r0, #4
   176d4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   176d6:	2b01      	cmp	r3, #1
   176d8:	d105      	bne.n	176e6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   176da:	6803      	ldr	r3, [r0, #0]
   176dc:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   176de:	bf0c      	ite	eq
   176e0:	2000      	moveq	r0, #0
   176e2:	2005      	movne	r0, #5
   176e4:	4770      	bx	lr
	int evt = EVT_NOP;
   176e6:	2000      	movs	r0, #0
}
   176e8:	4770      	bx	lr

000176ea <notify_one>:
{
   176ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176ee:	460d      	mov	r5, r1
   176f0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   176f2:	4619      	mov	r1, r3
   176f4:	1d28      	adds	r0, r5, #4
{
   176f6:	4690      	mov	r8, r2
   176f8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   176fa:	f7ff ff92 	bl	17622 <sys_notify_finalize>
	if (cb) {
   176fe:	4604      	mov	r4, r0
   17700:	b138      	cbz	r0, 17712 <notify_one+0x28>
		cb(mgr, cli, state, res);
   17702:	4633      	mov	r3, r6
   17704:	4642      	mov	r2, r8
   17706:	4629      	mov	r1, r5
   17708:	4638      	mov	r0, r7
   1770a:	46a4      	mov	ip, r4
}
   1770c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   17710:	4760      	bx	ip
}
   17712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017716 <transition_complete>:
{
   17716:	b410      	push	{r4}
	__asm__ volatile(
   17718:	f04f 0420 	mov.w	r4, #32
   1771c:	f3ef 8211 	mrs	r2, BASEPRI
   17720:	f384 8811 	msr	BASEPRI, r4
   17724:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   17728:	6141      	str	r1, [r0, #20]
}
   1772a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1772c:	2101      	movs	r1, #1
   1772e:	f7e9 bf41 	b.w	15b4 <process_event>

00017732 <validate_args>:
{
   17732:	b510      	push	{r4, lr}
   17734:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17736:	b140      	cbz	r0, 1774a <validate_args+0x18>
   17738:	b139      	cbz	r1, 1774a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1773a:	1d08      	adds	r0, r1, #4
   1773c:	f7ff ff5d 	bl	175fa <sys_notify_validate>
	if ((rv == 0)
   17740:	b928      	cbnz	r0, 1774e <validate_args+0x1c>
	    && ((cli->notify.flags
   17742:	68a3      	ldr	r3, [r4, #8]
   17744:	f033 0303 	bics.w	r3, r3, #3
   17748:	d001      	beq.n	1774e <validate_args+0x1c>
		rv = -EINVAL;
   1774a:	f06f 0015 	mvn.w	r0, #21
}
   1774e:	bd10      	pop	{r4, pc}

00017750 <onoff_manager_init>:
{
   17750:	b538      	push	{r3, r4, r5, lr}
   17752:	460c      	mov	r4, r1
	if ((mgr == NULL)
   17754:	4605      	mov	r5, r0
   17756:	b158      	cbz	r0, 17770 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17758:	b151      	cbz	r1, 17770 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1775a:	680b      	ldr	r3, [r1, #0]
   1775c:	b143      	cbz	r3, 17770 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1775e:	684b      	ldr	r3, [r1, #4]
   17760:	b133      	cbz	r3, 17770 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17762:	221c      	movs	r2, #28
   17764:	2100      	movs	r1, #0
   17766:	f001 fd7a 	bl	1925e <memset>
	return 0;
   1776a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1776c:	612c      	str	r4, [r5, #16]
}
   1776e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17770:	f06f 0015 	mvn.w	r0, #21
   17774:	e7fb      	b.n	1776e <onoff_manager_init+0x1e>

00017776 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   17776:	b570      	push	{r4, r5, r6, lr}
   17778:	4604      	mov	r4, r0
   1777a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1777c:	f7ff ffd9 	bl	17732 <validate_args>

	if (rv < 0) {
   17780:	1e05      	subs	r5, r0, #0
   17782:	db31      	blt.n	177e8 <onoff_request+0x72>
   17784:	f04f 0320 	mov.w	r3, #32
   17788:	f3ef 8111 	mrs	r1, BASEPRI
   1778c:	f383 8811 	msr	BASEPRI, r3
   17790:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   17794:	f64f 75ff 	movw	r5, #65535	; 0xffff
   17798:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1779a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1779c:	42ab      	cmp	r3, r5
   1779e:	f000 0207 	and.w	r2, r0, #7
   177a2:	d02e      	beq.n	17802 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   177a4:	2a02      	cmp	r2, #2
   177a6:	d10e      	bne.n	177c6 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   177a8:	3301      	adds	r3, #1
   177aa:	8363      	strh	r3, [r4, #26]
	rv = state;
   177ac:	4615      	mov	r5, r2
		notify = true;
   177ae:	2301      	movs	r3, #1
	__asm__ volatile(
   177b0:	f381 8811 	msr	BASEPRI, r1
   177b4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   177b8:	b1b3      	cbz	r3, 177e8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   177ba:	2300      	movs	r3, #0
   177bc:	4631      	mov	r1, r6
   177be:	4620      	mov	r0, r4
   177c0:	f7ff ff93 	bl	176ea <notify_one>
   177c4:	e010      	b.n	177e8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   177c6:	0783      	lsls	r3, r0, #30
   177c8:	d001      	beq.n	177ce <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   177ca:	2a06      	cmp	r2, #6
   177cc:	d10e      	bne.n	177ec <onoff_request+0x76>
	parent->next = child;
   177ce:	2300      	movs	r3, #0
   177d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   177d2:	6863      	ldr	r3, [r4, #4]
   177d4:	b993      	cbnz	r3, 177fc <onoff_request+0x86>
	list->head = node;
   177d6:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   177da:	4615      	mov	r5, r2
   177dc:	b962      	cbnz	r2, 177f8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   177de:	460a      	mov	r2, r1
   177e0:	4620      	mov	r0, r4
   177e2:	2102      	movs	r1, #2
   177e4:	f7e9 fee6 	bl	15b4 <process_event>
		}
	}

	return rv;
}
   177e8:	4628      	mov	r0, r5
   177ea:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   177ec:	2a05      	cmp	r2, #5
   177ee:	bf0c      	ite	eq
   177f0:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   177f4:	f06f 0504 	mvnne.w	r5, #4
   177f8:	2300      	movs	r3, #0
   177fa:	e7d9      	b.n	177b0 <onoff_request+0x3a>
	parent->next = child;
   177fc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   177fe:	6066      	str	r6, [r4, #4]
}
   17800:	e7eb      	b.n	177da <onoff_request+0x64>
		rv = -EAGAIN;
   17802:	f06f 050a 	mvn.w	r5, #10
   17806:	e7f7      	b.n	177f8 <onoff_request+0x82>

00017808 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   17808:	4604      	mov	r4, r0
   1780a:	b508      	push	{r3, lr}
   1780c:	4608      	mov	r0, r1
   1780e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   17810:	461a      	mov	r2, r3
   17812:	47a0      	blx	r4
	return z_impl_k_current_get();
   17814:	f7ff f900 	bl	16a18 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   17818:	f7ec ff98 	bl	474c <z_impl_k_thread_abort>

0001781c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1781c:	b510      	push	{r4, lr}
   1781e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   17820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17828:	4620      	mov	r0, r4
   1782a:	f7fe fd29 	bl	16280 <z_impl_k_queue_get>
   1782e:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   17830:	2800      	cmp	r0, #0
   17832:	d0f5      	beq.n	17820 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   17834:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17836:	3308      	adds	r3, #8
   17838:	e8d3 1fef 	ldaex	r1, [r3]
   1783c:	f021 0c01 	bic.w	ip, r1, #1
   17840:	e8c3 cfee 	stlex	lr, ip, [r3]
   17844:	f1be 0f00 	cmp.w	lr, #0
   17848:	d1f6      	bne.n	17838 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1784a:	07cb      	lsls	r3, r1, #31
   1784c:	d500      	bpl.n	17850 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1784e:	4790      	blx	r2
	z_impl_k_yield();
   17850:	f7ff f872 	bl	16938 <z_impl_k_yield>
   17854:	e7e4      	b.n	17820 <z_work_q_main+0x4>

00017856 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   17856:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   17858:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1785c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   17860:	bf2c      	ite	cs
   17862:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   17866:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1786a:	4770      	bx	lr

0001786c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1786c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   17870:	6880      	ldr	r0, [r0, #8]
   17872:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   17876:	bf2c      	ite	cs
   17878:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1787c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   17880:	4770      	bx	lr

00017882 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   17882:	2201      	movs	r2, #1
{
   17884:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   17886:	f7ff ffe6 	bl	17856 <chunk_field>
}
   1788a:	0840      	lsrs	r0, r0, #1
   1788c:	bd08      	pop	{r3, pc}

0001788e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1788e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   17890:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   17894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17898:	d308      	bcc.n	178ac <set_chunk_used+0x1e>
		if (used) {
   1789a:	684b      	ldr	r3, [r1, #4]
   1789c:	b11a      	cbz	r2, 178a6 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1789e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   178a2:	604b      	str	r3, [r1, #4]
   178a4:	4770      	bx	lr
   178a6:	f023 0301 	bic.w	r3, r3, #1
   178aa:	e7fa      	b.n	178a2 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   178ac:	884b      	ldrh	r3, [r1, #2]
   178ae:	b11a      	cbz	r2, 178b8 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   178b0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   178b4:	804b      	strh	r3, [r1, #2]
		}
	}
}
   178b6:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   178b8:	f023 0301 	bic.w	r3, r3, #1
   178bc:	e7fa      	b.n	178b4 <set_chunk_used+0x26>

000178be <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   178be:	0053      	lsls	r3, r2, #1
   178c0:	2201      	movs	r2, #1
   178c2:	f7ff bfd3 	b.w	1786c <chunk_set>

000178c6 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   178c6:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   178c8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   178ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   178ce:	bf2c      	ite	cs
   178d0:	2002      	movcs	r0, #2
   178d2:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   178d4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   178d6:	fab0 f080 	clz	r0, r0
}
   178da:	f1c0 001f 	rsb	r0, r0, #31
   178de:	4770      	bx	lr

000178e0 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   178e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178e4:	4616      	mov	r6, r2
   178e6:	4604      	mov	r4, r0
   178e8:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   178ea:	f7ff ffca 	bl	17882 <chunk_size>
   178ee:	4631      	mov	r1, r6
   178f0:	4605      	mov	r5, r0
   178f2:	4620      	mov	r0, r4
   178f4:	f7ff ffc5 	bl	17882 <chunk_size>
   178f8:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   178fa:	462a      	mov	r2, r5
   178fc:	4639      	mov	r1, r7
   178fe:	4620      	mov	r0, r4
   17900:	f7ff ffdd 	bl	178be <set_chunk_size>
	return c + chunk_size(h, c);
   17904:	4631      	mov	r1, r6
   17906:	4620      	mov	r0, r4
   17908:	f7ff ffbb 	bl	17882 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1790c:	462b      	mov	r3, r5
   1790e:	1831      	adds	r1, r6, r0
   17910:	2200      	movs	r2, #0
   17912:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   17914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17918:	f7ff bfa8 	b.w	1786c <chunk_set>

0001791c <split_chunks>:
{
   1791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17920:	4614      	mov	r4, r2
   17922:	460e      	mov	r6, r1
   17924:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   17926:	f7ff ffac 	bl	17882 <chunk_size>
	size_t lsz = rc - lc;
   1792a:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1792e:	1b37      	subs	r7, r6, r4
   17930:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   17932:	4642      	mov	r2, r8
   17934:	4631      	mov	r1, r6
   17936:	4628      	mov	r0, r5
   17938:	f7ff ffc1 	bl	178be <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1793c:	463a      	mov	r2, r7
   1793e:	4621      	mov	r1, r4
   17940:	4628      	mov	r0, r5
   17942:	f7ff ffbc 	bl	178be <set_chunk_size>
   17946:	4643      	mov	r3, r8
   17948:	2200      	movs	r2, #0
   1794a:	4621      	mov	r1, r4
   1794c:	4628      	mov	r0, r5
   1794e:	f7ff ff8d 	bl	1786c <chunk_set>
	return c + chunk_size(h, c);
   17952:	4621      	mov	r1, r4
   17954:	4628      	mov	r0, r5
   17956:	f7ff ff94 	bl	17882 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1795a:	463b      	mov	r3, r7
   1795c:	1821      	adds	r1, r4, r0
   1795e:	2200      	movs	r2, #0
   17960:	4628      	mov	r0, r5
}
   17962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17966:	f7ff bf81 	b.w	1786c <chunk_set>

0001796a <free_list_remove_bidx>:
{
   1796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1796e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   17970:	2203      	movs	r2, #3
   17972:	460e      	mov	r6, r1
   17974:	4604      	mov	r4, r0
   17976:	f7ff ff6e 	bl	17856 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1797a:	4286      	cmp	r6, r0
   1797c:	4605      	mov	r5, r0
   1797e:	f107 0804 	add.w	r8, r7, #4
   17982:	d10b      	bne.n	1799c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   17984:	2301      	movs	r3, #1
   17986:	fa03 f707 	lsl.w	r7, r3, r7
   1798a:	68e3      	ldr	r3, [r4, #12]
   1798c:	ea23 0307 	bic.w	r3, r3, r7
   17990:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   17992:	2300      	movs	r3, #0
   17994:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   17998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1799c:	4631      	mov	r1, r6
   1799e:	2202      	movs	r2, #2
   179a0:	4620      	mov	r0, r4
   179a2:	f7ff ff58 	bl	17856 <chunk_field>
   179a6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   179a8:	462b      	mov	r3, r5
   179aa:	4601      	mov	r1, r0
   179ac:	2203      	movs	r2, #3
   179ae:	4620      	mov	r0, r4
		b->next = second;
   179b0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   179b4:	f7ff ff5a 	bl	1786c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   179b8:	4633      	mov	r3, r6
   179ba:	4629      	mov	r1, r5
   179bc:	4620      	mov	r0, r4
}
   179be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   179c2:	2202      	movs	r2, #2
   179c4:	f7ff bf52 	b.w	1786c <chunk_set>

000179c8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   179c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179cc:	4604      	mov	r4, r0
   179ce:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   179d0:	f7ff ff79 	bl	178c6 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   179d4:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   179d6:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   179d8:	4620      	mov	r0, r4
   179da:	f7ff ff74 	bl	178c6 <bucket_idx>
   179de:	42a8      	cmp	r0, r5
   179e0:	da03      	bge.n	179ea <alloc_chunk+0x22>
		return 0;
   179e2:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   179e4:	4630      	mov	r0, r6
   179e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   179ea:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   179ee:	f8da 9010 	ldr.w	r9, [sl, #16]
   179f2:	f1b9 0f00 	cmp.w	r9, #0
   179f6:	d019      	beq.n	17a2c <alloc_chunk+0x64>
   179f8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   179fa:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   179fe:	4620      	mov	r0, r4
   17a00:	4631      	mov	r1, r6
   17a02:	f7ff ff3e 	bl	17882 <chunk_size>
   17a06:	4540      	cmp	r0, r8
   17a08:	d305      	bcc.n	17a16 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   17a0a:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   17a0c:	4631      	mov	r1, r6
   17a0e:	4620      	mov	r0, r4
   17a10:	f7ff ffab 	bl	1796a <free_list_remove_bidx>
		return c;
   17a14:	e7e6      	b.n	179e4 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   17a16:	2203      	movs	r2, #3
   17a18:	4631      	mov	r1, r6
   17a1a:	4620      	mov	r0, r4
   17a1c:	f7ff ff1b 	bl	17856 <chunk_field>
		} while (--i && b->next != first);
   17a20:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   17a22:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   17a26:	d001      	beq.n	17a2c <alloc_chunk+0x64>
   17a28:	4581      	cmp	r9, r0
   17a2a:	d1e6      	bne.n	179fa <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   17a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17a30:	68e3      	ldr	r3, [r4, #12]
   17a32:	3501      	adds	r5, #1
   17a34:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   17a36:	401a      	ands	r2, r3
   17a38:	d0d3      	beq.n	179e2 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   17a3a:	fa92 f2a2 	rbit	r2, r2
   17a3e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   17a42:	1d13      	adds	r3, r2, #4
   17a44:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   17a48:	e7e0      	b.n	17a0c <alloc_chunk+0x44>

00017a4a <free_list_add>:
{
   17a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a4e:	4604      	mov	r4, r0
   17a50:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   17a52:	f7ff ff16 	bl	17882 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   17a56:	68a3      	ldr	r3, [r4, #8]
   17a58:	4601      	mov	r1, r0
   17a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17a5e:	d301      	bcc.n	17a64 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   17a60:	2801      	cmp	r0, #1
   17a62:	d035      	beq.n	17ad0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   17a64:	4620      	mov	r0, r4
   17a66:	f7ff ff2e 	bl	178c6 <bucket_idx>
	if (b->next == 0U) {
   17a6a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   17a6e:	6916      	ldr	r6, [r2, #16]
   17a70:	b99e      	cbnz	r6, 17a9a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   17a72:	2301      	movs	r3, #1
   17a74:	fa03 f000 	lsl.w	r0, r3, r0
   17a78:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   17a7a:	4629      	mov	r1, r5
   17a7c:	4303      	orrs	r3, r0
   17a7e:	60e3      	str	r3, [r4, #12]
   17a80:	4620      	mov	r0, r4
		b->next = c;
   17a82:	6115      	str	r5, [r2, #16]
   17a84:	462b      	mov	r3, r5
   17a86:	2202      	movs	r2, #2
   17a88:	f7ff fef0 	bl	1786c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   17a8c:	2203      	movs	r2, #3
   17a8e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   17a90:	4620      	mov	r0, r4
}
   17a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17a96:	f7ff bee9 	b.w	1786c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   17a9a:	2202      	movs	r2, #2
   17a9c:	4631      	mov	r1, r6
   17a9e:	4620      	mov	r0, r4
   17aa0:	f7ff fed9 	bl	17856 <chunk_field>
   17aa4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   17aa6:	4603      	mov	r3, r0
   17aa8:	2202      	movs	r2, #2
   17aaa:	4629      	mov	r1, r5
   17aac:	4620      	mov	r0, r4
   17aae:	f7ff fedd 	bl	1786c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   17ab2:	4633      	mov	r3, r6
   17ab4:	2203      	movs	r2, #3
   17ab6:	4629      	mov	r1, r5
   17ab8:	4620      	mov	r0, r4
   17aba:	f7ff fed7 	bl	1786c <chunk_set>
   17abe:	2203      	movs	r2, #3
   17ac0:	4639      	mov	r1, r7
   17ac2:	462b      	mov	r3, r5
   17ac4:	4620      	mov	r0, r4
   17ac6:	f7ff fed1 	bl	1786c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   17aca:	2202      	movs	r2, #2
   17acc:	4631      	mov	r1, r6
   17ace:	e7df      	b.n	17a90 <free_list_add+0x46>
   17ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017ad4 <free_list_remove>:
{
   17ad4:	b538      	push	{r3, r4, r5, lr}
   17ad6:	4604      	mov	r4, r0
   17ad8:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   17ada:	f7ff fed2 	bl	17882 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   17ade:	68a3      	ldr	r3, [r4, #8]
   17ae0:	4601      	mov	r1, r0
   17ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17ae6:	d301      	bcc.n	17aec <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   17ae8:	2801      	cmp	r0, #1
   17aea:	d009      	beq.n	17b00 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   17aec:	4620      	mov	r0, r4
   17aee:	f7ff feea 	bl	178c6 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   17af2:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   17af4:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   17af6:	4620      	mov	r0, r4
}
   17af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   17afc:	f7ff bf35 	b.w	1796a <free_list_remove_bidx>
}
   17b00:	bd38      	pop	{r3, r4, r5, pc}

00017b02 <free_chunk>:
{
   17b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b04:	460c      	mov	r4, r1
   17b06:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   17b08:	f7ff febb 	bl	17882 <chunk_size>
   17b0c:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17b0e:	2201      	movs	r2, #1
   17b10:	4631      	mov	r1, r6
   17b12:	4628      	mov	r0, r5
   17b14:	f7ff fe9f 	bl	17856 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   17b18:	07c3      	lsls	r3, r0, #31
   17b1a:	d40c      	bmi.n	17b36 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   17b1c:	4631      	mov	r1, r6
   17b1e:	4628      	mov	r0, r5
   17b20:	f7ff ffd8 	bl	17ad4 <free_list_remove>
	return c + chunk_size(h, c);
   17b24:	4621      	mov	r1, r4
   17b26:	4628      	mov	r0, r5
   17b28:	f7ff feab 	bl	17882 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   17b2c:	4621      	mov	r1, r4
   17b2e:	1822      	adds	r2, r4, r0
   17b30:	4628      	mov	r0, r5
   17b32:	f7ff fed5 	bl	178e0 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   17b36:	2200      	movs	r2, #0
   17b38:	4621      	mov	r1, r4
   17b3a:	4628      	mov	r0, r5
   17b3c:	f7ff fe8b 	bl	17856 <chunk_field>
   17b40:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17b42:	2201      	movs	r2, #1
   17b44:	4639      	mov	r1, r7
   17b46:	4628      	mov	r0, r5
   17b48:	f7ff fe85 	bl	17856 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   17b4c:	f010 0601 	ands.w	r6, r0, #1
   17b50:	d113      	bne.n	17b7a <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   17b52:	4639      	mov	r1, r7
   17b54:	4628      	mov	r0, r5
   17b56:	f7ff ffbd 	bl	17ad4 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   17b5a:	4621      	mov	r1, r4
   17b5c:	4632      	mov	r2, r6
   17b5e:	4628      	mov	r0, r5
   17b60:	f7ff fe79 	bl	17856 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   17b64:	4622      	mov	r2, r4
   17b66:	1a21      	subs	r1, r4, r0
   17b68:	4628      	mov	r0, r5
   17b6a:	f7ff feb9 	bl	178e0 <merge_chunks>
   17b6e:	4621      	mov	r1, r4
   17b70:	4632      	mov	r2, r6
   17b72:	4628      	mov	r0, r5
   17b74:	f7ff fe6f 	bl	17856 <chunk_field>
   17b78:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   17b7a:	4621      	mov	r1, r4
   17b7c:	4628      	mov	r0, r5
}
   17b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   17b82:	f7ff bf62 	b.w	17a4a <free_list_add>

00017b86 <sys_heap_free>:
{
   17b86:	b510      	push	{r4, lr}
	if (mem == NULL) {
   17b88:	b191      	cbz	r1, 17bb0 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   17b8a:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
   17b8c:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   17b8e:	6883      	ldr	r3, [r0, #8]
   17b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17b94:	bf2c      	ite	cs
   17b96:	2408      	movcs	r4, #8
   17b98:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17b9a:	1b0c      	subs	r4, r1, r4
   17b9c:	1a24      	subs	r4, r4, r0
   17b9e:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   17ba0:	4621      	mov	r1, r4
   17ba2:	f7ff fe74 	bl	1788e <set_chunk_used>
	free_chunk(h, c);
   17ba6:	4621      	mov	r1, r4
}
   17ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   17bac:	f7ff bfa9 	b.w	17b02 <free_chunk>
}
   17bb0:	bd10      	pop	{r4, pc}

00017bb2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   17bb2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   17bb4:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   17bb6:	b909      	cbnz	r1, 17bbc <sys_heap_alloc+0xa>
		return NULL;
   17bb8:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   17bba:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   17bbc:	68ab      	ldr	r3, [r5, #8]
   17bbe:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   17bc2:	d9f9      	bls.n	17bb8 <sys_heap_alloc+0x6>
   17bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17bc8:	bf2c      	ite	cs
   17bca:	2208      	movcs	r2, #8
   17bcc:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17bce:	1dcc      	adds	r4, r1, #7
   17bd0:	4414      	add	r4, r2
   17bd2:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   17bd4:	4621      	mov	r1, r4
   17bd6:	4628      	mov	r0, r5
   17bd8:	f7ff fef6 	bl	179c8 <alloc_chunk>
	if (c == 0U) {
   17bdc:	4606      	mov	r6, r0
   17bde:	2800      	cmp	r0, #0
   17be0:	d0ea      	beq.n	17bb8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   17be2:	4601      	mov	r1, r0
   17be4:	4628      	mov	r0, r5
   17be6:	f7ff fe4c 	bl	17882 <chunk_size>
   17bea:	42a0      	cmp	r0, r4
   17bec:	d909      	bls.n	17c02 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   17bee:	4434      	add	r4, r6
   17bf0:	4631      	mov	r1, r6
   17bf2:	4628      	mov	r0, r5
   17bf4:	4622      	mov	r2, r4
   17bf6:	f7ff fe91 	bl	1791c <split_chunks>
		free_list_add(h, c + chunk_sz);
   17bfa:	4621      	mov	r1, r4
   17bfc:	4628      	mov	r0, r5
   17bfe:	f7ff ff24 	bl	17a4a <free_list_add>
	set_chunk_used(h, c, true);
   17c02:	4628      	mov	r0, r5
   17c04:	2201      	movs	r2, #1
   17c06:	4631      	mov	r1, r6
   17c08:	f7ff fe41 	bl	1788e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   17c0c:	68ab      	ldr	r3, [r5, #8]
   17c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17c12:	bf2c      	ite	cs
   17c14:	2008      	movcs	r0, #8
   17c16:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   17c18:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   17c1c:	4428      	add	r0, r5
	return chunk_mem(h, c);
   17c1e:	e7cc      	b.n	17bba <sys_heap_alloc+0x8>

00017c20 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   17c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   17c24:	6805      	ldr	r5, [r0, #0]
{
   17c26:	4614      	mov	r4, r2
   17c28:	68ab      	ldr	r3, [r5, #8]
   17c2a:	460f      	mov	r7, r1
   17c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17c30:	bf2c      	ite	cs
   17c32:	2208      	movcs	r2, #8
   17c34:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   17c36:	4291      	cmp	r1, r2
   17c38:	d804      	bhi.n	17c44 <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   17c3a:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   17c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   17c40:	f7ff bfb7 	b.w	17bb2 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   17c44:	b91c      	cbnz	r4, 17c4e <sys_heap_aligned_alloc+0x2e>
		return NULL;
   17c46:	2600      	movs	r6, #0
}
   17c48:	4630      	mov	r0, r6
   17c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   17c4e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   17c52:	d9f8      	bls.n	17c46 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17c54:	1de1      	adds	r1, r4, #7
   17c56:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   17c58:	4628      	mov	r0, r5
   17c5a:	08c9      	lsrs	r1, r1, #3
   17c5c:	f7ff feb4 	bl	179c8 <alloc_chunk>
	if (c0 == 0) {
   17c60:	4680      	mov	r8, r0
   17c62:	2800      	cmp	r0, #0
   17c64:	d0ef      	beq.n	17c46 <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   17c66:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   17c68:	1e7a      	subs	r2, r7, #1
   17c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17c6e:	bf2c      	ite	cs
   17c70:	2308      	movcs	r3, #8
   17c72:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   17c74:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   17c78:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   17c7a:	427f      	negs	r7, r7
   17c7c:	4416      	add	r6, r2
   17c7e:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17c80:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17c82:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17c84:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17c86:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17c88:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   17c8c:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   17c8e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17c92:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   17c96:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   17c9a:	d208      	bcs.n	17cae <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   17c9c:	4601      	mov	r1, r0
   17c9e:	463a      	mov	r2, r7
   17ca0:	4628      	mov	r0, r5
   17ca2:	f7ff fe3b 	bl	1791c <split_chunks>
		free_list_add(h, c0);
   17ca6:	4641      	mov	r1, r8
   17ca8:	4628      	mov	r0, r5
   17caa:	f7ff fece 	bl	17a4a <free_list_add>
	return c + chunk_size(h, c);
   17cae:	4639      	mov	r1, r7
   17cb0:	4628      	mov	r0, r5
   17cb2:	f7ff fde6 	bl	17882 <chunk_size>
   17cb6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   17cb8:	4284      	cmp	r4, r0
   17cba:	d208      	bcs.n	17cce <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   17cbc:	4639      	mov	r1, r7
   17cbe:	4628      	mov	r0, r5
   17cc0:	4622      	mov	r2, r4
   17cc2:	f7ff fe2b 	bl	1791c <split_chunks>
		free_list_add(h, c_end);
   17cc6:	4621      	mov	r1, r4
   17cc8:	4628      	mov	r0, r5
   17cca:	f7ff febe 	bl	17a4a <free_list_add>
	set_chunk_used(h, c, true);
   17cce:	2201      	movs	r2, #1
   17cd0:	4639      	mov	r1, r7
   17cd2:	4628      	mov	r0, r5
   17cd4:	f7ff fddb 	bl	1788e <set_chunk_used>
	return mem;
   17cd8:	e7b6      	b.n	17c48 <sys_heap_aligned_alloc+0x28>

00017cda <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   17cda:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   17cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ce0:	bf2c      	ite	cs
   17ce2:	2508      	movcs	r5, #8
   17ce4:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   17ce6:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   17ce8:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   17cea:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   17cec:	1dcc      	adds	r4, r1, #7
   17cee:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   17cf2:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   17cf4:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   17cf8:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   17cfa:	440d      	add	r5, r1
   17cfc:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   17d00:	1b2d      	subs	r5, r5, r4
   17d02:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   17d04:	4629      	mov	r1, r5
   17d06:	4620      	mov	r0, r4
	h->len = buf_sz;
   17d08:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   17d0a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   17d0c:	f7ff fddb 	bl	178c6 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   17d10:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   17d12:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   17d14:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17d16:	361b      	adds	r6, #27
   17d18:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   17d1a:	f104 0210 	add.w	r2, r4, #16
   17d1e:	428b      	cmp	r3, r1
   17d20:	db29      	blt.n	17d76 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   17d22:	4632      	mov	r2, r6
   17d24:	4620      	mov	r0, r4
   17d26:	2100      	movs	r1, #0
   17d28:	f7ff fdc9 	bl	178be <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   17d2c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   17d2e:	4620      	mov	r0, r4
   17d30:	2201      	movs	r2, #1
   17d32:	2100      	movs	r1, #0
   17d34:	f7ff fdab 	bl	1788e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   17d38:	463a      	mov	r2, r7
   17d3a:	4631      	mov	r1, r6
   17d3c:	f7ff fdbf 	bl	178be <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   17d40:	4633      	mov	r3, r6
   17d42:	4631      	mov	r1, r6
   17d44:	4620      	mov	r0, r4
   17d46:	2200      	movs	r2, #0
   17d48:	f7ff fd90 	bl	1786c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   17d4c:	4629      	mov	r1, r5
   17d4e:	4620      	mov	r0, r4
   17d50:	2200      	movs	r2, #0
   17d52:	f7ff fdb4 	bl	178be <set_chunk_size>
   17d56:	463b      	mov	r3, r7
   17d58:	4629      	mov	r1, r5
   17d5a:	4620      	mov	r0, r4
   17d5c:	2200      	movs	r2, #0
   17d5e:	f7ff fd85 	bl	1786c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   17d62:	4629      	mov	r1, r5
   17d64:	4620      	mov	r0, r4
   17d66:	2201      	movs	r2, #1
   17d68:	f7ff fd91 	bl	1788e <set_chunk_used>

	free_list_add(h, chunk0_size);
   17d6c:	4631      	mov	r1, r6
}
   17d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   17d72:	f7ff be6a 	b.w	17a4a <free_list_add>
		h->buckets[i].next = 0;
   17d76:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   17d7a:	3301      	adds	r3, #1
   17d7c:	e7cf      	b.n	17d1e <sys_heap_init+0x44>

00017d7e <encode_uint>:
{
   17d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d82:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   17d84:	78d3      	ldrb	r3, [r2, #3]
{
   17d86:	4614      	mov	r4, r2
	switch (specifier) {
   17d88:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17d8a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   17d8e:	4606      	mov	r6, r0
   17d90:	460f      	mov	r7, r1
   17d92:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   17d94:	d02d      	beq.n	17df2 <encode_uint+0x74>
   17d96:	d828      	bhi.n	17dea <encode_uint+0x6c>
		return 16;
   17d98:	2b58      	cmp	r3, #88	; 0x58
   17d9a:	bf14      	ite	ne
   17d9c:	250a      	movne	r5, #10
   17d9e:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   17da0:	46aa      	mov	sl, r5
   17da2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   17da6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   17daa:	4652      	mov	r2, sl
   17dac:	465b      	mov	r3, fp
   17dae:	4630      	mov	r0, r6
   17db0:	4639      	mov	r1, r7
   17db2:	f7e8 fc4f 	bl	654 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17db6:	2a09      	cmp	r2, #9
   17db8:	b2d3      	uxtb	r3, r2
   17dba:	d81f      	bhi.n	17dfc <encode_uint+0x7e>
   17dbc:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   17dbe:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17dc0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   17dc2:	bf08      	it	eq
   17dc4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17dc6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   17dca:	d301      	bcc.n	17dd0 <encode_uint+0x52>
   17dcc:	45c8      	cmp	r8, r9
   17dce:	d812      	bhi.n	17df6 <encode_uint+0x78>
	if (conv->flag_hash) {
   17dd0:	7823      	ldrb	r3, [r4, #0]
   17dd2:	069b      	lsls	r3, r3, #26
   17dd4:	d505      	bpl.n	17de2 <encode_uint+0x64>
		if (radix == 8) {
   17dd6:	2d08      	cmp	r5, #8
   17dd8:	d116      	bne.n	17e08 <encode_uint+0x8a>
			conv->altform_0 = true;
   17dda:	78a3      	ldrb	r3, [r4, #2]
   17ddc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   17de0:	70a3      	strb	r3, [r4, #2]
}
   17de2:	4640      	mov	r0, r8
   17de4:	b003      	add	sp, #12
   17de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   17dea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   17dee:	2b70      	cmp	r3, #112	; 0x70
   17df0:	e7d3      	b.n	17d9a <encode_uint+0x1c>
	switch (specifier) {
   17df2:	2508      	movs	r5, #8
   17df4:	e7d4      	b.n	17da0 <encode_uint+0x22>
		value /= radix;
   17df6:	4606      	mov	r6, r0
   17df8:	460f      	mov	r7, r1
   17dfa:	e7d6      	b.n	17daa <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17dfc:	9a01      	ldr	r2, [sp, #4]
   17dfe:	2a19      	cmp	r2, #25
   17e00:	bf94      	ite	ls
   17e02:	3337      	addls	r3, #55	; 0x37
   17e04:	3357      	addhi	r3, #87	; 0x57
   17e06:	e7da      	b.n	17dbe <encode_uint+0x40>
		} else if (radix == 16) {
   17e08:	2d10      	cmp	r5, #16
   17e0a:	d1ea      	bne.n	17de2 <encode_uint+0x64>
			conv->altform_0c = true;
   17e0c:	78a3      	ldrb	r3, [r4, #2]
   17e0e:	f043 0310 	orr.w	r3, r3, #16
   17e12:	e7e5      	b.n	17de0 <encode_uint+0x62>

00017e14 <outs>:
{
   17e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e18:	4607      	mov	r7, r0
   17e1a:	4688      	mov	r8, r1
   17e1c:	4615      	mov	r5, r2
   17e1e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17e20:	4614      	mov	r4, r2
   17e22:	42b4      	cmp	r4, r6
   17e24:	eba4 0005 	sub.w	r0, r4, r5
   17e28:	d302      	bcc.n	17e30 <outs+0x1c>
   17e2a:	b93e      	cbnz	r6, 17e3c <outs+0x28>
   17e2c:	7823      	ldrb	r3, [r4, #0]
   17e2e:	b12b      	cbz	r3, 17e3c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   17e30:	4641      	mov	r1, r8
   17e32:	f814 0b01 	ldrb.w	r0, [r4], #1
   17e36:	47b8      	blx	r7
		if (rc < 0) {
   17e38:	2800      	cmp	r0, #0
   17e3a:	daf2      	bge.n	17e22 <outs+0xe>
}
   17e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017e40 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   17e40:	4770      	bx	lr

00017e42 <z_platform_init>:
	SystemInit();
   17e42:	f7f5 bde3 	b.w	da0c <SystemInit>

00017e46 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   17e46:	2300      	movs	r3, #0
	list->head = NULL;
   17e48:	e9c0 3300 	strd	r3, r3, [r0]
}
   17e4c:	4770      	bx	lr

00017e4e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   17e4e:	6803      	ldr	r3, [r0, #0]
   17e50:	b923      	cbnz	r3, 17e5c <log_list_add_tail+0xe>
		list->head = msg;
   17e52:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   17e54:	2300      	movs	r3, #0
	list->tail = msg;
   17e56:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   17e58:	600b      	str	r3, [r1, #0]
}
   17e5a:	4770      	bx	lr
		list->tail->next = msg;
   17e5c:	6843      	ldr	r3, [r0, #4]
   17e5e:	6019      	str	r1, [r3, #0]
   17e60:	e7f8      	b.n	17e54 <log_list_add_tail+0x6>

00017e62 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   17e62:	6800      	ldr	r0, [r0, #0]
   17e64:	4770      	bx	lr

00017e66 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   17e66:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   17e68:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   17e6a:	b108      	cbz	r0, 17e70 <log_list_head_get+0xa>
		list->head = list->head->next;
   17e6c:	6802      	ldr	r2, [r0, #0]
   17e6e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   17e70:	4770      	bx	lr

00017e72 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   17e72:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   17e74:	f7ea fb6e 	bl	2554 <log_msg_chunk_alloc>

	if (msg != NULL) {
   17e78:	b118      	cbz	r0, 17e82 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   17e7a:	2301      	movs	r3, #1
   17e7c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   17e7e:	2300      	movs	r3, #0
   17e80:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   17e82:	bd08      	pop	{r3, pc}

00017e84 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   17e84:	f7eb bdda 	b.w	3a3c <z_timer_cycle_get_32>

00017e88 <dummy_timestamp>:
   17e88:	2000      	movs	r0, #0
   17e8a:	4770      	bx	lr

00017e8c <z_log_get_s_mask>:
{
   17e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e8e:	4605      	mov	r5, r0
	uint32_t mask = 0;
   17e90:	2000      	movs	r0, #0
				mask |= BIT(arg);
   17e92:	2701      	movs	r7, #1
	uint32_t arg = 0;
   17e94:	4603      	mov	r3, r0
	bool arm = false;
   17e96:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   17e98:	f815 4b01 	ldrb.w	r4, [r5], #1
   17e9c:	b10c      	cbz	r4, 17ea2 <z_log_get_s_mask+0x16>
   17e9e:	428b      	cmp	r3, r1
   17ea0:	d300      	bcc.n	17ea4 <z_log_get_s_mask+0x18>
}
   17ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   17ea4:	2c25      	cmp	r4, #37	; 0x25
   17ea6:	d102      	bne.n	17eae <z_log_get_s_mask+0x22>
			arm = !arm;
   17ea8:	f082 0201 	eor.w	r2, r2, #1
   17eac:	e7f4      	b.n	17e98 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   17eae:	2a00      	cmp	r2, #0
   17eb0:	d0f2      	beq.n	17e98 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   17eb2:	f044 0620 	orr.w	r6, r4, #32
   17eb6:	3e61      	subs	r6, #97	; 0x61
   17eb8:	2e19      	cmp	r6, #25
   17eba:	d8ed      	bhi.n	17e98 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   17ebc:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   17ebe:	bf04      	itt	eq
   17ec0:	fa07 f203 	lsleq.w	r2, r7, r3
   17ec4:	4310      	orreq	r0, r2
			arg++;
   17ec6:	3301      	adds	r3, #1
			arm = false;
   17ec8:	2200      	movs	r2, #0
   17eca:	e7e5      	b.n	17e98 <z_log_get_s_mask+0xc>

00017ecc <log_0>:
{
   17ecc:	b538      	push	{r3, r4, r5, lr}
   17ece:	4605      	mov	r5, r0
   17ed0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   17ed2:	f7ff ffce 	bl	17e72 <z_log_msg_std_alloc>

	if (msg != NULL) {
   17ed6:	b128      	cbz	r0, 17ee4 <log_0+0x18>
		msg_finalize(msg, src_level);
   17ed8:	4621      	mov	r1, r4
		msg->str = str;
   17eda:	6105      	str	r5, [r0, #16]
}
   17edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   17ee0:	f7ea ba5a 	b.w	2398 <msg_finalize>
}
   17ee4:	bd38      	pop	{r3, r4, r5, pc}

00017ee6 <log_1>:
{
   17ee6:	b570      	push	{r4, r5, r6, lr}
   17ee8:	4606      	mov	r6, r0
   17eea:	460d      	mov	r5, r1
   17eec:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   17eee:	f7ff ffc0 	bl	17e72 <z_log_msg_std_alloc>

	if (msg != NULL) {
   17ef2:	b158      	cbz	r0, 17f0c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   17ef4:	2101      	movs	r1, #1
   17ef6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   17ef8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   17efa:	f361 1207 	bfi	r2, r1, #4, #4
   17efe:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   17f00:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   17f02:	6145      	str	r5, [r0, #20]
}
   17f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   17f08:	f7ea ba46 	b.w	2398 <msg_finalize>
}
   17f0c:	bd70      	pop	{r4, r5, r6, pc}

00017f0e <log_2>:
{
   17f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f12:	4680      	mov	r8, r0
   17f14:	460f      	mov	r7, r1
   17f16:	4616      	mov	r6, r2
   17f18:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   17f1a:	f7ff ffaa 	bl	17e72 <z_log_msg_std_alloc>

	if (msg != NULL) {
   17f1e:	b168      	cbz	r0, 17f3c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   17f20:	2202      	movs	r2, #2
   17f22:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   17f24:	4629      	mov	r1, r5
   17f26:	f362 1307 	bfi	r3, r2, #4, #4
   17f2a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   17f2c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   17f30:	f8c0 8010 	str.w	r8, [r0, #16]
}
   17f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   17f38:	f7ea ba2e 	b.w	2398 <msg_finalize>
}
   17f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017f40 <log_3>:
{
   17f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f44:	4680      	mov	r8, r0
   17f46:	460f      	mov	r7, r1
   17f48:	4616      	mov	r6, r2
   17f4a:	461d      	mov	r5, r3
   17f4c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   17f50:	f7ff ff8f 	bl	17e72 <z_log_msg_std_alloc>

	if (msg != NULL) {
   17f54:	b170      	cbz	r0, 17f74 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   17f56:	2203      	movs	r2, #3
   17f58:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   17f5a:	4649      	mov	r1, r9
   17f5c:	f362 1307 	bfi	r3, r2, #4, #4
   17f60:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   17f62:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   17f66:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   17f6a:	61c5      	str	r5, [r0, #28]
}
   17f6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   17f70:	f7ea ba12 	b.w	2398 <msg_finalize>
}
   17f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00017f78 <log_n>:
{
   17f78:	b510      	push	{r4, lr}
   17f7a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   17f7c:	f000 f899 	bl	180b2 <log_msg_create_n>
		if (msg == NULL) {
   17f80:	b120      	cbz	r0, 17f8c <log_n+0x14>
		msg_finalize(msg, src_level);
   17f82:	4621      	mov	r1, r4
}
   17f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   17f88:	f7ea ba06 	b.w	2398 <msg_finalize>
}
   17f8c:	bd10      	pop	{r4, pc}

00017f8e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   17f8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f92:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   17f94:	8903      	ldrh	r3, [r0, #8]
{
   17f96:	460e      	mov	r6, r1
   17f98:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   17f9a:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   17f9e:	42a2      	cmp	r2, r4
{
   17fa0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   17fa4:	d803      	bhi.n	17fae <log_msg_hexdump_data_op+0x20>
		*length = 0;
   17fa6:	2300      	movs	r3, #0
   17fa8:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   17faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   17fae:	680b      	ldr	r3, [r1, #0]
   17fb0:	4423      	add	r3, r4
   17fb2:	4293      	cmp	r3, r2
		*length = available_len - offset;
   17fb4:	bf84      	itt	hi
   17fb6:	1b13      	subhi	r3, r2, r4
   17fb8:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   17fba:	2a0c      	cmp	r2, #12
	req_len = *length;
   17fbc:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   17fc0:	d92a      	bls.n	18018 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   17fc2:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   17fc4:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   17fc8:	d82d      	bhi.n	18026 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   17fca:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   17fcc:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   17fce:	454a      	cmp	r2, r9
   17fd0:	bf28      	it	cs
   17fd2:	464a      	movcs	r2, r9
   17fd4:	4420      	add	r0, r4
   17fd6:	4615      	mov	r5, r2
		if (put_op) {
   17fd8:	b317      	cbz	r7, 18020 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   17fda:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   17fdc:	f001 f914 	bl	19208 <memcpy>
		req_len -= cpy_len;
   17fe0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   17fe4:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   17fe6:	f1b9 0f00 	cmp.w	r9, #0
   17fea:	d0de      	beq.n	17faa <log_msg_hexdump_data_op+0x1c>
   17fec:	f1b8 0f00 	cmp.w	r8, #0
   17ff0:	d0db      	beq.n	17faa <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   17ff2:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   17ff6:	454d      	cmp	r5, r9
   17ff8:	bf28      	it	cs
   17ffa:	464d      	movcs	r5, r9
		if (put_op) {
   17ffc:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   17ffe:	462a      	mov	r2, r5
   18000:	4440      	add	r0, r8
		if (put_op) {
   18002:	b1bf      	cbz	r7, 18034 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   18004:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   18006:	f001 f8ff 	bl	19208 <memcpy>
		offset = 0;
   1800a:	2400      	movs	r4, #0
		cont = cont->next;
   1800c:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   18010:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   18014:	442e      	add	r6, r5
   18016:	e7e6      	b.n	17fe6 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   18018:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1801c:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1801e:	e7d6      	b.n	17fce <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   18020:	4601      	mov	r1, r0
   18022:	4630      	mov	r0, r6
   18024:	e7da      	b.n	17fdc <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   18026:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   18028:	2c1b      	cmp	r4, #27
   1802a:	d9dc      	bls.n	17fe6 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1802c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   18030:	3c1c      	subs	r4, #28
   18032:	e7f9      	b.n	18028 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   18034:	4601      	mov	r1, r0
   18036:	4630      	mov	r0, r6
   18038:	e7e5      	b.n	18006 <log_msg_hexdump_data_op+0x78>

0001803a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1803a:	3004      	adds	r0, #4
   1803c:	e8d0 3fef 	ldaex	r3, [r0]
   18040:	3301      	adds	r3, #1
   18042:	e8c0 3fe2 	stlex	r2, r3, [r0]
   18046:	2a00      	cmp	r2, #0
   18048:	d1f8      	bne.n	1803c <log_msg_get+0x2>
}
   1804a:	4770      	bx	lr

0001804c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1804c:	7a40      	ldrb	r0, [r0, #9]
}
   1804e:	0900      	lsrs	r0, r0, #4
   18050:	4770      	bx	lr

00018052 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   18052:	7a43      	ldrb	r3, [r0, #9]
   18054:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   18058:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1805c:	d216      	bcs.n	1808c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1805e:	2a03      	cmp	r2, #3
   18060:	d803      	bhi.n	1806a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   18062:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18066:	6948      	ldr	r0, [r1, #20]
   18068:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1806a:	2901      	cmp	r1, #1
   1806c:	d803      	bhi.n	18076 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1806e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18072:	6988      	ldr	r0, [r1, #24]
   18074:	4770      	bx	lr
	cont = msg->payload.ext.next;
   18076:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   18078:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1807a:	2906      	cmp	r1, #6
   1807c:	d803      	bhi.n	18086 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1807e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   18082:	6848      	ldr	r0, [r1, #4]
   18084:	4770      	bx	lr
		cont = cont->next;
   18086:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   18088:	3907      	subs	r1, #7
		cont = cont->next;
   1808a:	e7f6      	b.n	1807a <log_msg_arg_get+0x28>
		return 0;
   1808c:	2000      	movs	r0, #0
}
   1808e:	4770      	bx	lr

00018090 <log_msg_put>:
{
   18090:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18092:	1d02      	adds	r2, r0, #4
   18094:	e8d2 1fef 	ldaex	r1, [r2]
   18098:	3901      	subs	r1, #1
   1809a:	e8c2 1fec 	stlex	ip, r1, [r2]
   1809e:	f1bc 0f00 	cmp.w	ip, #0
   180a2:	d1f7      	bne.n	18094 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   180a4:	685b      	ldr	r3, [r3, #4]
   180a6:	b90b      	cbnz	r3, 180ac <log_msg_put+0x1c>
		msg_free(msg);
   180a8:	f7ea ba68 	b.w	257c <msg_free>
}
   180ac:	4770      	bx	lr

000180ae <log_msg_str_get>:
}
   180ae:	6900      	ldr	r0, [r0, #16]
   180b0:	4770      	bx	lr

000180b2 <log_msg_create_n>:
{
   180b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180b6:	4681      	mov	r9, r0
   180b8:	4688      	mov	r8, r1
   180ba:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   180bc:	f7ea fa4a 	bl	2554 <log_msg_chunk_alloc>
	if (msg != NULL) {
   180c0:	4604      	mov	r4, r0
   180c2:	b330      	cbz	r0, 18112 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   180c4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   180c6:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   180c8:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   180ca:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   180cc:	8107      	strh	r7, [r0, #8]
   180ce:	d909      	bls.n	180e4 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   180d0:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   180d2:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   180d6:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   180d8:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   180dc:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   180de:	f1ba 0f00 	cmp.w	sl, #0
   180e2:	dc0e      	bgt.n	18102 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   180e4:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   180e6:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   180e8:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   180ec:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   180f0:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   180f2:	d818      	bhi.n	18126 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   180f4:	4641      	mov	r1, r8
   180f6:	00aa      	lsls	r2, r5, #2
   180f8:	f104 0014 	add.w	r0, r4, #20
   180fc:	f001 f884 	bl	19208 <memcpy>
	while (nargs != 0U) {
   18100:	e007      	b.n	18112 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   18102:	f7ea fa27 	bl	2554 <log_msg_chunk_alloc>
		if (cont == NULL) {
   18106:	4606      	mov	r6, r0
   18108:	b930      	cbnz	r0, 18118 <log_msg_create_n+0x66>
			msg_free(msg);
   1810a:	4620      	mov	r0, r4
   1810c:	f7ea fa36 	bl	257c <msg_free>
			return NULL;
   18110:	4634      	mov	r4, r6
}
   18112:	4620      	mov	r0, r4
   18114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   18118:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1811c:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   18120:	4683      	mov	fp, r0
		cont->next = NULL;
   18122:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   18124:	e7db      	b.n	180de <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   18126:	4641      	mov	r1, r8
   18128:	2208      	movs	r2, #8
   1812a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1812e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   18130:	f001 f86a 	bl	19208 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   18134:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   18136:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1813a:	2d07      	cmp	r5, #7
   1813c:	462e      	mov	r6, r5
   1813e:	bf28      	it	cs
   18140:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   18142:	ea4f 0986 	mov.w	r9, r6, lsl #2
   18146:	4641      	mov	r1, r8
   18148:	1d38      	adds	r0, r7, #4
   1814a:	464a      	mov	r2, r9
   1814c:	f001 f85c 	bl	19208 <memcpy>
	while (nargs != 0U) {
   18150:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   18152:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   18154:	44c8      	add	r8, r9
	while (nargs != 0U) {
   18156:	d1f0      	bne.n	1813a <log_msg_create_n+0x88>
   18158:	e7db      	b.n	18112 <log_msg_create_n+0x60>

0001815a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1815a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1815c:	2400      	movs	r4, #0
   1815e:	9400      	str	r4, [sp, #0]
   18160:	f7ff ff15 	bl	17f8e <log_msg_hexdump_data_op>
}
   18164:	b002      	add	sp, #8
   18166:	bd10      	pop	{r4, pc}

00018168 <buffer_write>:
{
   18168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1816a:	4606      	mov	r6, r0
   1816c:	460d      	mov	r5, r1
   1816e:	4614      	mov	r4, r2
   18170:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   18172:	4621      	mov	r1, r4
   18174:	4628      	mov	r0, r5
   18176:	463a      	mov	r2, r7
   18178:	47b0      	blx	r6
	} while (len != 0);
   1817a:	1a24      	subs	r4, r4, r0
		buf += processed;
   1817c:	4405      	add	r5, r0
	} while (len != 0);
   1817e:	d1f8      	bne.n	18172 <buffer_write+0xa>
}
   18180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018182 <std_print>:
{
   18182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18186:	b08e      	sub	sp, #56	; 0x38
   18188:	af0e      	add	r7, sp, #56	; 0x38
   1818a:	4680      	mov	r8, r0
   1818c:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1818e:	f7ff ff8e 	bl	180ae <log_msg_str_get>
   18192:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   18194:	4640      	mov	r0, r8
   18196:	f7ff ff59 	bl	1804c <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1819a:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   1819e:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   181a0:	0083      	lsls	r3, r0, #2
   181a2:	3307      	adds	r3, #7
   181a4:	f023 0307 	bic.w	r3, r3, #7
   181a8:	ebad 0d03 	sub.w	sp, sp, r3
   181ac:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   181ae:	45d1      	cmp	r9, sl
   181b0:	d116      	bne.n	181e0 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   181b2:	4640      	mov	r0, r8
   181b4:	f7ff ff4a 	bl	1804c <log_msg_nargs_get>
   181b8:	280f      	cmp	r0, #15
   181ba:	d81e      	bhi.n	181fa <std_print+0x78>
   181bc:	e8df f010 	tbh	[pc, r0, lsl #1]
   181c0:	00200019 	.word	0x00200019
   181c4:	002d0026 	.word	0x002d0026
   181c8:	00410036 	.word	0x00410036
   181cc:	005d004e 	.word	0x005d004e
   181d0:	0081006e 	.word	0x0081006e
   181d4:	00ad0096 	.word	0x00ad0096
   181d8:	00e100c6 	.word	0x00e100c6
   181dc:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   181e0:	4649      	mov	r1, r9
   181e2:	4640      	mov	r0, r8
   181e4:	f7ff ff35 	bl	18052 <log_msg_arg_get>
   181e8:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   181ec:	f109 0901 	add.w	r9, r9, #1
   181f0:	e7dd      	b.n	181ae <std_print+0x2c>
		print_formatted(log_output, str);
   181f2:	4631      	mov	r1, r6
   181f4:	4628      	mov	r0, r5
   181f6:	f7ea f9ff 	bl	25f8 <print_formatted>
}
   181fa:	46bd      	mov	sp, r7
   181fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   18200:	4631      	mov	r1, r6
   18202:	4628      	mov	r0, r5
   18204:	6822      	ldr	r2, [r4, #0]
   18206:	f7ea f9f7 	bl	25f8 <print_formatted>
		break;
   1820a:	e7f6      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1820c:	4631      	mov	r1, r6
   1820e:	e9d4 2300 	ldrd	r2, r3, [r4]
   18212:	4628      	mov	r0, r5
   18214:	f7ea f9f0 	bl	25f8 <print_formatted>
		break;
   18218:	e7ef      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1821a:	68a3      	ldr	r3, [r4, #8]
   1821c:	4631      	mov	r1, r6
   1821e:	9300      	str	r3, [sp, #0]
   18220:	4628      	mov	r0, r5
   18222:	e9d4 2300 	ldrd	r2, r3, [r4]
   18226:	f7ea f9e7 	bl	25f8 <print_formatted>
		break;
   1822a:	e7e6      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1822c:	68e3      	ldr	r3, [r4, #12]
   1822e:	4631      	mov	r1, r6
   18230:	9301      	str	r3, [sp, #4]
   18232:	68a3      	ldr	r3, [r4, #8]
   18234:	4628      	mov	r0, r5
   18236:	9300      	str	r3, [sp, #0]
   18238:	e9d4 2300 	ldrd	r2, r3, [r4]
   1823c:	f7ea f9dc 	bl	25f8 <print_formatted>
		break;
   18240:	e7db      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18242:	6923      	ldr	r3, [r4, #16]
   18244:	4631      	mov	r1, r6
   18246:	9302      	str	r3, [sp, #8]
   18248:	68e3      	ldr	r3, [r4, #12]
   1824a:	4628      	mov	r0, r5
   1824c:	9301      	str	r3, [sp, #4]
   1824e:	68a3      	ldr	r3, [r4, #8]
   18250:	9300      	str	r3, [sp, #0]
   18252:	e9d4 2300 	ldrd	r2, r3, [r4]
   18256:	f7ea f9cf 	bl	25f8 <print_formatted>
		break;
   1825a:	e7ce      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1825c:	6963      	ldr	r3, [r4, #20]
   1825e:	4631      	mov	r1, r6
   18260:	9303      	str	r3, [sp, #12]
   18262:	6923      	ldr	r3, [r4, #16]
   18264:	4628      	mov	r0, r5
   18266:	9302      	str	r3, [sp, #8]
   18268:	68e3      	ldr	r3, [r4, #12]
   1826a:	9301      	str	r3, [sp, #4]
   1826c:	68a3      	ldr	r3, [r4, #8]
   1826e:	9300      	str	r3, [sp, #0]
   18270:	e9d4 2300 	ldrd	r2, r3, [r4]
   18274:	f7ea f9c0 	bl	25f8 <print_formatted>
		break;
   18278:	e7bf      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1827a:	69a3      	ldr	r3, [r4, #24]
   1827c:	4631      	mov	r1, r6
   1827e:	9304      	str	r3, [sp, #16]
   18280:	6963      	ldr	r3, [r4, #20]
   18282:	4628      	mov	r0, r5
   18284:	9303      	str	r3, [sp, #12]
   18286:	6923      	ldr	r3, [r4, #16]
   18288:	9302      	str	r3, [sp, #8]
   1828a:	68e3      	ldr	r3, [r4, #12]
   1828c:	9301      	str	r3, [sp, #4]
   1828e:	68a3      	ldr	r3, [r4, #8]
   18290:	9300      	str	r3, [sp, #0]
   18292:	e9d4 2300 	ldrd	r2, r3, [r4]
   18296:	f7ea f9af 	bl	25f8 <print_formatted>
		break;
   1829a:	e7ae      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1829c:	69e3      	ldr	r3, [r4, #28]
   1829e:	4631      	mov	r1, r6
   182a0:	9305      	str	r3, [sp, #20]
   182a2:	69a3      	ldr	r3, [r4, #24]
   182a4:	4628      	mov	r0, r5
   182a6:	9304      	str	r3, [sp, #16]
   182a8:	6963      	ldr	r3, [r4, #20]
   182aa:	9303      	str	r3, [sp, #12]
   182ac:	6923      	ldr	r3, [r4, #16]
   182ae:	9302      	str	r3, [sp, #8]
   182b0:	68e3      	ldr	r3, [r4, #12]
   182b2:	9301      	str	r3, [sp, #4]
   182b4:	68a3      	ldr	r3, [r4, #8]
   182b6:	9300      	str	r3, [sp, #0]
   182b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   182bc:	f7ea f99c 	bl	25f8 <print_formatted>
		break;
   182c0:	e79b      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   182c2:	6a23      	ldr	r3, [r4, #32]
   182c4:	4631      	mov	r1, r6
   182c6:	9306      	str	r3, [sp, #24]
   182c8:	69e3      	ldr	r3, [r4, #28]
   182ca:	4628      	mov	r0, r5
   182cc:	9305      	str	r3, [sp, #20]
   182ce:	69a3      	ldr	r3, [r4, #24]
   182d0:	9304      	str	r3, [sp, #16]
   182d2:	6963      	ldr	r3, [r4, #20]
   182d4:	9303      	str	r3, [sp, #12]
   182d6:	6923      	ldr	r3, [r4, #16]
   182d8:	9302      	str	r3, [sp, #8]
   182da:	68e3      	ldr	r3, [r4, #12]
   182dc:	9301      	str	r3, [sp, #4]
   182de:	68a3      	ldr	r3, [r4, #8]
   182e0:	9300      	str	r3, [sp, #0]
   182e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   182e6:	f7ea f987 	bl	25f8 <print_formatted>
		break;
   182ea:	e786      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   182ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   182ee:	4631      	mov	r1, r6
   182f0:	9307      	str	r3, [sp, #28]
   182f2:	6a23      	ldr	r3, [r4, #32]
   182f4:	4628      	mov	r0, r5
   182f6:	9306      	str	r3, [sp, #24]
   182f8:	69e3      	ldr	r3, [r4, #28]
   182fa:	9305      	str	r3, [sp, #20]
   182fc:	69a3      	ldr	r3, [r4, #24]
   182fe:	9304      	str	r3, [sp, #16]
   18300:	6963      	ldr	r3, [r4, #20]
   18302:	9303      	str	r3, [sp, #12]
   18304:	6923      	ldr	r3, [r4, #16]
   18306:	9302      	str	r3, [sp, #8]
   18308:	68e3      	ldr	r3, [r4, #12]
   1830a:	9301      	str	r3, [sp, #4]
   1830c:	68a3      	ldr	r3, [r4, #8]
   1830e:	9300      	str	r3, [sp, #0]
   18310:	e9d4 2300 	ldrd	r2, r3, [r4]
   18314:	f7ea f970 	bl	25f8 <print_formatted>
		break;
   18318:	e76f      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1831a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1831c:	4631      	mov	r1, r6
   1831e:	9308      	str	r3, [sp, #32]
   18320:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18322:	4628      	mov	r0, r5
   18324:	9307      	str	r3, [sp, #28]
   18326:	6a23      	ldr	r3, [r4, #32]
   18328:	9306      	str	r3, [sp, #24]
   1832a:	69e3      	ldr	r3, [r4, #28]
   1832c:	9305      	str	r3, [sp, #20]
   1832e:	69a3      	ldr	r3, [r4, #24]
   18330:	9304      	str	r3, [sp, #16]
   18332:	6963      	ldr	r3, [r4, #20]
   18334:	9303      	str	r3, [sp, #12]
   18336:	6923      	ldr	r3, [r4, #16]
   18338:	9302      	str	r3, [sp, #8]
   1833a:	68e3      	ldr	r3, [r4, #12]
   1833c:	9301      	str	r3, [sp, #4]
   1833e:	68a3      	ldr	r3, [r4, #8]
   18340:	9300      	str	r3, [sp, #0]
   18342:	e9d4 2300 	ldrd	r2, r3, [r4]
   18346:	f7ea f957 	bl	25f8 <print_formatted>
		break;
   1834a:	e756      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1834c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1834e:	4631      	mov	r1, r6
   18350:	9309      	str	r3, [sp, #36]	; 0x24
   18352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18354:	4628      	mov	r0, r5
   18356:	9308      	str	r3, [sp, #32]
   18358:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1835a:	9307      	str	r3, [sp, #28]
   1835c:	6a23      	ldr	r3, [r4, #32]
   1835e:	9306      	str	r3, [sp, #24]
   18360:	69e3      	ldr	r3, [r4, #28]
   18362:	9305      	str	r3, [sp, #20]
   18364:	69a3      	ldr	r3, [r4, #24]
   18366:	9304      	str	r3, [sp, #16]
   18368:	6963      	ldr	r3, [r4, #20]
   1836a:	9303      	str	r3, [sp, #12]
   1836c:	6923      	ldr	r3, [r4, #16]
   1836e:	9302      	str	r3, [sp, #8]
   18370:	68e3      	ldr	r3, [r4, #12]
   18372:	9301      	str	r3, [sp, #4]
   18374:	68a3      	ldr	r3, [r4, #8]
   18376:	9300      	str	r3, [sp, #0]
   18378:	e9d4 2300 	ldrd	r2, r3, [r4]
   1837c:	f7ea f93c 	bl	25f8 <print_formatted>
		break;
   18380:	e73b      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18382:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18384:	4631      	mov	r1, r6
   18386:	930a      	str	r3, [sp, #40]	; 0x28
   18388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1838a:	4628      	mov	r0, r5
   1838c:	9309      	str	r3, [sp, #36]	; 0x24
   1838e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18390:	9308      	str	r3, [sp, #32]
   18392:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18394:	9307      	str	r3, [sp, #28]
   18396:	6a23      	ldr	r3, [r4, #32]
   18398:	9306      	str	r3, [sp, #24]
   1839a:	69e3      	ldr	r3, [r4, #28]
   1839c:	9305      	str	r3, [sp, #20]
   1839e:	69a3      	ldr	r3, [r4, #24]
   183a0:	9304      	str	r3, [sp, #16]
   183a2:	6963      	ldr	r3, [r4, #20]
   183a4:	9303      	str	r3, [sp, #12]
   183a6:	6923      	ldr	r3, [r4, #16]
   183a8:	9302      	str	r3, [sp, #8]
   183aa:	68e3      	ldr	r3, [r4, #12]
   183ac:	9301      	str	r3, [sp, #4]
   183ae:	68a3      	ldr	r3, [r4, #8]
   183b0:	9300      	str	r3, [sp, #0]
   183b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   183b6:	f7ea f91f 	bl	25f8 <print_formatted>
		break;
   183ba:	e71e      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   183bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   183be:	4631      	mov	r1, r6
   183c0:	930b      	str	r3, [sp, #44]	; 0x2c
   183c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   183c4:	4628      	mov	r0, r5
   183c6:	930a      	str	r3, [sp, #40]	; 0x28
   183c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   183ca:	9309      	str	r3, [sp, #36]	; 0x24
   183cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   183ce:	9308      	str	r3, [sp, #32]
   183d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   183d2:	9307      	str	r3, [sp, #28]
   183d4:	6a23      	ldr	r3, [r4, #32]
   183d6:	9306      	str	r3, [sp, #24]
   183d8:	69e3      	ldr	r3, [r4, #28]
   183da:	9305      	str	r3, [sp, #20]
   183dc:	69a3      	ldr	r3, [r4, #24]
   183de:	9304      	str	r3, [sp, #16]
   183e0:	6963      	ldr	r3, [r4, #20]
   183e2:	9303      	str	r3, [sp, #12]
   183e4:	6923      	ldr	r3, [r4, #16]
   183e6:	9302      	str	r3, [sp, #8]
   183e8:	68e3      	ldr	r3, [r4, #12]
   183ea:	9301      	str	r3, [sp, #4]
   183ec:	68a3      	ldr	r3, [r4, #8]
   183ee:	9300      	str	r3, [sp, #0]
   183f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   183f4:	f7ea f900 	bl	25f8 <print_formatted>
		break;
   183f8:	e6ff      	b.n	181fa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   183fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   183fc:	4631      	mov	r1, r6
   183fe:	930c      	str	r3, [sp, #48]	; 0x30
   18400:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18402:	4628      	mov	r0, r5
   18404:	930b      	str	r3, [sp, #44]	; 0x2c
   18406:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18408:	930a      	str	r3, [sp, #40]	; 0x28
   1840a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1840c:	9309      	str	r3, [sp, #36]	; 0x24
   1840e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18410:	9308      	str	r3, [sp, #32]
   18412:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18414:	9307      	str	r3, [sp, #28]
   18416:	6a23      	ldr	r3, [r4, #32]
   18418:	9306      	str	r3, [sp, #24]
   1841a:	69e3      	ldr	r3, [r4, #28]
   1841c:	9305      	str	r3, [sp, #20]
   1841e:	69a3      	ldr	r3, [r4, #24]
   18420:	9304      	str	r3, [sp, #16]
   18422:	6963      	ldr	r3, [r4, #20]
   18424:	9303      	str	r3, [sp, #12]
   18426:	6923      	ldr	r3, [r4, #16]
   18428:	9302      	str	r3, [sp, #8]
   1842a:	68e3      	ldr	r3, [r4, #12]
   1842c:	9301      	str	r3, [sp, #4]
   1842e:	68a3      	ldr	r3, [r4, #8]
   18430:	9300      	str	r3, [sp, #0]
   18432:	e9d4 2300 	ldrd	r2, r3, [r4]
   18436:	f7ea f8df 	bl	25f8 <print_formatted>
}
   1843a:	e6de      	b.n	181fa <std_print+0x78>

0001843c <log_output_flush>:
		     log_output->control_block->offset,
   1843c:	6842      	ldr	r2, [r0, #4]
{
   1843e:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   18440:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   18444:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   18446:	6881      	ldr	r1, [r0, #8]
   18448:	6800      	ldr	r0, [r0, #0]
   1844a:	f7ff fe8d 	bl	18168 <buffer_write>
	log_output->control_block->offset = 0;
   1844e:	2200      	movs	r2, #0
   18450:	6863      	ldr	r3, [r4, #4]
   18452:	601a      	str	r2, [r3, #0]
}
   18454:	bd10      	pop	{r4, pc}

00018456 <out_func>:
{
   18456:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   18458:	684b      	ldr	r3, [r1, #4]
{
   1845a:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1845c:	681a      	ldr	r2, [r3, #0]
   1845e:	68cb      	ldr	r3, [r1, #12]
{
   18460:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   18462:	429a      	cmp	r2, r3
   18464:	d102      	bne.n	1846c <out_func+0x16>
		log_output_flush(out_ctx);
   18466:	4608      	mov	r0, r1
   18468:	f7ff ffe8 	bl	1843c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1846c:	6863      	ldr	r3, [r4, #4]
   1846e:	e8d3 2fef 	ldaex	r2, [r3]
   18472:	1c51      	adds	r1, r2, #1
   18474:	e8c3 1fe0 	stlex	r0, r1, [r3]
   18478:	2800      	cmp	r0, #0
   1847a:	d1f8      	bne.n	1846e <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1847c:	68a3      	ldr	r3, [r4, #8]
}
   1847e:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   18480:	549d      	strb	r5, [r3, r2]
}
   18482:	bd38      	pop	{r3, r4, r5, pc}

00018484 <virtio_get_status>:
}
   18484:	2004      	movs	r0, #4
   18486:	4770      	bx	lr

00018488 <virtio_get_features>:
}
   18488:	2001      	movs	r0, #1
   1848a:	4770      	bx	lr

0001848c <virtio_set_features>:
}
   1848c:	4770      	bx	lr

0001848e <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1848e:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   18490:	21b4      	movs	r1, #180	; 0xb4
   18492:	2004      	movs	r0, #4
   18494:	f7fe ff26 	bl	172e4 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   18498:	4604      	mov	r4, r0
   1849a:	b118      	cbz	r0, 184a4 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1849c:	22b4      	movs	r2, #180	; 0xb4
   1849e:	2100      	movs	r1, #0
   184a0:	f000 fedd 	bl	1925e <memset>
	}

	return vqs;
}
   184a4:	4620      	mov	r0, r4
   184a6:	bd10      	pop	{r4, pc}

000184a8 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   184a8:	f009 bf1e 	b.w	222e8 <rpmsg_destroy_ept>

000184ac <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   184ac:	b2cb      	uxtb	r3, r1
   184ae:	210c      	movs	r1, #12
   184b0:	68c2      	ldr	r2, [r0, #12]
   184b2:	fb03 2101 	mla	r1, r3, r1, r2
   184b6:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
   184b8:	f000 0007 	and.w	r0, r0, #7
   184bc:	4770      	bx	lr

000184be <set_off_state>:
	__asm__ volatile(
   184be:	f04f 0320 	mov.w	r3, #32
   184c2:	f3ef 8211 	mrs	r2, BASEPRI
   184c6:	f383 8811 	msr	BASEPRI, r3
   184ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   184ce:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   184d0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   184d4:	d001      	beq.n	184da <set_off_state+0x1c>
   184d6:	428b      	cmp	r3, r1
   184d8:	d107      	bne.n	184ea <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   184da:	2301      	movs	r3, #1
   184dc:	6003      	str	r3, [r0, #0]
	int err = 0;
   184de:	2000      	movs	r0, #0
	__asm__ volatile(
   184e0:	f382 8811 	msr	BASEPRI, r2
   184e4:	f3bf 8f6f 	isb	sy
}
   184e8:	4770      	bx	lr
		err = -EPERM;
   184ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   184ee:	e7f7      	b.n	184e0 <set_off_state+0x22>

000184f0 <set_starting_state>:
{
   184f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   184f2:	f04f 0320 	mov.w	r3, #32
   184f6:	f3ef 8211 	mrs	r2, BASEPRI
   184fa:	f383 8811 	msr	BASEPRI, r3
   184fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18502:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   18504:	f003 0407 	and.w	r4, r3, #7
   18508:	2c01      	cmp	r4, #1
   1850a:	d106      	bne.n	1851a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1850c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1850e:	2000      	movs	r0, #0
	__asm__ volatile(
   18510:	f382 8811 	msr	BASEPRI, r2
   18514:	f3bf 8f6f 	isb	sy
}
   18518:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1851a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1851e:	428b      	cmp	r3, r1
		err = -EALREADY;
   18520:	bf14      	ite	ne
   18522:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18526:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1852a:	e7f1      	b.n	18510 <set_starting_state+0x20>

0001852c <set_on_state>:
	__asm__ volatile(
   1852c:	f04f 0320 	mov.w	r3, #32
   18530:	f3ef 8211 	mrs	r2, BASEPRI
   18534:	f383 8811 	msr	BASEPRI, r3
   18538:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1853c:	6803      	ldr	r3, [r0, #0]
   1853e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18542:	f043 0302 	orr.w	r3, r3, #2
   18546:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   18548:	f382 8811 	msr	BASEPRI, r2
   1854c:	f3bf 8f6f 	isb	sy
}
   18550:	4770      	bx	lr

00018552 <onoff_started_callback>:
{
   18552:	b410      	push	{r4}
	notify(mgr, 0);
   18554:	241c      	movs	r4, #28
	return &data->mgr[type];
   18556:	68c0      	ldr	r0, [r0, #12]
   18558:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1855a:	fb03 0004 	mla	r0, r3, r4, r0
   1855e:	2100      	movs	r1, #0
}
   18560:	bc10      	pop	{r4}
	notify(mgr, 0);
   18562:	4710      	bx	r2

00018564 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   18564:	2003      	movs	r0, #3
   18566:	f7f5 bae3 	b.w	db30 <nrfx_clock_start>

0001856a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1856a:	2002      	movs	r0, #2
   1856c:	f7f5 bae0 	b.w	db30 <nrfx_clock_start>

00018570 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   18570:	2000      	movs	r0, #0
   18572:	f7f5 badd 	b.w	db30 <nrfx_clock_start>

00018576 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   18576:	2003      	movs	r0, #3
   18578:	f7f5 bb2e 	b.w	dbd8 <nrfx_clock_stop>

0001857c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1857c:	2002      	movs	r0, #2
   1857e:	f7f5 bb2b 	b.w	dbd8 <nrfx_clock_stop>

00018582 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   18582:	2000      	movs	r0, #0
   18584:	f7f5 bb28 	b.w	dbd8 <nrfx_clock_stop>

00018588 <blocking_start_callback>:
{
   18588:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1858a:	f7fe ba4b 	b.w	16a24 <z_impl_k_sem_give>

0001858e <api_stop>:
{
   1858e:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   18590:	240c      	movs	r4, #12
   18592:	b2c9      	uxtb	r1, r1
   18594:	434c      	muls	r4, r1
{
   18596:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   18598:	68c0      	ldr	r0, [r0, #12]
   1859a:	f104 0378 	add.w	r3, r4, #120	; 0x78
   1859e:	2180      	movs	r1, #128	; 0x80
   185a0:	4418      	add	r0, r3
   185a2:	f7ff ff8c 	bl	184be <set_off_state>
	if (err < 0) {
   185a6:	2800      	cmp	r0, #0
   185a8:	db04      	blt.n	185b4 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   185aa:	6869      	ldr	r1, [r5, #4]
   185ac:	440c      	add	r4, r1
   185ae:	6863      	ldr	r3, [r4, #4]
   185b0:	4798      	blx	r3
	return 0;
   185b2:	2000      	movs	r0, #0
}
   185b4:	bd38      	pop	{r3, r4, r5, pc}

000185b6 <api_start>:
{
   185b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   185ba:	240c      	movs	r4, #12
   185bc:	b2c9      	uxtb	r1, r1
   185be:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   185c0:	68c5      	ldr	r5, [r0, #12]
{
   185c2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   185c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   185c8:	2180      	movs	r1, #128	; 0x80
   185ca:	4428      	add	r0, r5
{
   185cc:	4690      	mov	r8, r2
   185ce:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   185d0:	f7ff ff8e 	bl	184f0 <set_starting_state>
	if (err < 0) {
   185d4:	2800      	cmp	r0, #0
   185d6:	db06      	blt.n	185e6 <api_start+0x30>
	subdata->cb = cb;
   185d8:	4425      	add	r5, r4
	subdata->user_data = user_data;
   185da:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   185de:	6873      	ldr	r3, [r6, #4]
   185e0:	591b      	ldr	r3, [r3, r4]
   185e2:	4798      	blx	r3
	return 0;
   185e4:	2000      	movs	r0, #0
}
   185e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000185ea <gpio_pin_configure>:
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   185ea:	04d3      	lsls	r3, r2, #19
{
   185ec:	b570      	push	{r4, r5, r6, lr}
   185ee:	460e      	mov	r6, r1
   185f0:	4614      	mov	r4, r2
	struct gpio_driver_data *data =
   185f2:	68c5      	ldr	r5, [r0, #12]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   185f4:	d506      	bpl.n	18604 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   185f6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   185fa:	d003      	beq.n	18604 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   185fc:	07d1      	lsls	r1, r2, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   185fe:	bf48      	it	mi
   18600:	f482 54e0 	eormi.w	r4, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   18604:	6883      	ldr	r3, [r0, #8]
   18606:	4622      	mov	r2, r4
   18608:	4631      	mov	r1, r6
   1860a:	681b      	ldr	r3, [r3, #0]
   1860c:	4798      	blx	r3
	if (ret != 0) {
   1860e:	b940      	cbnz	r0, 18622 <gpio_pin_configure+0x38>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18610:	2201      	movs	r2, #1
   18612:	682b      	ldr	r3, [r5, #0]
   18614:	fa02 f106 	lsl.w	r1, r2, r6
   18618:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1861a:	bf4c      	ite	mi
   1861c:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1861e:	438b      	bicpl	r3, r1
   18620:	602b      	str	r3, [r5, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   18622:	bd70      	pop	{r4, r5, r6, pc}

00018624 <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   18624:	2301      	movs	r3, #1
   18626:	fa03 f101 	lsl.w	r1, r3, r1
   1862a:	68c3      	ldr	r3, [r0, #12]
   1862c:	681b      	ldr	r3, [r3, #0]
   1862e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   18630:	bf18      	it	ne
   18632:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   18636:	b112      	cbz	r2, 1863e <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   18638:	6883      	ldr	r3, [r0, #8]
   1863a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1863c:	4718      	bx	r3
   1863e:	6883      	ldr	r3, [r0, #8]
   18640:	691b      	ldr	r3, [r3, #16]
   18642:	e7fb      	b.n	1863c <gpio_pin_set+0x18>

00018644 <ili9xxx_get_capabilities>:
{
   18644:	b570      	push	{r4, r5, r6, lr}
   18646:	460c      	mov	r4, r1
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
   18648:	68c6      	ldr	r6, [r0, #12]
	const struct ili9xxx_config *config =
   1864a:	6845      	ldr	r5, [r0, #4]
	memset(capabilities, 0, sizeof(struct display_capabilities));
   1864c:	2210      	movs	r2, #16
   1864e:	2100      	movs	r1, #0
   18650:	4620      	mov	r0, r4
   18652:	f000 fe04 	bl	1925e <memset>
	capabilities->supported_pixel_formats =
   18656:	2311      	movs	r3, #17
   18658:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = data->pixel_format;
   1865a:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   1865e:	7323      	strb	r3, [r4, #12]
	if (data->orientation == DISPLAY_ORIENTATION_NORMAL ||
   18660:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   18664:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   18666:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   18668:	f013 0ffd 	tst.w	r3, #253	; 0xfd
		capabilities->x_resolution = config->x_resolution;
   1866c:	bf07      	ittee	eq
   1866e:	8022      	strheq	r2, [r4, #0]
		capabilities->y_resolution = config->y_resolution;
   18670:	8061      	strheq	r1, [r4, #2]
		capabilities->x_resolution = config->y_resolution;
   18672:	8021      	strhne	r1, [r4, #0]
		capabilities->y_resolution = config->x_resolution;
   18674:	8062      	strhne	r2, [r4, #2]
	capabilities->current_orientation = data->orientation;
   18676:	7363      	strb	r3, [r4, #13]
}
   18678:	bd70      	pop	{r4, r5, r6, pc}

0001867a <ili9xxx_transmit>:
{
   1867a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1867e:	4614      	mov	r4, r2
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
   18680:	2201      	movs	r2, #1
{
   18682:	b087      	sub	sp, #28
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
   18684:	68c5      	ldr	r5, [r0, #12]
	const struct ili9xxx_config *config =
   18686:	6847      	ldr	r7, [r0, #4]
{
   18688:	461e      	mov	r6, r3
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
   1868a:	ab02      	add	r3, sp, #8
{
   1868c:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
   18690:	9304      	str	r3, [sp, #16]
	gpio_pin_set(data->command_data_gpio, config->cmd_data_pin,
   18692:	7e39      	ldrb	r1, [r7, #24]
	tx_buf.buf = &cmd;
   18694:	f10d 0307 	add.w	r3, sp, #7
	gpio_pin_set(data->command_data_gpio, config->cmd_data_pin,
   18698:	6868      	ldr	r0, [r5, #4]
	tx_buf.len = 1U;
   1869a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
   1869e:	9205      	str	r2, [sp, #20]
	r = spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   186a0:	f105 080c 	add.w	r8, r5, #12
	gpio_pin_set(data->command_data_gpio, config->cmd_data_pin,
   186a4:	f7ff ffbe 	bl	18624 <gpio_pin_set>
	r = spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   186a8:	68a8      	ldr	r0, [r5, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   186aa:	6883      	ldr	r3, [r0, #8]
   186ac:	4641      	mov	r1, r8
   186ae:	f8d3 9000 	ldr.w	r9, [r3]
   186b2:	aa04      	add	r2, sp, #16
   186b4:	2300      	movs	r3, #0
   186b6:	47c8      	blx	r9
	if (r < 0) {
   186b8:	2800      	cmp	r0, #0
   186ba:	db10      	blt.n	186de <ili9xxx_transmit+0x64>
	if (tx_data != NULL) {
   186bc:	b194      	cbz	r4, 186e4 <ili9xxx_transmit+0x6a>
		gpio_pin_set(data->command_data_gpio, config->cmd_data_pin,
   186be:	2200      	movs	r2, #0
   186c0:	7e39      	ldrb	r1, [r7, #24]
   186c2:	6868      	ldr	r0, [r5, #4]
		tx_buf.len = tx_len;
   186c4:	e9cd 4602 	strd	r4, r6, [sp, #8]
		gpio_pin_set(data->command_data_gpio, config->cmd_data_pin,
   186c8:	f7ff ffac 	bl	18624 <gpio_pin_set>
		r = spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   186cc:	68a8      	ldr	r0, [r5, #8]
   186ce:	6883      	ldr	r3, [r0, #8]
   186d0:	4641      	mov	r1, r8
   186d2:	681c      	ldr	r4, [r3, #0]
   186d4:	aa04      	add	r2, sp, #16
   186d6:	2300      	movs	r3, #0
   186d8:	47a0      	blx	r4
		if (r < 0) {
   186da:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
   186de:	b007      	add	sp, #28
   186e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return 0;
   186e4:	4620      	mov	r0, r4
   186e6:	e7fa      	b.n	186de <ili9xxx_transmit+0x64>

000186e8 <ili9xxx_set_orientation>:
{
   186e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
   186ea:	460c      	mov	r4, r1
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
   186ec:	68c5      	ldr	r5, [r0, #12]
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
   186ee:	b979      	cbnz	r1, 18710 <ili9xxx_set_orientation+0x28>
		tx_data |= ILI9XXX_MADCTL_MX;
   186f0:	2348      	movs	r3, #72	; 0x48
		tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX |
   186f2:	f88d 3007 	strb.w	r3, [sp, #7]
	r = ili9xxx_transmit(dev, ILI9XXX_MADCTL, &tx_data, 1U);
   186f6:	2136      	movs	r1, #54	; 0x36
   186f8:	2301      	movs	r3, #1
   186fa:	f10d 0207 	add.w	r2, sp, #7
   186fe:	f7ff ffbc 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
   18702:	2800      	cmp	r0, #0
	return 0;
   18704:	bfa4      	itt	ge
   18706:	2000      	movge	r0, #0
	data->orientation = orientation;
   18708:	f885 4026 	strbge.w	r4, [r5, #38]	; 0x26
}
   1870c:	b003      	add	sp, #12
   1870e:	bd30      	pop	{r4, r5, pc}
	} else if (orientation == DISPLAY_ORIENTATION_ROTATED_90) {
   18710:	2901      	cmp	r1, #1
   18712:	d101      	bne.n	18718 <ili9xxx_set_orientation+0x30>
		tx_data |= ILI9XXX_MADCTL_MV;
   18714:	2328      	movs	r3, #40	; 0x28
   18716:	e7ec      	b.n	186f2 <ili9xxx_set_orientation+0xa>
	} else if (orientation == DISPLAY_ORIENTATION_ROTATED_180) {
   18718:	2902      	cmp	r1, #2
   1871a:	d101      	bne.n	18720 <ili9xxx_set_orientation+0x38>
		tx_data |= ILI9XXX_MADCTL_MY;
   1871c:	2388      	movs	r3, #136	; 0x88
   1871e:	e7e8      	b.n	186f2 <ili9xxx_set_orientation+0xa>
	} else if (orientation == DISPLAY_ORIENTATION_ROTATED_270) {
   18720:	2903      	cmp	r1, #3
	uint8_t tx_data = ILI9XXX_MADCTL_BGR;
   18722:	bf14      	ite	ne
   18724:	2308      	movne	r3, #8
		tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX |
   18726:	23e8      	moveq	r3, #232	; 0xe8
   18728:	e7e3      	b.n	186f2 <ili9xxx_set_orientation+0xa>

0001872a <ili9xxx_write>:
{
   1872a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1872e:	4616      	mov	r6, r2
	r = ili9xxx_set_mem_area(dev, x, y, desc->width, desc->height);
   18730:	889a      	ldrh	r2, [r3, #4]
{
   18732:	b085      	sub	sp, #20
	r = ili9xxx_set_mem_area(dev, x, y, desc->width, desc->height);
   18734:	88df      	ldrh	r7, [r3, #6]
{
   18736:	461c      	mov	r4, r3
	spi_data[0] = sys_cpu_to_be16(x);
   18738:	ba4b      	rev16	r3, r1
   1873a:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
   1873e:	188b      	adds	r3, r1, r2
   18740:	3b01      	subs	r3, #1
   18742:	3901      	subs	r1, #1
   18744:	4411      	add	r1, r2
   18746:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1874a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1874e:	f8ad 300a 	strh.w	r3, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
   18752:	212a      	movs	r1, #42	; 0x2a
   18754:	2304      	movs	r3, #4
   18756:	aa02      	add	r2, sp, #8
{
   18758:	4681      	mov	r9, r0
   1875a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	struct ili9xxx_data *data = (struct ili9xxx_data *)dev->data;
   1875e:	68c5      	ldr	r5, [r0, #12]
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
   18760:	f7ff ff8b 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
   18764:	2800      	cmp	r0, #0
   18766:	db3a      	blt.n	187de <ili9xxx_write+0xb4>
	spi_data[0] = sys_cpu_to_be16(y);
   18768:	ba73      	rev16	r3, r6
   1876a:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
   1876e:	19f3      	adds	r3, r6, r7
   18770:	3b01      	subs	r3, #1
   18772:	3e01      	subs	r6, #1
   18774:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18778:	443e      	add	r6, r7
   1877a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   1877e:	f8ad 300a 	strh.w	r3, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
   18782:	212b      	movs	r1, #43	; 0x2b
   18784:	2304      	movs	r3, #4
   18786:	4648      	mov	r0, r9
   18788:	aa02      	add	r2, sp, #8
   1878a:	f7ff ff76 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
   1878e:	2800      	cmp	r0, #0
   18790:	db25      	blt.n	187de <ili9xxx_write+0xb4>
	if (desc->pitch > desc->width) {
   18792:	88a3      	ldrh	r3, [r4, #4]
   18794:	8922      	ldrh	r2, [r4, #8]
   18796:	88e6      	ldrh	r6, [r4, #6]
   18798:	429a      	cmp	r2, r3
		write_h = desc->height;
   1879a:	bf94      	ite	ls
   1879c:	4637      	movls	r7, r6
		write_h = 1U;
   1879e:	2701      	movhi	r7, #1
			     desc->width * data->bytes_per_pixel * write_h);
   187a0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
   187a4:	f04f 012c 	mov.w	r1, #44	; 0x2c
			     desc->width * data->bytes_per_pixel * write_h);
   187a8:	fb03 f302 	mul.w	r3, r3, r2
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
   187ac:	4648      	mov	r0, r9
   187ae:	4642      	mov	r2, r8
   187b0:	fb07 f303 	mul.w	r3, r7, r3
		nbr_of_writes = 1U;
   187b4:	bf98      	it	ls
   187b6:	2601      	movls	r6, #1
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
   187b8:	f7ff ff5f 	bl	1867a <ili9xxx_transmit>
	if (r < 0) {
   187bc:	2800      	cmp	r0, #0
   187be:	db0e      	blt.n	187de <ili9xxx_write+0xb4>
	tx_bufs.count = 1;
   187c0:	2301      	movs	r3, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   187c2:	4699      	mov	r9, r3
	tx_bufs.buffers = &tx_buf;
   187c4:	f8cd d008 	str.w	sp, [sp, #8]
	tx_bufs.count = 1;
   187c8:	9303      	str	r3, [sp, #12]
	write_data_start += desc->pitch * data->bytes_per_pixel;
   187ca:	8922      	ldrh	r2, [r4, #8]
   187cc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
		r = spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   187d0:	f105 0a0c 	add.w	sl, r5, #12
	write_data_start += desc->pitch * data->bytes_per_pixel;
   187d4:	fb01 8802 	mla	r8, r1, r2, r8
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   187d8:	45b1      	cmp	r9, r6
   187da:	d303      	bcc.n	187e4 <ili9xxx_write+0xba>
	return 0;
   187dc:	2000      	movs	r0, #0
}
   187de:	b005      	add	sp, #20
   187e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
   187e4:	88a2      	ldrh	r2, [r4, #4]
   187e6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
		r = spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   187ea:	68a8      	ldr	r0, [r5, #8]
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
   187ec:	4353      	muls	r3, r2
   187ee:	437b      	muls	r3, r7
		tx_buf.buf = (void *)write_data_start;
   187f0:	f8cd 8000 	str.w	r8, [sp]
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
   187f4:	9301      	str	r3, [sp, #4]
   187f6:	6883      	ldr	r3, [r0, #8]
   187f8:	4651      	mov	r1, sl
   187fa:	f8d3 b000 	ldr.w	fp, [r3]
   187fe:	aa02      	add	r2, sp, #8
   18800:	2300      	movs	r3, #0
   18802:	47d8      	blx	fp
		if (r < 0) {
   18804:	2800      	cmp	r0, #0
   18806:	dbea      	blt.n	187de <ili9xxx_write+0xb4>
		write_data_start += desc->pitch * data->bytes_per_pixel;
   18808:	8923      	ldrh	r3, [r4, #8]
   1880a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   1880e:	f109 0901 	add.w	r9, r9, #1
		write_data_start += desc->pitch * data->bytes_per_pixel;
   18812:	fb02 8803 	mla	r8, r2, r3, r8
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   18816:	fa1f f989 	uxth.w	r9, r9
   1881a:	e7dd      	b.n	187d8 <ili9xxx_write+0xae>

0001881c <ili9xxx_display_blanking_off>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPON, NULL, 0);
   1881c:	2300      	movs	r3, #0
   1881e:	2129      	movs	r1, #41	; 0x29
   18820:	461a      	mov	r2, r3
   18822:	f7ff bf2a 	b.w	1867a <ili9xxx_transmit>

00018826 <ili9xxx_display_blanking_on>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPOFF, NULL, 0);
   18826:	2300      	movs	r3, #0
   18828:	2128      	movs	r1, #40	; 0x28
   1882a:	461a      	mov	r2, r3
   1882c:	f7ff bf25 	b.w	1867a <ili9xxx_transmit>

00018830 <ili9340_regs_init>:

#include <logging/log.h>
LOG_MODULE_REGISTER(display_ili9340, CONFIG_DISPLAY_LOG_LEVEL);

int ili9340_regs_init(const struct device *dev)
{
   18830:	b538      	push	{r3, r4, r5, lr}
	const struct ili9xxx_config *config = dev->config;
	const struct ili9340_regs *regs = config->regs;
   18832:	6843      	ldr	r3, [r0, #4]

	int r;

	LOG_HEXDUMP_DBG(regs->gamset, ILI9340_GAMSET_LEN, "GAMSET");
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
   18834:	2126      	movs	r1, #38	; 0x26
	const struct ili9340_regs *regs = config->regs;
   18836:	6add      	ldr	r5, [r3, #44]	; 0x2c
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
   18838:	2301      	movs	r3, #1
   1883a:	462a      	mov	r2, r5
{
   1883c:	4604      	mov	r4, r0
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
   1883e:	f7ff ff1c 	bl	1867a <ili9xxx_transmit>
			     ILI9340_GAMSET_LEN);
	if (r < 0) {
   18842:	2800      	cmp	r0, #0
   18844:	db44      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->frmctr1, ILI9340_FRMCTR1_LEN, "FRMCTR1");
	r = ili9xxx_transmit(dev, ILI9340_FRMCTR1, regs->frmctr1,
   18846:	2302      	movs	r3, #2
   18848:	21b1      	movs	r1, #177	; 0xb1
   1884a:	4620      	mov	r0, r4
   1884c:	1c6a      	adds	r2, r5, #1
   1884e:	f7ff ff14 	bl	1867a <ili9xxx_transmit>
			     ILI9340_FRMCTR1_LEN);
	if (r < 0) {
   18852:	2800      	cmp	r0, #0
   18854:	db3c      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->disctrl, ILI9340_DISCTRL_LEN, "DISCTRL");
	r = ili9xxx_transmit(dev, ILI9340_DISCTRL, regs->disctrl,
   18856:	2303      	movs	r3, #3
   18858:	21b6      	movs	r1, #182	; 0xb6
   1885a:	4620      	mov	r0, r4
   1885c:	18ea      	adds	r2, r5, r3
   1885e:	f7ff ff0c 	bl	1867a <ili9xxx_transmit>
			     ILI9340_DISCTRL_LEN);
	if (r < 0) {
   18862:	2800      	cmp	r0, #0
   18864:	db34      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl1, ILI9340_PWCTRL1_LEN, "PWCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL1, regs->pwctrl1,
   18866:	2302      	movs	r3, #2
   18868:	21c0      	movs	r1, #192	; 0xc0
   1886a:	4620      	mov	r0, r4
   1886c:	1daa      	adds	r2, r5, #6
   1886e:	f7ff ff04 	bl	1867a <ili9xxx_transmit>
			     ILI9340_PWCTRL1_LEN);
	if (r < 0) {
   18872:	2800      	cmp	r0, #0
   18874:	db2c      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl2, ILI9340_PWCTRL2_LEN, "PWCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL2, regs->pwctrl2,
   18876:	2301      	movs	r3, #1
   18878:	21c1      	movs	r1, #193	; 0xc1
   1887a:	4620      	mov	r0, r4
   1887c:	f105 0208 	add.w	r2, r5, #8
   18880:	f7ff fefb 	bl	1867a <ili9xxx_transmit>
			     ILI9340_PWCTRL2_LEN);
	if (r < 0) {
   18884:	2800      	cmp	r0, #0
   18886:	db23      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl1, ILI9340_VMCTRL1_LEN, "VMCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL1, regs->vmctrl1,
   18888:	2302      	movs	r3, #2
   1888a:	21c5      	movs	r1, #197	; 0xc5
   1888c:	4620      	mov	r0, r4
   1888e:	f105 0209 	add.w	r2, r5, #9
   18892:	f7ff fef2 	bl	1867a <ili9xxx_transmit>
			     ILI9340_VMCTRL1_LEN);
	if (r < 0) {
   18896:	2800      	cmp	r0, #0
   18898:	db1a      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl2, ILI9340_VMCTRL2_LEN, "VMCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL2, regs->vmctrl2,
   1889a:	2301      	movs	r3, #1
   1889c:	21c7      	movs	r1, #199	; 0xc7
   1889e:	4620      	mov	r0, r4
   188a0:	f105 020b 	add.w	r2, r5, #11
   188a4:	f7ff fee9 	bl	1867a <ili9xxx_transmit>
			     ILI9340_VMCTRL2_LEN);
	if (r < 0) {
   188a8:	2800      	cmp	r0, #0
   188aa:	db11      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pgamctrl, ILI9340_PGAMCTRL_LEN, "PGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_PGAMCTRL, regs->pgamctrl,
   188ac:	230f      	movs	r3, #15
   188ae:	21e0      	movs	r1, #224	; 0xe0
   188b0:	4620      	mov	r0, r4
   188b2:	f105 020c 	add.w	r2, r5, #12
   188b6:	f7ff fee0 	bl	1867a <ili9xxx_transmit>
			     ILI9340_PGAMCTRL_LEN);
	if (r < 0) {
   188ba:	2800      	cmp	r0, #0
   188bc:	db08      	blt.n	188d0 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->ngamctrl, ILI9340_NGAMCTRL_LEN, "NGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_NGAMCTRL, regs->ngamctrl,
   188be:	230f      	movs	r3, #15
   188c0:	21e1      	movs	r1, #225	; 0xe1
   188c2:	4620      	mov	r0, r4
   188c4:	f105 021b 	add.w	r2, r5, #27
   188c8:	f7ff fed7 	bl	1867a <ili9xxx_transmit>
			     ILI9340_NGAMCTRL_LEN);
	if (r < 0) {
   188cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return r;
	}

	return 0;
}
   188d0:	bd38      	pop	{r3, r4, r5, pc}

000188d2 <bt_rpmsg_open>:
{
   188d2:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   188d4:	f7ea ffb4 	bl	3840 <bt_rpmsg_platform_endpoint_is_bound>
   188d8:	b108      	cbz	r0, 188de <bt_rpmsg_open+0xc>
}
   188da:	2000      	movs	r0, #0
   188dc:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   188de:	2100      	movs	r1, #0
   188e0:	2021      	movs	r0, #33	; 0x21
   188e2:	f7fe f877 	bl	169d4 <z_impl_k_sleep>
   188e6:	e7f5      	b.n	188d4 <bt_rpmsg_open+0x2>

000188e8 <endpoint_cb>:
{
   188e8:	b508      	push	{r3, lr}
   188ea:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   188ec:	4611      	mov	r1, r2
   188ee:	f7ea fe7b 	bl	35e8 <bt_rpmsg_rx>
}
   188f2:	2000      	movs	r0, #0
   188f4:	bd08      	pop	{r3, pc}

000188f6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   188f6:	4770      	bx	lr

000188f8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   188f8:	4770      	bx	lr

000188fa <sys_clock_disable>:
   188fa:	4770      	bx	lr

000188fc <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   188fc:	2000      	movs	r0, #0
   188fe:	f7ea bad1 	b.w	2ea4 <sys_reboot>

00018902 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   18902:	b538      	push	{r3, r4, r5, lr}
   18904:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   18906:	42ab      	cmp	r3, r5
{
   18908:	4611      	mov	r1, r2
   1890a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1890c:	d804      	bhi.n	18918 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1890e:	461a      	mov	r2, r3
   18910:	f000 fc7a 	bl	19208 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   18914:	4620      	mov	r0, r4
   18916:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   18918:	2400      	movs	r4, #0
   1891a:	e7fb      	b.n	18914 <_copy+0x12>

0001891c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1891c:	f000 bc9f 	b.w	1925e <memset>

00018920 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   18920:	09c3      	lsrs	r3, r0, #7
   18922:	005a      	lsls	r2, r3, #1
   18924:	4413      	add	r3, r2
   18926:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1892a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1892e:	b2c0      	uxtb	r0, r0
   18930:	4770      	bx	lr

00018932 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18932:	78cb      	ldrb	r3, [r1, #3]
   18934:	7802      	ldrb	r2, [r0, #0]
   18936:	4053      	eors	r3, r2
   18938:	7003      	strb	r3, [r0, #0]
   1893a:	884b      	ldrh	r3, [r1, #2]
   1893c:	7842      	ldrb	r2, [r0, #1]
   1893e:	4053      	eors	r3, r2
   18940:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18942:	680a      	ldr	r2, [r1, #0]
   18944:	7883      	ldrb	r3, [r0, #2]
   18946:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1894a:	7083      	strb	r3, [r0, #2]
   1894c:	680a      	ldr	r2, [r1, #0]
   1894e:	78c3      	ldrb	r3, [r0, #3]
   18950:	4053      	eors	r3, r2
   18952:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18954:	79cb      	ldrb	r3, [r1, #7]
   18956:	7902      	ldrb	r2, [r0, #4]
   18958:	4053      	eors	r3, r2
   1895a:	7103      	strb	r3, [r0, #4]
   1895c:	88cb      	ldrh	r3, [r1, #6]
   1895e:	7942      	ldrb	r2, [r0, #5]
   18960:	4053      	eors	r3, r2
   18962:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18964:	684a      	ldr	r2, [r1, #4]
   18966:	7983      	ldrb	r3, [r0, #6]
   18968:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1896c:	7183      	strb	r3, [r0, #6]
   1896e:	684a      	ldr	r2, [r1, #4]
   18970:	79c3      	ldrb	r3, [r0, #7]
   18972:	4053      	eors	r3, r2
   18974:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18976:	7acb      	ldrb	r3, [r1, #11]
   18978:	7a02      	ldrb	r2, [r0, #8]
   1897a:	4053      	eors	r3, r2
   1897c:	7203      	strb	r3, [r0, #8]
   1897e:	7a42      	ldrb	r2, [r0, #9]
   18980:	894b      	ldrh	r3, [r1, #10]
   18982:	4053      	eors	r3, r2
   18984:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18986:	688a      	ldr	r2, [r1, #8]
   18988:	7a83      	ldrb	r3, [r0, #10]
   1898a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1898e:	7283      	strb	r3, [r0, #10]
   18990:	688a      	ldr	r2, [r1, #8]
   18992:	7ac3      	ldrb	r3, [r0, #11]
   18994:	4053      	eors	r3, r2
   18996:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18998:	7bcb      	ldrb	r3, [r1, #15]
   1899a:	7b02      	ldrb	r2, [r0, #12]
   1899c:	4053      	eors	r3, r2
   1899e:	7303      	strb	r3, [r0, #12]
   189a0:	89cb      	ldrh	r3, [r1, #14]
   189a2:	7b42      	ldrb	r2, [r0, #13]
   189a4:	4053      	eors	r3, r2
   189a6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   189a8:	68ca      	ldr	r2, [r1, #12]
   189aa:	7b83      	ldrb	r3, [r0, #14]
   189ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   189b0:	7383      	strb	r3, [r0, #14]
   189b2:	68ca      	ldr	r2, [r1, #12]
   189b4:	7bc3      	ldrb	r3, [r0, #15]
   189b6:	4053      	eors	r3, r2
   189b8:	73c3      	strb	r3, [r0, #15]
}
   189ba:	4770      	bx	lr

000189bc <shift_rows>:
{
   189bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   189be:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   189c0:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   189c2:	f88d 2000 	strb.w	r2, [sp]
   189c6:	7942      	ldrb	r2, [r0, #5]
   189c8:	f88d 2001 	strb.w	r2, [sp, #1]
   189cc:	7a82      	ldrb	r2, [r0, #10]
   189ce:	f88d 2002 	strb.w	r2, [sp, #2]
   189d2:	7bc2      	ldrb	r2, [r0, #15]
   189d4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   189d8:	7902      	ldrb	r2, [r0, #4]
   189da:	f88d 2004 	strb.w	r2, [sp, #4]
   189de:	7a42      	ldrb	r2, [r0, #9]
   189e0:	f88d 2005 	strb.w	r2, [sp, #5]
   189e4:	7b82      	ldrb	r2, [r0, #14]
   189e6:	f88d 2006 	strb.w	r2, [sp, #6]
   189ea:	78c2      	ldrb	r2, [r0, #3]
   189ec:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   189f0:	7a02      	ldrb	r2, [r0, #8]
   189f2:	f88d 2008 	strb.w	r2, [sp, #8]
   189f6:	7b42      	ldrb	r2, [r0, #13]
   189f8:	f88d 2009 	strb.w	r2, [sp, #9]
   189fc:	7882      	ldrb	r2, [r0, #2]
   189fe:	f88d 200a 	strb.w	r2, [sp, #10]
   18a02:	79c2      	ldrb	r2, [r0, #7]
   18a04:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   18a08:	7b02      	ldrb	r2, [r0, #12]
   18a0a:	f88d 200c 	strb.w	r2, [sp, #12]
   18a0e:	7842      	ldrb	r2, [r0, #1]
   18a10:	f88d 200d 	strb.w	r2, [sp, #13]
   18a14:	7982      	ldrb	r2, [r0, #6]
   18a16:	f88d 200e 	strb.w	r2, [sp, #14]
   18a1a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18a1e:	2310      	movs	r3, #16
   18a20:	466a      	mov	r2, sp
   18a22:	4619      	mov	r1, r3
   18a24:	f7ff ff6d 	bl	18902 <_copy>
}
   18a28:	b005      	add	sp, #20
   18a2a:	f85d fb04 	ldr.w	pc, [sp], #4

00018a2e <mult_row_column>:
{
   18a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a30:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a32:	7808      	ldrb	r0, [r1, #0]
{
   18a34:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a36:	f7ff ff73 	bl	18920 <_double_byte>
   18a3a:	4605      	mov	r5, r0
   18a3c:	7860      	ldrb	r0, [r4, #1]
   18a3e:	f7ff ff6f 	bl	18920 <_double_byte>
   18a42:	78a2      	ldrb	r2, [r4, #2]
   18a44:	7863      	ldrb	r3, [r4, #1]
   18a46:	4053      	eors	r3, r2
   18a48:	78e2      	ldrb	r2, [r4, #3]
   18a4a:	4053      	eors	r3, r2
   18a4c:	405d      	eors	r5, r3
   18a4e:	4045      	eors	r5, r0
   18a50:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18a52:	7860      	ldrb	r0, [r4, #1]
   18a54:	7827      	ldrb	r7, [r4, #0]
   18a56:	f7ff ff63 	bl	18920 <_double_byte>
   18a5a:	4605      	mov	r5, r0
   18a5c:	78a0      	ldrb	r0, [r4, #2]
   18a5e:	f7ff ff5f 	bl	18920 <_double_byte>
   18a62:	78a3      	ldrb	r3, [r4, #2]
   18a64:	405f      	eors	r7, r3
   18a66:	78e3      	ldrb	r3, [r4, #3]
   18a68:	405f      	eors	r7, r3
   18a6a:	407d      	eors	r5, r7
   18a6c:	4045      	eors	r5, r0
   18a6e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18a70:	78a0      	ldrb	r0, [r4, #2]
   18a72:	7865      	ldrb	r5, [r4, #1]
   18a74:	7827      	ldrb	r7, [r4, #0]
   18a76:	f7ff ff53 	bl	18920 <_double_byte>
   18a7a:	406f      	eors	r7, r5
   18a7c:	4605      	mov	r5, r0
   18a7e:	78e0      	ldrb	r0, [r4, #3]
   18a80:	f7ff ff4e 	bl	18920 <_double_byte>
   18a84:	78e3      	ldrb	r3, [r4, #3]
   18a86:	405f      	eors	r7, r3
   18a88:	407d      	eors	r5, r7
   18a8a:	4045      	eors	r5, r0
   18a8c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18a8e:	7820      	ldrb	r0, [r4, #0]
   18a90:	f7ff ff46 	bl	18920 <_double_byte>
   18a94:	7863      	ldrb	r3, [r4, #1]
   18a96:	7825      	ldrb	r5, [r4, #0]
   18a98:	405d      	eors	r5, r3
   18a9a:	78a3      	ldrb	r3, [r4, #2]
   18a9c:	405d      	eors	r5, r3
   18a9e:	4045      	eors	r5, r0
   18aa0:	78e0      	ldrb	r0, [r4, #3]
   18aa2:	f7ff ff3d 	bl	18920 <_double_byte>
   18aa6:	b2ed      	uxtb	r5, r5
   18aa8:	4045      	eors	r5, r0
   18aaa:	70f5      	strb	r5, [r6, #3]
}
   18aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018aae <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18aae:	460a      	mov	r2, r1
{
   18ab0:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18ab2:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   18ab6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18ab8:	2b00      	cmp	r3, #0
   18aba:	bfb4      	ite	lt
   18abc:	2387      	movlt	r3, #135	; 0x87
   18abe:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   18ac0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   18ac4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   18ac8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   18aca:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   18ace:	d002      	beq.n	18ad6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   18ad0:	7813      	ldrb	r3, [r2, #0]
   18ad2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   18ad4:	e7f4      	b.n	18ac0 <gf_double+0x12>
	}
}
   18ad6:	bd10      	pop	{r4, pc}

00018ad8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   18ad8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   18ada:	b120      	cbz	r0, 18ae6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   18adc:	2258      	movs	r2, #88	; 0x58
   18ade:	2100      	movs	r1, #0
   18ae0:	f7ff ff1c 	bl	1891c <_set>
   18ae4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   18ae6:	bd08      	pop	{r3, pc}

00018ae8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   18ae8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   18aea:	4604      	mov	r4, r0
   18aec:	b188      	cbz	r0, 18b12 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   18aee:	2210      	movs	r2, #16
   18af0:	2100      	movs	r1, #0
   18af2:	f7ff ff13 	bl	1891c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   18af6:	2210      	movs	r2, #16
   18af8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18afc:	2100      	movs	r1, #0
   18afe:	f7ff ff0d 	bl	1891c <_set>
	s->leftover_offset = 0;
   18b02:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   18b04:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   18b06:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   18b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18b0c:	2001      	movs	r0, #1
   18b0e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   18b12:	bd10      	pop	{r4, pc}

00018b14 <tc_cmac_setup>:
{
   18b14:	b570      	push	{r4, r5, r6, lr}
   18b16:	460d      	mov	r5, r1
   18b18:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   18b1a:	4604      	mov	r4, r0
   18b1c:	b310      	cbz	r0, 18b64 <tc_cmac_setup+0x50>
   18b1e:	b311      	cbz	r1, 18b66 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   18b20:	2258      	movs	r2, #88	; 0x58
   18b22:	2100      	movs	r1, #0
   18b24:	f7ff fefa 	bl	1891c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   18b28:	4629      	mov	r1, r5
   18b2a:	4630      	mov	r0, r6
	s->sched = sched;
   18b2c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   18b2e:	f7eb f87b 	bl	3c28 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   18b32:	2210      	movs	r2, #16
   18b34:	2100      	movs	r1, #0
   18b36:	4620      	mov	r0, r4
   18b38:	f7ff fef0 	bl	1891c <_set>
	gf_double (s->K1, s->iv);
   18b3c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   18b40:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18b42:	4621      	mov	r1, r4
   18b44:	4620      	mov	r0, r4
   18b46:	f7eb f8c3 	bl	3cd0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   18b4a:	4621      	mov	r1, r4
   18b4c:	4628      	mov	r0, r5
   18b4e:	f7ff ffae 	bl	18aae <gf_double>
	gf_double (s->K2, s->K1);
   18b52:	4629      	mov	r1, r5
   18b54:	f104 0020 	add.w	r0, r4, #32
   18b58:	f7ff ffa9 	bl	18aae <gf_double>
	tc_cmac_init(s);
   18b5c:	4620      	mov	r0, r4
   18b5e:	f7ff ffc3 	bl	18ae8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   18b62:	2001      	movs	r0, #1
}
   18b64:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18b66:	4608      	mov	r0, r1
   18b68:	e7fc      	b.n	18b64 <tc_cmac_setup+0x50>

00018b6a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   18b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b6e:	460d      	mov	r5, r1
   18b70:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   18b72:	4604      	mov	r4, r0
   18b74:	2800      	cmp	r0, #0
   18b76:	d062      	beq.n	18c3e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   18b78:	b912      	cbnz	r2, 18b80 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   18b7a:	2001      	movs	r0, #1
}
   18b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   18b80:	2900      	cmp	r1, #0
   18b82:	d05c      	beq.n	18c3e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   18b84:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   18b88:	ea50 0301 	orrs.w	r3, r0, r1
   18b8c:	d057      	beq.n	18c3e <tc_cmac_update+0xd4>
	s->countdown--;
   18b8e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   18b92:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   18b96:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   18b9a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   18b9e:	f1b8 0f00 	cmp.w	r8, #0
   18ba2:	d02a      	beq.n	18bfa <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   18ba4:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   18ba8:	f108 0030 	add.w	r0, r8, #48	; 0x30
   18bac:	42be      	cmp	r6, r7
   18bae:	4420      	add	r0, r4
   18bb0:	d208      	bcs.n	18bc4 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   18bb2:	462a      	mov	r2, r5
   18bb4:	4633      	mov	r3, r6
   18bb6:	4631      	mov	r1, r6
   18bb8:	f7ff fea3 	bl	18902 <_copy>
			s->leftover_offset += data_length;
   18bbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   18bbe:	4432      	add	r2, r6
   18bc0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   18bc2:	e7da      	b.n	18b7a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   18bc4:	463b      	mov	r3, r7
   18bc6:	462a      	mov	r2, r5
   18bc8:	4639      	mov	r1, r7
   18bca:	f7ff fe9a 	bl	18902 <_copy>
		s->leftover_offset = 0;
   18bce:	2300      	movs	r3, #0
   18bd0:	3e10      	subs	r6, #16
   18bd2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   18bd4:	4446      	add	r6, r8
		data += remaining_space;
   18bd6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18bd8:	1e63      	subs	r3, r4, #1
   18bda:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   18bde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18be2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18be6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   18be8:	ea82 0200 	eor.w	r2, r2, r0
   18bec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18bee:	d1f6      	bne.n	18bde <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   18bf0:	4621      	mov	r1, r4
   18bf2:	4620      	mov	r0, r4
   18bf4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18bf6:	f7eb f86b 	bl	3cd0 <tc_aes_encrypt>
   18bfa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   18bfe:	2e10      	cmp	r6, #16
   18c00:	d80a      	bhi.n	18c18 <tc_cmac_update+0xae>
	if (data_length > 0) {
   18c02:	2e00      	cmp	r6, #0
   18c04:	d0b9      	beq.n	18b7a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   18c06:	4633      	mov	r3, r6
   18c08:	462a      	mov	r2, r5
   18c0a:	4631      	mov	r1, r6
   18c0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18c10:	f7ff fe77 	bl	18902 <_copy>
		s->leftover_offset = data_length;
   18c14:	6466      	str	r6, [r4, #68]	; 0x44
   18c16:	e7b0      	b.n	18b7a <tc_cmac_update+0x10>
   18c18:	1e63      	subs	r3, r4, #1
   18c1a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   18c1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18c20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c24:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   18c26:	ea82 0200 	eor.w	r2, r2, r0
   18c2a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c2c:	d1f6      	bne.n	18c1c <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   18c2e:	4621      	mov	r1, r4
   18c30:	4620      	mov	r0, r4
   18c32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18c34:	f7eb f84c 	bl	3cd0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   18c38:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   18c3a:	3e10      	subs	r6, #16
   18c3c:	e7df      	b.n	18bfe <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   18c3e:	2000      	movs	r0, #0
   18c40:	e79c      	b.n	18b7c <tc_cmac_update+0x12>

00018c42 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   18c42:	b570      	push	{r4, r5, r6, lr}
   18c44:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   18c46:	4605      	mov	r5, r0
   18c48:	b1f0      	cbz	r0, 18c88 <tc_cmac_final+0x46>
   18c4a:	b371      	cbz	r1, 18caa <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   18c4c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   18c4e:	2a10      	cmp	r2, #16
   18c50:	d11b      	bne.n	18c8a <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   18c52:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c54:	1e63      	subs	r3, r4, #1
   18c56:	3901      	subs	r1, #1
   18c58:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   18c5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18c60:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c64:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   18c66:	ea82 0206 	eor.w	r2, r2, r6
   18c6a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   18c6e:	ea82 0206 	eor.w	r2, r2, r6
   18c72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c74:	d1f2      	bne.n	18c5c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   18c76:	4621      	mov	r1, r4
   18c78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18c7a:	4628      	mov	r0, r5
   18c7c:	f7eb f828 	bl	3cd0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   18c80:	4620      	mov	r0, r4
   18c82:	f7ff ff29 	bl	18ad8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   18c86:	2001      	movs	r0, #1
}
   18c88:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   18c8a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   18c8e:	2100      	movs	r1, #0
   18c90:	f1c2 0210 	rsb	r2, r2, #16
   18c94:	4420      	add	r0, r4
   18c96:	f7ff fe41 	bl	1891c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   18c9a:	2280      	movs	r2, #128	; 0x80
   18c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   18c9e:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   18ca2:	4423      	add	r3, r4
   18ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   18ca8:	e7d4      	b.n	18c54 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   18caa:	4608      	mov	r0, r1
   18cac:	e7ec      	b.n	18c88 <tc_cmac_final+0x46>

00018cae <tc_sha256_update>:
{
   18cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cb0:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   18cb2:	b110      	cbz	r0, 18cba <tc_sha256_update+0xc>
   18cb4:	b1f9      	cbz	r1, 18cf6 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   18cb6:	b90a      	cbnz	r2, 18cbc <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   18cb8:	2001      	movs	r0, #1
}
   18cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   18cbc:	2600      	movs	r6, #0
   18cbe:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   18cc0:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   18cc4:	42a5      	cmp	r5, r4
   18cc6:	d0f7      	beq.n	18cb8 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   18cc8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   18cca:	1c5a      	adds	r2, r3, #1
   18ccc:	6682      	str	r2, [r0, #104]	; 0x68
   18cce:	f814 1b01 	ldrb.w	r1, [r4], #1
   18cd2:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   18cd4:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   18cd6:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   18cda:	d9f3      	bls.n	18cc4 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   18cdc:	4639      	mov	r1, r7
   18cde:	f7eb f861 	bl	3da4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   18ce2:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   18ce6:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   18cea:	f142 0200 	adc.w	r2, r2, #0
   18cee:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   18cf2:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   18cf4:	e7e6      	b.n	18cc4 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   18cf6:	4608      	mov	r0, r1
   18cf8:	e7df      	b.n	18cba <tc_sha256_update+0xc>

00018cfa <tc_sha256_final>:
{
   18cfa:	b570      	push	{r4, r5, r6, lr}
   18cfc:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   18cfe:	4605      	mov	r5, r0
   18d00:	2800      	cmp	r0, #0
   18d02:	d054      	beq.n	18dae <tc_sha256_final+0xb4>
   18d04:	2900      	cmp	r1, #0
   18d06:	d053      	beq.n	18db0 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   18d08:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   18d0c:	6e89      	ldr	r1, [r1, #104]	; 0x68
   18d0e:	f104 0628 	add.w	r6, r4, #40	; 0x28
   18d12:	00c8      	lsls	r0, r1, #3
   18d14:	1812      	adds	r2, r2, r0
   18d16:	f143 0300 	adc.w	r3, r3, #0
   18d1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   18d1e:	2380      	movs	r3, #128	; 0x80
   18d20:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   18d22:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   18d24:	4421      	add	r1, r4
   18d26:	66a0      	str	r0, [r4, #104]	; 0x68
   18d28:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   18d2c:	d90b      	bls.n	18d46 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   18d2e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   18d32:	2100      	movs	r1, #0
   18d34:	4430      	add	r0, r6
   18d36:	f7ff fdf1 	bl	1891c <_set>
		compress(s->iv, s->leftover);
   18d3a:	4631      	mov	r1, r6
   18d3c:	4620      	mov	r0, r4
   18d3e:	f7eb f831 	bl	3da4 <compress>
		s->leftover_offset = 0;
   18d42:	2300      	movs	r3, #0
   18d44:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   18d46:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   18d48:	2100      	movs	r1, #0
   18d4a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   18d4e:	4430      	add	r0, r6
   18d50:	f7ff fde4 	bl	1891c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   18d54:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   18d56:	4631      	mov	r1, r6
   18d58:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   18d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   18d5c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   18d5e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   18d60:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   18d64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   18d68:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   18d6a:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   18d6c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   18d6e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   18d72:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   18d76:	f7eb f815 	bl	3da4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   18d7a:	1f26      	subs	r6, r4, #4
   18d7c:	1d2b      	adds	r3, r5, #4
   18d7e:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   18d82:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   18d86:	3304      	adds	r3, #4
   18d88:	0e11      	lsrs	r1, r2, #24
   18d8a:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   18d8e:	0c11      	lsrs	r1, r2, #16
   18d90:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   18d94:	0a11      	lsrs	r1, r2, #8
   18d96:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   18d9a:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   18d9e:	4283      	cmp	r3, r0
   18da0:	d1ef      	bne.n	18d82 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   18da2:	4620      	mov	r0, r4
   18da4:	2270      	movs	r2, #112	; 0x70
   18da6:	2100      	movs	r1, #0
   18da8:	f7ff fdb8 	bl	1891c <_set>
	return TC_CRYPTO_SUCCESS;
   18dac:	2001      	movs	r0, #1
}
   18dae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18db0:	4608      	mov	r0, r1
   18db2:	e7fc      	b.n	18dae <tc_sha256_final+0xb4>

00018db4 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   18db4:	b530      	push	{r4, r5, lr}
   18db6:	1e43      	subs	r3, r0, #1
   18db8:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   18dba:	42a9      	cmp	r1, r5
   18dbc:	d106      	bne.n	18dcc <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   18dbe:	2136      	movs	r1, #54	; 0x36
   18dc0:	245c      	movs	r4, #92	; 0x5c
   18dc2:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   18dc4:	1a13      	subs	r3, r2, r0
   18dc6:	2b3f      	cmp	r3, #63	; 0x3f
   18dc8:	d90c      	bls.n	18de4 <rekey+0x30>
	}
}
   18dca:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   18dcc:	780c      	ldrb	r4, [r1, #0]
   18dce:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   18dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   18dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   18dda:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   18dde:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   18de2:	e7ea      	b.n	18dba <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   18de4:	f802 1b01 	strb.w	r1, [r2], #1
   18de8:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   18dec:	e7ea      	b.n	18dc4 <rekey+0x10>

00018dee <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   18dee:	b5f0      	push	{r4, r5, r6, r7, lr}
   18df0:	460e      	mov	r6, r1
   18df2:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   18df4:	4605      	mov	r5, r0
{
   18df6:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   18df8:	b1b8      	cbz	r0, 18e2a <tc_hmac_set_key+0x3c>
   18dfa:	b341      	cbz	r1, 18e4e <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   18dfc:	b34a      	cbz	r2, 18e52 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   18dfe:	2a40      	cmp	r2, #64	; 0x40
   18e00:	f100 0770 	add.w	r7, r0, #112	; 0x70
   18e04:	d813      	bhi.n	18e2e <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   18e06:	a810      	add	r0, sp, #64	; 0x40
   18e08:	f7eb f8b2 	bl	3f70 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   18e0c:	4622      	mov	r2, r4
   18e0e:	4669      	mov	r1, sp
   18e10:	a810      	add	r0, sp, #64	; 0x40
   18e12:	f7ff ff4c 	bl	18cae <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   18e16:	a910      	add	r1, sp, #64	; 0x40
   18e18:	a834      	add	r0, sp, #208	; 0xd0
   18e1a:	f7ff ff6e 	bl	18cfa <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   18e1e:	4622      	mov	r2, r4
   18e20:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   18e22:	4638      	mov	r0, r7
   18e24:	f7ff ffc6 	bl	18db4 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   18e28:	2001      	movs	r0, #1
}
   18e2a:	b04d      	add	sp, #308	; 0x134
   18e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   18e2e:	f7eb f89f 	bl	3f70 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   18e32:	4622      	mov	r2, r4
   18e34:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   18e36:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   18e3a:	4628      	mov	r0, r5
   18e3c:	f7ff ff37 	bl	18cae <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   18e40:	4629      	mov	r1, r5
   18e42:	4620      	mov	r0, r4
   18e44:	f7ff ff59 	bl	18cfa <tc_sha256_final>
		rekey(ctx->key,
   18e48:	2220      	movs	r2, #32
   18e4a:	4621      	mov	r1, r4
   18e4c:	e7e9      	b.n	18e22 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   18e4e:	4608      	mov	r0, r1
   18e50:	e7eb      	b.n	18e2a <tc_hmac_set_key+0x3c>
   18e52:	4610      	mov	r0, r2
   18e54:	e7e9      	b.n	18e2a <tc_hmac_set_key+0x3c>

00018e56 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   18e56:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   18e58:	4604      	mov	r4, r0
   18e5a:	b140      	cbz	r0, 18e6e <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   18e5c:	f7eb f888 	bl	3f70 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   18e60:	2240      	movs	r2, #64	; 0x40
   18e62:	4620      	mov	r0, r4
   18e64:	f104 0170 	add.w	r1, r4, #112	; 0x70
   18e68:	f7ff ff21 	bl	18cae <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   18e6c:	2001      	movs	r0, #1
}
   18e6e:	bd10      	pop	{r4, pc}

00018e70 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   18e70:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   18e72:	b110      	cbz	r0, 18e7a <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   18e74:	f7ff ff1b 	bl	18cae <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   18e78:	2001      	movs	r0, #1
}
   18e7a:	bd08      	pop	{r3, pc}

00018e7c <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   18e7c:	b570      	push	{r4, r5, r6, lr}
   18e7e:	460e      	mov	r6, r1
   18e80:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   18e82:	4605      	mov	r5, r0
   18e84:	b1f0      	cbz	r0, 18ec4 <tc_hmac_final+0x48>
   18e86:	2920      	cmp	r1, #32
   18e88:	d11c      	bne.n	18ec4 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   18e8a:	b1ea      	cbz	r2, 18ec8 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   18e8c:	4611      	mov	r1, r2
   18e8e:	f7ff ff34 	bl	18cfa <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   18e92:	4620      	mov	r0, r4
   18e94:	f7eb f86c 	bl	3f70 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   18e98:	2240      	movs	r2, #64	; 0x40
   18e9a:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   18e9e:	4620      	mov	r0, r4
   18ea0:	f7ff ff05 	bl	18cae <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   18ea4:	4632      	mov	r2, r6
   18ea6:	4629      	mov	r1, r5
   18ea8:	4620      	mov	r0, r4
   18eaa:	f7ff ff00 	bl	18cae <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   18eae:	4621      	mov	r1, r4
   18eb0:	4628      	mov	r0, r5
   18eb2:	f7ff ff22 	bl	18cfa <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   18eb6:	4620      	mov	r0, r4
   18eb8:	22f0      	movs	r2, #240	; 0xf0
   18eba:	2100      	movs	r1, #0
   18ebc:	f7ff fd2e 	bl	1891c <_set>

	return TC_CRYPTO_SUCCESS;
   18ec0:	2001      	movs	r0, #1
}
   18ec2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18ec4:	2000      	movs	r0, #0
   18ec6:	e7fc      	b.n	18ec2 <tc_hmac_final+0x46>
   18ec8:	4610      	mov	r0, r2
   18eca:	e7fa      	b.n	18ec2 <tc_hmac_final+0x46>

00018ecc <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   18ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ed0:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   18ed2:	f04f 0b01 	mov.w	fp, #1
{
   18ed6:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   18ed8:	2300      	movs	r3, #0
{
   18eda:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18edc:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   18ee0:	4631      	mov	r1, r6
{
   18ee2:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18ee4:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   18ee6:	f88d 3006 	strb.w	r3, [sp, #6]
{
   18eea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   18eee:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   18ef2:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18ef6:	f7ff ff7a 	bl	18dee <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   18efa:	4620      	mov	r0, r4
   18efc:	f7ff ffab 	bl	18e56 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   18f00:	2220      	movs	r2, #32
   18f02:	4629      	mov	r1, r5
   18f04:	4620      	mov	r0, r4
   18f06:	f7ff ffb3 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   18f0a:	465a      	mov	r2, fp
   18f0c:	4620      	mov	r0, r4
   18f0e:	f10d 0106 	add.w	r1, sp, #6
   18f12:	f7ff ffad 	bl	18e70 <tc_hmac_update>

	if (data && datalen)
   18f16:	f1b8 0f00 	cmp.w	r8, #0
   18f1a:	d007      	beq.n	18f2c <update+0x60>
   18f1c:	f1b9 0f00 	cmp.w	r9, #0
   18f20:	d004      	beq.n	18f2c <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   18f22:	464a      	mov	r2, r9
   18f24:	4641      	mov	r1, r8
   18f26:	4620      	mov	r0, r4
   18f28:	f7ff ffa2 	bl	18e70 <tc_hmac_update>
	if (additional_data && additional_datalen)
   18f2c:	b13f      	cbz	r7, 18f3e <update+0x72>
   18f2e:	f1ba 0f00 	cmp.w	sl, #0
   18f32:	d004      	beq.n	18f3e <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   18f34:	4652      	mov	r2, sl
   18f36:	4639      	mov	r1, r7
   18f38:	4620      	mov	r0, r4
   18f3a:	f7ff ff99 	bl	18e70 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   18f3e:	4622      	mov	r2, r4
   18f40:	2120      	movs	r1, #32
   18f42:	4630      	mov	r0, r6
   18f44:	f7ff ff9a 	bl	18e7c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18f48:	2220      	movs	r2, #32
   18f4a:	4631      	mov	r1, r6
   18f4c:	4620      	mov	r0, r4
   18f4e:	f7ff ff4e 	bl	18dee <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   18f52:	4620      	mov	r0, r4
   18f54:	f7ff ff7f 	bl	18e56 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   18f58:	2220      	movs	r2, #32
   18f5a:	4629      	mov	r1, r5
   18f5c:	4620      	mov	r0, r4
   18f5e:	f7ff ff87 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   18f62:	4622      	mov	r2, r4
   18f64:	2120      	movs	r1, #32
   18f66:	4628      	mov	r0, r5
   18f68:	f7ff ff88 	bl	18e7c <tc_hmac_final>

	if (data == 0 || datalen == 0)
   18f6c:	f1b8 0f00 	cmp.w	r8, #0
   18f70:	d03a      	beq.n	18fe8 <update+0x11c>
   18f72:	f1b9 0f00 	cmp.w	r9, #0
   18f76:	d037      	beq.n	18fe8 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18f78:	2220      	movs	r2, #32
   18f7a:	4631      	mov	r1, r6
   18f7c:	4620      	mov	r0, r4
   18f7e:	f7ff ff36 	bl	18dee <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   18f82:	4620      	mov	r0, r4
   18f84:	f7ff ff67 	bl	18e56 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   18f88:	2220      	movs	r2, #32
   18f8a:	4629      	mov	r1, r5
   18f8c:	4620      	mov	r0, r4
   18f8e:	f7ff ff6f 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   18f92:	2201      	movs	r2, #1
   18f94:	f10d 0107 	add.w	r1, sp, #7
   18f98:	4620      	mov	r0, r4
   18f9a:	f7ff ff69 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   18f9e:	464a      	mov	r2, r9
   18fa0:	4641      	mov	r1, r8
   18fa2:	4620      	mov	r0, r4
   18fa4:	f7ff ff64 	bl	18e70 <tc_hmac_update>
	if (additional_data && additional_datalen)
   18fa8:	b13f      	cbz	r7, 18fba <update+0xee>
   18faa:	f1ba 0f00 	cmp.w	sl, #0
   18fae:	d004      	beq.n	18fba <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   18fb0:	4652      	mov	r2, sl
   18fb2:	4639      	mov	r1, r7
   18fb4:	4620      	mov	r0, r4
   18fb6:	f7ff ff5b 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   18fba:	4622      	mov	r2, r4
   18fbc:	2120      	movs	r1, #32
   18fbe:	4630      	mov	r0, r6
   18fc0:	f7ff ff5c 	bl	18e7c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18fc4:	2220      	movs	r2, #32
   18fc6:	4631      	mov	r1, r6
   18fc8:	4620      	mov	r0, r4
   18fca:	f7ff ff10 	bl	18dee <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   18fce:	4620      	mov	r0, r4
   18fd0:	f7ff ff41 	bl	18e56 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   18fd4:	2220      	movs	r2, #32
   18fd6:	4629      	mov	r1, r5
   18fd8:	4620      	mov	r0, r4
   18fda:	f7ff ff49 	bl	18e70 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   18fde:	4622      	mov	r2, r4
   18fe0:	2120      	movs	r1, #32
   18fe2:	4628      	mov	r0, r5
   18fe4:	f7ff ff4a 	bl	18e7c <tc_hmac_final>
}
   18fe8:	b003      	add	sp, #12
   18fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018fee <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   18fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18ff0:	460c      	mov	r4, r1
   18ff2:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   18ff4:	4605      	mov	r5, r0
   18ff6:	b1b0      	cbz	r0, 19026 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   18ff8:	b1b9      	cbz	r1, 1902a <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   18ffa:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   18ffc:	2220      	movs	r2, #32
   18ffe:	2100      	movs	r1, #0
   19000:	30f0      	adds	r0, #240	; 0xf0
   19002:	f7ff fc8b 	bl	1891c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   19006:	2220      	movs	r2, #32
   19008:	2101      	movs	r1, #1
   1900a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1900e:	f7ff fc85 	bl	1891c <_set>
	update(prng, personalization, plen, 0, 0);
   19012:	4628      	mov	r0, r5
   19014:	4633      	mov	r3, r6
   19016:	463a      	mov	r2, r7
   19018:	4621      	mov	r1, r4
   1901a:	9600      	str	r6, [sp, #0]
   1901c:	f7ff ff56 	bl	18ecc <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   19020:	2001      	movs	r0, #1
	prng->countdown = 0;
   19022:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   19026:	b003      	add	sp, #12
   19028:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1902a:	4608      	mov	r0, r1
   1902c:	e7fb      	b.n	19026 <tc_hmac_prng_init+0x38>

0001902e <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1902e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19030:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   19032:	4605      	mov	r5, r0
   19034:	b180      	cbz	r0, 19058 <tc_hmac_prng_reseed+0x2a>
   19036:	b179      	cbz	r1, 19058 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   19038:	2a1f      	cmp	r2, #31
   1903a:	d90d      	bls.n	19058 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1903c:	b153      	cbz	r3, 19054 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1903e:	b16c      	cbz	r4, 1905c <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   19040:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   19042:	f7ff ff43 	bl	18ecc <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   19046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	return TC_CRYPTO_SUCCESS;
   1904a:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1904c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   19050:	b003      	add	sp, #12
   19052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   19054:	9300      	str	r3, [sp, #0]
   19056:	e7f4      	b.n	19042 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   19058:	2000      	movs	r0, #0
   1905a:	e7f9      	b.n	19050 <tc_hmac_prng_reseed+0x22>
   1905c:	4620      	mov	r0, r4
   1905e:	e7f7      	b.n	19050 <tc_hmac_prng_reseed+0x22>

00019060 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   19060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19064:	460d      	mov	r5, r1
   19066:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   19068:	4680      	mov	r8, r0
   1906a:	b3d8      	cbz	r0, 190e4 <tc_hmac_prng_generate+0x84>
   1906c:	b3d2      	cbz	r2, 190e4 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1906e:	1e4b      	subs	r3, r1, #1
   19070:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   19074:	d236      	bcs.n	190e4 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   19076:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1907a:	b3ab      	cbz	r3, 190e8 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1907c:	3b01      	subs	r3, #1
   1907e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19082:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19086:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1908a:	2220      	movs	r2, #32
   1908c:	4649      	mov	r1, r9
   1908e:	4620      	mov	r0, r4
   19090:	f7ff fead 	bl	18dee <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   19094:	4620      	mov	r0, r4
   19096:	f7ff fede 	bl	18e56 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1909a:	2220      	movs	r2, #32
   1909c:	4639      	mov	r1, r7
   1909e:	4620      	mov	r0, r4
   190a0:	f7ff fee6 	bl	18e70 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   190a4:	4622      	mov	r2, r4
   190a6:	2120      	movs	r1, #32
   190a8:	4638      	mov	r0, r7
   190aa:	f7ff fee7 	bl	18e7c <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   190ae:	2d20      	cmp	r5, #32
   190b0:	462e      	mov	r6, r5
   190b2:	bf28      	it	cs
   190b4:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   190b6:	4640      	mov	r0, r8
   190b8:	4633      	mov	r3, r6
   190ba:	463a      	mov	r2, r7
   190bc:	4631      	mov	r1, r6
   190be:	f7ff fc20 	bl	18902 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   190c2:	2d20      	cmp	r5, #32
   190c4:	bf38      	it	cc
   190c6:	2520      	movcc	r5, #32
	while (outlen != 0) {
   190c8:	3d20      	subs	r5, #32
		out += bufferlen;
   190ca:	44b0      	add	r8, r6
	while (outlen != 0) {
   190cc:	d1dd      	bne.n	1908a <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   190ce:	4620      	mov	r0, r4
   190d0:	462b      	mov	r3, r5
   190d2:	462a      	mov	r2, r5
   190d4:	4629      	mov	r1, r5
   190d6:	9500      	str	r5, [sp, #0]
   190d8:	f7ff fef8 	bl	18ecc <update>

	return TC_CRYPTO_SUCCESS;
   190dc:	2001      	movs	r0, #1
}
   190de:	b003      	add	sp, #12
   190e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   190e4:	2000      	movs	r0, #0
   190e6:	e7fa      	b.n	190de <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   190e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   190ec:	e7f7      	b.n	190de <tc_hmac_prng_generate+0x7e>

000190ee <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   190ee:	2100      	movs	r1, #0
   190f0:	2001      	movs	r0, #1
   190f2:	f7eb b849 	b.w	4188 <z_arm_fatal_error>

000190f6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   190f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   190f8:	f383 880b 	msr	PSPLIM, r3
}
   190fc:	4770      	bx	lr

000190fe <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   190fe:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   19100:	6800      	ldr	r0, [r0, #0]
   19102:	f7eb b841 	b.w	4188 <z_arm_fatal_error>

00019106 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   19106:	b508      	push	{r3, lr}
	handler();
   19108:	f7eb f876 	bl	41f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1910c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   19110:	f7eb baf0 	b.w	46f4 <z_arm_exc_exit>

00019114 <mpu_configure_region>:
{
   19114:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   19116:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   19118:	680c      	ldr	r4, [r1, #0]
{
   1911a:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   1911c:	890a      	ldrh	r2, [r1, #8]
   1911e:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   19120:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19122:	3b01      	subs	r3, #1
   19124:	f024 041f 	bic.w	r4, r4, #31
   19128:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1912a:	f002 021f 	and.w	r2, r2, #31
   1912e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19132:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   19136:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   19138:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1913c:	9303      	str	r3, [sp, #12]
   1913e:	f7eb fb5b 	bl	47f8 <region_allocate_and_init>
}
   19142:	b005      	add	sp, #20
   19144:	bd30      	pop	{r4, r5, pc}

00019146 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   19146:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1914a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1914e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   19150:	bf08      	it	eq
   19152:	f06f 0015 	mvneq.w	r0, #21
   19156:	4770      	bx	lr

00019158 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   19158:	4603      	mov	r3, r0
   1915a:	3901      	subs	r1, #1
   1915c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   19160:	b90a      	cbnz	r2, 19166 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   19162:	701a      	strb	r2, [r3, #0]

	return dest;
}
   19164:	4770      	bx	lr
		*d = *s;
   19166:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1916a:	e7f7      	b.n	1915c <strcpy+0x4>

0001916c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1916c:	b570      	push	{r4, r5, r6, lr}
   1916e:	4605      	mov	r5, r0
   19170:	3901      	subs	r1, #1
   19172:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   19174:	b142      	cbz	r2, 19188 <strncpy+0x1c>
   19176:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1917a:	1e56      	subs	r6, r2, #1
   1917c:	b92b      	cbnz	r3, 1918a <strncpy+0x1e>
   1917e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   19180:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   19184:	42a2      	cmp	r2, r4
   19186:	d1fb      	bne.n	19180 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   19188:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1918a:	4632      	mov	r2, r6
		*d = *s;
   1918c:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   19190:	e7ef      	b.n	19172 <strncpy+0x6>

00019192 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19192:	4603      	mov	r3, r0
	size_t n = 0;
   19194:	2000      	movs	r0, #0

	while (*s != '\0') {
   19196:	5c1a      	ldrb	r2, [r3, r0]
   19198:	b902      	cbnz	r2, 1919c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1919a:	4770      	bx	lr
		n++;
   1919c:	3001      	adds	r0, #1
   1919e:	e7fa      	b.n	19196 <strlen+0x4>

000191a0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   191a0:	4603      	mov	r3, r0
	size_t n = 0;
   191a2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   191a4:	5c1a      	ldrb	r2, [r3, r0]
   191a6:	b10a      	cbz	r2, 191ac <strnlen+0xc>
   191a8:	4288      	cmp	r0, r1
   191aa:	d100      	bne.n	191ae <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   191ac:	4770      	bx	lr
		n++;
   191ae:	3001      	adds	r0, #1
   191b0:	e7f8      	b.n	191a4 <strnlen+0x4>

000191b2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   191b2:	1e43      	subs	r3, r0, #1
   191b4:	3901      	subs	r1, #1
   191b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   191ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   191be:	4282      	cmp	r2, r0
   191c0:	d101      	bne.n	191c6 <strcmp+0x14>
   191c2:	2a00      	cmp	r2, #0
   191c4:	d1f7      	bne.n	191b6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   191c6:	1a10      	subs	r0, r2, r0
   191c8:	4770      	bx	lr

000191ca <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   191ca:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   191cc:	2400      	movs	r4, #0
   191ce:	42a2      	cmp	r2, r4
   191d0:	d008      	beq.n	191e4 <strncmp+0x1a>
   191d2:	5d03      	ldrb	r3, [r0, r4]
   191d4:	5d0d      	ldrb	r5, [r1, r4]
   191d6:	42ab      	cmp	r3, r5
   191d8:	d102      	bne.n	191e0 <strncmp+0x16>
   191da:	3401      	adds	r4, #1
   191dc:	2b00      	cmp	r3, #0
   191de:	d1f6      	bne.n	191ce <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   191e0:	1b58      	subs	r0, r3, r5
   191e2:	e000      	b.n	191e6 <strncmp+0x1c>
   191e4:	2000      	movs	r0, #0
}
   191e6:	bd30      	pop	{r4, r5, pc}

000191e8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   191e8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   191ea:	b15a      	cbz	r2, 19204 <memcmp+0x1c>
   191ec:	3901      	subs	r1, #1
   191ee:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   191f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   191f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   191f8:	42a0      	cmp	r0, r4
   191fa:	d001      	beq.n	19200 <memcmp+0x18>
   191fc:	429a      	cmp	r2, r3
   191fe:	d0f7      	beq.n	191f0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   19200:	1ad0      	subs	r0, r2, r3
}
   19202:	bd10      	pop	{r4, pc}
		return 0;
   19204:	4610      	mov	r0, r2
   19206:	e7fc      	b.n	19202 <memcmp+0x1a>

00019208 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   19208:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1920a:	ea81 0400 	eor.w	r4, r1, r0
   1920e:	07a5      	lsls	r5, r4, #30
   19210:	4603      	mov	r3, r0
   19212:	d00b      	beq.n	1922c <memcpy+0x24>
   19214:	3b01      	subs	r3, #1
   19216:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   19218:	4291      	cmp	r1, r2
   1921a:	d11b      	bne.n	19254 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1921e:	2a00      	cmp	r2, #0
   19220:	d0fc      	beq.n	1921c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   19222:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   19226:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   19228:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1922c:	079c      	lsls	r4, r3, #30
   1922e:	d1f6      	bne.n	1921e <memcpy+0x16>
   19230:	f022 0403 	bic.w	r4, r2, #3
   19234:	1f1d      	subs	r5, r3, #4
   19236:	0896      	lsrs	r6, r2, #2
   19238:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1923a:	42b9      	cmp	r1, r7
   1923c:	d105      	bne.n	1924a <memcpy+0x42>
   1923e:	f06f 0503 	mvn.w	r5, #3
   19242:	4423      	add	r3, r4
   19244:	fb05 2206 	mla	r2, r5, r6, r2
   19248:	e7e4      	b.n	19214 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1924a:	f851 cb04 	ldr.w	ip, [r1], #4
   1924e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   19252:	e7f2      	b.n	1923a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   19254:	f811 4b01 	ldrb.w	r4, [r1], #1
   19258:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1925c:	e7dc      	b.n	19218 <memcpy+0x10>

0001925e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1925e:	4603      	mov	r3, r0
{
   19260:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   19262:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   19264:	079c      	lsls	r4, r3, #30
   19266:	d111      	bne.n	1928c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   19268:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1926c:	f022 0603 	bic.w	r6, r2, #3
   19270:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   19274:	441e      	add	r6, r3
   19276:	0894      	lsrs	r4, r2, #2
   19278:	42b3      	cmp	r3, r6
   1927a:	d10d      	bne.n	19298 <memset+0x3a>
   1927c:	f06f 0503 	mvn.w	r5, #3
   19280:	fb05 2204 	mla	r2, r5, r4, r2
   19284:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   19286:	4293      	cmp	r3, r2
   19288:	d109      	bne.n	1929e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1928a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1928c:	2a00      	cmp	r2, #0
   1928e:	d0fc      	beq.n	1928a <memset+0x2c>
		*(d_byte++) = c_byte;
   19290:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19294:	3a01      	subs	r2, #1
   19296:	e7e5      	b.n	19264 <memset+0x6>
		*(d_word++) = c_word;
   19298:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1929c:	e7ec      	b.n	19278 <memset+0x1a>
		*(d_byte++) = c_byte;
   1929e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   192a2:	e7f0      	b.n	19286 <memset+0x28>

000192a4 <_stdout_hook_default>:
}
   192a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   192a8:	4770      	bx	lr

000192aa <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   192aa:	f7eb bc17 	b.w	4adc <z_impl_zephyr_fputc>

000192ae <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   192ae:	684b      	ldr	r3, [r1, #4]
   192b0:	2b01      	cmp	r3, #1
   192b2:	dd07      	ble.n	192c4 <sprintf_out+0x16>
		*(p->ptr) = c;
   192b4:	680b      	ldr	r3, [r1, #0]
   192b6:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   192b8:	680b      	ldr	r3, [r1, #0]
   192ba:	3301      	adds	r3, #1
   192bc:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   192be:	684b      	ldr	r3, [r1, #4]
   192c0:	3b01      	subs	r3, #1
   192c2:	604b      	str	r3, [r1, #4]
}
   192c4:	2000      	movs	r0, #0
   192c6:	4770      	bx	lr

000192c8 <display_get_capabilities>:
   192c8:	6883      	ldr	r3, [r0, #8]
   192ca:	69db      	ldr	r3, [r3, #28]
   192cc:	4718      	bx	r3

000192ce <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   192ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192d2:	4690      	mov	r8, r2
   192d4:	460c      	mov	r4, r1
	uint16_t w = area->x2 - area->x1 + 1;
   192d6:	888d      	ldrh	r5, [r1, #4]
   192d8:	880b      	ldrh	r3, [r1, #0]
	uint16_t h = area->y2 - area->y1 + 1;
   192da:	88ce      	ldrh	r6, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   192dc:	3501      	adds	r5, #1
   192de:	1aed      	subs	r5, r5, r3
	uint16_t h = area->y2 - area->y1 + 1;
   192e0:	884b      	ldrh	r3, [r1, #2]
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   192e2:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   192e6:	3601      	adds	r6, #1
{
   192e8:	b08b      	sub	sp, #44	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   192ea:	1af6      	subs	r6, r6, r3
	uint16_t w = area->x2 - area->x1 + 1;
   192ec:	b2ad      	uxth	r5, r5
	uint16_t h = area->y2 - area->y1 + 1;
   192ee:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   192f0:	a906      	add	r1, sp, #24
{
   192f2:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   192f4:	4648      	mov	r0, r9
   192f6:	f7ff ffe7 	bl	192c8 <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   192fa:	fb06 f305 	mul.w	r3, r6, r5
   192fe:	08db      	lsrs	r3, r3, #3
   19300:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   19302:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19306:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   1930a:	f8ad 5010 	strh.w	r5, [sp, #16]
	desc.pitch = w;
   1930e:	f8ad 5014 	strh.w	r5, [sp, #20]
   19312:	4648      	mov	r0, r9
   19314:	689d      	ldr	r5, [r3, #8]
   19316:	8862      	ldrh	r2, [r4, #2]
   19318:	ab03      	add	r3, sp, #12
   1931a:	8821      	ldrh	r1, [r4, #0]
	desc.height = h;
   1931c:	f8ad 6012 	strh.w	r6, [sp, #18]
   19320:	47a8      	blx	r5
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   19322:	9b08      	ldr	r3, [sp, #32]
   19324:	071b      	lsls	r3, r3, #28
   19326:	d509      	bpl.n	1933c <lvgl_flush_cb_mono+0x6e>
   19328:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1932c:	f8cd 8000 	str.w	r8, [sp]
   19330:	689d      	ldr	r5, [r3, #8]
   19332:	4648      	mov	r0, r9
   19334:	8862      	ldrh	r2, [r4, #2]
   19336:	8821      	ldrh	r1, [r4, #0]
   19338:	ab03      	add	r3, sp, #12
   1933a:	47a8      	blx	r5
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   1933c:	4638      	mov	r0, r7
   1933e:	f007 fde0 	bl	20f02 <lv_disp_flush_ready>
}
   19342:	b00b      	add	sp, #44	; 0x2c
   19344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019348 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   19348:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   1934c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1934e:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   19350:	4669      	mov	r1, sp
{
   19352:	4690      	mov	r8, r2
   19354:	461c      	mov	r4, r3
   19356:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
   1935a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	display_get_capabilities(display_dev, &cap);
   1935c:	f7ff ffb4 	bl	192c8 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   19360:	9802      	ldr	r0, [sp, #8]
   19362:	f010 0f01 	tst.w	r0, #1
   19366:	f000 0002 	and.w	r0, r0, #2
   1936a:	d020      	beq.n	193ae <lvgl_set_px_cb_mono+0x66>
		buf_xy = buf + x + y/8 * buf_w;
   1936c:	4633      	mov	r3, r6
   1936e:	2e00      	cmp	r6, #0
   19370:	bfb8      	it	lt
   19372:	1df3      	addlt	r3, r6, #7
   19374:	10d9      	asrs	r1, r3, #3
   19376:	fb11 4408 	smlabb	r4, r1, r8, r4
   1937a:	4273      	negs	r3, r6
   1937c:	eb07 0104 	add.w	r1, r7, r4

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   19380:	f006 0407 	and.w	r4, r6, #7
   19384:	f003 0307 	and.w	r3, r3, #7
   19388:	bf58      	it	pl
   1938a:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   1938c:	b108      	cbz	r0, 19392 <lvgl_set_px_cb_mono+0x4a>
			bit = 7 - x%8;
   1938e:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   19392:	2201      	movs	r2, #1
   19394:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   19396:	fa02 f404 	lsl.w	r4, r2, r4
   1939a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1939e:	780b      	ldrb	r3, [r1, #0]
   193a0:	2a04      	cmp	r2, #4
   193a2:	b2e4      	uxtb	r4, r4
   193a4:	d114      	bne.n	193d0 <lvgl_set_px_cb_mono+0x88>
		if (color.full == 0) {
   193a6:	b9ad      	cbnz	r5, 193d4 <lvgl_set_px_cb_mono+0x8c>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   193a8:	ea23 0304 	bic.w	r3, r3, r4
   193ac:	e013      	b.n	193d6 <lvgl_set_px_cb_mono+0x8e>
		buf_xy = buf + x/8 + y * buf_w/8;
   193ae:	4643      	mov	r3, r8
   193b0:	4621      	mov	r1, r4
   193b2:	435e      	muls	r6, r3
   193b4:	bf48      	it	mi
   193b6:	3607      	addmi	r6, #7
   193b8:	2c00      	cmp	r4, #0
   193ba:	bfb8      	it	lt
   193bc:	1de1      	addlt	r1, r4, #7
   193be:	10f6      	asrs	r6, r6, #3
   193c0:	eb06 06e1 	add.w	r6, r6, r1, asr #3
   193c4:	4263      	negs	r3, r4
   193c6:	eb07 0106 	add.w	r1, r7, r6
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   193ca:	f004 0407 	and.w	r4, r4, #7
   193ce:	e7d9      	b.n	19384 <lvgl_set_px_cb_mono+0x3c>
		if (color.full == 0) {
   193d0:	2d00      	cmp	r5, #0
   193d2:	d1e9      	bne.n	193a8 <lvgl_set_px_cb_mono+0x60>
			*buf_xy |= BIT(bit);
   193d4:	4323      	orrs	r3, r4
			*buf_xy &= ~BIT(bit);
   193d6:	700b      	strb	r3, [r1, #0]
		}
	}
}
   193d8:	b004      	add	sp, #16
   193da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000193de <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   193de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   193e0:	460c      	mov	r4, r1
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   193e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   193e4:	4669      	mov	r1, sp
   193e6:	f7ff ff6f 	bl	192c8 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   193ea:	9b02      	ldr	r3, [sp, #8]
   193ec:	07db      	lsls	r3, r3, #31
   193ee:	d509      	bpl.n	19404 <lvgl_rounder_cb_mono+0x26>
		area->y1 &= ~0x7;
   193f0:	8863      	ldrh	r3, [r4, #2]
   193f2:	f023 0307 	bic.w	r3, r3, #7
   193f6:	8063      	strh	r3, [r4, #2]
		area->y2 |= 0x7;
   193f8:	88e3      	ldrh	r3, [r4, #6]
   193fa:	f043 0307 	orr.w	r3, r3, #7
   193fe:	80e3      	strh	r3, [r4, #6]
	} else {
		area->x1 &= ~0x7;
		area->x2 |= 0x7;
	}
}
   19400:	b004      	add	sp, #16
   19402:	bd10      	pop	{r4, pc}
		area->x1 &= ~0x7;
   19404:	8823      	ldrh	r3, [r4, #0]
   19406:	f023 0307 	bic.w	r3, r3, #7
   1940a:	8023      	strh	r3, [r4, #0]
		area->x2 |= 0x7;
   1940c:	88a3      	ldrh	r3, [r4, #4]
   1940e:	f043 0307 	orr.w	r3, r3, #7
   19412:	80a3      	strh	r3, [r4, #4]
}
   19414:	e7f4      	b.n	19400 <lvgl_rounder_cb_mono+0x22>

00019416 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   19416:	b5f0      	push	{r4, r5, r6, r7, lr}
   19418:	4605      	mov	r5, r0
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   1941a:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   1941c:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   1941e:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   19422:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   19426:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   19428:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
   1942a:	1b9b      	subs	r3, r3, r6
	uint16_t h = area->y2 - area->y1 + 1;
   1942c:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   1942e:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   19430:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   19432:	fb04 f103 	mul.w	r1, r4, r3
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   19436:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   19438:	b087      	sub	sp, #28
	desc.width = w;
   1943a:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   1943e:	f8ad 3014 	strh.w	r3, [sp, #20]
   19442:	6883      	ldr	r3, [r0, #8]
	desc.buf_size = w * 2U * h;
   19444:	0049      	lsls	r1, r1, #1
   19446:	9200      	str	r2, [sp, #0]
   19448:	9103      	str	r1, [sp, #12]
	desc.height = h;
   1944a:	f8ad 4012 	strh.w	r4, [sp, #18]
   1944e:	b2ba      	uxth	r2, r7
   19450:	689c      	ldr	r4, [r3, #8]
   19452:	b2b1      	uxth	r1, r6
   19454:	ab03      	add	r3, sp, #12
   19456:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   19458:	4628      	mov	r0, r5
   1945a:	f007 fd52 	bl	20f02 <lv_disp_flush_ready>
}
   1945e:	b007      	add	sp, #28
   19460:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019462 <lvgl_set_px_cb_16bit>:

#ifndef CONFIG_LVGL_COLOR_DEPTH_16
void lvgl_set_px_cb_16bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   19462:	b530      	push	{r4, r5, lr}
   19464:	9c04      	ldr	r4, [sp, #16]
#if LV_COLOR_16_SWAP == 0
    LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /* 8 - 6  = 2*/
#else
    LV_COLOR_SET_G16_SWAP(ret, ret.ch.green_h = (LV_COLOR_GET_G(color) >> 2); /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
#endif
    LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3);  /* 8 - 5  = 3*/
   19466:	f3c4 2585 	ubfx	r5, r4, #10, #6
   1946a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
   1946e:	ea40 1045 	orr.w	r0, r0, r5, lsl #5
   19472:	f3c4 44c4 	ubfx	r4, r4, #19, #5
    return ret.full;
   19476:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
	uint16_t *buf_xy = (uint16_t *)(buf + x * 2U + y * 2U * buf_w);
   1947a:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
   1947e:	fb04 3202 	mla	r2, r4, r2, r3
	*buf_xy = lv_color_to16(color);
   19482:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
}
   19486:	bd30      	pop	{r4, r5, pc}

00019488 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   19488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1948a:	4605      	mov	r5, r0
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   1948c:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   1948e:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   19490:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   19494:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   19498:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   1949a:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
   1949c:	1b9b      	subs	r3, r3, r6
	uint16_t h = area->y2 - area->y1 + 1;
   1949e:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   194a0:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   194a2:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   194a4:	fb04 f103 	mul.w	r1, r4, r3
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   194a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   194aa:	b087      	sub	sp, #28
	desc.width = w;
   194ac:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   194b0:	f8ad 3014 	strh.w	r3, [sp, #20]
   194b4:	6883      	ldr	r3, [r0, #8]
	desc.buf_size = w * 3U * h;
   194b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   194ba:	9200      	str	r2, [sp, #0]
   194bc:	9103      	str	r1, [sp, #12]
	desc.height = h;
   194be:	f8ad 4012 	strh.w	r4, [sp, #18]
   194c2:	b2ba      	uxth	r2, r7
   194c4:	689c      	ldr	r4, [r3, #8]
   194c6:	b2b1      	uxth	r1, r6
   194c8:	ab03      	add	r3, sp, #12
   194ca:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   194cc:	4628      	mov	r0, r5
   194ce:	f007 fd18 	bl	20f02 <lv_disp_flush_ready>
}
   194d2:	b007      	add	sp, #28
   194d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000194d6 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   194d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   194da:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
{
   194de:	f89d e020 	ldrb.w	lr, [sp, #32]
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   194e2:	fb04 3302 	mla	r3, r4, r2, r3
	lv_color32_t converted_color;

#ifdef CONFIG_LVGL_COLOR_DEPTH_32
	if (opa != LV_OPA_COVER) {
   194e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   194ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
{
   194ee:	9807      	ldr	r0, [sp, #28]
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   194f0:	eb01 0c03 	add.w	ip, r1, r3
	if (opa != LV_OPA_COVER) {
   194f4:	d027      	beq.n	19546 <lvgl_set_px_cb_24bit+0x70>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   194f6:	f248 0781 	movw	r7, #32897	; 0x8081
   194fa:	5ccc      	ldrb	r4, [r1, r3]
   194fc:	f1ce 05ff 	rsb	r5, lr, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   19500:	f89c 6001 	ldrb.w	r6, [ip, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   19504:	436c      	muls	r4, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   19506:	436e      	muls	r6, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   19508:	f3c0 4207 	ubfx	r2, r0, #16, #8
   1950c:	fb02 420e 	mla	r2, r2, lr, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   19510:	f3c0 2407 	ubfx	r4, r0, #8, #8
   19514:	fb04 640e 	mla	r4, r4, lr, r6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   19518:	f89c 6002 	ldrb.w	r6, [ip, #2]
   1951c:	fa5f f880 	uxtb.w	r8, r0
   19520:	436e      	muls	r6, r5
   19522:	fb08 650e 	mla	r5, r8, lr, r6
   19526:	437d      	muls	r5, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   19528:	437c      	muls	r4, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1952a:	437a      	muls	r2, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1952c:	0ded      	lsrs	r5, r5, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1952e:	f3c4 54c7 	ubfx	r4, r4, #23, #8
   19532:	f365 0007 	bfi	r0, r5, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   19536:	f3c2 52c7 	ubfx	r2, r2, #23, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1953a:	f364 200f 	bfi	r0, r4, #8, #8
   1953e:	f362 4017 	bfi	r0, r2, #16, #8
   19542:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   19546:	f3c0 4207 	ubfx	r2, r0, #16, #8
   1954a:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   1954c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   19550:	f88c 3001 	strb.w	r3, [ip, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   19554:	f88c 0002 	strb.w	r0, [ip, #2]
}
   19558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001955c <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   1955c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1955e:	4605      	mov	r5, r0
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   19560:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   19562:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   19564:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   19568:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   1956c:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   1956e:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
   19570:	1b9b      	subs	r3, r3, r6
	uint16_t h = area->y2 - area->y1 + 1;
   19572:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   19574:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   19576:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   19578:	fb04 f103 	mul.w	r1, r4, r3
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   1957c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1957e:	b087      	sub	sp, #28
	desc.width = w;
   19580:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   19584:	f8ad 3014 	strh.w	r3, [sp, #20]
   19588:	6883      	ldr	r3, [r0, #8]
	desc.buf_size = w * 4U * h;
   1958a:	0089      	lsls	r1, r1, #2
   1958c:	9200      	str	r2, [sp, #0]
   1958e:	9103      	str	r1, [sp, #12]
	desc.height = h;
   19590:	f8ad 4012 	strh.w	r4, [sp, #18]
   19594:	b2ba      	uxth	r2, r7
   19596:	689c      	ldr	r4, [r3, #8]
   19598:	b2b1      	uxth	r1, r6
   1959a:	ab03      	add	r3, sp, #12
   1959c:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   1959e:	4628      	mov	r0, r5
   195a0:	f007 fcaf 	bl	20f02 <lv_disp_flush_ready>
}
   195a4:	b007      	add	sp, #28
   195a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000195a8 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   195a8:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   195aa:	b530      	push	{r4, r5, lr}
   195ac:	4605      	mov	r5, r0
   195ae:	b087      	sub	sp, #28
   195b0:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   195b2:	a802      	add	r0, sp, #8
   195b4:	4411      	add	r1, r2
   195b6:	f7ff fe27 	bl	19208 <memcpy>
	(void)memset(res + 3, 0, 13);
   195ba:	220d      	movs	r2, #13
   195bc:	2100      	movs	r1, #0
   195be:	f10d 000b 	add.w	r0, sp, #11
   195c2:	f7ff fe4c 	bl	1925e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   195c6:	aa02      	add	r2, sp, #8
   195c8:	4611      	mov	r1, r2
   195ca:	4628      	mov	r0, r5
   195cc:	f000 fa2f 	bl	19a2e <bt_encrypt_le>
	if (err) {
   195d0:	b970      	cbnz	r0, 195f0 <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   195d2:	2203      	movs	r2, #3
   195d4:	a902      	add	r1, sp, #8
   195d6:	a801      	add	r0, sp, #4
   195d8:	f7ff fe16 	bl	19208 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   195dc:	2203      	movs	r2, #3
   195de:	4620      	mov	r0, r4
   195e0:	a901      	add	r1, sp, #4
   195e2:	f7ff fe01 	bl	191e8 <memcmp>
   195e6:	fab0 f080 	clz	r0, r0
   195ea:	0940      	lsrs	r0, r0, #5
}
   195ec:	b007      	add	sp, #28
   195ee:	bd30      	pop	{r4, r5, pc}
		return false;
   195f0:	2000      	movs	r0, #0
   195f2:	e7fb      	b.n	195ec <bt_rpa_irk_matches+0x44>

000195f4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   195f4:	b510      	push	{r4, lr}
   195f6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   195f8:	7801      	ldrb	r1, [r0, #0]
   195fa:	7822      	ldrb	r2, [r4, #0]
{
   195fc:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   195fe:	428a      	cmp	r2, r1
   19600:	d00e      	beq.n	19620 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   19602:	4669      	mov	r1, sp
   19604:	f7eb fc20 	bl	4e48 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   19608:	4620      	mov	r0, r4
   1960a:	a905      	add	r1, sp, #20
   1960c:	f7eb fc1c 	bl	4e48 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   19610:	2210      	movs	r2, #16
   19612:	f10d 0115 	add.w	r1, sp, #21
   19616:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1961a:	f7ff fde5 	bl	191e8 <memcmp>
   1961e:	e007      	b.n	19630 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   19620:	2a01      	cmp	r2, #1
   19622:	d007      	beq.n	19634 <bt_uuid_cmp+0x40>
   19624:	2a02      	cmp	r2, #2
   19626:	d008      	beq.n	1963a <bt_uuid_cmp+0x46>
   19628:	b95a      	cbnz	r2, 19642 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1962a:	8840      	ldrh	r0, [r0, #2]
   1962c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1962e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   19630:	b00a      	add	sp, #40	; 0x28
   19632:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   19634:	6840      	ldr	r0, [r0, #4]
   19636:	6863      	ldr	r3, [r4, #4]
   19638:	e7f9      	b.n	1962e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1963a:	2210      	movs	r2, #16
   1963c:	1c61      	adds	r1, r4, #1
   1963e:	3001      	adds	r0, #1
   19640:	e7eb      	b.n	1961a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   19642:	f06f 0015 	mvn.w	r0, #21
   19646:	e7f3      	b.n	19630 <bt_uuid_cmp+0x3c>

00019648 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   19648:	2a04      	cmp	r2, #4
{
   1964a:	b538      	push	{r3, r4, r5, lr}
   1964c:	460c      	mov	r4, r1
	switch (data_len) {
   1964e:	d00d      	beq.n	1966c <bt_uuid_create+0x24>
   19650:	2a10      	cmp	r2, #16
   19652:	d019      	beq.n	19688 <bt_uuid_create+0x40>
   19654:	2a02      	cmp	r2, #2
   19656:	f04f 0300 	mov.w	r3, #0
   1965a:	d11b      	bne.n	19694 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1965c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1965e:	784a      	ldrb	r2, [r1, #1]
   19660:	780b      	ldrb	r3, [r1, #0]
   19662:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   19666:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   19668:	2001      	movs	r0, #1
}
   1966a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1966c:	2301      	movs	r3, #1
   1966e:	7003      	strb	r3, [r0, #0]
   19670:	78a2      	ldrb	r2, [r4, #2]
   19672:	78c9      	ldrb	r1, [r1, #3]
   19674:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   19676:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1967a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1967c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   19680:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   19684:	6042      	str	r2, [r0, #4]
		break;
   19686:	e7ef      	b.n	19668 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   19688:	2302      	movs	r3, #2
   1968a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1968e:	f7ff fdbb 	bl	19208 <memcpy>
		break;
   19692:	e7e9      	b.n	19668 <bt_uuid_create+0x20>
	switch (data_len) {
   19694:	4618      	mov	r0, r3
   19696:	e7e8      	b.n	1966a <bt_uuid_create+0x22>

00019698 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   19698:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1969a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1969c:	2106      	movs	r1, #6
{
   1969e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   196a0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   196a4:	f7ed feca 	bl	743c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   196a8:	b918      	cbnz	r0, 196b2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   196aa:	79a3      	ldrb	r3, [r4, #6]
   196ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   196b0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   196b2:	bd10      	pop	{r4, pc}

000196b4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   196b4:	280f      	cmp	r0, #15
   196b6:	d806      	bhi.n	196c6 <bt_hci_evt_get_flags+0x12>
   196b8:	280d      	cmp	r0, #13
   196ba:	d80b      	bhi.n	196d4 <bt_hci_evt_get_flags+0x20>
   196bc:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   196be:	bf14      	ite	ne
   196c0:	2002      	movne	r0, #2
   196c2:	2003      	moveq	r0, #3
   196c4:	4770      	bx	lr
	switch (evt) {
   196c6:	2813      	cmp	r0, #19
   196c8:	d004      	beq.n	196d4 <bt_hci_evt_get_flags+0x20>
   196ca:	281a      	cmp	r0, #26
   196cc:	bf14      	ite	ne
   196ce:	2002      	movne	r0, #2
   196d0:	2001      	moveq	r0, #1
   196d2:	4770      	bx	lr
   196d4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   196d6:	4770      	bx	lr

000196d8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   196d8:	e8d0 0faf 	lda	r0, [r0]
}
   196dc:	4770      	bx	lr

000196de <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   196de:	2207      	movs	r2, #7
   196e0:	f7ff bd92 	b.w	19208 <memcpy>

000196e4 <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   196e4:	3008      	adds	r0, #8
   196e6:	f002 b861 	b.w	1b7ac <net_buf_simple_add_u8>

000196ea <atomic_and>:
{
   196ea:	4603      	mov	r3, r0
}
   196ec:	e8d3 0fef 	ldaex	r0, [r3]
   196f0:	ea00 0201 	and.w	r2, r0, r1
   196f4:	e8c3 2fec 	stlex	ip, r2, [r3]
   196f8:	f1bc 0f00 	cmp.w	ip, #0
   196fc:	d1f6      	bne.n	196ec <atomic_and+0x2>
   196fe:	4770      	bx	lr

00019700 <atomic_or>:
{
   19700:	4603      	mov	r3, r0
}
   19702:	e8d3 0fef 	ldaex	r0, [r3]
   19706:	ea40 0201 	orr.w	r2, r0, r1
   1970a:	e8c3 2fec 	stlex	ip, r2, [r3]
   1970e:	f1bc 0f00 	cmp.w	ip, #0
   19712:	d1f6      	bne.n	19702 <atomic_or+0x2>
   19714:	4770      	bx	lr

00019716 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   19716:	460b      	mov	r3, r1
   19718:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1971a:	f001 041f 	and.w	r4, r1, #31
   1971e:	2101      	movs	r1, #1
   19720:	095b      	lsrs	r3, r3, #5
   19722:	40a1      	lsls	r1, r4

	if (val) {
   19724:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19728:	b112      	cbz	r2, 19730 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1972a:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1972c:	f7ff bfe8 	b.w	19700 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19730:	43c9      	mvns	r1, r1
}
   19732:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19734:	f7ff bfd9 	b.w	196ea <atomic_and>

00019738 <atomic_test_and_set_bit>:
{
   19738:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1973a:	2301      	movs	r3, #1
   1973c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19740:	f7ff ffde 	bl	19700 <atomic_or>
	return (old & mask) != 0;
   19744:	4201      	tst	r1, r0
}
   19746:	bf14      	ite	ne
   19748:	2001      	movne	r0, #1
   1974a:	2000      	moveq	r0, #0
   1974c:	bd08      	pop	{r3, pc}

0001974e <sys_put_le64>:
	dst[1] = val >> 8;
   1974e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   19752:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   19754:	2300      	movs	r3, #0
   19756:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   19758:	0e00      	lsrs	r0, r0, #24
   1975a:	70d0      	strb	r0, [r2, #3]
   1975c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   19760:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   19762:	7093      	strb	r3, [r2, #2]
   19764:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   19766:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   19768:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1976a:	71d1      	strb	r1, [r2, #7]
}
   1976c:	4770      	bx	lr

0001976e <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(uint8_t id)
   1976e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   19770:	2106      	movs	r1, #6
   19772:	4668      	mov	r0, sp
   19774:	f7ed fe62 	bl	743c <bt_rand>
	if (err) {
   19778:	b940      	cbnz	r0, 1978c <le_adv_set_private_addr.isra.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1977a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1977e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   19780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19784:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   19788:	f7ec f906 	bl	5998 <set_random_address>
}
   1978c:	b003      	add	sp, #12
   1978e:	f85d fb04 	ldr.w	pc, [sp], #4

00019792 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19792:	f100 0310 	add.w	r3, r0, #16
{
   19796:	b510      	push	{r4, lr}
   19798:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1979a:	4618      	mov	r0, r3
   1979c:	f7ff ff9c 	bl	196d8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   197a0:	0642      	lsls	r2, r0, #25
   197a2:	d50a      	bpl.n	197ba <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   197a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   197a8:	4618      	mov	r0, r3
   197aa:	f7ff ffa9 	bl	19700 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   197ae:	4620      	mov	r0, r4
}
   197b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   197b4:	2100      	movs	r1, #0
   197b6:	f7ec b92f 	b.w	5a18 <set_le_adv_enable_legacy>
}
   197ba:	bd10      	pop	{r4, pc}

000197bc <adv_unpause_enabled>:
{
   197bc:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   197be:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   197c2:	4604      	mov	r4, r0
   197c4:	3010      	adds	r0, #16
   197c6:	f7ff ff90 	bl	196ea <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   197ca:	0483      	lsls	r3, r0, #18
   197cc:	d505      	bpl.n	197da <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   197ce:	4620      	mov	r0, r4
}
   197d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   197d4:	2101      	movs	r1, #1
   197d6:	f7ec b91f 	b.w	5a18 <set_le_adv_enable_legacy>
}
   197da:	bd10      	pop	{r4, pc}

000197dc <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   197dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197de:	4607      	mov	r7, r0
   197e0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   197e2:	f242 0027 	movw	r0, #8231	; 0x2027
   197e6:	2127      	movs	r1, #39	; 0x27
   197e8:	f7ec f826 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   197ec:	4604      	mov	r4, r0
   197ee:	b1d0      	cbz	r0, 19826 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   197f0:	2127      	movs	r1, #39	; 0x27
   197f2:	3008      	adds	r0, #8
   197f4:	f001 ffcb 	bl	1b78e <net_buf_simple_add>
   197f8:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   197fa:	4639      	mov	r1, r7
   197fc:	f7ff ff6f 	bl	196de <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   19800:	4631      	mov	r1, r6
   19802:	2210      	movs	r2, #16
   19804:	1de8      	adds	r0, r5, #7
   19806:	f7ff fcff 	bl	19208 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1980a:	2210      	movs	r2, #16
   1980c:	2100      	movs	r1, #0
   1980e:	f105 0017 	add.w	r0, r5, #23
   19812:	f7ff fd24 	bl	1925e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   19816:	4621      	mov	r1, r4
}
   19818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1981c:	2200      	movs	r2, #0
   1981e:	f242 0027 	movw	r0, #8231	; 0x2027
   19822:	f7ec b841 	b.w	58a8 <bt_hci_cmd_send_sync>
}
   19826:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001982c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1982c:	7a03      	ldrb	r3, [r0, #8]
   1982e:	075b      	lsls	r3, r3, #29
   19830:	d504      	bpl.n	1983c <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   19832:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   19836:	3001      	adds	r0, #1
   19838:	f7ff bfd0 	b.w	197dc <hci_id_add.isra.0>
}
   1983c:	4770      	bx	lr

0001983e <addr_res_enable>:
{
   1983e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   19840:	2101      	movs	r1, #1
{
   19842:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   19844:	f242 002d 	movw	r0, #8237	; 0x202d
   19848:	f7eb fff6 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   1984c:	4604      	mov	r4, r0
   1984e:	b150      	cbz	r0, 19866 <addr_res_enable+0x28>
	net_buf_add_u8(buf, enable);
   19850:	4629      	mov	r1, r5
   19852:	f7ff ff47 	bl	196e4 <net_buf_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   19856:	4621      	mov	r1, r4
}
   19858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1985c:	2200      	movs	r2, #0
   1985e:	f242 002d 	movw	r0, #8237	; 0x202d
   19862:	f7ec b821 	b.w	58a8 <bt_hci_cmd_send_sync>
}
   19866:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1986a:	bd38      	pop	{r3, r4, r5, pc}

0001986c <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   1986c:	f7ec b900 	b.w	5a70 <set_le_scan_enable_legacy>

00019870 <bt_lookup_id_addr>:
{
   19870:	b510      	push	{r4, lr}
   19872:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   19874:	f7f2 ff38 	bl	c6e8 <bt_keys_find_irk>
		if (keys) {
   19878:	b100      	cbz	r0, 1987c <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1987a:	1c44      	adds	r4, r0, #1
}
   1987c:	4620      	mov	r0, r4
   1987e:	bd10      	pop	{r4, pc}

00019880 <bt_le_scan_random_addr_check>:
}
   19880:	2001      	movs	r0, #1
   19882:	4770      	bx	lr

00019884 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   19884:	f7ec b998 	b.w	5bb8 <bt_le_create_conn_legacy>

00019888 <bt_hci_disconnect>:
{
   19888:	b570      	push	{r4, r5, r6, lr}
   1988a:	4606      	mov	r6, r0
   1988c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1988e:	f240 4006 	movw	r0, #1030	; 0x406
   19892:	2103      	movs	r1, #3
   19894:	f7eb ffd0 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   19898:	4604      	mov	r4, r0
   1989a:	b168      	cbz	r0, 198b8 <bt_hci_disconnect+0x30>
   1989c:	2103      	movs	r1, #3
   1989e:	3008      	adds	r0, #8
   198a0:	f001 ff75 	bl	1b78e <net_buf_simple_add>
	disconn->reason = reason;
   198a4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   198a6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   198a8:	4621      	mov	r1, r4
}
   198aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   198ae:	2200      	movs	r2, #0
   198b0:	f240 4006 	movw	r0, #1030	; 0x406
   198b4:	f7eb bff8 	b.w	58a8 <bt_hci_cmd_send_sync>
}
   198b8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   198bc:	bd70      	pop	{r4, r5, r6, pc}

000198be <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   198be:	8802      	ldrh	r2, [r0, #0]
   198c0:	8843      	ldrh	r3, [r0, #2]
{
   198c2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   198c4:	429a      	cmp	r2, r3
   198c6:	d818      	bhi.n	198fa <bt_le_conn_params_valid+0x3c>
   198c8:	2a05      	cmp	r2, #5
   198ca:	d916      	bls.n	198fa <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   198cc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   198d0:	d813      	bhi.n	198fa <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   198d2:	8884      	ldrh	r4, [r0, #4]
   198d4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   198d8:	d20f      	bcs.n	198fa <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   198da:	88c1      	ldrh	r1, [r0, #6]
   198dc:	f640 4076 	movw	r0, #3190	; 0xc76
   198e0:	f1a1 020a 	sub.w	r2, r1, #10
   198e4:	b292      	uxth	r2, r2
   198e6:	4282      	cmp	r2, r0
   198e8:	d807      	bhi.n	198fa <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   198ea:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   198ee:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   198f2:	bf34      	ite	cc
   198f4:	2001      	movcc	r0, #1
   198f6:	2000      	movcs	r0, #0
}
   198f8:	bd10      	pop	{r4, pc}
		return false;
   198fa:	2000      	movs	r0, #0
   198fc:	e7fc      	b.n	198f8 <bt_le_conn_params_valid+0x3a>

000198fe <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   198fe:	7a03      	ldrb	r3, [r0, #8]
   19900:	07d9      	lsls	r1, r3, #31
   19902:	d504      	bpl.n	1990e <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   19904:	f023 0301 	bic.w	r3, r3, #1
   19908:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1990a:	f7ec b9e5 	b.w	5cd8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1990e:	0799      	lsls	r1, r3, #30
   19910:	d504      	bpl.n	1991c <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   19912:	f023 0302 	bic.w	r3, r3, #2
   19916:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   19918:	f7ec babc 	b.w	5e94 <bt_id_del>
}
   1991c:	4770      	bx	lr

0001991e <bt_le_set_data_len>:
{
   1991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19920:	4607      	mov	r7, r0
   19922:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   19924:	f242 0022 	movw	r0, #8226	; 0x2022
   19928:	2106      	movs	r1, #6
{
   1992a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1992c:	f7eb ff84 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   19930:	4604      	mov	r4, r0
   19932:	b170      	cbz	r0, 19952 <bt_le_set_data_len+0x34>
   19934:	2106      	movs	r1, #6
   19936:	3008      	adds	r0, #8
   19938:	f001 ff29 	bl	1b78e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1993c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1993e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   19940:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   19942:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   19944:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   19946:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1994a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1994e:	f7ec bd07 	b.w	6360 <bt_hci_cmd_send>
}
   19952:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019958 <bt_le_set_phy>:
{
   19958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1995c:	4680      	mov	r8, r0
   1995e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   19960:	f242 0032 	movw	r0, #8242	; 0x2032
   19964:	2107      	movs	r1, #7
{
   19966:	4616      	mov	r6, r2
   19968:	461d      	mov	r5, r3
   1996a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1996e:	f7eb ff63 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   19972:	4604      	mov	r4, r0
   19974:	b190      	cbz	r0, 1999c <bt_le_set_phy+0x44>
   19976:	2107      	movs	r1, #7
   19978:	3008      	adds	r0, #8
   1997a:	f001 ff08 	bl	1b78e <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1997e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   19982:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   19984:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   19986:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   19988:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1998a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1998e:	4621      	mov	r1, r4
}
   19990:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   19994:	f242 0032 	movw	r0, #8242	; 0x2032
   19998:	f7ec bce2 	b.w	6360 <bt_hci_cmd_send>
}
   1999c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   199a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000199a4 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   199a4:	6880      	ldr	r0, [r0, #8]
   199a6:	f7ec be99 	b.w	66dc <enh_conn_complete>

000199aa <le_legacy_conn_complete>:
{
   199aa:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   199ac:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   199ae:	6881      	ldr	r1, [r0, #8]
{
   199b0:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   199b2:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   199b4:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   199b6:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   199ba:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   199be:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   199c0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   199c4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   199c8:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   199cc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   199d0:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   199d4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   199d8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   199dc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   199e0:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   199e4:	7b4b      	ldrb	r3, [r1, #13]
   199e6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   199ea:	f7ff fe78 	bl	196de <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   199ee:	4669      	mov	r1, sp
   199f0:	2206      	movs	r2, #6
   199f2:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   199f6:	9400      	str	r4, [sp, #0]
   199f8:	f8ad 4004 	strh.w	r4, [sp, #4]
   199fc:	f7ff fc04 	bl	19208 <memcpy>
   19a00:	2206      	movs	r2, #6
   19a02:	4669      	mov	r1, sp
   19a04:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   19a08:	9400      	str	r4, [sp, #0]
   19a0a:	f8ad 4004 	strh.w	r4, [sp, #4]
   19a0e:	f7ff fbfb 	bl	19208 <memcpy>
	enh_conn_complete(&enh);
   19a12:	a802      	add	r0, sp, #8
   19a14:	f7ec fe62 	bl	66dc <enh_conn_complete>
}
   19a18:	b00a      	add	sp, #40	; 0x28
   19a1a:	bd10      	pop	{r4, pc}

00019a1c <bt_addr_le_is_bonded>:
{
   19a1c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   19a1e:	f7f2 fe9d 	bl	c75c <bt_keys_find_addr>
		return keys && keys->keys;
   19a22:	b118      	cbz	r0, 19a2c <bt_addr_le_is_bonded+0x10>
   19a24:	89c0      	ldrh	r0, [r0, #14]
   19a26:	3800      	subs	r0, #0
   19a28:	bf18      	it	ne
   19a2a:	2001      	movne	r0, #1
}
   19a2c:	bd08      	pop	{r3, pc}

00019a2e <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   19a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a30:	b0b1      	sub	sp, #196	; 0xc4
   19a32:	466d      	mov	r5, sp
   19a34:	4614      	mov	r4, r2
   19a36:	460e      	mov	r6, r1
   19a38:	462a      	mov	r2, r5
   19a3a:	462f      	mov	r7, r5
   19a3c:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   19a40:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   19a44:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   19a46:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   19a4a:	d1f9      	bne.n	19a40 <bt_encrypt_le+0x12>
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   19a4c:	4629      	mov	r1, r5
   19a4e:	a804      	add	r0, sp, #16
   19a50:	f7ea f8ea 	bl	3c28 <tc_aes128_set_encrypt_key>
   19a54:	b1e0      	cbz	r0, 19a90 <bt_encrypt_le+0x62>
   19a56:	f106 0310 	add.w	r3, r6, #16
		*pdst++ = *psrc--;
   19a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   19a5e:	42b3      	cmp	r3, r6
		*pdst++ = *psrc--;
   19a60:	f805 2b01 	strb.w	r2, [r5], #1
	for (; length > 0; length--) {
   19a64:	d1f9      	bne.n	19a5a <bt_encrypt_le+0x2c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   19a66:	4639      	mov	r1, r7
   19a68:	4620      	mov	r0, r4
   19a6a:	aa04      	add	r2, sp, #16
   19a6c:	f7ea f930 	bl	3cd0 <tc_aes_encrypt>
   19a70:	b170      	cbz	r0, 19a90 <bt_encrypt_le+0x62>
   19a72:	1e63      	subs	r3, r4, #1
   19a74:	f104 0210 	add.w	r2, r4, #16
   19a78:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   19a7a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19a7e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   19a82:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19a84:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19a86:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   19a88:	d1f7      	bne.n	19a7a <bt_encrypt_le+0x4c>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   19a8a:	2000      	movs	r0, #0
}
   19a8c:	b031      	add	sp, #196	; 0xc4
   19a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   19a90:	f06f 0015 	mvn.w	r0, #21
   19a94:	e7fa      	b.n	19a8c <bt_encrypt_le+0x5e>

00019a96 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a96:	e8d0 0faf 	lda	r0, [r0]
}
   19a9a:	4770      	bx	lr

00019a9c <atomic_dec>:
{
   19a9c:	4603      	mov	r3, r0
}
   19a9e:	e8d3 0fef 	ldaex	r0, [r3]
   19aa2:	1e42      	subs	r2, r0, #1
   19aa4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19aa8:	2900      	cmp	r1, #0
   19aaa:	d1f8      	bne.n	19a9e <atomic_dec+0x2>
   19aac:	4770      	bx	lr

00019aae <tx_notify>:
{
   19aae:	b570      	push	{r4, r5, r6, lr}
   19ab0:	4604      	mov	r4, r0
	__asm__ volatile(
   19ab2:	f04f 0220 	mov.w	r2, #32
   19ab6:	f3ef 8311 	mrs	r3, BASEPRI
   19aba:	f382 8811 	msr	BASEPRI, r2
   19abe:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   19ac2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   19ac4:	b920      	cbnz	r0, 19ad0 <tx_notify+0x22>
	__asm__ volatile(
   19ac6:	f383 8811 	msr	BASEPRI, r3
   19aca:	f3bf 8f6f 	isb	sy
}
   19ace:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19ad2:	6802      	ldr	r2, [r0, #0]
   19ad4:	4288      	cmp	r0, r1
	list->tail = node;
   19ad6:	bf08      	it	eq
   19ad8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   19ada:	6222      	str	r2, [r4, #32]
   19adc:	f383 8811 	msr	BASEPRI, r3
   19ae0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   19ae4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   19ae8:	f7ed fcc0 	bl	746c <tx_free>
		cb(conn, user_data);
   19aec:	4631      	mov	r1, r6
   19aee:	4620      	mov	r0, r4
   19af0:	47a8      	blx	r5
	while (1) {
   19af2:	e7de      	b.n	19ab2 <tx_notify+0x4>

00019af4 <tx_complete_work>:
	tx_notify(conn);
   19af4:	3828      	subs	r0, #40	; 0x28
   19af6:	f7ff bfda 	b.w	19aae <tx_notify>

00019afa <bt_conn_new>:
{
   19afa:	b538      	push	{r3, r4, r5, lr}
   19afc:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   19afe:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19b00:	2501      	movs	r5, #1
   19b02:	428b      	cmp	r3, r1
   19b04:	d102      	bne.n	19b0c <bt_conn_new+0x12>
		return NULL;
   19b06:	2400      	movs	r4, #0
}
   19b08:	4620      	mov	r0, r4
   19b0a:	bd38      	pop	{r3, r4, r5, pc}
   19b0c:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   19b10:	e8d2 0fef 	ldaex	r0, [r2]
   19b14:	2800      	cmp	r0, #0
   19b16:	d104      	bne.n	19b22 <bt_conn_new+0x28>
   19b18:	e8c2 5fec 	stlex	ip, r5, [r2]
   19b1c:	f1bc 0f00 	cmp.w	ip, #0
   19b20:	d1f6      	bne.n	19b10 <bt_conn_new+0x16>
   19b22:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19b26:	d002      	beq.n	19b2e <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   19b28:	4604      	mov	r4, r0
   19b2a:	3301      	adds	r3, #1
   19b2c:	e7e9      	b.n	19b02 <bt_conn_new+0x8>
	if (!conn) {
   19b2e:	2c00      	cmp	r4, #0
   19b30:	d0ea      	beq.n	19b08 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   19b32:	22c0      	movs	r2, #192	; 0xc0
   19b34:	2100      	movs	r1, #0
   19b36:	4620      	mov	r0, r4
   19b38:	f7ff fb91 	bl	1925e <memset>
	return conn;
   19b3c:	e7e4      	b.n	19b08 <bt_conn_new+0xe>

00019b3e <bt_conn_le_start_encryption>:
{
   19b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b42:	4682      	mov	sl, r0
   19b44:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   19b46:	f242 0019 	movw	r0, #8217	; 0x2019
   19b4a:	211c      	movs	r1, #28
{
   19b4c:	4690      	mov	r8, r2
   19b4e:	461f      	mov	r7, r3
   19b50:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   19b52:	f7eb fe71 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   19b56:	4605      	mov	r5, r0
   19b58:	b340      	cbz	r0, 19bac <bt_conn_le_start_encryption+0x6e>
   19b5a:	211c      	movs	r1, #28
   19b5c:	3008      	adds	r0, #8
   19b5e:	f001 fe16 	bl	1b78e <net_buf_simple_add>
   19b62:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   19b64:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   19b68:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   19b6a:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   19b6e:	4649      	mov	r1, r9
   19b70:	f7ff fb4a 	bl	19208 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   19b74:	2202      	movs	r2, #2
   19b76:	4641      	mov	r1, r8
   19b78:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   19b7c:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   19b7e:	f7ff fb43 	bl	19208 <memcpy>
	memcpy(cp->ltk, ltk, len);
   19b82:	4632      	mov	r2, r6
   19b84:	4639      	mov	r1, r7
   19b86:	4620      	mov	r0, r4
   19b88:	f7ff fb3e 	bl	19208 <memcpy>
	if (len < sizeof(cp->ltk)) {
   19b8c:	2e0f      	cmp	r6, #15
   19b8e:	d805      	bhi.n	19b9c <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   19b90:	2100      	movs	r1, #0
   19b92:	f1c6 0210 	rsb	r2, r6, #16
   19b96:	19a0      	adds	r0, r4, r6
   19b98:	f7ff fb61 	bl	1925e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   19b9c:	4629      	mov	r1, r5
}
   19b9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   19ba2:	2200      	movs	r2, #0
   19ba4:	f242 0019 	movw	r0, #8217	; 0x2019
   19ba8:	f7eb be7e 	b.w	58a8 <bt_hci_cmd_send_sync>
}
   19bac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019bb4 <bt_conn_set_security>:
{
   19bb4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19bb6:	7b43      	ldrb	r3, [r0, #13]
{
   19bb8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19bba:	2b07      	cmp	r3, #7
   19bbc:	d124      	bne.n	19c08 <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   19bbe:	7a43      	ldrb	r3, [r0, #9]
   19bc0:	428b      	cmp	r3, r1
   19bc2:	d224      	bcs.n	19c0e <bt_conn_set_security+0x5a>
   19bc4:	7a83      	ldrb	r3, [r0, #10]
   19bc6:	428b      	cmp	r3, r1
   19bc8:	d221      	bcs.n	19c0e <bt_conn_set_security+0x5a>
	if (val) {
   19bca:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   19bcc:	f100 0304 	add.w	r3, r0, #4
   19bd0:	d511      	bpl.n	19bf6 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19bd2:	e8d3 2fef 	ldaex	r2, [r3]
   19bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   19bda:	e8c3 2fe0 	stlex	r0, r2, [r3]
   19bde:	2800      	cmp	r0, #0
   19be0:	d1f7      	bne.n	19bd2 <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   19be2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   19be6:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   19be8:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   19bea:	f001 fcea 	bl	1b5c2 <bt_smp_start_security>
	if (err) {
   19bee:	b108      	cbz	r0, 19bf4 <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   19bf0:	7a63      	ldrb	r3, [r4, #9]
   19bf2:	72a3      	strb	r3, [r4, #10]
}
   19bf4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19bf6:	e8d3 2fef 	ldaex	r2, [r3]
   19bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   19bfe:	e8c3 2fe0 	stlex	r0, r2, [r3]
   19c02:	2800      	cmp	r0, #0
   19c04:	d0ed      	beq.n	19be2 <bt_conn_set_security+0x2e>
   19c06:	e7f6      	b.n	19bf6 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   19c08:	f06f 0038 	mvn.w	r0, #56	; 0x38
   19c0c:	e7f2      	b.n	19bf4 <bt_conn_set_security+0x40>
		return 0;
   19c0e:	2000      	movs	r0, #0
   19c10:	e7f0      	b.n	19bf4 <bt_conn_set_security+0x40>

00019c12 <bt_conn_get_security>:
}
   19c12:	7a40      	ldrb	r0, [r0, #9]
   19c14:	4770      	bx	lr

00019c16 <bt_conn_reset_rx_state>:
{
   19c16:	b510      	push	{r4, lr}
   19c18:	4604      	mov	r4, r0
	if (!conn->rx) {
   19c1a:	6900      	ldr	r0, [r0, #16]
   19c1c:	b118      	cbz	r0, 19c26 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   19c1e:	f7f2 fe69 	bl	c8f4 <net_buf_unref>
	conn->rx = NULL;
   19c22:	2300      	movs	r3, #0
   19c24:	6123      	str	r3, [r4, #16]
}
   19c26:	bd10      	pop	{r4, pc}

00019c28 <bt_conn_is_peer_addr_le>:
{
   19c28:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   19c2a:	7a03      	ldrb	r3, [r0, #8]
{
   19c2c:	4604      	mov	r4, r0
	if (id != conn->id) {
   19c2e:	428b      	cmp	r3, r1
{
   19c30:	4615      	mov	r5, r2
	if (id != conn->id) {
   19c32:	d115      	bne.n	19c60 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   19c34:	f100 0188 	add.w	r1, r0, #136	; 0x88
   19c38:	2207      	movs	r2, #7
   19c3a:	4628      	mov	r0, r5
   19c3c:	f7ff fad4 	bl	191e8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   19c40:	b180      	cbz	r0, 19c64 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   19c42:	78e3      	ldrb	r3, [r4, #3]
   19c44:	2207      	movs	r2, #7
   19c46:	b943      	cbnz	r3, 19c5a <bt_conn_is_peer_addr_le+0x32>
   19c48:	f104 0196 	add.w	r1, r4, #150	; 0x96
   19c4c:	4628      	mov	r0, r5
   19c4e:	f7ff facb 	bl	191e8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   19c52:	fab0 f080 	clz	r0, r0
   19c56:	0940      	lsrs	r0, r0, #5
}
   19c58:	bd38      	pop	{r3, r4, r5, pc}
   19c5a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   19c5e:	e7f5      	b.n	19c4c <bt_conn_is_peer_addr_le+0x24>
		return false;
   19c60:	2000      	movs	r0, #0
   19c62:	e7f9      	b.n	19c58 <bt_conn_is_peer_addr_le+0x30>
		return true;
   19c64:	2001      	movs	r0, #1
   19c66:	e7f7      	b.n	19c58 <bt_conn_is_peer_addr_le+0x30>

00019c68 <bt_conn_ref>:
{
   19c68:	4603      	mov	r3, r0
   19c6a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   19c6c:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   19c70:	4610      	mov	r0, r2
   19c72:	f7ff ff10 	bl	19a96 <atomic_get>
		if (!old) {
   19c76:	b160      	cbz	r0, 19c92 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   19c78:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19c7a:	e8d2 4fef 	ldaex	r4, [r2]
   19c7e:	4284      	cmp	r4, r0
   19c80:	d104      	bne.n	19c8c <bt_conn_ref+0x24>
   19c82:	e8c2 1fec 	stlex	ip, r1, [r2]
   19c86:	f1bc 0f00 	cmp.w	ip, #0
   19c8a:	d1f6      	bne.n	19c7a <bt_conn_ref+0x12>
   19c8c:	d1f0      	bne.n	19c70 <bt_conn_ref+0x8>
}
   19c8e:	4618      	mov	r0, r3
   19c90:	bd10      	pop	{r4, pc}
			return NULL;
   19c92:	4603      	mov	r3, r0
   19c94:	e7fb      	b.n	19c8e <bt_conn_ref+0x26>

00019c96 <conn_lookup_handle>:
{
   19c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c9a:	4606      	mov	r6, r0
   19c9c:	460d      	mov	r5, r1
   19c9e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   19ca0:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   19ca2:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	for (i = 0; i < size; i++) {
   19ca6:	42ac      	cmp	r4, r5
   19ca8:	d102      	bne.n	19cb0 <conn_lookup_handle+0x1a>
	return NULL;
   19caa:	2000      	movs	r0, #0
}
   19cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   19cb0:	fb08 6004 	mla	r0, r8, r4, r6
   19cb4:	f7ff ffd8 	bl	19c68 <bt_conn_ref>
		if (!conn) {
   19cb8:	b158      	cbz	r0, 19cd2 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   19cba:	7b43      	ldrb	r3, [r0, #13]
   19cbc:	2b01      	cmp	r3, #1
   19cbe:	d002      	beq.n	19cc6 <conn_lookup_handle+0x30>
   19cc0:	3b07      	subs	r3, #7
   19cc2:	2b01      	cmp	r3, #1
   19cc4:	d802      	bhi.n	19ccc <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   19cc6:	8803      	ldrh	r3, [r0, #0]
   19cc8:	42bb      	cmp	r3, r7
   19cca:	d0ef      	beq.n	19cac <conn_lookup_handle+0x16>
	atomic_val_t old = atomic_dec(&conn->ref);
   19ccc:	30c0      	adds	r0, #192	; 0xc0
   19cce:	f7ff fee5 	bl	19a9c <atomic_dec>
	for (i = 0; i < size; i++) {
   19cd2:	3401      	adds	r4, #1
   19cd4:	e7e7      	b.n	19ca6 <conn_lookup_handle+0x10>

00019cd6 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   19cd6:	30c0      	adds	r0, #192	; 0xc0
   19cd8:	f7ff bee0 	b.w	19a9c <atomic_dec>

00019cdc <bt_conn_get_dst>:
}
   19cdc:	3088      	adds	r0, #136	; 0x88
   19cde:	4770      	bx	lr

00019ce0 <bt_conn_le_data_len_update>:
{
   19ce0:	460b      	mov	r3, r1
	if (conn->le.data_len.tx_max_len == param->tx_max_len &&
   19ce2:	8809      	ldrh	r1, [r1, #0]
   19ce4:	885a      	ldrh	r2, [r3, #2]
   19ce6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   19cea:	428b      	cmp	r3, r1
   19cec:	d103      	bne.n	19cf6 <bt_conn_le_data_len_update+0x16>
   19cee:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
   19cf2:	4293      	cmp	r3, r2
   19cf4:	d001      	beq.n	19cfa <bt_conn_le_data_len_update+0x1a>
	return bt_le_set_data_len(conn, param->tx_max_len, param->tx_max_time);
   19cf6:	f7ff be12 	b.w	1991e <bt_le_set_data_len>
}
   19cfa:	f06f 0044 	mvn.w	r0, #68	; 0x44
   19cfe:	4770      	bx	lr

00019d00 <bt_conn_le_conn_update>:
{
   19d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d02:	4607      	mov	r7, r0
   19d04:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   19d06:	f242 0013 	movw	r0, #8211	; 0x2013
   19d0a:	210e      	movs	r1, #14
   19d0c:	f7eb fd94 	bl	5838 <bt_hci_cmd_create>
	if (!buf) {
   19d10:	4606      	mov	r6, r0
   19d12:	b1d0      	cbz	r0, 19d4a <bt_conn_le_conn_update+0x4a>
   19d14:	210e      	movs	r1, #14
   19d16:	3008      	adds	r0, #8
   19d18:	f001 fd39 	bl	1b78e <net_buf_simple_add>
   19d1c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   19d1e:	220e      	movs	r2, #14
   19d20:	2100      	movs	r1, #0
   19d22:	f7ff fa9c 	bl	1925e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   19d26:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19d28:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   19d2a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   19d2c:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19d2e:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   19d30:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   19d32:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19d34:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   19d38:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   19d3a:	88ab      	ldrh	r3, [r5, #4]
   19d3c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   19d3e:	88eb      	ldrh	r3, [r5, #6]
   19d40:	8123      	strh	r3, [r4, #8]
}
   19d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19d46:	f7eb bdaf 	b.w	58a8 <bt_hci_cmd_send_sync>
}
   19d4a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019d50 <l2cap_connected>:
}
   19d50:	4770      	bx	lr

00019d52 <l2cap_disconnected>:
   19d52:	4770      	bx	lr

00019d54 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19d54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   19d56:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19d58:	b17b      	cbz	r3, 19d7a <bt_l2cap_chan_remove+0x26>
   19d5a:	2200      	movs	r2, #0
   19d5c:	3b08      	subs	r3, #8
   19d5e:	b163      	cbz	r3, 19d7a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   19d60:	428b      	cmp	r3, r1
   19d62:	f103 0408 	add.w	r4, r3, #8
   19d66:	d10f      	bne.n	19d88 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   19d68:	688b      	ldr	r3, [r1, #8]
   19d6a:	b93a      	cbnz	r2, 19d7c <bt_l2cap_chan_remove+0x28>
   19d6c:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   19d6e:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   19d70:	4294      	cmp	r4, r2
   19d72:	d100      	bne.n	19d76 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   19d74:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   19d76:	2300      	movs	r3, #0
   19d78:	608b      	str	r3, [r1, #8]
}
   19d7a:	bd10      	pop	{r4, pc}
   19d7c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19d7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   19d80:	429c      	cmp	r4, r3
	list->tail = node;
   19d82:	bf08      	it	eq
   19d84:	6502      	streq	r2, [r0, #80]	; 0x50
}
   19d86:	e7f6      	b.n	19d76 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19d88:	2c00      	cmp	r4, #0
   19d8a:	d0f6      	beq.n	19d7a <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19d8c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19d8e:	2b00      	cmp	r3, #0
   19d90:	d0f3      	beq.n	19d7a <bt_l2cap_chan_remove+0x26>
   19d92:	4622      	mov	r2, r4
   19d94:	3b08      	subs	r3, #8
   19d96:	e7e2      	b.n	19d5e <bt_l2cap_chan_remove+0xa>

00019d98 <bt_l2cap_chan_del>:
{
   19d98:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   19d9a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   19d9e:	4604      	mov	r4, r0
	if (!chan->conn) {
   19da0:	b123      	cbz	r3, 19dac <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   19da2:	686b      	ldr	r3, [r5, #4]
   19da4:	b103      	cbz	r3, 19da8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   19da6:	4798      	blx	r3
	chan->conn = NULL;
   19da8:	2300      	movs	r3, #0
   19daa:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   19dac:	68e3      	ldr	r3, [r4, #12]
   19dae:	b10b      	cbz	r3, 19db4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   19db0:	4620      	mov	r0, r4
   19db2:	4798      	blx	r3
	if (ops->released) {
   19db4:	69eb      	ldr	r3, [r5, #28]
   19db6:	b11b      	cbz	r3, 19dc0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   19db8:	4620      	mov	r0, r4
}
   19dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   19dbe:	4718      	bx	r3
}
   19dc0:	bd70      	pop	{r4, r5, r6, pc}

00019dc2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19dc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   19dc4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19dc6:	b18b      	cbz	r3, 19dec <bt_l2cap_disconnected+0x2a>
   19dc8:	f1b3 0008 	subs.w	r0, r3, #8
   19dcc:	d00e      	beq.n	19dec <bt_l2cap_disconnected+0x2a>
   19dce:	681c      	ldr	r4, [r3, #0]
   19dd0:	b104      	cbz	r4, 19dd4 <bt_l2cap_disconnected+0x12>
   19dd2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   19dd4:	f7ff ffe0 	bl	19d98 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19dd8:	b144      	cbz	r4, 19dec <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19dda:	f114 0308 	adds.w	r3, r4, #8
   19dde:	d002      	beq.n	19de6 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19de0:	68a3      	ldr	r3, [r4, #8]
   19de2:	b103      	cbz	r3, 19de6 <bt_l2cap_disconnected+0x24>
   19de4:	3b08      	subs	r3, #8
{
   19de6:	4620      	mov	r0, r4
   19de8:	461c      	mov	r4, r3
   19dea:	e7f3      	b.n	19dd4 <bt_l2cap_disconnected+0x12>
}
   19dec:	bd10      	pop	{r4, pc}

00019dee <bt_l2cap_security_changed>:
{
   19dee:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19df0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   19df2:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19df4:	b1a3      	cbz	r3, 19e20 <bt_l2cap_security_changed+0x32>
   19df6:	f1b3 0008 	subs.w	r0, r3, #8
   19dfa:	d011      	beq.n	19e20 <bt_l2cap_security_changed+0x32>
   19dfc:	681c      	ldr	r4, [r3, #0]
   19dfe:	b104      	cbz	r4, 19e02 <bt_l2cap_security_changed+0x14>
   19e00:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   19e02:	6843      	ldr	r3, [r0, #4]
   19e04:	689b      	ldr	r3, [r3, #8]
   19e06:	b10b      	cbz	r3, 19e0c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   19e08:	4629      	mov	r1, r5
   19e0a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19e0c:	b144      	cbz	r4, 19e20 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19e0e:	f114 0308 	adds.w	r3, r4, #8
   19e12:	d002      	beq.n	19e1a <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19e14:	68a3      	ldr	r3, [r4, #8]
   19e16:	b103      	cbz	r3, 19e1a <bt_l2cap_security_changed+0x2c>
   19e18:	3b08      	subs	r3, #8
{
   19e1a:	4620      	mov	r0, r4
   19e1c:	461c      	mov	r4, r3
   19e1e:	e7f0      	b.n	19e02 <bt_l2cap_security_changed+0x14>
}
   19e20:	bd38      	pop	{r3, r4, r5, pc}

00019e22 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   19e22:	3104      	adds	r1, #4
   19e24:	f7ee b960 	b.w	80e8 <bt_conn_create_pdu_timeout>

00019e28 <bt_l2cap_send_cb>:
{
   19e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e2c:	4614      	mov	r4, r2
   19e2e:	4605      	mov	r5, r0
   19e30:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   19e32:	f102 0008 	add.w	r0, r2, #8
   19e36:	2104      	movs	r1, #4
   19e38:	461e      	mov	r6, r3
   19e3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   19e3e:	f001 fcc7 	bl	1b7d0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19e42:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19e44:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19e46:	3a04      	subs	r2, #4
   19e48:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   19e4a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19e4c:	4632      	mov	r2, r6
   19e4e:	4621      	mov	r1, r4
   19e50:	4628      	mov	r0, r5
}
   19e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19e56:	f7ed bd0f 	b.w	7878 <bt_conn_send_cb>

00019e5a <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   19e5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19e5c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19e5e:	2202      	movs	r2, #2
   19e60:	2001      	movs	r0, #1
   19e62:	f7ee fa6f 	bl	8344 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   19e66:	4604      	mov	r4, r0
   19e68:	b160      	cbz	r0, 19e84 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   19e6a:	2102      	movs	r1, #2
   19e6c:	3008      	adds	r0, #8
   19e6e:	f001 fc8e 	bl	1b78e <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19e72:	2300      	movs	r3, #0
   19e74:	4622      	mov	r2, r4
   19e76:	7003      	strb	r3, [r0, #0]
   19e78:	7043      	strb	r3, [r0, #1]
   19e7a:	2105      	movs	r1, #5
   19e7c:	4628      	mov	r0, r5
   19e7e:	9300      	str	r3, [sp, #0]
   19e80:	f7ff ffd2 	bl	19e28 <bt_l2cap_send_cb>
}
   19e84:	b003      	add	sp, #12
   19e86:	bd30      	pop	{r4, r5, pc}

00019e88 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19e88:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   19e8a:	b160      	cbz	r0, 19ea6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   19e8c:	3808      	subs	r0, #8
   19e8e:	b900      	cbnz	r0, 19e92 <bt_l2cap_le_lookup_tx_cid+0xa>
   19e90:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   19e92:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   19e96:	428b      	cmp	r3, r1
   19e98:	d005      	beq.n	19ea6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19e9a:	f110 0308 	adds.w	r3, r0, #8
   19e9e:	d001      	beq.n	19ea4 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19ea0:	6880      	ldr	r0, [r0, #8]
   19ea2:	e7f2      	b.n	19e8a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   19ea4:	4618      	mov	r0, r3
}
   19ea6:	4770      	bx	lr

00019ea8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19ea8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   19eaa:	b160      	cbz	r0, 19ec6 <bt_l2cap_le_lookup_rx_cid+0x1e>
   19eac:	3808      	subs	r0, #8
   19eae:	b900      	cbnz	r0, 19eb2 <bt_l2cap_le_lookup_rx_cid+0xa>
   19eb0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   19eb2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   19eb6:	428b      	cmp	r3, r1
   19eb8:	d005      	beq.n	19ec6 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19eba:	f110 0308 	adds.w	r3, r0, #8
   19ebe:	d001      	beq.n	19ec4 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19ec0:	6880      	ldr	r0, [r0, #8]
   19ec2:	e7f2      	b.n	19eaa <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   19ec4:	4618      	mov	r0, r3
}
   19ec6:	4770      	bx	lr

00019ec8 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   19ec8:	4770      	bx	lr

00019eca <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   19eca:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   19ecc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   19ece:	b128      	cbz	r0, 19edc <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ed0:	6859      	ldr	r1, [r3, #4]
   19ed2:	6802      	ldr	r2, [r0, #0]
   19ed4:	4288      	cmp	r0, r1
	list->head = node;
   19ed6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   19ed8:	bf08      	it	eq
   19eda:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   19edc:	4770      	bx	lr

00019ede <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19ede:	2200      	movs	r2, #0
   19ee0:	4603      	mov	r3, r0
   19ee2:	6800      	ldr	r0, [r0, #0]
   19ee4:	b900      	cbnz	r0, 19ee8 <sys_slist_find_and_remove+0xa>
   19ee6:	4770      	bx	lr
   19ee8:	4288      	cmp	r0, r1
   19eea:	d110      	bne.n	19f0e <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   19eec:	6808      	ldr	r0, [r1, #0]
   19eee:	b942      	cbnz	r2, 19f02 <sys_slist_find_and_remove+0x24>
   19ef0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   19ef2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   19ef4:	4291      	cmp	r1, r2
   19ef6:	d100      	bne.n	19efa <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   19ef8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   19efa:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19efc:	2001      	movs	r0, #1
	parent->next = child;
   19efe:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19f00:	4770      	bx	lr
	parent->next = child;
   19f02:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19f04:	6858      	ldr	r0, [r3, #4]
   19f06:	4281      	cmp	r1, r0
	list->tail = node;
   19f08:	bf08      	it	eq
   19f0a:	605a      	streq	r2, [r3, #4]
}
   19f0c:	e7f5      	b.n	19efa <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19f0e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19f10:	6800      	ldr	r0, [r0, #0]
   19f12:	e7e7      	b.n	19ee4 <sys_slist_find_and_remove+0x6>

00019f14 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   19f14:	4603      	mov	r3, r0
	size_t bytes = 0;
   19f16:	2000      	movs	r0, #0

	while (buf) {
   19f18:	b903      	cbnz	r3, 19f1c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   19f1a:	4770      	bx	lr
		bytes += buf->len;
   19f1c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   19f1e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   19f20:	4410      	add	r0, r2
		buf = buf->frags;
   19f22:	e7f9      	b.n	19f18 <net_buf_frags_len+0x4>

00019f24 <att_sent>:
	if (chan->ops->sent) {
   19f24:	684b      	ldr	r3, [r1, #4]
{
   19f26:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   19f28:	695b      	ldr	r3, [r3, #20]
   19f2a:	b103      	cbz	r3, 19f2e <att_sent+0xa>
		chan->ops->sent(chan);
   19f2c:	4718      	bx	r3
}
   19f2e:	4770      	bx	lr

00019f30 <attr_read_type_cb>:
{
   19f30:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   19f32:	68d4      	ldr	r4, [r2, #12]
   19f34:	3102      	adds	r1, #2
   19f36:	7823      	ldrb	r3, [r4, #0]
   19f38:	b913      	cbnz	r3, 19f40 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   19f3a:	7021      	strb	r1, [r4, #0]
	return true;
   19f3c:	2001      	movs	r0, #1
   19f3e:	e006      	b.n	19f4e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   19f40:	428b      	cmp	r3, r1
   19f42:	d0fb      	beq.n	19f3c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   19f44:	8983      	ldrh	r3, [r0, #12]
   19f46:	3b02      	subs	r3, #2
   19f48:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   19f4a:	2000      	movs	r0, #0
   19f4c:	6110      	str	r0, [r2, #16]
}
   19f4e:	bd10      	pop	{r4, pc}

00019f50 <att_prepare_write_req>:
}
   19f50:	2006      	movs	r0, #6
   19f52:	4770      	bx	lr

00019f54 <att_op_get_type>:
	switch (op) {
   19f54:	281e      	cmp	r0, #30
   19f56:	d816      	bhi.n	19f86 <att_op_get_type+0x32>
   19f58:	b308      	cbz	r0, 19f9e <att_op_get_type+0x4a>
   19f5a:	1e43      	subs	r3, r0, #1
   19f5c:	2b1d      	cmp	r3, #29
   19f5e:	d81e      	bhi.n	19f9e <att_op_get_type+0x4a>
   19f60:	e8df f003 	tbb	[pc, r3]
   19f64:	23172317 	.word	0x23172317
   19f68:	23172317 	.word	0x23172317
   19f6c:	23172317 	.word	0x23172317
   19f70:	23172317 	.word	0x23172317
   19f74:	1d172317 	.word	0x1d172317
   19f78:	2317231d 	.word	0x2317231d
   19f7c:	1d191d17 	.word	0x1d191d17
   19f80:	0f1b      	.short	0x0f1b
   19f82:	2004      	movs	r0, #4
   19f84:	4770      	bx	lr
   19f86:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19f8a:	2b52      	cmp	r3, #82	; 0x52
   19f8c:	d107      	bne.n	19f9e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   19f8e:	2000      	movs	r0, #0
}
   19f90:	4770      	bx	lr
		return ATT_RESPONSE;
   19f92:	2002      	movs	r0, #2
   19f94:	4770      	bx	lr
		return ATT_NOTIFICATION;
   19f96:	2003      	movs	r0, #3
   19f98:	4770      	bx	lr
		return ATT_INDICATION;
   19f9a:	2005      	movs	r0, #5
   19f9c:	4770      	bx	lr
		return ATT_COMMAND;
   19f9e:	f010 0f40 	tst.w	r0, #64	; 0x40
   19fa2:	bf0c      	ite	eq
   19fa4:	2006      	moveq	r0, #6
   19fa6:	2000      	movne	r0, #0
   19fa8:	4770      	bx	lr
		return ATT_REQUEST;
   19faa:	2001      	movs	r0, #1
   19fac:	4770      	bx	lr

00019fae <att_notify_mult>:
{
   19fae:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   19fb0:	6803      	ldr	r3, [r0, #0]
   19fb2:	898a      	ldrh	r2, [r1, #12]
   19fb4:	6818      	ldr	r0, [r3, #0]
   19fb6:	6889      	ldr	r1, [r1, #8]
   19fb8:	f7f0 fdca 	bl	ab50 <bt_gatt_mult_notification>
}
   19fbc:	2000      	movs	r0, #0
   19fbe:	bd08      	pop	{r3, pc}

00019fc0 <att_notify>:
{
   19fc0:	b538      	push	{r3, r4, r5, lr}
   19fc2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   19fc4:	f101 0008 	add.w	r0, r1, #8
   19fc8:	460c      	mov	r4, r1
   19fca:	f001 fc2a 	bl	1b822 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   19fce:	682d      	ldr	r5, [r5, #0]
   19fd0:	4601      	mov	r1, r0
   19fd2:	89a3      	ldrh	r3, [r4, #12]
   19fd4:	6828      	ldr	r0, [r5, #0]
   19fd6:	68a2      	ldr	r2, [r4, #8]
   19fd8:	f000 ff1f 	bl	1ae1a <bt_gatt_notification>
}
   19fdc:	2000      	movs	r0, #0
   19fde:	bd38      	pop	{r3, r4, r5, pc}

00019fe0 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   19fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   19fe2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   19fe6:	2300      	movs	r3, #0
   19fe8:	461a      	mov	r2, r3
   19fea:	9300      	str	r3, [sp, #0]
   19fec:	f7f0 f80e 	bl	a00c <bt_gatt_foreach_attr_type>
				  user_data);
}
   19ff0:	b005      	add	sp, #20
   19ff2:	f85d fb04 	ldr.w	pc, [sp], #4

00019ff6 <att_chan_read>:
{
   19ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ffa:	4680      	mov	r8, r0
   19ffc:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   19ffe:	4610      	mov	r0, r2
{
   1a000:	4699      	mov	r9, r3
   1a002:	468b      	mov	fp, r1
   1a004:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1a006:	f7ff ff85 	bl	19f14 <net_buf_frags_len>
   1a00a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1a00e:	4283      	cmp	r3, r0
   1a010:	d97a      	bls.n	1a108 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a012:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1a016:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1a018:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1a01a:	f001 fb96 	bl	1b74a <net_buf_frag_last>
	size_t len, total = 0;
   1a01e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1a022:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1a024:	4630      	mov	r0, r6
   1a026:	f7ff ff75 	bl	19f14 <net_buf_frags_len>
   1a02a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1a02e:	f105 0708 	add.w	r7, r5, #8
   1a032:	1a24      	subs	r4, r4, r0
   1a034:	4638      	mov	r0, r7
   1a036:	f001 fc00 	bl	1b83a <net_buf_simple_tailroom>
   1a03a:	4284      	cmp	r4, r0
   1a03c:	d211      	bcs.n	1a062 <att_chan_read+0x6c>
   1a03e:	4630      	mov	r0, r6
   1a040:	f7ff ff68 	bl	19f14 <net_buf_frags_len>
   1a044:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1a048:	1a24      	subs	r4, r4, r0
		if (!len) {
   1a04a:	bb34      	cbnz	r4, 1a09a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1a04c:	79b0      	ldrb	r0, [r6, #6]
   1a04e:	f7f2 fb95 	bl	c77c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a052:	2200      	movs	r2, #0
   1a054:	2300      	movs	r3, #0
   1a056:	f001 fb3e 	bl	1b6d6 <net_buf_alloc_fixed>
			if (!frag) {
   1a05a:	4605      	mov	r5, r0
   1a05c:	b930      	cbnz	r0, 1a06c <att_chan_read+0x76>
	return total;
   1a05e:	4657      	mov	r7, sl
   1a060:	e02c      	b.n	1a0bc <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1a062:	4638      	mov	r0, r7
   1a064:	f001 fbe9 	bl	1b83a <net_buf_simple_tailroom>
   1a068:	4604      	mov	r4, r0
   1a06a:	e7ee      	b.n	1a04a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1a06c:	4601      	mov	r1, r0
   1a06e:	4630      	mov	r0, r6
   1a070:	f001 fb7c 	bl	1b76c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1a074:	4630      	mov	r0, r6
   1a076:	f7ff ff4d 	bl	19f14 <net_buf_frags_len>
   1a07a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1a07e:	f105 0708 	add.w	r7, r5, #8
   1a082:	1a24      	subs	r4, r4, r0
   1a084:	4638      	mov	r0, r7
   1a086:	f001 fbd8 	bl	1b83a <net_buf_simple_tailroom>
   1a08a:	4284      	cmp	r4, r0
   1a08c:	d21a      	bcs.n	1a0c4 <att_chan_read+0xce>
   1a08e:	4630      	mov	r0, r6
   1a090:	f7ff ff40 	bl	19f14 <net_buf_frags_len>
   1a094:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1a098:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1a09a:	68a9      	ldr	r1, [r5, #8]
   1a09c:	89aa      	ldrh	r2, [r5, #12]
   1a09e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1a0a2:	440a      	add	r2, r1
   1a0a4:	9803      	ldr	r0, [sp, #12]
   1a0a6:	4659      	mov	r1, fp
   1a0a8:	f8cd 9000 	str.w	r9, [sp]
   1a0ac:	b2a3      	uxth	r3, r4
   1a0ae:	47b8      	blx	r7
		if (read < 0) {
   1a0b0:	1e07      	subs	r7, r0, #0
   1a0b2:	da0c      	bge.n	1a0ce <att_chan_read+0xd8>
				return total;
   1a0b4:	f1ba 0f00 	cmp.w	sl, #0
   1a0b8:	bf18      	it	ne
   1a0ba:	4657      	movne	r7, sl
}
   1a0bc:	4638      	mov	r0, r7
   1a0be:	b005      	add	sp, #20
   1a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0c4:	4638      	mov	r0, r7
   1a0c6:	f001 fbb8 	bl	1b83a <net_buf_simple_tailroom>
   1a0ca:	4604      	mov	r4, r0
   1a0cc:	e7e5      	b.n	1a09a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1a0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a0d0:	b993      	cbnz	r3, 1a0f8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1a0d2:	4639      	mov	r1, r7
   1a0d4:	f105 0008 	add.w	r0, r5, #8
   1a0d8:	f001 fb59 	bl	1b78e <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0dc:	4630      	mov	r0, r6
   1a0de:	f7ff ff19 	bl	19f14 <net_buf_frags_len>
   1a0e2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1a0e6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0e8:	4283      	cmp	r3, r0
		total += read;
   1a0ea:	44ba      	add	sl, r7
		offset += read;
   1a0ec:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0f0:	d9b5      	bls.n	1a05e <att_chan_read+0x68>
   1a0f2:	42a7      	cmp	r7, r4
   1a0f4:	d096      	beq.n	1a024 <att_chan_read+0x2e>
   1a0f6:	e7b2      	b.n	1a05e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1a0f8:	4639      	mov	r1, r7
   1a0fa:	4628      	mov	r0, r5
   1a0fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a100:	4798      	blx	r3
   1a102:	2800      	cmp	r0, #0
   1a104:	d1e5      	bne.n	1a0d2 <att_chan_read+0xdc>
   1a106:	e7aa      	b.n	1a05e <att_chan_read+0x68>
		return 0;
   1a108:	2700      	movs	r7, #0
   1a10a:	e7d7      	b.n	1a0bc <att_chan_read+0xc6>

0001a10c <find_info_cb>:
{
   1a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1a10e:	6893      	ldr	r3, [r2, #8]
{
   1a110:	4605      	mov	r5, r0
   1a112:	460e      	mov	r6, r1
   1a114:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a116:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1a118:	b963      	cbnz	r3, 1a134 <find_info_cb+0x28>
   1a11a:	6850      	ldr	r0, [r2, #4]
   1a11c:	2101      	movs	r1, #1
   1a11e:	3008      	adds	r0, #8
   1a120:	f001 fb35 	bl	1b78e <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1a124:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1a126:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1a128:	781b      	ldrb	r3, [r3, #0]
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	bf0c      	ite	eq
   1a12e:	2301      	moveq	r3, #1
   1a130:	2302      	movne	r3, #2
   1a132:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1a134:	68a3      	ldr	r3, [r4, #8]
   1a136:	781b      	ldrb	r3, [r3, #0]
   1a138:	2b01      	cmp	r3, #1
   1a13a:	d003      	beq.n	1a144 <find_info_cb+0x38>
   1a13c:	2b02      	cmp	r3, #2
   1a13e:	d019      	beq.n	1a174 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1a140:	2000      	movs	r0, #0
   1a142:	e016      	b.n	1a172 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1a144:	682b      	ldr	r3, [r5, #0]
   1a146:	781b      	ldrb	r3, [r3, #0]
   1a148:	2b00      	cmp	r3, #0
   1a14a:	d1f9      	bne.n	1a140 <find_info_cb+0x34>
   1a14c:	6860      	ldr	r0, [r4, #4]
   1a14e:	2104      	movs	r1, #4
   1a150:	3008      	adds	r0, #8
   1a152:	f001 fb1c 	bl	1b78e <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1a156:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1a158:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1a15a:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1a15c:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1a15e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1a160:	6863      	ldr	r3, [r4, #4]
   1a162:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1a166:	899b      	ldrh	r3, [r3, #12]
   1a168:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1a16a:	2804      	cmp	r0, #4
   1a16c:	bf94      	ite	ls
   1a16e:	2000      	movls	r0, #0
   1a170:	2001      	movhi	r0, #1
}
   1a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1a174:	682b      	ldr	r3, [r5, #0]
   1a176:	781b      	ldrb	r3, [r3, #0]
   1a178:	2b02      	cmp	r3, #2
   1a17a:	d1e1      	bne.n	1a140 <find_info_cb+0x34>
   1a17c:	6860      	ldr	r0, [r4, #4]
   1a17e:	2112      	movs	r1, #18
   1a180:	3008      	adds	r0, #8
   1a182:	f001 fb04 	bl	1b78e <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a186:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1a188:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a18a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1a18c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a190:	3101      	adds	r1, #1
   1a192:	f7ff f839 	bl	19208 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1a196:	6863      	ldr	r3, [r4, #4]
   1a198:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1a19c:	899b      	ldrh	r3, [r3, #12]
   1a19e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1a1a0:	2812      	cmp	r0, #18
   1a1a2:	e7e3      	b.n	1a16c <find_info_cb+0x60>

0001a1a4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1a1a4:	68d0      	ldr	r0, [r2, #12]
   1a1a6:	3104      	adds	r1, #4
   1a1a8:	7803      	ldrb	r3, [r0, #0]
   1a1aa:	b913      	cbnz	r3, 1a1b2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1a1ac:	7001      	strb	r1, [r0, #0]
	return true;
   1a1ae:	2001      	movs	r0, #1
}
   1a1b0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1a1b2:	428b      	cmp	r3, r1
   1a1b4:	d0fb      	beq.n	1a1ae <attr_read_group_cb+0xa>
		data->group = NULL;
   1a1b6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1a1b8:	6891      	ldr	r1, [r2, #8]
   1a1ba:	898b      	ldrh	r3, [r1, #12]
   1a1bc:	3b04      	subs	r3, #4
   1a1be:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1a1c0:	6110      	str	r0, [r2, #16]
		return false;
   1a1c2:	4770      	bx	lr

0001a1c4 <att_exec_write_req>:
   1a1c4:	2006      	movs	r0, #6
   1a1c6:	4770      	bx	lr

0001a1c8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a1c8:	30c0      	adds	r0, #192	; 0xc0
   1a1ca:	e8d0 3fef 	ldaex	r3, [r0]
   1a1ce:	f023 0301 	bic.w	r3, r3, #1
   1a1d2:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1a1d6:	2a00      	cmp	r2, #0
   1a1d8:	d1f7      	bne.n	1a1ca <chan_rsp_sent+0x2>
}
   1a1da:	4770      	bx	lr

0001a1dc <chan_cfm_sent>:
   1a1dc:	30c0      	adds	r0, #192	; 0xc0
   1a1de:	e8d0 3fef 	ldaex	r3, [r0]
   1a1e2:	f023 0302 	bic.w	r3, r3, #2
   1a1e6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1a1ea:	2a00      	cmp	r2, #0
   1a1ec:	d1f7      	bne.n	1a1de <chan_cfm_sent+0x2>
}
   1a1ee:	4770      	bx	lr

0001a1f0 <write_cb>:
{
   1a1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a1f2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a1f4:	4601      	mov	r1, r0
{
   1a1f6:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a1f8:	222a      	movs	r2, #42	; 0x2a
   1a1fa:	6820      	ldr	r0, [r4, #0]
   1a1fc:	f000 fca8 	bl	1ab50 <bt_gatt_check_perm>
   1a200:	4605      	mov	r5, r0
   1a202:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a204:	bb00      	cbnz	r0, 1a248 <write_cb+0x58>
	if (!data->req) {
   1a206:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1a208:	4631      	mov	r1, r6
	if (!data->req) {
   1a20a:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1a20c:	bf14      	ite	ne
   1a20e:	2300      	movne	r3, #0
   1a210:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1a212:	9301      	str	r3, [sp, #4]
   1a214:	8a63      	ldrh	r3, [r4, #18]
   1a216:	68b7      	ldr	r7, [r6, #8]
   1a218:	9300      	str	r3, [sp, #0]
   1a21a:	68e2      	ldr	r2, [r4, #12]
   1a21c:	8a23      	ldrh	r3, [r4, #16]
   1a21e:	6820      	ldr	r0, [r4, #0]
   1a220:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1a222:	1e03      	subs	r3, r0, #0
   1a224:	db05      	blt.n	1a232 <write_cb+0x42>
   1a226:	8a22      	ldrh	r2, [r4, #16]
   1a228:	4293      	cmp	r3, r2
   1a22a:	d10b      	bne.n	1a244 <write_cb+0x54>
	data->err = 0U;
   1a22c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1a22e:	2501      	movs	r5, #1
   1a230:	e005      	b.n	1a23e <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1a232:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1a236:	d305      	bcc.n	1a244 <write_cb+0x54>
		return -err;
   1a238:	425b      	negs	r3, r3
   1a23a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1a23c:	7523      	strb	r3, [r4, #20]
}
   1a23e:	4628      	mov	r0, r5
   1a240:	b003      	add	sp, #12
   1a242:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1a244:	230e      	movs	r3, #14
   1a246:	e7f9      	b.n	1a23c <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1a248:	2500      	movs	r5, #0
   1a24a:	e7f8      	b.n	1a23e <write_cb+0x4e>

0001a24c <read_cb>:
{
   1a24c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a250:	4606      	mov	r6, r0
	data->err = 0x00;
   1a252:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1a254:	f8d2 8000 	ldr.w	r8, [r2]
{
   1a258:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1a25a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a25e:	4631      	mov	r1, r6
	data->err = 0x00;
   1a260:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a262:	2215      	movs	r2, #21
   1a264:	f000 fc74 	bl	1ab50 <bt_gatt_check_perm>
   1a268:	4604      	mov	r4, r0
   1a26a:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1a26c:	b9a0      	cbnz	r0, 1a298 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1a26e:	e9cd 0000 	strd	r0, r0, [sp]
   1a272:	88ab      	ldrh	r3, [r5, #4]
   1a274:	4631      	mov	r1, r6
   1a276:	4640      	mov	r0, r8
   1a278:	68aa      	ldr	r2, [r5, #8]
   1a27a:	f7ff febc 	bl	19ff6 <att_chan_read>
	if (ret < 0) {
   1a27e:	1e03      	subs	r3, r0, #0
   1a280:	da0c      	bge.n	1a29c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1a282:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1a286:	bf32      	itee	cc
   1a288:	230e      	movcc	r3, #14
		return -err;
   1a28a:	425b      	negcs	r3, r3
   1a28c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1a28e:	732b      	strb	r3, [r5, #12]
}
   1a290:	4620      	mov	r0, r4
   1a292:	b002      	add	sp, #8
   1a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1a298:	463c      	mov	r4, r7
   1a29a:	e7f9      	b.n	1a290 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1a29c:	2401      	movs	r4, #1
   1a29e:	e7f7      	b.n	1a290 <read_cb+0x44>

0001a2a0 <chan_req_send>:
{
   1a2a0:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a2a2:	690e      	ldr	r6, [r1, #16]
{
   1a2a4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a2a6:	4630      	mov	r0, r6
{
   1a2a8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a2aa:	f7ff fe33 	bl	19f14 <net_buf_frags_len>
   1a2ae:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1a2b2:	4283      	cmp	r3, r0
   1a2b4:	d317      	bcc.n	1a2e6 <chan_req_send+0x46>
	chan->req = req;
   1a2b6:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1a2ba:	f106 0008 	add.w	r0, r6, #8
   1a2be:	f001 fab8 	bl	1b832 <net_buf_simple_headroom>
	state->len = buf->len;
   1a2c2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a2c4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1a2c6:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1a2c8:	6920      	ldr	r0, [r4, #16]
   1a2ca:	f001 fa3a 	bl	1b742 <net_buf_ref>
   1a2ce:	2200      	movs	r2, #0
   1a2d0:	4601      	mov	r1, r0
   1a2d2:	4628      	mov	r0, r5
   1a2d4:	f7ee fc4e 	bl	8b74 <chan_send>
	if (err) {
   1a2d8:	4605      	mov	r5, r0
   1a2da:	b110      	cbz	r0, 1a2e2 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1a2dc:	6920      	ldr	r0, [r4, #16]
   1a2de:	f7f2 fb09 	bl	c8f4 <net_buf_unref>
}
   1a2e2:	4628      	mov	r0, r5
   1a2e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1a2e6:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1a2ea:	e7fa      	b.n	1a2e2 <chan_req_send+0x42>

0001a2ec <bt_att_chan_req_send>:
{
   1a2ec:	b570      	push	{r4, r5, r6, lr}
   1a2ee:	4604      	mov	r4, r0
   1a2f0:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1a2f2:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1a2f6:	2200      	movs	r2, #0
   1a2f8:	2300      	movs	r3, #0
   1a2fa:	4630      	mov	r0, r6
   1a2fc:	f7fc fbb8 	bl	16a70 <z_impl_k_sem_take>
   1a300:	2800      	cmp	r0, #0
   1a302:	db0a      	blt.n	1a31a <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1a304:	4620      	mov	r0, r4
   1a306:	4629      	mov	r1, r5
   1a308:	f7ff ffca 	bl	1a2a0 <chan_req_send>
	if (err < 0) {
   1a30c:	1e04      	subs	r4, r0, #0
   1a30e:	da02      	bge.n	1a316 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1a310:	4630      	mov	r0, r6
   1a312:	f7fc fb87 	bl	16a24 <z_impl_k_sem_give>
}
   1a316:	4620      	mov	r0, r4
   1a318:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1a31a:	f06f 040a 	mvn.w	r4, #10
   1a31e:	e7fa      	b.n	1a316 <bt_att_chan_req_send+0x2a>

0001a320 <bt_att_status>:
{
   1a320:	b538      	push	{r3, r4, r5, lr}
   1a322:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a324:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1a328:	07db      	lsls	r3, r3, #31
   1a32a:	d519      	bpl.n	1a360 <bt_att_status+0x40>
	if (!chan->att) {
   1a32c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1a330:	b1b0      	cbz	r0, 1a360 <bt_att_status+0x40>
	if (chan->req) {
   1a332:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1a336:	b99b      	cbnz	r3, 1a360 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1a338:	3004      	adds	r0, #4
   1a33a:	f7ff fdc6 	bl	19eca <sys_slist_get>
	if (!node) {
   1a33e:	4604      	mov	r4, r0
   1a340:	b170      	cbz	r0, 1a360 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a342:	4601      	mov	r1, r0
   1a344:	f1a5 0008 	sub.w	r0, r5, #8
   1a348:	f7ff ffd0 	bl	1a2ec <bt_att_chan_req_send>
   1a34c:	2800      	cmp	r0, #0
   1a34e:	da07      	bge.n	1a360 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1a350:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1a354:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1a356:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a358:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1a35a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a35c:	b902      	cbnz	r2, 1a360 <bt_att_status+0x40>
	list->tail = node;
   1a35e:	609c      	str	r4, [r3, #8]
}
   1a360:	bd38      	pop	{r3, r4, r5, pc}

0001a362 <bt_att_chan_send>:
{
   1a362:	b570      	push	{r4, r5, r6, lr}
   1a364:	4604      	mov	r4, r0
   1a366:	460e      	mov	r6, r1
	if (!cb) {
   1a368:	4615      	mov	r5, r2
   1a36a:	b132      	cbz	r2, 1a37a <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1a36c:	462a      	mov	r2, r5
   1a36e:	4631      	mov	r1, r6
   1a370:	4620      	mov	r0, r4
}
   1a372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1a376:	f7ee bbfd 	b.w	8b74 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1a37a:	2200      	movs	r2, #0
   1a37c:	2300      	movs	r3, #0
   1a37e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1a382:	f7fc fb75 	bl	16a70 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1a386:	2800      	cmp	r0, #0
   1a388:	daf0      	bge.n	1a36c <bt_att_chan_send+0xa>
}
   1a38a:	f06f 000a 	mvn.w	r0, #10
   1a38e:	bd70      	pop	{r4, r5, r6, pc}

0001a390 <bt_att_chan_send_rsp>:
{
   1a390:	b538      	push	{r3, r4, r5, lr}
   1a392:	4604      	mov	r4, r0
   1a394:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1a396:	f7ff ffe4 	bl	1a362 <bt_att_chan_send>
	if (err) {
   1a39a:	b130      	cbz	r0, 1a3aa <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1a39c:	4629      	mov	r1, r5
   1a39e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1a3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1a3a6:	f001 b9bf 	b.w	1b728 <net_buf_put>
}
   1a3aa:	bd38      	pop	{r3, r4, r5, pc}

0001a3ac <process_queue>:
{
   1a3ac:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1a3ae:	2200      	movs	r2, #0
{
   1a3b0:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1a3b2:	2300      	movs	r3, #0
   1a3b4:	4608      	mov	r0, r1
{
   1a3b6:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1a3b8:	f001 f992 	bl	1b6e0 <net_buf_get>
	if (buf) {
   1a3bc:	4605      	mov	r5, r0
   1a3be:	b160      	cbz	r0, 1a3da <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1a3c0:	4601      	mov	r1, r0
   1a3c2:	2200      	movs	r2, #0
   1a3c4:	4620      	mov	r0, r4
   1a3c6:	f7ee fbd5 	bl	8b74 <chan_send>
		if (err) {
   1a3ca:	4604      	mov	r4, r0
   1a3cc:	b118      	cbz	r0, 1a3d6 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1a3ce:	4629      	mov	r1, r5
   1a3d0:	4630      	mov	r0, r6
   1a3d2:	f008 f9d5 	bl	22780 <k_queue_prepend>
}
   1a3d6:	4620      	mov	r0, r4
   1a3d8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1a3da:	f06f 0401 	mvn.w	r4, #1
   1a3de:	e7fa      	b.n	1a3d6 <process_queue+0x2a>

0001a3e0 <bt_att_sent>:
{
   1a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1a3e2:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
{
   1a3e6:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1a3e8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a3ec:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1a3f0:	b10b      	cbz	r3, 1a3f6 <bt_att_sent+0x16>
		chan->sent(chan);
   1a3f2:	4638      	mov	r0, r7
   1a3f4:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a3f6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1a3fa:	e8d3 2fef 	ldaex	r2, [r3]
   1a3fe:	f022 0210 	bic.w	r2, r2, #16
   1a402:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a406:	2900      	cmp	r1, #0
   1a408:	d1f7      	bne.n	1a3fa <bt_att_sent+0x1a>
	if (!att) {
   1a40a:	b335      	cbz	r5, 1a45a <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1a40c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a410:	b98b      	cbnz	r3, 1a436 <bt_att_sent+0x56>
   1a412:	686b      	ldr	r3, [r5, #4]
   1a414:	b17b      	cbz	r3, 1a436 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1a416:	1d28      	adds	r0, r5, #4
   1a418:	f7ff fd57 	bl	19eca <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a41c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1a41e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a420:	4638      	mov	r0, r7
   1a422:	f7ff ff3d 	bl	1a2a0 <chan_req_send>
   1a426:	2800      	cmp	r0, #0
   1a428:	da17      	bge.n	1a45a <bt_att_sent+0x7a>
Z_GENLIST_PREPEND(slist, snode)
   1a42a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1a42c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a42e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1a430:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a432:	b903      	cbnz	r3, 1a436 <bt_att_sent+0x56>
	list->tail = node;
   1a434:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1a436:	4638      	mov	r0, r7
   1a438:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1a43c:	f7ff ffb6 	bl	1a3ac <process_queue>
	if (!err) {
   1a440:	b158      	cbz	r0, 1a45a <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1a442:	4638      	mov	r0, r7
   1a444:	f105 010c 	add.w	r1, r5, #12
   1a448:	f7ff ffb0 	bl	1a3ac <process_queue>
	if (!err) {
   1a44c:	b128      	cbz	r0, 1a45a <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1a44e:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1a452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a456:	f7fc bae5 	b.w	16a24 <z_impl_k_sem_give>
   1a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a45c <att_read_blob_req>:
{
   1a45c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1a45e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1a460:	210c      	movs	r1, #12
   1a462:	8813      	ldrh	r3, [r2, #0]
   1a464:	8852      	ldrh	r2, [r2, #2]
   1a466:	9200      	str	r2, [sp, #0]
   1a468:	220d      	movs	r2, #13
   1a46a:	f7ee fec3 	bl	91f4 <att_read_rsp>
}
   1a46e:	b003      	add	sp, #12
   1a470:	f85d fb04 	ldr.w	pc, [sp], #4

0001a474 <att_read_req>:
{
   1a474:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1a476:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1a478:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1a47a:	210a      	movs	r1, #10
   1a47c:	881b      	ldrh	r3, [r3, #0]
   1a47e:	9200      	str	r2, [sp, #0]
   1a480:	220b      	movs	r2, #11
   1a482:	f7ee feb7 	bl	91f4 <att_read_rsp>
}
   1a486:	b003      	add	sp, #12
   1a488:	f85d fb04 	ldr.w	pc, [sp], #4

0001a48c <bt_att_init>:
	bt_gatt_init();
   1a48c:	f7ef bd3c 	b.w	9f08 <bt_gatt_init>

0001a490 <att_req_destroy>:
{
   1a490:	b510      	push	{r4, lr}
   1a492:	4604      	mov	r4, r0
	if (req->buf) {
   1a494:	6900      	ldr	r0, [r0, #16]
   1a496:	b108      	cbz	r0, 1a49c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1a498:	f7f2 fa2c 	bl	c8f4 <net_buf_unref>
	if (req->destroy) {
   1a49c:	68a3      	ldr	r3, [r4, #8]
   1a49e:	b10b      	cbz	r3, 1a4a4 <att_req_destroy+0x14>
		req->destroy(req);
   1a4a0:	4620      	mov	r0, r4
   1a4a2:	4798      	blx	r3
	bt_att_req_free(req);
   1a4a4:	4620      	mov	r0, r4
}
   1a4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1a4aa:	f7ef b845 	b.w	9538 <bt_att_req_free>

0001a4ae <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1a4ae:	898a      	ldrh	r2, [r1, #12]
   1a4b0:	2300      	movs	r3, #0
   1a4b2:	6889      	ldr	r1, [r1, #8]
   1a4b4:	f7ef b84c 	b.w	9550 <att_handle_rsp>

0001a4b8 <att_handle_find_type_rsp>:
   1a4b8:	f7ff bff9 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4bc <att_handle_read_type_rsp>:
   1a4bc:	f7ff bff7 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4c0 <att_handle_read_rsp>:
   1a4c0:	f7ff bff5 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4c4 <att_handle_read_blob_rsp>:
   1a4c4:	f7ff bff3 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4c8 <att_handle_read_mult_rsp>:
   1a4c8:	f7ff bff1 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4cc <att_handle_read_group_rsp>:
   1a4cc:	f7ff bfef 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4d0 <att_handle_write_rsp>:
   1a4d0:	f7ff bfed 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4d4 <att_handle_prepare_write_rsp>:
   1a4d4:	f7ff bfeb 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4d8 <att_handle_exec_write_rsp>:
   1a4d8:	f7ff bfe9 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4dc <att_confirm>:
   1a4dc:	f7ff bfe7 	b.w	1a4ae <att_handle_find_info_rsp>

0001a4e0 <att_mtu_rsp>:
{
   1a4e0:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1a4e2:	6889      	ldr	r1, [r1, #8]
{
   1a4e4:	b410      	push	{r4}
	mtu = sys_le16_to_cpu(rsp->mtu);
   1a4e6:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1a4e8:	2b16      	cmp	r3, #22
   1a4ea:	d805      	bhi.n	1a4f8 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1a4ec:	2200      	movs	r2, #0
   1a4ee:	2304      	movs	r3, #4
   1a4f0:	4611      	mov	r1, r2
}
   1a4f2:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1a4f4:	f7ef b82c 	b.w	9550 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1a4f8:	2bf7      	cmp	r3, #247	; 0xf7
   1a4fa:	bf28      	it	cs
   1a4fc:	23f7      	movcs	r3, #247	; 0xf7
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1a4fe:	8992      	ldrh	r2, [r2, #12]
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1a500:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1a504:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1a508:	2300      	movs	r3, #0
   1a50a:	e7f2      	b.n	1a4f2 <att_mtu_rsp+0x12>

0001a50c <att_chan_detach>:
{
   1a50c:	b538      	push	{r3, r4, r5, lr}
   1a50e:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1a510:	6800      	ldr	r0, [r0, #0]
   1a512:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1a516:	3024      	adds	r0, #36	; 0x24
   1a518:	f7ff fce1 	bl	19ede <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1a51c:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1a520:	4628      	mov	r0, r5
   1a522:	f7fc fa7f 	bl	16a24 <z_impl_k_sem_give>
   1a526:	4628      	mov	r0, r5
   1a528:	f7fc fa7c 	bl	16a24 <z_impl_k_sem_give>
   1a52c:	4628      	mov	r0, r5
   1a52e:	f7fc fa79 	bl	16a24 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1a532:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1a536:	2200      	movs	r2, #0
   1a538:	2300      	movs	r3, #0
   1a53a:	4628      	mov	r0, r5
   1a53c:	f001 f8d0 	bl	1b6e0 <net_buf_get>
   1a540:	4602      	mov	r2, r0
   1a542:	b950      	cbnz	r0, 1a55a <att_chan_detach+0x4e>
	if (chan->req) {
   1a544:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1a548:	b123      	cbz	r3, 1a554 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1a54a:	4601      	mov	r1, r0
   1a54c:	230e      	movs	r3, #14
   1a54e:	4620      	mov	r0, r4
   1a550:	f7ee fffe 	bl	9550 <att_handle_rsp>
	chan->att = NULL;
   1a554:	2300      	movs	r3, #0
   1a556:	6023      	str	r3, [r4, #0]
}
   1a558:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1a55a:	f7f2 f9cb 	bl	c8f4 <net_buf_unref>
   1a55e:	e7ea      	b.n	1a536 <att_chan_detach+0x2a>

0001a560 <bt_att_disconnected>:
{
   1a560:	b538      	push	{r3, r4, r5, lr}
   1a562:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1a564:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1a568:	f7ff ffd0 	bl	1a50c <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1a56c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a56e:	b93b      	cbnz	r3, 1a580 <bt_att_disconnected+0x20>
	att_reset(att);
   1a570:	4628      	mov	r0, r5
   1a572:	f7ef f8df 	bl	9734 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1a576:	6820      	ldr	r0, [r4, #0]
}
   1a578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1a57c:	f7f0 bbba 	b.w	acf4 <bt_gatt_disconnected>
}
   1a580:	bd38      	pop	{r3, r4, r5, pc}

0001a582 <bt_att_send>:
{
   1a582:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a586:	4605      	mov	r5, r0
   1a588:	460e      	mov	r6, r1
   1a58a:	4614      	mov	r4, r2
   1a58c:	4698      	mov	r8, r3
	att = att_get(conn);
   1a58e:	f7ee fa0d 	bl	89ac <att_get>
	if (!att) {
   1a592:	4607      	mov	r7, r0
   1a594:	b938      	cbnz	r0, 1a5a6 <bt_att_send+0x24>
		net_buf_unref(buf);
   1a596:	4630      	mov	r0, r6
   1a598:	f7f2 f9ac 	bl	c8f4 <net_buf_unref>
		return -ENOTCONN;
   1a59c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   1a5a0:	b002      	add	sp, #8
   1a5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1a5a6:	b144      	cbz	r4, 1a5ba <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1a5a8:	4623      	mov	r3, r4
   1a5aa:	4632      	mov	r2, r6
   1a5ac:	2104      	movs	r1, #4
   1a5ae:	4628      	mov	r0, r5
   1a5b0:	f8cd 8000 	str.w	r8, [sp]
   1a5b4:	f7ff fc38 	bl	19e28 <bt_l2cap_send_cb>
   1a5b8:	e7f2      	b.n	1a5a0 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a5ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1a5bc:	b184      	cbz	r4, 1a5e0 <bt_att_send+0x5e>
   1a5be:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1a5c2:	d00f      	beq.n	1a5e4 <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a5c4:	6824      	ldr	r4, [r4, #0]
   1a5c6:	b10c      	cbz	r4, 1a5cc <bt_att_send+0x4a>
   1a5c8:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1a5cc:	2000      	movs	r0, #0
   1a5ce:	b95d      	cbnz	r5, 1a5e8 <bt_att_send+0x66>
	if (ret < 0) {
   1a5d0:	b188      	cbz	r0, 1a5f6 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1a5d2:	f107 000c 	add.w	r0, r7, #12
   1a5d6:	4631      	mov	r1, r6
   1a5d8:	f001 f8a6 	bl	1b728 <net_buf_put>
	return 0;
   1a5dc:	4628      	mov	r0, r5
   1a5de:	e7df      	b.n	1a5a0 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a5e0:	4625      	mov	r5, r4
   1a5e2:	e7f3      	b.n	1a5cc <bt_att_send+0x4a>
   1a5e4:	462c      	mov	r4, r5
   1a5e6:	e7f1      	b.n	1a5cc <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1a5e8:	2200      	movs	r2, #0
   1a5ea:	4631      	mov	r1, r6
   1a5ec:	4628      	mov	r0, r5
   1a5ee:	f7ff feb8 	bl	1a362 <bt_att_chan_send>
		if (ret >= 0) {
   1a5f2:	2800      	cmp	r0, #0
   1a5f4:	db01      	blt.n	1a5fa <bt_att_send+0x78>
	return 0;
   1a5f6:	2000      	movs	r0, #0
   1a5f8:	e7d2      	b.n	1a5a0 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a5fa:	b154      	cbz	r4, 1a612 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a5fc:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1a600:	d004      	beq.n	1a60c <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a602:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1a606:	b10b      	cbz	r3, 1a60c <bt_att_send+0x8a>
   1a608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1a60c:	4625      	mov	r5, r4
   1a60e:	461c      	mov	r4, r3
   1a610:	e7dd      	b.n	1a5ce <bt_att_send+0x4c>
   1a612:	4623      	mov	r3, r4
   1a614:	e7fa      	b.n	1a60c <bt_att_send+0x8a>

0001a616 <bt_att_req_send>:
{
   1a616:	b570      	push	{r4, r5, r6, lr}
   1a618:	460c      	mov	r4, r1
	att = att_get(conn);
   1a61a:	f7ee f9c7 	bl	89ac <att_get>
	if (!att) {
   1a61e:	4605      	mov	r5, r0
   1a620:	b930      	cbnz	r0, 1a630 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1a622:	6920      	ldr	r0, [r4, #16]
   1a624:	f7f2 f966 	bl	c8f4 <net_buf_unref>
		return -ENOTCONN;
   1a628:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1a62c:	6125      	str	r5, [r4, #16]
}
   1a62e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a630:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1a632:	b153      	cbz	r3, 1a64a <bt_att_req_send+0x34>
   1a634:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1a638:	d007      	beq.n	1a64a <bt_att_req_send+0x34>
   1a63a:	681e      	ldr	r6, [r3, #0]
   1a63c:	b10e      	cbz	r6, 1a642 <bt_att_req_send+0x2c>
   1a63e:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1a642:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1a646:	b143      	cbz	r3, 1a65a <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a648:	b96e      	cbnz	r6, 1a666 <bt_att_req_send+0x50>
	parent->next = child;
   1a64a:	2000      	movs	r0, #0
   1a64c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a64e:	68ab      	ldr	r3, [r5, #8]
   1a650:	b9a3      	cbnz	r3, 1a67c <bt_att_req_send+0x66>
	return 0;
   1a652:	4618      	mov	r0, r3
	list->head = node;
   1a654:	e9c5 4401 	strd	r4, r4, [r5, #4]
}
   1a658:	e7e9      	b.n	1a62e <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1a65a:	4621      	mov	r1, r4
   1a65c:	f7ff fe46 	bl	1a2ec <bt_att_chan_req_send>
			if (ret >= 0) {
   1a660:	2800      	cmp	r0, #0
   1a662:	dbf1      	blt.n	1a648 <bt_att_req_send+0x32>
   1a664:	e7e3      	b.n	1a62e <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a666:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1a66a:	d004      	beq.n	1a676 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a66c:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a670:	b10b      	cbz	r3, 1a676 <bt_att_req_send+0x60>
   1a672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1a676:	4630      	mov	r0, r6
   1a678:	461e      	mov	r6, r3
   1a67a:	e7e2      	b.n	1a642 <bt_att_req_send+0x2c>
	parent->next = child;
   1a67c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a67e:	60ac      	str	r4, [r5, #8]
}
   1a680:	e7d5      	b.n	1a62e <bt_att_req_send+0x18>

0001a682 <gatt_ccc_changed>:
{
   1a682:	460b      	mov	r3, r1
   1a684:	8909      	ldrh	r1, [r1, #8]
   1a686:	8a5a      	ldrh	r2, [r3, #18]
   1a688:	4291      	cmp	r1, r2
   1a68a:	bf38      	it	cc
   1a68c:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1a68e:	8a9a      	ldrh	r2, [r3, #20]
   1a690:	428a      	cmp	r2, r1
   1a692:	d003      	beq.n	1a69c <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1a694:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1a696:	699b      	ldr	r3, [r3, #24]
   1a698:	b103      	cbz	r3, 1a69c <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1a69a:	4718      	bx	r3
}
   1a69c:	4770      	bx	lr

0001a69e <gatt_indicate_rsp>:
{
   1a69e:	b510      	push	{r4, lr}
   1a6a0:	9c02      	ldr	r4, [sp, #8]
   1a6a2:	460a      	mov	r2, r1
	params->_ref--;
   1a6a4:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1a6a6:	4621      	mov	r1, r4
	params->_ref--;
   1a6a8:	3b01      	subs	r3, #1
   1a6aa:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1a6ac:	68a3      	ldr	r3, [r4, #8]
   1a6ae:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1a6b0:	68e3      	ldr	r3, [r4, #12]
   1a6b2:	b12b      	cbz	r3, 1a6c0 <gatt_indicate_rsp+0x22>
   1a6b4:	7da2      	ldrb	r2, [r4, #22]
   1a6b6:	b91a      	cbnz	r2, 1a6c0 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1a6b8:	4620      	mov	r0, r4
}
   1a6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1a6be:	4718      	bx	r3
}
   1a6c0:	bd10      	pop	{r4, pc}

0001a6c2 <match_uuid>:
	data->attr = attr;
   1a6c2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1a6c4:	8091      	strh	r1, [r2, #4]
}
   1a6c6:	2000      	movs	r0, #0
   1a6c8:	4770      	bx	lr

0001a6ca <gatt_mtu_rsp>:
{
   1a6ca:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   1a6cc:	6813      	ldr	r3, [r2, #0]
   1a6ce:	4718      	bx	r3

0001a6d0 <gen_hash_m>:
{
   1a6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1a6d2:	6807      	ldr	r7, [r0, #0]
{
   1a6d4:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1a6d6:	783d      	ldrb	r5, [r7, #0]
{
   1a6d8:	4614      	mov	r4, r2
   1a6da:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1a6dc:	b10d      	cbz	r5, 1a6e2 <gen_hash_m+0x12>
	switch (u16->val) {
   1a6de:	2501      	movs	r5, #1
   1a6e0:	e014      	b.n	1a70c <gen_hash_m+0x3c>
   1a6e2:	887b      	ldrh	r3, [r7, #2]
   1a6e4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1a6e8:	d004      	beq.n	1a6f4 <gen_hash_m+0x24>
   1a6ea:	d812      	bhi.n	1a712 <gen_hash_m+0x42>
   1a6ec:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1a6f0:	2b03      	cmp	r3, #3
   1a6f2:	d8f4      	bhi.n	1a6de <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1a6f4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a6f8:	2202      	movs	r2, #2
   1a6fa:	4620      	mov	r0, r4
   1a6fc:	f10d 010e 	add.w	r1, sp, #14
   1a700:	f7fe fa33 	bl	18b6a <tc_cmac_update>
   1a704:	b9e0      	cbnz	r0, 1a740 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1a706:	f06f 0315 	mvn.w	r3, #21
   1a70a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a70c:	4628      	mov	r0, r5
   1a70e:	b009      	add	sp, #36	; 0x24
   1a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1a712:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1a716:	33ff      	adds	r3, #255	; 0xff
   1a718:	b29b      	uxth	r3, r3
   1a71a:	2b04      	cmp	r3, #4
   1a71c:	d8df      	bhi.n	1a6de <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1a71e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a722:	2202      	movs	r2, #2
   1a724:	4620      	mov	r0, r4
   1a726:	f10d 010e 	add.w	r1, sp, #14
   1a72a:	f7fe fa1e 	bl	18b6a <tc_cmac_update>
   1a72e:	2800      	cmp	r0, #0
   1a730:	d0e9      	beq.n	1a706 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1a732:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a734:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1a736:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a73a:	f10d 010e 	add.w	r1, sp, #14
   1a73e:	e017      	b.n	1a770 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1a740:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a742:	2202      	movs	r2, #2
   1a744:	4620      	mov	r0, r4
   1a746:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1a74a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a74e:	f7fe fa0c 	bl	18b6a <tc_cmac_update>
   1a752:	2800      	cmp	r0, #0
   1a754:	d0d7      	beq.n	1a706 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1a756:	2000      	movs	r0, #0
   1a758:	2310      	movs	r3, #16
   1a75a:	4631      	mov	r1, r6
   1a75c:	eb0d 0203 	add.w	r2, sp, r3
   1a760:	6877      	ldr	r7, [r6, #4]
   1a762:	9000      	str	r0, [sp, #0]
   1a764:	47b8      	blx	r7
		if (len < 0) {
   1a766:	1e02      	subs	r2, r0, #0
   1a768:	da01      	bge.n	1a76e <gen_hash_m+0x9e>
			state->err = len;
   1a76a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1a76c:	e7ce      	b.n	1a70c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1a76e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a770:	4620      	mov	r0, r4
   1a772:	f7fe f9fa 	bl	18b6a <tc_cmac_update>
   1a776:	2800      	cmp	r0, #0
   1a778:	d1b1      	bne.n	1a6de <gen_hash_m+0xe>
   1a77a:	e7c4      	b.n	1a706 <gen_hash_m+0x36>

0001a77c <bt_addr_le_cmp>:
   1a77c:	2207      	movs	r2, #7
   1a77e:	f7fe bd33 	b.w	191e8 <memcmp>

0001a782 <find_ccc_cfg>:
{
   1a782:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a784:	1c4a      	adds	r2, r1, #1
   1a786:	460c      	mov	r4, r1
		if (conn) {
   1a788:	4605      	mov	r5, r0
   1a78a:	b948      	cbnz	r0, 1a7a0 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a78c:	9000      	str	r0, [sp, #0]
   1a78e:	4669      	mov	r1, sp
   1a790:	f8cd 0003 	str.w	r0, [sp, #3]
   1a794:	4610      	mov	r0, r2
   1a796:	f7ff fff1 	bl	1a77c <bt_addr_le_cmp>
   1a79a:	b930      	cbnz	r0, 1a7aa <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a79c:	4626      	mov	r6, r4
   1a79e:	e00e      	b.n	1a7be <find_ccc_cfg+0x3c>
   1a7a0:	7809      	ldrb	r1, [r1, #0]
   1a7a2:	f7ff fa41 	bl	19c28 <bt_conn_is_peer_addr_le>
   1a7a6:	2800      	cmp	r0, #0
   1a7a8:	d1f8      	bne.n	1a79c <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a7aa:	f104 060a 	add.w	r6, r4, #10
		if (conn) {
   1a7ae:	f104 020b 	add.w	r2, r4, #11
   1a7b2:	b13d      	cbz	r5, 1a7c4 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a7b4:	4628      	mov	r0, r5
   1a7b6:	7aa1      	ldrb	r1, [r4, #10]
   1a7b8:	f7ff fa36 	bl	19c28 <bt_conn_is_peer_addr_le>
   1a7bc:	b158      	cbz	r0, 1a7d6 <find_ccc_cfg+0x54>
}
   1a7be:	4630      	mov	r0, r6
   1a7c0:	b002      	add	sp, #8
   1a7c2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a7c4:	4669      	mov	r1, sp
   1a7c6:	4610      	mov	r0, r2
   1a7c8:	9500      	str	r5, [sp, #0]
   1a7ca:	f8cd 5003 	str.w	r5, [sp, #3]
   1a7ce:	f7ff ffd5 	bl	1a77c <bt_addr_le_cmp>
   1a7d2:	2800      	cmp	r0, #0
   1a7d4:	d0f3      	beq.n	1a7be <find_ccc_cfg+0x3c>
	return NULL;
   1a7d6:	2600      	movs	r6, #0
   1a7d8:	e7f1      	b.n	1a7be <find_ccc_cfg+0x3c>

0001a7da <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1a7da:	2207      	movs	r2, #7
   1a7dc:	f7fe bd14 	b.w	19208 <memcpy>

0001a7e0 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1a7e0:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1a7e2:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1a7e4:	3001      	adds	r0, #1
   1a7e6:	4669      	mov	r1, sp
   1a7e8:	9300      	str	r3, [sp, #0]
   1a7ea:	f8cd 3003 	str.w	r3, [sp, #3]
   1a7ee:	f7ff fff4 	bl	1a7da <bt_addr_le_copy>
}
   1a7f2:	b003      	add	sp, #12
   1a7f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001a7f8 <clear_cf_cfg>:
{
   1a7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a7fa:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a7fc:	2500      	movs	r5, #0
   1a7fe:	4669      	mov	r1, sp
   1a800:	3001      	adds	r0, #1
   1a802:	9500      	str	r5, [sp, #0]
   1a804:	f8cd 5003 	str.w	r5, [sp, #3]
   1a808:	f7ff ffe7 	bl	1a7da <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1a80c:	f104 0008 	add.w	r0, r4, #8
   1a810:	2201      	movs	r2, #1
   1a812:	4629      	mov	r1, r5
   1a814:	f7fe fd23 	bl	1925e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a818:	340c      	adds	r4, #12
   1a81a:	e8d4 3fef 	ldaex	r3, [r4]
   1a81e:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1a822:	2a00      	cmp	r2, #0
   1a824:	d1f9      	bne.n	1a81a <clear_cf_cfg+0x22>
}
   1a826:	b003      	add	sp, #12
   1a828:	bd30      	pop	{r4, r5, pc}

0001a82a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a82a:	2301      	movs	r3, #1
   1a82c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a82e:	e8d0 2fef 	ldaex	r2, [r0]
   1a832:	431a      	orrs	r2, r3
   1a834:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1a838:	2900      	cmp	r1, #0
   1a83a:	d1f8      	bne.n	1a82e <atomic_set_bit+0x4>
}
   1a83c:	4770      	bx	lr

0001a83e <sc_restore_rsp>:
{
   1a83e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1a840:	f7ee fffe 	bl	9840 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a844:	b140      	cbz	r0, 1a858 <sc_restore_rsp+0x1a>
   1a846:	7a03      	ldrb	r3, [r0, #8]
   1a848:	07db      	lsls	r3, r3, #31
   1a84a:	d505      	bpl.n	1a858 <sc_restore_rsp+0x1a>
}
   1a84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a850:	2100      	movs	r1, #0
   1a852:	300c      	adds	r0, #12
   1a854:	f7ff bfe9 	b.w	1a82a <atomic_set_bit>
}
   1a858:	bd08      	pop	{r3, pc}

0001a85a <read_appearance>:
{
   1a85a:	b513      	push	{r0, r1, r4, lr}
   1a85c:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1a85e:	2200      	movs	r2, #0
{
   1a860:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1a864:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1a868:	2902      	cmp	r1, #2
   1a86a:	d80d      	bhi.n	1a888 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1a86c:	f1c1 0402 	rsb	r4, r1, #2
   1a870:	429c      	cmp	r4, r3
   1a872:	bfa8      	it	ge
   1a874:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a876:	f10d 0306 	add.w	r3, sp, #6
   1a87a:	4622      	mov	r2, r4
   1a87c:	4419      	add	r1, r3
   1a87e:	f7fe fcc3 	bl	19208 <memcpy>
}
   1a882:	4620      	mov	r0, r4
   1a884:	b002      	add	sp, #8
   1a886:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a888:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1a88c:	e7f9      	b.n	1a882 <read_appearance+0x28>

0001a88e <read_name>:
{
   1a88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a892:	4698      	mov	r8, r3
   1a894:	4615      	mov	r5, r2
   1a896:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1a89a:	f7ec fa69 	bl	6d70 <bt_get_name>
   1a89e:	4607      	mov	r7, r0
				 strlen(name));
   1a8a0:	f7fe fc77 	bl	19192 <strlen>
	if (offset > value_len) {
   1a8a4:	b283      	uxth	r3, r0
   1a8a6:	42b3      	cmp	r3, r6
   1a8a8:	d30c      	bcc.n	1a8c4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1a8aa:	1b9c      	subs	r4, r3, r6
   1a8ac:	4544      	cmp	r4, r8
   1a8ae:	bfa8      	it	ge
   1a8b0:	4644      	movge	r4, r8
   1a8b2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1a8b4:	4622      	mov	r2, r4
   1a8b6:	4628      	mov	r0, r5
   1a8b8:	19b9      	adds	r1, r7, r6
   1a8ba:	f7fe fca5 	bl	19208 <memcpy>
}
   1a8be:	4620      	mov	r0, r4
   1a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a8c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1a8c8:	e7f9      	b.n	1a8be <read_name+0x30>

0001a8ca <bt_gatt_attr_read_ccc>:
{
   1a8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1a8cc:	68c9      	ldr	r1, [r1, #12]
{
   1a8ce:	4615      	mov	r5, r2
   1a8d0:	461f      	mov	r7, r3
   1a8d2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1a8d6:	f7ff ff54 	bl	1a782 <find_ccc_cfg>
	if (cfg) {
   1a8da:	b100      	cbz	r0, 1a8de <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1a8dc:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1a8de:	2e02      	cmp	r6, #2
   1a8e0:	f8ad 0006 	strh.w	r0, [sp, #6]
   1a8e4:	d80e      	bhi.n	1a904 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1a8e6:	f1c6 0402 	rsb	r4, r6, #2
   1a8ea:	42bc      	cmp	r4, r7
   1a8ec:	bfa8      	it	ge
   1a8ee:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a8f0:	f10d 0306 	add.w	r3, sp, #6
   1a8f4:	4622      	mov	r2, r4
   1a8f6:	4628      	mov	r0, r5
   1a8f8:	1999      	adds	r1, r3, r6
   1a8fa:	f7fe fc85 	bl	19208 <memcpy>
}
   1a8fe:	4620      	mov	r0, r4
   1a900:	b003      	add	sp, #12
   1a902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a904:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1a908:	e7f9      	b.n	1a8fe <bt_gatt_attr_read_ccc+0x34>

0001a90a <cf_read>:
{
   1a90a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a90c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1a90e:	2300      	movs	r3, #0
{
   1a910:	4615      	mov	r5, r2
   1a912:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1a916:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1a91a:	f7ee ff91 	bl	9840 <find_cf_cfg>
	if (cfg) {
   1a91e:	b128      	cbz	r0, 1a92c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1a920:	f100 0108 	add.w	r1, r0, #8
   1a924:	2201      	movs	r2, #1
   1a926:	a801      	add	r0, sp, #4
   1a928:	f7fe fc6e 	bl	19208 <memcpy>
	if (offset > value_len) {
   1a92c:	2e01      	cmp	r6, #1
   1a92e:	d80d      	bhi.n	1a94c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1a930:	f1c6 0401 	rsb	r4, r6, #1
   1a934:	42bc      	cmp	r4, r7
   1a936:	bfa8      	it	ge
   1a938:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a93a:	ab01      	add	r3, sp, #4
   1a93c:	4622      	mov	r2, r4
   1a93e:	4628      	mov	r0, r5
   1a940:	1999      	adds	r1, r3, r6
   1a942:	f7fe fc61 	bl	19208 <memcpy>
}
   1a946:	4620      	mov	r0, r4
   1a948:	b003      	add	sp, #12
   1a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a94c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1a950:	e7f9      	b.n	1a946 <cf_read+0x3c>

0001a952 <bt_gatt_attr_read_service>:
{
   1a952:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1a954:	68c9      	ldr	r1, [r1, #12]
{
   1a956:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1a958:	780b      	ldrb	r3, [r1, #0]
{
   1a95a:	4610      	mov	r0, r2
   1a95c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1a960:	b993      	cbnz	r3, 1a988 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1a962:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1a964:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1a966:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1a96a:	d819      	bhi.n	1a9a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1a96c:	f1c5 0202 	rsb	r2, r5, #2
   1a970:	4294      	cmp	r4, r2
   1a972:	bfa8      	it	ge
   1a974:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1a976:	4622      	mov	r2, r4
   1a978:	f10d 0306 	add.w	r3, sp, #6
   1a97c:	1959      	adds	r1, r3, r5
   1a97e:	f7fe fc43 	bl	19208 <memcpy>
}
   1a982:	4620      	mov	r0, r4
   1a984:	b003      	add	sp, #12
   1a986:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1a988:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1a98a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1a98e:	d807      	bhi.n	1a9a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1a990:	f1c5 0210 	rsb	r2, r5, #16
   1a994:	4294      	cmp	r4, r2
   1a996:	bfa8      	it	ge
   1a998:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1a99a:	4429      	add	r1, r5
   1a99c:	4622      	mov	r2, r4
   1a99e:	e7ee      	b.n	1a97e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a9a0:	f06f 0406 	mvn.w	r4, #6
   1a9a4:	e7ed      	b.n	1a982 <bt_gatt_attr_read_service+0x30>

0001a9a6 <gatt_sub_remove>:
{
   1a9a6:	b538      	push	{r3, r4, r5, lr}
   1a9a8:	460c      	mov	r4, r1
	if (params) {
   1a9aa:	4619      	mov	r1, r3
   1a9ac:	b16b      	cbz	r3, 1a9ca <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1a9ae:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   1a9b2:	695b      	ldr	r3, [r3, #20]
   1a9b4:	b982      	cbnz	r2, 1a9d8 <gatt_sub_remove+0x32>
   1a9b6:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1a9b8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1a9ba:	4295      	cmp	r5, r2
   1a9bc:	d100      	bne.n	1a9c0 <gatt_sub_remove+0x1a>
	list->tail = node;
   1a9be:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1a9c0:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1a9c2:	680d      	ldr	r5, [r1, #0]
   1a9c4:	461a      	mov	r2, r3
   1a9c6:	614b      	str	r3, [r1, #20]
   1a9c8:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1a9ca:	68a3      	ldr	r3, [r4, #8]
   1a9cc:	b953      	cbnz	r3, 1a9e4 <gatt_sub_remove+0x3e>
   1a9ce:	4620      	mov	r0, r4
}
   1a9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a9d4:	f7ff bf04 	b.w	1a7e0 <gatt_sub_remove.part.0>
   1a9d8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a9da:	68e3      	ldr	r3, [r4, #12]
   1a9dc:	429d      	cmp	r5, r3
	list->tail = node;
   1a9de:	bf08      	it	eq
   1a9e0:	60e2      	streq	r2, [r4, #12]
}
   1a9e2:	e7ed      	b.n	1a9c0 <gatt_sub_remove+0x1a>
   1a9e4:	bd38      	pop	{r3, r4, r5, pc}

0001a9e6 <gatt_write_ccc_rsp>:
{
   1a9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9ea:	4606      	mov	r6, r0
   1a9ec:	460d      	mov	r5, r1
   1a9ee:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a9f0:	f104 0310 	add.w	r3, r4, #16
   1a9f4:	e8d3 2fef 	ldaex	r2, [r3]
   1a9f8:	f022 0204 	bic.w	r2, r2, #4
   1a9fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1aa00:	2900      	cmp	r1, #0
   1aa02:	d1f7      	bne.n	1a9f4 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1aa04:	b1dd      	cbz	r5, 1aa3e <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1aa06:	f7ee ff69 	bl	98dc <gatt_sub_find>
		if (!sub) {
   1aa0a:	4601      	mov	r1, r0
   1aa0c:	b300      	cbz	r0, 1aa50 <gatt_write_ccc_rsp+0x6a>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1aa0e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1aa10:	b143      	cbz	r3, 1aa24 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aa12:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1aa14:	f104 0014 	add.w	r0, r4, #20
   1aa18:	4283      	cmp	r3, r0
   1aa1a:	d10b      	bne.n	1aa34 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1aa1c:	4623      	mov	r3, r4
   1aa1e:	4630      	mov	r0, r6
   1aa20:	f7ff ffc1 	bl	1a9a6 <gatt_sub_remove>
	if (params->write) {
   1aa24:	6863      	ldr	r3, [r4, #4]
   1aa26:	b19b      	cbz	r3, 1aa50 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1aa28:	4629      	mov	r1, r5
   1aa2a:	4630      	mov	r0, r6
}
   1aa2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1aa30:	2200      	movs	r2, #0
   1aa32:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1aa34:	2a00      	cmp	r2, #0
   1aa36:	d0f5      	beq.n	1aa24 <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aa38:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1aa3a:	6812      	ldr	r2, [r2, #0]
   1aa3c:	e7ec      	b.n	1aa18 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1aa3e:	89a3      	ldrh	r3, [r4, #12]
   1aa40:	2b00      	cmp	r3, #0
   1aa42:	d1ef      	bne.n	1aa24 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1aa44:	462b      	mov	r3, r5
   1aa46:	462a      	mov	r2, r5
   1aa48:	4621      	mov	r1, r4
   1aa4a:	6827      	ldr	r7, [r4, #0]
   1aa4c:	47b8      	blx	r7
   1aa4e:	e7e9      	b.n	1aa24 <gatt_write_ccc_rsp+0x3e>
}
   1aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa54 <sc_clear>:
{
   1aa54:	b570      	push	{r4, r5, r6, lr}
   1aa56:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa58:	f100 0688 	add.w	r6, r0, #136	; 0x88
   1aa5c:	4631      	mov	r1, r6
   1aa5e:	7a00      	ldrb	r0, [r0, #8]
   1aa60:	f7fe ffdc 	bl	19a1c <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1aa64:	4631      	mov	r1, r6
   1aa66:	7a20      	ldrb	r0, [r4, #8]
   1aa68:	f7ee ff18 	bl	989c <find_sc_cfg>
	if (!cfg) {
   1aa6c:	b128      	cbz	r0, 1aa7a <sc_clear+0x26>
}
   1aa6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1aa72:	220c      	movs	r2, #12
   1aa74:	2100      	movs	r1, #0
   1aa76:	f7fe bbf2 	b.w	1925e <memset>
}
   1aa7a:	bd70      	pop	{r4, r5, r6, pc}

0001aa7c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1aa7c:	2a02      	cmp	r2, #2
{
   1aa7e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1aa80:	d108      	bne.n	1aa94 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1aa82:	2300      	movs	r3, #0
   1aa84:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1aa88:	461a      	mov	r2, r3
   1aa8a:	7a00      	ldrb	r0, [r0, #8]
   1aa8c:	f7ee ffbe 	bl	9a0c <sc_save>
}
   1aa90:	2002      	movs	r0, #2
   1aa92:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1aa94:	f7ff ffde 	bl	1aa54 <sc_clear>
   1aa98:	e7fa      	b.n	1aa90 <sc_ccc_cfg_write+0x14>

0001aa9a <bt_gatt_attr_value_handle>:
{
   1aa9a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1aa9c:	4604      	mov	r4, r0
   1aa9e:	b910      	cbnz	r0, 1aaa6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1aaa0:	2000      	movs	r0, #0
}
   1aaa2:	b002      	add	sp, #8
   1aaa4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1aaa6:	2300      	movs	r3, #0
   1aaa8:	f88d 3004 	strb.w	r3, [sp, #4]
   1aaac:	f642 0303 	movw	r3, #10243	; 0x2803
   1aab0:	6800      	ldr	r0, [r0, #0]
   1aab2:	a901      	add	r1, sp, #4
   1aab4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aab8:	f7fe fd9c 	bl	195f4 <bt_uuid_cmp>
   1aabc:	2800      	cmp	r0, #0
   1aabe:	d1ef      	bne.n	1aaa0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1aac0:	68e3      	ldr	r3, [r4, #12]
   1aac2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1aac4:	2800      	cmp	r0, #0
   1aac6:	d1ec      	bne.n	1aaa2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1aac8:	4620      	mov	r0, r4
   1aaca:	f7ef fa6f 	bl	9fac <bt_gatt_attr_get_handle>
   1aace:	3001      	adds	r0, #1
   1aad0:	b280      	uxth	r0, r0
	return handle;
   1aad2:	e7e6      	b.n	1aaa2 <bt_gatt_attr_value_handle+0x8>

0001aad4 <bt_gatt_attr_read_chrc>:
{
   1aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1aad6:	68cf      	ldr	r7, [r1, #12]
{
   1aad8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1aada:	79bb      	ldrb	r3, [r7, #6]
{
   1aadc:	b087      	sub	sp, #28
   1aade:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1aae0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1aae4:	4615      	mov	r5, r2
   1aae6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1aaea:	f7ff ffd6 	bl	1aa9a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1aaee:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1aaf0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1aaf4:	780b      	ldrb	r3, [r1, #0]
   1aaf6:	b99b      	cbnz	r3, 1ab20 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1aaf8:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1aafa:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1aafc:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1ab00:	42b1      	cmp	r1, r6
   1ab02:	d315      	bcc.n	1ab30 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ab04:	1b89      	subs	r1, r1, r6
   1ab06:	42a1      	cmp	r1, r4
   1ab08:	bfa8      	it	ge
   1ab0a:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1ab0c:	ab01      	add	r3, sp, #4
   1ab0e:	b28c      	uxth	r4, r1
   1ab10:	4622      	mov	r2, r4
   1ab12:	4628      	mov	r0, r5
   1ab14:	1999      	adds	r1, r3, r6
   1ab16:	f7fe fb77 	bl	19208 <memcpy>
}
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	b007      	add	sp, #28
   1ab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ab20:	3101      	adds	r1, #1
   1ab22:	2210      	movs	r2, #16
   1ab24:	f10d 0007 	add.w	r0, sp, #7
   1ab28:	f7fe fb6e 	bl	19208 <memcpy>
		value_len += 16U;
   1ab2c:	2113      	movs	r1, #19
   1ab2e:	e7e7      	b.n	1ab00 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ab30:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ab34:	e7f1      	b.n	1ab1a <bt_gatt_attr_read_chrc+0x46>

0001ab36 <bt_gatt_foreach_attr>:
{
   1ab36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ab38:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ab3c:	2300      	movs	r3, #0
   1ab3e:	461a      	mov	r2, r3
   1ab40:	9300      	str	r3, [sp, #0]
   1ab42:	f7ef fa63 	bl	a00c <bt_gatt_foreach_attr_type>
}
   1ab46:	b005      	add	sp, #20
   1ab48:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab4c <db_hash_process>:
	db_hash_gen(true);
   1ab4c:	f7ef bab8 	b.w	a0c0 <db_hash_gen.isra.0>

0001ab50 <bt_gatt_check_perm>:
{
   1ab50:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1ab52:	07d4      	lsls	r4, r2, #31
{
   1ab54:	4605      	mov	r5, r0
   1ab56:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ab58:	d504      	bpl.n	1ab64 <bt_gatt_check_perm+0x14>
   1ab5a:	f010 0f15 	tst.w	r0, #21
   1ab5e:	d01e      	beq.n	1ab9e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ab60:	684b      	ldr	r3, [r1, #4]
   1ab62:	b1e3      	cbz	r3, 1ab9e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ab64:	0793      	lsls	r3, r2, #30
   1ab66:	d504      	bpl.n	1ab72 <bt_gatt_check_perm+0x22>
   1ab68:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1ab6c:	d019      	beq.n	1aba2 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ab6e:	688b      	ldr	r3, [r1, #8]
   1ab70:	b1bb      	cbz	r3, 1aba2 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1ab72:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ab76:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ab7a:	d103      	bne.n	1ab84 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1ab7c:	f014 000c 	ands.w	r0, r4, #12
   1ab80:	d107      	bne.n	1ab92 <bt_gatt_check_perm+0x42>
}
   1ab82:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1ab84:	4628      	mov	r0, r5
   1ab86:	f7ff f844 	bl	19c12 <bt_conn_get_security>
   1ab8a:	2802      	cmp	r0, #2
   1ab8c:	d8f6      	bhi.n	1ab7c <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1ab8e:	2005      	movs	r0, #5
   1ab90:	e7f7      	b.n	1ab82 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1ab92:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ab94:	2b00      	cmp	r3, #0
   1ab96:	bf14      	ite	ne
   1ab98:	2000      	movne	r0, #0
   1ab9a:	200f      	moveq	r0, #15
   1ab9c:	e7f1      	b.n	1ab82 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ab9e:	2002      	movs	r0, #2
   1aba0:	e7ef      	b.n	1ab82 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1aba2:	2003      	movs	r0, #3
   1aba4:	e7ed      	b.n	1ab82 <bt_gatt_check_perm+0x32>

0001aba6 <gatt_discover_next>:
{
   1aba6:	b570      	push	{r4, r5, r6, lr}
   1aba8:	4605      	mov	r5, r0
   1abaa:	4614      	mov	r4, r2
	if (!last_handle)
   1abac:	b929      	cbnz	r1, 1abba <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1abae:	4621      	mov	r1, r4
   1abb0:	4628      	mov	r0, r5
   1abb2:	f7ef fc33 	bl	a41c <bt_gatt_discover>
   1abb6:	b928      	cbnz	r0, 1abc4 <gatt_discover_next+0x1e>
}
   1abb8:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1abba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1abbe:	4291      	cmp	r1, r2
   1abc0:	d107      	bne.n	1abd2 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1abc2:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1abc4:	4622      	mov	r2, r4
   1abc6:	4628      	mov	r0, r5
   1abc8:	6863      	ldr	r3, [r4, #4]
   1abca:	2100      	movs	r1, #0
}
   1abcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1abd0:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1abd2:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1abd4:	1c4b      	adds	r3, r1, #1
   1abd6:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1abd8:	429a      	cmp	r2, r3
		params->start_handle++;
   1abda:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1abdc:	d2e7      	bcs.n	1abae <gatt_discover_next+0x8>
   1abde:	e7f1      	b.n	1abc4 <gatt_discover_next+0x1e>

0001abe0 <gatt_find_type_rsp>:
{
   1abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1abe4:	b088      	sub	sp, #32
   1abe6:	4607      	mov	r7, r0
   1abe8:	4614      	mov	r4, r2
   1abea:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1abee:	b911      	cbnz	r1, 1abf6 <gatt_find_type_rsp+0x16>
   1abf0:	f013 0803 	ands.w	r8, r3, #3
   1abf4:	d008      	beq.n	1ac08 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1abf6:	464a      	mov	r2, r9
   1abf8:	2100      	movs	r1, #0
   1abfa:	4638      	mov	r0, r7
   1abfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1ac00:	4798      	blx	r3
}
   1ac02:	b008      	add	sp, #32
   1ac04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1ac08:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1ac0a:	f642 0a01 	movw	sl, #10241	; 0x2801
   1ac0e:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1ac12:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1ac16:	42ac      	cmp	r4, r5
   1ac18:	d105      	bne.n	1ac26 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   1ac1a:	464a      	mov	r2, r9
   1ac1c:	4641      	mov	r1, r8
   1ac1e:	4638      	mov	r0, r7
   1ac20:	f7ff ffc1 	bl	1aba6 <gatt_discover_next>
	return;
   1ac24:	e7ed      	b.n	1ac02 <gatt_find_type_rsp+0x22>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1ac26:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1ac2a:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1ac2c:	2900      	cmp	r1, #0
   1ac2e:	bf0c      	ite	eq
   1ac30:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1ac34:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1ac36:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1ac3a:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1ac3e:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1ac42:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1ac44:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1ac46:	ab01      	add	r3, sp, #4
   1ac48:	f8ad 1002 	strh.w	r1, [sp, #2]
   1ac4c:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1ac4e:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1ac52:	4638      	mov	r0, r7
   1ac54:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1ac56:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1ac5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1ac5e:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1ac62:	f8cd d00c 	str.w	sp, [sp, #12]
   1ac66:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1ac6a:	a903      	add	r1, sp, #12
   1ac6c:	4798      	blx	r3
   1ac6e:	3404      	adds	r4, #4
   1ac70:	2800      	cmp	r0, #0
   1ac72:	d1d0      	bne.n	1ac16 <gatt_find_type_rsp+0x36>
   1ac74:	e7c5      	b.n	1ac02 <gatt_find_type_rsp+0x22>

0001ac76 <bt_gatt_subscribe>:
{
   1ac76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ac78:	7b43      	ldrb	r3, [r0, #13]
{
   1ac7a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ac7c:	2b07      	cmp	r3, #7
{
   1ac7e:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1ac80:	d14a      	bne.n	1ad18 <bt_gatt_subscribe+0xa2>
	sub = gatt_sub_find(conn);
   1ac82:	f7ee fe2b 	bl	98dc <gatt_sub_find>
	if (!sub) {
   1ac86:	4604      	mov	r4, r0
   1ac88:	b958      	cbnz	r0, 1aca2 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   1ac8a:	f7ee fe27 	bl	98dc <gatt_sub_find>
		if (sub) {
   1ac8e:	4604      	mov	r4, r0
   1ac90:	2800      	cmp	r0, #0
   1ac92:	d044      	beq.n	1ad1e <bt_gatt_subscribe+0xa8>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1ac94:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ac98:	3001      	adds	r0, #1
   1ac9a:	f7ff fd9e 	bl	1a7da <bt_addr_le_copy>
			sub->id = conn->id;
   1ac9e:	7a2b      	ldrb	r3, [r5, #8]
   1aca0:	7023      	strb	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1aca2:	68a3      	ldr	r3, [r4, #8]
   1aca4:	b90b      	cbnz	r3, 1acaa <bt_gatt_subscribe+0x34>
   1aca6:	461a      	mov	r2, r3
   1aca8:	e001      	b.n	1acae <bt_gatt_subscribe+0x38>
   1acaa:	f1a3 0214 	sub.w	r2, r3, #20
			has_subscription = true;
   1acae:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1acb0:	b97a      	cbnz	r2, 1acd2 <bt_gatt_subscribe+0x5c>
	if (!has_subscription) {
   1acb2:	bb41      	cbnz	r1, 1ad06 <bt_gatt_subscribe+0x90>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   1acb4:	4628      	mov	r0, r5
   1acb6:	4633      	mov	r3, r6
   1acb8:	89b2      	ldrh	r2, [r6, #12]
   1acba:	8971      	ldrh	r1, [r6, #10]
   1acbc:	f7ee ff5a 	bl	9b74 <gatt_write_ccc.constprop.0>
		if (err) {
   1acc0:	4605      	mov	r5, r0
   1acc2:	b300      	cbz	r0, 1ad06 <bt_gatt_subscribe+0x90>
	if (sys_slist_is_empty(&sub->list)) {
   1acc4:	68a3      	ldr	r3, [r4, #8]
   1acc6:	b913      	cbnz	r3, 1acce <bt_gatt_subscribe+0x58>
   1acc8:	4620      	mov	r0, r4
   1acca:	f7ff fd89 	bl	1a7e0 <gatt_sub_remove.part.0>
}
   1acce:	4628      	mov	r0, r5
   1acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1acd2:	42b2      	cmp	r2, r6
   1acd4:	d106      	bne.n	1ace4 <bt_gatt_subscribe+0x6e>
	if (sys_slist_is_empty(&sub->list)) {
   1acd6:	b913      	cbnz	r3, 1acde <bt_gatt_subscribe+0x68>
   1acd8:	4620      	mov	r0, r4
   1acda:	f7ff fd81 	bl	1a7e0 <gatt_sub_remove.part.0>
			return -EALREADY;
   1acde:	f06f 0544 	mvn.w	r5, #68	; 0x44
   1ace2:	e7f4      	b.n	1acce <bt_gatt_subscribe+0x58>
		if (tmp->value_handle == params->value_handle &&
   1ace4:	8917      	ldrh	r7, [r2, #8]
   1ace6:	8930      	ldrh	r0, [r6, #8]
   1ace8:	4287      	cmp	r7, r0
   1acea:	d104      	bne.n	1acf6 <bt_gatt_subscribe+0x80>
   1acec:	8997      	ldrh	r7, [r2, #12]
   1acee:	89b0      	ldrh	r0, [r6, #12]
			has_subscription = true;
   1acf0:	4287      	cmp	r7, r0
   1acf2:	bf28      	it	cs
   1acf4:	2101      	movcs	r1, #1
   1acf6:	f112 0f14 	cmn.w	r2, #20
   1acfa:	d0da      	beq.n	1acb2 <bt_gatt_subscribe+0x3c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1acfc:	6952      	ldr	r2, [r2, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1acfe:	2a00      	cmp	r2, #0
   1ad00:	d0d7      	beq.n	1acb2 <bt_gatt_subscribe+0x3c>
   1ad02:	3a14      	subs	r2, #20
   1ad04:	e7d4      	b.n	1acb0 <bt_gatt_subscribe+0x3a>
Z_GENLIST_PREPEND(slist, snode)
   1ad06:	68a2      	ldr	r2, [r4, #8]
	sys_slist_prepend(&sub->list, &params->node);
   1ad08:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   1ad0c:	6172      	str	r2, [r6, #20]
Z_GENLIST_PREPEND(slist, snode)
   1ad0e:	68e5      	ldr	r5, [r4, #12]
	list->head = node;
   1ad10:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1ad12:	b93d      	cbnz	r5, 1ad24 <bt_gatt_subscribe+0xae>
	list->tail = node;
   1ad14:	60e3      	str	r3, [r4, #12]
}
   1ad16:	e7da      	b.n	1acce <bt_gatt_subscribe+0x58>
		return -ENOTCONN;
   1ad18:	f06f 0538 	mvn.w	r5, #56	; 0x38
   1ad1c:	e7d7      	b.n	1acce <bt_gatt_subscribe+0x58>
		return -ENOMEM;
   1ad1e:	f06f 050b 	mvn.w	r5, #11
   1ad22:	e7d4      	b.n	1acce <bt_gatt_subscribe+0x58>
	return 0;
   1ad24:	2500      	movs	r5, #0
   1ad26:	e7d2      	b.n	1acce <bt_gatt_subscribe+0x58>

0001ad28 <bt_gatt_unsubscribe>:
{
   1ad28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ad2c:	7b43      	ldrb	r3, [r0, #13]
{
   1ad2e:	4681      	mov	r9, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ad30:	2b07      	cmp	r3, #7
{
   1ad32:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1ad34:	d16e      	bne.n	1ae14 <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
   1ad36:	f7ee fdd1 	bl	98dc <gatt_sub_find>
	if (!sub) {
   1ad3a:	4607      	mov	r7, r0
   1ad3c:	b920      	cbnz	r0, 1ad48 <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   1ad3e:	f06f 0015 	mvn.w	r0, #21
}
   1ad42:	b003      	add	sp, #12
   1ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ad48:	6884      	ldr	r4, [r0, #8]
   1ad4a:	b1d4      	cbz	r4, 1ad82 <bt_gatt_unsubscribe+0x5a>
   1ad4c:	f1b4 0514 	subs.w	r5, r4, #20
   1ad50:	d019      	beq.n	1ad86 <bt_gatt_unsubscribe+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ad52:	6824      	ldr	r4, [r4, #0]
   1ad54:	b104      	cbz	r4, 1ad58 <bt_gatt_unsubscribe+0x30>
   1ad56:	3c14      	subs	r4, #20
   1ad58:	f04f 0800 	mov.w	r8, #0
   1ad5c:	46c3      	mov	fp, r8
   1ad5e:	46c2      	mov	sl, r8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ad60:	f106 0210 	add.w	r2, r6, #16
   1ad64:	b98d      	cbnz	r5, 1ad8a <bt_gatt_unsubscribe+0x62>
	if (!found) {
   1ad66:	f1bb 0f00 	cmp.w	fp, #0
   1ad6a:	d0e8      	beq.n	1ad3e <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   1ad6c:	f1ba 0f00 	cmp.w	sl, #0
   1ad70:	d045      	beq.n	1adfe <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
   1ad72:	462b      	mov	r3, r5
   1ad74:	462a      	mov	r2, r5
   1ad76:	4631      	mov	r1, r6
   1ad78:	4648      	mov	r0, r9
   1ad7a:	6834      	ldr	r4, [r6, #0]
   1ad7c:	47a0      	blx	r4
		return 0;
   1ad7e:	4628      	mov	r0, r5
   1ad80:	e7df      	b.n	1ad42 <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ad82:	4625      	mov	r5, r4
   1ad84:	e7e8      	b.n	1ad58 <bt_gatt_unsubscribe+0x30>
   1ad86:	462c      	mov	r4, r5
   1ad88:	e7e6      	b.n	1ad58 <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   1ad8a:	42b5      	cmp	r5, r6
   1ad8c:	f105 0014 	add.w	r0, r5, #20
   1ad90:	d128      	bne.n	1ade4 <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
   1ad92:	696b      	ldr	r3, [r5, #20]
   1ad94:	f1b8 0f00 	cmp.w	r8, #0
   1ad98:	d11c      	bne.n	1add4 <bt_gatt_unsubscribe+0xac>
   1ad9a:	68f9      	ldr	r1, [r7, #12]
	list->head = node;
   1ad9c:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   1ad9e:	4288      	cmp	r0, r1
   1ada0:	d100      	bne.n	1ada4 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   1ada2:	60fb      	str	r3, [r7, #12]
	parent->next = child;
   1ada4:	2300      	movs	r3, #0
   1ada6:	616b      	str	r3, [r5, #20]
   1ada8:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
   1adac:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1adae:	f3c1 0b80 	ubfx	fp, r1, #2, #1
   1adb2:	d51f      	bpl.n	1adf4 <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
   1adb4:	4631      	mov	r1, r6
   1adb6:	4648      	mov	r0, r9
   1adb8:	9201      	str	r2, [sp, #4]
   1adba:	f7ee fd11 	bl	97e0 <bt_att_req_cancel>
}
   1adbe:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1adc0:	b1dc      	cbz	r4, 1adfa <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1adc2:	f114 0114 	adds.w	r1, r4, #20
   1adc6:	d002      	beq.n	1adce <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1adc8:	6961      	ldr	r1, [r4, #20]
   1adca:	b101      	cbz	r1, 1adce <bt_gatt_unsubscribe+0xa6>
   1adcc:	3914      	subs	r1, #20
   1adce:	4625      	mov	r5, r4
   1add0:	460c      	mov	r4, r1
   1add2:	e7c7      	b.n	1ad64 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   1add4:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1add8:	68f9      	ldr	r1, [r7, #12]
   1adda:	4288      	cmp	r0, r1
	list->tail = node;
   1addc:	bf08      	it	eq
   1adde:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   1ade2:	e7df      	b.n	1ada4 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   1ade4:	892d      	ldrh	r5, [r5, #8]
   1ade6:	8931      	ldrh	r1, [r6, #8]
   1ade8:	4680      	mov	r8, r0
   1adea:	428d      	cmp	r5, r1
   1adec:	bf08      	it	eq
   1adee:	f04f 0a01 	moveq.w	sl, #1
   1adf2:	e7e5      	b.n	1adc0 <bt_gatt_unsubscribe+0x98>
			found = true;
   1adf4:	f04f 0b01 	mov.w	fp, #1
   1adf8:	e7e2      	b.n	1adc0 <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1adfa:	4621      	mov	r1, r4
   1adfc:	e7e7      	b.n	1adce <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1adfe:	4633      	mov	r3, r6
   1ae00:	4652      	mov	r2, sl
   1ae02:	4648      	mov	r0, r9
   1ae04:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   1ae06:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1ae0a:	b003      	add	sp, #12
   1ae0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1ae10:	f7ee beb0 	b.w	9b74 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   1ae14:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1ae18:	e793      	b.n	1ad42 <bt_gatt_unsubscribe+0x1a>

0001ae1a <bt_gatt_notification>:
{
   1ae1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae1e:	4607      	mov	r7, r0
   1ae20:	4688      	mov	r8, r1
   1ae22:	4691      	mov	r9, r2
   1ae24:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1ae26:	f7ee fd59 	bl	98dc <gatt_sub_find>
	if (!sub) {
   1ae2a:	b1f8      	cbz	r0, 1ae6c <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1ae2c:	6883      	ldr	r3, [r0, #8]
   1ae2e:	b1eb      	cbz	r3, 1ae6c <bt_gatt_notification+0x52>
   1ae30:	f1b3 0614 	subs.w	r6, r3, #20
   1ae34:	d01a      	beq.n	1ae6c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae36:	681c      	ldr	r4, [r3, #0]
   1ae38:	b104      	cbz	r4, 1ae3c <bt_gatt_notification+0x22>
   1ae3a:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1ae3c:	8933      	ldrh	r3, [r6, #8]
   1ae3e:	4543      	cmp	r3, r8
   1ae40:	d10a      	bne.n	1ae58 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1ae42:	4653      	mov	r3, sl
   1ae44:	464a      	mov	r2, r9
   1ae46:	4631      	mov	r1, r6
   1ae48:	4638      	mov	r0, r7
   1ae4a:	6835      	ldr	r5, [r6, #0]
   1ae4c:	47a8      	blx	r5
   1ae4e:	b918      	cbnz	r0, 1ae58 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1ae50:	4631      	mov	r1, r6
   1ae52:	4638      	mov	r0, r7
   1ae54:	f7ff ff68 	bl	1ad28 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1ae58:	b144      	cbz	r4, 1ae6c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ae5a:	f114 0514 	adds.w	r5, r4, #20
   1ae5e:	d002      	beq.n	1ae66 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae60:	6965      	ldr	r5, [r4, #20]
   1ae62:	b105      	cbz	r5, 1ae66 <bt_gatt_notification+0x4c>
   1ae64:	3d14      	subs	r5, #20
{
   1ae66:	4626      	mov	r6, r4
   1ae68:	462c      	mov	r4, r5
   1ae6a:	e7e7      	b.n	1ae3c <bt_gatt_notification+0x22>
}
   1ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ae70 <bt_gatt_change_aware>:
{
   1ae70:	b510      	push	{r4, lr}
   1ae72:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1ae74:	f7ee fce4 	bl	9840 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ae78:	b910      	cbnz	r0, 1ae80 <bt_gatt_change_aware+0x10>
		return true;
   1ae7a:	2401      	movs	r4, #1
}
   1ae7c:	4620      	mov	r0, r4
   1ae7e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ae80:	7a03      	ldrb	r3, [r0, #8]
   1ae82:	07da      	lsls	r2, r3, #31
   1ae84:	d5f9      	bpl.n	1ae7a <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ae86:	300c      	adds	r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae88:	e8d0 1faf 	lda	r1, [r0]
   1ae8c:	f011 0101 	ands.w	r1, r1, #1
   1ae90:	d1f3      	bne.n	1ae7a <bt_gatt_change_aware+0xa>
	if (!req) {
   1ae92:	2c00      	cmp	r4, #0
   1ae94:	d0f2      	beq.n	1ae7c <bt_gatt_change_aware+0xc>
   1ae96:	e8d0 3faf 	lda	r3, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ae9a:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ae9e:	079b      	lsls	r3, r3, #30
   1aea0:	d50a      	bpl.n	1aeb8 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aea2:	e8d0 3fef 	ldaex	r3, [r0]
   1aea6:	f023 0302 	bic.w	r3, r3, #2
   1aeaa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1aeae:	2a00      	cmp	r2, #0
   1aeb0:	d1f7      	bne.n	1aea2 <bt_gatt_change_aware+0x32>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1aeb2:	f7ff fcba 	bl	1a82a <atomic_set_bit>
	return false;
   1aeb6:	e7e1      	b.n	1ae7c <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1aeb8:	2101      	movs	r1, #1
   1aeba:	e7fa      	b.n	1aeb2 <bt_gatt_change_aware+0x42>

0001aebc <sys_memcpy_swap>:
	psrc += length - 1;
   1aebc:	1e53      	subs	r3, r2, #1
   1aebe:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1aec0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1aec2:	f811 3901 	ldrb.w	r3, [r1], #-1
   1aec6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1aeca:	4290      	cmp	r0, r2
   1aecc:	d1f9      	bne.n	1aec2 <sys_memcpy_swap+0x6>
}
   1aece:	4770      	bx	lr

0001aed0 <smp_pairing_req>:
}
   1aed0:	2007      	movs	r0, #7
   1aed2:	4770      	bx	lr

0001aed4 <bt_smp_aes_cmac>:
{
   1aed4:	b570      	push	{r4, r5, r6, lr}
   1aed6:	b0c2      	sub	sp, #264	; 0x108
   1aed8:	460d      	mov	r5, r1
   1aeda:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1aedc:	4601      	mov	r1, r0
   1aede:	aa16      	add	r2, sp, #88	; 0x58
   1aee0:	4668      	mov	r0, sp
{
   1aee2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1aee4:	f7fd fe16 	bl	18b14 <tc_cmac_setup>
   1aee8:	b150      	cbz	r0, 1af00 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1aeea:	4632      	mov	r2, r6
   1aeec:	4629      	mov	r1, r5
   1aeee:	4668      	mov	r0, sp
   1aef0:	f7fd fe3b 	bl	18b6a <tc_cmac_update>
   1aef4:	b120      	cbz	r0, 1af00 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1aef6:	4669      	mov	r1, sp
   1aef8:	4620      	mov	r0, r4
   1aefa:	f7fd fea2 	bl	18c42 <tc_cmac_final>
   1aefe:	b918      	cbnz	r0, 1af08 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1af00:	f06f 0004 	mvn.w	r0, #4
}
   1af04:	b042      	add	sp, #264	; 0x108
   1af06:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1af08:	2000      	movs	r0, #0
   1af0a:	e7fb      	b.n	1af04 <bt_smp_aes_cmac+0x30>

0001af0c <bt_smp_disconnected>:
{
   1af0c:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1af0e:	6803      	ldr	r3, [r0, #0]
{
   1af10:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   1af12:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   1af16:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1af1a:	f007 fe23 	bl	22b64 <k_delayed_work_cancel>
	if (keys) {
   1af1e:	b13d      	cbz	r5, 1af30 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1af20:	89eb      	ldrh	r3, [r5, #14]
   1af22:	b113      	cbz	r3, 1af2a <bt_smp_disconnected+0x1e>
   1af24:	7b6b      	ldrb	r3, [r5, #13]
   1af26:	079b      	lsls	r3, r3, #30
   1af28:	d502      	bpl.n	1af30 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1af2a:	4628      	mov	r0, r5
   1af2c:	f000 fbc4 	bl	1b6b8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1af30:	4620      	mov	r0, r4
}
   1af32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1af36:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   1af3a:	2100      	movs	r1, #0
   1af3c:	f7fe b98f 	b.w	1925e <memset>

0001af40 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1af40:	b510      	push	{r4, lr}
   1af42:	1e43      	subs	r3, r0, #1
   1af44:	f100 0210 	add.w	r2, r0, #16
   1af48:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1af4a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1af4e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1af52:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1af54:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1af56:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1af58:	d1f7      	bne.n	1af4a <sys_mem_swap.constprop.0+0xa>
	}
}
   1af5a:	bd10      	pop	{r4, pc}

0001af5c <smp_f6>:
{
   1af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af5e:	4616      	mov	r6, r2
   1af60:	461c      	mov	r4, r3
   1af62:	4605      	mov	r5, r0
   1af64:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1af66:	2210      	movs	r2, #16
   1af68:	a805      	add	r0, sp, #20
{
   1af6a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1af6c:	f7ff ffa6 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1af70:	2210      	movs	r2, #16
   1af72:	4631      	mov	r1, r6
   1af74:	a809      	add	r0, sp, #36	; 0x24
   1af76:	f7ff ffa1 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1af7a:	4621      	mov	r1, r4
   1af7c:	2210      	movs	r2, #16
   1af7e:	a80d      	add	r0, sp, #52	; 0x34
   1af80:	f7ff ff9c 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1af84:	2203      	movs	r2, #3
   1af86:	991c      	ldr	r1, [sp, #112]	; 0x70
   1af88:	a811      	add	r0, sp, #68	; 0x44
   1af8a:	f7ff ff97 	bl	1aebc <sys_memcpy_swap>
	m[51] = a1->type;
   1af8e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1af90:	2206      	movs	r2, #6
	m[51] = a1->type;
   1af92:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1af96:	a812      	add	r0, sp, #72	; 0x48
   1af98:	4621      	mov	r1, r4
	m[51] = a1->type;
   1af9a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1af9e:	f7fe f933 	bl	19208 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1afa2:	4621      	mov	r1, r4
   1afa4:	2206      	movs	r2, #6
   1afa6:	a812      	add	r0, sp, #72	; 0x48
   1afa8:	f7ff ff88 	bl	1aebc <sys_memcpy_swap>
	m[58] = a2->type;
   1afac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1afae:	2206      	movs	r2, #6
	m[58] = a2->type;
   1afb0:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1afb4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1afb8:	4621      	mov	r1, r4
	m[58] = a2->type;
   1afba:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1afbe:	f7fe f923 	bl	19208 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1afc2:	4621      	mov	r1, r4
   1afc4:	2206      	movs	r2, #6
   1afc6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1afca:	f7ff ff77 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1afce:	2210      	movs	r2, #16
   1afd0:	4629      	mov	r1, r5
   1afd2:	a801      	add	r0, sp, #4
   1afd4:	f7ff ff72 	bl	1aebc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1afd8:	463b      	mov	r3, r7
   1afda:	2241      	movs	r2, #65	; 0x41
   1afdc:	a905      	add	r1, sp, #20
   1afde:	a801      	add	r0, sp, #4
   1afe0:	f7ff ff78 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
   1afe4:	4604      	mov	r4, r0
   1afe6:	b910      	cbnz	r0, 1afee <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1afe8:	4638      	mov	r0, r7
   1afea:	f7ff ffa9 	bl	1af40 <sys_mem_swap.constprop.0>
}
   1afee:	4620      	mov	r0, r4
   1aff0:	b017      	add	sp, #92	; 0x5c
   1aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001aff4 <smp_f4>:
{
   1aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aff6:	460e      	mov	r6, r1
   1aff8:	4614      	mov	r4, r2
   1affa:	461d      	mov	r5, r3
   1affc:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1affe:	4601      	mov	r1, r0
   1b000:	2220      	movs	r2, #32
   1b002:	a805      	add	r0, sp, #20
{
   1b004:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1b006:	f7ff ff59 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1b00a:	2220      	movs	r2, #32
   1b00c:	4631      	mov	r1, r6
   1b00e:	a80d      	add	r0, sp, #52	; 0x34
   1b010:	f7ff ff54 	bl	1aebc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1b014:	4621      	mov	r1, r4
   1b016:	2210      	movs	r2, #16
   1b018:	a801      	add	r0, sp, #4
	m[64] = z;
   1b01a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1b01e:	f7ff ff4d 	bl	1aebc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1b022:	463b      	mov	r3, r7
   1b024:	2241      	movs	r2, #65	; 0x41
   1b026:	a905      	add	r1, sp, #20
   1b028:	a801      	add	r0, sp, #4
   1b02a:	f7ff ff53 	bl	1aed4 <bt_smp_aes_cmac>
	if (err) {
   1b02e:	4604      	mov	r4, r0
   1b030:	b910      	cbnz	r0, 1b038 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1b032:	4638      	mov	r0, r7
   1b034:	f7ff ff84 	bl	1af40 <sys_mem_swap.constprop.0>
}
   1b038:	4620      	mov	r0, r4
   1b03a:	b017      	add	sp, #92	; 0x5c
   1b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b03e <smp_signing_info>:
   1b03e:	2007      	movs	r0, #7
   1b040:	4770      	bx	lr

0001b042 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b042:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b046:	4108      	asrs	r0, r1
}
   1b048:	f000 0001 	and.w	r0, r0, #1
   1b04c:	4770      	bx	lr

0001b04e <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b04e:	2301      	movs	r3, #1
   1b050:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b054:	43ca      	mvns	r2, r1
{
   1b056:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b058:	e8d0 3fef 	ldaex	r3, [r0]
   1b05c:	ea03 0c02 	and.w	ip, r3, r2
   1b060:	e8c0 cfee 	stlex	lr, ip, [r0]
   1b064:	f1be 0f00 	cmp.w	lr, #0
   1b068:	d1f6      	bne.n	1b058 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1b06a:	420b      	tst	r3, r1
}
   1b06c:	bf14      	ite	ne
   1b06e:	2001      	movne	r0, #1
   1b070:	2000      	moveq	r0, #0
   1b072:	f85d fb04 	ldr.w	pc, [sp], #4

0001b076 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b076:	2301      	movs	r3, #1
   1b078:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b07a:	e8d0 2fef 	ldaex	r2, [r0]
   1b07e:	431a      	orrs	r2, r3
   1b080:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1b084:	2900      	cmp	r1, #0
   1b086:	d1f8      	bne.n	1b07a <atomic_set_bit+0x4>
}
   1b088:	4770      	bx	lr

0001b08a <smp_keypress_notif>:
{
   1b08a:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b08c:	210e      	movs	r1, #14
   1b08e:	30b8      	adds	r0, #184	; 0xb8
   1b090:	f7ff fff1 	bl	1b076 <atomic_set_bit>
}
   1b094:	2000      	movs	r0, #0
   1b096:	bd08      	pop	{r3, pc}

0001b098 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1b098:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b09a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1b09e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b0a0:	4628      	mov	r0, r5
   1b0a2:	2104      	movs	r1, #4
   1b0a4:	f7ff ffcd 	bl	1b042 <atomic_test_bit>
   1b0a8:	b168      	cbz	r0, 1b0c6 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   1b0aa:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1b0ac:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1b0ae:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1b0b0:	4608      	mov	r0, r1
   1b0b2:	f7fe feb6 	bl	19e22 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b0b6:	4604      	mov	r4, r0
   1b0b8:	b940      	cbnz	r0, 1b0cc <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b0ba:	2104      	movs	r1, #4
   1b0bc:	4628      	mov	r0, r5
   1b0be:	f7ff ffda 	bl	1b076 <atomic_set_bit>
}
   1b0c2:	4620      	mov	r0, r4
   1b0c4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1b0c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b0ca:	e7ef      	b.n	1b0ac <smp_create_pdu.isra.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   1b0cc:	2101      	movs	r1, #1
   1b0ce:	3008      	adds	r0, #8
   1b0d0:	f000 fb5d 	bl	1b78e <net_buf_simple_add>
	hdr->code = op;
   1b0d4:	7006      	strb	r6, [r0, #0]
	return buf;
   1b0d6:	e7f4      	b.n	1b0c2 <smp_create_pdu.isra.0+0x2a>

0001b0d8 <smp_send_pairing_random>:
{
   1b0d8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1b0da:	2104      	movs	r1, #4
{
   1b0dc:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1b0de:	f7ff ffdb 	bl	1b098 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1b0e2:	4604      	mov	r4, r0
   1b0e4:	b178      	cbz	r0, 1b106 <smp_send_pairing_random+0x2e>
   1b0e6:	2110      	movs	r1, #16
   1b0e8:	3008      	adds	r0, #8
   1b0ea:	f000 fb50 	bl	1b78e <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1b0ee:	2210      	movs	r2, #16
   1b0f0:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1b0f4:	f7fe f888 	bl	19208 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1b0f8:	4628      	mov	r0, r5
   1b0fa:	2200      	movs	r2, #0
   1b0fc:	4621      	mov	r1, r4
   1b0fe:	f7ef febf 	bl	ae80 <smp_send.isra.0>
	return 0;
   1b102:	2000      	movs	r0, #0
}
   1b104:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b106:	2008      	movs	r0, #8
   1b108:	e7fc      	b.n	1b104 <smp_send_pairing_random+0x2c>

0001b10a <smp_pairing_confirm>:
{
   1b10a:	b510      	push	{r4, lr}
   1b10c:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1b10e:	6889      	ldr	r1, [r1, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b110:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   1b114:	e8d3 2fef 	ldaex	r2, [r3]
   1b118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1b11c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1b120:	2800      	cmp	r0, #0
   1b122:	d1f7      	bne.n	1b114 <smp_pairing_confirm+0xa>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1b124:	2210      	movs	r2, #16
   1b126:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   1b12a:	f7fe f86d 	bl	19208 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1b12e:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b130:	78db      	ldrb	r3, [r3, #3]
   1b132:	b94b      	cbnz	r3, 1b148 <smp_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b134:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1b138:	2104      	movs	r1, #4
   1b13a:	f7ff ff9c 	bl	1b076 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   1b13e:	4620      	mov	r0, r4
}
   1b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   1b144:	f7ff bfc8 	b.w	1b0d8 <smp_send_pairing_random>
}
   1b148:	2000      	movs	r0, #0
   1b14a:	bd10      	pop	{r4, pc}

0001b14c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b14c:	2301      	movs	r3, #1
   1b14e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b150:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b152:	e8d0 2fef 	ldaex	r2, [r0]
   1b156:	401a      	ands	r2, r3
   1b158:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1b15c:	2900      	cmp	r1, #0
   1b15e:	d1f8      	bne.n	1b152 <atomic_clear_bit+0x6>
}
   1b160:	4770      	bx	lr

0001b162 <smp_reset>:
{
   1b162:	b538      	push	{r3, r4, r5, lr}
   1b164:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b166:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1b168:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1b16c:	f007 fcfa 	bl	22b64 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1b170:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   1b172:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	smp->method = JUST_WORKS;
   1b176:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b17a:	e8d0 2fef 	ldaex	r2, [r0]
   1b17e:	e8c0 3fe1 	stlex	r1, r3, [r0]
   1b182:	2900      	cmp	r1, #0
   1b184:	d1f9      	bne.n	1b17a <smp_reset+0x18>
   1b186:	34bc      	adds	r4, #188	; 0xbc
   1b188:	e8d4 2fef 	ldaex	r2, [r4]
   1b18c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1b190:	2900      	cmp	r1, #0
   1b192:	d1f9      	bne.n	1b188 <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   1b194:	7a6b      	ldrb	r3, [r5, #9]
   1b196:	7aaa      	ldrb	r2, [r5, #10]
   1b198:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1b19a:	bf18      	it	ne
   1b19c:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b19e:	78eb      	ldrb	r3, [r5, #3]
   1b1a0:	b923      	cbnz	r3, 1b1ac <smp_reset+0x4a>
}
   1b1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1b1a6:	210b      	movs	r1, #11
   1b1a8:	f7ff bf65 	b.w	1b076 <atomic_set_bit>
}
   1b1ac:	bd38      	pop	{r3, r4, r5, pc}

0001b1ae <smp_error>:
{
   1b1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b1b0:	4606      	mov	r6, r0
   1b1b2:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1b1b4:	f7f0 fc38 	bl	ba28 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1b1b8:	2105      	movs	r1, #5
   1b1ba:	4630      	mov	r0, r6
   1b1bc:	f7ff ff6c 	bl	1b098 <smp_create_pdu.isra.0>
	if (!buf) {
   1b1c0:	4605      	mov	r5, r0
   1b1c2:	b178      	cbz	r0, 1b1e4 <smp_error+0x36>
   1b1c4:	2101      	movs	r1, #1
   1b1c6:	3008      	adds	r0, #8
   1b1c8:	f000 fae1 	bl	1b78e <net_buf_simple_add>
	rsp->reason = reason;
   1b1cc:	7004      	strb	r4, [r0, #0]
   1b1ce:	2400      	movs	r4, #0
   1b1d0:	462a      	mov	r2, r5
   1b1d2:	4623      	mov	r3, r4
   1b1d4:	2106      	movs	r1, #6
   1b1d6:	6830      	ldr	r0, [r6, #0]
   1b1d8:	9400      	str	r4, [sp, #0]
   1b1da:	f7fe fe25 	bl	19e28 <bt_l2cap_send_cb>
	return 0;
   1b1de:	4620      	mov	r0, r4
}
   1b1e0:	b002      	add	sp, #8
   1b1e2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1b1e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b1e8:	e7fa      	b.n	1b1e0 <smp_error+0x32>

0001b1ea <bt_smp_dhkey_ready>:
{
   1b1ea:	b570      	push	{r4, r5, r6, lr}
   1b1ec:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1b1ee:	2008      	movs	r0, #8
   1b1f0:	f7ef fe5e 	bl	aeb0 <smp_find>
	if (smp) {
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b1c0      	cbz	r0, 1b22a <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b1f8:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   1b1fc:	2108      	movs	r1, #8
   1b1fe:	4628      	mov	r0, r5
   1b200:	f7ff ffa4 	bl	1b14c <atomic_clear_bit>
	if (!dhkey) {
   1b204:	b3ae      	cbz	r6, 1b272 <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1b206:	2107      	movs	r1, #7
   1b208:	f7ff ffa0 	bl	1b14c <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   1b20c:	4631      	mov	r1, r6
   1b20e:	2220      	movs	r2, #32
   1b210:	f204 104f 	addw	r0, r4, #335	; 0x14f
   1b214:	f7fd fff8 	bl	19208 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1b218:	210a      	movs	r1, #10
   1b21a:	4628      	mov	r0, r5
   1b21c:	f7ff ff11 	bl	1b042 <atomic_test_bit>
   1b220:	b168      	cbz	r0, 1b23e <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1b222:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1b224:	4628      	mov	r0, r5
   1b226:	f7ff ff26 	bl	1b076 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1b22a:	2007      	movs	r0, #7
   1b22c:	f7ef fe40 	bl	aeb0 <smp_find>
		if (smp) {
   1b230:	4604      	mov	r4, r0
   1b232:	b118      	cbz	r0, 1b23c <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   1b234:	f7f0 fab0 	bl	b798 <smp_dhkey_generate>
			if (err) {
   1b238:	4601      	mov	r1, r0
   1b23a:	b9b0      	cbnz	r0, 1b26a <bt_smp_dhkey_ready+0x80>
}
   1b23c:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1b23e:	2110      	movs	r1, #16
   1b240:	4628      	mov	r0, r5
   1b242:	f7ff fefe 	bl	1b042 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1b246:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1b248:	2800      	cmp	r0, #0
   1b24a:	d1eb      	bne.n	1b224 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1b24c:	4628      	mov	r0, r5
   1b24e:	f7ff fef8 	bl	1b042 <atomic_test_bit>
   1b252:	2800      	cmp	r0, #0
   1b254:	d0e9      	beq.n	1b22a <bt_smp_dhkey_ready+0x40>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1b256:	6823      	ldr	r3, [r4, #0]
   1b258:	78db      	ldrb	r3, [r3, #3]
   1b25a:	2b00      	cmp	r3, #0
   1b25c:	d1e5      	bne.n	1b22a <bt_smp_dhkey_ready+0x40>
			return compute_and_send_master_dhcheck(smp);
   1b25e:	4620      	mov	r0, r4
   1b260:	f7ef ff08 	bl	b074 <compute_and_send_master_dhcheck>
		if (err) {
   1b264:	4601      	mov	r1, r0
   1b266:	2800      	cmp	r0, #0
   1b268:	d0df      	beq.n	1b22a <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   1b26a:	4620      	mov	r0, r4
   1b26c:	f7ff ff9f 	bl	1b1ae <smp_error>
   1b270:	e7db      	b.n	1b22a <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b272:	210b      	movs	r1, #11
   1b274:	e7f9      	b.n	1b26a <bt_smp_dhkey_ready+0x80>

0001b276 <smp_ident_sent>:
{
   1b276:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1b278:	7883      	ldrb	r3, [r0, #2]
   1b27a:	2b01      	cmp	r3, #1
   1b27c:	d10f      	bne.n	1b29e <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1b27e:	2106      	movs	r1, #6
   1b280:	f7fe fe02 	bl	19e88 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1b284:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   1b288:	f022 0201 	bic.w	r2, r2, #1
   1b28c:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   1b290:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   1b294:	b919      	cbnz	r1, 1b29e <smp_ident_sent+0x28>
}
   1b296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1b29a:	f7f0 bbc5 	b.w	ba28 <smp_pairing_complete>
}
   1b29e:	bd08      	pop	{r3, pc}

0001b2a0 <bt_smp_encrypt_change>:
{
   1b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   1b2a2:	4605      	mov	r5, r0
{
   1b2a4:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   1b2a6:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   1b2aa:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b2ac:	2101      	movs	r1, #1
   1b2ae:	4628      	mov	r0, r5
   1b2b0:	f7ff ff4c 	bl	1b14c <atomic_clear_bit>
	if (hci_status) {
   1b2b4:	2e00      	cmp	r6, #0
   1b2b6:	d14a      	bne.n	1b34e <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   1b2b8:	7afb      	ldrb	r3, [r7, #11]
   1b2ba:	2b00      	cmp	r3, #0
   1b2bc:	d047      	beq.n	1b34e <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b2be:	2103      	movs	r1, #3
   1b2c0:	f7ff febf 	bl	1b042 <atomic_test_bit>
   1b2c4:	b920      	cbnz	r0, 1b2d0 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   1b2c6:	4620      	mov	r0, r4
}
   1b2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   1b2cc:	f7ff bf49 	b.w	1b162 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b2d0:	2105      	movs	r1, #5
   1b2d2:	4628      	mov	r0, r5
   1b2d4:	f7ff feb5 	bl	1b042 <atomic_test_bit>
   1b2d8:	b198      	cbz	r0, 1b302 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1b2da:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   1b2de:	071e      	lsls	r6, r3, #28
   1b2e0:	d507      	bpl.n	1b2f2 <bt_smp_encrypt_change+0x52>
   1b2e2:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1b2e6:	0718      	lsls	r0, r3, #28
   1b2e8:	d503      	bpl.n	1b2f2 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1b2ea:	2111      	movs	r1, #17
   1b2ec:	4628      	mov	r0, r5
   1b2ee:	f7ff fec2 	bl	1b076 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b2f2:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
   1b2f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b2fa:	f023 0308 	bic.w	r3, r3, #8
   1b2fe:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1b302:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1b306:	07d9      	lsls	r1, r3, #31
   1b308:	d519      	bpl.n	1b33e <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1b30a:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b30c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1b310:	f7ff feb1 	bl	1b076 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b314:	2102      	movs	r1, #2
   1b316:	4628      	mov	r0, r5
   1b318:	f7ff fead 	bl	1b076 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b31c:	78fb      	ldrb	r3, [r7, #3]
   1b31e:	b913      	cbnz	r3, 1b326 <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   1b320:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1b324:	b99b      	cbnz	r3, 1b34e <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   1b326:	4620      	mov	r0, r4
   1b328:	f7ef fdf2 	bl	af10 <bt_smp_distribute_keys>
   1b32c:	b978      	cbnz	r0, 1b34e <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   1b32e:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   1b332:	b961      	cbnz	r1, 1b34e <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   1b334:	4620      	mov	r0, r4
}
   1b336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   1b33a:	f7f0 bb75 	b.w	ba28 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b33e:	079a      	lsls	r2, r3, #30
   1b340:	d501      	bpl.n	1b346 <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b342:	2108      	movs	r1, #8
   1b344:	e7e2      	b.n	1b30c <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b346:	075b      	lsls	r3, r3, #29
   1b348:	d5e4      	bpl.n	1b314 <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b34a:	210a      	movs	r1, #10
   1b34c:	e7de      	b.n	1b30c <bt_smp_encrypt_change+0x6c>
}
   1b34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b350 <smp_c1>:
{
   1b350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b354:	4699      	mov	r9, r3
   1b356:	b089      	sub	sp, #36	; 0x24
   1b358:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   1b35c:	783b      	ldrb	r3, [r7, #0]
{
   1b35e:	460c      	mov	r4, r1
	p1[0] = ia->type;
   1b360:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   1b364:	f898 3000 	ldrb.w	r3, [r8]
{
   1b368:	4611      	mov	r1, r2
   1b36a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   1b36c:	2207      	movs	r2, #7
{
   1b36e:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1b370:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   1b374:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   1b378:	f7fd ff46 	bl	19208 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1b37c:	2207      	movs	r2, #7
   1b37e:	4649      	mov	r1, r9
   1b380:	f10d 0009 	add.w	r0, sp, #9
   1b384:	f7fd ff40 	bl	19208 <memcpy>
	while (len--) {
   1b388:	4629      	mov	r1, r5
   1b38a:	466a      	mov	r2, sp
   1b38c:	f104 0010 	add.w	r0, r4, #16
   1b390:	4284      	cmp	r4, r0
   1b392:	d127      	bne.n	1b3e4 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1b394:	462a      	mov	r2, r5
   1b396:	4629      	mov	r1, r5
   1b398:	4630      	mov	r0, r6
   1b39a:	f7fe fb48 	bl	19a2e <bt_encrypt_le>
	if (err) {
   1b39e:	4604      	mov	r4, r0
   1b3a0:	b9e0      	cbnz	r0, 1b3dc <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1b3a2:	2206      	movs	r2, #6
   1b3a4:	f108 0101 	add.w	r1, r8, #1
   1b3a8:	a804      	add	r0, sp, #16
   1b3aa:	f7fd ff2d 	bl	19208 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1b3ae:	2206      	movs	r2, #6
   1b3b0:	1c79      	adds	r1, r7, #1
   1b3b2:	f10d 0016 	add.w	r0, sp, #22
   1b3b6:	f7fd ff27 	bl	19208 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1b3ba:	2204      	movs	r2, #4
   1b3bc:	4621      	mov	r1, r4
   1b3be:	a807      	add	r0, sp, #28
   1b3c0:	f7fd ff4d 	bl	1925e <memset>
	while (len--) {
   1b3c4:	462a      	mov	r2, r5
   1b3c6:	f105 0010 	add.w	r0, r5, #16
   1b3ca:	ab04      	add	r3, sp, #16
   1b3cc:	4282      	cmp	r2, r0
   1b3ce:	d112      	bne.n	1b3f6 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1b3d0:	462a      	mov	r2, r5
   1b3d2:	4629      	mov	r1, r5
   1b3d4:	4630      	mov	r0, r6
   1b3d6:	f7fe fb2a 	bl	19a2e <bt_encrypt_le>
   1b3da:	4604      	mov	r4, r0
}
   1b3dc:	4620      	mov	r0, r4
   1b3de:	b009      	add	sp, #36	; 0x24
   1b3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1b3e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b3e8:	f812 cb01 	ldrb.w	ip, [r2], #1
   1b3ec:	ea83 030c 	eor.w	r3, r3, ip
   1b3f0:	f801 3b01 	strb.w	r3, [r1], #1
   1b3f4:	e7cc      	b.n	1b390 <smp_c1+0x40>
   1b3f6:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b3fa:	f813 4b01 	ldrb.w	r4, [r3], #1
   1b3fe:	4061      	eors	r1, r4
   1b400:	f802 1c01 	strb.w	r1, [r2, #-1]
   1b404:	e7e2      	b.n	1b3cc <smp_c1+0x7c>

0001b406 <legacy_send_pairing_confirm>:
{
   1b406:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b408:	2103      	movs	r1, #3
{
   1b40a:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b40c:	6804      	ldr	r4, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b40e:	f7ff fe43 	bl	1b098 <smp_create_pdu.isra.0>
	if (!buf) {
   1b412:	4606      	mov	r6, r0
   1b414:	b1c0      	cbz	r0, 1b448 <legacy_send_pairing_confirm+0x42>
   1b416:	2110      	movs	r1, #16
   1b418:	3008      	adds	r0, #8
   1b41a:	f000 f9b8 	bl	1b78e <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1b41e:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1b422:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1b424:	9002      	str	r0, [sp, #8]
   1b426:	9301      	str	r3, [sp, #4]
   1b428:	9400      	str	r4, [sp, #0]
   1b42a:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   1b42e:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   1b432:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1b436:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   1b43a:	f7ff ff89 	bl	1b350 <smp_c1>
   1b43e:	4604      	mov	r4, r0
   1b440:	b120      	cbz	r0, 1b44c <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   1b442:	4630      	mov	r0, r6
   1b444:	f7f1 fa56 	bl	c8f4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b448:	2008      	movs	r0, #8
   1b44a:	e00a      	b.n	1b462 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   1b44c:	4602      	mov	r2, r0
   1b44e:	4631      	mov	r1, r6
   1b450:	4628      	mov	r0, r5
   1b452:	f7ef fd15 	bl	ae80 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b456:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1b45a:	4621      	mov	r1, r4
   1b45c:	f7ff fe76 	bl	1b14c <atomic_clear_bit>
	return 0;
   1b460:	4620      	mov	r0, r4
}
   1b462:	b004      	add	sp, #16
   1b464:	bd70      	pop	{r4, r5, r6, pc}

0001b466 <bt_smp_request_ltk>:
{
   1b466:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b46a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1b46c:	4604      	mov	r4, r0
   1b46e:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   1b472:	f7ef fccb 	bl	ae0c <smp_chan_get>
	if (!smp) {
   1b476:	4605      	mov	r5, r0
   1b478:	2800      	cmp	r0, #0
   1b47a:	f000 809d 	beq.w	1b5b8 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   1b47e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1b482:	f1b9 0f00 	cmp.w	r9, #0
   1b486:	d12d      	bne.n	1b4e4 <bt_smp_request_ltk+0x7e>
   1b488:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b48c:	4313      	orrs	r3, r2
   1b48e:	d129      	bne.n	1b4e4 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1b490:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   1b494:	2103      	movs	r1, #3
   1b496:	4640      	mov	r0, r8
   1b498:	f7ff fdd3 	bl	1b042 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1b49c:	b310      	cbz	r0, 1b4e4 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b49e:	2101      	movs	r1, #1
   1b4a0:	4640      	mov	r0, r8
   1b4a2:	f7ff fdce 	bl	1b042 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1b4a6:	4606      	mov	r6, r0
   1b4a8:	b1e0      	cbz	r0, 1b4e4 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1b4aa:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   1b4ae:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
		memcpy(ltk, smp->tk, enc_size);
   1b4b2:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   1b4b4:	429c      	cmp	r4, r3
   1b4b6:	bf28      	it	cs
   1b4b8:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1b4ba:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   1b4be:	4622      	mov	r2, r4
   1b4c0:	f7fd fea2 	bl	19208 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1b4c4:	2c0f      	cmp	r4, #15
   1b4c6:	d805      	bhi.n	1b4d4 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   1b4c8:	4649      	mov	r1, r9
   1b4ca:	f1c4 0210 	rsb	r2, r4, #16
   1b4ce:	1938      	adds	r0, r7, r4
   1b4d0:	f7fd fec5 	bl	1925e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b4d4:	2101      	movs	r1, #1
   1b4d6:	4640      	mov	r0, r8
   1b4d8:	f7ff fdcd 	bl	1b076 <atomic_set_bit>
}
   1b4dc:	4630      	mov	r0, r6
   1b4de:	b003      	add	sp, #12
   1b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1b4e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1b4e8:	b983      	cbnz	r3, 1b50c <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   1b4ea:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1b4ee:	4632      	mov	r2, r6
   1b4f0:	2020      	movs	r0, #32
   1b4f2:	7a21      	ldrb	r1, [r4, #8]
   1b4f4:	f7f1 f8e2 	bl	c6bc <bt_keys_find>
   1b4f8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1b4fc:	b930      	cbnz	r0, 1b50c <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1b4fe:	4632      	mov	r2, r6
   1b500:	2001      	movs	r0, #1
   1b502:	7a21      	ldrb	r1, [r4, #8]
   1b504:	f7f1 f8da 	bl	c6bc <bt_keys_find>
   1b508:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1b50c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1b510:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1b514:	b9ce      	cbnz	r6, 1b54a <bt_smp_request_ltk+0xe4>
   1b516:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b51a:	4313      	orrs	r3, r2
   1b51c:	d115      	bne.n	1b54a <bt_smp_request_ltk+0xe4>
   1b51e:	2800      	cmp	r0, #0
   1b520:	d03c      	beq.n	1b59c <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1b522:	89c3      	ldrh	r3, [r0, #14]
   1b524:	069a      	lsls	r2, r3, #26
   1b526:	d511      	bpl.n	1b54c <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   1b528:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1b52a:	f100 011a 	add.w	r1, r0, #26
   1b52e:	4622      	mov	r2, r4
   1b530:	4638      	mov	r0, r7
   1b532:	f7fd fe69 	bl	19208 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1b536:	2c0f      	cmp	r4, #15
   1b538:	d805      	bhi.n	1b546 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   1b53a:	4631      	mov	r1, r6
   1b53c:	f1c4 0210 	rsb	r2, r4, #16
   1b540:	1938      	adds	r0, r7, r4
   1b542:	f7fd fe8c 	bl	1925e <memset>
		return true;
   1b546:	2601      	movs	r6, #1
   1b548:	e7c8      	b.n	1b4dc <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1b54a:	b338      	cbz	r0, 1b59c <bt_smp_request_ltk+0x136>
   1b54c:	89c3      	ldrh	r3, [r0, #14]
   1b54e:	07db      	lsls	r3, r3, #31
   1b550:	d524      	bpl.n	1b59c <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1b552:	2208      	movs	r2, #8
   1b554:	4669      	mov	r1, sp
   1b556:	3040      	adds	r0, #64	; 0x40
   1b558:	f7fd fe46 	bl	191e8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1b55c:	b9f0      	cbnz	r0, 1b59c <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1b55e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1b562:	2202      	movs	r2, #2
   1b564:	a90a      	add	r1, sp, #40	; 0x28
   1b566:	3048      	adds	r0, #72	; 0x48
   1b568:	f7fd fe3e 	bl	191e8 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1b56c:	4606      	mov	r6, r0
   1b56e:	b9a8      	cbnz	r0, 1b59c <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   1b570:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1b574:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   1b576:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1b578:	314a      	adds	r1, #74	; 0x4a
   1b57a:	4622      	mov	r2, r4
   1b57c:	f7fd fe44 	bl	19208 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1b580:	2c0f      	cmp	r4, #15
   1b582:	d805      	bhi.n	1b590 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   1b584:	4631      	mov	r1, r6
   1b586:	f1c4 0210 	rsb	r2, r4, #16
   1b58a:	1938      	adds	r0, r7, r4
   1b58c:	f7fd fe67 	bl	1925e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b590:	2101      	movs	r1, #1
   1b592:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1b596:	f7ff fd6e 	bl	1b076 <atomic_set_bit>
		return true;
   1b59a:	e7d4      	b.n	1b546 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b59c:	210f      	movs	r1, #15
   1b59e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1b5a2:	f7ff fd4e 	bl	1b042 <atomic_test_bit>
   1b5a6:	b120      	cbz	r0, 1b5b2 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1b5a8:	2202      	movs	r2, #2
   1b5aa:	2106      	movs	r1, #6
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f7ec f899 	bl	76e4 <bt_conn_security_changed>
	smp_reset(smp);
   1b5b2:	4628      	mov	r0, r5
   1b5b4:	f7ff fdd5 	bl	1b162 <smp_reset>
	return false;
   1b5b8:	2600      	movs	r6, #0
   1b5ba:	e78f      	b.n	1b4dc <bt_smp_request_ltk+0x76>

0001b5bc <bt_smp_sign>:
   1b5bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b5c0:	4770      	bx	lr

0001b5c2 <bt_smp_start_security>:
{
   1b5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (conn->role) {
   1b5c4:	78c3      	ldrb	r3, [r0, #3]
{
   1b5c6:	4604      	mov	r4, r0
	switch (conn->role) {
   1b5c8:	2b00      	cmp	r3, #0
   1b5ca:	d15b      	bne.n	1b684 <bt_smp_start_security+0xc2>
		smp = smp_chan_get(conn);
   1b5cc:	f7ef fc1e 	bl	ae0c <smp_chan_get>
		if (!smp) {
   1b5d0:	4605      	mov	r5, r0
   1b5d2:	2800      	cmp	r0, #0
   1b5d4:	d059      	beq.n	1b68a <bt_smp_start_security+0xc8>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1b5d6:	210b      	movs	r1, #11
   1b5d8:	1d20      	adds	r0, r4, #4
   1b5da:	f7ff fd32 	bl	1b042 <atomic_test_bit>
   1b5de:	bb00      	cbnz	r0, 1b622 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   1b5e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1b5e4:	b983      	cbnz	r3, 1b608 <bt_smp_start_security+0x46>
						     conn->id, &conn->le.dst);
   1b5e6:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1b5ea:	4632      	mov	r2, r6
   1b5ec:	2020      	movs	r0, #32
   1b5ee:	7a21      	ldrb	r1, [r4, #8]
   1b5f0:	f7f1 f864 	bl	c6bc <bt_keys_find>
   1b5f4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1b5f8:	b930      	cbnz	r0, 1b608 <bt_smp_start_security+0x46>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1b5fa:	4632      	mov	r2, r6
   1b5fc:	2004      	movs	r0, #4
   1b5fe:	7a21      	ldrb	r1, [r4, #8]
   1b600:	f7f1 f85c 	bl	c6bc <bt_keys_find>
   1b604:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   1b608:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1b60c:	b14b      	cbz	r3, 1b622 <bt_smp_start_security+0x60>
   1b60e:	89da      	ldrh	r2, [r3, #14]
   1b610:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b614:	b12a      	cbz	r2, 1b622 <bt_smp_start_security+0x60>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1b616:	7aa2      	ldrb	r2, [r4, #10]
   1b618:	2a02      	cmp	r2, #2
   1b61a:	d908      	bls.n	1b62e <bt_smp_start_security+0x6c>
   1b61c:	7b5b      	ldrb	r3, [r3, #13]
   1b61e:	07db      	lsls	r3, r3, #31
   1b620:	d405      	bmi.n	1b62e <bt_smp_start_security+0x6c>
			return smp_send_pairing_req(conn);
   1b622:	4620      	mov	r0, r4
}
   1b624:	b002      	add	sp, #8
   1b626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_req(conn);
   1b62a:	f7ef be8d 	b.w	b348 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b62e:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
   1b632:	2103      	movs	r1, #3
   1b634:	4630      	mov	r0, r6
   1b636:	f7ff fd04 	bl	1b042 <atomic_test_bit>
   1b63a:	b120      	cbz	r0, 1b646 <bt_smp_start_security+0x84>
			return -EBUSY;
   1b63c:	f06f 040f 	mvn.w	r4, #15
}
   1b640:	4620      	mov	r0, r4
   1b642:	b002      	add	sp, #8
   1b644:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b646:	2101      	movs	r1, #1
   1b648:	4630      	mov	r0, r6
   1b64a:	f7ff fcfa 	bl	1b042 <atomic_test_bit>
   1b64e:	2800      	cmp	r0, #0
   1b650:	d1f4      	bne.n	1b63c <bt_smp_start_security+0x7a>
						  conn->le.keys->ltk.rand,
   1b652:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   1b656:	4620      	mov	r0, r4
   1b658:	7b0b      	ldrb	r3, [r1, #12]
   1b65a:	f101 0218 	add.w	r2, r1, #24
   1b65e:	9300      	str	r3, [sp, #0]
   1b660:	f101 031a 	add.w	r3, r1, #26
   1b664:	3110      	adds	r1, #16
   1b666:	f7fe fa6a 	bl	19b3e <bt_conn_le_start_encryption>
		if (err) {
   1b66a:	4604      	mov	r4, r0
   1b66c:	2800      	cmp	r0, #0
   1b66e:	d1e7      	bne.n	1b640 <bt_smp_start_security+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1b670:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   1b674:	210b      	movs	r1, #11
   1b676:	f7ff fcfe 	bl	1b076 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b67a:	2101      	movs	r1, #1
   1b67c:	4630      	mov	r0, r6
   1b67e:	f7ff fcfa 	bl	1b076 <atomic_set_bit>
		return 0;
   1b682:	e7dd      	b.n	1b640 <bt_smp_start_security+0x7e>
		return -EINVAL;
   1b684:	f06f 0415 	mvn.w	r4, #21
   1b688:	e7da      	b.n	1b640 <bt_smp_start_security+0x7e>
			return -ENOTCONN;
   1b68a:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1b68e:	e7d7      	b.n	1b640 <bt_smp_start_security+0x7e>

0001b690 <bt_keys_get_type>:
{
   1b690:	b570      	push	{r4, r5, r6, lr}
   1b692:	4604      	mov	r4, r0
   1b694:	460d      	mov	r5, r1
   1b696:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1b698:	f7f1 f810 	bl	c6bc <bt_keys_find>
	if (keys) {
   1b69c:	b938      	cbnz	r0, 1b6ae <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1b69e:	4631      	mov	r1, r6
   1b6a0:	4628      	mov	r0, r5
   1b6a2:	f7f0 ffd5 	bl	c650 <bt_keys_get_addr>
	if (!keys) {
   1b6a6:	b110      	cbz	r0, 1b6ae <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1b6a8:	89c3      	ldrh	r3, [r0, #14]
   1b6aa:	431c      	orrs	r4, r3
   1b6ac:	81c4      	strh	r4, [r0, #14]
}
   1b6ae:	bd70      	pop	{r4, r5, r6, pc}

0001b6b0 <bt_keys_add_type>:
	keys->keys |= type;
   1b6b0:	89c3      	ldrh	r3, [r0, #14]
   1b6b2:	4319      	orrs	r1, r3
   1b6b4:	81c1      	strh	r1, [r0, #14]
}
   1b6b6:	4770      	bx	lr

0001b6b8 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1b6b8:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1b6ba:	7a03      	ldrb	r3, [r0, #8]
{
   1b6bc:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b6be:	075b      	lsls	r3, r3, #29
   1b6c0:	d501      	bpl.n	1b6c6 <bt_keys_clear+0xe>
		bt_id_del(keys);
   1b6c2:	f7ea fbe7 	bl	5e94 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1b6c6:	4620      	mov	r0, r4
}
   1b6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1b6cc:	225c      	movs	r2, #92	; 0x5c
   1b6ce:	2100      	movs	r1, #0
   1b6d0:	f7fd bdc5 	b.w	1925e <memset>

0001b6d4 <fixed_data_unref>:
}
   1b6d4:	4770      	bx	lr

0001b6d6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b6d6:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1b6d8:	6849      	ldr	r1, [r1, #4]
   1b6da:	6809      	ldr	r1, [r1, #0]
   1b6dc:	f7f1 b87e 	b.w	c7dc <net_buf_alloc_len>

0001b6e0 <net_buf_get>:
{
   1b6e0:	b570      	push	{r4, r5, r6, lr}
   1b6e2:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1b6e4:	f7fa fdcc 	bl	16280 <z_impl_k_queue_get>
	if (!buf) {
   1b6e8:	4605      	mov	r5, r0
   1b6ea:	b128      	cbz	r0, 1b6f8 <net_buf_get+0x18>
   1b6ec:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b6ee:	7963      	ldrb	r3, [r4, #5]
   1b6f0:	f013 0301 	ands.w	r3, r3, #1
   1b6f4:	d102      	bne.n	1b6fc <net_buf_get+0x1c>
	frag->frags = NULL;
   1b6f6:	6023      	str	r3, [r4, #0]
}
   1b6f8:	4628      	mov	r0, r5
   1b6fa:	bd70      	pop	{r4, r5, r6, pc}
   1b6fc:	2300      	movs	r3, #0
   1b6fe:	2200      	movs	r2, #0
   1b700:	4630      	mov	r0, r6
   1b702:	f7fa fdbd 	bl	16280 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1b706:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b708:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1b70a:	f023 0301 	bic.w	r3, r3, #1
   1b70e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b710:	4604      	mov	r4, r0
   1b712:	e7ec      	b.n	1b6ee <net_buf_get+0xe>

0001b714 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1b714:	b292      	uxth	r2, r2
	buf->__buf = data;
   1b716:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1b718:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1b71a:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1b71c:	8082      	strh	r2, [r0, #4]
}
   1b71e:	4770      	bx	lr

0001b720 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1b720:	6883      	ldr	r3, [r0, #8]
   1b722:	440b      	add	r3, r1
   1b724:	6003      	str	r3, [r0, #0]
}
   1b726:	4770      	bx	lr

0001b728 <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b728:	460a      	mov	r2, r1
{
   1b72a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b72c:	6814      	ldr	r4, [r2, #0]
   1b72e:	b914      	cbnz	r4, 1b736 <net_buf_put+0xe>
}
   1b730:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1b732:	f007 b82f 	b.w	22794 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1b736:	7953      	ldrb	r3, [r2, #5]
   1b738:	f043 0301 	orr.w	r3, r3, #1
   1b73c:	7153      	strb	r3, [r2, #5]
   1b73e:	4622      	mov	r2, r4
   1b740:	e7f4      	b.n	1b72c <net_buf_put+0x4>

0001b742 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b742:	7902      	ldrb	r2, [r0, #4]
   1b744:	3201      	adds	r2, #1
   1b746:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1b748:	4770      	bx	lr

0001b74a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b74a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1b74c:	4618      	mov	r0, r3
   1b74e:	681b      	ldr	r3, [r3, #0]
   1b750:	2b00      	cmp	r3, #0
   1b752:	d1fb      	bne.n	1b74c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1b754:	4770      	bx	lr

0001b756 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1b756:	6802      	ldr	r2, [r0, #0]
{
   1b758:	b510      	push	{r4, lr}
	if (parent->frags) {
   1b75a:	b12a      	cbz	r2, 1b768 <net_buf_frag_insert+0x12>
   1b75c:	460b      	mov	r3, r1
	while (buf->frags) {
   1b75e:	461c      	mov	r4, r3
   1b760:	681b      	ldr	r3, [r3, #0]
   1b762:	2b00      	cmp	r3, #0
   1b764:	d1fb      	bne.n	1b75e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b766:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b768:	6001      	str	r1, [r0, #0]
}
   1b76a:	bd10      	pop	{r4, pc}

0001b76c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b76c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1b76e:	4604      	mov	r4, r0
   1b770:	b920      	cbnz	r0, 1b77c <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   1b772:	4608      	mov	r0, r1
	buf->ref++;
   1b774:	790b      	ldrb	r3, [r1, #4]
   1b776:	3301      	adds	r3, #1
   1b778:	710b      	strb	r3, [r1, #4]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b77a:	bd10      	pop	{r4, pc}
   1b77c:	4603      	mov	r3, r0
	while (buf->frags) {
   1b77e:	4618      	mov	r0, r3
   1b780:	681b      	ldr	r3, [r3, #0]
   1b782:	2b00      	cmp	r3, #0
   1b784:	d1fb      	bne.n	1b77e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b786:	f7ff ffe6 	bl	1b756 <net_buf_frag_insert>
   1b78a:	4620      	mov	r0, r4
   1b78c:	e7f5      	b.n	1b77a <net_buf_frag_add+0xe>

0001b78e <net_buf_simple_add>:
	return buf->data + buf->len;
   1b78e:	8883      	ldrh	r3, [r0, #4]
   1b790:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1b792:	4419      	add	r1, r3
   1b794:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1b796:	18d0      	adds	r0, r2, r3
   1b798:	4770      	bx	lr

0001b79a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1b79a:	b430      	push	{r4, r5}
   1b79c:	8884      	ldrh	r4, [r0, #4]
   1b79e:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1b7a0:	18a3      	adds	r3, r4, r2
   1b7a2:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1b7a4:	1928      	adds	r0, r5, r4
}
   1b7a6:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1b7a8:	f7fd bd2e 	b.w	19208 <memcpy>

0001b7ac <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1b7ac:	b510      	push	{r4, lr}
   1b7ae:	8883      	ldrh	r3, [r0, #4]
   1b7b0:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1b7b2:	1c5c      	adds	r4, r3, #1
   1b7b4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1b7b6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1b7b8:	18d0      	adds	r0, r2, r3
   1b7ba:	bd10      	pop	{r4, pc}

0001b7bc <net_buf_simple_add_le16>:
   1b7bc:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   1b7be:	b530      	push	{r4, r5, lr}
   1b7c0:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1b7c2:	1c9d      	adds	r5, r3, #2
   1b7c4:	8085      	strh	r5, [r0, #4]
   1b7c6:	18d4      	adds	r4, r2, r3
	dst[0] = val;
   1b7c8:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   1b7ca:	0a09      	lsrs	r1, r1, #8
   1b7cc:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1b7ce:	bd30      	pop	{r4, r5, pc}

0001b7d0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b7d0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1b7d2:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1b7d4:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b7d6:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b7d8:	4411      	add	r1, r2
	buf->data -= len;
   1b7da:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b7dc:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1b7de:	4770      	bx	lr

0001b7e0 <net_buf_simple_push_u8>:
	buf->data -= len;
   1b7e0:	6802      	ldr	r2, [r0, #0]
   1b7e2:	1e53      	subs	r3, r2, #1
   1b7e4:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1b7e6:	8883      	ldrh	r3, [r0, #4]
   1b7e8:	3301      	adds	r3, #1
   1b7ea:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1b7ec:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1b7f0:	4770      	bx	lr

0001b7f2 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1b7f2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1b7f4:	8882      	ldrh	r2, [r0, #4]
   1b7f6:	1a52      	subs	r2, r2, r1
   1b7f8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b7fa:	6800      	ldr	r0, [r0, #0]
   1b7fc:	4408      	add	r0, r1
   1b7fe:	6018      	str	r0, [r3, #0]
}
   1b800:	4770      	bx	lr

0001b802 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1b802:	4603      	mov	r3, r0
	void *data = buf->data;
   1b804:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1b806:	889a      	ldrh	r2, [r3, #4]
   1b808:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b80a:	4401      	add	r1, r0
	buf->len -= len;
   1b80c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b80e:	6019      	str	r1, [r3, #0]

	return data;
}
   1b810:	4770      	bx	lr

0001b812 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1b812:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1b814:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1b816:	2101      	movs	r1, #1
	val = buf->data[0];
   1b818:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1b81a:	f7ff ffea 	bl	1b7f2 <net_buf_simple_pull>

	return val;
}
   1b81e:	4620      	mov	r0, r4
   1b820:	bd10      	pop	{r4, pc}

0001b822 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1b822:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1b824:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1b826:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1b828:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1b82a:	f7ff ffe2 	bl	1b7f2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1b82e:	4620      	mov	r0, r4
   1b830:	bd10      	pop	{r4, pc}

0001b832 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b832:	6802      	ldr	r2, [r0, #0]
   1b834:	6880      	ldr	r0, [r0, #8]
}
   1b836:	1a10      	subs	r0, r2, r0
   1b838:	4770      	bx	lr

0001b83a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1b83a:	8883      	ldrh	r3, [r0, #4]
   1b83c:	88c2      	ldrh	r2, [r0, #6]
   1b83e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1b840:	6803      	ldr	r3, [r0, #0]
   1b842:	6880      	ldr	r0, [r0, #8]
   1b844:	1a18      	subs	r0, r3, r0
}
   1b846:	1a10      	subs	r0, r2, r0
   1b848:	4770      	bx	lr

0001b84a <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1b84a:	b570      	push	{r4, r5, r6, lr}
   1b84c:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b84e:	6801      	ldr	r1, [r0, #0]
{
   1b850:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b852:	b189      	cbz	r1, 1b878 <gpio_fire_callbacks+0x2e>
	return node->next;
   1b854:	680c      	ldr	r4, [r1, #0]
   1b856:	2c00      	cmp	r4, #0
   1b858:	bf38      	it	cc
   1b85a:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1b85c:	688a      	ldr	r2, [r1, #8]
   1b85e:	402a      	ands	r2, r5
   1b860:	d002      	beq.n	1b868 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b862:	4630      	mov	r0, r6
   1b864:	684b      	ldr	r3, [r1, #4]
   1b866:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b868:	b134      	cbz	r4, 1b878 <gpio_fire_callbacks+0x2e>
   1b86a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b86c:	4621      	mov	r1, r4
   1b86e:	2b00      	cmp	r3, #0
   1b870:	bf38      	it	cc
   1b872:	2300      	movcc	r3, #0
   1b874:	461c      	mov	r4, r3
   1b876:	e7f1      	b.n	1b85c <gpio_fire_callbacks+0x12>
		}
	}
}
   1b878:	bd70      	pop	{r4, r5, r6, pc}

0001b87a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b87a:	6843      	ldr	r3, [r0, #4]
}
   1b87c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b87e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1b880:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1b882:	600b      	str	r3, [r1, #0]
}
   1b884:	4770      	bx	lr

0001b886 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b886:	6843      	ldr	r3, [r0, #4]
   1b888:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1b88a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1b88c:	4042      	eors	r2, r0
   1b88e:	400a      	ands	r2, r1
   1b890:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1b892:	605a      	str	r2, [r3, #4]
}
   1b894:	2000      	movs	r0, #0
   1b896:	4770      	bx	lr

0001b898 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b898:	6843      	ldr	r3, [r0, #4]
}
   1b89a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b89c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1b89e:	6099      	str	r1, [r3, #8]
}
   1b8a0:	4770      	bx	lr

0001b8a2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b8a2:	6843      	ldr	r3, [r0, #4]
}
   1b8a4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b8a6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1b8a8:	60d9      	str	r1, [r3, #12]
}
   1b8aa:	4770      	bx	lr

0001b8ac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b8ac:	6843      	ldr	r3, [r0, #4]
}
   1b8ae:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b8b0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b8b2:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b8b4:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b8b6:	6053      	str	r3, [r2, #4]
}
   1b8b8:	4770      	bx	lr

0001b8ba <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b8ba:	68c3      	ldr	r3, [r0, #12]
{
   1b8bc:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1b8be:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1b8c0:	b158      	cbz	r0, 1b8da <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b8c2:	2400      	movs	r4, #0
   1b8c4:	4281      	cmp	r1, r0
   1b8c6:	d113      	bne.n	1b8f0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1b8c8:	6808      	ldr	r0, [r1, #0]
   1b8ca:	b95c      	cbnz	r4, 1b8e4 <gpio_nrfx_manage_callback+0x2a>
   1b8cc:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1b8ce:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b8d0:	42a1      	cmp	r1, r4
   1b8d2:	d100      	bne.n	1b8d6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1b8d4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1b8d6:	2000      	movs	r0, #0
   1b8d8:	6008      	str	r0, [r1, #0]
	if (set) {
   1b8da:	b972      	cbnz	r2, 1b8fa <gpio_nrfx_manage_callback+0x40>
	return 0;
   1b8dc:	2000      	movs	r0, #0
}
   1b8de:	bd30      	pop	{r4, r5, pc}
   1b8e0:	4628      	mov	r0, r5
   1b8e2:	e7ef      	b.n	1b8c4 <gpio_nrfx_manage_callback+0xa>
   1b8e4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b8e6:	6898      	ldr	r0, [r3, #8]
   1b8e8:	4281      	cmp	r1, r0
	list->tail = node;
   1b8ea:	bf08      	it	eq
   1b8ec:	609c      	streq	r4, [r3, #8]
}
   1b8ee:	e7f2      	b.n	1b8d6 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b8f0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b8f2:	4604      	mov	r4, r0
   1b8f4:	2d00      	cmp	r5, #0
   1b8f6:	d1f3      	bne.n	1b8e0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1b8f8:	b13a      	cbz	r2, 1b90a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1b8fa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b8fc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b8fe:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1b900:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b902:	2800      	cmp	r0, #0
   1b904:	d1ea      	bne.n	1b8dc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1b906:	6099      	str	r1, [r3, #8]
}
   1b908:	e7e9      	b.n	1b8de <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1b90a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b90e:	e7e6      	b.n	1b8de <gpio_nrfx_manage_callback+0x24>

0001b910 <check_level_trigger_pins>:
{
   1b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1b914:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1b916:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1b918:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1b91a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1b91e:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1b920:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1b924:	430a      	orrs	r2, r1
   1b926:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1b92a:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1b92e:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1b930:	6915      	ldr	r5, [r2, #16]
   1b932:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1b934:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1b938:	b914      	cbnz	r4, 1b940 <check_level_trigger_pins+0x30>
}
   1b93a:	4628      	mov	r0, r5
   1b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1b940:	4234      	tst	r4, r6
   1b942:	d00a      	beq.n	1b95a <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b944:	f898 3008 	ldrb.w	r3, [r8, #8]
   1b948:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1b94c:	2100      	movs	r1, #0
   1b94e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1b952:	f7f1 f87b 	bl	ca4c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1b956:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1b95a:	3701      	adds	r7, #1
		bit <<= 1;
   1b95c:	0076      	lsls	r6, r6, #1
   1b95e:	e7eb      	b.n	1b938 <check_level_trigger_pins+0x28>

0001b960 <cfg_level_pins>:
{
   1b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1b964:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1b966:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1b968:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1b96a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1b96e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1b970:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1b974:	4313      	orrs	r3, r2
   1b976:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1b97a:	b90c      	cbnz	r4, 1b980 <cfg_level_pins+0x20>
}
   1b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1b980:	4226      	tst	r6, r4
   1b982:	d010      	beq.n	1b9a6 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b984:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b986:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b98a:	40e9      	lsrs	r1, r5
   1b98c:	f001 0101 	and.w	r1, r1, #1
   1b990:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b994:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1b998:	b2c9      	uxtb	r1, r1
   1b99a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1b99e:	f7f1 f855 	bl	ca4c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1b9a2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1b9a6:	3501      	adds	r5, #1
		bit <<= 1;
   1b9a8:	0076      	lsls	r6, r6, #1
   1b9aa:	e7e6      	b.n	1b97a <cfg_level_pins+0x1a>

0001b9ac <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1b9ac:	6883      	ldr	r3, [r0, #8]
   1b9ae:	689b      	ldr	r3, [r3, #8]
   1b9b0:	4718      	bx	r3

0001b9b2 <vipm_nrf_max_id_val_get>:
}
   1b9b2:	2000      	movs	r0, #0
   1b9b4:	4770      	bx	lr

0001b9b6 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1b9b6:	b508      	push	{r3, lr}
   1b9b8:	b139      	cbz	r1, 1b9ca <vipm_nrf_1_set_enabled+0x14>
   1b9ba:	202a      	movs	r0, #42	; 0x2a
   1b9bc:	f7e8 fb5c 	bl	4078 <arch_irq_enable>
   1b9c0:	2001      	movs	r0, #1
   1b9c2:	f7f2 fa7d 	bl	dec0 <nrfx_ipc_receive_event_enable>
   1b9c6:	2000      	movs	r0, #0
   1b9c8:	bd08      	pop	{r3, pc}
   1b9ca:	2001      	movs	r0, #1
   1b9cc:	f7f2 fa80 	bl	ded0 <nrfx_ipc_receive_event_disable>
   1b9d0:	e7f9      	b.n	1b9c6 <vipm_nrf_1_set_enabled+0x10>

0001b9d2 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b9d2:	2301      	movs	r3, #1
   1b9d4:	fa03 f101 	lsl.w	r1, r3, r1
   1b9d8:	68c3      	ldr	r3, [r0, #12]
   1b9da:	681b      	ldr	r3, [r3, #0]
   1b9dc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b9de:	bf18      	it	ne
   1b9e0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b9e4:	b112      	cbz	r2, 1b9ec <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1b9e6:	6883      	ldr	r3, [r0, #8]
   1b9e8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b9ea:	4718      	bx	r3
   1b9ec:	6883      	ldr	r3, [r0, #8]
   1b9ee:	691b      	ldr	r3, [r3, #16]
   1b9f0:	e7fb      	b.n	1b9ea <gpio_pin_set+0x18>

0001b9f2 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b9f2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b9f4:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b9f6:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b9f8:	b1fd      	cbz	r5, 1ba3a <_spi_context_cs_control.isra.0+0x48>
   1b9fa:	68ab      	ldr	r3, [r5, #8]
   1b9fc:	b1eb      	cbz	r3, 1ba3a <_spi_context_cs_control.isra.0+0x48>
   1b9fe:	6818      	ldr	r0, [r3, #0]
   1ba00:	b1d8      	cbz	r0, 1ba3a <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   1ba02:	b151      	cbz	r1, 1ba1a <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1ba04:	7a19      	ldrb	r1, [r3, #8]
   1ba06:	2201      	movs	r2, #1
   1ba08:	f7ff ffe3 	bl	1b9d2 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1ba0c:	6823      	ldr	r3, [r4, #0]
   1ba0e:	689b      	ldr	r3, [r3, #8]
   1ba10:	6858      	ldr	r0, [r3, #4]
}
   1ba12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1ba16:	f007 b83b 	b.w	22a90 <z_impl_k_busy_wait>
			if (!force_off &&
   1ba1a:	b912      	cbnz	r2, 1ba22 <_spi_context_cs_control.isra.0+0x30>
   1ba1c:	88aa      	ldrh	r2, [r5, #4]
   1ba1e:	0492      	lsls	r2, r2, #18
   1ba20:	d40b      	bmi.n	1ba3a <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1ba22:	6858      	ldr	r0, [r3, #4]
   1ba24:	f007 f834 	bl	22a90 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1ba28:	6823      	ldr	r3, [r4, #0]
   1ba2a:	2200      	movs	r2, #0
   1ba2c:	689b      	ldr	r3, [r3, #8]
   1ba2e:	7a19      	ldrb	r1, [r3, #8]
   1ba30:	6818      	ldr	r0, [r3, #0]
}
   1ba32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1ba36:	f7ff bfcc 	b.w	1b9d2 <gpio_pin_set>
}
   1ba3a:	bd38      	pop	{r3, r4, r5, pc}

0001ba3c <spi_context_unlock_unconditionally>:
{
   1ba3c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1ba3e:	2201      	movs	r2, #1
   1ba40:	2100      	movs	r1, #0
{
   1ba42:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1ba44:	f7ff ffd5 	bl	1b9f2 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   1ba48:	6923      	ldr	r3, [r4, #16]
   1ba4a:	b933      	cbnz	r3, 1ba5a <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1ba4c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1ba4e:	f104 0008 	add.w	r0, r4, #8
}
   1ba52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba56:	f7fa bfe5 	b.w	16a24 <z_impl_k_sem_give>
   1ba5a:	bd10      	pop	{r4, pc}

0001ba5c <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1ba5c:	68c0      	ldr	r0, [r0, #12]
{
   1ba5e:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1ba60:	6803      	ldr	r3, [r0, #0]
   1ba62:	428b      	cmp	r3, r1
   1ba64:	d106      	bne.n	1ba74 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   1ba66:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   1ba6a:	b934      	cbnz	r4, 1ba7a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   1ba6c:	f7ff ffe6 	bl	1ba3c <spi_context_unlock_unconditionally>
	return 0;
   1ba70:	4620      	mov	r0, r4
}
   1ba72:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1ba74:	f06f 0015 	mvn.w	r0, #21
   1ba78:	e7fb      	b.n	1ba72 <spi_nrfx_release+0x16>
		return -EBUSY;
   1ba7a:	f06f 000f 	mvn.w	r0, #15
   1ba7e:	e7f8      	b.n	1ba72 <spi_nrfx_release+0x16>

0001ba80 <ft5336_disable_callback>:
	k_timer_stop(&data->timer);
   1ba80:	68c0      	ldr	r0, [r0, #12]
{
   1ba82:	b508      	push	{r3, lr}
	k_timer_stop(&data->timer);
   1ba84:	3018      	adds	r0, #24
	z_impl_k_timer_stop(timer);
   1ba86:	f007 f8fd 	bl	22c84 <z_impl_k_timer_stop>
}
   1ba8a:	2000      	movs	r0, #0
   1ba8c:	bd08      	pop	{r3, pc}

0001ba8e <ft5336_enable_callback>:
{
   1ba8e:	b507      	push	{r0, r1, r2, lr}
	k_timer_start(&data->timer, K_MSEC(CONFIG_KSCAN_FT5336_PERIOD),
   1ba90:	68c0      	ldr	r0, [r0, #12]
   1ba92:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ba96:	2300      	movs	r3, #0
   1ba98:	3018      	adds	r0, #24
	z_impl_k_timer_start(timer, duration, period);
   1ba9a:	e9cd 2300 	strd	r2, r3, [sp]
   1ba9e:	f7fb fb41 	bl	17124 <z_impl_k_timer_start>
}
   1baa2:	2000      	movs	r0, #0
   1baa4:	b003      	add	sp, #12
   1baa6:	f85d fb04 	ldr.w	pc, [sp], #4

0001baaa <ft5336_work_handler>:
{
   1baaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1baae:	2602      	movs	r6, #2
	ft5336_process(data->dev);
   1bab0:	f850 4c0c 	ldr.w	r4, [r0, #-12]
{
   1bab4:	b088      	sub	sp, #32
	const struct ft5336_config *config = dev->config;
   1bab6:	f8d4 9004 	ldr.w	r9, [r4, #4]
	struct ft5336_data *data = dev->data;
   1baba:	68e5      	ldr	r5, [r4, #12]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1babc:	eb0d 0206 	add.w	r2, sp, r6
	r = i2c_reg_read_byte(data->i2c, config->i2c_address, REG_TD_STATUS,
   1bac0:	6868      	ldr	r0, [r5, #4]
   1bac2:	f899 3004 	ldrb.w	r3, [r9, #4]
	msg[0].len = num_write;
   1bac6:	2701      	movs	r7, #1
	msg[0].buf = (uint8_t *)write_buf;
   1bac8:	9202      	str	r2, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   1baca:	2200      	movs	r2, #0

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1bacc:	f04f 0807 	mov.w	r8, #7
	msg[0].flags = I2C_MSG_WRITE;
   1bad0:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1bad4:	eb0d 0207 	add.w	r2, sp, r7
	msg[1].len = num_read;
   1bad8:	e9cd 2705 	strd	r2, r7, [sp, #20]
   1badc:	f88d 6002 	strb.w	r6, [sp, #2]
	msg[0].len = num_write;
   1bae0:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1bae2:	f88d 801c 	strb.w	r8, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   1bae6:	6882      	ldr	r2, [r0, #8]
   1bae8:	a902      	add	r1, sp, #8
   1baea:	f8d2 a004 	ldr.w	sl, [r2, #4]
   1baee:	4632      	mov	r2, r6
   1baf0:	47d0      	blx	sl
	if (r < 0) {
   1baf2:	2800      	cmp	r0, #0
   1baf4:	db37      	blt.n	1bb66 <ft5336_work_handler+0xbc>
	points = (points >> TOUCH_POINTS_POS) & TOUCH_POINTS_MSK;
   1baf6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1bafa:	f003 020f 	and.w	r2, r3, #15
	if (points != 0U && points != 1U) {
   1bafe:	f013 010e 	ands.w	r1, r3, #14
	points = (points >> TOUCH_POINTS_POS) & TOUCH_POINTS_MSK;
   1bb02:	f88d 2001 	strb.w	r2, [sp, #1]
	if (points != 0U && points != 1U) {
   1bb06:	d12e      	bne.n	1bb66 <ft5336_work_handler+0xbc>
	r = i2c_burst_read(data->i2c, config->i2c_address, REG_P1_XH, coords,
   1bb08:	2203      	movs	r2, #3
   1bb0a:	f88d 2003 	strb.w	r2, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
   1bb0e:	446a      	add	r2, sp
   1bb10:	6868      	ldr	r0, [r5, #4]
   1bb12:	f899 3004 	ldrb.w	r3, [r9, #4]
	msg[0].len = num_write;
   1bb16:	e9cd 2702 	strd	r2, r7, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1bb1a:	aa01      	add	r2, sp, #4
   1bb1c:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1bb1e:	2204      	movs	r2, #4
	msg[0].flags = I2C_MSG_WRITE;
   1bb20:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].len = num_read;
   1bb24:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1bb26:	f88d 801c 	strb.w	r8, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   1bb2a:	6882      	ldr	r2, [r0, #8]
   1bb2c:	a902      	add	r1, sp, #8
   1bb2e:	6857      	ldr	r7, [r2, #4]
   1bb30:	4632      	mov	r2, r6
   1bb32:	47b8      	blx	r7
	if (r < 0) {
   1bb34:	2800      	cmp	r0, #0
   1bb36:	db16      	blt.n	1bb66 <ft5336_work_handler+0xbc>
	event = (coords[0] >> EVENT_POS) & EVENT_MSK;
   1bb38:	f89d 1004 	ldrb.w	r1, [sp, #4]
	col = ((coords[2] & POSITION_H_MSK) << 8U) | coords[3];
   1bb3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
	row = ((coords[0] & POSITION_H_MSK) << 8U) | coords[1];
   1bb40:	f89d 0005 	ldrb.w	r0, [sp, #5]
	pressed = (event == EVENT_PRESS_DOWN) || (event == EVENT_CONTACT);
   1bb44:	f3c1 1380 	ubfx	r3, r1, #6, #1
	col = ((coords[2] & POSITION_H_MSK) << 8U) | coords[3];
   1bb48:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1bb4c:	0212      	lsls	r2, r2, #8
	row = ((coords[0] & POSITION_H_MSK) << 8U) | coords[1];
   1bb4e:	0209      	lsls	r1, r1, #8
	col = ((coords[2] & POSITION_H_MSK) << 8U) | coords[3];
   1bb50:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
	row = ((coords[0] & POSITION_H_MSK) << 8U) | coords[1];
   1bb54:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	data->callback(dev, row, col, pressed);
   1bb58:	4301      	orrs	r1, r0
   1bb5a:	68ad      	ldr	r5, [r5, #8]
   1bb5c:	4620      	mov	r0, r4
   1bb5e:	f083 0301 	eor.w	r3, r3, #1
   1bb62:	4332      	orrs	r2, r6
   1bb64:	47a8      	blx	r5
}
   1bb66:	b008      	add	sp, #32
   1bb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001bb6c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1bb6c:	6843      	ldr	r3, [r0, #4]
   1bb6e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1bb70:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1bb74:	05d2      	lsls	r2, r2, #23
   1bb76:	d518      	bpl.n	1bbaa <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bb78:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1bb7c:	b1aa      	cbz	r2, 1bbaa <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1bb7e:	f04f 0120 	mov.w	r1, #32
   1bb82:	f3ef 8211 	mrs	r2, BASEPRI
   1bb86:	f381 8811 	msr	BASEPRI, r1
   1bb8a:	f3bf 8f6f 	isb	sy
   1bb8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1bb92:	b131      	cbz	r1, 1bba2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb94:	2100      	movs	r1, #0
   1bb96:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1bb9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb9e:	2101      	movs	r1, #1
   1bba0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1bba2:	f382 8811 	msr	BASEPRI, r2
   1bba6:	f3bf 8f6f 	isb	sy
}
   1bbaa:	4770      	bx	lr

0001bbac <uarte_nrfx_config_get>:
{
   1bbac:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1bbae:	68c2      	ldr	r2, [r0, #12]
   1bbb0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1bbb4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1bbb8:	2000      	movs	r0, #0
   1bbba:	4770      	bx	lr

0001bbbc <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1bbbc:	6843      	ldr	r3, [r0, #4]
   1bbbe:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1bbc0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1bbc4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1bbc8:	4770      	bx	lr

0001bbca <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1bbca:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1bbcc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbce:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1bbd2:	b938      	cbnz	r0, 1bbe4 <is_tx_ready+0x1a>
   1bbd4:	7992      	ldrb	r2, [r2, #6]
   1bbd6:	b932      	cbnz	r2, 1bbe6 <is_tx_ready+0x1c>
   1bbd8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1bbdc:	3800      	subs	r0, #0
   1bbde:	bf18      	it	ne
   1bbe0:	2001      	movne	r0, #1
   1bbe2:	4770      	bx	lr
   1bbe4:	2001      	movs	r0, #1
}
   1bbe6:	4770      	bx	lr

0001bbe8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1bbe8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1bbea:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1bbec:	681b      	ldr	r3, [r3, #0]
   1bbee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1bbf2:	b148      	cbz	r0, 1bc08 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbf4:	2000      	movs	r0, #0
	*c = data->rx_data;
   1bbf6:	7c52      	ldrb	r2, [r2, #17]
   1bbf8:	700a      	strb	r2, [r1, #0]
   1bbfa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1bbfe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc02:	2201      	movs	r2, #1
   1bc04:	601a      	str	r2, [r3, #0]
	return 0;
   1bc06:	4770      	bx	lr
		return -1;
   1bc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1bc0c:	4770      	bx	lr

0001bc0e <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   1bc0e:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1bc10:	f7e7 ff2e 	bl	3a70 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1bc14:	f7e7 fff2 	bl	3bfc <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   1bc18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1bc1c:	f7fb bb82 	b.w	17324 <nrf_cc3xx_platform_init_no_rng>

0001bc20 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1bc20:	4700      	bx	r0

0001bc22 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1bc22:	f006 bf35 	b.w	22a90 <z_impl_k_busy_wait>

0001bc26 <nrfx_clock_enable>:
{
   1bc26:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1bc28:	2005      	movs	r0, #5
   1bc2a:	f7e8 fa35 	bl	4098 <arch_irq_is_enabled>
   1bc2e:	b910      	cbnz	r0, 1bc36 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1bc30:	2005      	movs	r0, #5
   1bc32:	f7e8 fa21 	bl	4078 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1bc36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1bc3a:	2201      	movs	r2, #1
   1bc3c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1bc40:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   1bc44:	bd08      	pop	{r3, pc}

0001bc46 <nrf_gpio_cfg_output>:
{
   1bc46:	b507      	push	{r0, r1, r2, lr}
   1bc48:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bc4a:	a801      	add	r0, sp, #4
   1bc4c:	f7f2 f968 	bl	df20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bc50:	2203      	movs	r2, #3
   1bc52:	9b01      	ldr	r3, [sp, #4]
   1bc54:	3380      	adds	r3, #128	; 0x80
   1bc56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1bc5a:	b003      	add	sp, #12
   1bc5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc60 <nrf_gpio_pin_set>:
{
   1bc60:	b507      	push	{r0, r1, r2, lr}
   1bc62:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bc64:	a801      	add	r0, sp, #4
   1bc66:	f7f2 f95b 	bl	df20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1bc6a:	2301      	movs	r3, #1
   1bc6c:	9a01      	ldr	r2, [sp, #4]
   1bc6e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1bc70:	6083      	str	r3, [r0, #8]
}
   1bc72:	b003      	add	sp, #12
   1bc74:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc78 <nrf_gpio_pin_clear>:
{
   1bc78:	b507      	push	{r0, r1, r2, lr}
   1bc7a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bc7c:	a801      	add	r0, sp, #4
   1bc7e:	f7f2 f94f 	bl	df20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1bc82:	2301      	movs	r3, #1
   1bc84:	9a01      	ldr	r2, [sp, #4]
   1bc86:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1bc88:	60c3      	str	r3, [r0, #12]
}
   1bc8a:	b003      	add	sp, #12
   1bc8c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc90 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1bc90:	7b0a      	ldrb	r2, [r1, #12]
{
   1bc92:	4603      	mov	r3, r0
   1bc94:	2a03      	cmp	r2, #3
   1bc96:	d829      	bhi.n	1bcec <xfer_completeness_check+0x5c>
   1bc98:	e8df f002 	tbb	[pc, r2]
   1bc9c:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1bca0:	688a      	ldr	r2, [r1, #8]
   1bca2:	0350      	lsls	r0, r2, #13
   1bca4:	d504      	bpl.n	1bcb0 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1bca6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1bcaa:	6908      	ldr	r0, [r1, #16]
   1bcac:	4290      	cmp	r0, r2
   1bcae:	d107      	bne.n	1bcc0 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1bcb0:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1bcb2:	0352      	lsls	r2, r2, #13
   1bcb4:	d41a      	bmi.n	1bcec <xfer_completeness_check+0x5c>
   1bcb6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1bcba:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1bcbc:	4291      	cmp	r1, r2
   1bcbe:	d015      	beq.n	1bcec <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1bcc0:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1bcc2:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1bcc4:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1bcc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1bccc:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1bcce:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1bcd2:	6908      	ldr	r0, [r1, #16]
   1bcd4:	4290      	cmp	r0, r2
   1bcd6:	d1f3      	bne.n	1bcc0 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1bcd8:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1bcdc:	e7ed      	b.n	1bcba <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1bcde:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1bce2:	6909      	ldr	r1, [r1, #16]
   1bce4:	e7ea      	b.n	1bcbc <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1bce6:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1bcea:	e7fa      	b.n	1bce2 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1bcec:	2001      	movs	r0, #1
}
   1bcee:	4770      	bx	lr

0001bcf0 <metal_device_open>:
{
   1bcf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bcf2:	460c      	mov	r4, r1
   1bcf4:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1bcf6:	4606      	mov	r6, r0
   1bcf8:	b918      	cbnz	r0, 1bd02 <metal_device_open+0x12>
		return -EINVAL;
   1bcfa:	f06f 0015 	mvn.w	r0, #21
}
   1bcfe:	b002      	add	sp, #8
   1bd00:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1bd02:	f7fd fa46 	bl	19192 <strlen>
   1bd06:	2800      	cmp	r0, #0
   1bd08:	d0f7      	beq.n	1bcfa <metal_device_open+0xa>
   1bd0a:	2c00      	cmp	r4, #0
   1bd0c:	d0f5      	beq.n	1bcfa <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1bd0e:	4620      	mov	r0, r4
   1bd10:	f7fd fa3f 	bl	19192 <strlen>
   1bd14:	2800      	cmp	r0, #0
   1bd16:	d0f0      	beq.n	1bcfa <metal_device_open+0xa>
   1bd18:	2d00      	cmp	r5, #0
   1bd1a:	d0ee      	beq.n	1bcfa <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1bd1c:	4630      	mov	r0, r6
   1bd1e:	a901      	add	r1, sp, #4
   1bd20:	f7f2 fd5a 	bl	e7d8 <metal_bus_find>
	if (error)
   1bd24:	2800      	cmp	r0, #0
   1bd26:	d1ea      	bne.n	1bcfe <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1bd28:	9801      	ldr	r0, [sp, #4]
   1bd2a:	6883      	ldr	r3, [r0, #8]
   1bd2c:	b11b      	cbz	r3, 1bd36 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1bd2e:	462a      	mov	r2, r5
   1bd30:	4621      	mov	r1, r4
   1bd32:	4798      	blx	r3
	if (error)
   1bd34:	e7e3      	b.n	1bcfe <metal_device_open+0xe>
		return -ENODEV;
   1bd36:	f06f 0012 	mvn.w	r0, #18
   1bd3a:	e7e0      	b.n	1bcfe <metal_device_open+0xe>

0001bd3c <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1bd3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1bd3e:	6804      	ldr	r4, [r0, #0]
   1bd40:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1bd42:	1c66      	adds	r6, r4, #1
   1bd44:	d00f      	beq.n	1bd66 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1bd46:	42a9      	cmp	r1, r5
   1bd48:	d232      	bcs.n	1bdb0 <metal_io_block_read+0x74>
		: NULL);
   1bd4a:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1bd4c:	185e      	adds	r6, r3, r1
   1bd4e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1bd50:	bf88      	it	hi
   1bd52:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1bd54:	6a05      	ldr	r5, [r0, #32]
   1bd56:	b155      	cbz	r5, 1bd6e <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1bd58:	9300      	str	r3, [sp, #0]
   1bd5a:	2305      	movs	r3, #5
   1bd5c:	47a8      	blx	r5
   1bd5e:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1bd60:	4618      	mov	r0, r3
   1bd62:	b002      	add	sp, #8
   1bd64:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1bd66:	42a9      	cmp	r1, r5
   1bd68:	d222      	bcs.n	1bdb0 <metal_io_block_read+0x74>
   1bd6a:	2400      	movs	r4, #0
   1bd6c:	e7ee      	b.n	1bd4c <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1bd6e:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1bd72:	4621      	mov	r1, r4
   1bd74:	4618      	mov	r0, r3
   1bd76:	2800      	cmp	r0, #0
   1bd78:	d0f2      	beq.n	1bd60 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1bd7a:	ea42 0401 	orr.w	r4, r2, r1
   1bd7e:	07a4      	lsls	r4, r4, #30
   1bd80:	d10a      	bne.n	1bd98 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1bd82:	2803      	cmp	r0, #3
   1bd84:	dc0e      	bgt.n	1bda4 <metal_io_block_read+0x68>
   1bd86:	3901      	subs	r1, #1
   1bd88:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1bd8a:	4282      	cmp	r2, r0
   1bd8c:	d0e8      	beq.n	1bd60 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1bd8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1bd92:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1bd96:	e7f8      	b.n	1bd8a <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1bd98:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1bd9c:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1bd9e:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1bda2:	e7e8      	b.n	1bd76 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1bda4:	f851 4b04 	ldr.w	r4, [r1], #4
   1bda8:	3804      	subs	r0, #4
   1bdaa:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1bdae:	e7e8      	b.n	1bd82 <metal_io_block_read+0x46>
		return -ERANGE;
   1bdb0:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1bdb4:	e7d4      	b.n	1bd60 <metal_io_block_read+0x24>

0001bdb6 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1bdb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1bdb8:	6804      	ldr	r4, [r0, #0]
   1bdba:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1bdbc:	1c66      	adds	r6, r4, #1
   1bdbe:	d00e      	beq.n	1bdde <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1bdc0:	42a9      	cmp	r1, r5
   1bdc2:	d230      	bcs.n	1be26 <metal_io_block_write+0x70>
		: NULL);
   1bdc4:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1bdc6:	185e      	adds	r6, r3, r1
   1bdc8:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1bdca:	bf88      	it	hi
   1bdcc:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1bdce:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1bdd0:	b94d      	cbnz	r5, 1bde6 <metal_io_block_write+0x30>
   1bdd2:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1bdd4:	b991      	cbnz	r1, 1bdfc <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1bdd6:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1bdda:	4618      	mov	r0, r3
   1bddc:	e006      	b.n	1bdec <metal_io_block_write+0x36>
	if (offset >= io->size)
   1bdde:	42a9      	cmp	r1, r5
   1bde0:	d221      	bcs.n	1be26 <metal_io_block_write+0x70>
   1bde2:	2400      	movs	r4, #0
   1bde4:	e7ef      	b.n	1bdc6 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1bde6:	9300      	str	r3, [sp, #0]
   1bde8:	2305      	movs	r3, #5
   1bdea:	47a8      	blx	r5
	}
	return retlen;
}
   1bdec:	b002      	add	sp, #8
   1bdee:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1bdf0:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1bdf4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1bdf6:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1bdfa:	e7eb      	b.n	1bdd4 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1bdfc:	ea44 0002 	orr.w	r0, r4, r2
   1be00:	0780      	lsls	r0, r0, #30
   1be02:	d1f5      	bne.n	1bdf0 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1be04:	2903      	cmp	r1, #3
   1be06:	dc08      	bgt.n	1be1a <metal_io_block_write+0x64>
   1be08:	3a01      	subs	r2, #1
   1be0a:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1be0c:	428c      	cmp	r4, r1
   1be0e:	d0e2      	beq.n	1bdd6 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1be10:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1be14:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1be18:	e7f8      	b.n	1be0c <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1be1a:	f852 0b04 	ldr.w	r0, [r2], #4
   1be1e:	3904      	subs	r1, #4
   1be20:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1be24:	e7ee      	b.n	1be04 <metal_io_block_write+0x4e>
		return -ERANGE;
   1be26:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1be2a:	e7df      	b.n	1bdec <metal_io_block_write+0x36>

0001be2c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1be2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1be2e:	6804      	ldr	r4, [r0, #0]
   1be30:	461d      	mov	r5, r3
		: NULL);
   1be32:	1c66      	adds	r6, r4, #1
   1be34:	6883      	ldr	r3, [r0, #8]
   1be36:	d00e      	beq.n	1be56 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1be38:	4299      	cmp	r1, r3
   1be3a:	d22d      	bcs.n	1be98 <metal_io_block_set+0x6c>
		: NULL);
   1be3c:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1be3e:	186e      	adds	r6, r5, r1
   1be40:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1be42:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1be44:	bf88      	it	hi
   1be46:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1be48:	b186      	cbz	r6, 1be6c <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1be4a:	2305      	movs	r3, #5
   1be4c:	9500      	str	r5, [sp, #0]
   1be4e:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1be50:	4628      	mov	r0, r5
   1be52:	b002      	add	sp, #8
   1be54:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1be56:	4299      	cmp	r1, r3
   1be58:	d21e      	bcs.n	1be98 <metal_io_block_set+0x6c>
   1be5a:	2400      	movs	r4, #0
   1be5c:	e7ef      	b.n	1be3e <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1be5e:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1be62:	3b01      	subs	r3, #1
   1be64:	b923      	cbnz	r3, 1be70 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1be66:	f3bf 8f5b 	dmb	ish
   1be6a:	e7f1      	b.n	1be50 <metal_io_block_set+0x24>
   1be6c:	462b      	mov	r3, r5
   1be6e:	e7f9      	b.n	1be64 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1be70:	07a1      	lsls	r1, r4, #30
   1be72:	d1f4      	bne.n	1be5e <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1be74:	0611      	lsls	r1, r2, #24
   1be76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1be7a:	4311      	orrs	r1, r2
   1be7c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1be80:	2b03      	cmp	r3, #3
   1be82:	dc05      	bgt.n	1be90 <metal_io_block_set+0x64>
   1be84:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1be86:	429c      	cmp	r4, r3
   1be88:	d0ed      	beq.n	1be66 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1be8a:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1be8e:	e7fa      	b.n	1be86 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1be90:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1be94:	3b04      	subs	r3, #4
   1be96:	e7f3      	b.n	1be80 <metal_io_block_set+0x54>
		return -ERANGE;
   1be98:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1be9c:	e7d8      	b.n	1be50 <metal_io_block_set+0x24>

0001be9e <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1be9e:	2000      	movs	r0, #0
   1bea0:	4770      	bx	lr

0001bea2 <_lv_indev_init>:
    if(indev) {
   1bea2:	2000      	movs	r0, #0
   1bea4:	f7f2 bdb8 	b.w	ea18 <lv_indev_reset.part.0>

0001bea8 <refresh_children_position>:
{
   1bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
   1beaa:	1d07      	adds	r7, r0, #4
   1beac:	4638      	mov	r0, r7
{
   1beae:	460d      	mov	r5, r1
   1beb0:	4616      	mov	r6, r2
    _LV_LL_READ(obj->child_ll, i) {
   1beb2:	f005 fb5e 	bl	21572 <_lv_ll_get_head>
   1beb6:	4604      	mov	r4, r0
   1beb8:	b900      	cbnz	r0, 1bebc <refresh_children_position+0x14>
}
   1beba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   1bebc:	8a23      	ldrh	r3, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
   1bebe:	4629      	mov	r1, r5
        i->coords.x1 += x_diff;
   1bec0:	442b      	add	r3, r5
   1bec2:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   1bec4:	8a63      	ldrh	r3, [r4, #18]
        refresh_children_position(i, x_diff, y_diff);
   1bec6:	4620      	mov	r0, r4
        i->coords.y1 += y_diff;
   1bec8:	4433      	add	r3, r6
   1beca:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   1becc:	8aa3      	ldrh	r3, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
   1bece:	4632      	mov	r2, r6
        i->coords.x2 += x_diff;
   1bed0:	442b      	add	r3, r5
   1bed2:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   1bed4:	8ae3      	ldrh	r3, [r4, #22]
   1bed6:	4433      	add	r3, r6
   1bed8:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   1beda:	f7ff ffe5 	bl	1bea8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
   1bede:	4621      	mov	r1, r4
   1bee0:	4638      	mov	r0, r7
   1bee2:	f005 fb4c 	bl	2157e <_lv_ll_get_next>
   1bee6:	e7e6      	b.n	1beb6 <refresh_children_position+0xe>

0001bee8 <lv_area_copy>:
   1bee8:	2208      	movs	r2, #8
   1beea:	f7fd b98d 	b.w	19208 <memcpy>

0001beee <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   1beee:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1bef2:	f361 0300 	bfi	r3, r1, #0, #1
   1bef6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
}
   1befa:	4770      	bx	lr

0001befc <lv_event_send>:
{
   1befc:	b410      	push	{r4}
   1befe:	4613      	mov	r3, r2
   1bf00:	460c      	mov	r4, r1
    if(obj == NULL) return LV_RES_OK;
   1bf02:	4601      	mov	r1, r0
   1bf04:	b120      	cbz	r0, 1bf10 <lv_event_send+0x14>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   1bf06:	4622      	mov	r2, r4
   1bf08:	6980      	ldr	r0, [r0, #24]
}
   1bf0a:	bc10      	pop	{r4}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   1bf0c:	f7f2 bea8 	b.w	ec60 <lv_event_send_func>
}
   1bf10:	2001      	movs	r0, #1
   1bf12:	bc10      	pop	{r4}
   1bf14:	4770      	bx	lr

0001bf16 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   1bf16:	61c1      	str	r1, [r0, #28]
}
   1bf18:	4770      	bx	lr

0001bf1a <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
   1bf1a:	b110      	cbz	r0, 1bf22 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
   1bf1c:	69c3      	ldr	r3, [r0, #28]
   1bf1e:	b103      	cbz	r3, 1bf22 <lv_signal_send+0x8>
   1bf20:	4718      	bx	r3
}
   1bf22:	2001      	movs	r0, #1
   1bf24:	4770      	bx	lr

0001bf26 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   1bf26:	6201      	str	r1, [r0, #32]
}
   1bf28:	4770      	bx	lr

0001bf2a <lv_obj_allocate_ext_attr>:
{
   1bf2a:	b510      	push	{r4, lr}
   1bf2c:	4604      	mov	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
   1bf2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1bf30:	f7f6 fdb2 	bl	12a98 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
   1bf34:	b100      	cbz	r0, 1bf38 <lv_obj_allocate_ext_attr+0xe>
    obj->ext_attr = new_ext;
   1bf36:	6260      	str	r0, [r4, #36]	; 0x24
}
   1bf38:	bd10      	pop	{r4, pc}

0001bf3a <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
   1bf3a:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   1bf3c:	2106      	movs	r1, #6
   1bf3e:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
   1bf40:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   1bf42:	4718      	bx	r3

0001bf44 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
   1bf44:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
   1bf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return false;
   1bf4a:	06da      	lsls	r2, r3, #27
{
   1bf4c:	4605      	mov	r5, r0
   1bf4e:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
   1bf50:	d42e      	bmi.n	1bfb0 <lv_obj_area_is_visible+0x6c>
   1bf52:	4603      	mov	r3, r0
    return obj->parent;
   1bf54:	461c      	mov	r4, r3
   1bf56:	681b      	ldr	r3, [r3, #0]
    } while(par != NULL);
   1bf58:	2b00      	cmp	r3, #0
   1bf5a:	d1fb      	bne.n	1bf54 <lv_obj_area_is_visible+0x10>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   1bf5c:	4620      	mov	r0, r4
   1bf5e:	f7f2 fec3 	bl	ece8 <lv_obj_get_disp>
   1bf62:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   1bf64:	f7f2 fcf0 	bl	e948 <lv_disp_get_scr_act>
   1bf68:	4284      	cmp	r4, r0
   1bf6a:	d123      	bne.n	1bfb4 <lv_obj_area_is_visible+0x70>
        lv_area_copy(&obj_coords, &obj->coords);
   1bf6c:	4668      	mov	r0, sp
   1bf6e:	f105 0110 	add.w	r1, r5, #16
        lv_coord_t ext_size = obj->ext_draw_pad;
   1bf72:	f9b5 4030 	ldrsh.w	r4, [r5, #48]	; 0x30
        lv_area_copy(&obj_coords, &obj->coords);
   1bf76:	f7ff ffb7 	bl	1bee8 <lv_area_copy>
        obj_coords.x1 -= ext_size;
   1bf7a:	f8bd 3000 	ldrh.w	r3, [sp]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   1bf7e:	466a      	mov	r2, sp
        obj_coords.x1 -= ext_size;
   1bf80:	1b1b      	subs	r3, r3, r4
   1bf82:	f8ad 3000 	strh.w	r3, [sp]
        obj_coords.y1 -= ext_size;
   1bf86:	f8bd 3002 	ldrh.w	r3, [sp, #2]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   1bf8a:	4631      	mov	r1, r6
        obj_coords.y1 -= ext_size;
   1bf8c:	1b1b      	subs	r3, r3, r4
   1bf8e:	f8ad 3002 	strh.w	r3, [sp, #2]
        obj_coords.x2 += ext_size;
   1bf92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   1bf96:	4630      	mov	r0, r6
        obj_coords.x2 += ext_size;
   1bf98:	4423      	add	r3, r4
   1bf9a:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
   1bf9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bfa2:	441c      	add	r4, r3
   1bfa4:	f8ad 4006 	strh.w	r4, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   1bfa8:	f005 f82c 	bl	21004 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
   1bfac:	4604      	mov	r4, r0
   1bfae:	bb00      	cbnz	r0, 1bff2 <lv_obj_area_is_visible+0xae>
    if(lv_obj_get_hidden(obj)) return false;
   1bfb0:	2400      	movs	r4, #0
   1bfb2:	e00f      	b.n	1bfd4 <lv_obj_area_is_visible+0x90>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   1bfb4:	4638      	mov	r0, r7
   1bfb6:	f7f2 fce1 	bl	e97c <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   1bfba:	4284      	cmp	r4, r0
   1bfbc:	d0d6      	beq.n	1bf6c <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
   1bfbe:	4638      	mov	r0, r7
   1bfc0:	f7f2 fcf6 	bl	e9b0 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   1bfc4:	4284      	cmp	r4, r0
   1bfc6:	d0d1      	beq.n	1bf6c <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   1bfc8:	4638      	mov	r0, r7
   1bfca:	f7f2 fd0b 	bl	e9e4 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
   1bfce:	4284      	cmp	r4, r0
   1bfd0:	d0cc      	beq.n	1bf6c <lv_obj_area_is_visible+0x28>
    return true;
   1bfd2:	2401      	movs	r4, #1
}
   1bfd4:	4620      	mov	r0, r4
   1bfd6:	b003      	add	sp, #12
   1bfd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
   1bfda:	4631      	mov	r1, r6
   1bfdc:	4630      	mov	r0, r6
   1bfde:	f105 0210 	add.w	r2, r5, #16
   1bfe2:	f005 f80f 	bl	21004 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
   1bfe6:	2800      	cmp	r0, #0
   1bfe8:	d0e2      	beq.n	1bfb0 <lv_obj_area_is_visible+0x6c>
    return obj->hidden == 0 ? false : true;
   1bfea:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
   1bfee:	06db      	lsls	r3, r3, #27
   1bff0:	d4de      	bmi.n	1bfb0 <lv_obj_area_is_visible+0x6c>
    return obj->parent;
   1bff2:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
   1bff4:	2d00      	cmp	r5, #0
   1bff6:	d1f0      	bne.n	1bfda <lv_obj_area_is_visible+0x96>
   1bff8:	e7ec      	b.n	1bfd4 <lv_obj_area_is_visible+0x90>

0001bffa <lv_obj_invalidate_area>:
{
   1bffa:	b513      	push	{r0, r1, r4, lr}
   1bffc:	4604      	mov	r4, r0
    lv_area_copy(&area_tmp, area);
   1bffe:	4668      	mov	r0, sp
   1c000:	f7ff ff72 	bl	1bee8 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
   1c004:	4669      	mov	r1, sp
   1c006:	4620      	mov	r0, r4
   1c008:	f7ff ff9c 	bl	1bf44 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
   1c00c:	b128      	cbz	r0, 1c01a <lv_obj_invalidate_area+0x20>
   1c00e:	4620      	mov	r0, r4
   1c010:	f7f2 fe6a 	bl	ece8 <lv_obj_get_disp>
   1c014:	4669      	mov	r1, sp
   1c016:	f001 f8c7 	bl	1d1a8 <_lv_inv_area>
}
   1c01a:	b002      	add	sp, #8
   1c01c:	bd10      	pop	{r4, pc}

0001c01e <lv_obj_invalidate>:
{
   1c01e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c020:	4605      	mov	r5, r0
    lv_coord_t ext_size = obj->ext_draw_pad;
   1c022:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
    lv_area_copy(&obj_coords, &obj->coords);
   1c026:	f100 0110 	add.w	r1, r0, #16
   1c02a:	4668      	mov	r0, sp
   1c02c:	f7ff ff5c 	bl	1bee8 <lv_area_copy>
    obj_coords.x1 -= ext_size;
   1c030:	f8bd 3000 	ldrh.w	r3, [sp]
    lv_obj_invalidate_area(obj, &obj_coords);
   1c034:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
   1c036:	1b1b      	subs	r3, r3, r4
   1c038:	f8ad 3000 	strh.w	r3, [sp]
    obj_coords.y1 -= ext_size;
   1c03c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
   1c040:	4628      	mov	r0, r5
    obj_coords.y1 -= ext_size;
   1c042:	1b1b      	subs	r3, r3, r4
   1c044:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
   1c048:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c04c:	4423      	add	r3, r4
   1c04e:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
   1c052:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c056:	441c      	add	r4, r3
   1c058:	f8ad 4006 	strh.w	r4, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   1c05c:	f7ff ffcd 	bl	1bffa <lv_obj_invalidate_area>
}
   1c060:	b003      	add	sp, #12
   1c062:	bd30      	pop	{r4, r5, pc}

0001c064 <lv_obj_set_pos>:
{
   1c064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
   1c066:	6807      	ldr	r7, [r0, #0]
{
   1c068:	4604      	mov	r4, r0
    if(par) {
   1c06a:	b12f      	cbz	r7, 1c078 <lv_obj_set_pos+0x14>
        x = x + par->coords.x1;
   1c06c:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
   1c06e:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
   1c070:	4429      	add	r1, r5
        y = y + par->coords.y1;
   1c072:	4432      	add	r2, r6
        x = x + par->coords.x1;
   1c074:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
   1c076:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
   1c078:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
   1c07a:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
   1c07c:	1b49      	subs	r1, r1, r5
    diff.y = y - obj->coords.y1;
   1c07e:	1b92      	subs	r2, r2, r6
    diff.x = x - obj->coords.x1;
   1c080:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
   1c082:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
   1c084:	ea55 0306 	orrs.w	r3, r5, r6
   1c088:	d026      	beq.n	1c0d8 <lv_obj_set_pos+0x74>
    lv_obj_invalidate(obj);
   1c08a:	4620      	mov	r0, r4
   1c08c:	f7ff ffc7 	bl	1c01e <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   1c090:	4668      	mov	r0, sp
   1c092:	f104 0110 	add.w	r1, r4, #16
   1c096:	f7ff ff27 	bl	1bee8 <lv_area_copy>
    obj->coords.x1 += diff.x;
   1c09a:	8a23      	ldrh	r3, [r4, #16]
    refresh_children_position(obj, diff.x, diff.y);
   1c09c:	4632      	mov	r2, r6
    obj->coords.x1 += diff.x;
   1c09e:	442b      	add	r3, r5
   1c0a0:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   1c0a2:	8a63      	ldrh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
   1c0a4:	4629      	mov	r1, r5
    obj->coords.y1 += diff.y;
   1c0a6:	4433      	add	r3, r6
   1c0a8:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   1c0aa:	8aa3      	ldrh	r3, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
   1c0ac:	4620      	mov	r0, r4
    obj->coords.x2 += diff.x;
   1c0ae:	442b      	add	r3, r5
   1c0b0:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   1c0b2:	8ae3      	ldrh	r3, [r4, #22]
   1c0b4:	4433      	add	r3, r6
   1c0b6:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   1c0b8:	f7ff fef6 	bl	1bea8 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   1c0bc:	466a      	mov	r2, sp
   1c0be:	2102      	movs	r1, #2
   1c0c0:	4620      	mov	r0, r4
   1c0c2:	69e3      	ldr	r3, [r4, #28]
   1c0c4:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   1c0c6:	b127      	cbz	r7, 1c0d2 <lv_obj_set_pos+0x6e>
   1c0c8:	4622      	mov	r2, r4
   1c0ca:	2101      	movs	r1, #1
   1c0cc:	4638      	mov	r0, r7
   1c0ce:	69fb      	ldr	r3, [r7, #28]
   1c0d0:	4798      	blx	r3
    lv_obj_invalidate(obj);
   1c0d2:	4620      	mov	r0, r4
   1c0d4:	f7ff ffa3 	bl	1c01e <lv_obj_invalidate>
}
   1c0d8:	b003      	add	sp, #12
   1c0da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c0dc <lv_obj_align>:
{
   1c0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c0de:	4605      	mov	r5, r0
   1c0e0:	461c      	mov	r4, r3
    if(base == NULL) base = lv_obj_get_parent(obj);
   1c0e2:	4608      	mov	r0, r1
   1c0e4:	b901      	cbnz	r1, 1c0e8 <lv_obj_align+0xc>
    return obj->parent;
   1c0e6:	6828      	ldr	r0, [r5, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
   1c0e8:	ab01      	add	r3, sp, #4
   1c0ea:	f105 0110 	add.w	r1, r5, #16
   1c0ee:	3010      	adds	r0, #16
   1c0f0:	f005 f8cb 	bl	2128a <_lv_area_align>
    return obj->parent;
   1c0f4:	6828      	ldr	r0, [r5, #0]
    new_pos.x += x_ofs;
   1c0f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    new_pos.y += y_ofs;
   1c0fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c0fe:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    lv_coord_t par_abs_y  = par->coords.y1;
   1c102:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
    new_pos.x += x_ofs;
   1c106:	4421      	add	r1, r4
    new_pos.x -= par_abs_x;
   1c108:	8a04      	ldrh	r4, [r0, #16]
    new_pos.y += y_ofs;
   1c10a:	441a      	add	r2, r3
    new_pos.x -= par_abs_x;
   1c10c:	1b09      	subs	r1, r1, r4
    new_pos.y -= par_abs_y;
   1c10e:	1b92      	subs	r2, r2, r6
    new_pos.x -= par_abs_x;
   1c110:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
   1c112:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   1c114:	4628      	mov	r0, r5
    new_pos.x -= par_abs_x;
   1c116:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
   1c11a:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   1c11e:	f7ff ffa1 	bl	1c064 <lv_obj_set_pos>
}
   1c122:	b002      	add	sp, #8
   1c124:	bd70      	pop	{r4, r5, r6, pc}

0001c126 <lv_obj_set_size>:
   1c126:	8a83      	ldrh	r3, [r0, #20]
{
   1c128:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c12a:	4616      	mov	r6, r2
   1c12c:	8a02      	ldrh	r2, [r0, #16]
   1c12e:	3301      	adds	r3, #1
   1c130:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   1c132:	b21b      	sxth	r3, r3
   1c134:	428b      	cmp	r3, r1
{
   1c136:	4604      	mov	r4, r0
   1c138:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   1c13a:	d106      	bne.n	1c14a <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1c13c:	8ac3      	ldrh	r3, [r0, #22]
   1c13e:	8a42      	ldrh	r2, [r0, #18]
   1c140:	3301      	adds	r3, #1
   1c142:	1a9b      	subs	r3, r3, r2
   1c144:	b21b      	sxth	r3, r3
   1c146:	429e      	cmp	r6, r3
   1c148:	d023      	beq.n	1c192 <lv_obj_set_size+0x6c>
    lv_obj_invalidate(obj);
   1c14a:	4620      	mov	r0, r4
   1c14c:	f7ff ff67 	bl	1c01e <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   1c150:	4668      	mov	r0, sp
   1c152:	f104 0110 	add.w	r1, r4, #16
   1c156:	f7ff fec7 	bl	1bee8 <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1c15a:	8a62      	ldrh	r2, [r4, #18]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1c15c:	8a21      	ldrh	r1, [r4, #16]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1c15e:	3e01      	subs	r6, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1c160:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1c162:	4416      	add	r6, r2
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1c164:	440d      	add	r5, r1
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   1c166:	466a      	mov	r2, sp
   1c168:	2102      	movs	r1, #2
   1c16a:	4620      	mov	r0, r4
   1c16c:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   1c16e:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   1c170:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   1c172:	4798      	blx	r3
    return obj->parent;
   1c174:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   1c176:	b118      	cbz	r0, 1c180 <lv_obj_set_size+0x5a>
   1c178:	4622      	mov	r2, r4
   1c17a:	2101      	movs	r1, #1
   1c17c:	69c3      	ldr	r3, [r0, #28]
   1c17e:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   1c180:	1d26      	adds	r6, r4, #4
   1c182:	4630      	mov	r0, r6
   1c184:	f005 f9f5 	bl	21572 <_lv_ll_get_head>
   1c188:	4605      	mov	r5, r0
   1c18a:	b920      	cbnz	r0, 1c196 <lv_obj_set_size+0x70>
    lv_obj_invalidate(obj);
   1c18c:	4620      	mov	r0, r4
   1c18e:	f7ff ff46 	bl	1c01e <lv_obj_invalidate>
}
   1c192:	b002      	add	sp, #8
   1c194:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
   1c196:	466a      	mov	r2, sp
   1c198:	2103      	movs	r1, #3
   1c19a:	4628      	mov	r0, r5
   1c19c:	69eb      	ldr	r3, [r5, #28]
   1c19e:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   1c1a0:	4629      	mov	r1, r5
   1c1a2:	4630      	mov	r0, r6
   1c1a4:	f005 f9eb 	bl	2157e <_lv_ll_get_next>
   1c1a8:	e7ee      	b.n	1c188 <lv_obj_set_size+0x62>

0001c1aa <lv_obj_get_parent>:
}
   1c1aa:	6800      	ldr	r0, [r0, #0]
   1c1ac:	4770      	bx	lr

0001c1ae <lv_obj_get_child>:
    if(child == NULL) {
   1c1ae:	3004      	adds	r0, #4
   1c1b0:	b909      	cbnz	r1, 1c1b6 <lv_obj_get_child+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   1c1b2:	f005 b9de 	b.w	21572 <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
   1c1b6:	f005 b9e2 	b.w	2157e <_lv_ll_get_next>

0001c1ba <refresh_children_style>:
{
   1c1ba:	b538      	push	{r3, r4, r5, lr}
   1c1bc:	4605      	mov	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
   1c1be:	3004      	adds	r0, #4
   1c1c0:	f005 f9d7 	bl	21572 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   1c1c4:	4604      	mov	r4, r0
    while(child != NULL) {
   1c1c6:	b900      	cbnz	r0, 1c1ca <refresh_children_style+0x10>
}
   1c1c8:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
   1c1ca:	4620      	mov	r0, r4
   1c1cc:	f7ff ff27 	bl	1c01e <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
   1c1d0:	2200      	movs	r2, #0
   1c1d2:	2104      	movs	r1, #4
   1c1d4:	69e3      	ldr	r3, [r4, #28]
   1c1d6:	4620      	mov	r0, r4
   1c1d8:	4798      	blx	r3
        lv_obj_invalidate(child);
   1c1da:	4620      	mov	r0, r4
   1c1dc:	f7ff ff1f 	bl	1c01e <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
   1c1e0:	4620      	mov	r0, r4
   1c1e2:	f7ff ffea 	bl	1c1ba <refresh_children_style>
        child = lv_obj_get_child(obj, child);
   1c1e6:	4621      	mov	r1, r4
   1c1e8:	4628      	mov	r0, r5
   1c1ea:	f7ff ffe0 	bl	1c1ae <lv_obj_get_child>
   1c1ee:	e7e9      	b.n	1c1c4 <refresh_children_style+0xa>

0001c1f0 <lv_obj_get_coords>:
{
   1c1f0:	460b      	mov	r3, r1
    lv_area_copy(cords_p, &obj->coords);
   1c1f2:	f100 0110 	add.w	r1, r0, #16
   1c1f6:	4618      	mov	r0, r3
   1c1f8:	f7ff be76 	b.w	1bee8 <lv_area_copy>

0001c1fc <lv_obj_get_x>:
    return obj->parent;
   1c1fc:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   1c1fe:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   1c202:	b113      	cbz	r3, 1c20a <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   1c204:	8a1b      	ldrh	r3, [r3, #16]
   1c206:	1ac0      	subs	r0, r0, r3
   1c208:	b200      	sxth	r0, r0
}
   1c20a:	4770      	bx	lr

0001c20c <lv_obj_get_y>:
    return obj->parent;
   1c20c:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   1c20e:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   1c212:	b113      	cbz	r3, 1c21a <lv_obj_get_y+0xe>
        rel_y             = obj->coords.y1 - parent->coords.y1;
   1c214:	8a5b      	ldrh	r3, [r3, #18]
   1c216:	1ac0      	subs	r0, r0, r3
   1c218:	b200      	sxth	r0, r0
}
   1c21a:	4770      	bx	lr

0001c21c <lv_obj_get_style_list>:
{
   1c21c:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
   1c21e:	b911      	cbnz	r1, 1c226 <lv_obj_get_style_list+0xa>
   1c220:	3028      	adds	r0, #40	; 0x28
}
   1c222:	b002      	add	sp, #8
   1c224:	bd10      	pop	{r4, pc}
    info.result = NULL;
   1c226:	2400      	movs	r4, #0
    info.part = part;
   1c228:	f88d 1000 	strb.w	r1, [sp]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   1c22c:	466a      	mov	r2, sp
   1c22e:	2108      	movs	r1, #8
    info.result = NULL;
   1c230:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   1c232:	f7ff fe72 	bl	1bf1a <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
   1c236:	2801      	cmp	r0, #1
   1c238:	bf14      	ite	ne
   1c23a:	4620      	movne	r0, r4
    return info.result;
   1c23c:	9801      	ldreq	r0, [sp, #4]
   1c23e:	e7f0      	b.n	1c222 <lv_obj_get_style_list+0x6>

0001c240 <lv_obj_del>:
{
   1c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c242:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
   1c244:	f7ff feeb 	bl	1c01e <lv_obj_invalidate>
    return obj->parent;
   1c248:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
   1c24a:	b9b7      	cbnz	r7, 1c27a <lv_obj_del+0x3a>
        disp = lv_obj_get_disp(obj);
   1c24c:	4628      	mov	r0, r5
   1c24e:	f7f2 fd4b 	bl	ece8 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
   1c252:	4604      	mov	r4, r0
   1c254:	b178      	cbz	r0, 1c276 <lv_obj_del+0x36>
        if(disp->act_scr == obj) act_scr_del = true;
   1c256:	6c06      	ldr	r6, [r0, #64]	; 0x40
   1c258:	1b73      	subs	r3, r6, r5
   1c25a:	425e      	negs	r6, r3
   1c25c:	415e      	adcs	r6, r3
    obj_del_core(obj);
   1c25e:	4628      	mov	r0, r5
   1c260:	f7f2 ff2c 	bl	f0bc <obj_del_core>
    if(par) {
   1c264:	b127      	cbz	r7, 1c270 <lv_obj_del+0x30>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
   1c266:	2200      	movs	r2, #0
   1c268:	2101      	movs	r1, #1
   1c26a:	4638      	mov	r0, r7
   1c26c:	69fb      	ldr	r3, [r7, #28]
   1c26e:	4798      	blx	r3
    if(act_scr_del)  {
   1c270:	b10e      	cbz	r6, 1c276 <lv_obj_del+0x36>
        disp->act_scr = NULL;
   1c272:	2300      	movs	r3, #0
   1c274:	6423      	str	r3, [r4, #64]	; 0x40
}
   1c276:	2000      	movs	r0, #0
   1c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
   1c27a:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
   1c27c:	4634      	mov	r4, r6
   1c27e:	e7ee      	b.n	1c25e <lv_obj_del+0x1e>

0001c280 <_lv_obj_disable_style_caching>:
{
   1c280:	b570      	push	{r4, r5, r6, lr}
   1c282:	4606      	mov	r6, r0
   1c284:	460d      	mov	r5, r1
   1c286:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c288:	4630      	mov	r0, r6
   1c28a:	b2e1      	uxtb	r1, r4
   1c28c:	f7ff ffc6 	bl	1c21c <lv_obj_get_style_list>
        if(list == NULL) break;
   1c290:	b130      	cbz	r0, 1c2a0 <_lv_obj_disable_style_caching+0x20>
        list->ignore_cache = dis;
   1c292:	7943      	ldrb	r3, [r0, #5]
   1c294:	3401      	adds	r4, #1
   1c296:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1c29a:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
   1c29c:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1c29e:	d1f3      	bne.n	1c288 <_lv_obj_disable_style_caching+0x8>
{
   1c2a0:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c2a2:	4621      	mov	r1, r4
   1c2a4:	4630      	mov	r0, r6
   1c2a6:	f7ff ffb9 	bl	1c21c <lv_obj_get_style_list>
        if(list == NULL) break;
   1c2aa:	b138      	cbz	r0, 1c2bc <_lv_obj_disable_style_caching+0x3c>
        list->ignore_cache = dis;
   1c2ac:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c2ae:	3401      	adds	r4, #1
   1c2b0:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
   1c2b2:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c2b6:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
   1c2b8:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c2ba:	d1f2      	bne.n	1c2a2 <_lv_obj_disable_style_caching+0x22>
}
   1c2bc:	bd70      	pop	{r4, r5, r6, pc}

0001c2be <lv_obj_get_state>:
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   1c2be:	293f      	cmp	r1, #63	; 0x3f
{
   1c2c0:	b507      	push	{r0, r1, r2, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   1c2c2:	d804      	bhi.n	1c2ce <lv_obj_get_state+0x10>
   1c2c4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
   1c2c8:	b003      	add	sp, #12
   1c2ca:	f85d fb04 	ldr.w	pc, [sp], #4
    info.result = LV_STATE_DEFAULT;
   1c2ce:	2300      	movs	r3, #0
    info.part = part;
   1c2d0:	f88d 1004 	strb.w	r1, [sp, #4]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   1c2d4:	aa01      	add	r2, sp, #4
   1c2d6:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
   1c2d8:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   1c2dc:	f7ff fe1d 	bl	1bf1a <lv_signal_send>
    return info.result;
   1c2e0:	f89d 0005 	ldrb.w	r0, [sp, #5]
   1c2e4:	e7f0      	b.n	1c2c8 <lv_obj_get_state+0xa>

0001c2e6 <_lv_obj_get_style_color>:
{
   1c2e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c2ea:	4605      	mov	r5, r0
   1c2ec:	460e      	mov	r6, r1
   1c2ee:	4617      	mov	r7, r2
    while(parent) {
   1c2f0:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1c2f2:	f342 2907 	sbfx	r9, r2, #8, #8
    while(parent) {
   1c2f6:	b94d      	cbnz	r5, 1c30c <_lv_obj_get_style_color+0x26>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1c2f8:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   1c2fc:	3c29      	subs	r4, #41	; 0x29
   1c2fe:	2c01      	cmp	r4, #1
   1c300:	bf8c      	ite	hi
   1c302:	f04f 407f 	movhi.w	r0, #4278190080	; 0xff000000
   1c306:	f04f 30ff 	movls.w	r0, #4294967295	; 0xffffffff
   1c30a:	e013      	b.n	1c334 <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1c30c:	4631      	mov	r1, r6
   1c30e:	4628      	mov	r0, r5
   1c310:	f7ff ff84 	bl	1c21c <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
   1c314:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1c316:	4680      	mov	r8, r0
        lv_state_t state = lv_obj_get_state(parent, part);
   1c318:	4628      	mov	r0, r5
   1c31a:	f7ff ffd0 	bl	1c2be <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1c31e:	eb07 2400 	add.w	r4, r7, r0, lsl #8
   1c322:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
   1c324:	4621      	mov	r1, r4
   1c326:	4640      	mov	r0, r8
   1c328:	aa01      	add	r2, sp, #4
   1c32a:	f001 fad4 	bl	1d8d6 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
   1c32e:	2801      	cmp	r0, #1
   1c330:	d103      	bne.n	1c33a <_lv_obj_get_style_color+0x54>
   1c332:	9801      	ldr	r0, [sp, #4]
}
   1c334:	b003      	add	sp, #12
   1c336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1c33a:	f1b9 0f00 	cmp.w	r9, #0
   1c33e:	dadb      	bge.n	1c2f8 <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
   1c340:	b906      	cbnz	r6, 1c344 <_lv_obj_get_style_color+0x5e>
    return obj->parent;
   1c342:	682d      	ldr	r5, [r5, #0]
{
   1c344:	2600      	movs	r6, #0
   1c346:	e7d6      	b.n	1c2f6 <_lv_obj_get_style_color+0x10>

0001c348 <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1c348:	2202      	movs	r2, #2
   1c34a:	b508      	push	{r3, lr}
   1c34c:	f7f2 ff5e 	bl	f20c <_lv_obj_get_style_int>
   1c350:	3800      	subs	r0, #0
   1c352:	bf18      	it	ne
   1c354:	2001      	movne	r0, #1
   1c356:	bd08      	pop	{r3, pc}

0001c358 <_lv_obj_get_style_opa>:
{
   1c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c35c:	4605      	mov	r5, r0
   1c35e:	460f      	mov	r7, r1
   1c360:	4690      	mov	r8, r2
    while(parent) {
   1c362:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   1c364:	f248 0a0c 	movw	sl, #32780	; 0x800c
   1c368:	f248 0bad 	movw	fp, #32941	; 0x80ad
{
   1c36c:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
   1c36e:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
   1c372:	b96d      	cbnz	r5, 1c390 <_lv_obj_get_style_opa+0x38>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1c374:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   1c378:	2c6d      	cmp	r4, #109	; 0x6d
    prop = prop & (~LV_STYLE_STATE_MASK);
   1c37a:	b2a0      	uxth	r0, r4
    switch(prop) {
   1c37c:	d04f      	beq.n	1c41e <_lv_obj_get_style_opa+0xc6>
   1c37e:	f248 03ad 	movw	r3, #32941	; 0x80ad
   1c382:	4298      	cmp	r0, r3
   1c384:	d04b      	beq.n	1c41e <_lv_obj_get_style_opa+0xc6>
   1c386:	282c      	cmp	r0, #44	; 0x2c
   1c388:	bf14      	ite	ne
   1c38a:	20ff      	movne	r0, #255	; 0xff
   1c38c:	2000      	moveq	r0, #0
   1c38e:	e036      	b.n	1c3fe <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1c390:	4639      	mov	r1, r7
   1c392:	4628      	mov	r0, r5
   1c394:	f7ff ff42 	bl	1c21c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   1c398:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1c39a:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   1c39c:	0718      	lsls	r0, r3, #28
   1c39e:	d41d      	bmi.n	1c3dc <_lv_obj_get_style_opa+0x84>
   1c3a0:	7932      	ldrb	r2, [r6, #4]
   1c3a2:	0691      	lsls	r1, r2, #26
   1c3a4:	d01a      	beq.n	1c3dc <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   1c3a6:	f013 0f04 	tst.w	r3, #4
   1c3aa:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
   1c3ae:	d105      	bne.n	1c3bc <_lv_obj_get_style_opa+0x64>
   1c3b0:	4639      	mov	r1, r7
   1c3b2:	4628      	mov	r0, r5
   1c3b4:	9201      	str	r2, [sp, #4]
   1c3b6:	f7f3 f825 	bl	f404 <update_style_cache>
   1c3ba:	9a01      	ldr	r2, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   1c3bc:	4552      	cmp	r2, sl
   1c3be:	d009      	beq.n	1c3d4 <_lv_obj_get_style_opa+0x7c>
   1c3c0:	455a      	cmp	r2, fp
   1c3c2:	d01f      	beq.n	1c404 <_lv_obj_get_style_opa+0xac>
   1c3c4:	2a2c      	cmp	r2, #44	; 0x2c
   1c3c6:	d109      	bne.n	1c3dc <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   1c3c8:	79b3      	ldrb	r3, [r6, #6]
   1c3ca:	06da      	lsls	r2, r3, #27
   1c3cc:	d425      	bmi.n	1c41a <_lv_obj_get_style_opa+0xc2>
                    if(list->bg_opa_transp) def = true;
   1c3ce:	f013 0f08 	tst.w	r3, #8
   1c3d2:	e002      	b.n	1c3da <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
   1c3d4:	7973      	ldrb	r3, [r6, #5]
   1c3d6:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
   1c3da:	d1cb      	bne.n	1c374 <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
   1c3dc:	4639      	mov	r1, r7
   1c3de:	4628      	mov	r0, r5
   1c3e0:	f7ff ff6d 	bl	1c2be <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1c3e4:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   1c3e8:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
   1c3ea:	4621      	mov	r1, r4
   1c3ec:	4630      	mov	r0, r6
   1c3ee:	f10d 020f 	add.w	r2, sp, #15
   1c3f2:	f001 faae 	bl	1d952 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
   1c3f6:	2801      	cmp	r0, #1
   1c3f8:	d108      	bne.n	1c40c <_lv_obj_get_style_opa+0xb4>
   1c3fa:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
   1c3fe:	b005      	add	sp, #20
   1c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
   1c404:	79f3      	ldrb	r3, [r6, #7]
   1c406:	f013 0f10 	tst.w	r3, #16
   1c40a:	e7e6      	b.n	1c3da <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1c40c:	f019 0f80 	tst.w	r9, #128	; 0x80
   1c410:	d0b0      	beq.n	1c374 <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
   1c412:	b907      	cbnz	r7, 1c416 <_lv_obj_get_style_opa+0xbe>
    return obj->parent;
   1c414:	682d      	ldr	r5, [r5, #0]
{
   1c416:	2700      	movs	r7, #0
   1c418:	e7ab      	b.n	1c372 <_lv_obj_get_style_opa+0x1a>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   1c41a:	20ff      	movs	r0, #255	; 0xff
   1c41c:	e7ef      	b.n	1c3fe <_lv_obj_get_style_opa+0xa6>
            return LV_OPA_TRANSP;
   1c41e:	2000      	movs	r0, #0
   1c420:	e7ed      	b.n	1c3fe <_lv_obj_get_style_opa+0xa6>

0001c422 <trans_anim_start_cb>:
{
   1c422:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
   1c424:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
   1c426:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
   1c428:	6820      	ldr	r0, [r4, #0]
   1c42a:	f005 030f 	and.w	r3, r5, #15
   1c42e:	2b08      	cmp	r3, #8
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
   1c430:	462a      	mov	r2, r5
   1c432:	79a1      	ldrb	r1, [r4, #6]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
   1c434:	d80c      	bhi.n	1c450 <trans_anim_start_cb+0x2e>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
   1c436:	f7f2 fee9 	bl	f20c <_lv_obj_get_style_int>
   1c43a:	8120      	strh	r0, [r4, #8]
    tr->prop = 0;
   1c43c:	2300      	movs	r3, #0
    trans_del(tr->obj, tr->part, prop_tmp, tr);
   1c43e:	462a      	mov	r2, r5
    tr->prop = 0;
   1c440:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
   1c442:	79a1      	ldrb	r1, [r4, #6]
   1c444:	4623      	mov	r3, r4
   1c446:	6820      	ldr	r0, [r4, #0]
   1c448:	f7f2 fdfe 	bl	f048 <trans_del>
    tr->prop = prop_tmp;
   1c44c:	80a5      	strh	r5, [r4, #4]
}
   1c44e:	bd38      	pop	{r3, r4, r5, pc}
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
   1c450:	2b0b      	cmp	r3, #11
   1c452:	d803      	bhi.n	1c45c <trans_anim_start_cb+0x3a>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
   1c454:	f7ff ff47 	bl	1c2e6 <_lv_obj_get_style_color>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
   1c458:	60a0      	str	r0, [r4, #8]
   1c45a:	e7ef      	b.n	1c43c <trans_anim_start_cb+0x1a>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
   1c45c:	2b0d      	cmp	r3, #13
   1c45e:	d803      	bhi.n	1c468 <trans_anim_start_cb+0x46>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
   1c460:	f7ff ff7a 	bl	1c358 <_lv_obj_get_style_opa>
   1c464:	7220      	strb	r0, [r4, #8]
   1c466:	e7e9      	b.n	1c43c <trans_anim_start_cb+0x1a>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
   1c468:	f7f3 f926 	bl	f6b8 <_lv_obj_get_style_ptr>
   1c46c:	e7f4      	b.n	1c458 <trans_anim_start_cb+0x36>

0001c46e <update_style_cache_children>:
{
   1c46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c472:	4605      	mov	r5, r0
   1c474:	2700      	movs	r7, #0
   1c476:	b2fe      	uxtb	r6, r7
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c478:	4631      	mov	r1, r6
   1c47a:	4628      	mov	r0, r5
   1c47c:	f7ff fece 	bl	1c21c <lv_obj_get_style_list>
        if(list == NULL) break;
   1c480:	4604      	mov	r4, r0
   1c482:	2800      	cmp	r0, #0
   1c484:	d055      	beq.n	1c532 <update_style_cache_children+0xc4>
        bool ignore_cache_ori = list->ignore_cache;
   1c486:	7943      	ldrb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   1c488:	f248 020c 	movw	r2, #32780	; 0x800c
   1c48c:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
   1c490:	f043 0308 	orr.w	r3, r3, #8
   1c494:	7143      	strb	r3, [r0, #5]
   1c496:	4631      	mov	r1, r6
   1c498:	4628      	mov	r0, r5
   1c49a:	f7ff ff5d 	bl	1c358 <_lv_obj_get_style_opa>
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
   1c49e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   1c4a2:	4258      	negs	r0, r3
   1c4a4:	4158      	adcs	r0, r3
   1c4a6:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1c4a8:	f248 0282 	movw	r2, #32898	; 0x8082
   1c4ac:	f360 1345 	bfi	r3, r0, #5, #1
   1c4b0:	4631      	mov	r1, r6
   1c4b2:	7163      	strb	r3, [r4, #5]
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	f7f2 fea9 	bl	f20c <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   1c4ba:	b2c0      	uxtb	r0, r0
   1c4bc:	fab0 f080 	clz	r0, r0
   1c4c0:	79e3      	ldrb	r3, [r4, #7]
   1c4c2:	0940      	lsrs	r0, r0, #5
   1c4c4:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1c4c8:	f248 028e 	movw	r2, #32910	; 0x808e
   1c4cc:	4631      	mov	r1, r6
   1c4ce:	71e3      	strb	r3, [r4, #7]
   1c4d0:	4628      	mov	r0, r5
   1c4d2:	f7f3 f8f1 	bl	f6b8 <_lv_obj_get_style_ptr>
   1c4d6:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
   1c4d8:	f7f7 f864 	bl	135a4 <lv_theme_get_font_normal>
   1c4dc:	eba9 0200 	sub.w	r2, r9, r0
   1c4e0:	f1d2 0900 	rsbs	r9, r2, #0
   1c4e4:	79e3      	ldrb	r3, [r4, #7]
   1c4e6:	eb49 0902 	adc.w	r9, r9, r2
   1c4ea:	f369 13c7 	bfi	r3, r9, #7, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   1c4ee:	f248 02ad 	movw	r2, #32941	; 0x80ad
   1c4f2:	4631      	mov	r1, r6
   1c4f4:	71e3      	strb	r3, [r4, #7]
   1c4f6:	4628      	mov	r0, r5
   1c4f8:	f7ff ff2e 	bl	1c358 <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   1c4fc:	2800      	cmp	r0, #0
   1c4fe:	bf0c      	ite	eq
   1c500:	2030      	moveq	r0, #48	; 0x30
   1c502:	2020      	movne	r0, #32
   1c504:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1c506:	f248 0280 	movw	r2, #32896	; 0x8080
   1c50a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1c50e:	4318      	orrs	r0, r3
   1c510:	71e0      	strb	r0, [r4, #7]
   1c512:	4631      	mov	r1, r6
   1c514:	4628      	mov	r0, r5
   1c516:	f7f2 fe79 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1c51a:	b188      	cbz	r0, 1c540 <update_style_cache_children+0xd2>
            list->text_space_zero = 0;
   1c51c:	79e3      	ldrb	r3, [r4, #7]
   1c51e:	f36f 1345 	bfc	r3, #5, #1
   1c522:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
   1c524:	7963      	ldrb	r3, [r4, #5]
   1c526:	3701      	adds	r7, #1
   1c528:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   1c52c:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
   1c52e:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   1c530:	d1a1      	bne.n	1c476 <update_style_cache_children+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   1c532:	1d28      	adds	r0, r5, #4
   1c534:	f005 f81d 	bl	21572 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   1c538:	4604      	mov	r4, r0
    while(child) {
   1c53a:	b950      	cbnz	r0, 1c552 <update_style_cache_children+0xe4>
}
   1c53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1c540:	f248 0281 	movw	r2, #32897	; 0x8081
   1c544:	4631      	mov	r1, r6
   1c546:	4628      	mov	r0, r5
   1c548:	f7f2 fe60 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1c54c:	2800      	cmp	r0, #0
   1c54e:	d1e5      	bne.n	1c51c <update_style_cache_children+0xae>
   1c550:	e7e8      	b.n	1c524 <update_style_cache_children+0xb6>
        update_style_cache_children(child);
   1c552:	4620      	mov	r0, r4
   1c554:	f7ff ff8b 	bl	1c46e <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   1c558:	4621      	mov	r1, r4
   1c55a:	4628      	mov	r0, r5
   1c55c:	f7ff fe27 	bl	1c1ae <lv_obj_get_child>
   1c560:	e7ea      	b.n	1c538 <update_style_cache_children+0xca>

0001c562 <invalidate_style_cache>:
{
   1c562:	b538      	push	{r3, r4, r5, lr}
   1c564:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
   1c566:	4610      	mov	r0, r2
   1c568:	f7f2 fa9a 	bl	eaa0 <style_prop_is_cacheble>
   1c56c:	b170      	cbz	r0, 1c58c <invalidate_style_cache+0x2a>
    if(part != LV_OBJ_PART_ALL) {
   1c56e:	29ff      	cmp	r1, #255	; 0xff
   1c570:	d00d      	beq.n	1c58e <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c572:	4628      	mov	r0, r5
   1c574:	f7ff fe52 	bl	1c21c <lv_obj_get_style_list>
        if(list == NULL) return;
   1c578:	b140      	cbz	r0, 1c58c <invalidate_style_cache+0x2a>
        list->valid_cache = 0;
   1c57a:	7943      	ldrb	r3, [r0, #5]
   1c57c:	f36f 0382 	bfc	r3, #2, #1
   1c580:	7143      	strb	r3, [r0, #5]
        result = _lv_ll_get_head(&obj->child_ll);
   1c582:	1d28      	adds	r0, r5, #4
   1c584:	f004 fff5 	bl	21572 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   1c588:	4604      	mov	r4, r0
    while(child) {
   1c58a:	b9e8      	cbnz	r0, 1c5c8 <invalidate_style_cache+0x66>
}
   1c58c:	bd38      	pop	{r3, r4, r5, pc}
   1c58e:	2400      	movs	r4, #0
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c590:	4628      	mov	r0, r5
   1c592:	b2e1      	uxtb	r1, r4
   1c594:	f7ff fe42 	bl	1c21c <lv_obj_get_style_list>
            if(list == NULL) break;
   1c598:	b130      	cbz	r0, 1c5a8 <invalidate_style_cache+0x46>
            list->valid_cache = 0;
   1c59a:	7943      	ldrb	r3, [r0, #5]
   1c59c:	3401      	adds	r4, #1
   1c59e:	f36f 0382 	bfc	r3, #2, #1
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1c5a2:	2c40      	cmp	r4, #64	; 0x40
            list->valid_cache = 0;
   1c5a4:	7143      	strb	r3, [r0, #5]
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1c5a6:	d1f3      	bne.n	1c590 <invalidate_style_cache+0x2e>
   1c5a8:	2440      	movs	r4, #64	; 0x40
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c5aa:	4621      	mov	r1, r4
   1c5ac:	4628      	mov	r0, r5
   1c5ae:	f7ff fe35 	bl	1c21c <lv_obj_get_style_list>
            if(list == NULL) break;
   1c5b2:	2800      	cmp	r0, #0
   1c5b4:	d0e5      	beq.n	1c582 <invalidate_style_cache+0x20>
            list->valid_cache = 0;
   1c5b6:	7943      	ldrb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c5b8:	3401      	adds	r4, #1
   1c5ba:	b2e4      	uxtb	r4, r4
            list->valid_cache = 0;
   1c5bc:	f36f 0382 	bfc	r3, #2, #1
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c5c0:	2cff      	cmp	r4, #255	; 0xff
            list->valid_cache = 0;
   1c5c2:	7143      	strb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1c5c4:	d1f1      	bne.n	1c5aa <invalidate_style_cache+0x48>
   1c5c6:	e7dc      	b.n	1c582 <invalidate_style_cache+0x20>
        update_style_cache_children(child);
   1c5c8:	4620      	mov	r0, r4
   1c5ca:	f7ff ff50 	bl	1c46e <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   1c5ce:	4621      	mov	r1, r4
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	f7ff fdec 	bl	1c1ae <lv_obj_get_child>
   1c5d6:	e7d7      	b.n	1c588 <invalidate_style_cache+0x26>

0001c5d8 <lv_obj_reset_style_list>:
{
   1c5d8:	b538      	push	{r3, r4, r5, lr}
   1c5da:	4604      	mov	r4, r0
   1c5dc:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
   1c5de:	f7f2 fdc1 	bl	f164 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   1c5e2:	4629      	mov	r1, r5
   1c5e4:	4620      	mov	r0, r4
}
   1c5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   1c5ea:	22ff      	movs	r2, #255	; 0xff
   1c5ec:	f7f3 b8c6 	b.w	f77c <lv_obj_refresh_style>

0001c5f0 <report_style_mod_core>:
{
   1c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5f2:	4606      	mov	r6, r0
   1c5f4:	460d      	mov	r5, r1
   1c5f6:	2400      	movs	r4, #0
   1c5f8:	b2e7      	uxtb	r7, r4
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1c5fa:	4639      	mov	r1, r7
   1c5fc:	4628      	mov	r0, r5
   1c5fe:	f7ff fe0d 	bl	1c21c <lv_obj_get_style_list>
        if(list == NULL) break;
   1c602:	b328      	cbz	r0, 1c650 <report_style_mod_core+0x60>
        for(ci = 0; ci < list->style_cnt; ci++) {
   1c604:	7902      	ldrb	r2, [r0, #4]
   1c606:	f04f 0c00 	mov.w	ip, #0
   1c60a:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1c60e:	4672      	mov	r2, lr
   1c610:	fa5f f38c 	uxtb.w	r3, ip
   1c614:	459e      	cmp	lr, r3
   1c616:	d918      	bls.n	1c64a <report_style_mod_core+0x5a>
    if(list->has_trans && list->skip_trans) id++;
   1c618:	8881      	ldrh	r1, [r0, #4]
   1c61a:	f401 71c0 	and.w	r1, r1, #384	; 0x180
   1c61e:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
   1c622:	bf04      	itt	eq
   1c624:	3301      	addeq	r3, #1
   1c626:	b2db      	uxtbeq	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1c628:	b1c2      	cbz	r2, 1c65c <report_style_mod_core+0x6c>
   1c62a:	459e      	cmp	lr, r3
   1c62c:	d916      	bls.n	1c65c <report_style_mod_core+0x6c>
    return list->style_list[id];
   1c62e:	6801      	ldr	r1, [r0, #0]
   1c630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            if(class == style || style == NULL) {
   1c634:	429e      	cmp	r6, r3
   1c636:	d003      	beq.n	1c640 <report_style_mod_core+0x50>
   1c638:	f10c 0c01 	add.w	ip, ip, #1
   1c63c:	2e00      	cmp	r6, #0
   1c63e:	d1e7      	bne.n	1c610 <report_style_mod_core+0x20>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   1c640:	22ff      	movs	r2, #255	; 0xff
   1c642:	4639      	mov	r1, r7
   1c644:	4628      	mov	r0, r5
   1c646:	f7f3 f899 	bl	f77c <lv_obj_refresh_style>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   1c64a:	3401      	adds	r4, #1
   1c64c:	2c40      	cmp	r4, #64	; 0x40
   1c64e:	d1d3      	bne.n	1c5f8 <report_style_mod_core+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   1c650:	1d28      	adds	r0, r5, #4
   1c652:	f004 ff8e 	bl	21572 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   1c656:	4604      	mov	r4, r0
    while(child) {
   1c658:	b910      	cbnz	r0, 1c660 <report_style_mod_core+0x70>
}
   1c65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1c65c:	2300      	movs	r3, #0
   1c65e:	e7e9      	b.n	1c634 <report_style_mod_core+0x44>
        report_style_mod_core(style, child);
   1c660:	4621      	mov	r1, r4
   1c662:	4630      	mov	r0, r6
   1c664:	f7ff ffc4 	bl	1c5f0 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
   1c668:	4621      	mov	r1, r4
   1c66a:	4628      	mov	r0, r5
   1c66c:	f7ff fd9f 	bl	1c1ae <lv_obj_get_child>
   1c670:	e7f1      	b.n	1c656 <report_style_mod_core+0x66>

0001c672 <lv_obj_report_style_mod>:
{
   1c672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c674:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
   1c676:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
   1c678:	f7f5 ffa0 	bl	125bc <lv_disp_get_next>
   1c67c:	4604      	mov	r4, r0
    while(d) {
   1c67e:	b900      	cbnz	r0, 1c682 <lv_obj_report_style_mod+0x10>
}
   1c680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, i) {
   1c682:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1c686:	4638      	mov	r0, r7
   1c688:	f004 ff73 	bl	21572 <_lv_ll_get_head>
   1c68c:	4605      	mov	r5, r0
   1c68e:	b908      	cbnz	r0, 1c694 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
   1c690:	4620      	mov	r0, r4
   1c692:	e7f1      	b.n	1c678 <lv_obj_report_style_mod+0x6>
            report_style_mod_core(style, i);
   1c694:	4629      	mov	r1, r5
   1c696:	4630      	mov	r0, r6
   1c698:	f7ff ffaa 	bl	1c5f0 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
   1c69c:	4629      	mov	r1, r5
   1c69e:	4638      	mov	r0, r7
   1c6a0:	f004 ff6d 	bl	2157e <_lv_ll_get_next>
   1c6a4:	e7f2      	b.n	1c68c <lv_obj_report_style_mod+0x1a>

0001c6a6 <trans_anim_cb>:
{
   1c6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6a8:	4604      	mov	r4, r0
   1c6aa:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
   1c6ac:	7981      	ldrb	r1, [r0, #6]
   1c6ae:	6800      	ldr	r0, [r0, #0]
   1c6b0:	f7ff fdb4 	bl	1c21c <lv_obj_get_style_list>
    lv_style_t * style = _lv_style_list_get_transition_style(list);
   1c6b4:	f001 f829 	bl	1d70a <_lv_style_list_get_transition_style>
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
   1c6b8:	88a1      	ldrh	r1, [r4, #4]
   1c6ba:	f001 030f 	and.w	r3, r1, #15
   1c6be:	2b08      	cmp	r3, #8
   1c6c0:	d817      	bhi.n	1c6f2 <trans_anim_cb+0x4c>
        if(v == 0) x = tr->start_value._int;
   1c6c2:	b955      	cbnz	r5, 1c6da <trans_anim_cb+0x34>
   1c6c4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
   1c6c8:	f000 fea4 	bl	1d414 <_lv_style_set_int>
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
   1c6cc:	88a2      	ldrh	r2, [r4, #4]
   1c6ce:	79a1      	ldrb	r1, [r4, #6]
   1c6d0:	6820      	ldr	r0, [r4, #0]
}
   1c6d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
   1c6d6:	f7f3 b851 	b.w	f77c <lv_obj_refresh_style>
        else if(v == 255) x = tr->end_value._int;
   1c6da:	2dff      	cmp	r5, #255	; 0xff
   1c6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1c6e0:	d0f2      	beq.n	1c6c8 <trans_anim_cb+0x22>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
   1c6e2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   1c6e6:	1ad2      	subs	r2, r2, r3
   1c6e8:	4355      	muls	r5, r2
   1c6ea:	eb03 2525 	add.w	r5, r3, r5, asr #8
   1c6ee:	b22a      	sxth	r2, r5
   1c6f0:	e7ea      	b.n	1c6c8 <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
   1c6f2:	2b0b      	cmp	r3, #11
   1c6f4:	d833      	bhi.n	1c75e <trans_anim_cb+0xb8>
        if(v <= 0) x = tr->start_value._color;
   1c6f6:	2d00      	cmp	r5, #0
   1c6f8:	dc03      	bgt.n	1c702 <trans_anim_cb+0x5c>
   1c6fa:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_color(style, tr->prop, x);
   1c6fc:	f000 fece 	bl	1d49c <_lv_style_set_color>
   1c700:	e7e4      	b.n	1c6cc <trans_anim_cb+0x26>
        else if(v >= 255) x = tr->end_value._color;
   1c702:	2dfe      	cmp	r5, #254	; 0xfe
   1c704:	dd01      	ble.n	1c70a <trans_anim_cb+0x64>
   1c706:	68e2      	ldr	r2, [r4, #12]
   1c708:	e7f8      	b.n	1c6fc <trans_anim_cb+0x56>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1c70a:	7aa6      	ldrb	r6, [r4, #10]
   1c70c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
   1c710:	4356      	muls	r6, r2
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c712:	f894 c009 	ldrb.w	ip, [r4, #9]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1c716:	7ba3      	ldrb	r3, [r4, #14]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c718:	fb02 fc0c 	mul.w	ip, r2, ip
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1c71c:	f894 e008 	ldrb.w	lr, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1c720:	f248 0781 	movw	r7, #32897	; 0x8081
   1c724:	fb15 6303 	smlabb	r3, r5, r3, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1c728:	fb02 f20e 	mul.w	r2, r2, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c72c:	7b66      	ldrb	r6, [r4, #13]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1c72e:	437b      	muls	r3, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c730:	fb15 c606 	smlabb	r6, r5, r6, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1c734:	f894 c00c 	ldrb.w	ip, [r4, #12]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c738:	437e      	muls	r6, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1c73a:	fb15 250c 	smlabb	r5, r5, ip, r2
   1c73e:	2200      	movs	r2, #0
   1c740:	437d      	muls	r5, r7
   1c742:	0ded      	lsrs	r5, r5, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1c744:	f3c6 56c7 	ubfx	r6, r6, #23, #8
   1c748:	f365 0207 	bfi	r2, r5, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1c74c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1c750:	f366 220f 	bfi	r2, r6, #8, #8
   1c754:	f363 4217 	bfi	r2, r3, #16, #8
   1c758:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
   1c75c:	e7ce      	b.n	1c6fc <trans_anim_cb+0x56>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
   1c75e:	2b0d      	cmp	r3, #13
   1c760:	d80f      	bhi.n	1c782 <trans_anim_cb+0xdc>
        if(v <= 0) x = tr->start_value._opa;
   1c762:	2d00      	cmp	r5, #0
   1c764:	dc03      	bgt.n	1c76e <trans_anim_cb+0xc8>
   1c766:	7a22      	ldrb	r2, [r4, #8]
        _lv_style_set_opa(style, tr->prop, x);
   1c768:	f000 fedc 	bl	1d524 <_lv_style_set_opa>
   1c76c:	e7ae      	b.n	1c6cc <trans_anim_cb+0x26>
        else if(v >= 255) x = tr->end_value._opa;
   1c76e:	2dfe      	cmp	r5, #254	; 0xfe
   1c770:	7b22      	ldrb	r2, [r4, #12]
   1c772:	dcf9      	bgt.n	1c768 <trans_anim_cb+0xc2>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
   1c774:	7a23      	ldrb	r3, [r4, #8]
   1c776:	1ad2      	subs	r2, r2, r3
   1c778:	4355      	muls	r5, r2
   1c77a:	eb03 2525 	add.w	r5, r3, r5, asr #8
   1c77e:	b2ea      	uxtb	r2, r5
   1c780:	e7f2      	b.n	1c768 <trans_anim_cb+0xc2>
        if(v < 128) x = tr->start_value._ptr;
   1c782:	2d7f      	cmp	r5, #127	; 0x7f
   1c784:	bfd4      	ite	le
   1c786:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
   1c788:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
   1c78a:	f000 ff11 	bl	1d5b0 <_lv_style_set_ptr>
   1c78e:	e79d      	b.n	1c6cc <trans_anim_cb+0x26>

0001c790 <lv_obj_get_signal_cb>:
}
   1c790:	69c0      	ldr	r0, [r0, #28]
   1c792:	4770      	bx	lr

0001c794 <lv_obj_get_design_cb>:
}
   1c794:	6a00      	ldr	r0, [r0, #32]
   1c796:	4770      	bx	lr

0001c798 <lv_obj_get_ext_attr>:
}
   1c798:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1c79a:	4770      	bx	lr

0001c79c <lv_obj_handle_get_type_signal>:
{
   1c79c:	2300      	movs	r3, #0
   1c79e:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
   1c7a0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1c7a4:	b2da      	uxtb	r2, r3
   1c7a6:	b11c      	cbz	r4, 1c7b0 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   1c7a8:	3301      	adds	r3, #1
   1c7aa:	2b07      	cmp	r3, #7
   1c7ac:	d1f8      	bne.n	1c7a0 <lv_obj_handle_get_type_signal+0x4>
   1c7ae:	461a      	mov	r2, r3
    buf->type[i] = name;
   1c7b0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   1c7b4:	2001      	movs	r0, #1
   1c7b6:	bd10      	pop	{r4, pc}

0001c7b8 <lv_obj_init_draw_rect_dsc>:
{
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1c7bc:	2201      	movs	r2, #1
   1c7be:	4605      	mov	r5, r0
   1c7c0:	460e      	mov	r6, r1
   1c7c2:	f7f2 fd23 	bl	f20c <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   1c7c6:	7ca3      	ldrb	r3, [r4, #18]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
   1c7c8:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   1c7ca:	b33b      	cbz	r3, 1c81c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1c7cc:	222c      	movs	r2, #44	; 0x2c
   1c7ce:	4631      	mov	r1, r6
   1c7d0:	4628      	mov	r0, r5
   1c7d2:	f7ff fdc1 	bl	1c358 <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   1c7d6:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
   1c7d8:	74a0      	strb	r0, [r4, #18]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   1c7da:	d91f      	bls.n	1c81c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1c7dc:	2229      	movs	r2, #41	; 0x29
   1c7de:	4631      	mov	r1, r6
   1c7e0:	4628      	mov	r0, r5
   1c7e2:	f7ff fd80 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
   1c7e6:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
   1c7e8:	6060      	str	r0, [r4, #4]
   1c7ea:	4631      	mov	r1, r6
   1c7ec:	4628      	mov	r0, r5
   1c7ee:	f7f2 fd0d 	bl	f20c <_lv_obj_get_style_int>
   1c7f2:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
   1c7f4:	7320      	strb	r0, [r4, #12]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
   1c7f6:	b188      	cbz	r0, 1c81c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
   1c7f8:	222a      	movs	r2, #42	; 0x2a
   1c7fa:	4631      	mov	r1, r6
   1c7fc:	4628      	mov	r0, r5
   1c7fe:	f7ff fd72 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
   1c802:	2221      	movs	r2, #33	; 0x21
   1c804:	4631      	mov	r1, r6
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
   1c806:	60a0      	str	r0, [r4, #8]
   1c808:	4628      	mov	r0, r5
   1c80a:	f7f2 fcff 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
   1c80e:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
   1c810:	81e0      	strh	r0, [r4, #14]
   1c812:	4631      	mov	r1, r6
   1c814:	4628      	mov	r0, r5
   1c816:	f7f2 fcf9 	bl	f20c <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
   1c81a:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1c81c:	2230      	movs	r2, #48	; 0x30
   1c81e:	4631      	mov	r1, r6
   1c820:	4628      	mov	r0, r5
   1c822:	f7f2 fcf3 	bl	f20c <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
   1c826:	8320      	strh	r0, [r4, #24]
    if(draw_dsc->border_width) {
   1c828:	b1b0      	cbz	r0, 1c858 <lv_obj_init_draw_rect_dsc+0xa0>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
   1c82a:	7f23      	ldrb	r3, [r4, #28]
   1c82c:	b1a3      	cbz	r3, 1c858 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   1c82e:	223c      	movs	r2, #60	; 0x3c
   1c830:	4631      	mov	r1, r6
   1c832:	4628      	mov	r0, r5
   1c834:	f7ff fd90 	bl	1c358 <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   1c838:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
   1c83a:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   1c83c:	d90c      	bls.n	1c858 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1c83e:	2231      	movs	r2, #49	; 0x31
   1c840:	4631      	mov	r1, r6
   1c842:	4628      	mov	r0, r5
   1c844:	f7f2 fce2 	bl	f20c <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
   1c848:	b2c0      	uxtb	r0, r0
   1c84a:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1c84c:	2239      	movs	r2, #57	; 0x39
   1c84e:	4631      	mov	r1, r6
   1c850:	4628      	mov	r0, r5
   1c852:	f7ff fd48 	bl	1c2e6 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
   1c856:	6160      	str	r0, [r4, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   1c858:	2250      	movs	r2, #80	; 0x50
   1c85a:	4631      	mov	r1, r6
   1c85c:	4628      	mov	r0, r5
   1c85e:	f7f2 fcd5 	bl	f20c <_lv_obj_get_style_int>
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
   1c862:	8620      	strh	r0, [r4, #48]	; 0x30
    if(draw_dsc->shadow_width) {
   1c864:	b320      	cbz	r0, 1c8b0 <lv_obj_init_draw_rect_dsc+0xf8>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
   1c866:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c86a:	2b02      	cmp	r3, #2
   1c86c:	d920      	bls.n	1c8b0 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
   1c86e:	225c      	movs	r2, #92	; 0x5c
   1c870:	4631      	mov	r1, r6
   1c872:	4628      	mov	r0, r5
   1c874:	f7ff fd70 	bl	1c358 <_lv_obj_get_style_opa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
   1c878:	2802      	cmp	r0, #2
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
   1c87a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
   1c87e:	d917      	bls.n	1c8b0 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   1c880:	2251      	movs	r2, #81	; 0x51
   1c882:	4631      	mov	r1, r6
   1c884:	4628      	mov	r0, r5
   1c886:	f7f2 fcc1 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   1c88a:	2252      	movs	r2, #82	; 0x52
   1c88c:	4631      	mov	r1, r6
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
   1c88e:	8660      	strh	r0, [r4, #50]	; 0x32
   1c890:	4628      	mov	r0, r5
   1c892:	f7f2 fcbb 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   1c896:	2253      	movs	r2, #83	; 0x53
   1c898:	4631      	mov	r1, r6
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
   1c89a:	86a0      	strh	r0, [r4, #52]	; 0x34
   1c89c:	4628      	mov	r0, r5
   1c89e:	f7f2 fcb5 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   1c8a2:	2259      	movs	r2, #89	; 0x59
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
   1c8a4:	86e0      	strh	r0, [r4, #54]	; 0x36
   1c8a6:	4631      	mov	r1, r6
   1c8a8:	4628      	mov	r0, r5
   1c8aa:	f7ff fd1c 	bl	1c2e6 <_lv_obj_get_style_color>
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
   1c8ae:	62e0      	str	r0, [r4, #44]	; 0x2c
}
   1c8b0:	bd70      	pop	{r4, r5, r6, pc}

0001c8b2 <lv_obj_design>:
{
   1c8b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
   1c8b6:	2a02      	cmp	r2, #2
{
   1c8b8:	4604      	mov	r4, r0
   1c8ba:	4688      	mov	r8, r1
   1c8bc:	4615      	mov	r5, r2
   1c8be:	b09e      	sub	sp, #120	; 0x78
    if(mode == LV_DESIGN_COVER_CHK) {
   1c8c0:	d15b      	bne.n	1c97a <lv_obj_design+0xc8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   1c8c2:	2100      	movs	r1, #0
   1c8c4:	f7ff fd40 	bl	1c348 <lv_obj_get_style_clip_corner>
   1c8c8:	4606      	mov	r6, r0
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	d153      	bne.n	1c976 <lv_obj_design+0xc4>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1c8ce:	4601      	mov	r1, r0
   1c8d0:	2201      	movs	r2, #1
   1c8d2:	4620      	mov	r0, r4
   1c8d4:	f7f2 fc9a 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1c8d8:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1c8da:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1c8dc:	4631      	mov	r1, r6
   1c8de:	4620      	mov	r0, r4
   1c8e0:	f7f2 fc94 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1c8e4:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1c8e6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1c8e8:	4631      	mov	r1, r6
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	f7f2 fc8e 	bl	f20c <_lv_obj_get_style_int>
   1c8f0:	4681      	mov	r9, r0
        lv_area_copy(&coords, &obj->coords);
   1c8f2:	f104 0110 	add.w	r1, r4, #16
   1c8f6:	a804      	add	r0, sp, #16
   1c8f8:	f7ff faf6 	bl	1bee8 <lv_area_copy>
        coords.x1 -= w;
   1c8fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        coords.x2 += w;
   1c900:	f8bd 0014 	ldrh.w	r0, [sp, #20]
        coords.x1 -= w;
   1c904:	1bdb      	subs	r3, r3, r7
   1c906:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.x2 += w;
   1c90a:	4407      	add	r7, r0
        coords.y1 -= h;
   1c90c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        coords.y2 += h;
   1c910:	f8bd 0016 	ldrh.w	r0, [sp, #22]
        coords.y1 -= h;
   1c914:	eba3 0309 	sub.w	r3, r3, r9
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   1c918:	4652      	mov	r2, sl
        coords.y2 += h;
   1c91a:	4481      	add	r9, r0
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   1c91c:	a904      	add	r1, sp, #16
   1c91e:	4640      	mov	r0, r8
        coords.x2 += w;
   1c920:	f8ad 7014 	strh.w	r7, [sp, #20]
        coords.y1 -= h;
   1c924:	f8ad 3012 	strh.w	r3, [sp, #18]
        coords.y2 += h;
   1c928:	f8ad 9016 	strh.w	r9, [sp, #22]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   1c92c:	f004 fc5d 	bl	211ea <_lv_area_is_in>
   1c930:	b1e8      	cbz	r0, 1c96e <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1c932:	222c      	movs	r2, #44	; 0x2c
   1c934:	4631      	mov	r1, r6
   1c936:	4620      	mov	r0, r4
   1c938:	f7ff fd0e 	bl	1c358 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
   1c93c:	28fc      	cmp	r0, #252	; 0xfc
   1c93e:	d916      	bls.n	1c96e <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
   1c940:	4631      	mov	r1, r6
   1c942:	2220      	movs	r2, #32
   1c944:	4620      	mov	r0, r4
   1c946:	f7f2 fc61 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   1c94a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   1c94e:	d10e      	bne.n	1c96e <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
   1c950:	2232      	movs	r2, #50	; 0x32
   1c952:	4620      	mov	r0, r4
   1c954:	f7f2 fc5a 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   1c958:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   1c95c:	d107      	bne.n	1c96e <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   1c95e:	f248 020c 	movw	r2, #32780	; 0x800c
   1c962:	4620      	mov	r0, r4
   1c964:	f7ff fcf8 	bl	1c358 <_lv_obj_get_style_opa>
        return  LV_DESIGN_RES_COVER;
   1c968:	28fc      	cmp	r0, #252	; 0xfc
   1c96a:	bf88      	it	hi
   1c96c:	2501      	movhi	r5, #1
}
   1c96e:	4628      	mov	r0, r5
   1c970:	b01e      	add	sp, #120	; 0x78
   1c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   1c976:	2503      	movs	r5, #3
   1c978:	e7f9      	b.n	1c96e <lv_obj_design+0xbc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   1c97a:	2a00      	cmp	r2, #0
   1c97c:	d178      	bne.n	1ca70 <lv_obj_design+0x1be>
        lv_draw_rect_dsc_init(&draw_dsc);
   1c97e:	a804      	add	r0, sp, #16
   1c980:	f7f5 f964 	bl	11c4c <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1c984:	2233      	movs	r2, #51	; 0x33
   1c986:	4629      	mov	r1, r5
   1c988:	4620      	mov	r0, r4
   1c98a:	f7f2 fc3f 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   1c98e:	b128      	cbz	r0, 1c99c <lv_obj_design+0xea>
            draw_dsc.border_post = 1;
   1c990:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   1c994:	f043 0301 	orr.w	r3, r3, #1
   1c998:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   1c99c:	2100      	movs	r1, #0
   1c99e:	4620      	mov	r0, r4
   1c9a0:	aa04      	add	r2, sp, #16
   1c9a2:	f7ff ff09 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1c9a6:	2204      	movs	r2, #4
   1c9a8:	2100      	movs	r1, #0
   1c9aa:	4620      	mov	r0, r4
   1c9ac:	f7f2 fc2e 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1c9b0:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1c9b2:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1c9b4:	2100      	movs	r1, #0
   1c9b6:	4620      	mov	r0, r4
   1c9b8:	f7f2 fc28 	bl	f20c <_lv_obj_get_style_int>
   1c9bc:	4607      	mov	r7, r0
        lv_area_copy(&coords, &obj->coords);
   1c9be:	f104 0910 	add.w	r9, r4, #16
   1c9c2:	4649      	mov	r1, r9
   1c9c4:	4668      	mov	r0, sp
   1c9c6:	f7ff fa8f 	bl	1bee8 <lv_area_copy>
        coords.x1 -= w;
   1c9ca:	f8bd 3000 	ldrh.w	r3, [sp]
        coords.x2 += w;
   1c9ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
        coords.x1 -= w;
   1c9d2:	1b9b      	subs	r3, r3, r6
   1c9d4:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 += w;
   1c9d8:	4406      	add	r6, r0
        coords.y1 -= h;
   1c9da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
        coords.y2 += h;
   1c9de:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        coords.y1 -= h;
   1c9e2:	1bdb      	subs	r3, r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   1c9e4:	4641      	mov	r1, r8
        coords.y2 += h;
   1c9e6:	4407      	add	r7, r0
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   1c9e8:	aa04      	add	r2, sp, #16
   1c9ea:	4668      	mov	r0, sp
        coords.x2 += w;
   1c9ec:	f8ad 6004 	strh.w	r6, [sp, #4]
        coords.y1 -= h;
   1c9f0:	f8ad 3002 	strh.w	r3, [sp, #2]
        coords.y2 += h;
   1c9f4:	f8ad 7006 	strh.w	r7, [sp, #6]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   1c9f8:	f002 fd91 	bl	1f51e <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   1c9fc:	2100      	movs	r1, #0
   1c9fe:	4620      	mov	r0, r4
   1ca00:	f7ff fca2 	bl	1c348 <lv_obj_get_style_clip_corner>
   1ca04:	2800      	cmp	r0, #0
   1ca06:	d0b2      	beq.n	1c96e <lv_obj_design+0xbc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
   1ca08:	201c      	movs	r0, #28
   1ca0a:	f7f6 f881 	bl	12b10 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1ca0e:	2201      	movs	r2, #1
   1ca10:	4606      	mov	r6, r0
   1ca12:	2100      	movs	r1, #0
   1ca14:	4620      	mov	r0, r4
   1ca16:	f7f2 fbf9 	bl	f20c <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
   1ca1a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   1ca1e:	4602      	mov	r2, r0
   1ca20:	07db      	lsls	r3, r3, #31
   1ca22:	d522      	bpl.n	1ca6a <lv_obj_design+0x1b8>
   1ca24:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1ca28:	2b01      	cmp	r3, #1
   1ca2a:	d91e      	bls.n	1ca6a <lv_obj_design+0x1b8>
   1ca2c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   1ca30:	2b00      	cmp	r3, #0
   1ca32:	dd1a      	ble.n	1ca6a <lv_obj_design+0x1b8>
                cc_area.x1 = obj->coords.x1 + 1;
   1ca34:	8a23      	ldrh	r3, [r4, #16]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
   1ca36:	a902      	add	r1, sp, #8
                cc_area.x1 = obj->coords.x1 + 1;
   1ca38:	3301      	adds	r3, #1
   1ca3a:	f8ad 3008 	strh.w	r3, [sp, #8]
                cc_area.y1 = obj->coords.y1 + 1;
   1ca3e:	8a63      	ldrh	r3, [r4, #18]
   1ca40:	3301      	adds	r3, #1
   1ca42:	f8ad 300a 	strh.w	r3, [sp, #10]
                cc_area.x2 = obj->coords.x2 - 1;
   1ca46:	8aa3      	ldrh	r3, [r4, #20]
   1ca48:	3b01      	subs	r3, #1
   1ca4a:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y2 = obj->coords.y2 - 1;
   1ca4e:	8ae3      	ldrh	r3, [r4, #22]
   1ca50:	3b01      	subs	r3, #1
   1ca52:	f8ad 300e 	strh.w	r3, [sp, #14]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
   1ca56:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   1ca58:	4630      	mov	r0, r6
   1ca5a:	f7f5 f8b3 	bl	11bc4 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
   1ca5e:	4630      	mov	r0, r6
   1ca60:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
   1ca64:	f7f4 ffae 	bl	119c4 <lv_draw_mask_add>
   1ca68:	e781      	b.n	1c96e <lv_obj_design+0xbc>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   1ca6a:	2300      	movs	r3, #0
   1ca6c:	4649      	mov	r1, r9
   1ca6e:	e7f3      	b.n	1ca58 <lv_obj_design+0x1a6>
    else if(mode == LV_DESIGN_DRAW_POST) {
   1ca70:	2a01      	cmp	r2, #1
   1ca72:	d001      	beq.n	1ca78 <lv_obj_design+0x1c6>
    return LV_DESIGN_RES_OK;
   1ca74:	2500      	movs	r5, #0
   1ca76:	e77a      	b.n	1c96e <lv_obj_design+0xbc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   1ca78:	2100      	movs	r1, #0
   1ca7a:	f7ff fc65 	bl	1c348 <lv_obj_get_style_clip_corner>
   1ca7e:	b128      	cbz	r0, 1ca8c <lv_obj_design+0x1da>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
   1ca80:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   1ca84:	f7f4 fff8 	bl	11a78 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
   1ca88:	f7f6 f8a4 	bl	12bd4 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1ca8c:	2233      	movs	r2, #51	; 0x33
   1ca8e:	2100      	movs	r1, #0
   1ca90:	4620      	mov	r0, r4
   1ca92:	f7f2 fbbb 	bl	f20c <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   1ca96:	2800      	cmp	r0, #0
   1ca98:	d0ec      	beq.n	1ca74 <lv_obj_design+0x1c2>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   1ca9a:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
   1ca9c:	a804      	add	r0, sp, #16
   1ca9e:	f7f5 f8d5 	bl	11c4c <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   1caa2:	4629      	mov	r1, r5
   1caa4:	4620      	mov	r0, r4
   1caa6:	aa04      	add	r2, sp, #16
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   1caa8:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
   1caac:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
   1cab0:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            draw_dsc.value_opa = LV_OPA_TRANSP;
   1cab4:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   1cab8:	f7ff fe7e 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1cabc:	4629      	mov	r1, r5
   1cabe:	2204      	movs	r2, #4
   1cac0:	4620      	mov	r0, r4
   1cac2:	f7f2 fba3 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1cac6:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1cac8:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1caca:	4629      	mov	r1, r5
   1cacc:	4620      	mov	r0, r4
   1cace:	f7f2 fb9d 	bl	f20c <_lv_obj_get_style_int>
   1cad2:	4606      	mov	r6, r0
            lv_area_copy(&coords, &obj->coords);
   1cad4:	f104 0110 	add.w	r1, r4, #16
   1cad8:	a802      	add	r0, sp, #8
   1cada:	f7ff fa05 	bl	1bee8 <lv_area_copy>
            coords.x1 -= w;
   1cade:	f8bd 3008 	ldrh.w	r3, [sp, #8]
            coords.x2 += w;
   1cae2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            coords.x1 -= w;
   1cae6:	1bdb      	subs	r3, r3, r7
   1cae8:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.x2 += w;
   1caec:	4407      	add	r7, r0
            coords.y1 -= h;
   1caee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
            coords.y2 += h;
   1caf2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
            coords.y1 -= h;
   1caf6:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   1caf8:	4641      	mov	r1, r8
            coords.y2 += h;
   1cafa:	4406      	add	r6, r0
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   1cafc:	aa04      	add	r2, sp, #16
   1cafe:	a802      	add	r0, sp, #8
            coords.x2 += w;
   1cb00:	f8ad 700c 	strh.w	r7, [sp, #12]
            coords.y1 -= h;
   1cb04:	f8ad 300a 	strh.w	r3, [sp, #10]
            coords.y2 += h;
   1cb08:	f8ad 600e 	strh.w	r6, [sp, #14]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   1cb0c:	f002 fd07 	bl	1f51e <lv_draw_rect>
   1cb10:	e72d      	b.n	1c96e <lv_obj_design+0xbc>

0001cb12 <lv_obj_init_draw_label_dsc>:
{
   1cb12:	b570      	push	{r4, r5, r6, lr}
   1cb14:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
   1cb16:	f248 028c 	movw	r2, #32908	; 0x808c
   1cb1a:	4605      	mov	r5, r0
   1cb1c:	460e      	mov	r6, r1
   1cb1e:	f7ff fc1b 	bl	1c358 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   1cb22:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
   1cb24:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   1cb26:	d932      	bls.n	1cb8e <lv_obj_init_draw_label_dsc+0x7c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1cb28:	f248 0289 	movw	r2, #32905	; 0x8089
   1cb2c:	4631      	mov	r1, r6
   1cb2e:	4628      	mov	r0, r5
   1cb30:	f7ff fbd9 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1cb34:	f248 0280 	movw	r2, #32896	; 0x8080
   1cb38:	4631      	mov	r1, r6
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
   1cb3a:	6020      	str	r0, [r4, #0]
   1cb3c:	4628      	mov	r0, r5
   1cb3e:	f7f2 fb65 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1cb42:	f248 0281 	movw	r2, #32897	; 0x8081
   1cb46:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
   1cb48:	8220      	strh	r0, [r4, #16]
   1cb4a:	4628      	mov	r0, r5
   1cb4c:	f7f2 fb5e 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1cb50:	f248 0282 	movw	r2, #32898	; 0x8082
   1cb54:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
   1cb56:	81e0      	strh	r0, [r4, #14]
   1cb58:	4628      	mov	r0, r5
   1cb5a:	f7f2 fb57 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1cb5e:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1cb62:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1cb66:	4631      	mov	r1, r6
   1cb68:	4628      	mov	r0, r5
   1cb6a:	f7f2 fda5 	bl	f6b8 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   1cb6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cb72:	6962      	ldr	r2, [r4, #20]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
   1cb74:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   1cb76:	429a      	cmp	r2, r3
   1cb78:	d009      	beq.n	1cb8e <lv_obj_init_draw_label_dsc+0x7c>
   1cb7a:	69a2      	ldr	r2, [r4, #24]
   1cb7c:	429a      	cmp	r2, r3
   1cb7e:	d006      	beq.n	1cb8e <lv_obj_init_draw_label_dsc+0x7c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
   1cb80:	f248 028a 	movw	r2, #32906	; 0x808a
   1cb84:	4631      	mov	r1, r6
   1cb86:	4628      	mov	r0, r5
   1cb88:	f7ff fbad 	bl	1c2e6 <_lv_obj_get_style_color>
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
   1cb8c:	6020      	str	r0, [r4, #0]
}
   1cb8e:	bd70      	pop	{r4, r5, r6, pc}

0001cb90 <lv_obj_init_draw_img_dsc>:
{
   1cb90:	b570      	push	{r4, r5, r6, lr}
   1cb92:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
   1cb94:	f248 02ac 	movw	r2, #32940	; 0x80ac
   1cb98:	4605      	mov	r5, r0
   1cb9a:	460e      	mov	r6, r1
   1cb9c:	f7ff fbdc 	bl	1c358 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   1cba0:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
   1cba2:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   1cba4:	d927      	bls.n	1cbf6 <lv_obj_init_draw_img_dsc+0x66>
    draw_dsc->angle = 0;
   1cba6:	2300      	movs	r3, #0
   1cba8:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
   1cbaa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cbae:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1cbb0:	8aab      	ldrh	r3, [r5, #20]
   1cbb2:	8a2a      	ldrh	r2, [r5, #16]
   1cbb4:	3301      	adds	r3, #1
   1cbb6:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
   1cbb8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1cbbc:	fa02 f383 	sxtah	r3, r2, r3
   1cbc0:	105b      	asrs	r3, r3, #1
   1cbc2:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1cbc4:	8aeb      	ldrh	r3, [r5, #22]
   1cbc6:	8a6a      	ldrh	r2, [r5, #18]
   1cbc8:	3301      	adds	r3, #1
   1cbca:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
   1cbcc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1cbd0:	fa02 f383 	sxtah	r3, r2, r3
   1cbd4:	105b      	asrs	r3, r3, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   1cbd6:	f248 02ad 	movw	r2, #32941	; 0x80ad
   1cbda:	4631      	mov	r1, r6
   1cbdc:	4628      	mov	r0, r5
   1cbde:	80e3      	strh	r3, [r4, #6]
   1cbe0:	f7ff fbba 	bl	1c358 <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
   1cbe4:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
   1cbe6:	b130      	cbz	r0, 1cbf6 <lv_obj_init_draw_img_dsc+0x66>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1cbe8:	f248 02a9 	movw	r2, #32937	; 0x80a9
   1cbec:	4631      	mov	r1, r6
   1cbee:	4628      	mov	r0, r5
   1cbf0:	f7ff fb79 	bl	1c2e6 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
   1cbf4:	60e0      	str	r0, [r4, #12]
}
   1cbf6:	bd70      	pop	{r4, r5, r6, pc}

0001cbf8 <lv_obj_init_draw_line_dsc>:
{
   1cbf8:	b570      	push	{r4, r5, r6, lr}
   1cbfa:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1cbfc:	2290      	movs	r2, #144	; 0x90
   1cbfe:	4605      	mov	r5, r0
   1cc00:	460e      	mov	r6, r1
   1cc02:	f7f2 fb03 	bl	f20c <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
   1cc06:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->width == 0) return;
   1cc08:	b340      	cbz	r0, 1cc5c <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
   1cc0a:	229c      	movs	r2, #156	; 0x9c
   1cc0c:	4631      	mov	r1, r6
   1cc0e:	4628      	mov	r0, r5
   1cc10:	f7ff fba2 	bl	1c358 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   1cc14:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
   1cc16:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   1cc18:	d920      	bls.n	1cc5c <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1cc1a:	2299      	movs	r2, #153	; 0x99
   1cc1c:	4631      	mov	r1, r6
   1cc1e:	4628      	mov	r0, r5
   1cc20:	f7ff fb61 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   1cc24:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
   1cc26:	6020      	str	r0, [r4, #0]
   1cc28:	4631      	mov	r1, r6
   1cc2a:	4628      	mov	r0, r5
   1cc2c:	f7f2 faee 	bl	f20c <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
   1cc30:	80e0      	strh	r0, [r4, #6]
    if(draw_dsc->dash_width) {
   1cc32:	b128      	cbz	r0, 1cc40 <lv_obj_init_draw_line_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   1cc34:	2293      	movs	r2, #147	; 0x93
   1cc36:	4631      	mov	r1, r6
   1cc38:	4628      	mov	r0, r5
   1cc3a:	f7f2 fae7 	bl	f20c <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
   1cc3e:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   1cc40:	2294      	movs	r2, #148	; 0x94
   1cc42:	4631      	mov	r1, r6
   1cc44:	4628      	mov	r0, r5
   1cc46:	f7f2 fae1 	bl	f20c <_lv_obj_get_style_int>
   1cc4a:	3800      	subs	r0, #0
   1cc4c:	bf18      	it	ne
   1cc4e:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
   1cc50:	7ae3      	ldrb	r3, [r4, #11]
   1cc52:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
   1cc56:	f360 03c3 	bfi	r3, r0, #3, #1
   1cc5a:	72e3      	strb	r3, [r4, #11]
}
   1cc5c:	bd70      	pop	{r4, r5, r6, pc}

0001cc5e <style_snapshot>:
{
   1cc5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc62:	4614      	mov	r4, r2
   1cc64:	4605      	mov	r5, r0
   1cc66:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
   1cc68:	2101      	movs	r1, #1
   1cc6a:	f7ff fb09 	bl	1c280 <_lv_obj_disable_style_caching>
    memset(dst, 0x00, len);
   1cc6e:	22dc      	movs	r2, #220	; 0xdc
   1cc70:	2100      	movs	r1, #0
   1cc72:	4620      	mov	r0, r4
   1cc74:	f7fc faf3 	bl	1925e <memset>
    lv_draw_label_dsc_init(&shot->label);
   1cc78:	f104 0a68 	add.w	sl, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&shot->rect);
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7f4 ffe5 	bl	11c4c <lv_draw_rect_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
   1cc82:	f104 0998 	add.w	r9, r4, #152	; 0x98
    lv_draw_label_dsc_init(&shot->label);
   1cc86:	4650      	mov	r0, sl
   1cc88:	f7f3 fe1a 	bl	108c0 <lv_draw_label_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   1cc8c:	f104 088c 	add.w	r8, r4, #140	; 0x8c
    lv_draw_img_dsc_init(&shot->img);
   1cc90:	4648      	mov	r0, r9
   1cc92:	f001 fe82 	bl	1e99a <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   1cc96:	4640      	mov	r0, r8
   1cc98:	f001 fecc 	bl	1ea34 <lv_draw_line_dsc_init>
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1cc9c:	4631      	mov	r1, r6
   1cc9e:	4628      	mov	r0, r5
   1cca0:	f7ff fabc 	bl	1c21c <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
   1cca4:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1cca6:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
   1cca8:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
   1ccac:	f043 0301 	orr.w	r3, r3, #1
   1ccb0:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
   1ccb2:	4622      	mov	r2, r4
   1ccb4:	4631      	mov	r1, r6
   1ccb6:	4628      	mov	r0, r5
   1ccb8:	f7ff fd7e 	bl	1c7b8 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
   1ccbc:	4652      	mov	r2, sl
   1ccbe:	4631      	mov	r1, r6
   1ccc0:	4628      	mov	r0, r5
   1ccc2:	f7ff ff26 	bl	1cb12 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
   1ccc6:	464a      	mov	r2, r9
   1ccc8:	4631      	mov	r1, r6
   1ccca:	4628      	mov	r0, r5
   1cccc:	f7ff ff60 	bl	1cb90 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
   1ccd0:	4642      	mov	r2, r8
   1ccd2:	4631      	mov	r1, r6
   1ccd4:	4628      	mov	r0, r5
   1ccd6:	f7ff ff8f 	bl	1cbf8 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ccda:	2210      	movs	r2, #16
   1ccdc:	4631      	mov	r1, r6
   1ccde:	4628      	mov	r0, r5
   1cce0:	f7f2 fa94 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1cce4:	2211      	movs	r2, #17
   1cce6:	4631      	mov	r1, r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
   1cce8:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
   1ccec:	4628      	mov	r0, r5
   1ccee:	f7f2 fa8d 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ccf2:	2213      	movs	r2, #19
   1ccf4:	4631      	mov	r1, r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
   1ccf6:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   1ccfa:	4628      	mov	r0, r5
   1ccfc:	f7f2 fa86 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1cd00:	2212      	movs	r2, #18
   1cd02:	4631      	mov	r1, r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
   1cd04:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
   1cd08:	4628      	mov	r0, r5
   1cd0a:	f7f2 fa7f 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1cd0e:	2214      	movs	r2, #20
   1cd10:	4631      	mov	r1, r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
   1cd12:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
   1cd16:	4628      	mov	r0, r5
   1cd18:	f7f2 fa78 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   1cd1c:	2215      	movs	r2, #21
   1cd1e:	4631      	mov	r1, r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
   1cd20:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
   1cd24:	4628      	mov	r0, r5
   1cd26:	f7f2 fa71 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   1cd2a:	2216      	movs	r2, #22
   1cd2c:	4631      	mov	r1, r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
   1cd2e:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
   1cd32:	4628      	mov	r0, r5
   1cd34:	f7f2 fa6a 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   1cd38:	2217      	movs	r2, #23
   1cd3a:	4631      	mov	r1, r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
   1cd3c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
   1cd40:	4628      	mov	r0, r5
   1cd42:	f7f2 fa63 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   1cd46:	2218      	movs	r2, #24
   1cd48:	4631      	mov	r1, r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
   1cd4a:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
   1cd4e:	4628      	mov	r0, r5
   1cd50:	f7f2 fa5c 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   1cd54:	2203      	movs	r2, #3
   1cd56:	4631      	mov	r1, r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
   1cd58:	f8a4 00bc 	strh.w	r0, [r4, #188]	; 0xbc
   1cd5c:	4628      	mov	r0, r5
   1cd5e:	f7f2 fa55 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1cd62:	2204      	movs	r2, #4
   1cd64:	4631      	mov	r1, r6
    shot->size = lv_obj_get_style_size(obj, part);
   1cd66:	f8a4 00be 	strh.w	r0, [r4, #190]	; 0xbe
   1cd6a:	4628      	mov	r0, r5
   1cd6c:	f7f2 fa4e 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1cd70:	2205      	movs	r2, #5
   1cd72:	4631      	mov	r1, r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
   1cd74:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   1cd78:	4628      	mov	r0, r5
   1cd7a:	f7f2 fa47 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   1cd7e:	2206      	movs	r2, #6
   1cd80:	4631      	mov	r1, r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
   1cd82:	f8a4 00c2 	strh.w	r0, [r4, #194]	; 0xc2
   1cd86:	4628      	mov	r0, r5
   1cd88:	f7f2 fa40 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   1cd8c:	2207      	movs	r2, #7
   1cd8e:	4631      	mov	r1, r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
   1cd90:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
   1cd94:	4628      	mov	r0, r5
   1cd96:	f7f2 fa39 	bl	f20c <_lv_obj_get_style_int>
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   1cd9a:	22c0      	movs	r2, #192	; 0xc0
   1cd9c:	4631      	mov	r1, r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
   1cd9e:	f8a4 00c6 	strh.w	r0, [r4, #198]	; 0xc6
   1cda2:	4628      	mov	r0, r5
   1cda4:	f7f2 fa32 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
   1cda8:	22c1      	movs	r2, #193	; 0xc1
   1cdaa:	4631      	mov	r1, r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
   1cdac:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
   1cdb0:	4628      	mov	r0, r5
   1cdb2:	f7f2 fa2b 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   1cdb6:	22c2      	movs	r2, #194	; 0xc2
   1cdb8:	4631      	mov	r1, r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
   1cdba:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
   1cdbe:	4628      	mov	r0, r5
   1cdc0:	f7f2 fa24 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   1cdc4:	22c3      	movs	r2, #195	; 0xc3
   1cdc6:	4631      	mov	r1, r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
   1cdc8:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
   1cdcc:	4628      	mov	r0, r5
   1cdce:	f7f2 fa1d 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   1cdd2:	22c9      	movs	r2, #201	; 0xc9
   1cdd4:	4631      	mov	r1, r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
   1cdd6:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
   1cdda:	4628      	mov	r0, r5
   1cddc:	f7ff fa83 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   1cde0:	22ca      	movs	r2, #202	; 0xca
   1cde2:	4631      	mov	r1, r6
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
   1cde4:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
   1cde8:	4628      	mov	r0, r5
   1cdea:	f7ff fa7c 	bl	1c2e6 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   1cdee:	f248 020c 	movw	r2, #32780	; 0x800c
   1cdf2:	4631      	mov	r1, r6
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
   1cdf4:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
   1cdf8:	4628      	mov	r0, r5
   1cdfa:	f7ff faad 	bl	1c358 <_lv_obj_get_style_opa>
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   1cdfe:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
   1ce00:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   1ce04:	4628      	mov	r0, r5
   1ce06:	f7ff fa9f 	bl	1c348 <lv_obj_get_style_clip_corner>
   1ce0a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1ce0e:	2233      	movs	r2, #51	; 0x33
   1ce10:	f360 0300 	bfi	r3, r0, #0, #1
   1ce14:	4631      	mov	r1, r6
   1ce16:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   1ce1a:	4628      	mov	r0, r5
   1ce1c:	f7f2 f9f6 	bl	f20c <_lv_obj_get_style_int>
   1ce20:	3800      	subs	r0, #0
   1ce22:	bf18      	it	ne
   1ce24:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
   1ce26:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
    _lv_obj_disable_style_caching(obj, false);
   1ce2a:	2100      	movs	r1, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
   1ce2c:	f360 0341 	bfi	r3, r0, #1, #1
   1ce30:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    _lv_obj_disable_style_caching(obj, false);
   1ce34:	4628      	mov	r0, r5
   1ce36:	f7ff fa23 	bl	1c280 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
   1ce3a:	797b      	ldrb	r3, [r7, #5]
   1ce3c:	f36b 0300 	bfi	r3, fp, #0, #1
   1ce40:	717b      	strb	r3, [r7, #5]
}
   1ce42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ce46 <lv_obj_add_state>:
{
   1ce46:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
   1ce48:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    if(obj->state != new_state) {
   1ce4c:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
   1ce4e:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
   1ce52:	d001      	beq.n	1ce58 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
   1ce54:	f7f2 bd14 	b.w	f880 <lv_obj_set_state>
}
   1ce58:	4770      	bx	lr

0001ce5a <lv_obj_clear_state>:
{
   1ce5a:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
   1ce5c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    if(obj->state != new_state) {
   1ce60:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
   1ce62:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
   1ce66:	d001      	beq.n	1ce6c <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
   1ce68:	f7f2 bd0a 	b.w	f880 <lv_obj_set_state>
}
   1ce6c:	4770      	bx	lr

0001ce6e <lv_obj_get_draw_rect_ext_pad_size>:
{
   1ce6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   1ce72:	2250      	movs	r2, #80	; 0x50
   1ce74:	b088      	sub	sp, #32
   1ce76:	4605      	mov	r5, r0
   1ce78:	460e      	mov	r6, r1
   1ce7a:	f7f2 f9c7 	bl	f20c <_lv_obj_get_style_int>
    if(sh_width) {
   1ce7e:	4604      	mov	r4, r0
   1ce80:	2800      	cmp	r0, #0
   1ce82:	f040 80bb 	bne.w	1cffc <lv_obj_get_draw_rect_ext_pad_size+0x18e>
    lv_coord_t s = 0;
   1ce86:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   1ce88:	227f      	movs	r2, #127	; 0x7f
   1ce8a:	4631      	mov	r1, r6
   1ce8c:	4628      	mov	r0, r5
   1ce8e:	f7f2 fc13 	bl	f6b8 <_lv_obj_get_style_ptr>
    if(value_str) {
   1ce92:	4607      	mov	r7, r0
   1ce94:	2800      	cmp	r0, #0
   1ce96:	f000 8082 	beq.w	1cf9e <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
   1ce9a:	227c      	movs	r2, #124	; 0x7c
   1ce9c:	4631      	mov	r1, r6
   1ce9e:	4628      	mov	r0, r5
   1cea0:	f7ff fa5a 	bl	1c358 <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
   1cea4:	2802      	cmp	r0, #2
   1cea6:	d97a      	bls.n	1cf9e <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   1cea8:	2270      	movs	r2, #112	; 0x70
   1ceaa:	4631      	mov	r1, r6
   1ceac:	4628      	mov	r0, r5
   1ceae:	f7f2 f9ad 	bl	f20c <_lv_obj_get_style_int>
   1ceb2:	2270      	movs	r2, #112	; 0x70
   1ceb4:	4680      	mov	r8, r0
   1ceb6:	4631      	mov	r1, r6
   1ceb8:	4628      	mov	r0, r5
   1ceba:	f7f2 f9a7 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   1cebe:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   1cec0:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   1cec2:	4631      	mov	r1, r6
   1cec4:	4628      	mov	r0, r5
   1cec6:	f7f2 fbf7 	bl	f6b8 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
   1ceca:	f04f 0a00 	mov.w	sl, #0
   1cece:	f647 4318 	movw	r3, #31768	; 0x7c18
   1ced2:	4602      	mov	r2, r0
   1ced4:	4639      	mov	r1, r7
   1ced6:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   1ceda:	f8cd 9000 	str.w	r9, [sp]
   1cede:	4643      	mov	r3, r8
   1cee0:	a804      	add	r0, sp, #16
   1cee2:	f7f6 f991 	bl	13208 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
   1cee6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   1ceea:	2275      	movs	r2, #117	; 0x75
   1ceec:	3b01      	subs	r3, #1
   1ceee:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
   1cef2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1cef6:	4631      	mov	r1, r6
   1cef8:	3b01      	subs	r3, #1
   1cefa:	4628      	mov	r0, r5
   1cefc:	f8ad 301e 	strh.w	r3, [sp, #30]
            value_area.x1 = 0;
   1cf00:	f8cd a018 	str.w	sl, [sp, #24]
   1cf04:	f7f2 f982 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   1cf08:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   1cf0a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   1cf0c:	4631      	mov	r1, r6
   1cf0e:	4628      	mov	r0, r5
   1cf10:	f7f2 f97c 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   1cf14:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   1cf16:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   1cf18:	4631      	mov	r1, r6
   1cf1a:	4628      	mov	r0, r5
   1cf1c:	f7f2 f976 	bl	f20c <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
   1cf20:	ab05      	add	r3, sp, #20
   1cf22:	4607      	mov	r7, r0
   1cf24:	fa5f f289 	uxtb.w	r2, r9
   1cf28:	a906      	add	r1, sp, #24
   1cf2a:	f105 0010 	add.w	r0, r5, #16
   1cf2e:	f004 f9ac 	bl	2128a <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
   1cf32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1cf36:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1cf3a:	4443      	add	r3, r8
   1cf3c:	fa01 f183 	sxtah	r1, r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   1cf40:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
   1cf44:	b209      	sxth	r1, r1
   1cf46:	1a52      	subs	r2, r2, r1
   1cf48:	4294      	cmp	r4, r2
   1cf4a:	bfb8      	it	lt
   1cf4c:	4614      	movlt	r4, r2
            value_area.y1 += p_align.y + yofs;
   1cf4e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1cf52:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1cf56:	4438      	add	r0, r7
   1cf58:	fa01 f180 	sxtah	r1, r1, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
   1cf5c:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   1cf60:	b209      	sxth	r1, r1
   1cf62:	1a52      	subs	r2, r2, r1
   1cf64:	b224      	sxth	r4, r4
   1cf66:	42a2      	cmp	r2, r4
   1cf68:	bfb8      	it	lt
   1cf6a:	4622      	movlt	r2, r4
            value_area.x2 += p_align.x + xofs;
   1cf6c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   1cf70:	fa04 f383 	sxtah	r3, r4, r3
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
   1cf74:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
   1cf78:	b21b      	sxth	r3, r3
   1cf7a:	1b1c      	subs	r4, r3, r4
   1cf7c:	b213      	sxth	r3, r2
   1cf7e:	42a3      	cmp	r3, r4
   1cf80:	bfb8      	it	lt
   1cf82:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
   1cf84:	f8bd 401e 	ldrh.w	r4, [sp, #30]
   1cf88:	fa04 f080 	sxtah	r0, r4, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
   1cf8c:	b204      	sxth	r4, r0
   1cf8e:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
   1cf92:	1a20      	subs	r0, r4, r0
   1cf94:	b21c      	sxth	r4, r3
   1cf96:	4284      	cmp	r4, r0
   1cf98:	bfb8      	it	lt
   1cf9a:	4604      	movlt	r4, r0
   1cf9c:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1cf9e:	2240      	movs	r2, #64	; 0x40
   1cfa0:	4631      	mov	r1, r6
   1cfa2:	4628      	mov	r0, r5
   1cfa4:	f7f2 f932 	bl	f20c <_lv_obj_get_style_int>
    if(outline_width) {
   1cfa8:	4607      	mov	r7, r0
   1cfaa:	b180      	cbz	r0, 1cfce <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   1cfac:	224c      	movs	r2, #76	; 0x4c
   1cfae:	4631      	mov	r1, r6
   1cfb0:	4628      	mov	r0, r5
   1cfb2:	f7ff f9d1 	bl	1c358 <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
   1cfb6:	2802      	cmp	r0, #2
   1cfb8:	d909      	bls.n	1cfce <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   1cfba:	2241      	movs	r2, #65	; 0x41
   1cfbc:	4631      	mov	r1, r6
   1cfbe:	4628      	mov	r0, r5
   1cfc0:	f7f2 f924 	bl	f20c <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
   1cfc4:	4438      	add	r0, r7
   1cfc6:	4284      	cmp	r4, r0
   1cfc8:	bfb8      	it	lt
   1cfca:	4604      	movlt	r4, r0
   1cfcc:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1cfce:	4631      	mov	r1, r6
   1cfd0:	2204      	movs	r2, #4
   1cfd2:	4628      	mov	r0, r5
   1cfd4:	f7f2 f91a 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1cfd8:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1cfda:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1cfdc:	4631      	mov	r1, r6
   1cfde:	4628      	mov	r0, r5
   1cfe0:	f7f2 f914 	bl	f20c <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
   1cfe4:	42b8      	cmp	r0, r7
   1cfe6:	bfb8      	it	lt
   1cfe8:	4638      	movlt	r0, r7
   1cfea:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
   1cfec:	2800      	cmp	r0, #0
   1cfee:	bfc4      	itt	gt
   1cff0:	1824      	addgt	r4, r4, r0
   1cff2:	b224      	sxthgt	r4, r4
}
   1cff4:	4620      	mov	r0, r4
   1cff6:	b008      	add	sp, #32
   1cff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
   1cffc:	225c      	movs	r2, #92	; 0x5c
   1cffe:	4631      	mov	r1, r6
   1d000:	4628      	mov	r0, r5
   1d002:	f7ff f9a9 	bl	1c358 <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
   1d006:	2802      	cmp	r0, #2
   1d008:	f67f af3d 	bls.w	1ce86 <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   1d00c:	2253      	movs	r2, #83	; 0x53
   1d00e:	4631      	mov	r1, r6
   1d010:	4628      	mov	r0, r5
   1d012:	f7f2 f8fb 	bl	f20c <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
   1d016:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1d01a:	f344 044f 	sbfx	r4, r4, #1, #16
            sh_width++;
   1d01e:	3401      	adds	r4, #1
   1d020:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   1d022:	2251      	movs	r2, #81	; 0x51
   1d024:	4631      	mov	r1, r6
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   1d026:	4404      	add	r4, r0
   1d028:	4628      	mov	r0, r5
   1d02a:	f7f2 f8ef 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   1d02e:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   1d030:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   1d032:	4631      	mov	r1, r6
   1d034:	4628      	mov	r0, r5
   1d036:	f7f2 f8e9 	bl	f20c <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   1d03a:	2800      	cmp	r0, #0
   1d03c:	bfb8      	it	lt
   1d03e:	4240      	neglt	r0, r0
   1d040:	2f00      	cmp	r7, #0
   1d042:	bfb8      	it	lt
   1d044:	427f      	neglt	r7, r7
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   1d046:	b224      	sxth	r4, r4
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   1d048:	b280      	uxth	r0, r0
   1d04a:	b2bf      	uxth	r7, r7
   1d04c:	42b8      	cmp	r0, r7
   1d04e:	bf2c      	ite	cs
   1d050:	1824      	addcs	r4, r4, r0
   1d052:	19e4      	addcc	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
   1d054:	b224      	sxth	r4, r4
   1d056:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1d05a:	e715      	b.n	1ce88 <lv_obj_get_draw_rect_ext_pad_size+0x1a>

0001d05c <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
   1d05c:	b908      	cbnz	r0, 1d062 <lv_obj_get_focused_obj+0x6>
   1d05e:	4770      	bx	lr
    return obj->parent;
   1d060:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
   1d062:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
   1d066:	079b      	lsls	r3, r3, #30
   1d068:	d4fa      	bmi.n	1d060 <lv_obj_get_focused_obj+0x4>
}
   1d06a:	4770      	bx	lr

0001d06c <lv_refr_get_top_obj>:
{
   1d06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   1d070:	2200      	movs	r2, #0
{
   1d072:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   1d074:	3110      	adds	r1, #16
{
   1d076:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   1d078:	f004 f8b7 	bl	211ea <_lv_area_is_in>
   1d07c:	b910      	cbnz	r0, 1d084 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
   1d07e:	2000      	movs	r0, #0
}
   1d080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   1d084:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1d088:	06db      	lsls	r3, r3, #27
   1d08a:	d4f8      	bmi.n	1d07e <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   1d08c:	2202      	movs	r2, #2
   1d08e:	4639      	mov	r1, r7
   1d090:	4620      	mov	r0, r4
   1d092:	6a23      	ldr	r3, [r4, #32]
   1d094:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   1d096:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   1d098:	4606      	mov	r6, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   1d09a:	d0f0      	beq.n	1d07e <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
   1d09c:	f104 0804 	add.w	r8, r4, #4
   1d0a0:	4640      	mov	r0, r8
   1d0a2:	f004 fa66 	bl	21572 <_lv_ll_get_head>
   1d0a6:	4605      	mov	r5, r0
   1d0a8:	b918      	cbnz	r0, 1d0b2 <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
   1d0aa:	2e01      	cmp	r6, #1
   1d0ac:	d1e7      	bne.n	1d07e <lv_refr_get_top_obj+0x12>
   1d0ae:	4620      	mov	r0, r4
   1d0b0:	e7e6      	b.n	1d080 <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
   1d0b2:	4629      	mov	r1, r5
   1d0b4:	4638      	mov	r0, r7
   1d0b6:	f7ff ffd9 	bl	1d06c <lv_refr_get_top_obj>
            if(found_p != NULL) {
   1d0ba:	2800      	cmp	r0, #0
   1d0bc:	d1e0      	bne.n	1d080 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
   1d0be:	4629      	mov	r1, r5
   1d0c0:	4640      	mov	r0, r8
   1d0c2:	f004 fa5c 	bl	2157e <_lv_ll_get_next>
   1d0c6:	e7ee      	b.n	1d0a6 <lv_refr_get_top_obj+0x3a>

0001d0c8 <lv_refr_obj>:
{
   1d0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   1d0ca:	f890 7032 	ldrb.w	r7, [r0, #50]	; 0x32
{
   1d0ce:	4604      	mov	r4, r0
    if(obj->hidden != 0) return;
   1d0d0:	f017 0710 	ands.w	r7, r7, #16
{
   1d0d4:	460e      	mov	r6, r1
   1d0d6:	b08b      	sub	sp, #44	; 0x2c
    if(obj->hidden != 0) return;
   1d0d8:	d13a      	bne.n	1d150 <lv_refr_obj+0x88>
    lv_obj_get_coords(obj, &obj_area);
   1d0da:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   1d0dc:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   1d0e0:	f7ff f886 	bl	1c1f0 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   1d0e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1d0e8:	4631      	mov	r1, r6
    obj_area.x1 -= ext_size;
   1d0ea:	1b5b      	subs	r3, r3, r5
   1d0ec:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   1d0f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1d0f4:	aa04      	add	r2, sp, #16
    obj_area.y1 -= ext_size;
   1d0f6:	1b5b      	subs	r3, r3, r5
   1d0f8:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   1d0fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1d100:	a802      	add	r0, sp, #8
    obj_area.x2 += ext_size;
   1d102:	442b      	add	r3, r5
   1d104:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   1d108:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1d10c:	441d      	add	r5, r3
   1d10e:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   1d112:	f003 ff77 	bl	21004 <_lv_area_intersect>
    if(union_ok != false) {
   1d116:	b1d8      	cbz	r0, 1d150 <lv_refr_obj+0x88>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   1d118:	6a23      	ldr	r3, [r4, #32]
   1d11a:	b11b      	cbz	r3, 1d124 <lv_refr_obj+0x5c>
   1d11c:	463a      	mov	r2, r7
   1d11e:	4620      	mov	r0, r4
   1d120:	a902      	add	r1, sp, #8
   1d122:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   1d124:	4620      	mov	r0, r4
   1d126:	a904      	add	r1, sp, #16
   1d128:	f7ff f862 	bl	1c1f0 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   1d12c:	4631      	mov	r1, r6
   1d12e:	4668      	mov	r0, sp
   1d130:	aa04      	add	r2, sp, #16
   1d132:	f003 ff67 	bl	21004 <_lv_area_intersect>
        if(union_ok != false) {
   1d136:	b128      	cbz	r0, 1d144 <lv_refr_obj+0x7c>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   1d138:	1d26      	adds	r6, r4, #4
   1d13a:	4630      	mov	r0, r6
   1d13c:	f004 fa1c 	bl	21578 <_lv_ll_get_tail>
   1d140:	4605      	mov	r5, r0
   1d142:	b938      	cbnz	r0, 1d154 <lv_refr_obj+0x8c>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   1d144:	6a23      	ldr	r3, [r4, #32]
   1d146:	b11b      	cbz	r3, 1d150 <lv_refr_obj+0x88>
   1d148:	2201      	movs	r2, #1
   1d14a:	4620      	mov	r0, r4
   1d14c:	a902      	add	r1, sp, #8
   1d14e:	4798      	blx	r3
}
   1d150:	b00b      	add	sp, #44	; 0x2c
   1d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   1d154:	4628      	mov	r0, r5
   1d156:	a908      	add	r1, sp, #32
   1d158:	f7ff f84a 	bl	1c1f0 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   1d15c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   1d160:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1d164:	4669      	mov	r1, sp
                child_area.x1 -= ext_size;
   1d166:	1ad2      	subs	r2, r2, r3
   1d168:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   1d16c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1d170:	a806      	add	r0, sp, #24
                child_area.y1 -= ext_size;
   1d172:	1ad2      	subs	r2, r2, r3
   1d174:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   1d178:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1d17c:	441a      	add	r2, r3
   1d17e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   1d182:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1d186:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1d188:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   1d18a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   1d18e:	f003 ff39 	bl	21004 <_lv_area_intersect>
                if(union_ok) {
   1d192:	b118      	cbz	r0, 1d19c <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
   1d194:	4628      	mov	r0, r5
   1d196:	a906      	add	r1, sp, #24
   1d198:	f7ff ff96 	bl	1d0c8 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   1d19c:	4629      	mov	r1, r5
   1d19e:	4630      	mov	r0, r6
   1d1a0:	f004 f9f2 	bl	21588 <_lv_ll_get_prev>
   1d1a4:	e7cc      	b.n	1d140 <lv_refr_obj+0x78>

0001d1a6 <_lv_refr_init>:
}
   1d1a6:	4770      	bx	lr

0001d1a8 <_lv_inv_area>:
{
   1d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1aa:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
   1d1ac:	4604      	mov	r4, r0
{
   1d1ae:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   1d1b0:	b918      	cbnz	r0, 1d1ba <_lv_inv_area+0x12>
   1d1b2:	f7f5 f9ab 	bl	1250c <lv_disp_get_default>
    if(!disp) return;
   1d1b6:	4604      	mov	r4, r0
   1d1b8:	b130      	cbz	r0, 1d1c8 <_lv_inv_area+0x20>
    if(area_p == NULL) {
   1d1ba:	b93d      	cbnz	r5, 1d1cc <_lv_inv_area+0x24>
        disp->inv_p = 0;
   1d1bc:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   1d1c0:	f365 0309 	bfi	r3, r5, #0, #10
   1d1c4:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
}
   1d1c8:	b005      	add	sp, #20
   1d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
   1d1cc:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   1d1ce:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   1d1d0:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   1d1d2:	f7f5 f9a1 	bl	12518 <lv_disp_get_hor_res>
   1d1d6:	3801      	subs	r0, #1
   1d1d8:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   1d1dc:	4620      	mov	r0, r4
   1d1de:	f7f5 f9ad 	bl	1253c <lv_disp_get_ver_res>
   1d1e2:	3801      	subs	r0, #1
   1d1e4:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
   1d1e8:	466a      	mov	r2, sp
   1d1ea:	4629      	mov	r1, r5
   1d1ec:	a802      	add	r0, sp, #8
   1d1ee:	f003 ff09 	bl	21004 <_lv_area_intersect>
    if(suc != false) {
   1d1f2:	2800      	cmp	r0, #0
   1d1f4:	d0e8      	beq.n	1d1c8 <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   1d1f6:	6923      	ldr	r3, [r4, #16]
   1d1f8:	b113      	cbz	r3, 1d200 <_lv_inv_area+0x58>
   1d1fa:	4620      	mov	r0, r4
   1d1fc:	a902      	add	r1, sp, #8
   1d1fe:	4798      	blx	r3
   1d200:	f104 055e 	add.w	r5, r4, #94	; 0x5e
{
   1d204:	2600      	movs	r6, #0
   1d206:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   1d208:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   1d20c:	b2b2      	uxth	r2, r6
   1d20e:	f3c3 0009 	ubfx	r0, r3, #0, #10
   1d212:	4290      	cmp	r0, r2
   1d214:	d815      	bhi.n	1d242 <_lv_inv_area+0x9a>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   1d216:	281f      	cmp	r0, #31
   1d218:	d81d      	bhi.n	1d256 <_lv_inv_area+0xae>
    return memcpy(dst, src, len);
   1d21a:	2208      	movs	r2, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   1d21c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   1d220:	eb0d 0102 	add.w	r1, sp, r2
   1d224:	305e      	adds	r0, #94	; 0x5e
   1d226:	f7fb ffef 	bl	19208 <memcpy>
        disp->inv_p++;
   1d22a:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   1d22e:	2103      	movs	r1, #3
        disp->inv_p++;
   1d230:	1c5a      	adds	r2, r3, #1
   1d232:	f362 0309 	bfi	r3, r2, #0, #10
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   1d236:	6b20      	ldr	r0, [r4, #48]	; 0x30
        disp->inv_p++;
   1d238:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   1d23c:	f7f5 fe82 	bl	12f44 <lv_task_set_prio>
   1d240:	e7c2      	b.n	1d1c8 <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
   1d242:	4629      	mov	r1, r5
   1d244:	2200      	movs	r2, #0
   1d246:	a802      	add	r0, sp, #8
   1d248:	f003 ffcf 	bl	211ea <_lv_area_is_in>
   1d24c:	3601      	adds	r6, #1
   1d24e:	3508      	adds	r5, #8
   1d250:	2800      	cmp	r0, #0
   1d252:	d0d9      	beq.n	1d208 <_lv_inv_area+0x60>
   1d254:	e7b8      	b.n	1d1c8 <_lv_inv_area+0x20>
            disp->inv_p = 0;
   1d256:	f36f 0309 	bfc	r3, #0, #10
   1d25a:	2208      	movs	r2, #8
   1d25c:	4669      	mov	r1, sp
   1d25e:	4638      	mov	r0, r7
   1d260:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
   1d264:	e7df      	b.n	1d226 <_lv_inv_area+0x7e>

0001d266 <lv_style_list_get_style>:
    if(list->has_trans && list->skip_trans) id++;
   1d266:	8882      	ldrh	r2, [r0, #4]
{
   1d268:	4603      	mov	r3, r0
    if(list->has_trans && list->skip_trans) id++;
   1d26a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
   1d26e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1d272:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
   1d274:	bf04      	itt	eq
   1d276:	3101      	addeq	r1, #1
   1d278:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1d27a:	f012 003f 	ands.w	r0, r2, #63	; 0x3f
   1d27e:	d006      	beq.n	1d28e <lv_style_list_get_style+0x28>
   1d280:	4288      	cmp	r0, r1
   1d282:	d903      	bls.n	1d28c <lv_style_list_get_style+0x26>
    return list->style_list[id];
   1d284:	681b      	ldr	r3, [r3, #0]
   1d286:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1d28a:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   1d28c:	2000      	movs	r0, #0
}
   1d28e:	4770      	bx	lr

0001d290 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
   1d290:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
   1d294:	2808      	cmp	r0, #8
   1d296:	d906      	bls.n	1d2a6 <get_prop_size+0x16>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
   1d298:	280b      	cmp	r0, #11
   1d29a:	d906      	bls.n	1d2aa <get_prop_size+0x1a>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
   1d29c:	280d      	cmp	r0, #13
   1d29e:	bf8c      	ite	hi
   1d2a0:	2006      	movhi	r0, #6
   1d2a2:	2003      	movls	r0, #3
   1d2a4:	4770      	bx	lr
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
   1d2a6:	2004      	movs	r0, #4
   1d2a8:	4770      	bx	lr
    else size += sizeof(const void *);
   1d2aa:	2006      	movs	r0, #6
    return size;
}
   1d2ac:	4770      	bx	lr

0001d2ae <_lv_memcpy>:
   1d2ae:	f7fb bfab 	b.w	19208 <memcpy>

0001d2b2 <get_style_prop.isra.0>:
    prop_p[0] = style->map[idx];
   1d2b2:	5c43      	ldrb	r3, [r0, r1]
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
   1d2b4:	b082      	sub	sp, #8
    prop_p[1] = style->map[idx + 1];
   1d2b6:	4408      	add	r0, r1
    prop_p[0] = style->map[idx];
   1d2b8:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
   1d2bc:	7843      	ldrb	r3, [r0, #1]
   1d2be:	f88d 3007 	strb.w	r3, [sp, #7]
}
   1d2c2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1d2c6:	b002      	add	sp, #8
   1d2c8:	4770      	bx	lr

0001d2ca <get_style_prop_attr>:
{
   1d2ca:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
   1d2cc:	6800      	ldr	r0, [r0, #0]
   1d2ce:	f7ff fff0 	bl	1d2b2 <get_style_prop.isra.0>
}
   1d2d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1d2d6:	bd08      	pop	{r3, pc}

0001d2d8 <get_property_index>:
{
   1d2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(style->map == NULL) return -1;
   1d2dc:	6803      	ldr	r3, [r0, #0]
{
   1d2de:	4605      	mov	r5, r0
   1d2e0:	460a      	mov	r2, r1
    if(style->map == NULL) return -1;
   1d2e2:	b37b      	cbz	r3, 1d344 <get_property_index+0x6c>
    int16_t id_guess = -1;
   1d2e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   1d2e8:	f3c2 2206 	ubfx	r2, r2, #8, #7
    uint8_t id_to_find = prop & 0xFF;
   1d2ec:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
   1d2ee:	ea4f 2811 	mov.w	r8, r1, lsr #8
    int16_t weight = -1;
   1d2f2:	4626      	mov	r6, r4
    size_t i = 0;
   1d2f4:	2100      	movs	r1, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   1d2f6:	43d2      	mvns	r2, r2
    return get_style_prop(style, idx) & 0xFF;
   1d2f8:	6828      	ldr	r0, [r5, #0]
   1d2fa:	f7ff ffda 	bl	1d2b2 <get_style_prop.isra.0>
   1d2fe:	fa5f f980 	uxtb.w	r9, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   1d302:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1d306:	d101      	bne.n	1d30c <get_property_index+0x34>
    return id_guess;
   1d308:	4620      	mov	r0, r4
   1d30a:	e00a      	b.n	1d322 <get_property_index+0x4a>
        if(prop_id == id_to_find) {
   1d30c:	454f      	cmp	r7, r9
   1d30e:	d114      	bne.n	1d33a <get_property_index+0x62>
            attr_i = get_style_prop_attr(style, i);
   1d310:	4628      	mov	r0, r5
   1d312:	f7ff ffda 	bl	1d2ca <get_style_prop_attr>
   1d316:	4603      	mov	r3, r0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
   1d318:	ea88 0000 	eor.w	r0, r8, r0
   1d31c:	0640      	lsls	r0, r0, #25
   1d31e:	d102      	bne.n	1d326 <get_property_index+0x4e>
                return i;
   1d320:	4608      	mov	r0, r1
}
   1d322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   1d326:	ea02 0003 	and.w	r0, r2, r3
   1d32a:	0640      	lsls	r0, r0, #25
   1d32c:	d105      	bne.n	1d33a <get_property_index+0x62>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
   1d32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d332:	42b3      	cmp	r3, r6
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
   1d334:	bfc4      	itt	gt
   1d336:	b21e      	sxthgt	r6, r3
                    id_guess = i;
   1d338:	b20c      	sxthgt	r4, r1
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
   1d33a:	4648      	mov	r0, r9
   1d33c:	f7ff ffa8 	bl	1d290 <get_prop_size>
   1d340:	4401      	add	r1, r0
   1d342:	e7d9      	b.n	1d2f8 <get_property_index+0x20>
    if(style->map == NULL) return -1;
   1d344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d348:	e7eb      	b.n	1d322 <get_property_index+0x4a>

0001d34a <style_resize.isra.0>:
static inline void style_resize(lv_style_t * style, size_t sz)
   1d34a:	b510      	push	{r4, lr}
   1d34c:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
   1d34e:	6800      	ldr	r0, [r0, #0]
   1d350:	f7f5 fba2 	bl	12a98 <lv_mem_realloc>
   1d354:	6020      	str	r0, [r4, #0]
}
   1d356:	bd10      	pop	{r4, pc}

0001d358 <lv_style_init>:
    memset(dst, 0x00, len);
   1d358:	2204      	movs	r2, #4
   1d35a:	2100      	movs	r1, #0
   1d35c:	f7fb bf7f 	b.w	1925e <memset>

0001d360 <lv_style_list_init>:
   1d360:	2208      	movs	r2, #8
   1d362:	2100      	movs	r1, #0
   1d364:	f7fb bf7b 	b.w	1925e <memset>

0001d368 <lv_style_reset>:
{
   1d368:	b510      	push	{r4, lr}
   1d36a:	4604      	mov	r4, r0
    lv_mem_free(style->map);
   1d36c:	6800      	ldr	r0, [r0, #0]
   1d36e:	f7f5 fb75 	bl	12a5c <lv_mem_free>
    style->map = NULL;
   1d372:	2300      	movs	r3, #0
   1d374:	6023      	str	r3, [r4, #0]
}
   1d376:	bd10      	pop	{r4, pc}

0001d378 <_lv_style_get_mem_size>:
{
   1d378:	4602      	mov	r2, r0
    if(style->map == NULL) return 0;
   1d37a:	6800      	ldr	r0, [r0, #0]
{
   1d37c:	b508      	push	{r3, lr}
    if(style->map == NULL) return 0;
   1d37e:	b140      	cbz	r0, 1d392 <_lv_style_get_mem_size+0x1a>
    size_t i = 0;
   1d380:	2100      	movs	r1, #0
    return get_style_prop(style, idx) & 0xFF;
   1d382:	6810      	ldr	r0, [r2, #0]
   1d384:	f7ff ff95 	bl	1d2b2 <get_style_prop.isra.0>
   1d388:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   1d38a:	28ff      	cmp	r0, #255	; 0xff
   1d38c:	d102      	bne.n	1d394 <_lv_style_get_mem_size+0x1c>
    return i + sizeof(lv_style_property_t);
   1d38e:	3102      	adds	r1, #2
   1d390:	b288      	uxth	r0, r1
}
   1d392:	bd08      	pop	{r3, pc}
    return idx + get_prop_size(prop_id);
   1d394:	f7ff ff7c 	bl	1d290 <get_prop_size>
   1d398:	4401      	add	r1, r0
   1d39a:	e7f2      	b.n	1d382 <_lv_style_get_mem_size+0xa>

0001d39c <lv_style_copy>:
{
   1d39c:	b570      	push	{r4, r5, r6, lr}
   1d39e:	4606      	mov	r6, r0
    if(style_src == NULL) return;
   1d3a0:	460c      	mov	r4, r1
   1d3a2:	b171      	cbz	r1, 1d3c2 <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
   1d3a4:	680b      	ldr	r3, [r1, #0]
   1d3a6:	b163      	cbz	r3, 1d3c2 <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
   1d3a8:	4608      	mov	r0, r1
   1d3aa:	f7ff ffe5 	bl	1d378 <_lv_style_get_mem_size>
   1d3ae:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
   1d3b0:	f7f5 fb2c 	bl	12a0c <lv_mem_alloc>
   1d3b4:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
   1d3b6:	462a      	mov	r2, r5
   1d3b8:	6821      	ldr	r1, [r4, #0]
}
   1d3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
   1d3be:	f7ff bf76 	b.w	1d2ae <_lv_memcpy>
}
   1d3c2:	bd70      	pop	{r4, r5, r6, pc}

0001d3c4 <lv_style_remove_prop>:
{
   1d3c4:	b570      	push	{r4, r5, r6, lr}
   1d3c6:	460e      	mov	r6, r1
    if(style == NULL) return false;
   1d3c8:	4605      	mov	r5, r0
   1d3ca:	b908      	cbnz	r0, 1d3d0 <lv_style_remove_prop+0xc>
   1d3cc:	2000      	movs	r0, #0
}
   1d3ce:	bd70      	pop	{r4, r5, r6, pc}
    int32_t id = get_property_index(style, prop);
   1d3d0:	f7ff ff82 	bl	1d2d8 <get_property_index>
    if(id >= 0) {
   1d3d4:	1e04      	subs	r4, r0, #0
   1d3d6:	dbf9      	blt.n	1d3cc <lv_style_remove_prop+0x8>
        attr_found = get_style_prop_attr(style, id);
   1d3d8:	4621      	mov	r1, r4
   1d3da:	4628      	mov	r0, r5
   1d3dc:	f7ff ff75 	bl	1d2ca <get_style_prop_attr>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   1d3e0:	ea80 2016 	eor.w	r0, r0, r6, lsr #8
   1d3e4:	0643      	lsls	r3, r0, #25
   1d3e6:	d1f1      	bne.n	1d3cc <lv_style_remove_prop+0x8>
            uint32_t map_size = _lv_style_get_mem_size(style);
   1d3e8:	4628      	mov	r0, r5
   1d3ea:	f7ff ffc5 	bl	1d378 <_lv_style_get_mem_size>
   1d3ee:	4601      	mov	r1, r0
            uint8_t prop_size = get_prop_size(prop);
   1d3f0:	b2f0      	uxtb	r0, r6
   1d3f2:	f7ff ff4d 	bl	1d290 <get_prop_size>
            for(i = id; i < map_size - prop_size; i++) {
   1d3f6:	b2c3      	uxtb	r3, r0
   1d3f8:	1ac9      	subs	r1, r1, r3
   1d3fa:	42a1      	cmp	r1, r4
   1d3fc:	d804      	bhi.n	1d408 <lv_style_remove_prop+0x44>
            style_resize(style, map_size - prop_size);
   1d3fe:	4628      	mov	r0, r5
   1d400:	f7ff ffa3 	bl	1d34a <style_resize.isra.0>
            return true;
   1d404:	2001      	movs	r0, #1
   1d406:	e7e2      	b.n	1d3ce <lv_style_remove_prop+0xa>
                style->map[i] = style->map[i + prop_size];
   1d408:	682a      	ldr	r2, [r5, #0]
   1d40a:	1910      	adds	r0, r2, r4
   1d40c:	5cc0      	ldrb	r0, [r0, r3]
   1d40e:	5510      	strb	r0, [r2, r4]
            for(i = id; i < map_size - prop_size; i++) {
   1d410:	3401      	adds	r4, #1
   1d412:	e7f2      	b.n	1d3fa <lv_style_remove_prop+0x36>

0001d414 <_lv_style_set_int>:
{
   1d414:	b530      	push	{r4, r5, lr}
   1d416:	b085      	sub	sp, #20
   1d418:	f8ad 1006 	strh.w	r1, [sp, #6]
   1d41c:	4605      	mov	r5, r0
   1d41e:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   1d422:	f7ff ff59 	bl	1d2d8 <get_property_index>
    if(id >= 0) {
   1d426:	1e01      	subs	r1, r0, #0
   1d428:	db11      	blt.n	1d44e <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
   1d42a:	4628      	mov	r0, r5
   1d42c:	f7ff ff4d 	bl	1d2ca <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   1d430:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   1d434:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1d438:	0643      	lsls	r3, r0, #25
   1d43a:	d108      	bne.n	1d44e <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
   1d43c:	2202      	movs	r2, #2
   1d43e:	682b      	ldr	r3, [r5, #0]
   1d440:	1c88      	adds	r0, r1, #2
   1d442:	4418      	add	r0, r3
   1d444:	a901      	add	r1, sp, #4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d446:	f7ff ff32 	bl	1d2ae <_lv_memcpy>
}
   1d44a:	b005      	add	sp, #20
   1d44c:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d44e:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   1d450:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d452:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   1d456:	f7ff ff8f 	bl	1d378 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   1d45a:	1e04      	subs	r4, r0, #0
   1d45c:	bf08      	it	eq
   1d45e:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
   1d460:	3404      	adds	r4, #4
    style_resize(style, size);
   1d462:	b2a4      	uxth	r4, r4
   1d464:	4621      	mov	r1, r4
   1d466:	4628      	mov	r0, r5
   1d468:	f7ff ff6f 	bl	1d34a <style_resize.isra.0>
    if(style == NULL) return;
   1d46c:	2d00      	cmp	r5, #0
   1d46e:	d0ec      	beq.n	1d44a <_lv_style_set_int+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d470:	6828      	ldr	r0, [r5, #0]
   1d472:	1fa3      	subs	r3, r4, #6
   1d474:	2202      	movs	r2, #2
   1d476:	f10d 0106 	add.w	r1, sp, #6
   1d47a:	4418      	add	r0, r3
   1d47c:	f7ff ff17 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   1d480:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d482:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   1d484:	2202      	movs	r2, #2
   1d486:	a901      	add	r1, sp, #4
   1d488:	4418      	add	r0, r3
   1d48a:	f7ff ff10 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d48e:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   1d490:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d492:	2202      	movs	r2, #2
   1d494:	f10d 010e 	add.w	r1, sp, #14
   1d498:	4420      	add	r0, r4
   1d49a:	e7d4      	b.n	1d446 <_lv_style_set_int+0x32>

0001d49c <_lv_style_set_color>:
{
   1d49c:	b530      	push	{r4, r5, lr}
   1d49e:	b085      	sub	sp, #20
   1d4a0:	f8ad 1006 	strh.w	r1, [sp, #6]
   1d4a4:	4605      	mov	r5, r0
   1d4a6:	9200      	str	r2, [sp, #0]
    int32_t id = get_property_index(style, prop);
   1d4a8:	f7ff ff16 	bl	1d2d8 <get_property_index>
    if(id >= 0) {
   1d4ac:	1e01      	subs	r1, r0, #0
   1d4ae:	db11      	blt.n	1d4d4 <_lv_style_set_color+0x38>
        attr_found = get_style_prop_attr(style, id);
   1d4b0:	4628      	mov	r0, r5
   1d4b2:	f7ff ff0a 	bl	1d2ca <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   1d4b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   1d4ba:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1d4be:	0643      	lsls	r3, r0, #25
   1d4c0:	d108      	bne.n	1d4d4 <_lv_style_set_color+0x38>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
   1d4c2:	1c88      	adds	r0, r1, #2
   1d4c4:	2204      	movs	r2, #4
   1d4c6:	4669      	mov	r1, sp
   1d4c8:	682b      	ldr	r3, [r5, #0]
   1d4ca:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d4cc:	f7ff feef 	bl	1d2ae <_lv_memcpy>
}
   1d4d0:	b005      	add	sp, #20
   1d4d2:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d4d4:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   1d4d6:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d4d8:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   1d4dc:	f7ff ff4c 	bl	1d378 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   1d4e0:	1e04      	subs	r4, r0, #0
   1d4e2:	bf08      	it	eq
   1d4e4:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
   1d4e6:	3406      	adds	r4, #6
    style_resize(style, size);
   1d4e8:	b2a4      	uxth	r4, r4
   1d4ea:	4621      	mov	r1, r4
   1d4ec:	4628      	mov	r0, r5
   1d4ee:	f7ff ff2c 	bl	1d34a <style_resize.isra.0>
    if(style == NULL) return;
   1d4f2:	2d00      	cmp	r5, #0
   1d4f4:	d0ec      	beq.n	1d4d0 <_lv_style_set_color+0x34>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d4f6:	6828      	ldr	r0, [r5, #0]
   1d4f8:	f1a4 0308 	sub.w	r3, r4, #8
   1d4fc:	2202      	movs	r2, #2
   1d4fe:	f10d 0106 	add.w	r1, sp, #6
   1d502:	4418      	add	r0, r3
   1d504:	f7ff fed3 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   1d508:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d50a:	1fa3      	subs	r3, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   1d50c:	2204      	movs	r2, #4
   1d50e:	4669      	mov	r1, sp
   1d510:	4418      	add	r0, r3
   1d512:	f7ff fecc 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d516:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   1d518:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d51a:	2202      	movs	r2, #2
   1d51c:	f10d 010e 	add.w	r1, sp, #14
   1d520:	4420      	add	r0, r4
   1d522:	e7d3      	b.n	1d4cc <_lv_style_set_color+0x30>

0001d524 <_lv_style_set_opa>:
{
   1d524:	b530      	push	{r4, r5, lr}
   1d526:	b085      	sub	sp, #20
   1d528:	f8ad 1006 	strh.w	r1, [sp, #6]
   1d52c:	4605      	mov	r5, r0
   1d52e:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
   1d532:	f7ff fed1 	bl	1d2d8 <get_property_index>
    if(id >= 0) {
   1d536:	1e01      	subs	r1, r0, #0
   1d538:	db12      	blt.n	1d560 <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
   1d53a:	4628      	mov	r0, r5
   1d53c:	f7ff fec5 	bl	1d2ca <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   1d540:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   1d544:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1d548:	0643      	lsls	r3, r0, #25
   1d54a:	d109      	bne.n	1d560 <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
   1d54c:	2201      	movs	r2, #1
   1d54e:	682b      	ldr	r3, [r5, #0]
   1d550:	1c88      	adds	r0, r1, #2
   1d552:	4418      	add	r0, r3
   1d554:	f10d 0105 	add.w	r1, sp, #5
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d558:	f7ff fea9 	bl	1d2ae <_lv_memcpy>
}
   1d55c:	b005      	add	sp, #20
   1d55e:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d560:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   1d562:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d564:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   1d568:	f7ff ff06 	bl	1d378 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   1d56c:	1e04      	subs	r4, r0, #0
   1d56e:	bf08      	it	eq
   1d570:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
   1d572:	3403      	adds	r4, #3
    style_resize(style, size);
   1d574:	b2a4      	uxth	r4, r4
   1d576:	4621      	mov	r1, r4
   1d578:	4628      	mov	r0, r5
   1d57a:	f7ff fee6 	bl	1d34a <style_resize.isra.0>
    if(style == NULL) return;
   1d57e:	2d00      	cmp	r5, #0
   1d580:	d0ec      	beq.n	1d55c <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d582:	6828      	ldr	r0, [r5, #0]
   1d584:	1f63      	subs	r3, r4, #5
   1d586:	2202      	movs	r2, #2
   1d588:	f10d 0106 	add.w	r1, sp, #6
   1d58c:	4418      	add	r0, r3
   1d58e:	f7ff fe8e 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   1d592:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d594:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   1d596:	2201      	movs	r2, #1
   1d598:	f10d 0105 	add.w	r1, sp, #5
   1d59c:	4418      	add	r0, r3
   1d59e:	f7ff fe86 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d5a2:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   1d5a4:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d5a6:	2202      	movs	r2, #2
   1d5a8:	f10d 010e 	add.w	r1, sp, #14
   1d5ac:	4420      	add	r0, r4
   1d5ae:	e7d3      	b.n	1d558 <_lv_style_set_opa+0x34>

0001d5b0 <_lv_style_set_ptr>:
{
   1d5b0:	b530      	push	{r4, r5, lr}
   1d5b2:	b085      	sub	sp, #20
   1d5b4:	f8ad 1006 	strh.w	r1, [sp, #6]
   1d5b8:	4605      	mov	r5, r0
   1d5ba:	9200      	str	r2, [sp, #0]
    int32_t id = get_property_index(style, prop);
   1d5bc:	f7ff fe8c 	bl	1d2d8 <get_property_index>
    if(id >= 0) {
   1d5c0:	1e01      	subs	r1, r0, #0
   1d5c2:	db11      	blt.n	1d5e8 <_lv_style_set_ptr+0x38>
        attr_found = get_style_prop_attr(style, id);
   1d5c4:	4628      	mov	r0, r5
   1d5c6:	f7ff fe80 	bl	1d2ca <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   1d5ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   1d5ce:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1d5d2:	0643      	lsls	r3, r0, #25
   1d5d4:	d108      	bne.n	1d5e8 <_lv_style_set_ptr+0x38>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
   1d5d6:	1c88      	adds	r0, r1, #2
   1d5d8:	2204      	movs	r2, #4
   1d5da:	4669      	mov	r1, sp
   1d5dc:	682b      	ldr	r3, [r5, #0]
   1d5de:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d5e0:	f7ff fe65 	bl	1d2ae <_lv_memcpy>
}
   1d5e4:	b005      	add	sp, #20
   1d5e6:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d5e8:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   1d5ea:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   1d5ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   1d5f0:	f7ff fec2 	bl	1d378 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   1d5f4:	1e04      	subs	r4, r0, #0
   1d5f6:	bf08      	it	eq
   1d5f8:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
   1d5fa:	3406      	adds	r4, #6
    style_resize(style, size);
   1d5fc:	b2a4      	uxth	r4, r4
   1d5fe:	4621      	mov	r1, r4
   1d600:	4628      	mov	r0, r5
   1d602:	f7ff fea2 	bl	1d34a <style_resize.isra.0>
    if(style == NULL) return;
   1d606:	2d00      	cmp	r5, #0
   1d608:	d0ec      	beq.n	1d5e4 <_lv_style_set_ptr+0x34>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d60a:	6828      	ldr	r0, [r5, #0]
   1d60c:	f1a4 0308 	sub.w	r3, r4, #8
   1d610:	2202      	movs	r2, #2
   1d612:	f10d 0106 	add.w	r1, sp, #6
   1d616:	4418      	add	r0, r3
   1d618:	f7ff fe49 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
   1d61c:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   1d61e:	1fa3      	subs	r3, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
   1d620:	2204      	movs	r2, #4
   1d622:	4669      	mov	r1, sp
   1d624:	4418      	add	r0, r3
   1d626:	f7ff fe42 	bl	1d2ae <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d62a:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
   1d62c:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   1d62e:	2202      	movs	r2, #2
   1d630:	f10d 010e 	add.w	r1, sp, #14
   1d634:	4420      	add	r0, r4
   1d636:	e7d3      	b.n	1d5e0 <_lv_style_set_ptr+0x30>

0001d638 <_lv_style_get_int>:
{
   1d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d63a:	4604      	mov	r4, r0
   1d63c:	460e      	mov	r6, r1
   1d63e:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   1d640:	b910      	cbnz	r0, 1d648 <_lv_style_get_int+0x10>
   1d642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   1d648:	6803      	ldr	r3, [r0, #0]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d0f9      	beq.n	1d642 <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
   1d64e:	f7ff fe43 	bl	1d2d8 <get_property_index>
    if(id < 0) {
   1d652:	1e05      	subs	r5, r0, #0
   1d654:	dbf5      	blt.n	1d642 <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
   1d656:	6821      	ldr	r1, [r4, #0]
   1d658:	1cab      	adds	r3, r5, #2
   1d65a:	4419      	add	r1, r3
   1d65c:	2202      	movs	r2, #2
   1d65e:	4638      	mov	r0, r7
   1d660:	f7ff fe25 	bl	1d2ae <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   1d664:	4629      	mov	r1, r5
   1d666:	4620      	mov	r0, r4
   1d668:	f7ff fe2f 	bl	1d2ca <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   1d66c:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   1d670:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d674:	e7e7      	b.n	1d646 <_lv_style_get_int+0xe>

0001d676 <_lv_style_get_opa>:
{
   1d676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d678:	4604      	mov	r4, r0
   1d67a:	460e      	mov	r6, r1
   1d67c:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   1d67e:	b910      	cbnz	r0, 1d686 <_lv_style_get_opa+0x10>
   1d680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   1d686:	6803      	ldr	r3, [r0, #0]
   1d688:	2b00      	cmp	r3, #0
   1d68a:	d0f9      	beq.n	1d680 <_lv_style_get_opa+0xa>
    int32_t id = get_property_index(style, prop);
   1d68c:	f7ff fe24 	bl	1d2d8 <get_property_index>
    if(id < 0) {
   1d690:	1e05      	subs	r5, r0, #0
   1d692:	dbf5      	blt.n	1d680 <_lv_style_get_opa+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
   1d694:	6821      	ldr	r1, [r4, #0]
   1d696:	1cab      	adds	r3, r5, #2
   1d698:	4419      	add	r1, r3
   1d69a:	2201      	movs	r2, #1
   1d69c:	4638      	mov	r0, r7
   1d69e:	f7ff fe06 	bl	1d2ae <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   1d6a2:	4629      	mov	r1, r5
   1d6a4:	4620      	mov	r0, r4
   1d6a6:	f7ff fe10 	bl	1d2ca <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   1d6aa:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   1d6ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d6b2:	e7e7      	b.n	1d684 <_lv_style_get_opa+0xe>

0001d6b4 <_lv_style_get_color>:
{
   1d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6b6:	4604      	mov	r4, r0
   1d6b8:	460e      	mov	r6, r1
   1d6ba:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   1d6bc:	b910      	cbnz	r0, 1d6c4 <_lv_style_get_color+0x10>
   1d6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   1d6c4:	6803      	ldr	r3, [r0, #0]
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d0f9      	beq.n	1d6be <_lv_style_get_color+0xa>
    int32_t id = get_property_index(style, prop);
   1d6ca:	f7ff fe05 	bl	1d2d8 <get_property_index>
    if(id < 0) {
   1d6ce:	1e05      	subs	r5, r0, #0
   1d6d0:	dbf5      	blt.n	1d6be <_lv_style_get_color+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
   1d6d2:	6821      	ldr	r1, [r4, #0]
   1d6d4:	1cab      	adds	r3, r5, #2
   1d6d6:	4419      	add	r1, r3
   1d6d8:	2204      	movs	r2, #4
   1d6da:	4638      	mov	r0, r7
   1d6dc:	f7ff fde7 	bl	1d2ae <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   1d6e0:	4629      	mov	r1, r5
   1d6e2:	4620      	mov	r0, r4
   1d6e4:	f7ff fdf1 	bl	1d2ca <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   1d6e8:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   1d6ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d6f0:	e7e7      	b.n	1d6c2 <_lv_style_get_color+0xe>

0001d6f2 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
   1d6f2:	7902      	ldrb	r2, [r0, #4]
{
   1d6f4:	4603      	mov	r3, r0
    if(!list->has_local) return NULL;
   1d6f6:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1d6fa:	d005      	beq.n	1d708 <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
   1d6fc:	0612      	lsls	r2, r2, #24
   1d6fe:	681b      	ldr	r3, [r3, #0]
   1d700:	d501      	bpl.n	1d706 <lv_style_list_get_local_style+0x14>
   1d702:	6858      	ldr	r0, [r3, #4]
   1d704:	4770      	bx	lr
    else return list->style_list[0];
   1d706:	6818      	ldr	r0, [r3, #0]
}
   1d708:	4770      	bx	lr

0001d70a <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
   1d70a:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1d70e:	2b00      	cmp	r3, #0
    return list->style_list[0];
   1d710:	bfba      	itte	lt
   1d712:	6803      	ldrlt	r3, [r0, #0]
   1d714:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
   1d716:	2000      	movge	r0, #0
}
   1d718:	4770      	bx	lr

0001d71a <_lv_style_list_reset>:
{
   1d71a:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
   1d71c:	4604      	mov	r4, r0
   1d71e:	b338      	cbz	r0, 1d770 <_lv_style_list_reset+0x56>
    if(list->has_local) {
   1d720:	7903      	ldrb	r3, [r0, #4]
   1d722:	065a      	lsls	r2, r3, #25
   1d724:	d508      	bpl.n	1d738 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
   1d726:	f7ff ffe4 	bl	1d6f2 <lv_style_list_get_local_style>
        if(local) {
   1d72a:	4605      	mov	r5, r0
   1d72c:	b120      	cbz	r0, 1d738 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
   1d72e:	f7ff fe1b 	bl	1d368 <lv_style_reset>
            lv_mem_free(local);
   1d732:	4628      	mov	r0, r5
   1d734:	f7f5 f992 	bl	12a5c <lv_mem_free>
    if(list->has_trans) {
   1d738:	f994 3004 	ldrsb.w	r3, [r4, #4]
   1d73c:	2b00      	cmp	r3, #0
   1d73e:	da09      	bge.n	1d754 <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
   1d740:	4620      	mov	r0, r4
   1d742:	f7ff ffe2 	bl	1d70a <_lv_style_list_get_transition_style>
        if(trans) {
   1d746:	4605      	mov	r5, r0
   1d748:	b120      	cbz	r0, 1d754 <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
   1d74a:	f7ff fe0d 	bl	1d368 <lv_style_reset>
            lv_mem_free(trans);
   1d74e:	4628      	mov	r0, r5
   1d750:	f7f5 f984 	bl	12a5c <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
   1d754:	7923      	ldrb	r3, [r4, #4]
   1d756:	069b      	lsls	r3, r3, #26
   1d758:	d002      	beq.n	1d760 <_lv_style_list_reset+0x46>
   1d75a:	6820      	ldr	r0, [r4, #0]
   1d75c:	f7f5 f97e 	bl	12a5c <lv_mem_free>
    list->style_list = NULL;
   1d760:	2300      	movs	r3, #0
   1d762:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
   1d764:	88a3      	ldrh	r3, [r4, #4]
   1d766:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1d76a:	f023 0301 	bic.w	r3, r3, #1
   1d76e:	80a3      	strh	r3, [r4, #4]
}
   1d770:	bd38      	pop	{r3, r4, r5, pc}

0001d772 <lv_style_list_copy>:
{
   1d772:	b538      	push	{r3, r4, r5, lr}
   1d774:	460c      	mov	r4, r1
   1d776:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
   1d778:	f7ff ffcf 	bl	1d71a <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
   1d77c:	6823      	ldr	r3, [r4, #0]
   1d77e:	b1f3      	cbz	r3, 1d7be <lv_style_list_copy+0x4c>
    if(list_src->has_local == 0) {
   1d780:	7922      	ldrb	r2, [r4, #4]
   1d782:	f994 3004 	ldrsb.w	r3, [r4, #4]
   1d786:	f002 003f 	and.w	r0, r2, #63	; 0x3f
   1d78a:	0652      	lsls	r2, r2, #25
   1d78c:	d429      	bmi.n	1d7e2 <lv_style_list_copy+0x70>
        if(list_src->has_trans) {
   1d78e:	2b00      	cmp	r3, #0
   1d790:	da16      	bge.n	1d7c0 <lv_style_list_copy+0x4e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d792:	3801      	subs	r0, #1
   1d794:	0080      	lsls	r0, r0, #2
   1d796:	f7f5 f939 	bl	12a0c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d79a:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d79c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d79e:	6821      	ldr	r1, [r4, #0]
   1d7a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1d7a4:	3a01      	subs	r2, #1
   1d7a6:	0092      	lsls	r2, r2, #2
   1d7a8:	3104      	adds	r1, #4
   1d7aa:	f7ff fd80 	bl	1d2ae <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   1d7ae:	7923      	ldrb	r3, [r4, #4]
   1d7b0:	792a      	ldrb	r2, [r5, #4]
   1d7b2:	f3c3 0305 	ubfx	r3, r3, #0, #6
   1d7b6:	3b01      	subs	r3, #1
   1d7b8:	f363 0205 	bfi	r2, r3, #0, #6
   1d7bc:	712a      	strb	r2, [r5, #4]
}
   1d7be:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   1d7c0:	0080      	lsls	r0, r0, #2
   1d7c2:	f7f5 f923 	bl	12a0c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   1d7c6:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   1d7c8:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   1d7ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1d7ce:	0092      	lsls	r2, r2, #2
   1d7d0:	6821      	ldr	r1, [r4, #0]
   1d7d2:	f7ff fd6c 	bl	1d2ae <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
   1d7d6:	7922      	ldrb	r2, [r4, #4]
   1d7d8:	792b      	ldrb	r3, [r5, #4]
   1d7da:	f362 0305 	bfi	r3, r2, #0, #6
   1d7de:	712b      	strb	r3, [r5, #4]
   1d7e0:	e7ed      	b.n	1d7be <lv_style_list_copy+0x4c>
        if(list_src->has_trans) {
   1d7e2:	2b00      	cmp	r3, #0
   1d7e4:	da22      	bge.n	1d82c <lv_style_list_copy+0xba>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   1d7e6:	3802      	subs	r0, #2
   1d7e8:	0080      	lsls	r0, r0, #2
   1d7ea:	f7f5 f90f 	bl	12a0c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   1d7ee:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   1d7f0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   1d7f2:	6821      	ldr	r1, [r4, #0]
   1d7f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1d7f8:	3a02      	subs	r2, #2
   1d7fa:	0092      	lsls	r2, r2, #2
   1d7fc:	3108      	adds	r1, #8
   1d7fe:	f7ff fd56 	bl	1d2ae <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
   1d802:	7923      	ldrb	r3, [r4, #4]
   1d804:	f3c3 0305 	ubfx	r3, r3, #0, #6
   1d808:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
   1d80a:	792a      	ldrb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
   1d80c:	4628      	mov	r0, r5
            list_dest->style_cnt = list_src->style_cnt - 1;
   1d80e:	f363 0205 	bfi	r2, r3, #0, #6
   1d812:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
   1d814:	f7f2 fee4 	bl	105e0 <get_alloc_local_style>
   1d818:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   1d81a:	4620      	mov	r0, r4
   1d81c:	f7f2 fee0 	bl	105e0 <get_alloc_local_style>
   1d820:	4601      	mov	r1, r0
   1d822:	4628      	mov	r0, r5
}
   1d824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   1d828:	f7ff bdb8 	b.w	1d39c <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d82c:	3801      	subs	r0, #1
   1d82e:	0080      	lsls	r0, r0, #2
   1d830:	f7f5 f8ec 	bl	12a0c <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d834:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d836:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   1d838:	6821      	ldr	r1, [r4, #0]
   1d83a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1d83e:	3a01      	subs	r2, #1
   1d840:	0092      	lsls	r2, r2, #2
   1d842:	3104      	adds	r1, #4
   1d844:	f7ff fd33 	bl	1d2ae <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   1d848:	7923      	ldrb	r3, [r4, #4]
   1d84a:	f3c3 0305 	ubfx	r3, r3, #0, #6
   1d84e:	3b01      	subs	r3, #1
   1d850:	e7db      	b.n	1d80a <lv_style_list_copy+0x98>

0001d852 <_lv_style_list_get_int>:
{
   1d852:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d856:	460f      	mov	r7, r1
   1d858:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   1d85a:	4605      	mov	r5, r0
   1d85c:	b318      	cbz	r0, 1d8a6 <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   1d85e:	6800      	ldr	r0, [r0, #0]
   1d860:	b308      	cbz	r0, 1d8a6 <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
   1d862:	2600      	movs	r6, #0
    int16_t weight = -1;
   1d864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    int16_t weight_goal = attr;
   1d868:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_style_int_t value_act = 0;
   1d86c:	f8ad 6006 	strh.w	r6, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
   1d870:	792b      	ldrb	r3, [r5, #4]
   1d872:	fa0f f986 	sxth.w	r9, r6
   1d876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d87a:	4599      	cmp	r9, r3
   1d87c:	db03      	blt.n	1d886 <_lv_style_list_get_int+0x34>
    if(weight >= 0) return LV_RES_OK;
   1d87e:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   1d880:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1d884:	e00f      	b.n	1d8a6 <_lv_style_list_get_int+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   1d886:	b2f1      	uxtb	r1, r6
   1d888:	4628      	mov	r0, r5
   1d88a:	f7ff fcec 	bl	1d266 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
   1d88e:	4639      	mov	r1, r7
   1d890:	f10d 0206 	add.w	r2, sp, #6
   1d894:	f7ff fed0 	bl	1d638 <_lv_style_get_int>
        if(weight_act == weight_goal) {
   1d898:	4582      	cmp	sl, r0
   1d89a:	d107      	bne.n	1d8ac <_lv_style_list_get_int+0x5a>
            return LV_RES_OK;
   1d89c:	2001      	movs	r0, #1
            *res = value_act;
   1d89e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d8a2:	f8a8 3000 	strh.w	r3, [r8]
}
   1d8a6:	b002      	add	sp, #8
   1d8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   1d8ac:	f995 3004 	ldrsb.w	r3, [r5, #4]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	da07      	bge.n	1d8c4 <_lv_style_list_get_int+0x72>
   1d8b4:	2800      	cmp	r0, #0
   1d8b6:	db05      	blt.n	1d8c4 <_lv_style_list_get_int+0x72>
   1d8b8:	f1b9 0f00 	cmp.w	r9, #0
   1d8bc:	d102      	bne.n	1d8c4 <_lv_style_list_get_int+0x72>
   1d8be:	796b      	ldrb	r3, [r5, #5]
   1d8c0:	07db      	lsls	r3, r3, #31
   1d8c2:	d5eb      	bpl.n	1d89c <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
   1d8c4:	4284      	cmp	r4, r0
            *res = value_act;
   1d8c6:	bfbe      	ittt	lt
   1d8c8:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
   1d8cc:	4604      	movlt	r4, r0
   1d8ce:	f8a8 3000 	strhlt.w	r3, [r8]
   1d8d2:	3601      	adds	r6, #1
   1d8d4:	e7cc      	b.n	1d870 <_lv_style_list_get_int+0x1e>

0001d8d6 <_lv_style_list_get_color>:
{
   1d8d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d8da:	460f      	mov	r7, r1
   1d8dc:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   1d8de:	4605      	mov	r5, r0
   1d8e0:	b300      	cbz	r0, 1d924 <_lv_style_list_get_color+0x4e>
    if(list->style_list == NULL) return LV_RES_INV;
   1d8e2:	6800      	ldr	r0, [r0, #0]
   1d8e4:	b1f0      	cbz	r0, 1d924 <_lv_style_list_get_color+0x4e>
    value_act.full = 0;
   1d8e6:	2600      	movs	r6, #0
    int16_t weight = -1;
   1d8e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    int16_t weight_goal = attr;
   1d8ec:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    value_act.full = 0;
   1d8f0:	9601      	str	r6, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
   1d8f2:	792b      	ldrb	r3, [r5, #4]
   1d8f4:	fa0f f986 	sxth.w	r9, r6
   1d8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d8fc:	4599      	cmp	r9, r3
   1d8fe:	db03      	blt.n	1d908 <_lv_style_list_get_color+0x32>
    if(weight >= 0)  return LV_RES_OK;
   1d900:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   1d902:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1d906:	e00d      	b.n	1d924 <_lv_style_list_get_color+0x4e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   1d908:	b2f1      	uxtb	r1, r6
   1d90a:	4628      	mov	r0, r5
   1d90c:	f7ff fcab 	bl	1d266 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
   1d910:	4639      	mov	r1, r7
   1d912:	aa01      	add	r2, sp, #4
   1d914:	f7ff fece 	bl	1d6b4 <_lv_style_get_color>
        if(weight_act == weight_goal) {
   1d918:	4582      	cmp	sl, r0
   1d91a:	d106      	bne.n	1d92a <_lv_style_list_get_color+0x54>
            return LV_RES_OK;
   1d91c:	2001      	movs	r0, #1
            *res = value_act;
   1d91e:	9b01      	ldr	r3, [sp, #4]
   1d920:	f8c8 3000 	str.w	r3, [r8]
}
   1d924:	b002      	add	sp, #8
   1d926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   1d92a:	f995 3004 	ldrsb.w	r3, [r5, #4]
   1d92e:	2b00      	cmp	r3, #0
   1d930:	da07      	bge.n	1d942 <_lv_style_list_get_color+0x6c>
   1d932:	2800      	cmp	r0, #0
   1d934:	db05      	blt.n	1d942 <_lv_style_list_get_color+0x6c>
   1d936:	f1b9 0f00 	cmp.w	r9, #0
   1d93a:	d102      	bne.n	1d942 <_lv_style_list_get_color+0x6c>
   1d93c:	796b      	ldrb	r3, [r5, #5]
   1d93e:	07db      	lsls	r3, r3, #31
   1d940:	d5ec      	bpl.n	1d91c <_lv_style_list_get_color+0x46>
        else if(weight_act > weight) {
   1d942:	4284      	cmp	r4, r0
            *res = value_act;
   1d944:	bfbe      	ittt	lt
   1d946:	9b01      	ldrlt	r3, [sp, #4]
   1d948:	4604      	movlt	r4, r0
   1d94a:	f8c8 3000 	strlt.w	r3, [r8]
   1d94e:	3601      	adds	r6, #1
   1d950:	e7cf      	b.n	1d8f2 <_lv_style_list_get_color+0x1c>

0001d952 <_lv_style_list_get_opa>:
{
   1d952:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d956:	460f      	mov	r7, r1
   1d958:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   1d95a:	4605      	mov	r5, r0
   1d95c:	b318      	cbz	r0, 1d9a6 <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   1d95e:	6800      	ldr	r0, [r0, #0]
   1d960:	b308      	cbz	r0, 1d9a6 <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
   1d962:	2600      	movs	r6, #0
    int16_t weight = -1;
   1d964:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    int16_t weight_goal = attr;
   1d968:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
   1d96c:	f88d 6007 	strb.w	r6, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
   1d970:	792b      	ldrb	r3, [r5, #4]
   1d972:	fa0f f986 	sxth.w	r9, r6
   1d976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d97a:	4599      	cmp	r9, r3
   1d97c:	db03      	blt.n	1d986 <_lv_style_list_get_opa+0x34>
    if(weight >= 0)  return LV_RES_OK;
   1d97e:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   1d980:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1d984:	e00f      	b.n	1d9a6 <_lv_style_list_get_opa+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   1d986:	b2f1      	uxtb	r1, r6
   1d988:	4628      	mov	r0, r5
   1d98a:	f7ff fc6c 	bl	1d266 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
   1d98e:	4639      	mov	r1, r7
   1d990:	f10d 0207 	add.w	r2, sp, #7
   1d994:	f7ff fe6f 	bl	1d676 <_lv_style_get_opa>
        if(weight_act == weight_goal) {
   1d998:	4582      	cmp	sl, r0
   1d99a:	d107      	bne.n	1d9ac <_lv_style_list_get_opa+0x5a>
            return LV_RES_OK;
   1d99c:	2001      	movs	r0, #1
            *res = value_act;
   1d99e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d9a2:	f888 3000 	strb.w	r3, [r8]
}
   1d9a6:	b002      	add	sp, #8
   1d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   1d9ac:	f995 3004 	ldrsb.w	r3, [r5, #4]
   1d9b0:	2b00      	cmp	r3, #0
   1d9b2:	da07      	bge.n	1d9c4 <_lv_style_list_get_opa+0x72>
   1d9b4:	2800      	cmp	r0, #0
   1d9b6:	db05      	blt.n	1d9c4 <_lv_style_list_get_opa+0x72>
   1d9b8:	f1b9 0f00 	cmp.w	r9, #0
   1d9bc:	d102      	bne.n	1d9c4 <_lv_style_list_get_opa+0x72>
   1d9be:	796b      	ldrb	r3, [r5, #5]
   1d9c0:	07db      	lsls	r3, r3, #31
   1d9c2:	d5eb      	bpl.n	1d99c <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
   1d9c4:	4284      	cmp	r4, r0
            *res = value_act;
   1d9c6:	bfbe      	ittt	lt
   1d9c8:	f89d 3007 	ldrblt.w	r3, [sp, #7]
   1d9cc:	4604      	movlt	r4, r0
   1d9ce:	f888 3000 	strblt.w	r3, [r8]
   1d9d2:	3601      	adds	r6, #1
   1d9d4:	e7cc      	b.n	1d970 <_lv_style_list_get_opa+0x1e>

0001d9d6 <_lv_style_list_get_ptr>:
{
   1d9d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d9da:	460f      	mov	r7, r1
   1d9dc:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   1d9de:	4605      	mov	r5, r0
   1d9e0:	b1f8      	cbz	r0, 1da22 <_lv_style_list_get_ptr+0x4c>
    if(list->style_list == NULL) return LV_RES_INV;
   1d9e2:	6800      	ldr	r0, [r0, #0]
   1d9e4:	b1e8      	cbz	r0, 1da22 <_lv_style_list_get_ptr+0x4c>
    for(ci = 0; ci < list->style_cnt; ci++) {
   1d9e6:	2600      	movs	r6, #0
    int16_t weight = -1;
   1d9e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    int16_t weight_goal = attr;
   1d9ec:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
   1d9f0:	792b      	ldrb	r3, [r5, #4]
   1d9f2:	fa0f f986 	sxth.w	r9, r6
   1d9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d9fa:	4599      	cmp	r9, r3
   1d9fc:	db03      	blt.n	1da06 <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
   1d9fe:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   1da00:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1da04:	e00d      	b.n	1da22 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   1da06:	b2f1      	uxtb	r1, r6
   1da08:	4628      	mov	r0, r5
   1da0a:	f7ff fc2c 	bl	1d266 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
   1da0e:	4639      	mov	r1, r7
   1da10:	aa01      	add	r2, sp, #4
   1da12:	f7ff fe4f 	bl	1d6b4 <_lv_style_get_color>
        if(weight_act == weight_goal) {
   1da16:	4582      	cmp	sl, r0
   1da18:	d106      	bne.n	1da28 <_lv_style_list_get_ptr+0x52>
            return LV_RES_OK;
   1da1a:	2001      	movs	r0, #1
            *res = value_act;
   1da1c:	9b01      	ldr	r3, [sp, #4]
   1da1e:	f8c8 3000 	str.w	r3, [r8]
}
   1da22:	b002      	add	sp, #8
   1da24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   1da28:	f995 3004 	ldrsb.w	r3, [r5, #4]
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	da07      	bge.n	1da40 <_lv_style_list_get_ptr+0x6a>
   1da30:	2800      	cmp	r0, #0
   1da32:	db05      	blt.n	1da40 <_lv_style_list_get_ptr+0x6a>
   1da34:	f1b9 0f00 	cmp.w	r9, #0
   1da38:	d102      	bne.n	1da40 <_lv_style_list_get_ptr+0x6a>
   1da3a:	796b      	ldrb	r3, [r5, #5]
   1da3c:	07db      	lsls	r3, r3, #31
   1da3e:	d5ec      	bpl.n	1da1a <_lv_style_list_get_ptr+0x44>
        else if(weight_act > weight) {
   1da40:	4284      	cmp	r4, r0
            *res = value_act;
   1da42:	bfbe      	ittt	lt
   1da44:	9b01      	ldrlt	r3, [sp, #4]
   1da46:	4604      	movlt	r4, r0
   1da48:	f8c8 3000 	strlt.w	r3, [r8]
   1da4c:	3601      	adds	r6, #1
   1da4e:	e7cf      	b.n	1d9f0 <_lv_style_list_get_ptr+0x1a>

0001da50 <lv_color_mix.isra.0>:
 * @param c1 the first color to mix (usually the foreground)
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
   1da50:	b570      	push	{r4, r5, r6, lr}
   1da52:	f89d 5018 	ldrb.w	r5, [sp, #24]
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1da56:	f248 0481 	movw	r4, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1da5a:	f1c5 06ff 	rsb	r6, r5, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1da5e:	4373      	muls	r3, r6
   1da60:	fb05 3300 	mla	r3, r5, r0, r3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1da64:	2000      	movs	r0, #0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1da66:	4363      	muls	r3, r4
   1da68:	0ddb      	lsrs	r3, r3, #23
    return ret;
   1da6a:	f363 0007 	bfi	r0, r3, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1da6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1da72:	4373      	muls	r3, r6
   1da74:	fb05 3101 	mla	r1, r5, r1, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1da78:	f89d 3014 	ldrb.w	r3, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1da7c:	4361      	muls	r1, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1da7e:	435e      	muls	r6, r3
   1da80:	fb02 6505 	mla	r5, r2, r5, r6
   1da84:	436c      	muls	r4, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1da86:	0dc9      	lsrs	r1, r1, #23
    return ret;
   1da88:	f361 200f 	bfi	r0, r1, #8, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1da8c:	0de4      	lsrs	r4, r4, #23
    return ret;
   1da8e:	f364 4017 	bfi	r0, r4, #16, #8
}
   1da92:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   1da96:	bd70      	pop	{r4, r5, r6, pc}

0001da98 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
   1da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da9c:	b08f      	sub	sp, #60	; 0x3c
   1da9e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
   1daa2:	e9cd 3205 	strd	r3, r2, [sp, #20]
   1daa6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
   1daaa:	2c01      	cmp	r4, #1
{
   1daac:	4606      	mov	r6, r0
   1daae:	4688      	mov	r8, r1
   1dab0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
   1dab4:	930a      	str	r3, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
   1dab6:	f240 80b8 	bls.w	1dc2a <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   1daba:	2b00      	cmp	r3, #0
   1dabc:	f000 80b5 	beq.w	1dc2a <_lv_blend_fill+0x192>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   1dac0:	f7f2 fac0 	bl	10044 <_lv_refr_get_disp_refreshing>
   1dac4:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1dac6:	f003 fa21 	bl	20f0c <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
   1daca:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1dacc:	4681      	mov	r9, r0
    lv_color_t * disp_buf = vdb->buf_act;
   1dace:	9307      	str	r3, [sp, #28]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   1dad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1dad2:	b10b      	cbz	r3, 1dad8 <_lv_blend_fill+0x40>
   1dad4:	4628      	mov	r0, r5
   1dad6:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
   1dad8:	4642      	mov	r2, r8
   1dada:	4631      	mov	r1, r6
   1dadc:	a80c      	add	r0, sp, #48	; 0x30
   1dade:	f003 fa91 	bl	21004 <_lv_area_intersect>
    if(!is_common) return;
   1dae2:	2800      	cmp	r0, #0
   1dae4:	f000 80a1 	beq.w	1dc2a <_lv_blend_fill+0x192>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
   1dae8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   1daec:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
    draw_area.y1 -= disp_area->y1;
   1daf0:	f9bd b032 	ldrsh.w	fp, [sp, #50]	; 0x32
   1daf4:	f9b9 1012 	ldrsh.w	r1, [r9, #18]
    draw_area.x1 -= disp_area->x1;
   1daf8:	1a13      	subs	r3, r2, r0
   1dafa:	fa0f fe83 	sxth.w	lr, r3
    draw_area.y1 -= disp_area->y1;
   1dafe:	ebab 0301 	sub.w	r3, fp, r1
   1db02:	b21b      	sxth	r3, r3
   1db04:	9308      	str	r3, [sp, #32]
   1db06:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
   1db0a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
    draw_area.x1 -= disp_area->x1;
   1db0e:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
    draw_area.x2 -= disp_area->x1;
   1db12:	1a18      	subs	r0, r3, r0
   1db14:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
   1db18:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
   1db1c:	1a41      	subs	r1, r0, r1
   1db1e:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
   1db22:	9905      	ldr	r1, [sp, #20]
   1db24:	2900      	cmp	r1, #0
   1db26:	d150      	bne.n	1dbca <_lv_blend_fill+0x132>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
   1db28:	6969      	ldr	r1, [r5, #20]
   1db2a:	2900      	cmp	r1, #0
   1db2c:	d169      	bne.n	1dc02 <_lv_blend_fill+0x16a>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
   1db2e:	2f00      	cmp	r7, #0
   1db30:	d17b      	bne.n	1dc2a <_lv_blend_fill+0x192>
   1db32:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   1db36:	f8b9 c010 	ldrh.w	ip, [r9, #16]
   1db3a:	f1c2 0201 	rsb	r2, r2, #1
   1db3e:	441a      	add	r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1db40:	f1cb 0b01 	rsb	fp, fp, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1db44:	3101      	adds	r1, #1
   1db46:	b213      	sxth	r3, r2

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   1db48:	f8dd 9020 	ldr.w	r9, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1db4c:	4458      	add	r0, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1db4e:	eba1 010c 	sub.w	r1, r1, ip
   1db52:	9d06      	ldr	r5, [sp, #24]
   1db54:	b209      	sxth	r1, r1
   1db56:	9306      	str	r3, [sp, #24]
    int32_t draw_area_h = lv_area_get_height(draw_area);
   1db58:	b203      	sxth	r3, r0
   1db5a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   1db5c:	fb01 e309 	mla	r3, r1, r9, lr
   1db60:	9a07      	ldr	r2, [sp, #28]
   1db62:	fa5f fa85 	uxtb.w	sl, r5
   1db66:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
   1db6a:	008a      	lsls	r2, r1, #2
   1db6c:	9208      	str	r2, [sp, #32]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1db6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1db70:	f3c5 2607 	ubfx	r6, r5, #8, #8
   1db74:	2a01      	cmp	r2, #1
   1db76:	f3c5 4807 	ubfx	r8, r5, #16, #8
   1db7a:	f040 80e2 	bne.w	1dd42 <_lv_blend_fill+0x2aa>
        if(opa > LV_OPA_MAX) {
   1db7e:	2cfd      	cmp	r4, #253	; 0xfd
   1db80:	f200 80ac 	bhi.w	1dcdc <_lv_blend_fill+0x244>

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   1db84:	4631      	mov	r1, r6
   1db86:	463b      	mov	r3, r7
   1db88:	e9cd 7401 	strd	r7, r4, [sp, #4]
   1db8c:	4642      	mov	r2, r8
   1db8e:	4650      	mov	r0, sl
   1db90:	9700      	str	r7, [sp, #0]
   1db92:	f7ff ff5d 	bl	1da50 <lv_color_mix.isra.0>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   1db96:	fb08 f304 	mul.w	r3, r8, r4
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   1db9a:	4366      	muls	r6, r4
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   1db9c:	9305      	str	r3, [sp, #20]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   1db9e:	fb0a f304 	mul.w	r3, sl, r4

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
   1dba2:	43e4      	mvns	r4, r4
            lv_color_t last_dest_color = LV_COLOR_BLACK;
   1dba4:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dba8:	f248 0981 	movw	r9, #32897	; 0x8081
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   1dbac:	b2c1      	uxtb	r1, r0
   1dbae:	f3c0 2c07 	ubfx	ip, r0, #8, #8
   1dbb2:	f3c0 4e07 	ubfx	lr, r0, #16, #8
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   1dbb6:	9307      	str	r3, [sp, #28]
   1dbb8:	0e00      	lsrs	r0, r0, #24
            lv_opa_t opa_inv = 255 - opa;
   1dbba:	b2e4      	uxtb	r4, r4

            for(y = 0; y < draw_area_h; y++) {
   1dbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dbbe:	42bb      	cmp	r3, r7
   1dbc0:	dd33      	ble.n	1dc2a <_lv_blend_fill+0x192>
   1dbc2:	465a      	mov	r2, fp
                for(x = 0; x < draw_area_w; x++) {
   1dbc4:	f04f 0800 	mov.w	r8, #0
   1dbc8:	e0b4      	b.n	1dd34 <_lv_blend_fill+0x29c>
    if(mask && disp->driver.antialiasing == 0)
   1dbca:	7a29      	ldrb	r1, [r5, #8]
   1dbcc:	07c9      	lsls	r1, r1, #31
   1dbce:	d4ab      	bmi.n	1db28 <_lv_blend_fill+0x90>
   1dbd0:	1c59      	adds	r1, r3, #1
   1dbd2:	1a89      	subs	r1, r1, r2
   1dbd4:	9e05      	ldr	r6, [sp, #20]
        int32_t mask_w = lv_area_get_width(&draw_area);
   1dbd6:	fa0f fa81 	sxth.w	sl, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   1dbda:	9905      	ldr	r1, [sp, #20]
   1dbdc:	3e01      	subs	r6, #1
   1dbde:	f1c1 0801 	rsb	r8, r1, #1
   1dbe2:	eb08 0c06 	add.w	ip, r8, r6
   1dbe6:	45e2      	cmp	sl, ip
   1dbe8:	dd9e      	ble.n	1db28 <_lv_blend_fill+0x90>
   1dbea:	f816 cf01 	ldrb.w	ip, [r6, #1]!
   1dbee:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   1dbf2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1dbf6:	bf98      	it	ls
   1dbf8:	f04f 0c00 	movls.w	ip, #0
   1dbfc:	f886 c000 	strb.w	ip, [r6]
   1dc00:	e7ef      	b.n	1dbe2 <_lv_blend_fill+0x14a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   1dc02:	f7f2 fa1f 	bl	10044 <_lv_refr_get_disp_refreshing>
   1dc06:	f8b9 6014 	ldrh.w	r6, [r9, #20]
   1dc0a:	f8b9 2010 	ldrh.w	r2, [r9, #16]
   1dc0e:	3601      	adds	r6, #1
   1dc10:	1ab6      	subs	r6, r6, r2
   1dc12:	b233      	sxth	r3, r6
   1dc14:	9308      	str	r3, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1dc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   1dc18:	4607      	mov	r7, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1dc1a:	2b01      	cmp	r3, #1
   1dc1c:	f9bd 5032 	ldrsh.w	r5, [sp, #50]	; 0x32
   1dc20:	d11e      	bne.n	1dc60 <_lv_blend_fill+0x1c8>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dc22:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   1dc26:	429d      	cmp	r5, r3
   1dc28:	dd02      	ble.n	1dc30 <_lv_blend_fill+0x198>
}
   1dc2a:	b00f      	add	sp, #60	; 0x3c
   1dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dc30:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   1dc34:	fa0f f985 	sxth.w	r9, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dc38:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
   1dc3c:	4598      	cmp	r8, r3
   1dc3e:	dd01      	ble.n	1dc44 <_lv_blend_fill+0x1ac>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dc40:	3501      	adds	r5, #1
   1dc42:	e7ee      	b.n	1dc22 <_lv_blend_fill+0x18a>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   1dc44:	9b06      	ldr	r3, [sp, #24]
   1dc46:	9402      	str	r4, [sp, #8]
   1dc48:	e9cd 9300 	strd	r9, r3, [sp]
   1dc4c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
   1dc50:	fa0f f388 	sxth.w	r3, r8
   1dc54:	4638      	mov	r0, r7
   1dc56:	697e      	ldr	r6, [r7, #20]
   1dc58:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dc5a:	f108 0801 	add.w	r8, r8, #1
   1dc5e:	e7eb      	b.n	1dc38 <_lv_blend_fill+0x1a0>
   1dc60:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   1dc64:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1dc68:	9a05      	ldr	r2, [sp, #20]
   1dc6a:	f108 0801 	add.w	r8, r8, #1
   1dc6e:	eba8 0803 	sub.w	r8, r8, r3
   1dc72:	eba2 0a03 	sub.w	sl, r2, r3
   1dc76:	fa0f f888 	sxth.w	r8, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dc7a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   1dc7e:	429d      	cmp	r5, r3
   1dc80:	dcd3      	bgt.n	1dc2a <_lv_blend_fill+0x192>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dc82:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   1dc86:	fa0f fb85 	sxth.w	fp, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dc8a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
   1dc8e:	4599      	cmp	r9, r3
   1dc90:	dd02      	ble.n	1dc98 <_lv_blend_fill+0x200>
            mask_tmp += draw_area_w;
   1dc92:	44c2      	add	sl, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dc94:	3501      	adds	r5, #1
   1dc96:	e7f0      	b.n	1dc7a <_lv_blend_fill+0x1e2>
                if(mask_tmp[x]) {
   1dc98:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1dc9c:	b16b      	cbz	r3, 1dcba <_lv_blend_fill+0x222>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   1dc9e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   1dca2:	fb14 f303 	smulbb	r3, r4, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   1dca6:	0a1b      	lsrs	r3, r3, #8
   1dca8:	9302      	str	r3, [sp, #8]
   1dcaa:	9b06      	ldr	r3, [sp, #24]
   1dcac:	4638      	mov	r0, r7
   1dcae:	e9cd b300 	strd	fp, r3, [sp]
   1dcb2:	fa0f f389 	sxth.w	r3, r9
   1dcb6:	697e      	ldr	r6, [r7, #20]
   1dcb8:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1dcba:	f109 0901 	add.w	r9, r9, #1
   1dcbe:	e7e4      	b.n	1dc8a <_lv_blend_fill+0x1f2>
                lv_color_fill(disp_buf_first, color, draw_area_w);
   1dcc0:	f36a 0507 	bfi	r5, sl, #0, #8
   1dcc4:	f366 250f 	bfi	r5, r6, #8, #8
   1dcc8:	f368 4517 	bfi	r5, r8, #16, #8
   1dccc:	4658      	mov	r0, fp
   1dcce:	4629      	mov	r1, r5
   1dcd0:	9a06      	ldr	r2, [sp, #24]
   1dcd2:	f003 fbc8 	bl	21466 <lv_color_fill>
                disp_buf_first += disp_w;
   1dcd6:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
   1dcd8:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   1dcda:	449b      	add	fp, r3
            for(y = 0; y < draw_area_h; y++) {
   1dcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dcde:	42bb      	cmp	r3, r7
   1dce0:	dcee      	bgt.n	1dcc0 <_lv_blend_fill+0x228>
   1dce2:	e7a2      	b.n	1dc2a <_lv_blend_fill+0x192>
                    if(last_dest_color.full != disp_buf_first[x].full) {
   1dce4:	f8d2 a000 	ldr.w	sl, [r2]
   1dce8:	4555      	cmp	r5, sl
   1dcea:	d01a      	beq.n	1dd22 <_lv_blend_fill+0x28a>
                        last_dest_color = disp_buf_first[x];
   1dcec:	4655      	mov	r5, sl
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   1dcee:	20ff      	movs	r0, #255	; 0xff
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dcf0:	9905      	ldr	r1, [sp, #20]
   1dcf2:	f892 e002 	ldrb.w	lr, [r2, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dcf6:	f892 c001 	ldrb.w	ip, [r2, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dcfa:	fb0e 1e04 	mla	lr, lr, r4, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dcfe:	9b07      	ldr	r3, [sp, #28]
   1dd00:	7811      	ldrb	r1, [r2, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd02:	fb0c 6c04 	mla	ip, ip, r4, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd06:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd0a:	fb09 fe0e 	mul.w	lr, r9, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd0e:	fb09 fc0c 	mul.w	ip, r9, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd12:	fb09 f101 	mul.w	r1, r9, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd16:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd1a:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1dd1e:	f3c1 51c7 	ubfx	r1, r1, #23, #8
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
   1dd22:	7011      	strb	r1, [r2, #0]
   1dd24:	f882 c001 	strb.w	ip, [r2, #1]
   1dd28:	f882 e002 	strb.w	lr, [r2, #2]
   1dd2c:	70d0      	strb	r0, [r2, #3]
                for(x = 0; x < draw_area_w; x++) {
   1dd2e:	f108 0801 	add.w	r8, r8, #1
   1dd32:	3204      	adds	r2, #4
   1dd34:	9b06      	ldr	r3, [sp, #24]
   1dd36:	4543      	cmp	r3, r8
   1dd38:	dcd4      	bgt.n	1dce4 <_lv_blend_fill+0x24c>
                }
                disp_buf_first += disp_w;
   1dd3a:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
   1dd3c:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   1dd3e:	449b      	add	fp, r3
            for(y = 0; y < draw_area_h; y++) {
   1dd40:	e73c      	b.n	1dbbc <_lv_blend_fill+0x124>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   1dd42:	2cfd      	cmp	r4, #253	; 0xfd
   1dd44:	d80d      	bhi.n	1dd62 <_lv_blend_fill+0x2ca>
        last_dest_color.full = disp_buf_first[0].full;
   1dd46:	9a07      	ldr	r2, [sp, #28]
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
   1dd48:	9709      	str	r7, [sp, #36]	; 0x24
        last_dest_color.full = disp_buf_first[0].full;
   1dd4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        last_res_color.full = disp_buf_first[0].full;
   1dd4e:	4610      	mov	r0, r2
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dd50:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   1dd54:	4599      	cmp	r9, r3
   1dd56:	f73f af68 	bgt.w	1dc2a <_lv_blend_fill+0x192>
                const lv_opa_t * mask_tmp_x = mask;
                for(x = 0; x < draw_area_w; x++) {
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	465d      	mov	r5, fp
   1dd5e:	9307      	str	r3, [sp, #28]
   1dd60:	e11d      	b.n	1df9e <_lv_blend_fill+0x506>
        int32_t x_end4 = draw_area_w - 4;
   1dd62:	9b06      	ldr	r3, [sp, #24]
   1dd64:	3b04      	subs	r3, #4
            for(y = 0; y < draw_area_h; y++) {
   1dd66:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
   1dd6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   1dd6e:	4293      	cmp	r3, r2
   1dd70:	f77f af5b 	ble.w	1dc2a <_lv_blend_fill+0x192>
   1dd74:	9b05      	ldr	r3, [sp, #20]
   1dd76:	46d9      	mov	r9, fp
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   1dd78:	2700      	movs	r7, #0
   1dd7a:	9307      	str	r3, [sp, #28]
   1dd7c:	e011      	b.n	1dda2 <_lv_blend_fill+0x30a>
                    FILL_NORMAL_MASK_PX(x, color)
   1dd7e:	9b07      	ldr	r3, [sp, #28]
   1dd80:	f813 2b01 	ldrb.w	r2, [r3], #1
   1dd84:	9307      	str	r3, [sp, #28]
   1dd86:	b14a      	cbz	r2, 1dd9c <_lv_blend_fill+0x304>
   1dd88:	2aff      	cmp	r2, #255	; 0xff
   1dd8a:	d127      	bne.n	1dddc <_lv_blend_fill+0x344>
   1dd8c:	f36a 0507 	bfi	r5, sl, #0, #8
   1dd90:	f366 250f 	bfi	r5, r6, #8, #8
   1dd94:	f368 4517 	bfi	r5, r8, #16, #8
   1dd98:	f8c9 5000 	str.w	r5, [r9]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   1dd9c:	3701      	adds	r7, #1
   1dd9e:	f109 0904 	add.w	r9, r9, #4
   1dda2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1dda6:	42bb      	cmp	r3, r7
   1dda8:	dd02      	ble.n	1ddb0 <_lv_blend_fill+0x318>
   1ddaa:	4623      	mov	r3, r4
   1ddac:	079b      	lsls	r3, r3, #30
   1ddae:	d1e6      	bne.n	1dd7e <_lv_blend_fill+0x2e6>
   1ddb0:	eb0b 0987 	add.w	r9, fp, r7, lsl #2
                for(; x <= x_end4; x += 4) {
   1ddb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ddb6:	42bb      	cmp	r3, r7
   1ddb8:	da21      	bge.n	1ddfe <_lv_blend_fill+0x366>
   1ddba:	eb0b 0987 	add.w	r9, fp, r7, lsl #2
                for(; x < draw_area_w ; x++) {
   1ddbe:	1b3f      	subs	r7, r7, r4
   1ddc0:	9a06      	ldr	r2, [sp, #24]
   1ddc2:	193b      	adds	r3, r7, r4
   1ddc4:	429a      	cmp	r2, r3
   1ddc6:	f300 80a3 	bgt.w	1df10 <_lv_blend_fill+0x478>
                disp_buf_first += disp_w;
   1ddca:	9b08      	ldr	r3, [sp, #32]
   1ddcc:	449b      	add	fp, r3
                mask += draw_area_w;
   1ddce:	9b05      	ldr	r3, [sp, #20]
   1ddd0:	4413      	add	r3, r2
   1ddd2:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
   1ddd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ddd6:	3301      	adds	r3, #1
   1ddd8:	930a      	str	r3, [sp, #40]	; 0x28
   1ddda:	e7c6      	b.n	1dd6a <_lv_blend_fill+0x2d2>
                    FILL_NORMAL_MASK_PX(x, color)
   1dddc:	f899 3000 	ldrb.w	r3, [r9]
   1dde0:	9202      	str	r2, [sp, #8]
   1dde2:	f899 2002 	ldrb.w	r2, [r9, #2]
   1dde6:	4631      	mov	r1, r6
   1dde8:	9201      	str	r2, [sp, #4]
   1ddea:	f899 2001 	ldrb.w	r2, [r9, #1]
   1ddee:	4650      	mov	r0, sl
   1ddf0:	9200      	str	r2, [sp, #0]
   1ddf2:	4642      	mov	r2, r8
   1ddf4:	f7ff fe2c 	bl	1da50 <lv_color_mix.isra.0>
   1ddf8:	f8c9 0000 	str.w	r0, [r9]
   1ddfc:	e7ce      	b.n	1dd9c <_lv_blend_fill+0x304>
                    if(*mask32) {
   1ddfe:	6823      	ldr	r3, [r4, #0]
   1de00:	b16b      	cbz	r3, 1de1e <_lv_blend_fill+0x386>
                        if((*mask32) == 0xFFFFFFFF) {
   1de02:	3301      	adds	r3, #1
   1de04:	d110      	bne.n	1de28 <_lv_blend_fill+0x390>
                            disp_buf_first[x] = color;
   1de06:	f36a 0507 	bfi	r5, sl, #0, #8
   1de0a:	f366 250f 	bfi	r5, r6, #8, #8
   1de0e:	f368 4517 	bfi	r5, r8, #16, #8
                            disp_buf_first[x + 1] = color;
   1de12:	e9c9 5500 	strd	r5, r5, [r9]
                            disp_buf_first[x + 2] = color;
   1de16:	f8c9 5008 	str.w	r5, [r9, #8]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   1de1a:	f8c9 500c 	str.w	r5, [r9, #12]
                    mask32++;
   1de1e:	3404      	adds	r4, #4
                for(; x <= x_end4; x += 4) {
   1de20:	3704      	adds	r7, #4
   1de22:	f109 0910 	add.w	r9, r9, #16
   1de26:	e7c5      	b.n	1ddb4 <_lv_blend_fill+0x31c>
                            FILL_NORMAL_MASK_PX(x, color)
   1de28:	7822      	ldrb	r2, [r4, #0]
   1de2a:	b14a      	cbz	r2, 1de40 <_lv_blend_fill+0x3a8>
   1de2c:	2aff      	cmp	r2, #255	; 0xff
   1de2e:	d12b      	bne.n	1de88 <_lv_blend_fill+0x3f0>
   1de30:	f36a 0507 	bfi	r5, sl, #0, #8
   1de34:	f366 250f 	bfi	r5, r6, #8, #8
   1de38:	f368 4517 	bfi	r5, r8, #16, #8
   1de3c:	f8c9 5000 	str.w	r5, [r9]
                            FILL_NORMAL_MASK_PX(x + 1, color)
   1de40:	7862      	ldrb	r2, [r4, #1]
   1de42:	b14a      	cbz	r2, 1de58 <_lv_blend_fill+0x3c0>
   1de44:	2aff      	cmp	r2, #255	; 0xff
   1de46:	d130      	bne.n	1deaa <_lv_blend_fill+0x412>
   1de48:	f36a 0507 	bfi	r5, sl, #0, #8
   1de4c:	f366 250f 	bfi	r5, r6, #8, #8
   1de50:	f368 4517 	bfi	r5, r8, #16, #8
   1de54:	f8c9 5004 	str.w	r5, [r9, #4]
                            FILL_NORMAL_MASK_PX(x + 2, color)
   1de58:	78a2      	ldrb	r2, [r4, #2]
   1de5a:	b14a      	cbz	r2, 1de70 <_lv_blend_fill+0x3d8>
   1de5c:	2aff      	cmp	r2, #255	; 0xff
   1de5e:	d135      	bne.n	1decc <_lv_blend_fill+0x434>
   1de60:	f36a 0507 	bfi	r5, sl, #0, #8
   1de64:	f366 250f 	bfi	r5, r6, #8, #8
   1de68:	f368 4517 	bfi	r5, r8, #16, #8
   1de6c:	f8c9 5008 	str.w	r5, [r9, #8]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   1de70:	78e2      	ldrb	r2, [r4, #3]
   1de72:	2a00      	cmp	r2, #0
   1de74:	d0d3      	beq.n	1de1e <_lv_blend_fill+0x386>
   1de76:	2aff      	cmp	r2, #255	; 0xff
   1de78:	d139      	bne.n	1deee <_lv_blend_fill+0x456>
   1de7a:	f36a 0507 	bfi	r5, sl, #0, #8
   1de7e:	f366 250f 	bfi	r5, r6, #8, #8
   1de82:	f368 4517 	bfi	r5, r8, #16, #8
   1de86:	e7c8      	b.n	1de1a <_lv_blend_fill+0x382>
                            FILL_NORMAL_MASK_PX(x, color)
   1de88:	f899 3000 	ldrb.w	r3, [r9]
   1de8c:	9202      	str	r2, [sp, #8]
   1de8e:	f899 2002 	ldrb.w	r2, [r9, #2]
   1de92:	4631      	mov	r1, r6
   1de94:	9201      	str	r2, [sp, #4]
   1de96:	f899 2001 	ldrb.w	r2, [r9, #1]
   1de9a:	4650      	mov	r0, sl
   1de9c:	9200      	str	r2, [sp, #0]
   1de9e:	4642      	mov	r2, r8
   1dea0:	f7ff fdd6 	bl	1da50 <lv_color_mix.isra.0>
   1dea4:	f8c9 0000 	str.w	r0, [r9]
   1dea8:	e7ca      	b.n	1de40 <_lv_blend_fill+0x3a8>
                            FILL_NORMAL_MASK_PX(x + 1, color)
   1deaa:	f899 3004 	ldrb.w	r3, [r9, #4]
   1deae:	9202      	str	r2, [sp, #8]
   1deb0:	f899 2006 	ldrb.w	r2, [r9, #6]
   1deb4:	4631      	mov	r1, r6
   1deb6:	9201      	str	r2, [sp, #4]
   1deb8:	f899 2005 	ldrb.w	r2, [r9, #5]
   1debc:	4650      	mov	r0, sl
   1debe:	9200      	str	r2, [sp, #0]
   1dec0:	4642      	mov	r2, r8
   1dec2:	f7ff fdc5 	bl	1da50 <lv_color_mix.isra.0>
   1dec6:	f8c9 0004 	str.w	r0, [r9, #4]
   1deca:	e7c5      	b.n	1de58 <_lv_blend_fill+0x3c0>
                            FILL_NORMAL_MASK_PX(x + 2, color)
   1decc:	f899 3008 	ldrb.w	r3, [r9, #8]
   1ded0:	9202      	str	r2, [sp, #8]
   1ded2:	f899 200a 	ldrb.w	r2, [r9, #10]
   1ded6:	4631      	mov	r1, r6
   1ded8:	9201      	str	r2, [sp, #4]
   1deda:	f899 2009 	ldrb.w	r2, [r9, #9]
   1dede:	4650      	mov	r0, sl
   1dee0:	9200      	str	r2, [sp, #0]
   1dee2:	4642      	mov	r2, r8
   1dee4:	f7ff fdb4 	bl	1da50 <lv_color_mix.isra.0>
   1dee8:	f8c9 0008 	str.w	r0, [r9, #8]
   1deec:	e7c0      	b.n	1de70 <_lv_blend_fill+0x3d8>
                            FILL_NORMAL_MASK_PX(x + 3, color)
   1deee:	f899 300c 	ldrb.w	r3, [r9, #12]
   1def2:	9202      	str	r2, [sp, #8]
   1def4:	f899 200e 	ldrb.w	r2, [r9, #14]
   1def8:	4631      	mov	r1, r6
   1defa:	9201      	str	r2, [sp, #4]
   1defc:	f899 200d 	ldrb.w	r2, [r9, #13]
   1df00:	4650      	mov	r0, sl
   1df02:	9200      	str	r2, [sp, #0]
   1df04:	4642      	mov	r2, r8
   1df06:	f7ff fda3 	bl	1da50 <lv_color_mix.isra.0>
   1df0a:	f8c9 000c 	str.w	r0, [r9, #12]
   1df0e:	e786      	b.n	1de1e <_lv_blend_fill+0x386>
                    FILL_NORMAL_MASK_PX(x, color)
   1df10:	f814 2b01 	ldrb.w	r2, [r4], #1
   1df14:	b14a      	cbz	r2, 1df2a <_lv_blend_fill+0x492>
   1df16:	2aff      	cmp	r2, #255	; 0xff
   1df18:	d10a      	bne.n	1df30 <_lv_blend_fill+0x498>
   1df1a:	f36a 0507 	bfi	r5, sl, #0, #8
   1df1e:	f366 250f 	bfi	r5, r6, #8, #8
   1df22:	f368 4517 	bfi	r5, r8, #16, #8
   1df26:	f8c9 5000 	str.w	r5, [r9]
                for(; x < draw_area_w ; x++) {
   1df2a:	f109 0904 	add.w	r9, r9, #4
   1df2e:	e747      	b.n	1ddc0 <_lv_blend_fill+0x328>
                    FILL_NORMAL_MASK_PX(x, color)
   1df30:	f899 3000 	ldrb.w	r3, [r9]
   1df34:	9202      	str	r2, [sp, #8]
   1df36:	f899 2002 	ldrb.w	r2, [r9, #2]
   1df3a:	4631      	mov	r1, r6
   1df3c:	9201      	str	r2, [sp, #4]
   1df3e:	f899 2001 	ldrb.w	r2, [r9, #1]
   1df42:	4650      	mov	r0, sl
   1df44:	9200      	str	r2, [sp, #0]
   1df46:	4642      	mov	r2, r8
   1df48:	f7ff fd82 	bl	1da50 <lv_color_mix.isra.0>
   1df4c:	f8c9 0000 	str.w	r0, [r9]
   1df50:	e7eb      	b.n	1df2a <_lv_blend_fill+0x492>
                    if(*mask_tmp_x) {
   1df52:	9b05      	ldr	r3, [sp, #20]
   1df54:	9907      	ldr	r1, [sp, #28]
   1df56:	5c5b      	ldrb	r3, [r3, r1]
   1df58:	b1eb      	cbz	r3, 1df96 <_lv_blend_fill+0x4fe>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   1df5a:	42bb      	cmp	r3, r7
   1df5c:	d017      	beq.n	1df8e <_lv_blend_fill+0x4f6>
   1df5e:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
   1df60:	bf1d      	ittte	ne
   1df62:	fb13 f304 	smulbbne	r3, r3, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   1df66:	0a1b      	lsrne	r3, r3, #8
   1df68:	9309      	strne	r3, [sp, #36]	; 0x24
   1df6a:	9409      	streq	r4, [sp, #36]	; 0x24
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
   1df6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1df6e:	782b      	ldrb	r3, [r5, #0]
   1df70:	9202      	str	r2, [sp, #8]
   1df72:	78aa      	ldrb	r2, [r5, #2]
   1df74:	4631      	mov	r1, r6
   1df76:	9201      	str	r2, [sp, #4]
   1df78:	786a      	ldrb	r2, [r5, #1]
   1df7a:	4650      	mov	r0, sl
   1df7c:	9200      	str	r2, [sp, #0]
   1df7e:	4642      	mov	r2, r8
   1df80:	f7ff fd66 	bl	1da50 <lv_color_mix.isra.0>
                            }
                            last_mask = *mask_tmp_x;
   1df84:	9a07      	ldr	r2, [sp, #28]
   1df86:	9b05      	ldr	r3, [sp, #20]
   1df88:	5c9f      	ldrb	r7, [r3, r2]
                            last_dest_color.full = disp_buf_first[x].full;
   1df8a:	682a      	ldr	r2, [r5, #0]
   1df8c:	e002      	b.n	1df94 <_lv_blend_fill+0x4fc>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
   1df8e:	682b      	ldr	r3, [r5, #0]
   1df90:	4293      	cmp	r3, r2
   1df92:	d1eb      	bne.n	1df6c <_lv_blend_fill+0x4d4>
                        }
                        disp_buf_first[x] = last_res_color;
   1df94:	6028      	str	r0, [r5, #0]
                for(x = 0; x < draw_area_w; x++) {
   1df96:	9b07      	ldr	r3, [sp, #28]
   1df98:	3504      	adds	r5, #4
   1df9a:	3301      	adds	r3, #1
   1df9c:	9307      	str	r3, [sp, #28]
   1df9e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   1dfa2:	428b      	cmp	r3, r1
   1dfa4:	dcd5      	bgt.n	1df52 <_lv_blend_fill+0x4ba>
                    }
                    mask_tmp_x++;
                }
                disp_buf_first += disp_w;
   1dfa6:	9b08      	ldr	r3, [sp, #32]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dfa8:	f109 0901 	add.w	r9, r9, #1
                disp_buf_first += disp_w;
   1dfac:	449b      	add	fp, r3
                mask += draw_area_w;
   1dfae:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
   1dfb2:	440b      	add	r3, r1
   1dfb4:	9305      	str	r3, [sp, #20]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1dfb6:	e6cb      	b.n	1dd50 <_lv_blend_fill+0x2b8>

0001dfb8 <_lv_blend_map>:
{
   1dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfbc:	b08d      	sub	sp, #52	; 0x34
   1dfbe:	469b      	mov	fp, r3
   1dfc0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   1dfc4:	4689      	mov	r9, r1
    if(opa < LV_OPA_MIN) return;
   1dfc6:	2b01      	cmp	r3, #1
{
   1dfc8:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
   1dfcc:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   1dfd0:	9208      	str	r2, [sp, #32]
   1dfd2:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
   1dfd4:	f240 80d4 	bls.w	1e180 <_lv_blend_map+0x1c8>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   1dfd8:	f1b8 0f00 	cmp.w	r8, #0
   1dfdc:	f000 80d0 	beq.w	1e180 <_lv_blend_map+0x1c8>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
   1dfe0:	460a      	mov	r2, r1
   1dfe2:	4601      	mov	r1, r0
   1dfe4:	a80a      	add	r0, sp, #40	; 0x28
   1dfe6:	f003 f80d 	bl	21004 <_lv_area_intersect>
    if(!is_common) return;
   1dfea:	2800      	cmp	r0, #0
   1dfec:	f000 80c8 	beq.w	1e180 <_lv_blend_map+0x1c8>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   1dff0:	f7f2 f828 	bl	10044 <_lv_refr_get_disp_refreshing>
   1dff4:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1dff6:	f002 ff89 	bl	20f0c <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
   1dffa:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1dffc:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
   1dffe:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   1e000:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e002:	b10b      	cbz	r3, 1e008 <_lv_blend_map+0x50>
   1e004:	4620      	mov	r0, r4
   1e006:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
   1e008:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   1e00c:	f9b7 6010 	ldrsh.w	r6, [r7, #16]
    draw_area.x2 -= disp_area->x1;
   1e010:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
   1e014:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
   1e018:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
    draw_area.x1 -= disp_area->x1;
   1e01c:	eba1 0a06 	sub.w	sl, r1, r6
    draw_area.x2 -= disp_area->x1;
   1e020:	1b96      	subs	r6, r2, r6
   1e022:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
   1e026:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
    draw_area.y1 -= disp_area->y1;
   1e02a:	9306      	str	r3, [sp, #24]
   1e02c:	1a1b      	subs	r3, r3, r0
    draw_area.x1 -= disp_area->x1;
   1e02e:	fa0f fa8a 	sxth.w	sl, sl
    draw_area.y1 -= disp_area->y1;
   1e032:	b21b      	sxth	r3, r3
    draw_area.y2 -= disp_area->y1;
   1e034:	1a30      	subs	r0, r6, r0
    draw_area.x1 -= disp_area->x1;
   1e036:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
   1e03a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
   1e03e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    if(mask && disp->driver.antialiasing == 0)
   1e042:	f1bb 0f00 	cmp.w	fp, #0
   1e046:	d150      	bne.n	1e0ea <_lv_blend_map+0x132>
    if(disp->driver.set_px_cb) {
   1e048:	6960      	ldr	r0, [r4, #20]
   1e04a:	2800      	cmp	r0, #0
   1e04c:	d16b      	bne.n	1e126 <_lv_blend_map+0x16e>
    else if(mode == LV_BLEND_MODE_NORMAL) {
   1e04e:	2d00      	cmp	r5, #0
   1e050:	f040 8096 	bne.w	1e180 <_lv_blend_map+0x1c8>
   1e054:	f1c1 0101 	rsb	r1, r1, #1
   1e058:	4411      	add	r1, r2
   1e05a:	b20a      	sxth	r2, r1
   1e05c:	8ab8      	ldrh	r0, [r7, #20]
   1e05e:	f9b7 c010 	ldrsh.w	ip, [r7, #16]
   1e062:	9204      	str	r2, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1e064:	9a06      	ldr	r2, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1e066:	3001      	adds	r0, #1
   1e068:	eba0 000c 	sub.w	r0, r0, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1e06c:	f1c2 0201 	rsb	r2, r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1e070:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1e072:	4416      	add	r6, r2

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);
   1e074:	b232      	sxth	r2, r6

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   1e076:	fb00 a603 	mla	r6, r0, r3, sl
   1e07a:	9c07      	ldr	r4, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1e07c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
    int32_t draw_area_h = lv_area_get_height(draw_area);
   1e080:	9206      	str	r2, [sp, #24]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   1e082:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   1e086:	f9b9 2000 	ldrsh.w	r2, [r9]

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   1e08a:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
   1e08e:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
   1e092:	3101      	adds	r1, #1
   1e094:	1a89      	subs	r1, r1, r2
   1e096:	1be4      	subs	r4, r4, r7
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   1e098:	ebac 0c02 	sub.w	ip, ip, r2
   1e09c:	b209      	sxth	r1, r1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   1e09e:	441c      	add	r4, r3
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   1e0a0:	44e2      	add	sl, ip
   1e0a2:	fb01 a404 	mla	r4, r1, r4, sl
   1e0a6:	9b08      	ldr	r3, [sp, #32]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1e0a8:	f1b8 0f01 	cmp.w	r8, #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   1e0ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1e0b0:	ea4f 0380 	mov.w	r3, r0, lsl #2
   1e0b4:	9307      	str	r3, [sp, #28]
   1e0b6:	ea4f 0381 	mov.w	r3, r1, lsl #2
   1e0ba:	9308      	str	r3, [sp, #32]
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
   1e0bc:	9b05      	ldr	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1e0be:	f040 80dd 	bne.w	1e27c <_lv_blend_map+0x2c4>
        if(opa > LV_OPA_MAX) {
   1e0c2:	2bfd      	cmp	r3, #253	; 0xfd
   1e0c4:	f240 80d2 	bls.w	1e26c <_lv_blend_map+0x2b4>
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
   1e0c8:	9b04      	ldr	r3, [sp, #16]
   1e0ca:	ea4f 0b83 	mov.w	fp, r3, lsl #2
            for(y = 0; y < draw_area_h; y++) {
   1e0ce:	9b06      	ldr	r3, [sp, #24]
   1e0d0:	42ab      	cmp	r3, r5
   1e0d2:	dd55      	ble.n	1e180 <_lv_blend_map+0x1c8>
    return memcpy(dst, src, len);
   1e0d4:	4621      	mov	r1, r4
   1e0d6:	4630      	mov	r0, r6
   1e0d8:	465a      	mov	r2, fp
   1e0da:	f7fb f895 	bl	19208 <memcpy>
                disp_buf_first += disp_w;
   1e0de:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
   1e0e0:	3501      	adds	r5, #1
                disp_buf_first += disp_w;
   1e0e2:	441e      	add	r6, r3
                map_buf_first += map_w;
   1e0e4:	9b08      	ldr	r3, [sp, #32]
   1e0e6:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
   1e0e8:	e7f1      	b.n	1e0ce <_lv_blend_map+0x116>
    if(mask && disp->driver.antialiasing == 0)
   1e0ea:	7a20      	ldrb	r0, [r4, #8]
   1e0ec:	07c0      	lsls	r0, r0, #31
   1e0ee:	d4ab      	bmi.n	1e048 <_lv_blend_map+0x90>
   1e0f0:	1c50      	adds	r0, r2, #1
   1e0f2:	1a40      	subs	r0, r0, r1
        int32_t mask_w = lv_area_get_width(&draw_area);
   1e0f4:	b200      	sxth	r0, r0
   1e0f6:	9004      	str	r0, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   1e0f8:	f1cb 0001 	rsb	r0, fp, #1
   1e0fc:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
   1e100:	9009      	str	r0, [sp, #36]	; 0x24
   1e102:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e104:	eb00 0e0c 	add.w	lr, r0, ip
   1e108:	9804      	ldr	r0, [sp, #16]
   1e10a:	4570      	cmp	r0, lr
   1e10c:	dd9c      	ble.n	1e048 <_lv_blend_map+0x90>
   1e10e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1e112:	f1be 0f80 	cmp.w	lr, #128	; 0x80
   1e116:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1e11a:	bf98      	it	ls
   1e11c:	f04f 0e00 	movls.w	lr, #0
   1e120:	f88c e000 	strb.w	lr, [ip]
   1e124:	e7ed      	b.n	1e102 <_lv_blend_map+0x14a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   1e126:	f7f1 ff8d 	bl	10044 <_lv_refr_get_disp_refreshing>
   1e12a:	f8b9 5004 	ldrh.w	r5, [r9, #4]
   1e12e:	8aba      	ldrh	r2, [r7, #20]
   1e130:	f9b9 c000 	ldrsh.w	ip, [r9]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   1e134:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
   1e138:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
   1e13c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   1e140:	3501      	adds	r5, #1
   1e142:	f9b7 7012 	ldrsh.w	r7, [r7, #18]
   1e146:	3201      	adds	r2, #1
   1e148:	eba5 050c 	sub.w	r5, r5, ip
   1e14c:	1b34      	subs	r4, r6, r4
   1e14e:	1ad2      	subs	r2, r2, r3
   1e150:	b22d      	sxth	r5, r5
    map_buf_tmp -= draw_area->x1;
   1e152:	eba3 030c 	sub.w	r3, r3, ip
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   1e156:	443c      	add	r4, r7
    map_buf_tmp -= draw_area->x1;
   1e158:	fb05 3404 	mla	r4, r5, r4, r3
   1e15c:	9b08      	ldr	r3, [sp, #32]
   1e15e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   1e162:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   1e166:	f1b8 0f01 	cmp.w	r8, #1
   1e16a:	ea4f 0385 	mov.w	r3, r5, lsl #2
   1e16e:	b212      	sxth	r2, r2
   1e170:	f1c1 0a00 	rsb	sl, r1, #0
   1e174:	9304      	str	r3, [sp, #16]
   1e176:	d123      	bne.n	1e1c0 <_lv_blend_map+0x208>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1e178:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   1e17c:	429e      	cmp	r6, r3
   1e17e:	dd02      	ble.n	1e186 <_lv_blend_map+0x1ce>
}
   1e180:	b00d      	add	sp, #52	; 0x34
   1e182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e186:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   1e18a:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e18c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   1e190:	4598      	cmp	r8, r3
   1e192:	dd03      	ble.n	1e19c <_lv_blend_map+0x1e4>
            map_buf_tmp += map_w;
   1e194:	9b04      	ldr	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1e196:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
   1e198:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1e19a:	e7ed      	b.n	1e178 <_lv_blend_map+0x1c0>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   1e19c:	9b05      	ldr	r3, [sp, #20]
   1e19e:	9907      	ldr	r1, [sp, #28]
   1e1a0:	9302      	str	r3, [sp, #8]
   1e1a2:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
   1e1a6:	9208      	str	r2, [sp, #32]
   1e1a8:	e9cd 7300 	strd	r7, r3, [sp]
   1e1ac:	fa0f f388 	sxth.w	r3, r8
   1e1b0:	6945      	ldr	r5, [r0, #20]
   1e1b2:	9006      	str	r0, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e1b4:	f108 0801 	add.w	r8, r8, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   1e1b8:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e1ba:	9a08      	ldr	r2, [sp, #32]
   1e1bc:	9806      	ldr	r0, [sp, #24]
   1e1be:	e7e5      	b.n	1e18c <_lv_blend_map+0x1d4>
   1e1c0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   1e1c4:	44da      	add	sl, fp
   1e1c6:	f108 0801 	add.w	r8, r8, #1
   1e1ca:	eba8 0801 	sub.w	r8, r8, r1
   1e1ce:	fa0f f888 	sxth.w	r8, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1e1d2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   1e1d6:	429e      	cmp	r6, r3
   1e1d8:	dcd2      	bgt.n	1e180 <_lv_blend_map+0x1c8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e1da:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   1e1de:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e1e0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   1e1e4:	4599      	cmp	r9, r3
   1e1e6:	dd04      	ble.n	1e1f2 <_lv_blend_map+0x23a>
            map_buf_tmp += map_w;
   1e1e8:	9b04      	ldr	r3, [sp, #16]
            mask_tmp += draw_area_w;
   1e1ea:	44c2      	add	sl, r8
            map_buf_tmp += map_w;
   1e1ec:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   1e1ee:	3601      	adds	r6, #1
   1e1f0:	e7ef      	b.n	1e1d2 <_lv_blend_map+0x21a>
                if(mask_tmp[x]) {
   1e1f2:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1e1f6:	b18b      	cbz	r3, 1e21c <_lv_blend_map+0x264>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   1e1f8:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   1e1fa:	9208      	str	r2, [sp, #32]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   1e1fc:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   1e200:	0a1b      	lsrs	r3, r3, #8
   1e202:	9302      	str	r3, [sp, #8]
   1e204:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
   1e208:	9907      	ldr	r1, [sp, #28]
   1e20a:	e9cd 7300 	strd	r7, r3, [sp]
   1e20e:	fa0f f389 	sxth.w	r3, r9
   1e212:	6945      	ldr	r5, [r0, #20]
   1e214:	9006      	str	r0, [sp, #24]
   1e216:	47a8      	blx	r5
   1e218:	9a08      	ldr	r2, [sp, #32]
   1e21a:	9806      	ldr	r0, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   1e21c:	f109 0901 	add.w	r9, r9, #1
   1e220:	e7de      	b.n	1e1e0 <_lv_blend_map+0x228>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
   1e222:	9b05      	ldr	r3, [sp, #20]
   1e224:	f818 ec04 	ldrb.w	lr, [r8, #-4]
   1e228:	f817 2c02 	ldrb.w	r2, [r7, #-2]
   1e22c:	f817 1c03 	ldrb.w	r1, [r7, #-3]
   1e230:	f817 0c04 	ldrb.w	r0, [r7, #-4]
   1e234:	9302      	str	r3, [sp, #8]
   1e236:	f818 cc02 	ldrb.w	ip, [r8, #-2]
   1e23a:	4673      	mov	r3, lr
   1e23c:	f8cd c004 	str.w	ip, [sp, #4]
   1e240:	f818 cc03 	ldrb.w	ip, [r8, #-3]
                for(x = 0; x < draw_area_w; x++) {
   1e244:	f109 0901 	add.w	r9, r9, #1
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
   1e248:	f8cd c000 	str.w	ip, [sp]
   1e24c:	f7ff fc00 	bl	1da50 <lv_color_mix.isra.0>
   1e250:	f8ca 0000 	str.w	r0, [sl]
                for(x = 0; x < draw_area_w; x++) {
   1e254:	46c2      	mov	sl, r8
   1e256:	9b04      	ldr	r3, [sp, #16]
   1e258:	3704      	adds	r7, #4
   1e25a:	454b      	cmp	r3, r9
   1e25c:	f10a 0804 	add.w	r8, sl, #4
   1e260:	dcdf      	bgt.n	1e222 <_lv_blend_map+0x26a>
                    }
                }
                disp_buf_first += disp_w;
   1e262:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
   1e264:	3501      	adds	r5, #1
                disp_buf_first += disp_w;
   1e266:	441e      	add	r6, r3
                map_buf_first += map_w;
   1e268:	9b08      	ldr	r3, [sp, #32]
   1e26a:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
   1e26c:	9b06      	ldr	r3, [sp, #24]
   1e26e:	42ab      	cmp	r3, r5
   1e270:	dd86      	ble.n	1e180 <_lv_blend_map+0x1c8>
   1e272:	4627      	mov	r7, r4
   1e274:	46b2      	mov	sl, r6
                for(x = 0; x < draw_area_w; x++) {
   1e276:	f04f 0900 	mov.w	r9, #0
   1e27a:	e7ec      	b.n	1e256 <_lv_blend_map+0x29e>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   1e27c:	2bfd      	cmp	r3, #253	; 0xfd
   1e27e:	f240 8126 	bls.w	1e4ce <_lv_blend_map+0x516>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
   1e282:	9b04      	ldr	r3, [sp, #16]

            for(y = 0; y < draw_area_h; y++) {
   1e284:	9505      	str	r5, [sp, #20]
            int32_t x_end4 = draw_area_w - 4;
   1e286:	3b04      	subs	r3, #4
   1e288:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
   1e28a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1e28e:	4293      	cmp	r3, r2
   1e290:	f77f af76 	ble.w	1e180 <_lv_blend_map+0x1c8>
   1e294:	46a1      	mov	r9, r4
   1e296:	46b0      	mov	r8, r6
   1e298:	46da      	mov	sl, fp
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   1e29a:	2500      	movs	r5, #0
   1e29c:	e00d      	b.n	1e2ba <_lv_blend_map+0x302>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
   1e29e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1e2a2:	b128      	cbz	r0, 1e2b0 <_lv_blend_map+0x2f8>
   1e2a4:	28ff      	cmp	r0, #255	; 0xff
   1e2a6:	d129      	bne.n	1e2fc <_lv_blend_map+0x344>
   1e2a8:	f8d9 3000 	ldr.w	r3, [r9]
   1e2ac:	f8c8 3000 	str.w	r3, [r8]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   1e2b0:	3501      	adds	r5, #1
   1e2b2:	f109 0904 	add.w	r9, r9, #4
   1e2b6:	f108 0804 	add.w	r8, r8, #4
   1e2ba:	9b04      	ldr	r3, [sp, #16]
   1e2bc:	4657      	mov	r7, sl
   1e2be:	42ab      	cmp	r3, r5
   1e2c0:	dd02      	ble.n	1e2c8 <_lv_blend_map+0x310>
   1e2c2:	f01a 0f03 	tst.w	sl, #3
   1e2c6:	d1ea      	bne.n	1e29e <_lv_blend_map+0x2e6>
   1e2c8:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1e2cc:	eb06 0885 	add.w	r8, r6, r5, lsl #2
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
   1e2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e2d2:	42ab      	cmp	r3, r5
   1e2d4:	dc26      	bgt.n	1e324 <_lv_blend_map+0x36c>
   1e2d6:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1e2da:	eb06 0885 	add.w	r8, r6, r5, lsl #2
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
   1e2de:	1bed      	subs	r5, r5, r7
   1e2e0:	9a04      	ldr	r2, [sp, #16]
   1e2e2:	19eb      	adds	r3, r5, r7
   1e2e4:	429a      	cmp	r2, r3
   1e2e6:	f300 80a8 	bgt.w	1e43a <_lv_blend_map+0x482>
#else
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
   1e2ea:	9b07      	ldr	r3, [sp, #28]
                mask += draw_area_w;
   1e2ec:	4493      	add	fp, r2
                disp_buf_first += disp_w;
   1e2ee:	441e      	add	r6, r3
                map_buf_first += map_w;
   1e2f0:	9b08      	ldr	r3, [sp, #32]
   1e2f2:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
   1e2f4:	9b05      	ldr	r3, [sp, #20]
   1e2f6:	3301      	adds	r3, #1
   1e2f8:	9305      	str	r3, [sp, #20]
   1e2fa:	e7c6      	b.n	1e28a <_lv_blend_map+0x2d2>
                    MAP_NORMAL_MASK_PX(x)
   1e2fc:	f898 3000 	ldrb.w	r3, [r8]
   1e300:	f899 2002 	ldrb.w	r2, [r9, #2]
   1e304:	f899 1001 	ldrb.w	r1, [r9, #1]
   1e308:	9002      	str	r0, [sp, #8]
   1e30a:	f898 0002 	ldrb.w	r0, [r8, #2]
   1e30e:	9001      	str	r0, [sp, #4]
   1e310:	f898 0001 	ldrb.w	r0, [r8, #1]
   1e314:	9000      	str	r0, [sp, #0]
   1e316:	f899 0000 	ldrb.w	r0, [r9]
   1e31a:	f7ff fb99 	bl	1da50 <lv_color_mix.isra.0>
   1e31e:	f8c8 0000 	str.w	r0, [r8]
   1e322:	e7c5      	b.n	1e2b0 <_lv_blend_map+0x2f8>
                    if(*mask32) {
   1e324:	683b      	ldr	r3, [r7, #0]
   1e326:	b18b      	cbz	r3, 1e34c <_lv_blend_map+0x394>
                        if((*mask32) == 0xFFFFFFFF) {
   1e328:	3301      	adds	r3, #1
   1e32a:	d116      	bne.n	1e35a <_lv_blend_map+0x3a2>
                            disp_buf_first[x] = map_buf_first[x];
   1e32c:	f8d9 3000 	ldr.w	r3, [r9]
   1e330:	f8c8 3000 	str.w	r3, [r8]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
   1e334:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e338:	f8c8 3004 	str.w	r3, [r8, #4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
   1e33c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1e340:	f8c8 3008 	str.w	r3, [r8, #8]
                            MAP_NORMAL_MASK_PX(x + 3)
   1e344:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1e348:	f8c8 300c 	str.w	r3, [r8, #12]
                    mask32++;
   1e34c:	3704      	adds	r7, #4
                for(; x < x_end4; x += 4) {
   1e34e:	3504      	adds	r5, #4
   1e350:	f109 0910 	add.w	r9, r9, #16
   1e354:	f108 0810 	add.w	r8, r8, #16
   1e358:	e7ba      	b.n	1e2d0 <_lv_blend_map+0x318>
                            MAP_NORMAL_MASK_PX(x)
   1e35a:	7838      	ldrb	r0, [r7, #0]
   1e35c:	b128      	cbz	r0, 1e36a <_lv_blend_map+0x3b2>
   1e35e:	28ff      	cmp	r0, #255	; 0xff
   1e360:	d12d      	bne.n	1e3be <_lv_blend_map+0x406>
   1e362:	f8d9 3000 	ldr.w	r3, [r9]
   1e366:	f8c8 3000 	str.w	r3, [r8]
                            MAP_NORMAL_MASK_PX(x + 1)
   1e36a:	787b      	ldrb	r3, [r7, #1]
   1e36c:	b12b      	cbz	r3, 1e37a <_lv_blend_map+0x3c2>
   1e36e:	2bff      	cmp	r3, #255	; 0xff
   1e370:	d139      	bne.n	1e3e6 <_lv_blend_map+0x42e>
   1e372:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e376:	f8c8 3004 	str.w	r3, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 2)
   1e37a:	78bb      	ldrb	r3, [r7, #2]
   1e37c:	b12b      	cbz	r3, 1e38a <_lv_blend_map+0x3d2>
   1e37e:	2bff      	cmp	r3, #255	; 0xff
   1e380:	d146      	bne.n	1e410 <_lv_blend_map+0x458>
   1e382:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1e386:	f8c8 3008 	str.w	r3, [r8, #8]
                            MAP_NORMAL_MASK_PX(x + 3)
   1e38a:	78fb      	ldrb	r3, [r7, #3]
   1e38c:	2b00      	cmp	r3, #0
   1e38e:	d0dd      	beq.n	1e34c <_lv_blend_map+0x394>
   1e390:	2bff      	cmp	r3, #255	; 0xff
   1e392:	d0d7      	beq.n	1e344 <_lv_blend_map+0x38c>
   1e394:	f898 c00c 	ldrb.w	ip, [r8, #12]
   1e398:	f899 200e 	ldrb.w	r2, [r9, #14]
   1e39c:	f899 100d 	ldrb.w	r1, [r9, #13]
   1e3a0:	f899 000c 	ldrb.w	r0, [r9, #12]
   1e3a4:	9302      	str	r3, [sp, #8]
   1e3a6:	f898 300e 	ldrb.w	r3, [r8, #14]
   1e3aa:	9301      	str	r3, [sp, #4]
   1e3ac:	f898 300d 	ldrb.w	r3, [r8, #13]
   1e3b0:	9300      	str	r3, [sp, #0]
   1e3b2:	4663      	mov	r3, ip
   1e3b4:	f7ff fb4c 	bl	1da50 <lv_color_mix.isra.0>
   1e3b8:	f8c8 000c 	str.w	r0, [r8, #12]
   1e3bc:	e7c6      	b.n	1e34c <_lv_blend_map+0x394>
                            MAP_NORMAL_MASK_PX(x)
   1e3be:	f898 3000 	ldrb.w	r3, [r8]
   1e3c2:	f899 2002 	ldrb.w	r2, [r9, #2]
   1e3c6:	f899 1001 	ldrb.w	r1, [r9, #1]
   1e3ca:	9002      	str	r0, [sp, #8]
   1e3cc:	f898 0002 	ldrb.w	r0, [r8, #2]
   1e3d0:	9001      	str	r0, [sp, #4]
   1e3d2:	f898 0001 	ldrb.w	r0, [r8, #1]
   1e3d6:	9000      	str	r0, [sp, #0]
   1e3d8:	f899 0000 	ldrb.w	r0, [r9]
   1e3dc:	f7ff fb38 	bl	1da50 <lv_color_mix.isra.0>
   1e3e0:	f8c8 0000 	str.w	r0, [r8]
   1e3e4:	e7c1      	b.n	1e36a <_lv_blend_map+0x3b2>
                            MAP_NORMAL_MASK_PX(x + 1)
   1e3e6:	f898 c004 	ldrb.w	ip, [r8, #4]
   1e3ea:	f899 2006 	ldrb.w	r2, [r9, #6]
   1e3ee:	f899 1005 	ldrb.w	r1, [r9, #5]
   1e3f2:	f899 0004 	ldrb.w	r0, [r9, #4]
   1e3f6:	9302      	str	r3, [sp, #8]
   1e3f8:	f898 3006 	ldrb.w	r3, [r8, #6]
   1e3fc:	9301      	str	r3, [sp, #4]
   1e3fe:	f898 3005 	ldrb.w	r3, [r8, #5]
   1e402:	9300      	str	r3, [sp, #0]
   1e404:	4663      	mov	r3, ip
   1e406:	f7ff fb23 	bl	1da50 <lv_color_mix.isra.0>
   1e40a:	f8c8 0004 	str.w	r0, [r8, #4]
   1e40e:	e7b4      	b.n	1e37a <_lv_blend_map+0x3c2>
                            MAP_NORMAL_MASK_PX(x + 2)
   1e410:	f898 c008 	ldrb.w	ip, [r8, #8]
   1e414:	f899 200a 	ldrb.w	r2, [r9, #10]
   1e418:	f899 1009 	ldrb.w	r1, [r9, #9]
   1e41c:	f899 0008 	ldrb.w	r0, [r9, #8]
   1e420:	9302      	str	r3, [sp, #8]
   1e422:	f898 300a 	ldrb.w	r3, [r8, #10]
   1e426:	9301      	str	r3, [sp, #4]
   1e428:	f898 3009 	ldrb.w	r3, [r8, #9]
   1e42c:	9300      	str	r3, [sp, #0]
   1e42e:	4663      	mov	r3, ip
   1e430:	f7ff fb0e 	bl	1da50 <lv_color_mix.isra.0>
   1e434:	f8c8 0008 	str.w	r0, [r8, #8]
   1e438:	e7a7      	b.n	1e38a <_lv_blend_map+0x3d2>
                    MAP_NORMAL_MASK_PX(x)
   1e43a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1e43e:	b128      	cbz	r0, 1e44c <_lv_blend_map+0x494>
   1e440:	28ff      	cmp	r0, #255	; 0xff
   1e442:	d108      	bne.n	1e456 <_lv_blend_map+0x49e>
   1e444:	f8d9 3000 	ldr.w	r3, [r9]
   1e448:	f8c8 3000 	str.w	r3, [r8]
                for(; x < draw_area_w ; x++) {
   1e44c:	f109 0904 	add.w	r9, r9, #4
   1e450:	f108 0804 	add.w	r8, r8, #4
   1e454:	e744      	b.n	1e2e0 <_lv_blend_map+0x328>
                    MAP_NORMAL_MASK_PX(x)
   1e456:	f898 3000 	ldrb.w	r3, [r8]
   1e45a:	f899 2002 	ldrb.w	r2, [r9, #2]
   1e45e:	f899 1001 	ldrb.w	r1, [r9, #1]
   1e462:	9002      	str	r0, [sp, #8]
   1e464:	f898 0002 	ldrb.w	r0, [r8, #2]
   1e468:	9001      	str	r0, [sp, #4]
   1e46a:	f898 0001 	ldrb.w	r0, [r8, #1]
   1e46e:	9000      	str	r0, [sp, #0]
   1e470:	f899 0000 	ldrb.w	r0, [r9]
   1e474:	f7ff faec 	bl	1da50 <lv_color_mix.isra.0>
   1e478:	f8c8 0000 	str.w	r0, [r8]
   1e47c:	e7e6      	b.n	1e44c <_lv_blend_map+0x494>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
   1e47e:	f81b 3009 	ldrb.w	r3, [fp, r9]
   1e482:	b1ab      	cbz	r3, 1e4b0 <_lv_blend_map+0x4f8>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   1e484:	2bfc      	cmp	r3, #252	; 0xfc
   1e486:	bf97      	itett	ls
   1e488:	9a05      	ldrls	r2, [sp, #20]
   1e48a:	9805      	ldrhi	r0, [sp, #20]
   1e48c:	fb12 f303 	smulbbls	r3, r2, r3
   1e490:	0a18      	lsrls	r0, r3, #8
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   1e492:	f898 2002 	ldrb.w	r2, [r8, #2]
   1e496:	783b      	ldrb	r3, [r7, #0]
   1e498:	f898 1001 	ldrb.w	r1, [r8, #1]
   1e49c:	9002      	str	r0, [sp, #8]
   1e49e:	78b8      	ldrb	r0, [r7, #2]
   1e4a0:	9001      	str	r0, [sp, #4]
   1e4a2:	7878      	ldrb	r0, [r7, #1]
   1e4a4:	9000      	str	r0, [sp, #0]
   1e4a6:	f898 0000 	ldrb.w	r0, [r8]
   1e4aa:	f7ff fad1 	bl	1da50 <lv_color_mix.isra.0>
   1e4ae:	6038      	str	r0, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
   1e4b0:	f109 0901 	add.w	r9, r9, #1
   1e4b4:	f108 0804 	add.w	r8, r8, #4
   1e4b8:	3704      	adds	r7, #4
   1e4ba:	9b04      	ldr	r3, [sp, #16]
   1e4bc:	454b      	cmp	r3, r9
   1e4be:	dcde      	bgt.n	1e47e <_lv_blend_map+0x4c6>
                        }
                    }
                }
                disp_buf_first += disp_w;
   1e4c0:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
   1e4c2:	3501      	adds	r5, #1
                disp_buf_first += disp_w;
   1e4c4:	441e      	add	r6, r3
                mask += draw_area_w;
   1e4c6:	9b04      	ldr	r3, [sp, #16]
   1e4c8:	449b      	add	fp, r3
                map_buf_first += map_w;
   1e4ca:	9b08      	ldr	r3, [sp, #32]
   1e4cc:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
   1e4ce:	9b06      	ldr	r3, [sp, #24]
   1e4d0:	42ab      	cmp	r3, r5
   1e4d2:	f77f ae55 	ble.w	1e180 <_lv_blend_map+0x1c8>
   1e4d6:	46a0      	mov	r8, r4
   1e4d8:	4637      	mov	r7, r6
                for(x = 0; x < draw_area_w; x++) {
   1e4da:	f04f 0900 	mov.w	r9, #0
   1e4de:	e7ec      	b.n	1e4ba <_lv_blend_map+0x502>

0001e4e0 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
   1e4e0:	b570      	push	{r4, r5, r6, lr}
   1e4e2:	b0a6      	sub	sp, #152	; 0x98
   1e4e4:	4604      	mov	r4, r0
   1e4e6:	460d      	mov	r5, r1
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
   1e4e8:	a80c      	add	r0, sp, #48	; 0x30
{
   1e4ea:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
   1e4ec:	f7f3 fbae 	bl	11c4c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1e4f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1e4f4:	4629      	mov	r1, r5
   1e4f6:	aa0c      	add	r2, sp, #48	; 0x30
   1e4f8:	4620      	mov	r0, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1e4fa:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1e4fc:	f001 f80f 	bl	1f51e <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
   1e500:	a803      	add	r0, sp, #12
   1e502:	f7f2 f9dd 	bl	108c0 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
   1e506:	2300      	movs	r3, #0
   1e508:	4629      	mov	r1, r5
   1e50a:	9300      	str	r3, [sp, #0]
   1e50c:	4620      	mov	r0, r4
   1e50e:	4633      	mov	r3, r6
   1e510:	aa03      	add	r2, sp, #12
   1e512:	f7f2 f9ef 	bl	108f4 <lv_draw_label>
}
   1e516:	b026      	add	sp, #152	; 0x98
   1e518:	bd70      	pop	{r4, r5, r6, pc}

0001e51a <lv_draw_map>:
{
   1e51a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e51e:	b097      	sub	sp, #92	; 0x5c
   1e520:	461c      	mov	r4, r3
   1e522:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1e526:	4605      	mov	r5, r0
   1e528:	9308      	str	r3, [sp, #32]
   1e52a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   1e52e:	4691      	mov	r9, r2
    return memcpy(dst, src, len);
   1e530:	a812      	add	r0, sp, #72	; 0x48
   1e532:	2208      	movs	r2, #8
   1e534:	468b      	mov	fp, r1
   1e536:	9309      	str	r3, [sp, #36]	; 0x24
   1e538:	f7fa fe66 	bl	19208 <memcpy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1e53c:	f7f1 fd82 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1e540:	f002 fce4 	bl	20f0c <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
   1e544:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1e548:	f9b0 6010 	ldrsh.w	r6, [r0, #16]
    draw_area.y1 -= disp_area->y1;
   1e54c:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
    draw_area.x1 -= disp_area->x1;
   1e550:	1b9b      	subs	r3, r3, r6
    draw_area.x2 -= disp_area->x1;
   1e552:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    draw_area.x1 -= disp_area->x1;
   1e556:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1e55a:	4682      	mov	sl, r0
    draw_area.y2 -= disp_area->y1;
   1e55c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
    draw_area.y1 -= disp_area->y1;
   1e560:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    draw_area.x2 -= disp_area->x1;
   1e564:	1b92      	subs	r2, r2, r6
    draw_area.y1 -= disp_area->y1;
   1e566:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
   1e568:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   1e56a:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    draw_area.x2 -= disp_area->x1;
   1e56e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    draw_area.y2 -= disp_area->y1;
   1e572:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   1e576:	f7f3 fa93 	bl	11aa0 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
   1e57a:	9004      	str	r0, [sp, #16]
   1e57c:	b9c8      	cbnz	r0, 1e5b2 <lv_draw_map+0x98>
   1e57e:	8863      	ldrh	r3, [r4, #2]
   1e580:	b9bb      	cbnz	r3, 1e5b2 <lv_draw_map+0x98>
   1e582:	8923      	ldrh	r3, [r4, #8]
   1e584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1e588:	d113      	bne.n	1e5b2 <lv_draw_map+0x98>
   1e58a:	9b08      	ldr	r3, [sp, #32]
   1e58c:	b98b      	cbnz	r3, 1e5b2 <lv_draw_map+0x98>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
   1e58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e590:	b97b      	cbnz	r3, 1e5b2 <lv_draw_map+0x98>
   1e592:	7aa3      	ldrb	r3, [r4, #10]
   1e594:	b96b      	cbnz	r3, 1e5b2 <lv_draw_map+0x98>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
   1e596:	7c22      	ldrb	r2, [r4, #16]
   1e598:	4629      	mov	r1, r5
   1e59a:	9202      	str	r2, [sp, #8]
   1e59c:	7822      	ldrb	r2, [r4, #0]
   1e59e:	4658      	mov	r0, fp
   1e5a0:	9201      	str	r2, [sp, #4]
   1e5a2:	2201      	movs	r2, #1
   1e5a4:	9200      	str	r2, [sp, #0]
   1e5a6:	464a      	mov	r2, r9
   1e5a8:	f7ff fd06 	bl	1dfb8 <_lv_blend_map>
}
   1e5ac:	b017      	add	sp, #92	; 0x5c
   1e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5b2:	88ab      	ldrh	r3, [r5, #4]
   1e5b4:	f9b5 2000 	ldrsh.w	r2, [r5]
   1e5b8:	3301      	adds	r3, #1
   1e5ba:	1a9b      	subs	r3, r3, r2
   1e5bc:	b21b      	sxth	r3, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   1e5be:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
   1e5c2:	009b      	lsls	r3, r3, #2
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   1e5c4:	f9bd 004a 	ldrsh.w	r0, [sp, #74]	; 0x4a
   1e5c8:	930d      	str	r3, [sp, #52]	; 0x34
   1e5ca:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   1e5ce:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   1e5d2:	f9ba 1012 	ldrsh.w	r1, [sl, #18]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   1e5d6:	1ab2      	subs	r2, r6, r2
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   1e5d8:	1b45      	subs	r5, r0, r5
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   1e5da:	441a      	add	r2, r3
   1e5dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   1e5de:	440d      	add	r5, r1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   1e5e0:	0092      	lsls	r2, r2, #2
   1e5e2:	fb07 2505 	mla	r5, r7, r5, r2
   1e5e6:	eb09 0205 	add.w	r2, r9, r5
   1e5ea:	920a      	str	r2, [sp, #40]	; 0x28
   1e5ec:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   1e5f0:	4433      	add	r3, r6
   1e5f2:	3201      	adds	r2, #1
   1e5f4:	1b96      	subs	r6, r2, r6
   1e5f6:	b232      	sxth	r2, r6
   1e5f8:	b21b      	sxth	r3, r3
   1e5fa:	9207      	str	r2, [sp, #28]
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   1e5fc:	3a01      	subs	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   1e5fe:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   1e602:	4413      	add	r3, r2
   1e604:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1e608:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   1e60c:	4401      	add	r1, r0
   1e60e:	3301      	adds	r3, #1
   1e610:	1a18      	subs	r0, r3, r0
   1e612:	b203      	sxth	r3, r0
   1e614:	930f      	str	r3, [sp, #60]	; 0x3c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   1e616:	9b04      	ldr	r3, [sp, #16]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   1e618:	b209      	sxth	r1, r1
   1e61a:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
        blend_area.y2 = blend_area.y1;
   1e61e:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   1e622:	2b00      	cmp	r3, #0
   1e624:	f040 8093 	bne.w	1e74e <lv_draw_map+0x234>
   1e628:	9b08      	ldr	r3, [sp, #32]
   1e62a:	2b00      	cmp	r3, #0
   1e62c:	f040 808f 	bne.w	1e74e <lv_draw_map+0x234>
   1e630:	7aa3      	ldrb	r3, [r4, #10]
   1e632:	2b00      	cmp	r3, #0
   1e634:	f040 808b 	bne.w	1e74e <lv_draw_map+0x234>
   1e638:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e63a:	2b00      	cmp	r3, #0
   1e63c:	f000 8087 	beq.w	1e74e <lv_draw_map+0x234>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   1e640:	a812      	add	r0, sp, #72	; 0x48
   1e642:	f002 fcd1 	bl	20fe8 <lv_area_get_size>
   1e646:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1e64a:	d822      	bhi.n	1e692 <lv_draw_map+0x178>
   1e64c:	a812      	add	r0, sp, #72	; 0x48
   1e64e:	f002 fccb 	bl	20fe8 <lv_area_get_size>
   1e652:	4607      	mov	r7, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   1e654:	00b8      	lsls	r0, r7, #2
   1e656:	f7f4 fa5b 	bl	12b10 <_lv_mem_buf_get>
   1e65a:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1e65c:	4638      	mov	r0, r7
   1e65e:	f7f4 fa57 	bl	12b10 <_lv_mem_buf_get>
            for(y = 0; y < draw_area_h; y++) {
   1e662:	f04f 0800 	mov.w	r8, #0
   1e666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1e668:	4606      	mov	r6, r0
            for(y = 0; y < draw_area_h; y++) {
   1e66a:	f103 0903 	add.w	r9, r3, #3
                    map2[px_i].ch.alpha = 0xFF;
   1e66e:	f04f 0aff 	mov.w	sl, #255	; 0xff
        uint32_t px_i = 0;
   1e672:	4643      	mov	r3, r8
   1e674:	9a07      	ldr	r2, [sp, #28]
   1e676:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1e67a:	9205      	str	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
   1e67c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e67e:	f1a9 0e03 	sub.w	lr, r9, #3
   1e682:	4542      	cmp	r2, r8
   1e684:	dd47      	ble.n	1e716 <lv_draw_map+0x1fc>
   1e686:	18f2      	adds	r2, r6, r3
   1e688:	9204      	str	r2, [sp, #16]
   1e68a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   1e68e:	2200      	movs	r2, #0
   1e690:	e012      	b.n	1e6b8 <lv_draw_map+0x19e>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   1e692:	f44f 77a0 	mov.w	r7, #320	; 0x140
   1e696:	e7dd      	b.n	1e654 <lv_draw_map+0x13a>
                    mask_buf[px_i] = px_opa;
   1e698:	9804      	ldr	r0, [sp, #16]
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   1e69a:	f819 c022 	ldrb.w	ip, [r9, r2, lsl #2]
                    mask_buf[px_i] = px_opa;
   1e69e:	f800 cb01 	strb.w	ip, [r0], #1
   1e6a2:	9004      	str	r0, [sp, #16]
                    if(px_opa) {
   1e6a4:	f1bc 0f00 	cmp.w	ip, #0
   1e6a8:	d002      	beq.n	1e6b0 <lv_draw_map+0x196>
                        map2[px_i].full =  *((uint32_t *)map_px);
   1e6aa:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
   1e6ae:	6008      	str	r0, [r1, #0]
                    map2[px_i].ch.alpha = 0xFF;
   1e6b0:	f881 a003 	strb.w	sl, [r1, #3]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   1e6b4:	3201      	adds	r2, #1
   1e6b6:	3104      	adds	r1, #4
   1e6b8:	9807      	ldr	r0, [sp, #28]
   1e6ba:	4290      	cmp	r0, r2
   1e6bc:	dcec      	bgt.n	1e698 <lv_draw_map+0x17e>
   1e6be:	9a05      	ldr	r2, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1e6c0:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   1e6c4:	4413      	add	r3, r2
   1e6c6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1e6ca:	3201      	adds	r2, #1
   1e6cc:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   1e6ce:	fa03 f282 	sxtah	r2, r3, r2
   1e6d2:	42ba      	cmp	r2, r7
   1e6d4:	d209      	bcs.n	1e6ea <lv_draw_map+0x1d0>
                    blend_area.y2 ++;
   1e6d6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
   1e6da:	3201      	adds	r2, #1
   1e6dc:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
            for(y = 0; y < draw_area_h; y++) {
   1e6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e6e2:	f108 0801 	add.w	r8, r8, #1
   1e6e6:	4491      	add	r9, r2
   1e6e8:	e7c8      	b.n	1e67c <lv_draw_map+0x162>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   1e6ea:	7c23      	ldrb	r3, [r4, #16]
   1e6ec:	462a      	mov	r2, r5
   1e6ee:	9302      	str	r3, [sp, #8]
   1e6f0:	7823      	ldrb	r3, [r4, #0]
   1e6f2:	4658      	mov	r0, fp
   1e6f4:	9301      	str	r3, [sp, #4]
   1e6f6:	2302      	movs	r3, #2
   1e6f8:	a914      	add	r1, sp, #80	; 0x50
   1e6fa:	9300      	str	r3, [sp, #0]
   1e6fc:	4633      	mov	r3, r6
   1e6fe:	f7ff fc5b 	bl	1dfb8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   1e702:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   1e706:	3301      	adds	r3, #1
   1e708:	b21b      	sxth	r3, r3
   1e70a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                    blend_area.y2 = blend_area.y1;
   1e70e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
                    px_i = 0;
   1e712:	2300      	movs	r3, #0
   1e714:	e7e4      	b.n	1e6e0 <lv_draw_map+0x1c6>
            if(blend_area.y1 != blend_area.y2) {
   1e716:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
   1e71a:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   1e71e:	429a      	cmp	r2, r3
   1e720:	d00e      	beq.n	1e740 <lv_draw_map+0x226>
                blend_area.y2--;
   1e722:	3b01      	subs	r3, #1
   1e724:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   1e728:	7c23      	ldrb	r3, [r4, #16]
   1e72a:	462a      	mov	r2, r5
   1e72c:	9302      	str	r3, [sp, #8]
   1e72e:	7823      	ldrb	r3, [r4, #0]
   1e730:	4658      	mov	r0, fp
   1e732:	9301      	str	r3, [sp, #4]
   1e734:	2302      	movs	r3, #2
   1e736:	a914      	add	r1, sp, #80	; 0x50
   1e738:	9300      	str	r3, [sp, #0]
   1e73a:	4633      	mov	r3, r6
   1e73c:	f7ff fc3c 	bl	1dfb8 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   1e740:	4630      	mov	r0, r6
   1e742:	f7f4 fa47 	bl	12bd4 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   1e746:	4628      	mov	r0, r5
            _lv_mem_buf_release(map2);
   1e748:	f7f4 fa44 	bl	12bd4 <_lv_mem_buf_release>
}
   1e74c:	e72e      	b.n	1e5ac <lv_draw_map+0x92>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   1e74e:	a812      	add	r0, sp, #72	; 0x48
   1e750:	f002 fc4a 	bl	20fe8 <lv_area_get_size>
   1e754:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1e758:	d83e      	bhi.n	1e7d8 <lv_draw_map+0x2be>
   1e75a:	a812      	add	r0, sp, #72	; 0x48
   1e75c:	f002 fc44 	bl	20fe8 <lv_area_get_size>
   1e760:	4680      	mov	r8, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   1e762:	ea4f 0088 	mov.w	r0, r8, lsl #2
   1e766:	f7f4 f9d3 	bl	12b10 <_lv_mem_buf_get>
   1e76a:	4607      	mov	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1e76c:	4640      	mov	r0, r8
   1e76e:	f7f4 f9cf 	bl	12b10 <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   1e772:	7aa3      	ldrb	r3, [r4, #10]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1e774:	4606      	mov	r6, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   1e776:	43da      	mvns	r2, r3
   1e778:	b2d2      	uxtb	r2, r2
   1e77a:	920c      	str	r2, [sp, #48]	; 0x30
            if(draw_dsc->recolor_opa != 0) {
   1e77c:	2b00      	cmp	r3, #0
   1e77e:	d02e      	beq.n	1e7de <lv_draw_map+0x2c4>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   1e780:	7ba2      	ldrb	r2, [r4, #14]
   1e782:	435a      	muls	r2, r3
   1e784:	920e      	str	r2, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   1e786:	7b62      	ldrb	r2, [r4, #13]
   1e788:	435a      	muls	r2, r3
   1e78a:	9210      	str	r2, [sp, #64]	; 0x40
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   1e78c:	7b22      	ldrb	r2, [r4, #12]
   1e78e:	4353      	muls	r3, r2
   1e790:	930b      	str	r3, [sp, #44]	; 0x2c
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   1e792:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e794:	bb3b      	cbnz	r3, 1e7e6 <lv_draw_map+0x2cc>
   1e796:	9b08      	ldr	r3, [sp, #32]
   1e798:	bb2b      	cbnz	r3, 1e7e6 <lv_draw_map+0x2cc>
   1e79a:	8863      	ldrh	r3, [r4, #2]
   1e79c:	bb1b      	cbnz	r3, 1e7e6 <lv_draw_map+0x2cc>
   1e79e:	8923      	ldrh	r3, [r4, #8]
   1e7a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1e7a4:	bf14      	ite	ne
   1e7a6:	2502      	movne	r5, #2
   1e7a8:	2501      	moveq	r5, #1
            if(other_mask_cnt) {
   1e7aa:	9b04      	ldr	r3, [sp, #16]
   1e7ac:	b123      	cbz	r3, 1e7b8 <lv_draw_map+0x29e>
    memset(dst, 0xFF, len);
   1e7ae:	4642      	mov	r2, r8
   1e7b0:	21ff      	movs	r1, #255	; 0xff
   1e7b2:	4630      	mov	r0, r6
   1e7b4:	f7fa fd53 	bl	1925e <memset>
                map_buf_tmp += map_w * px_size_byte;
   1e7b8:	2300      	movs	r3, #0
   1e7ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1e7be:	9b07      	ldr	r3, [sp, #28]
   1e7c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e7c4:	9311      	str	r3, [sp, #68]	; 0x44
            for(y = 0; y < draw_area_h; y++) {
   1e7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e7c8:	9a06      	ldr	r2, [sp, #24]
   1e7ca:	4293      	cmp	r3, r2
   1e7cc:	f340 80cc 	ble.w	1e968 <lv_draw_map+0x44e>
                map_px = map_buf_tmp;
   1e7d0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                            if(c.full == chroma_keyed_color.full) {
   1e7d4:	9a05      	ldr	r2, [sp, #20]
   1e7d6:	e015      	b.n	1e804 <lv_draw_map+0x2ea>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   1e7d8:	f44f 78a0 	mov.w	r8, #320	; 0x140
   1e7dc:	e7c1      	b.n	1e762 <lv_draw_map+0x248>
            uint16_t recolor_premult[3] = {0};
   1e7de:	930b      	str	r3, [sp, #44]	; 0x2c
   1e7e0:	9310      	str	r3, [sp, #64]	; 0x40
   1e7e2:	930e      	str	r3, [sp, #56]	; 0x38
   1e7e4:	e7d5      	b.n	1e792 <lv_draw_map+0x278>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   1e7e6:	2502      	movs	r5, #2
   1e7e8:	e7df      	b.n	1e7aa <lv_draw_map+0x290>
                        if(alpha_byte) {
   1e7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e7ec:	2b00      	cmp	r3, #0
   1e7ee:	d053      	beq.n	1e898 <lv_draw_map+0x37e>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   1e7f0:	f89e 3003 	ldrb.w	r3, [lr, #3]
                            mask_buf[px_i] = px_opa;
   1e7f4:	54b3      	strb	r3, [r6, r2]
                            if(px_opa == 0) {
   1e7f6:	2b00      	cmp	r3, #0
   1e7f8:	d151      	bne.n	1e89e <lv_draw_map+0x384>
                                map2[px_i].full = 0;
   1e7fa:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   1e7fe:	f10e 0e04 	add.w	lr, lr, #4
   1e802:	3201      	adds	r2, #1
   1e804:	9b05      	ldr	r3, [sp, #20]
   1e806:	9907      	ldr	r1, [sp, #28]
   1e808:	1ad3      	subs	r3, r2, r3
   1e80a:	4299      	cmp	r1, r3
   1e80c:	dced      	bgt.n	1e7ea <lv_draw_map+0x2d0>
   1e80e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e810:	9a05      	ldr	r2, [sp, #20]
   1e812:	eb03 0902 	add.w	r9, r3, r2
                if(other_mask_cnt) {
   1e816:	9b04      	ldr	r3, [sp, #16]
   1e818:	b333      	cbz	r3, 1e868 <lv_draw_map+0x34e>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
   1e81a:	4613      	mov	r3, r2
   1e81c:	f8ba 0012 	ldrh.w	r0, [sl, #18]
   1e820:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
   1e824:	4433      	add	r3, r6
   1e826:	4402      	add	r2, r0
   1e828:	9806      	ldr	r0, [sp, #24]
   1e82a:	9305      	str	r3, [sp, #20]
   1e82c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   1e830:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
   1e834:	4402      	add	r2, r0
   1e836:	f8ba 0010 	ldrh.w	r0, [sl, #16]
   1e83a:	3301      	adds	r3, #1
   1e83c:	1a5b      	subs	r3, r3, r1
   1e83e:	4401      	add	r1, r0
   1e840:	b209      	sxth	r1, r1
   1e842:	9805      	ldr	r0, [sp, #20]
   1e844:	b21b      	sxth	r3, r3
   1e846:	b212      	sxth	r2, r2
   1e848:	f7f3 f8e2 	bl	11a10 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
   1e84c:	4601      	mov	r1, r0
   1e84e:	2800      	cmp	r0, #0
   1e850:	d158      	bne.n	1e904 <lv_draw_map+0x3ea>
   1e852:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   1e856:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1e85a:	3201      	adds	r2, #1
   1e85c:	1ad2      	subs	r2, r2, r3
    memset(dst, 0x00, len);
   1e85e:	9805      	ldr	r0, [sp, #20]
   1e860:	b212      	sxth	r2, r2
   1e862:	f7fa fcfc 	bl	1925e <memset>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   1e866:	2502      	movs	r5, #2
                map_buf_tmp += map_w * px_size_byte;
   1e868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e86a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e86c:	4413      	add	r3, r2
   1e86e:	930a      	str	r3, [sp, #40]	; 0x28
   1e870:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   1e874:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1e878:	3301      	adds	r3, #1
   1e87a:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   1e87c:	fa09 f383 	sxtah	r3, r9, r3
   1e880:	4543      	cmp	r3, r8
   1e882:	d243      	bcs.n	1e90c <lv_draw_map+0x3f2>
                    blend_area.y2 ++;
   1e884:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   1e888:	3301      	adds	r3, #1
   1e88a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            for(y = 0; y < draw_area_h; y++) {
   1e88e:	9b06      	ldr	r3, [sp, #24]
   1e890:	3301      	adds	r3, #1
   1e892:	e9cd 9305 	strd	r9, r3, [sp, #20]
   1e896:	e796      	b.n	1e7c6 <lv_draw_map+0x2ac>
                            mask_buf[px_i] = 0xFF;
   1e898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e89c:	54b3      	strb	r3, [r6, r2]
                        c.full =  *((uint32_t *)map_px);
   1e89e:	f8de 3000 	ldr.w	r3, [lr]
                        if(chroma_key) {
   1e8a2:	9908      	ldr	r1, [sp, #32]
                        c.ch.alpha = 0xFF;
   1e8a4:	f043 4c7f 	orr.w	ip, r3, #4278190080	; 0xff000000
                        if(chroma_key) {
   1e8a8:	b139      	cbz	r1, 1e8ba <lv_draw_map+0x3a0>
                            if(c.full == chroma_keyed_color.full) {
   1e8aa:	f1bc 2fff 	cmp.w	ip, #4278255360	; 0xff00ff00
   1e8ae:	d104      	bne.n	1e8ba <lv_draw_map+0x3a0>
                                mask_buf[px_i] = LV_OPA_TRANSP;
   1e8b0:	f04f 0300 	mov.w	r3, #0
   1e8b4:	54b3      	strb	r3, [r6, r2]
                                map2[px_i].full = 0;
   1e8b6:	2300      	movs	r3, #0
   1e8b8:	e79f      	b.n	1e7fa <lv_draw_map+0x2e0>
                    if(draw_dsc->recolor_opa != 0) {
   1e8ba:	7aa1      	ldrb	r1, [r4, #10]
   1e8bc:	b1f9      	cbz	r1, 1e8fe <lv_draw_map+0x3e4>
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1e8be:	980c      	ldr	r0, [sp, #48]	; 0x30
   1e8c0:	b2d9      	uxtb	r1, r3
   1e8c2:	4681      	mov	r9, r0
   1e8c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e8c6:	fb09 0101 	mla	r1, r9, r1, r0
   1e8ca:	f248 0081 	movw	r0, #32897	; 0x8081
   1e8ce:	4341      	muls	r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1e8d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1e8d2:	0dc9      	lsrs	r1, r1, #23
   1e8d4:	f361 0c07 	bfi	ip, r1, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1e8d8:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1e8dc:	fb01 0109 	mla	r1, r1, r9, r0
   1e8e0:	f248 0081 	movw	r0, #32897	; 0x8081
   1e8e4:	4341      	muls	r1, r0
   1e8e6:	0dc9      	lsrs	r1, r1, #23
   1e8e8:	f361 2c0f 	bfi	ip, r1, #8, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   1e8ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e8ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1e8f2:	fb03 1309 	mla	r3, r3, r9, r1
   1e8f6:	4343      	muls	r3, r0
   1e8f8:	0ddb      	lsrs	r3, r3, #23
   1e8fa:	f363 4c17 	bfi	ip, r3, #16, #8
                    map2[px_i].full = c.full;
   1e8fe:	f847 c022 	str.w	ip, [r7, r2, lsl #2]
   1e902:	e77c      	b.n	1e7fe <lv_draw_map+0x2e4>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   1e904:	2802      	cmp	r0, #2
   1e906:	bf08      	it	eq
   1e908:	2502      	moveq	r5, #2
   1e90a:	e7ad      	b.n	1e868 <lv_draw_map+0x34e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   1e90c:	7c23      	ldrb	r3, [r4, #16]
   1e90e:	463a      	mov	r2, r7
   1e910:	9302      	str	r3, [sp, #8]
   1e912:	7823      	ldrb	r3, [r4, #0]
   1e914:	4658      	mov	r0, fp
   1e916:	e9cd 5300 	strd	r5, r3, [sp]
   1e91a:	a914      	add	r1, sp, #80	; 0x50
   1e91c:	4633      	mov	r3, r6
   1e91e:	f7ff fb4b 	bl	1dfb8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   1e922:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   1e926:	3301      	adds	r3, #1
   1e928:	b21b      	sxth	r3, r3
   1e92a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                    blend_area.y2 = blend_area.y1;
   1e92e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   1e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e934:	b99b      	cbnz	r3, 1e95e <lv_draw_map+0x444>
   1e936:	9b08      	ldr	r3, [sp, #32]
   1e938:	b98b      	cbnz	r3, 1e95e <lv_draw_map+0x444>
   1e93a:	8863      	ldrh	r3, [r4, #2]
   1e93c:	b97b      	cbnz	r3, 1e95e <lv_draw_map+0x444>
   1e93e:	8923      	ldrh	r3, [r4, #8]
   1e940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1e944:	bf14      	ite	ne
   1e946:	2502      	movne	r5, #2
   1e948:	2501      	moveq	r5, #1
                    if(other_mask_cnt) {
   1e94a:	9b04      	ldr	r3, [sp, #16]
   1e94c:	b14b      	cbz	r3, 1e962 <lv_draw_map+0x448>
    memset(dst, 0xFF, len);
   1e94e:	4642      	mov	r2, r8
   1e950:	21ff      	movs	r1, #255	; 0xff
   1e952:	4630      	mov	r0, r6
   1e954:	f7fa fc83 	bl	1925e <memset>
                    px_i = 0;
   1e958:	f04f 0900 	mov.w	r9, #0
}
   1e95c:	e797      	b.n	1e88e <lv_draw_map+0x374>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   1e95e:	2502      	movs	r5, #2
   1e960:	e7f3      	b.n	1e94a <lv_draw_map+0x430>
                    px_i = 0;
   1e962:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1e966:	e792      	b.n	1e88e <lv_draw_map+0x374>
            if(blend_area.y1 != blend_area.y2) {
   1e968:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
   1e96c:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   1e970:	429a      	cmp	r2, r3
   1e972:	d00d      	beq.n	1e990 <lv_draw_map+0x476>
                blend_area.y2--;
   1e974:	3b01      	subs	r3, #1
   1e976:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   1e97a:	7c23      	ldrb	r3, [r4, #16]
   1e97c:	463a      	mov	r2, r7
   1e97e:	9302      	str	r3, [sp, #8]
   1e980:	7823      	ldrb	r3, [r4, #0]
   1e982:	4658      	mov	r0, fp
   1e984:	e9cd 5300 	strd	r5, r3, [sp]
   1e988:	a914      	add	r1, sp, #80	; 0x50
   1e98a:	4633      	mov	r3, r6
   1e98c:	f7ff fb14 	bl	1dfb8 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   1e990:	4630      	mov	r0, r6
   1e992:	f7f4 f91f 	bl	12bd4 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   1e996:	4638      	mov	r0, r7
   1e998:	e6d6      	b.n	1e748 <lv_draw_map+0x22e>

0001e99a <lv_draw_img_dsc_init>:
{
   1e99a:	b510      	push	{r4, lr}
    memset(dst, 0x00, len);
   1e99c:	2214      	movs	r2, #20
   1e99e:	2100      	movs	r1, #0
   1e9a0:	4604      	mov	r4, r0
   1e9a2:	f7fa fc5c 	bl	1925e <memset>
    dsc->recolor = LV_COLOR_BLACK;
   1e9a6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   1e9aa:	60e3      	str	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
   1e9ac:	23ff      	movs	r3, #255	; 0xff
   1e9ae:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
   1e9b0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e9b4:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
   1e9b6:	7c63      	ldrb	r3, [r4, #17]
   1e9b8:	f043 0301 	orr.w	r3, r3, #1
   1e9bc:	7463      	strb	r3, [r4, #17]
}
   1e9be:	bd10      	pop	{r4, pc}

0001e9c0 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
   1e9c0:	2803      	cmp	r0, #3
   1e9c2:	d005      	beq.n	1e9d0 <lv_img_cf_is_chroma_keyed+0x10>
   1e9c4:	3806      	subs	r0, #6
   1e9c6:	2804      	cmp	r0, #4
   1e9c8:	bf8c      	ite	hi
   1e9ca:	2000      	movhi	r0, #0
   1e9cc:	2001      	movls	r0, #1
   1e9ce:	4770      	bx	lr
            is_chroma_keyed = true;
   1e9d0:	2001      	movs	r0, #1
}
   1e9d2:	4770      	bx	lr

0001e9d4 <lv_img_cf_has_alpha>:
    switch(cf) {
   1e9d4:	280e      	cmp	r0, #14
   1e9d6:	d809      	bhi.n	1e9ec <lv_img_cf_has_alpha+0x18>
   1e9d8:	2301      	movs	r3, #1
   1e9da:	fa03 f000 	lsl.w	r0, r3, r0
   1e9de:	f647 73a4 	movw	r3, #32676	; 0x7fa4
   1e9e2:	4218      	tst	r0, r3
   1e9e4:	bf14      	ite	ne
   1e9e6:	2001      	movne	r0, #1
   1e9e8:	2000      	moveq	r0, #0
   1e9ea:	4770      	bx	lr
{
   1e9ec:	2000      	movs	r0, #0
}
   1e9ee:	4770      	bx	lr

0001e9f0 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
   1e9f0:	b150      	cbz	r0, 1ea08 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   1e9f2:	7803      	ldrb	r3, [r0, #0]
   1e9f4:	f1a3 0220 	sub.w	r2, r3, #32
   1e9f8:	2a5f      	cmp	r2, #95	; 0x5f
   1e9fa:	d907      	bls.n	1ea0c <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
   1e9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
   1ea00:	bf0c      	ite	eq
   1ea02:	2000      	moveq	r0, #0
   1ea04:	2002      	movne	r0, #2
   1ea06:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   1ea08:	2003      	movs	r0, #3
   1ea0a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   1ea0c:	2001      	movs	r0, #1
}
   1ea0e:	4770      	bx	lr

0001ea10 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   1ea10:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   1ea12:	3830      	subs	r0, #48	; 0x30
   1ea14:	b2c0      	uxtb	r0, r0
   1ea16:	2809      	cmp	r0, #9
   1ea18:	d90b      	bls.n	1ea32 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   1ea1a:	2b60      	cmp	r3, #96	; 0x60
   1ea1c:	bf84      	itt	hi
   1ea1e:	3b20      	subhi	r3, #32
   1ea20:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   1ea22:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1ea26:	2a05      	cmp	r2, #5
   1ea28:	d802      	bhi.n	1ea30 <hex_char_to_num+0x20>
   1ea2a:	3b37      	subs	r3, #55	; 0x37
   1ea2c:	b2d8      	uxtb	r0, r3
   1ea2e:	4770      	bx	lr
{
   1ea30:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
   1ea32:	4770      	bx	lr

0001ea34 <lv_draw_line_dsc_init>:
{
   1ea34:	b510      	push	{r4, lr}
   1ea36:	220c      	movs	r2, #12
   1ea38:	2100      	movs	r1, #0
   1ea3a:	4604      	mov	r4, r0
   1ea3c:	f7fa fc0f 	bl	1925e <memset>
    dsc->opa = LV_OPA_COVER;
   1ea40:	23ff      	movs	r3, #255	; 0xff
   1ea42:	72a3      	strb	r3, [r4, #10]
    dsc->color = LV_COLOR_BLACK;
   1ea44:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   1ea48:	6023      	str	r3, [r4, #0]
    dsc->width = 1;
   1ea4a:	2301      	movs	r3, #1
   1ea4c:	80a3      	strh	r3, [r4, #4]
}
   1ea4e:	bd10      	pop	{r4, pc}

0001ea50 <_lv_memset_00>:
{
   1ea50:	460a      	mov	r2, r1
    memset(dst, 0x00, len);
   1ea52:	2100      	movs	r1, #0
   1ea54:	f7fa bc03 	b.w	1925e <memset>

0001ea58 <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
   1ea58:	29fc      	cmp	r1, #252	; 0xfc
   1ea5a:	d80a      	bhi.n	1ea72 <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
   1ea5c:	2902      	cmp	r1, #2
   1ea5e:	d907      	bls.n	1ea70 <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
   1ea60:	fb10 f001 	smulbb	r0, r0, r1
   1ea64:	f248 0181 	movw	r1, #32897	; 0x8081
   1ea68:	4348      	muls	r0, r1
   1ea6a:	f3c0 50c7 	ubfx	r0, r0, #23, #8
   1ea6e:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
   1ea70:	2000      	movs	r0, #0
}
   1ea72:	4770      	bx	lr

0001ea74 <lv_draw_mask_line>:
{
   1ea74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ea78:	9e08      	ldr	r6, [sp, #32]
   1ea7a:	4604      	mov	r4, r0
    abs_x -= p->origo.x;
   1ea7c:	8a75      	ldrh	r5, [r6, #18]
    abs_y -= p->origo.y;
   1ea7e:	8ab0      	ldrh	r0, [r6, #20]
    abs_x -= p->origo.x;
   1ea80:	1b49      	subs	r1, r1, r5
   1ea82:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
   1ea86:	b20d      	sxth	r5, r1
    if(p->steep == 0) {
   1ea88:	6a31      	ldr	r1, [r6, #32]
    abs_y -= p->origo.y;
   1ea8a:	1a12      	subs	r2, r2, r0
   1ea8c:	b212      	sxth	r2, r2
    if(p->steep == 0) {
   1ea8e:	f00c 0001 	and.w	r0, ip, #1
   1ea92:	bb89      	cbnz	r1, 1eaf8 <lv_draw_mask_line+0x84>
        if(p->flat) {
   1ea94:	7c31      	ldrb	r1, [r6, #16]
   1ea96:	f001 0602 	and.w	r6, r1, #2
   1ea9a:	b170      	cbz	r0, 1eaba <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
   1ea9c:	b12e      	cbz	r6, 1eaaa <lv_draw_mask_line+0x36>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   1ea9e:	f001 0103 	and.w	r1, r1, #3
   1eaa2:	2902      	cmp	r1, #2
   1eaa4:	d103      	bne.n	1eaae <lv_draw_mask_line+0x3a>
   1eaa6:	1c50      	adds	r0, r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   1eaa8:	0fc0      	lsrs	r0, r0, #31
}
   1eaaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   1eaae:	2903      	cmp	r1, #3
   1eab0:	d101      	bne.n	1eab6 <lv_draw_mask_line+0x42>
   1eab2:	2a00      	cmp	r2, #0
   1eab4:	dcf9      	bgt.n	1eaaa <lv_draw_mask_line+0x36>
                return LV_DRAW_MASK_RES_TRANSP;
   1eab6:	2000      	movs	r0, #0
   1eab8:	e7f7      	b.n	1eaaa <lv_draw_mask_line+0x36>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
   1eaba:	2e00      	cmp	r6, #0
   1eabc:	f040 816b 	bne.w	1ed96 <lv_draw_mask_line+0x322>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   1eac0:	f001 0003 	and.w	r0, r1, #3
   1eac4:	2801      	cmp	r0, #1
   1eac6:	d10a      	bne.n	1eade <lv_draw_mask_line+0x6a>
   1eac8:	2d00      	cmp	r5, #0
   1eaca:	dcee      	bgt.n	1eaaa <lv_draw_mask_line+0x36>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
   1eacc:	42dd      	cmn	r5, r3
   1eace:	d4f2      	bmi.n	1eab6 <lv_draw_mask_line+0x42>
                    int32_t k = - abs_x;
   1ead0:	4269      	negs	r1, r5
                    if(k < 0) k = 0;
   1ead2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
   1ead6:	428b      	cmp	r3, r1
   1ead8:	dded      	ble.n	1eab6 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   1eada:	4620      	mov	r0, r4
   1eadc:	e0a2      	b.n	1ec24 <lv_draw_mask_line+0x1b0>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
   1eade:	2800      	cmp	r0, #0
   1eae0:	d1f4      	bne.n	1eacc <lv_draw_mask_line+0x58>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   1eae2:	1959      	adds	r1, r3, r5
   1eae4:	f100 8157 	bmi.w	1ed96 <lv_draw_mask_line+0x322>
                    int32_t k = - abs_x;
   1eae8:	4268      	negs	r0, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
   1eaea:	2800      	cmp	r0, #0
   1eaec:	dbe3      	blt.n	1eab6 <lv_draw_mask_line+0x42>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
   1eaee:	4298      	cmp	r0, r3
   1eaf0:	f2c0 8097 	blt.w	1ec22 <lv_draw_mask_line+0x1ae>
    return LV_DRAW_MASK_RES_CHANGED;
   1eaf4:	2002      	movs	r0, #2
   1eaf6:	e7d8      	b.n	1eaaa <lv_draw_mask_line+0x36>
    if(p->flat) {
   1eaf8:	f00c 0c02 	and.w	ip, ip, #2
   1eafc:	2800      	cmp	r0, #0
   1eafe:	f000 8094 	beq.w	1ec2a <lv_draw_mask_line+0x1b6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   1eb02:	69f7      	ldr	r7, [r6, #28]
   1eb04:	fa5f f08c 	uxtb.w	r0, ip
   1eb08:	fb05 f107 	mul.w	r1, r5, r7
    if(p->yx_steep > 0) {
   1eb0c:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   1eb0e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   1eb12:	dd05      	ble.n	1eb20 <lv_draw_mask_line+0xac>
        if(y_at_x > abs_y) {
   1eb14:	4291      	cmp	r1, r2
   1eb16:	dd05      	ble.n	1eb24 <lv_draw_mask_line+0xb0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   1eb18:	3800      	subs	r0, #0
   1eb1a:	bf18      	it	ne
   1eb1c:	2001      	movne	r0, #1
   1eb1e:	e7c4      	b.n	1eaaa <lv_draw_mask_line+0x36>
        if(y_at_x < abs_y) {
   1eb20:	4291      	cmp	r1, r2
   1eb22:	dbf9      	blt.n	1eb18 <lv_draw_mask_line+0xa4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   1eb24:	1959      	adds	r1, r3, r5
   1eb26:	4379      	muls	r1, r7
    if(p->yx_steep > 0) {
   1eb28:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   1eb2a:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   1eb2e:	dd05      	ble.n	1eb3c <lv_draw_mask_line+0xc8>
        if(y_at_x < abs_y) {
   1eb30:	4291      	cmp	r1, r2
   1eb32:	da06      	bge.n	1eb42 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   1eb34:	fab0 f080 	clz	r0, r0
   1eb38:	0940      	lsrs	r0, r0, #5
   1eb3a:	e7b6      	b.n	1eaaa <lv_draw_mask_line+0x36>
        if(y_at_x > abs_y) {
   1eb3c:	4291      	cmp	r1, r2
   1eb3e:	dcf9      	bgt.n	1eb34 <lv_draw_mask_line+0xc0>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   1eb40:	3201      	adds	r2, #1
   1eb42:	69b1      	ldr	r1, [r6, #24]
   1eb44:	0212      	lsls	r2, r2, #8
   1eb46:	434a      	muls	r2, r1
   1eb48:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
   1eb4a:	ea4f 2c22 	mov.w	ip, r2, asr #8
    if(xef == 0) px_h = 255;
   1eb4e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
   1eb52:	bf1f      	itttt	ne
   1eb54:	6a71      	ldrne	r1, [r6, #36]	; 0x24
   1eb56:	f1c2 07ff 	rsbne	r7, r2, #255	; 0xff
   1eb5a:	434f      	mulne	r7, r1
   1eb5c:	123f      	asrne	r7, r7, #8
    if(xef == 0) px_h = 255;
   1eb5e:	bf0c      	ite	eq
   1eb60:	27ff      	moveq	r7, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
   1eb62:	f1c7 07ff 	rsbne	r7, r7, #255	; 0xff
    int32_t k = xei - abs_x;
   1eb66:	ebac 0505 	sub.w	r5, ip, r5
    if(xef) {
   1eb6a:	2a00      	cmp	r2, #0
   1eb6c:	d050      	beq.n	1ec10 <lv_draw_mask_line+0x19c>
        if(k >= 0 && k < len) {
   1eb6e:	2d00      	cmp	r5, #0
   1eb70:	db0f      	blt.n	1eb92 <lv_draw_mask_line+0x11e>
   1eb72:	42ab      	cmp	r3, r5
   1eb74:	dd0d      	ble.n	1eb92 <lv_draw_mask_line+0x11e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   1eb76:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
   1eb7a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   1eb7e:	434a      	muls	r2, r1
   1eb80:	f3c2 2147 	ubfx	r1, r2, #9, #8
            if(p->inv) m = 255 - m;
   1eb84:	b908      	cbnz	r0, 1eb8a <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   1eb86:	43c9      	mvns	r1, r1
   1eb88:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   1eb8a:	5d60      	ldrb	r0, [r4, r5]
   1eb8c:	f7ff ff64 	bl	1ea58 <mask_mix>
   1eb90:	5560      	strb	r0, [r4, r5]
        k++;
   1eb92:	1c6a      	adds	r2, r5, #1
    while(px_h > p->spx) {
   1eb94:	6a71      	ldr	r1, [r6, #36]	; 0x24
   1eb96:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
   1eb9a:	428f      	cmp	r7, r1
   1eb9c:	f000 0002 	and.w	r0, r0, #2
   1eba0:	dc16      	bgt.n	1ebd0 <lv_draw_mask_line+0x15c>
    if(k < len && k >= 0) {
   1eba2:	4293      	cmp	r3, r2
   1eba4:	dd28      	ble.n	1ebf8 <lv_draw_mask_line+0x184>
   1eba6:	2a00      	cmp	r2, #0
   1eba8:	db26      	blt.n	1ebf8 <lv_draw_mask_line+0x184>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
   1ebaa:	69b1      	ldr	r1, [r6, #24]
   1ebac:	4379      	muls	r1, r7
   1ebae:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
   1ebb0:	4379      	muls	r1, r7
        if(p->yx_steep < 0) m = 255 - m;
   1ebb2:	69f7      	ldr	r7, [r6, #28]
        m = (x_inters * px_h) >> 9;
   1ebb4:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
   1ebb8:	2f00      	cmp	r7, #0
   1ebba:	bfbc      	itt	lt
   1ebbc:	43c9      	mvnlt	r1, r1
   1ebbe:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
   1ebc0:	b108      	cbz	r0, 1ebc6 <lv_draw_mask_line+0x152>
   1ebc2:	43c9      	mvns	r1, r1
   1ebc4:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
   1ebc6:	5ca0      	ldrb	r0, [r4, r2]
   1ebc8:	f7ff ff46 	bl	1ea58 <mask_mix>
   1ebcc:	54a0      	strb	r0, [r4, r2]
   1ebce:	e013      	b.n	1ebf8 <lv_draw_mask_line+0x184>
        if(k >= 0 && k < len) {
   1ebd0:	2a00      	cmp	r2, #0
   1ebd2:	db0b      	blt.n	1ebec <lv_draw_mask_line+0x178>
   1ebd4:	4293      	cmp	r3, r2
   1ebd6:	dd09      	ble.n	1ebec <lv_draw_mask_line+0x178>
            m = px_h - (p->spx >> 1);
   1ebd8:	eba7 0161 	sub.w	r1, r7, r1, asr #1
   1ebdc:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
   1ebde:	b108      	cbz	r0, 1ebe4 <lv_draw_mask_line+0x170>
   1ebe0:	43c9      	mvns	r1, r1
   1ebe2:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   1ebe4:	5ca0      	ldrb	r0, [r4, r2]
   1ebe6:	f7ff ff37 	bl	1ea58 <mask_mix>
   1ebea:	54a0      	strb	r0, [r4, r2]
        px_h -= p->spx;
   1ebec:	6a71      	ldr	r1, [r6, #36]	; 0x24
        k++;
   1ebee:	3201      	adds	r2, #1
        if(k >= len) break;
   1ebf0:	4293      	cmp	r3, r2
        px_h -= p->spx;
   1ebf2:	eba7 0701 	sub.w	r7, r7, r1
        if(k >= len) break;
   1ebf6:	dccd      	bgt.n	1eb94 <lv_draw_mask_line+0x120>
    if(p->inv) {
   1ebf8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   1ebfc:	0788      	lsls	r0, r1, #30
   1ebfe:	d509      	bpl.n	1ec14 <lv_draw_mask_line+0x1a0>
        if(k > len) {
   1ec00:	42ab      	cmp	r3, r5
   1ec02:	f6ff af58 	blt.w	1eab6 <lv_draw_mask_line+0x42>
        if(k >= 0) {
   1ec06:	2d00      	cmp	r5, #0
   1ec08:	f6ff af74 	blt.w	1eaf4 <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
   1ec0c:	4629      	mov	r1, r5
   1ec0e:	e764      	b.n	1eada <lv_draw_mask_line+0x66>
    int32_t k = xei - abs_x;
   1ec10:	462a      	mov	r2, r5
   1ec12:	e7bf      	b.n	1eb94 <lv_draw_mask_line+0x120>
        if(k < 0) {
   1ec14:	1c50      	adds	r0, r2, #1
   1ec16:	f53f af4e 	bmi.w	1eab6 <lv_draw_mask_line+0x42>
        if(k <= len) {
   1ec1a:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   1ec1c:	f6ff af6a 	blt.w	1eaf4 <lv_draw_mask_line+0x80>
   1ec20:	1a19      	subs	r1, r3, r0
   1ec22:	4420      	add	r0, r4
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   1ec24:	f7ff ff14 	bl	1ea50 <_lv_memset_00>
   1ec28:	e764      	b.n	1eaf4 <lv_draw_mask_line+0x80>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   1ec2a:	69b1      	ldr	r1, [r6, #24]
   1ec2c:	fa5f f08c 	uxtb.w	r0, ip
   1ec30:	fb02 f701 	mul.w	r7, r2, r1
    if(p->xy_steep > 0) x_at_y++;
   1ec34:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   1ec36:	ea4f 27a7 	mov.w	r7, r7, asr #10
   1ec3a:	bfd4      	ite	le
   1ec3c:	46be      	movle	lr, r7
    if(p->xy_steep > 0) x_at_y++;
   1ec3e:	f107 0e01 	addgt.w	lr, r7, #1
    if(x_at_y < abs_x) {
   1ec42:	45ae      	cmp	lr, r5
   1ec44:	f6ff af68 	blt.w	1eb18 <lv_draw_mask_line+0xa4>
    if(x_at_y > abs_x + len) {
   1ec48:	eb03 0c05 	add.w	ip, r3, r5
   1ec4c:	4567      	cmp	r7, ip
   1ec4e:	f73f af71 	bgt.w	1eb34 <lv_draw_mask_line+0xc0>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   1ec52:	1c57      	adds	r7, r2, #1
   1ec54:	023f      	lsls	r7, r7, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   1ec56:	ea4f 2e02 	mov.w	lr, r2, lsl #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   1ec5a:	434f      	muls	r7, r1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   1ec5c:	fb01 fe0e 	mul.w	lr, r1, lr
    int32_t xei = xe >> 8;
   1ec60:	ea4f 48a7 	mov.w	r8, r7, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   1ec64:	ebb8 4fae 	cmp.w	r8, lr, asr #18
    int32_t xsf = xs & 0xFF;
   1ec68:	f3ce 2c87 	ubfx	ip, lr, #10, #8
    k = xsi - abs_x;
   1ec6c:	ebc5 42ae 	rsb	r2, r5, lr, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   1ec70:	f000 8096 	beq.w	1eda0 <lv_draw_mask_line+0x32c>
   1ec74:	2900      	cmp	r1, #0
   1ec76:	da55      	bge.n	1ed24 <lv_draw_mask_line+0x2b0>
   1ec78:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1ec7c:	f1bc 0f00 	cmp.w	ip, #0
   1ec80:	f000 808b 	beq.w	1ed9a <lv_draw_mask_line+0x326>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   1ec84:	69f5      	ldr	r5, [r6, #28]
            if(k >= 0 && k < len) {
   1ec86:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   1ec88:	fb05 f50c 	mul.w	r5, r5, ip
   1ec8c:	f1c5 0500 	rsb	r5, r5, #0
   1ec90:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   1ec94:	db0c      	blt.n	1ecb0 <lv_draw_mask_line+0x23c>
   1ec96:	4293      	cmp	r3, r2
   1ec98:	dd0a      	ble.n	1ecb0 <lv_draw_mask_line+0x23c>
                m = (y_inters * xsf) >> 9;
   1ec9a:	fb05 f10c 	mul.w	r1, r5, ip
   1ec9e:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   1eca2:	b108      	cbz	r0, 1eca8 <lv_draw_mask_line+0x234>
   1eca4:	43c9      	mvns	r1, r1
   1eca6:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1eca8:	5ca0      	ldrb	r0, [r4, r2]
   1ecaa:	f7ff fed5 	bl	1ea58 <mask_mix>
   1ecae:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   1ecb0:	f1b9 0f00 	cmp.w	r9, #0
   1ecb4:	db18      	blt.n	1ece8 <lv_draw_mask_line+0x274>
   1ecb6:	454b      	cmp	r3, r9
   1ecb8:	dd16      	ble.n	1ece8 <lv_draw_mask_line+0x274>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
   1ecba:	69b1      	ldr	r1, [r6, #24]
   1ecbc:	f1a5 00ff 	sub.w	r0, r5, #255	; 0xff
   1ecc0:	4341      	muls	r1, r0
   1ecc2:	1288      	asrs	r0, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   1ecc4:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
   1ecc8:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
   1ecca:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   1ecce:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   1ecd2:	0787      	lsls	r7, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   1ecd4:	bf58      	it	pl
   1ecd6:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1ecd8:	f814 0009 	ldrb.w	r0, [r4, r9]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   1ecdc:	bf58      	it	pl
   1ecde:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1ece0:	f7ff feba 	bl	1ea58 <mask_mix>
   1ece4:	f804 0009 	strb.w	r0, [r4, r9]
            if(p->inv) {
   1ece8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   1ecec:	078d      	lsls	r5, r1, #30
   1ecee:	d514      	bpl.n	1ed1a <lv_draw_mask_line+0x2a6>
                if(k > len) k = len;
   1ecf0:	454b      	cmp	r3, r9
   1ecf2:	f6ff aeff 	blt.w	1eaf4 <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
   1ecf6:	f1b9 0f00 	cmp.w	r9, #0
   1ecfa:	f77f aefb 	ble.w	1eaf4 <lv_draw_mask_line+0x80>
   1ecfe:	4649      	mov	r1, r9
   1ed00:	e6eb      	b.n	1eada <lv_draw_mask_line+0x66>
        k++;
   1ed02:	3201      	adds	r2, #1
   1ed04:	429a      	cmp	r2, r3
   1ed06:	bfa8      	it	ge
   1ed08:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
   1ed0a:	2a00      	cmp	r2, #0
   1ed0c:	f43f aed3 	beq.w	1eab6 <lv_draw_mask_line+0x42>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   1ed10:	f77f aef0 	ble.w	1eaf4 <lv_draw_mask_line+0x80>
   1ed14:	1a99      	subs	r1, r3, r2
   1ed16:	18a0      	adds	r0, r4, r2
   1ed18:	e784      	b.n	1ec24 <lv_draw_mask_line+0x1b0>
            k += 2;
   1ed1a:	1c50      	adds	r0, r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   1ed1c:	4283      	cmp	r3, r0
   1ed1e:	db3a      	blt.n	1ed96 <lv_draw_mask_line+0x322>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   1ed20:	2800      	cmp	r0, #0
   1ed22:	e77b      	b.n	1ec1c <lv_draw_mask_line+0x1a8>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   1ed24:	69f5      	ldr	r5, [r6, #28]
   1ed26:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
   1ed2a:	434d      	muls	r5, r1
            if(k >= 0 && k < len) {
   1ed2c:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   1ed2e:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   1ed32:	db0b      	blt.n	1ed4c <lv_draw_mask_line+0x2d8>
   1ed34:	4293      	cmp	r3, r2
   1ed36:	dd09      	ble.n	1ed4c <lv_draw_mask_line+0x2d8>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   1ed38:	4369      	muls	r1, r5
   1ed3a:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   1ed3e:	b908      	cbnz	r0, 1ed44 <lv_draw_mask_line+0x2d0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   1ed40:	43c9      	mvns	r1, r1
   1ed42:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1ed44:	5ca0      	ldrb	r0, [r4, r2]
   1ed46:	f7ff fe87 	bl	1ea58 <mask_mix>
   1ed4a:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   1ed4c:	1c57      	adds	r7, r2, #1
   1ed4e:	d414      	bmi.n	1ed7a <lv_draw_mask_line+0x306>
   1ed50:	42bb      	cmp	r3, r7
   1ed52:	dd12      	ble.n	1ed7a <lv_draw_mask_line+0x306>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   1ed54:	69b1      	ldr	r1, [r6, #24]
   1ed56:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
   1ed5a:	4369      	muls	r1, r5
   1ed5c:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
   1ed5e:	434d      	muls	r5, r1
                if(p->inv) m = 255 - m;
   1ed60:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
   1ed64:	f3c5 2147 	ubfx	r1, r5, #9, #8
                if(p->inv) m = 255 - m;
   1ed68:	0780      	lsls	r0, r0, #30
   1ed6a:	bf48      	it	mi
   1ed6c:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1ed6e:	5de0      	ldrb	r0, [r4, r7]
                if(p->inv) m = 255 - m;
   1ed70:	bf48      	it	mi
   1ed72:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   1ed74:	f7ff fe70 	bl	1ea58 <mask_mix>
   1ed78:	55e0      	strb	r0, [r4, r7]
            if(p->inv) {
   1ed7a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   1ed7e:	0789      	lsls	r1, r1, #30
   1ed80:	d507      	bpl.n	1ed92 <lv_draw_mask_line+0x31e>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
   1ed82:	4293      	cmp	r3, r2
   1ed84:	f6ff ae97 	blt.w	1eab6 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   1ed88:	2a00      	cmp	r2, #0
   1ed8a:	f6ff aeb3 	blt.w	1eaf4 <lv_draw_mask_line+0x80>
   1ed8e:	4611      	mov	r1, r2
   1ed90:	e6a3      	b.n	1eada <lv_draw_mask_line+0x66>
            k++;
   1ed92:	3202      	adds	r2, #2
   1ed94:	e7b6      	b.n	1ed04 <lv_draw_mask_line+0x290>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   1ed96:	2001      	movs	r0, #1
   1ed98:	e687      	b.n	1eaaa <lv_draw_mask_line+0x36>
   1ed9a:	464a      	mov	r2, r9
        xsf = 0xFF;
   1ed9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if(k >= 0 && k < len) {
   1eda0:	2a00      	cmp	r2, #0
   1eda2:	db0d      	blt.n	1edc0 <lv_draw_mask_line+0x34c>
   1eda4:	4293      	cmp	r3, r2
   1eda6:	dd0b      	ble.n	1edc0 <lv_draw_mask_line+0x34c>
    int32_t xef = xe & 0xFF;
   1eda8:	f3c7 2187 	ubfx	r1, r7, #10, #8
            m = (xsf + xef) >> 1;
   1edac:	4461      	add	r1, ip
   1edae:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
   1edb2:	b108      	cbz	r0, 1edb8 <lv_draw_mask_line+0x344>
   1edb4:	43c9      	mvns	r1, r1
   1edb6:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   1edb8:	5ca0      	ldrb	r0, [r4, r2]
   1edba:	f7ff fe4d 	bl	1ea58 <mask_mix>
   1edbe:	54a0      	strb	r0, [r4, r2]
        if(p->inv) {
   1edc0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   1edc4:	0789      	lsls	r1, r1, #30
   1edc6:	d59c      	bpl.n	1ed02 <lv_draw_mask_line+0x28e>
            k = xsi - abs_x;
   1edc8:	eba8 0105 	sub.w	r1, r8, r5
            if(k >= len) {
   1edcc:	428b      	cmp	r3, r1
   1edce:	f77f ae72 	ble.w	1eab6 <lv_draw_mask_line+0x42>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
   1edd2:	2900      	cmp	r1, #0
   1edd4:	f6ff ae8e 	blt.w	1eaf4 <lv_draw_mask_line+0x80>
   1edd8:	e67f      	b.n	1eada <lv_draw_mask_line+0x66>

0001edda <lv_draw_mask_fade>:
{
   1edda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eddc:	9e06      	ldr	r6, [sp, #24]
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
   1edde:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
   1ede2:	4294      	cmp	r4, r2
   1ede4:	dc50      	bgt.n	1ee88 <lv_draw_mask_fade+0xae>
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
   1ede6:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
   1edea:	4294      	cmp	r4, r2
   1edec:	db4c      	blt.n	1ee88 <lv_draw_mask_fade+0xae>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
   1edee:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
   1edf2:	185f      	adds	r7, r3, r1
   1edf4:	42a7      	cmp	r7, r4
   1edf6:	db47      	blt.n	1ee88 <lv_draw_mask_fade+0xae>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
   1edf8:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
   1edfc:	42a9      	cmp	r1, r5
   1edfe:	dc43      	bgt.n	1ee88 <lv_draw_mask_fade+0xae>
    if(abs_x + len > p->cfg.coords.x2) len -= abs_x + len - p->cfg.coords.x2 - 1;
   1ee00:	42af      	cmp	r7, r5
   1ee02:	bfc2      	ittt	gt
   1ee04:	f1c1 0301 	rsbgt	r3, r1, #1
   1ee08:	195b      	addgt	r3, r3, r5
   1ee0a:	b21b      	sxthgt	r3, r3
    if(abs_x < p->cfg.coords.x1) {
   1ee0c:	42a1      	cmp	r1, r4
   1ee0e:	da04      	bge.n	1ee1a <lv_draw_mask_fade+0x40>
        len -= x_ofs;
   1ee10:	1b0d      	subs	r5, r1, r4
   1ee12:	442b      	add	r3, r5
        x_ofs = p->cfg.coords.x1 - abs_x;
   1ee14:	1a61      	subs	r1, r4, r1
        len -= x_ofs;
   1ee16:	b21b      	sxth	r3, r3
        mask_buf += x_ofs;
   1ee18:	4408      	add	r0, r1
    if(abs_y <= p->cfg.y_top) {
   1ee1a:	f9b6 7010 	ldrsh.w	r7, [r6, #16]
   1ee1e:	1e44      	subs	r4, r0, #1
   1ee20:	42ba      	cmp	r2, r7
   1ee22:	f1c0 0501 	rsb	r5, r0, #1
   1ee26:	dc0b      	bgt.n	1ee40 <lv_draw_mask_fade+0x66>
        for(i = 0; i < len; i++) {
   1ee28:	192a      	adds	r2, r5, r4
   1ee2a:	4293      	cmp	r3, r2
   1ee2c:	dc01      	bgt.n	1ee32 <lv_draw_mask_fade+0x58>
        return LV_DRAW_MASK_RES_CHANGED;
   1ee2e:	2002      	movs	r0, #2
}
   1ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
   1ee32:	7d31      	ldrb	r1, [r6, #20]
   1ee34:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ee38:	f7ff fe0e 	bl	1ea58 <mask_mix>
   1ee3c:	7020      	strb	r0, [r4, #0]
        for(i = 0; i < len; i++) {
   1ee3e:	e7f3      	b.n	1ee28 <lv_draw_mask_fade+0x4e>
    else if(abs_y >= p->cfg.y_bottom) {
   1ee40:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
   1ee44:	4282      	cmp	r2, r0
   1ee46:	db09      	blt.n	1ee5c <lv_draw_mask_fade+0x82>
        for(i = 0; i < len; i++) {
   1ee48:	192a      	adds	r2, r5, r4
   1ee4a:	4293      	cmp	r3, r2
   1ee4c:	ddef      	ble.n	1ee2e <lv_draw_mask_fade+0x54>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
   1ee4e:	7d71      	ldrb	r1, [r6, #21]
   1ee50:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ee54:	f7ff fe00 	bl	1ea58 <mask_mix>
   1ee58:	7020      	strb	r0, [r4, #0]
        for(i = 0; i < len; i++) {
   1ee5a:	e7f5      	b.n	1ee48 <lv_draw_mask_fade+0x6e>
        int16_t opa_diff = p->cfg.opa_bottom - p->cfg.opa_top;
   1ee5c:	7d31      	ldrb	r1, [r6, #20]
   1ee5e:	7d76      	ldrb	r6, [r6, #21]
        lv_opa_t opa_act = (int32_t)((int32_t)(abs_y - p->cfg.y_top) * opa_diff) / y_diff;
   1ee60:	1bd2      	subs	r2, r2, r7
   1ee62:	1a76      	subs	r6, r6, r1
   1ee64:	4372      	muls	r2, r6
        int32_t y_diff = p->cfg.y_bottom - p->cfg.y_top + 1;
   1ee66:	3001      	adds	r0, #1
   1ee68:	1bc0      	subs	r0, r0, r7
        lv_opa_t opa_act = (int32_t)((int32_t)(abs_y - p->cfg.y_top) * opa_diff) / y_diff;
   1ee6a:	fb92 f2f0 	sdiv	r2, r2, r0
        opa_act += p->cfg.opa_top;
   1ee6e:	fa51 f282 	uxtab	r2, r1, r2
   1ee72:	b2d2      	uxtb	r2, r2
        for(i = 0; i < len; i++) {
   1ee74:	1929      	adds	r1, r5, r4
   1ee76:	428b      	cmp	r3, r1
   1ee78:	ddd9      	ble.n	1ee2e <lv_draw_mask_fade+0x54>
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
   1ee7a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ee7e:	4611      	mov	r1, r2
   1ee80:	f7ff fdea 	bl	1ea58 <mask_mix>
   1ee84:	7020      	strb	r0, [r4, #0]
        for(i = 0; i < len; i++) {
   1ee86:	e7f5      	b.n	1ee74 <lv_draw_mask_fade+0x9a>
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
   1ee88:	2001      	movs	r0, #1
   1ee8a:	e7d1      	b.n	1ee30 <lv_draw_mask_fade+0x56>

0001ee8c <lv_draw_mask_radius>:
{
   1ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee90:	4691      	mov	r9, r2
    return memcpy(dst, src, len);
   1ee92:	2208      	movs	r2, #8
   1ee94:	b08d      	sub	sp, #52	; 0x34
   1ee96:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1ee98:	4605      	mov	r5, r0
    bool outer = p->cfg.outer;
   1ee9a:	f897 8012 	ldrb.w	r8, [r7, #18]
{
   1ee9e:	468b      	mov	fp, r1
   1eea0:	461c      	mov	r4, r3
   1eea2:	18b9      	adds	r1, r7, r2
    bool outer = p->cfg.outer;
   1eea4:	f008 0301 	and.w	r3, r8, #1
   1eea8:	a80a      	add	r0, sp, #40	; 0x28
   1eeaa:	9301      	str	r3, [sp, #4]
    int32_t radius = p->cfg.radius;
   1eeac:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
   1eeb0:	f7fa f9aa 	bl	19208 <memcpy>
    if(outer == false) {
   1eeb4:	9b01      	ldr	r3, [sp, #4]
   1eeb6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
   1eeba:	bbc3      	cbnz	r3, 1ef2e <lv_draw_mask_radius+0xa2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   1eebc:	454a      	cmp	r2, r9
   1eebe:	dd01      	ble.n	1eec4 <lv_draw_mask_radius+0x38>
                    return LV_DRAW_MASK_RES_TRANSP;
   1eec0:	2000      	movs	r0, #0
   1eec2:	e037      	b.n	1ef34 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   1eec4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   1eec8:	454b      	cmp	r3, r9
   1eeca:	dbf9      	blt.n	1eec0 <lv_draw_mask_radius+0x34>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   1eecc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   1eed0:	eb01 030a 	add.w	r3, r1, sl
   1eed4:	459b      	cmp	fp, r3
   1eed6:	eba1 060b 	sub.w	r6, r1, fp
   1eeda:	db07      	blt.n	1eeec <lv_draw_mask_radius+0x60>
   1eedc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   1eee0:	eb04 000b 	add.w	r0, r4, fp
   1eee4:	eba3 030a 	sub.w	r3, r3, sl
   1eee8:	4298      	cmp	r0, r3
   1eeea:	dd09      	ble.n	1ef00 <lv_draw_mask_radius+0x74>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   1eeec:	eb02 030a 	add.w	r3, r2, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   1eef0:	4599      	cmp	r9, r3
   1eef2:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   1eef6:	db3a      	blt.n	1ef6e <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   1eef8:	eba0 030a 	sub.w	r3, r0, sl
   1eefc:	4599      	cmp	r9, r3
   1eefe:	dc36      	bgt.n	1ef6e <lv_draw_mask_radius+0xe2>
        if(outer == false) {
   1ef00:	9b01      	ldr	r3, [sp, #4]
   1ef02:	bb23      	cbnz	r3, 1ef4e <lv_draw_mask_radius+0xc2>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
   1ef04:	42b4      	cmp	r4, r6
   1ef06:	dbdb      	blt.n	1eec0 <lv_draw_mask_radius+0x34>
            if(last >= 0) {
   1ef08:	2e00      	cmp	r6, #0
   1ef0a:	db03      	blt.n	1ef14 <lv_draw_mask_radius+0x88>
                _lv_memset_00(&mask_buf[0], last);
   1ef0c:	4631      	mov	r1, r6
   1ef0e:	4628      	mov	r0, r5
   1ef10:	f7ff fd9e 	bl	1ea50 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
   1ef14:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   1ef18:	3101      	adds	r1, #1
   1ef1a:	eba1 000b 	sub.w	r0, r1, fp
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
   1ef1e:	2800      	cmp	r0, #0
   1ef20:	ddce      	ble.n	1eec0 <lv_draw_mask_radius+0x34>
            else if(first < len) {
   1ef22:	42a0      	cmp	r0, r4
   1ef24:	da0e      	bge.n	1ef44 <lv_draw_mask_radius+0xb8>
                _lv_memset_00(&mask_buf[first], len - first);
   1ef26:	1a61      	subs	r1, r4, r1
   1ef28:	4459      	add	r1, fp
                    _lv_memset_00(&mask_buf[first], len_tmp);
   1ef2a:	4428      	add	r0, r5
   1ef2c:	e0b8      	b.n	1f0a0 <lv_draw_mask_radius+0x214>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   1ef2e:	454a      	cmp	r2, r9
   1ef30:	dd03      	ble.n	1ef3a <lv_draw_mask_radius+0xae>
            return LV_DRAW_MASK_RES_FULL_COVER;
   1ef32:	2001      	movs	r0, #1
}
   1ef34:	b00d      	add	sp, #52	; 0x34
   1ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   1ef3a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   1ef3e:	454b      	cmp	r3, r9
   1ef40:	dac4      	bge.n	1eecc <lv_draw_mask_radius+0x40>
   1ef42:	e7f6      	b.n	1ef32 <lv_draw_mask_radius+0xa6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
   1ef44:	b90e      	cbnz	r6, 1ef4a <lv_draw_mask_radius+0xbe>
   1ef46:	42a0      	cmp	r0, r4
   1ef48:	d0f3      	beq.n	1ef32 <lv_draw_mask_radius+0xa6>
    return LV_DRAW_MASK_RES_CHANGED;
   1ef4a:	2002      	movs	r0, #2
   1ef4c:	e7f2      	b.n	1ef34 <lv_draw_mask_radius+0xa8>
            if(first < 0) first = 0;
   1ef4e:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
            if(first <= len) {
   1ef52:	42a0      	cmp	r0, r4
   1ef54:	dcf9      	bgt.n	1ef4a <lv_draw_mask_radius+0xbe>
                int32_t last =  rect.x2 - abs_x - first + 1;
   1ef56:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   1ef5a:	3101      	adds	r1, #1
   1ef5c:	eba1 010b 	sub.w	r1, r1, fp
                if(first + last > len) last = len - first;
   1ef60:	428c      	cmp	r4, r1
                int32_t last =  rect.x2 - abs_x - first + 1;
   1ef62:	bfac      	ite	ge
   1ef64:	1a09      	subge	r1, r1, r0
                if(first + last > len) last = len - first;
   1ef66:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   1ef68:	2900      	cmp	r1, #0
   1ef6a:	dbee      	blt.n	1ef4a <lv_draw_mask_radius+0xbe>
   1ef6c:	e7dd      	b.n	1ef2a <lv_draw_mask_radius+0x9e>
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   1ef6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   1ef72:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
   1ef76:	435b      	muls	r3, r3
    abs_y -= rect.y1;
   1ef78:	eba9 0902 	sub.w	r9, r9, r2
   1ef7c:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ef80:	3001      	adds	r0, #1
   1ef82:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ef86:	ebab 0b01 	sub.w	fp, fp, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ef8a:	1a80      	subs	r0, r0, r2
    if(abs_y < radius || abs_y > h - radius - 1) {
   1ef8c:	45ca      	cmp	sl, r9
    int32_t w = lv_area_get_width(&rect);
   1ef8e:	fa0f fb8b 	sxth.w	fp, fp
    int32_t h = lv_area_get_height(&rect);
   1ef92:	b200      	sxth	r0, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   1ef94:	9302      	str	r3, [sp, #8]
    if(abs_y < radius || abs_y > h - radius - 1) {
   1ef96:	f300 8193 	bgt.w	1f2c0 <lv_draw_mask_radius+0x434>
   1ef9a:	1e43      	subs	r3, r0, #1
   1ef9c:	eba3 030a 	sub.w	r3, r3, sl
   1efa0:	4599      	cmp	r9, r3
   1efa2:	ddd2      	ble.n	1ef4a <lv_draw_mask_radius+0xbe>
            y = radius - (h - abs_y) + 1;
   1efa4:	eba9 0900 	sub.w	r9, r9, r0
            if((y - 1) == p->y_prev) {
   1efa8:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   1efaa:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - (h - abs_y) + 1;
   1efae:	eb09 000a 	add.w	r0, r9, sl
        if(radius <= 256) sqrt_mask = 0x800;
   1efb2:	bfd4      	ite	le
   1efb4:	f44f 6800 	movle.w	r8, #2048	; 0x800
   1efb8:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
   1efbc:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
   1efbe:	f100 0901 	add.w	r9, r0, #1
            if((y - 1) == p->y_prev) {
   1efc2:	d070      	beq.n	1f0a6 <lv_draw_mask_radius+0x21a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   1efc4:	9b02      	ldr	r3, [sp, #8]
   1efc6:	4642      	mov	r2, r8
   1efc8:	fb00 3010 	mls	r0, r0, r0, r3
   1efcc:	a907      	add	r1, sp, #28
   1efce:	f002 fba6 	bl	2171e <_lv_sqrt>
   1efd2:	e06a      	b.n	1f0aa <lv_draw_mask_radius+0x21e>
                x0.i = p->y_prev_x.i;
   1efd4:	69bb      	ldr	r3, [r7, #24]
   1efd6:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   1efd8:	9802      	ldr	r0, [sp, #8]
   1efda:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1efde:	fb03 0013 	mls	r0, r3, r3, r0
   1efe2:	4642      	mov	r2, r8
   1efe4:	a907      	add	r1, sp, #28
   1efe6:	9303      	str	r3, [sp, #12]
   1efe8:	f002 fb99 	bl	2171e <_lv_sqrt>
            p->y_prev = y - 1;
   1efec:	9b03      	ldr	r3, [sp, #12]
   1efee:	617b      	str	r3, [r7, #20]
            p->y_prev_x.i = x1.i;
   1eff0:	9b07      	ldr	r3, [sp, #28]
            p->y_prev_x.i = x0.i;
   1eff2:	61bb      	str	r3, [r7, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
   1eff4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1eff8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1effc:	3b01      	subs	r3, #1
   1effe:	4299      	cmp	r1, r3
   1f000:	d107      	bne.n	1f012 <lv_draw_mask_radius+0x186>
   1f002:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1f006:	b923      	cbnz	r3, 1f012 <lv_draw_mask_radius+0x186>
            x1.f = 0xFF;
   1f008:	23ff      	movs	r3, #255	; 0xff
            x1.i--;
   1f00a:	f8ad 101c 	strh.w	r1, [sp, #28]
            x1.f = 0xFF;
   1f00e:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(x0.i == x1.i) {
   1f012:	eb06 070b 	add.w	r7, r6, fp
   1f016:	ea6f 0b01 	mvn.w	fp, r1
   1f01a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1f01e:	44d3      	add	fp, sl
   1f020:	eba7 030b 	sub.w	r3, r7, fp
   1f024:	4288      	cmp	r0, r1
   1f026:	eb06 0a0b 	add.w	sl, r6, fp
   1f02a:	9303      	str	r3, [sp, #12]
   1f02c:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   1f030:	d152      	bne.n	1f0d8 <lv_draw_mask_radius+0x24c>
            lv_opa_t m = (x0.f + x1.f) >> 1;
   1f032:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1f036:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(outer) m = 255 - m;
   1f03a:	9b01      	ldr	r3, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
   1f03c:	440a      	add	r2, r1
   1f03e:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
   1f042:	b10b      	cbz	r3, 1f048 <lv_draw_mask_radius+0x1bc>
   1f044:	43d2      	mvns	r2, r2
   1f046:	b2d2      	uxtb	r2, r2
            if(kl >= 0 && kl < len) {
   1f048:	f1ba 0f00 	cmp.w	sl, #0
   1f04c:	db08      	blt.n	1f060 <lv_draw_mask_radius+0x1d4>
   1f04e:	4554      	cmp	r4, sl
   1f050:	dd06      	ble.n	1f060 <lv_draw_mask_radius+0x1d4>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
   1f052:	f815 000a 	ldrb.w	r0, [r5, sl]
   1f056:	4611      	mov	r1, r2
   1f058:	f7ff fcfe 	bl	1ea58 <mask_mix>
   1f05c:	f805 000a 	strb.w	r0, [r5, sl]
            if(kr >= 0 && kr < len) {
   1f060:	2e00      	cmp	r6, #0
   1f062:	db06      	blt.n	1f072 <lv_draw_mask_radius+0x1e6>
   1f064:	42a6      	cmp	r6, r4
   1f066:	da04      	bge.n	1f072 <lv_draw_mask_radius+0x1e6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
   1f068:	5da8      	ldrb	r0, [r5, r6]
   1f06a:	4611      	mov	r1, r2
   1f06c:	f7ff fcf4 	bl	1ea58 <mask_mix>
   1f070:	55a8      	strb	r0, [r5, r6]
            if(outer == false) {
   1f072:	9b01      	ldr	r3, [sp, #4]
   1f074:	bb23      	cbnz	r3, 1f0c0 <lv_draw_mask_radius+0x234>
                if(kl > len)  {
   1f076:	4554      	cmp	r4, sl
   1f078:	f6ff af22 	blt.w	1eec0 <lv_draw_mask_radius+0x34>
                if(kl >= 0) {
   1f07c:	f1ba 0f00 	cmp.w	sl, #0
   1f080:	db03      	blt.n	1f08a <lv_draw_mask_radius+0x1fe>
                    _lv_memset_00(&mask_buf[0], kl);
   1f082:	4651      	mov	r1, sl
   1f084:	4628      	mov	r0, r5
   1f086:	f7ff fce3 	bl	1ea50 <_lv_memset_00>
                if(kr < 0) {
   1f08a:	9b03      	ldr	r3, [sp, #12]
   1f08c:	2b00      	cmp	r3, #0
   1f08e:	f6ff af17 	blt.w	1eec0 <lv_draw_mask_radius+0x34>
                if(kr <= len) {
   1f092:	42a3      	cmp	r3, r4
   1f094:	f73f af59 	bgt.w	1ef4a <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
   1f098:	442b      	add	r3, r5
   1f09a:	4618      	mov	r0, r3
   1f09c:	1be1      	subs	r1, r4, r7
   1f09e:	4459      	add	r1, fp
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   1f0a0:	f7ff fcd6 	bl	1ea50 <_lv_memset_00>
   1f0a4:	e751      	b.n	1ef4a <lv_draw_mask_radius+0xbe>
                x1.i = p->y_prev_x.i;
   1f0a6:	69bb      	ldr	r3, [r7, #24]
   1f0a8:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   1f0aa:	9b02      	ldr	r3, [sp, #8]
   1f0ac:	4642      	mov	r2, r8
   1f0ae:	fb09 3019 	mls	r0, r9, r9, r3
   1f0b2:	a906      	add	r1, sp, #24
   1f0b4:	f002 fb33 	bl	2171e <_lv_sqrt>
            p->y_prev_x.i = x0.i;
   1f0b8:	9b06      	ldr	r3, [sp, #24]
            p->y_prev = y;
   1f0ba:	f8c7 9014 	str.w	r9, [r7, #20]
            p->y_prev_x.i = x0.i;
   1f0be:	e798      	b.n	1eff2 <lv_draw_mask_radius+0x166>
                kl++;
   1f0c0:	f10a 0001 	add.w	r0, sl, #1
   1f0c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   1f0c8:	42a6      	cmp	r6, r4
                int32_t len_tmp = kr - first;
   1f0ca:	bfd4      	ite	le
   1f0cc:	1a31      	suble	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   1f0ce:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   1f0d0:	42a0      	cmp	r0, r4
   1f0d2:	f6bf af3a 	bge.w	1ef4a <lv_draw_mask_radius+0xbe>
   1f0d6:	e747      	b.n	1ef68 <lv_draw_mask_radius+0xdc>
            if(outer) {
   1f0d8:	9b01      	ldr	r3, [sp, #4]
   1f0da:	b173      	cbz	r3, 1f0fa <lv_draw_mask_radius+0x26e>
                int32_t first = kl + 1;
   1f0dc:	f10a 0001 	add.w	r0, sl, #1
                if(first < 0) first = 0;
   1f0e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   1f0e4:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   1f0e6:	bfac      	ite	ge
   1f0e8:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   1f0ea:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   1f0ec:	42a0      	cmp	r0, r4
   1f0ee:	da04      	bge.n	1f0fa <lv_draw_mask_radius+0x26e>
   1f0f0:	2900      	cmp	r1, #0
   1f0f2:	db02      	blt.n	1f0fa <lv_draw_mask_radius+0x26e>
                    _lv_memset_00(&mask_buf[first], len_tmp);
   1f0f4:	4428      	add	r0, r5
   1f0f6:	f7ff fcab 	bl	1ea50 <_lv_memset_00>
            uint32_t i = x0.i + 1;
   1f0fa:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
   1f0fe:	9b02      	ldr	r3, [sp, #8]
   1f100:	a908      	add	r1, sp, #32
   1f102:	4642      	mov	r2, r8
   1f104:	fb07 3017 	mls	r0, r7, r7, r3
   1f108:	f002 fb09 	bl	2171e <_lv_sqrt>
            if(y_prev.f == 0) {
   1f10c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            uint32_t i = x0.i + 1;
   1f110:	f107 0b01 	add.w	fp, r7, #1
            if(y_prev.f == 0) {
   1f114:	b939      	cbnz	r1, 1f126 <lv_draw_mask_radius+0x29a>
                y_prev.i--;
   1f116:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1f11a:	3901      	subs	r1, #1
   1f11c:	f8ad 1020 	strh.w	r1, [sp, #32]
                y_prev.f = 0xFF;
   1f120:	21ff      	movs	r1, #255	; 0xff
   1f122:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
   1f126:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1f12a:	4549      	cmp	r1, r9
   1f12c:	db31      	blt.n	1f192 <lv_draw_mask_radius+0x306>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
   1f12e:	9b02      	ldr	r3, [sp, #8]
   1f130:	4642      	mov	r2, r8
   1f132:	fb0b 301b 	mls	r0, fp, fp, r3
   1f136:	a909      	add	r1, sp, #36	; 0x24
   1f138:	f002 faf1 	bl	2171e <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   1f13c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1f140:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
   1f144:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   1f148:	f1c9 02ff 	rsb	r2, r9, #255	; 0xff
   1f14c:	434a      	muls	r2, r1
                if(outer) m = 255 - m;
   1f14e:	9b01      	ldr	r3, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   1f150:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   1f154:	b90b      	cbnz	r3, 1f15a <lv_draw_mask_radius+0x2ce>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   1f156:	43d2      	mvns	r2, r2
   1f158:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   1f15a:	f1ba 0f00 	cmp.w	sl, #0
   1f15e:	db08      	blt.n	1f172 <lv_draw_mask_radius+0x2e6>
   1f160:	4554      	cmp	r4, sl
   1f162:	dd06      	ble.n	1f172 <lv_draw_mask_radius+0x2e6>
   1f164:	f815 000a 	ldrb.w	r0, [r5, sl]
   1f168:	4611      	mov	r1, r2
   1f16a:	f7ff fc75 	bl	1ea58 <mask_mix>
   1f16e:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   1f172:	2e00      	cmp	r6, #0
   1f174:	db06      	blt.n	1f184 <lv_draw_mask_radius+0x2f8>
   1f176:	42b4      	cmp	r4, r6
   1f178:	dd04      	ble.n	1f184 <lv_draw_mask_radius+0x2f8>
   1f17a:	5da8      	ldrb	r0, [r5, r6]
   1f17c:	4611      	mov	r1, r2
   1f17e:	f7ff fc6b 	bl	1ea58 <mask_mix>
   1f182:	55a8      	strb	r0, [r5, r6]
                i++;
   1f184:	9e03      	ldr	r6, [sp, #12]
                kl--;
   1f186:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
                y_prev.f = y_next.f;
   1f18a:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                i++;
   1f18e:	f107 0b02 	add.w	fp, r7, #2
            for(; i <= x1.i; i++) {
   1f192:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   1f196:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            for(; i <= x1.i; i++) {
   1f19a:	9303      	str	r3, [sp, #12]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   1f19c:	0113      	lsls	r3, r2, #4
   1f19e:	9304      	str	r3, [sp, #16]
   1f1a0:	46b1      	mov	r9, r6
   1f1a2:	465b      	mov	r3, fp
   1f1a4:	4657      	mov	r7, sl
   1f1a6:	2000      	movs	r0, #0
   1f1a8:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
   1f1ac:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1f1b0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
            for(; i <= x1.i; i++) {
   1f1b4:	9903      	ldr	r1, [sp, #12]
   1f1b6:	4299      	cmp	r1, r3
   1f1b8:	d24a      	bcs.n	1f250 <lv_draw_mask_radius+0x3c4>
   1f1ba:	460f      	mov	r7, r1
   1f1bc:	3701      	adds	r7, #1
   1f1be:	45bb      	cmp	fp, r7
   1f1c0:	eba7 010b 	sub.w	r1, r7, fp
   1f1c4:	ebab 0e07 	sub.w	lr, fp, r7
   1f1c8:	bf84      	itt	hi
   1f1ca:	2100      	movhi	r1, #0
   1f1cc:	f04f 0e00 	movhi.w	lr, #0
   1f1d0:	440e      	add	r6, r1
   1f1d2:	eb0e 030a 	add.w	r3, lr, sl
   1f1d6:	b128      	cbz	r0, 1f1e4 <lv_draw_mask_radius+0x358>
   1f1d8:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
   1f1dc:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
   1f1e0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(y_prev.f) {
   1f1e4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1f1e8:	b1e2      	cbz	r2, 1f224 <lv_draw_mask_radius+0x398>
                m = (y_prev.f * x1.f) >> 9;
   1f1ea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1f1ee:	434a      	muls	r2, r1
                if(outer) m = 255 - m;
   1f1f0:	9901      	ldr	r1, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
   1f1f2:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   1f1f6:	b109      	cbz	r1, 1f1fc <lv_draw_mask_radius+0x370>
   1f1f8:	43d2      	mvns	r2, r2
   1f1fa:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   1f1fc:	2b00      	cmp	r3, #0
   1f1fe:	db06      	blt.n	1f20e <lv_draw_mask_radius+0x382>
   1f200:	429c      	cmp	r4, r3
   1f202:	dd04      	ble.n	1f20e <lv_draw_mask_radius+0x382>
   1f204:	5ce8      	ldrb	r0, [r5, r3]
   1f206:	4611      	mov	r1, r2
   1f208:	f7ff fc26 	bl	1ea58 <mask_mix>
   1f20c:	54e8      	strb	r0, [r5, r3]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   1f20e:	2e00      	cmp	r6, #0
   1f210:	db06      	blt.n	1f220 <lv_draw_mask_radius+0x394>
   1f212:	42b4      	cmp	r4, r6
   1f214:	dd04      	ble.n	1f220 <lv_draw_mask_radius+0x394>
   1f216:	5da8      	ldrb	r0, [r5, r6]
   1f218:	4611      	mov	r1, r2
   1f21a:	f7ff fc1d 	bl	1ea58 <mask_mix>
   1f21e:	55a8      	strb	r0, [r5, r6]
                kl--;
   1f220:	3b01      	subs	r3, #1
                kr++;
   1f222:	3601      	adds	r6, #1
            if(outer == 0) {
   1f224:	9a01      	ldr	r2, [sp, #4]
   1f226:	2a00      	cmp	r2, #0
   1f228:	f47f ae8f 	bne.w	1ef4a <lv_draw_mask_radius+0xbe>
                kl++;
   1f22c:	1c59      	adds	r1, r3, #1
                if(kl > len) {
   1f22e:	428c      	cmp	r4, r1
   1f230:	f6ff ae46 	blt.w	1eec0 <lv_draw_mask_radius+0x34>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
   1f234:	2900      	cmp	r1, #0
   1f236:	db02      	blt.n	1f23e <lv_draw_mask_radius+0x3b2>
   1f238:	4628      	mov	r0, r5
   1f23a:	f7ff fc09 	bl	1ea50 <_lv_memset_00>
                if(kr < 0) {
   1f23e:	2e00      	cmp	r6, #0
   1f240:	f6ff ae3e 	blt.w	1eec0 <lv_draw_mask_radius+0x34>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   1f244:	42b4      	cmp	r4, r6
   1f246:	f77f ae80 	ble.w	1ef4a <lv_draw_mask_radius+0xbe>
   1f24a:	1ba1      	subs	r1, r4, r6
   1f24c:	19a8      	adds	r0, r5, r6
   1f24e:	e727      	b.n	1f0a0 <lv_draw_mask_radius+0x214>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   1f250:	9904      	ldr	r1, [sp, #16]
   1f252:	f3cc 120f 	ubfx	r2, ip, #4, #16
   1f256:	1851      	adds	r1, r2, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   1f258:	9a02      	ldr	r2, [sp, #8]
    uint32_t raw2 = raw * raw;
   1f25a:	fb01 f001 	mul.w	r0, r1, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   1f25e:	fb03 2213 	mls	r2, r3, r3, r2

    int32_t d = x - raw2;
   1f262:	ebc0 2202 	rsb	r2, r0, r2, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
   1f266:	0048      	lsls	r0, r1, #1
   1f268:	fb92 f2f0 	sdiv	r2, r2, r0
   1f26c:	440a      	add	r2, r1

    q->i = d >> 4;
   1f26e:	f3c2 180f 	ubfx	r8, r2, #4, #16
    q->f = (d & 0xF) << 4;
   1f272:	0112      	lsls	r2, r2, #4
   1f274:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                if(outer) m = 255 - m;
   1f278:	9801      	ldr	r0, [sp, #4]
                m = (y_prev.f + y_next.f) >> 1;
   1f27a:	eb0c 0102 	add.w	r1, ip, r2
   1f27e:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
   1f282:	b108      	cbz	r0, 1f288 <lv_draw_mask_radius+0x3fc>
   1f284:	43c9      	mvns	r1, r1
   1f286:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   1f288:	2f00      	cmp	r7, #0
   1f28a:	db07      	blt.n	1f29c <lv_draw_mask_radius+0x410>
   1f28c:	42bc      	cmp	r4, r7
   1f28e:	dd05      	ble.n	1f29c <lv_draw_mask_radius+0x410>
   1f290:	5de8      	ldrb	r0, [r5, r7]
   1f292:	9105      	str	r1, [sp, #20]
   1f294:	f7ff fbe0 	bl	1ea58 <mask_mix>
   1f298:	9905      	ldr	r1, [sp, #20]
   1f29a:	55e8      	strb	r0, [r5, r7]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   1f29c:	f1b9 0f00 	cmp.w	r9, #0
   1f2a0:	db07      	blt.n	1f2b2 <lv_draw_mask_radius+0x426>
   1f2a2:	454c      	cmp	r4, r9
   1f2a4:	dd05      	ble.n	1f2b2 <lv_draw_mask_radius+0x426>
   1f2a6:	f815 0009 	ldrb.w	r0, [r5, r9]
   1f2aa:	f7ff fbd5 	bl	1ea58 <mask_mix>
   1f2ae:	f805 0009 	strb.w	r0, [r5, r9]
                y_prev.f = y_next.f;
   1f2b2:	4694      	mov	ip, r2
            for(; i <= x1.i; i++) {
   1f2b4:	2001      	movs	r0, #1
                kl--;
   1f2b6:	3f01      	subs	r7, #1
                kr++;
   1f2b8:	f109 0901 	add.w	r9, r9, #1
            for(; i <= x1.i; i++) {
   1f2bc:	3301      	adds	r3, #1
   1f2be:	e779      	b.n	1f1b4 <lv_draw_mask_radius+0x328>
            if(y == p->y_prev) {
   1f2c0:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   1f2c2:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - abs_y;
   1f2c6:	ebaa 0909 	sub.w	r9, sl, r9
        if(radius <= 256) sqrt_mask = 0x800;
   1f2ca:	bfd4      	ite	le
   1f2cc:	f44f 6800 	movle.w	r8, #2048	; 0x800
   1f2d0:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if(y == p->y_prev) {
   1f2d4:	454b      	cmp	r3, r9
   1f2d6:	f43f ae7d 	beq.w	1efd4 <lv_draw_mask_radius+0x148>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   1f2da:	9b02      	ldr	r3, [sp, #8]
   1f2dc:	4642      	mov	r2, r8
   1f2de:	fb09 3019 	mls	r0, r9, r9, r3
   1f2e2:	a906      	add	r1, sp, #24
   1f2e4:	f002 fa1b 	bl	2171e <_lv_sqrt>
   1f2e8:	e676      	b.n	1efd8 <lv_draw_mask_radius+0x14c>

0001f2ea <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
   1f2ea:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   1f2ec:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   1f2f0:	fb04 f301 	mul.w	r3, r4, r1
    if(i <= min) return dsc->bg_color;
   1f2f4:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   1f2f8:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
   1f2fc:	dc01      	bgt.n	1f302 <grad_get+0x18>
   1f2fe:	6840      	ldr	r0, [r0, #4]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
   1f300:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
   1f302:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   1f306:	fb01 f603 	mul.w	r6, r1, r3
    if(i >= max) return dsc->bg_grad_color;
   1f30a:	ebb2 2f26 	cmp.w	r2, r6, asr #8
   1f30e:	db01      	blt.n	1f314 <grad_get+0x2a>
   1f310:	6880      	ldr	r0, [r0, #8]
   1f312:	e7f5      	b.n	1f300 <grad_get+0x16>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
   1f314:	1b1b      	subs	r3, r3, r4
    d = (s * d) >> 8;
   1f316:	434b      	muls	r3, r1
    i -= min;
   1f318:	1b52      	subs	r2, r2, r5
    lv_opa_t mix = (i * 255) / d;
   1f31a:	b212      	sxth	r2, r2
   1f31c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
   1f320:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
   1f322:	fb92 f3f3 	sdiv	r3, r2, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1f326:	7981      	ldrb	r1, [r0, #6]
   1f328:	b2db      	uxtb	r3, r3
   1f32a:	f1c3 05ff 	rsb	r5, r3, #255	; 0xff
   1f32e:	4369      	muls	r1, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f330:	7946      	ldrb	r6, [r0, #5]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1f332:	7a82      	ldrb	r2, [r0, #10]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f334:	436e      	muls	r6, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1f336:	f248 0481 	movw	r4, #32897	; 0x8081
   1f33a:	fb03 1202 	mla	r2, r3, r2, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f33e:	7a41      	ldrb	r1, [r0, #9]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1f340:	4362      	muls	r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f342:	fb03 6101 	mla	r1, r3, r1, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1f346:	7a06      	ldrb	r6, [r0, #8]
   1f348:	7900      	ldrb	r0, [r0, #4]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f34a:	4361      	muls	r1, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   1f34c:	4345      	muls	r5, r0
   1f34e:	2000      	movs	r0, #0
   1f350:	fb03 5506 	mla	r5, r3, r6, r5
   1f354:	436c      	muls	r4, r5
   1f356:	0de4      	lsrs	r4, r4, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   1f358:	f3c1 51c7 	ubfx	r1, r1, #23, #8
   1f35c:	f364 0007 	bfi	r0, r4, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   1f360:	f3c2 52c7 	ubfx	r2, r2, #23, #8
    return ret;
   1f364:	f361 200f 	bfi	r0, r1, #8, #8
   1f368:	f362 4017 	bfi	r0, r2, #16, #8
   1f36c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   1f370:	e7c6      	b.n	1f300 <grad_get+0x16>

0001f372 <lv_area_copy>:
    return memcpy(dst, src, len);
   1f372:	2208      	movs	r2, #8
   1f374:	f7f9 bf48 	b.w	19208 <memcpy>

0001f378 <shadow_blur_corner>:

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    int32_t s_left = sw >> 1;
   1f378:	460b      	mov	r3, r1
{
   1f37a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f37e:	4615      	mov	r5, r2
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
   1f380:	0042      	lsls	r2, r0, #1
{
   1f382:	b089      	sub	sp, #36	; 0x24
    int32_t s_left = sw >> 1;
   1f384:	ea4f 0961 	mov.w	r9, r1, asr #1
    if((sw & 1) == 0) s_left--;
   1f388:	07db      	lsls	r3, r3, #31
{
   1f38a:	4604      	mov	r4, r0
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
   1f38c:	4610      	mov	r0, r2
    int32_t s_left = sw >> 1;
   1f38e:	464f      	mov	r7, r9
{
   1f390:	9101      	str	r1, [sp, #4]
    if((sw & 1) == 0) s_left--;
   1f392:	bf58      	it	pl
   1f394:	f109 37ff 	addpl.w	r7, r9, #4294967295	; 0xffffffff
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
   1f398:	9202      	str	r2, [sp, #8]
   1f39a:	f7f3 fbb9 	bl	12b10 <_lv_mem_buf_get>
   1f39e:	f06f 0801 	mvn.w	r8, #1
   1f3a2:	4601      	mov	r1, r0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
   1f3a4:	43f8      	mvns	r0, r7
    for(y = 0; y < size; y++) {
   1f3a6:	46aa      	mov	sl, r5
   1f3a8:	f04f 0b00 	mov.w	fp, #0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
   1f3ac:	9a02      	ldr	r2, [sp, #8]
   1f3ae:	fb07 8808 	mla	r8, r7, r8, r8
   1f3b2:	1e93      	subs	r3, r2, #2
   1f3b4:	9302      	str	r3, [sp, #8]
   1f3b6:	1c7b      	adds	r3, r7, #1
   1f3b8:	9306      	str	r3, [sp, #24]
   1f3ba:	44a8      	add	r8, r5
   1f3bc:	eb05 0349 	add.w	r3, r5, r9, lsl #1
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
   1f3c0:	9003      	str	r0, [sp, #12]
    for(y = 0; y < size; y++) {
   1f3c2:	455c      	cmp	r4, fp
   1f3c4:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   1f3c8:	dc25      	bgt.n	1f416 <shadow_blur_corner+0x9e>
        sh_ups_tmp_buf += size;
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
   1f3ca:	882b      	ldrh	r3, [r5, #0]
   1f3cc:	9e01      	ldr	r6, [sp, #4]
    for(i = 1; i < (uint32_t)size * size; i++) {
   1f3ce:	f04f 0e01 	mov.w	lr, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
   1f3d2:	fb93 f3f6 	sdiv	r3, r3, r6
   1f3d6:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
   1f3d8:	462b      	mov	r3, r5
   1f3da:	fb04 f804 	mul.w	r8, r4, r4
   1f3de:	45f0      	cmp	r8, lr
   1f3e0:	d845      	bhi.n	1f46e <shadow_blur_corner+0xf6>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    }

    for(x = 0; x < size; x++) {
   1f3e2:	f04f 0c00 	mov.w	ip, #0
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
   1f3e6:	fb00 f304 	mul.w	r3, r0, r4
   1f3ea:	0060      	lsls	r0, r4, #1
   1f3ec:	9004      	str	r0, [sp, #16]
   1f3ee:	fb04 f009 	mul.w	r0, r4, r9
   1f3f2:	fb07 4704 	mla	r7, r7, r4, r4
   1f3f6:	4240      	negs	r0, r0
   1f3f8:	eb05 0e47 	add.w	lr, r5, r7, lsl #1
   1f3fc:	1bc7      	subs	r7, r0, r7
   1f3fe:	0078      	lsls	r0, r7, #1
   1f400:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1f404:	9005      	str	r0, [sp, #20]
    for(x = 0; x < size; x++) {
   1f406:	4564      	cmp	r4, ip
   1f408:	dc41      	bgt.n	1f48e <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
   1f40a:	4608      	mov	r0, r1
}
   1f40c:	b009      	add	sp, #36	; 0x24
   1f40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_mem_buf_release(sh_ups_blur_buf);
   1f412:	f7f3 bbdf 	b.w	12bd4 <_lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
   1f416:	9e02      	ldr	r6, [sp, #8]
   1f418:	f83a c006 	ldrh.w	ip, [sl, r6]
   1f41c:	9e01      	ldr	r6, [sp, #4]
   1f41e:	fb06 fc0c 	mul.w	ip, r6, ip
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
   1f422:	eb00 0e09 	add.w	lr, r0, r9
   1f426:	4574      	cmp	r4, lr
            uint32_t right_val = 0;
   1f428:	bfd8      	it	le
   1f42a:	f04f 0e00 	movle.w	lr, #0
            sh_ups_blur_buf[x] = v;
   1f42e:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
   1f432:	9e03      	ldr	r6, [sp, #12]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
   1f434:	bfc8      	it	gt
   1f436:	f833 e010 	ldrhgt.w	lr, [r3, r0, lsl #1]
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
   1f43a:	42c6      	cmn	r6, r0
            v -= right_val;
   1f43c:	ebac 0c0e 	sub.w	ip, ip, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
   1f440:	bf4c      	ite	mi
   1f442:	f8ba e000 	ldrhmi.w	lr, [sl]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
   1f446:	f838 e010 	ldrhpl.w	lr, [r8, r0, lsl #1]
        for(x = size - 1; x >= 0; x--) {
   1f44a:	3801      	subs	r0, #1
            v += left_val;
   1f44c:	44f4      	add	ip, lr
        for(x = size - 1; x >= 0; x--) {
   1f44e:	d2e8      	bcs.n	1f422 <shadow_blur_corner+0xaa>
   1f450:	4650      	mov	r0, sl
   1f452:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1f456:	9307      	str	r3, [sp, #28]
   1f458:	f7f9 fed6 	bl	19208 <memcpy>
        sh_ups_tmp_buf += size;
   1f45c:	9a05      	ldr	r2, [sp, #20]
   1f45e:	9b07      	ldr	r3, [sp, #28]
   1f460:	9904      	ldr	r1, [sp, #16]
   1f462:	4492      	add	sl, r2
    for(y = 0; y < size; y++) {
   1f464:	f10b 0b01 	add.w	fp, fp, #1
   1f468:	4490      	add	r8, r2
   1f46a:	4413      	add	r3, r2
   1f46c:	e7a9      	b.n	1f3c2 <shadow_blur_corner+0x4a>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
   1f46e:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   1f472:	f833 ab02 	ldrh.w	sl, [r3], #2
    for(i = 1; i < (uint32_t)size * size; i++) {
   1f476:	f10e 0e01 	add.w	lr, lr, #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
   1f47a:	45d4      	cmp	ip, sl
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
   1f47c:	bf1e      	ittt	ne
   1f47e:	9e01      	ldrne	r6, [sp, #4]
   1f480:	fb9c fcf6 	sdivne	ip, ip, r6
   1f484:	fa1f fa8c 	uxthne.w	sl, ip
   1f488:	f8a3 a000 	strh.w	sl, [r3]
    for(i = 1; i < (uint32_t)size * size; i++) {
   1f48c:	e7a7      	b.n	1f3de <shadow_blur_corner+0x66>
        sh_ups_tmp_buf = &sh_ups_buf[x];
   1f48e:	eb05 084c 	add.w	r8, r5, ip, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
   1f492:	46c2      	mov	sl, r8
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
   1f494:	2700      	movs	r7, #0
        int32_t v = sh_ups_tmp_buf[0] * sw;
   1f496:	9e01      	ldr	r6, [sp, #4]
   1f498:	f835 001c 	ldrh.w	r0, [r5, ip, lsl #1]
   1f49c:	4370      	muls	r0, r6
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
   1f49e:	9e05      	ldr	r6, [sp, #20]
   1f4a0:	4476      	add	r6, lr
        int32_t v = sh_ups_tmp_buf[0] * sw;
   1f4a2:	e9cd 6e02 	strd	r6, lr, [sp, #8]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
   1f4a6:	2800      	cmp	r0, #0
   1f4a8:	bfb4      	ite	lt
   1f4aa:	f04f 0b00 	movlt.w	fp, #0
   1f4ae:	f3c0 1b8f 	ubfxge	fp, r0, #6, #16
   1f4b2:	f821 b017 	strh.w	fp, [r1, r7, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
   1f4b6:	eba7 0b09 	sub.w	fp, r7, r9
   1f4ba:	f1bb 0f00 	cmp.w	fp, #0
            else top_val = sh_ups_buf[(y - s_right) * size + x];
   1f4be:	bfca      	itet	gt
   1f4c0:	9e02      	ldrgt	r6, [sp, #8]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
   1f4c2:	f8ba b000 	ldrhle.w	fp, [sl]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
   1f4c6:	f8b6 b000 	ldrhgt.w	fp, [r6]
            v -= top_val;
   1f4ca:	9e03      	ldr	r6, [sp, #12]
   1f4cc:	eba0 0b0b 	sub.w	fp, r0, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
   1f4d0:	9806      	ldr	r0, [sp, #24]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
   1f4d2:	4492      	add	sl, r2
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
   1f4d4:	1838      	adds	r0, r7, r0
   1f4d6:	4284      	cmp	r4, r0
   1f4d8:	bfca      	itet	gt
   1f4da:	9803      	ldrgt	r0, [sp, #12]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
   1f4dc:	8818      	ldrhle	r0, [r3, #0]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
   1f4de:	8800      	ldrhgt	r0, [r0, #0]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
   1f4e0:	3701      	adds	r7, #1
            v += bottom_val;
   1f4e2:	4458      	add	r0, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
   1f4e4:	46b3      	mov	fp, r6
   1f4e6:	9e04      	ldr	r6, [sp, #16]
   1f4e8:	42bc      	cmp	r4, r7
   1f4ea:	44b3      	add	fp, r6
   1f4ec:	9e02      	ldr	r6, [sp, #8]
   1f4ee:	f8cd b00c 	str.w	fp, [sp, #12]
   1f4f2:	46b3      	mov	fp, r6
   1f4f4:	9e04      	ldr	r6, [sp, #16]
   1f4f6:	44b3      	add	fp, r6
   1f4f8:	465e      	mov	r6, fp
   1f4fa:	f8cd b008 	str.w	fp, [sp, #8]
   1f4fe:	dcd2      	bgt.n	1f4a6 <shadow_blur_corner+0x12e>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
   1f500:	2000      	movs	r0, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
   1f502:	f831 7010 	ldrh.w	r7, [r1, r0, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
   1f506:	3001      	adds	r0, #1
   1f508:	4284      	cmp	r4, r0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
   1f50a:	f8a8 7000 	strh.w	r7, [r8]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
   1f50e:	4490      	add	r8, r2
   1f510:	dcf7      	bgt.n	1f502 <shadow_blur_corner+0x18a>
    for(x = 0; x < size; x++) {
   1f512:	f10c 0c01 	add.w	ip, ip, #1
   1f516:	3302      	adds	r3, #2
   1f518:	f10e 0e02 	add.w	lr, lr, #2
   1f51c:	e773      	b.n	1f406 <shadow_blur_corner+0x8e>

0001f51e <lv_draw_rect>:
{
   1f51e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f522:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1f526:	4614      	mov	r4, r2
   1f528:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1f52c:	468a      	mov	sl, r1
   1f52e:	1c59      	adds	r1, r3, #1
   1f530:	1a89      	subs	r1, r1, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   1f532:	b209      	sxth	r1, r1
{
   1f534:	b0ad      	sub	sp, #180	; 0xb4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   1f536:	2900      	cmp	r1, #0
{
   1f538:	9005      	str	r0, [sp, #20]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   1f53a:	f340 87ba 	ble.w	204b2 <lv_draw_rect+0xf94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1f53e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   1f542:	f9b0 0000 	ldrsh.w	r0, [r0]
   1f546:	1c4d      	adds	r5, r1, #1
   1f548:	1a2d      	subs	r5, r5, r0
   1f54a:	b22d      	sxth	r5, r5
   1f54c:	2d00      	cmp	r5, #0
   1f54e:	f340 87b0 	ble.w	204b2 <lv_draw_rect+0xf94>
    if(dsc->shadow_width == 0) return;
   1f552:	f9b4 6030 	ldrsh.w	r6, [r4, #48]	; 0x30
   1f556:	2e00      	cmp	r6, #0
   1f558:	f000 8580 	beq.w	2005c <lv_draw_rect+0xb3e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
   1f55c:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   1f560:	2d02      	cmp	r5, #2
   1f562:	950a      	str	r5, [sp, #40]	; 0x28
   1f564:	f240 857a 	bls.w	2005c <lv_draw_rect+0xb3e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
   1f568:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1f56a:	f9b4 5034 	ldrsh.w	r5, [r4, #52]	; 0x34
   1f56e:	2f01      	cmp	r7, #1
   1f570:	f9b4 c036 	ldrsh.w	ip, [r4, #54]	; 0x36
   1f574:	d104      	bne.n	1f580 <lv_draw_rect+0x62>
   1f576:	b91d      	cbnz	r5, 1f580 <lv_draw_rect+0x62>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
   1f578:	f1bc 0f00 	cmp.w	ip, #0
   1f57c:	f340 856e 	ble.w	2005c <lv_draw_rect+0xb3e>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
   1f580:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
   1f584:	eba7 0e0c 	sub.w	lr, r7, ip
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
   1f588:	4467      	add	r7, ip
   1f58a:	4439      	add	r1, r7
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
   1f58c:	eba5 070c 	sub.w	r7, r5, ip
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
   1f590:	4465      	add	r5, ip
   1f592:	441d      	add	r5, r3
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
   1f594:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
   1f598:	443a      	add	r2, r7
   1f59a:	ea6f 0763 	mvn.w	r7, r3, asr #1
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
   1f59e:	105b      	asrs	r3, r3, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
   1f5a0:	b22d      	sxth	r5, r5
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
   1f5a2:	b209      	sxth	r1, r1
   1f5a4:	3301      	adds	r3, #1
   1f5a6:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
   1f5aa:	fa01 f183 	sxtah	r1, r1, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
   1f5ae:	fa05 f383 	sxtah	r3, r5, r3
   1f5b2:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   1f5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
   1f5b8:	4470      	add	r0, lr
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   1f5ba:	2bfe      	cmp	r3, #254	; 0xfe
   1f5bc:	bf28      	it	cs
   1f5be:	23ff      	movcs	r3, #255	; 0xff
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
   1f5c0:	b200      	sxth	r0, r0
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
   1f5c2:	b212      	sxth	r2, r2
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
   1f5c4:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
   1f5c8:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
   1f5cc:	4438      	add	r0, r7
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
   1f5ce:	443a      	add	r2, r7
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
   1f5d0:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
   1f5d4:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
   1f5d8:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   1f5dc:	930a      	str	r3, [sp, #40]	; 0x28
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
   1f5de:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1f5e2:	f7f0 fd2f 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1f5e6:	f001 fc91 	bl	20f0c <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
   1f5ea:	4652      	mov	r2, sl
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1f5ec:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
   1f5ee:	a914      	add	r1, sp, #80	; 0x50
   1f5f0:	a816      	add	r0, sp, #88	; 0x58
   1f5f2:	f001 fd07 	bl	21004 <_lv_area_intersect>
    if(is_common == false) return;
   1f5f6:	2800      	cmp	r0, #0
   1f5f8:	f000 8530 	beq.w	2005c <lv_draw_rect+0xb3e>
    draw_area.x1 -= disp_area->x1;
   1f5fc:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
   1f600:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
   1f604:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
    draw_area.x1 -= disp_area->x1;
   1f608:	1bdb      	subs	r3, r3, r7
    draw_area.y1 -= disp_area->y1;
   1f60a:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   1f60e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    draw_area.x1 -= disp_area->x1;
   1f612:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y2 -= disp_area->y1;
   1f616:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    draw_area.y1 -= disp_area->y1;
   1f61a:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
   1f61c:	1bd2      	subs	r2, r2, r7
    draw_area.y2 -= disp_area->y1;
   1f61e:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   1f620:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
    lv_area_copy(&bg_coords, coords);
   1f624:	a818      	add	r0, sp, #96	; 0x60
   1f626:	9905      	ldr	r1, [sp, #20]
    draw_area.x2 -= disp_area->x1;
   1f628:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   1f62c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    lv_area_copy(&bg_coords, coords);
   1f630:	f7ff fe9f 	bl	1f372 <lv_area_copy>
    bg_coords.x1 += 1;
   1f634:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    bg_coords.y1 += 1;
   1f638:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    bg_coords.x1 += 1;
   1f63c:	3301      	adds	r3, #1
   1f63e:	b21d      	sxth	r5, r3
    bg_coords.y1 += 1;
   1f640:	3101      	adds	r1, #1
    bg_coords.x2 -= 1;
   1f642:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    bg_coords.y1 += 1;
   1f646:	b208      	sxth	r0, r1
    bg_coords.y2 -= 1;
   1f648:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
    bg_coords.x2 -= 1;
   1f64c:	1e5a      	subs	r2, r3, #1
   1f64e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
   1f652:	1b5b      	subs	r3, r3, r5
    bg_coords.y2 -= 1;
   1f654:	1e4a      	subs	r2, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f656:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1f658:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f65a:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
   1f65c:	428b      	cmp	r3, r1
   1f65e:	bfa8      	it	ge
   1f660:	460b      	movge	r3, r1
    bg_coords.y2 -= 1;
   1f662:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    int32_t r_bg = dsc->radius;
   1f666:	f9b4 2000 	ldrsh.w	r2, [r4]
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
   1f66a:	105b      	asrs	r3, r3, #1
   1f66c:	4293      	cmp	r3, r2
   1f66e:	bfa8      	it	ge
   1f670:	4613      	movge	r3, r2
   1f672:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1f674:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    bg_coords.x1 += 1;
   1f678:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
   1f67c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
   1f680:	3301      	adds	r3, #1
   1f682:	1b5b      	subs	r3, r3, r5
   1f684:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f686:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
   1f68a:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
   1f68e:	3301      	adds	r3, #1
   1f690:	1a5b      	subs	r3, r3, r1
   1f692:	b21b      	sxth	r3, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
   1f694:	42ab      	cmp	r3, r5
   1f696:	bfa8      	it	ge
   1f698:	462b      	movge	r3, r5
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
   1f69a:	105d      	asrs	r5, r3, #1
   1f69c:	4295      	cmp	r5, r2
   1f69e:	bfa8      	it	ge
   1f6a0:	4615      	movge	r5, r2
    int32_t corner_size = sw  + r_sh;
   1f6a2:	1973      	adds	r3, r6, r5
    bg_coords.y1 += 1;
   1f6a4:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
   1f6a8:	fb03 f003 	mul.w	r0, r3, r3
   1f6ac:	0040      	lsls	r0, r0, #1
    int32_t corner_size = sw  + r_sh;
   1f6ae:	9306      	str	r3, [sp, #24]
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
   1f6b0:	f7f3 fa2e 	bl	12b10 <_lv_mem_buf_get>
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
   1f6b4:	f9b4 6030 	ldrsh.w	r6, [r4, #48]	; 0x30
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
   1f6b8:	9008      	str	r0, [sp, #32]
    int32_t size = sw_ori  + r;
   1f6ba:	19ab      	adds	r3, r5, r6
    lv_area_copy(&sh_area, coords);
   1f6bc:	a912      	add	r1, sp, #72	; 0x48
   1f6be:	a81e      	add	r0, sp, #120	; 0x78
    int32_t size = sw_ori  + r;
   1f6c0:	9307      	str	r3, [sp, #28]
    lv_area_copy(&sh_area, coords);
   1f6c2:	f7ff fe56 	bl	1f372 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
   1f6c6:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
   1f6ca:	f066 0301 	orn	r3, r6, #1
   1f6ce:	104a      	asrs	r2, r1, #1
   1f6d0:	eb03 0361 	add.w	r3, r3, r1, asr #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
   1f6d4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
   1f6d8:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
   1f6dc:	43c9      	mvns	r1, r1
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
   1f6de:	fa0f f885 	sxth.w	r8, r5
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
   1f6e2:	4443      	add	r3, r8
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
   1f6e4:	4401      	add	r1, r0
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
   1f6e6:	b21b      	sxth	r3, r3
   1f6e8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
   1f6ec:	440b      	add	r3, r1
   1f6ee:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
   1f6f2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
   1f6f6:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
    sh_area.y1 = sw / 2 + 1;
   1f6fa:	3201      	adds	r2, #1
   1f6fc:	3301      	adds	r3, #1
   1f6fe:	1a5b      	subs	r3, r3, r1
   1f700:	b212      	sxth	r2, r2
   1f702:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
   1f706:	441a      	add	r2, r3
   1f708:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
   1f70c:	2300      	movs	r3, #0
   1f70e:	4642      	mov	r2, r8
   1f710:	a91e      	add	r1, sp, #120	; 0x78
   1f712:	a825      	add	r0, sp, #148	; 0x94
   1f714:	f7f2 fa56 	bl	11bc4 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
   1f718:	2e01      	cmp	r6, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
   1f71a:	9807      	ldr	r0, [sp, #28]
    if(sw_ori == 1) sw = 1;
   1f71c:	bf0c      	ite	eq
   1f71e:	4637      	moveq	r7, r6
    else sw = sw_ori >> 1;
   1f720:	1077      	asrne	r7, r6, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
   1f722:	f7f3 f9f5 	bl	12b10 <_lv_mem_buf_get>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
   1f726:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
   1f728:	4681      	mov	r9, r0
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
   1f72a:	005b      	lsls	r3, r3, #1
   1f72c:	930b      	str	r3, [sp, #44]	; 0x2c
    for(y = 0; y < size; y++) {
   1f72e:	2300      	movs	r3, #0
   1f730:	9309      	str	r3, [sp, #36]	; 0x24
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
   1f732:	eb06 0308 	add.w	r3, r6, r8
   1f736:	b21b      	sxth	r3, r3
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
   1f738:	f8dd b020 	ldr.w	fp, [sp, #32]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
   1f73c:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
   1f73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f740:	9a07      	ldr	r2, [sp, #28]
   1f742:	429a      	cmp	r2, r3
   1f744:	dc0a      	bgt.n	1f75c <lv_draw_rect+0x23e>
    _lv_mem_buf_release(mask_line);
   1f746:	4648      	mov	r0, r9
   1f748:	f7f3 fa44 	bl	12bd4 <_lv_mem_buf_release>
    if(sw == 1) {
   1f74c:	9d07      	ldr	r5, [sp, #28]
   1f74e:	2f01      	cmp	r7, #1
   1f750:	fb05 f505 	mul.w	r5, r5, r5
   1f754:	f040 81aa 	bne.w	1faac <lv_draw_rect+0x58e>
        for(i = 0; i < size * size; i++) {
   1f758:	2300      	movs	r3, #0
   1f75a:	e03e      	b.n	1f7da <lv_draw_rect+0x2bc>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
    memset(dst, 0xFF, len);
   1f75c:	21ff      	movs	r1, #255	; 0xff
   1f75e:	9a07      	ldr	r2, [sp, #28]
   1f760:	4648      	mov	r0, r9
   1f762:	f7f9 fd7c 	bl	1925e <memset>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
   1f766:	ab25      	add	r3, sp, #148	; 0x94
   1f768:	2100      	movs	r1, #0
   1f76a:	9300      	str	r3, [sp, #0]
   1f76c:	4648      	mov	r0, r9
   1f76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f770:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   1f774:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1f776:	47a8      	blx	r5
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   1f778:	4601      	mov	r1, r0
   1f77a:	b948      	cbnz	r0, 1f790 <lv_draw_rect+0x272>
    memset(dst, 0x00, len);
   1f77c:	4658      	mov	r0, fp
   1f77e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f780:	f7f9 fd6d 	bl	1925e <memset>
        sh_ups_tmp_buf += size;
   1f784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f786:	449b      	add	fp, r3
    for(y = 0; y < size; y++) {
   1f788:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f78a:	3301      	adds	r3, #1
   1f78c:	9309      	str	r3, [sp, #36]	; 0x24
   1f78e:	e7d6      	b.n	1f73e <lv_draw_rect+0x220>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
   1f790:	f899 2000 	ldrb.w	r2, [r9]
   1f794:	465b      	mov	r3, fp
   1f796:	0192      	lsls	r2, r2, #6
   1f798:	fb92 f2f7 	sdiv	r2, r2, r7
   1f79c:	4649      	mov	r1, r9
   1f79e:	f823 2b02 	strh.w	r2, [r3], #2
            for(i = 1; i < size; i++) {
   1f7a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f7a4:	eb02 000b 	add.w	r0, r2, fp
   1f7a8:	4298      	cmp	r0, r3
   1f7aa:	d0eb      	beq.n	1f784 <lv_draw_rect+0x266>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
   1f7ac:	468c      	mov	ip, r1
   1f7ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f7b2:	f89c c000 	ldrb.w	ip, [ip]
   1f7b6:	3302      	adds	r3, #2
   1f7b8:	4594      	cmp	ip, r2
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
   1f7ba:	bf1a      	itte	ne
   1f7bc:	0192      	lslne	r2, r2, #6
   1f7be:	fb92 f2f7 	sdivne	r2, r2, r7
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
   1f7c2:	f833 2c04 	ldrheq.w	r2, [r3, #-4]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
   1f7c6:	f823 2c02 	strh.w	r2, [r3, #-2]
            for(i = 1; i < size; i++) {
   1f7ca:	e7ed      	b.n	1f7a8 <lv_draw_rect+0x28a>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
   1f7cc:	9a08      	ldr	r2, [sp, #32]
   1f7ce:	9908      	ldr	r1, [sp, #32]
   1f7d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1f7d4:	0992      	lsrs	r2, r2, #6
   1f7d6:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
   1f7d8:	3301      	adds	r3, #1
   1f7da:	42ab      	cmp	r3, r5
   1f7dc:	dbf6      	blt.n	1f7cc <lv_draw_rect+0x2ae>
   1f7de:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
   1f7e2:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
   1f7e6:	3301      	adds	r3, #1
   1f7e8:	1a9b      	subs	r3, r3, r2
   1f7ea:	f3c3 31c0 	ubfx	r1, r3, #15, #1
   1f7ee:	fa01 f383 	sxtah	r3, r1, r3
   1f7f2:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1f7f6:	b21b      	sxth	r3, r3
   1f7f8:	930c      	str	r3, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1f7fa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
   1f7fe:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
   1f802:	3301      	adds	r3, #1
   1f804:	1a9b      	subs	r3, r3, r2
   1f806:	f3c3 31c0 	ubfx	r1, r3, #15, #1
   1f80a:	fa01 f383 	sxtah	r3, r1, r3
   1f80e:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1f812:	b21b      	sxth	r3, r3
   1f814:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
   1f816:	f7f2 f943 	bl	11aa0 <lv_draw_mask_get_cnt>
   1f81a:	4606      	mov	r6, r0
   1f81c:	2800      	cmp	r0, #0
   1f81e:	f040 8177 	bne.w	1fb10 <lv_draw_rect+0x5f2>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
   1f822:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
   1f826:	2800      	cmp	r0, #0
   1f828:	f040 8174 	bne.w	1fb14 <lv_draw_rect+0x5f6>
   1f82c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
   1f830:	2b00      	cmp	r3, #0
   1f832:	f040 8171 	bne.w	1fb18 <lv_draw_rect+0x5fa>
    else if(dsc->shadow_spread != 0) simple_mode = false;
   1f836:	f9b4 6036 	ldrsh.w	r6, [r4, #54]	; 0x36
   1f83a:	fab6 f386 	clz	r3, r6
   1f83e:	095b      	lsrs	r3, r3, #5
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
   1f840:	9309      	str	r3, [sp, #36]	; 0x24
   1f842:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
   1f846:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   1f84a:	3001      	adds	r0, #1
   1f84c:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
   1f84e:	b200      	sxth	r0, r0
   1f850:	f7f3 f95e 	bl	12b10 <_lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
   1f854:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   1f858:	a918      	add	r1, sp, #96	; 0x60
   1f85a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f85c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f85e:	2301      	movs	r3, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
   1f860:	4605      	mov	r5, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
   1f862:	a825      	add	r0, sp, #148	; 0x94
   1f864:	f7f2 f9ae 	bl	11bc4 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   1f868:	2100      	movs	r1, #0
   1f86a:	a825      	add	r0, sp, #148	; 0x94
   1f86c:	f7f2 f8aa 	bl	119c4 <lv_draw_mask_add>
    a.x2 = sh_area.x2;
   1f870:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    a.x1 = a.x2 - corner_size + 1;
   1f874:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    a.x2 = sh_area.x2;
   1f878:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
   1f87c:	3301      	adds	r3, #1
   1f87e:	1a9b      	subs	r3, r3, r2
   1f880:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
   1f884:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   1f888:	900e      	str	r0, [sp, #56]	; 0x38
    a.y1 = sh_area.y1;
   1f88a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = a.y1 + corner_size - 1;
   1f88e:	3b01      	subs	r3, #1
   1f890:	4413      	add	r3, r2
    a.x1 = a.x2 - corner_size + 1;
   1f892:	9207      	str	r2, [sp, #28]
    bool has_com = _lv_area_intersect(&ca, &a, clip);
   1f894:	a91a      	add	r1, sp, #104	; 0x68
   1f896:	4652      	mov	r2, sl
   1f898:	a81c      	add	r0, sp, #112	; 0x70
    a.y2 = a.y1 + corner_size - 1;
   1f89a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    bool has_com = _lv_area_intersect(&ca, &a, clip);
   1f89e:	f001 fbb1 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1f8a2:	2800      	cmp	r0, #0
   1f8a4:	d045      	beq.n	1f932 <lv_draw_rect+0x414>
   1f8a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f8a8:	a918      	add	r1, sp, #96	; 0x60
   1f8aa:	a81a      	add	r0, sp, #104	; 0x68
   1f8ac:	f001 fc9d 	bl	211ea <_lv_area_is_in>
   1f8b0:	2800      	cmp	r0, #0
   1f8b2:	d13e      	bne.n	1f932 <lv_draw_rect+0x414>
        if(ca.y2 > h_half) ca.y2 = h_half;
   1f8b4:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
   1f8b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f8ba:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   1f8be:	4293      	cmp	r3, r2
   1f8c0:	bfc8      	it	gt
   1f8c2:	4613      	movgt	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
   1f8c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        if(ca.y2 > h_half) ca.y2 = h_half;
   1f8c6:	bfc8      	it	gt
   1f8c8:	f8ad 3076 	strhgt.w	r3, [sp, #118]	; 0x76
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
   1f8cc:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1f8d0:	3701      	adds	r7, #1
   1f8d2:	4293      	cmp	r3, r2
   1f8d4:	bfde      	ittt	le
   1f8d6:	4613      	movle	r3, r2
   1f8d8:	3301      	addle	r3, #1
   1f8da:	f8ad 3070 	strhle.w	r3, [sp, #112]	; 0x70
   1f8de:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
   1f8e2:	1abf      	subs	r7, r7, r2
   1f8e4:	b23f      	sxth	r7, r7
        if(w > 0) {
   1f8e6:	2f00      	cmp	r7, #0
   1f8e8:	dd23      	ble.n	1f932 <lv_draw_rect+0x414>
            for(y = 0; y < h; y++) {
   1f8ea:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f8ee:	f8bd b076 	ldrh.w	fp, [sp, #118]	; 0x76
   1f8f2:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1f8f6:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
   1f8fa:	f10b 0b01 	add.w	fp, fp, #1
   1f8fe:	ebab 0b03 	sub.w	fp, fp, r3
   1f902:	1b9e      	subs	r6, r3, r6
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1f904:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
   1f908:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1f90c:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1f90e:	9b06      	ldr	r3, [sp, #24]
            lv_area_copy(&fa, &ca);
   1f910:	4640      	mov	r0, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1f912:	fb03 2606 	mla	r6, r3, r6, r2
   1f916:	9b08      	ldr	r3, [sp, #32]
            lv_area_copy(&fa, &ca);
   1f918:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1f91a:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
   1f91c:	f7ff fd29 	bl	1f372 <lv_area_copy>
            fa.y2 = fa.y1;
   1f920:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1f924:	fa0f fb8b 	sxth.w	fp, fp
   1f928:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   1f92c:	45d9      	cmp	r9, fp
   1f92e:	f2c0 80f5 	blt.w	1fb1c <lv_draw_rect+0x5fe>
    a.x2 = sh_area.x2;
   1f932:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    a.x1 = a.x2 - corner_size + 1;
   1f936:	9a07      	ldr	r2, [sp, #28]
    a.x2 = sh_area.x2;
   1f938:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
   1f93c:	3301      	adds	r3, #1
   1f93e:	1a9b      	subs	r3, r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
   1f940:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   1f944:	9907      	ldr	r1, [sp, #28]
    a.x1 = a.x2 - corner_size + 1;
   1f946:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
   1f94a:	1c53      	adds	r3, r2, #1
   1f94c:	1a5b      	subs	r3, r3, r1
    a.y2 = sh_area.y2;
   1f94e:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1f952:	a91a      	add	r1, sp, #104	; 0x68
   1f954:	4652      	mov	r2, sl
   1f956:	a81c      	add	r0, sp, #112	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
   1f958:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
   1f95c:	f001 fb52 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1f960:	2800      	cmp	r0, #0
   1f962:	d046      	beq.n	1f9f2 <lv_draw_rect+0x4d4>
   1f964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f966:	a918      	add	r1, sp, #96	; 0x60
   1f968:	a81a      	add	r0, sp, #104	; 0x68
   1f96a:	f001 fc3e 	bl	211ea <_lv_area_is_in>
   1f96e:	2800      	cmp	r0, #0
   1f970:	d13f      	bne.n	1f9f2 <lv_draw_rect+0x4d4>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
   1f972:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
   1f976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1f978:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
   1f97c:	4293      	cmp	r3, r2
   1f97e:	bfdc      	itt	le
   1f980:	4613      	movle	r3, r2
   1f982:	3301      	addle	r3, #1
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
   1f984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
   1f986:	bfd8      	it	le
   1f988:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
   1f98c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1f990:	3601      	adds	r6, #1
   1f992:	4293      	cmp	r3, r2
   1f994:	bfde      	ittt	le
   1f996:	4613      	movle	r3, r2
   1f998:	3301      	addle	r3, #1
   1f99a:	f8ad 3070 	strhle.w	r3, [sp, #112]	; 0x70
   1f99e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1f9a2:	1af6      	subs	r6, r6, r3
   1f9a4:	b236      	sxth	r6, r6
        if(w > 0) {
   1f9a6:	2e00      	cmp	r6, #0
   1f9a8:	dd23      	ble.n	1f9f2 <lv_draw_rect+0x4d4>
            for(y = 0; y < h; y++) {
   1f9aa:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f9ae:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1f9b2:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
   1f9b6:	f102 0b01 	add.w	fp, r2, #1
   1f9ba:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1f9bc:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
   1f9c0:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
   1f9c4:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1f9c6:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1f9c8:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1f9cc:	fb02 3707 	mla	r7, r2, r7, r3
   1f9d0:	9b08      	ldr	r3, [sp, #32]
   1f9d2:	ebab 0b01 	sub.w	fp, fp, r1
            lv_area_copy(&fa, &ca);
   1f9d6:	4640      	mov	r0, r8
   1f9d8:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1f9da:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
   1f9dc:	f7ff fcc9 	bl	1f372 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
   1f9e0:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   1f9e4:	fa0f fb8b 	sxth.w	fp, fp
   1f9e8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
   1f9ec:	45d9      	cmp	r9, fp
   1f9ee:	f2c0 80c0 	blt.w	1fb72 <lv_draw_rect+0x654>
    a.x2 = sh_area.x2;
   1f9f2:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    a.x1 = a.x2 - corner_size + 1;
   1f9f6:	9a07      	ldr	r2, [sp, #28]
    a.x2 = sh_area.x2;
   1f9f8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
   1f9fc:	3301      	adds	r3, #1
   1f9fe:	1a9b      	subs	r3, r3, r2
   1fa00:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
   1fa04:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fa08:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y1 + corner_size;
   1fa0a:	4413      	add	r3, r2
   1fa0c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
   1fa10:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fa14:	a81c      	add	r0, sp, #112	; 0x70
    a.y2 = sh_area.y2 - corner_size;
   1fa16:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fa18:	4652      	mov	r2, sl
    a.y2 = sh_area.y2 - corner_size;
   1fa1a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fa1e:	f001 faf1 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fa22:	2800      	cmp	r0, #0
   1fa24:	d03d      	beq.n	1faa2 <lv_draw_rect+0x584>
   1fa26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fa28:	a918      	add	r1, sp, #96	; 0x60
   1fa2a:	a81a      	add	r0, sp, #104	; 0x68
   1fa2c:	f001 fbdd 	bl	211ea <_lv_area_is_in>
   1fa30:	bbb8      	cbnz	r0, 1faa2 <lv_draw_rect+0x584>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
   1fa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fa34:	b14b      	cbz	r3, 1fa4a <lv_draw_rect+0x52c>
   1fa36:	9b05      	ldr	r3, [sp, #20]
   1fa38:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
   1fa3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1fa40:	4293      	cmp	r3, r2
   1fa42:	bfb8      	it	lt
   1fa44:	4613      	movlt	r3, r2
   1fa46:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1fa4a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
   1fa4e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1fa52:	3601      	adds	r6, #1
   1fa54:	1af6      	subs	r6, r6, r3
   1fa56:	b236      	sxth	r6, r6
        if(w > 0) {
   1fa58:	2e00      	cmp	r6, #0
   1fa5a:	dd22      	ble.n	1faa2 <lv_draw_rect+0x584>
            for(y = 0; y < h; y++) {
   1fa5c:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1fa60:	f8bd b076 	ldrh.w	fp, [sp, #118]	; 0x76
   1fa64:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
   1fa68:	f10b 0b01 	add.w	fp, fp, #1
   1fa6c:	ebab 0b02 	sub.w	fp, fp, r2
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
   1fa70:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fa72:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
   1fa76:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
   1fa78:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
   1fa7c:	4640      	mov	r0, r8
            sh_buf_tmp += ca.x1 - a.x1;
   1fa7e:	1a9b      	subs	r3, r3, r2
   1fa80:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fa82:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += ca.x1 - a.x1;
   1fa84:	fb02 3707 	mla	r7, r2, r7, r3
   1fa88:	9b08      	ldr	r3, [sp, #32]
   1fa8a:	fa0f fb8b 	sxth.w	fp, fp
   1fa8e:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
   1fa90:	f7ff fc6f 	bl	1f372 <lv_area_copy>
            fa.y2 = fa.y1;
   1fa94:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fa98:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   1fa9c:	45d9      	cmp	r9, fp
   1fa9e:	f2c0 8093 	blt.w	1fbc8 <lv_draw_rect+0x6aa>
        for(x = 0; x < corner_size / 2; x++) {
   1faa2:	9b06      	ldr	r3, [sp, #24]
   1faa4:	2000      	movs	r0, #0
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
   1faa6:	9a08      	ldr	r2, [sp, #32]
        for(x = 0; x < corner_size / 2; x++) {
   1faa8:	105f      	asrs	r7, r3, #1
   1faaa:	e0c8      	b.n	1fc3e <lv_draw_rect+0x720>
    shadow_blur_corner(size, sw, sh_buf);
   1faac:	44b0      	add	r8, r6
   1faae:	fa0f f888 	sxth.w	r8, r8
   1fab2:	4639      	mov	r1, r7
   1fab4:	4640      	mov	r0, r8
   1fab6:	9a08      	ldr	r2, [sp, #32]
   1fab8:	f7ff fc5e 	bl	1f378 <shadow_blur_corner>
    sw += sw_ori & 1;
   1fabc:	f006 0101 	and.w	r1, r6, #1
   1fac0:	4439      	add	r1, r7
    if(sw > 1) {
   1fac2:	2901      	cmp	r1, #1
   1fac4:	dd0d      	ble.n	1fae2 <lv_draw_rect+0x5c4>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
   1fac6:	9b08      	ldr	r3, [sp, #32]
        for(i = 1; i < (uint32_t) size * size; i++) {
   1fac8:	2001      	movs	r0, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
   1faca:	881b      	ldrh	r3, [r3, #0]
   1facc:	9a08      	ldr	r2, [sp, #32]
   1face:	019b      	lsls	r3, r3, #6
   1fad0:	fbb3 f3f1 	udiv	r3, r3, r1
   1fad4:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
   1fad6:	42a8      	cmp	r0, r5
   1fad8:	d305      	bcc.n	1fae6 <lv_draw_rect+0x5c8>
        shadow_blur_corner(size, sw, sh_buf);
   1fada:	4640      	mov	r0, r8
   1fadc:	9a08      	ldr	r2, [sp, #32]
   1fade:	f7ff fc4b 	bl	1f378 <shadow_blur_corner>
        for(i = 1; i < (uint32_t) size * size; i++) {
   1fae2:	2300      	movs	r3, #0
   1fae4:	e011      	b.n	1fb0a <lv_draw_rect+0x5ec>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
   1fae6:	8853      	ldrh	r3, [r2, #2]
   1fae8:	f832 6b02 	ldrh.w	r6, [r2], #2
        for(i = 1; i < (uint32_t) size * size; i++) {
   1faec:	3001      	adds	r0, #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
   1faee:	42b3      	cmp	r3, r6
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
   1faf0:	bf1e      	ittt	ne
   1faf2:	019b      	lslne	r3, r3, #6
   1faf4:	fbb3 f3f1 	udivne	r3, r3, r1
   1faf8:	b29e      	uxthne	r6, r3
   1fafa:	8016      	strh	r6, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
   1fafc:	e7eb      	b.n	1fad6 <lv_draw_rect+0x5b8>
        res_buf[x] = sh_buf[x];
   1fafe:	9a08      	ldr	r2, [sp, #32]
   1fb00:	9908      	ldr	r1, [sp, #32]
   1fb02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1fb06:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
   1fb08:	3301      	adds	r3, #1
   1fb0a:	42ab      	cmp	r3, r5
   1fb0c:	dbf7      	blt.n	1fafe <lv_draw_rect+0x5e0>
   1fb0e:	e666      	b.n	1f7de <lv_draw_rect+0x2c0>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
   1fb10:	2300      	movs	r3, #0
   1fb12:	e695      	b.n	1f840 <lv_draw_rect+0x322>
   1fb14:	9609      	str	r6, [sp, #36]	; 0x24
   1fb16:	e694      	b.n	1f842 <lv_draw_rect+0x324>
   1fb18:	9009      	str	r0, [sp, #36]	; 0x24
   1fb1a:	e692      	b.n	1f842 <lv_draw_rect+0x324>
    return memcpy(dst, src, len);
   1fb1c:	4631      	mov	r1, r6
   1fb1e:	463a      	mov	r2, r7
   1fb20:	4628      	mov	r0, r5
   1fb22:	f7f9 fb71 	bl	19208 <memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   1fb26:	463b      	mov	r3, r7
   1fb28:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   1fb2c:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   1fb30:	4628      	mov	r0, r5
   1fb32:	f7f1 ff6d 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   1fb36:	2801      	cmp	r0, #1
   1fb38:	bf08      	it	eq
   1fb3a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   1fb3c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1fb40:	4641      	mov	r1, r8
   1fb42:	9302      	str	r3, [sp, #8]
   1fb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
   1fb46:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   1fb4a:	e9cd 0300 	strd	r0, r3, [sp]
   1fb4e:	462b      	mov	r3, r5
   1fb50:	4650      	mov	r0, sl
   1fb52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1fb54:	f7fd ffa0 	bl	1da98 <_lv_blend_fill>
                fa.y1++;
   1fb58:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fb5c:	3301      	adds	r3, #1
   1fb5e:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2++;
   1fb62:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   1fb66:	3301      	adds	r3, #1
   1fb68:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                sh_buf_tmp += corner_size;
   1fb6c:	9b06      	ldr	r3, [sp, #24]
   1fb6e:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
   1fb70:	e6dc      	b.n	1f92c <lv_draw_rect+0x40e>
   1fb72:	4639      	mov	r1, r7
   1fb74:	4632      	mov	r2, r6
   1fb76:	4628      	mov	r0, r5
   1fb78:	f7f9 fb46 	bl	19208 <memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   1fb7c:	4633      	mov	r3, r6
   1fb7e:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   1fb82:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   1fb86:	4628      	mov	r0, r5
   1fb88:	f7f1 ff42 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   1fb8c:	2801      	cmp	r0, #1
   1fb8e:	bf08      	it	eq
   1fb90:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   1fb92:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1fb96:	4641      	mov	r1, r8
   1fb98:	9302      	str	r3, [sp, #8]
   1fb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
   1fb9c:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   1fba0:	e9cd 0300 	strd	r0, r3, [sp]
   1fba4:	462b      	mov	r3, r5
   1fba6:	4650      	mov	r0, sl
   1fba8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1fbaa:	f7fd ff75 	bl	1da98 <_lv_blend_fill>
                fa.y1--;
   1fbae:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fbb2:	3b01      	subs	r3, #1
   1fbb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2--;
   1fbb8:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   1fbbc:	3b01      	subs	r3, #1
   1fbbe:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                sh_buf_tmp += corner_size;
   1fbc2:	9b06      	ldr	r3, [sp, #24]
   1fbc4:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
   1fbc6:	e711      	b.n	1f9ec <lv_draw_rect+0x4ce>
   1fbc8:	4632      	mov	r2, r6
   1fbca:	4639      	mov	r1, r7
   1fbcc:	4628      	mov	r0, r5
   1fbce:	f7f9 fb1b 	bl	19208 <memcpy>
                if(simple_mode) {
   1fbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fbd4:	b94b      	cbnz	r3, 1fbea <lv_draw_rect+0x6cc>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   1fbd6:	4633      	mov	r3, r6
   1fbd8:	4628      	mov	r0, r5
   1fbda:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   1fbde:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   1fbe2:	f7f1 ff15 	bl	11a10 <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   1fbe6:	2801      	cmp	r0, #1
   1fbe8:	d100      	bne.n	1fbec <lv_draw_rect+0x6ce>
   1fbea:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
   1fbec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1fbf0:	4641      	mov	r1, r8
   1fbf2:	9302      	str	r3, [sp, #8]
   1fbf4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            for(y = 0; y < h; y++) {
   1fbf8:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
   1fbfc:	e9cd 0300 	strd	r0, r3, [sp]
   1fc00:	462b      	mov	r3, r5
   1fc02:	4650      	mov	r0, sl
   1fc04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1fc06:	f7fd ff47 	bl	1da98 <_lv_blend_fill>
                fa.y1++;
   1fc0a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fc0e:	3301      	adds	r3, #1
   1fc10:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2++;
   1fc14:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   1fc18:	3301      	adds	r3, #1
   1fc1a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   1fc1e:	e73d      	b.n	1fa9c <lv_draw_rect+0x57e>
            lv_opa_t tmp = sh_buf_tmp[x];
   1fc20:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
   1fc24:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   1fc28:	f881 e000 	strb.w	lr, [r1]
            sh_buf_tmp[corner_size - x - 1] = tmp;
   1fc2c:	f883 c000 	strb.w	ip, [r3]
        for(x = 0; x < corner_size / 2; x++) {
   1fc30:	eba6 0c03 	sub.w	ip, r6, r3
   1fc34:	4567      	cmp	r7, ip
   1fc36:	dcf3      	bgt.n	1fc20 <lv_draw_rect+0x702>
        sh_buf_tmp += corner_size;
   1fc38:	9b06      	ldr	r3, [sp, #24]
    for(y = 0; y < corner_size; y++) {
   1fc3a:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
   1fc3c:	441a      	add	r2, r3
    for(y = 0; y < corner_size; y++) {
   1fc3e:	9b06      	ldr	r3, [sp, #24]
   1fc40:	4283      	cmp	r3, r0
   1fc42:	dd03      	ble.n	1fc4c <lv_draw_rect+0x72e>
   1fc44:	18d6      	adds	r6, r2, r3
   1fc46:	4633      	mov	r3, r6
   1fc48:	1e51      	subs	r1, r2, #1
   1fc4a:	e7f1      	b.n	1fc30 <lv_draw_rect+0x712>
    a.x1 = sh_area.x1;
   1fc4c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x2 = a.x1 + corner_size - 1;
   1fc50:	9a07      	ldr	r2, [sp, #28]
    a.x1 = sh_area.x1;
   1fc52:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
   1fc56:	3b01      	subs	r3, #1
   1fc58:	4413      	add	r3, r2
   1fc5a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1;
   1fc5e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fc62:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y1;
   1fc64:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = a.y1 + corner_size - 1;
   1fc68:	3b01      	subs	r3, #1
   1fc6a:	4413      	add	r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fc6c:	a81c      	add	r0, sp, #112	; 0x70
   1fc6e:	4652      	mov	r2, sl
    a.y2 = a.y1 + corner_size - 1;
   1fc70:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fc74:	f001 f9c6 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	d044      	beq.n	1fd06 <lv_draw_rect+0x7e8>
   1fc7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc7e:	a918      	add	r1, sp, #96	; 0x60
   1fc80:	a81a      	add	r0, sp, #104	; 0x68
   1fc82:	f001 fab2 	bl	211ea <_lv_area_is_in>
   1fc86:	2800      	cmp	r0, #0
   1fc88:	d13d      	bne.n	1fd06 <lv_draw_rect+0x7e8>
        if(ca.y2 > h_half) ca.y2 = h_half;
   1fc8a:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
   1fc8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fc90:	4293      	cmp	r3, r2
   1fc92:	bfc8      	it	gt
   1fc94:	4613      	movgt	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
   1fc96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        if(ca.y2 > h_half) ca.y2 = h_half;
   1fc98:	bfc8      	it	gt
   1fc9a:	f8ad 3076 	strhgt.w	r3, [sp, #118]	; 0x76
        if(ca.x2 > w_half) ca.x2 = w_half;
   1fc9e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
   1fca2:	4293      	cmp	r3, r2
   1fca4:	bfc4      	itt	gt
   1fca6:	4613      	movgt	r3, r2
   1fca8:	f8ad 3074 	strhgt.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1fcac:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   1fcb0:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
   1fcb4:	3701      	adds	r7, #1
   1fcb6:	1abf      	subs	r7, r7, r2
   1fcb8:	b23f      	sxth	r7, r7
        if(w > 0) {
   1fcba:	2f00      	cmp	r7, #0
   1fcbc:	dd23      	ble.n	1fd06 <lv_draw_rect+0x7e8>
            for(y = 0; y < h; y++) {
   1fcbe:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1fcc2:	f8bd b076 	ldrh.w	fp, [sp, #118]	; 0x76
   1fcc6:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1fcca:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
   1fcce:	f10b 0b01 	add.w	fp, fp, #1
   1fcd2:	ebab 0b03 	sub.w	fp, fp, r3
   1fcd6:	1b9e      	subs	r6, r3, r6
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1fcd8:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
   1fcdc:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1fce0:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1fce2:	9b06      	ldr	r3, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fce4:	4640      	mov	r0, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1fce6:	fb03 2606 	mla	r6, r3, r6, r2
   1fcea:	9b08      	ldr	r3, [sp, #32]
            lv_area_copy(&fa, &ca);
   1fcec:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1fcee:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
   1fcf0:	f7ff fb3f 	bl	1f372 <lv_area_copy>
            fa.y2 = fa.y1;
   1fcf4:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fcf8:	fa0f fb8b 	sxth.w	fp, fp
   1fcfc:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   1fd00:	45d9      	cmp	r9, fp
   1fd02:	f2c0 83d9 	blt.w	204b8 <lv_draw_rect+0xf9a>
    a.x1 = sh_area.x1;
   1fd06:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x2 = a.x1 + corner_size - 1;
   1fd0a:	9a07      	ldr	r2, [sp, #28]
    a.x1 = sh_area.x1;
   1fd0c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
   1fd10:	3b01      	subs	r3, #1
   1fd12:	4413      	add	r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
   1fd14:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   1fd18:	9907      	ldr	r1, [sp, #28]
    a.x2 = a.x1 + corner_size - 1;
   1fd1a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
   1fd1e:	1c53      	adds	r3, r2, #1
   1fd20:	1a5b      	subs	r3, r3, r1
    a.y2 = sh_area.y2;
   1fd22:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fd26:	a91a      	add	r1, sp, #104	; 0x68
   1fd28:	4652      	mov	r2, sl
   1fd2a:	a81c      	add	r0, sp, #112	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
   1fd2c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fd30:	f001 f968 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fd34:	2800      	cmp	r0, #0
   1fd36:	d045      	beq.n	1fdc4 <lv_draw_rect+0x8a6>
   1fd38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fd3a:	a918      	add	r1, sp, #96	; 0x60
   1fd3c:	a81a      	add	r0, sp, #104	; 0x68
   1fd3e:	f001 fa54 	bl	211ea <_lv_area_is_in>
   1fd42:	2800      	cmp	r0, #0
   1fd44:	d13e      	bne.n	1fdc4 <lv_draw_rect+0x8a6>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
   1fd46:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
   1fd4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fd4c:	4293      	cmp	r3, r2
   1fd4e:	bfdc      	itt	le
   1fd50:	4613      	movle	r3, r2
   1fd52:	3301      	addle	r3, #1
        if(ca.x2 > w_half) ca.x2 = w_half;
   1fd54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
   1fd56:	bfd8      	it	le
   1fd58:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
        if(ca.x2 > w_half) ca.x2 = w_half;
   1fd5c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
   1fd60:	4293      	cmp	r3, r2
   1fd62:	bfc4      	itt	gt
   1fd64:	4613      	movgt	r3, r2
   1fd66:	f8ad 3074 	strhgt.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1fd6a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
   1fd6e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1fd72:	3601      	adds	r6, #1
   1fd74:	1af6      	subs	r6, r6, r3
   1fd76:	b236      	sxth	r6, r6
        if(w > 0) {
   1fd78:	2e00      	cmp	r6, #0
   1fd7a:	dd23      	ble.n	1fdc4 <lv_draw_rect+0x8a6>
            for(y = 0; y < h; y++) {
   1fd7c:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1fd80:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1fd84:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
   1fd88:	f102 0b01 	add.w	fp, r2, #1
   1fd8c:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
   1fd8e:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
   1fd92:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
   1fd96:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1fd98:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fd9a:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1fd9e:	fb02 3707 	mla	r7, r2, r7, r3
   1fda2:	9b08      	ldr	r3, [sp, #32]
   1fda4:	ebab 0b01 	sub.w	fp, fp, r1
            lv_area_copy(&fa, &ca);
   1fda8:	4640      	mov	r0, r8
   1fdaa:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1fdac:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
   1fdae:	f7ff fae0 	bl	1f372 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
   1fdb2:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   1fdb6:	fa0f fb8b 	sxth.w	fp, fp
   1fdba:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
   1fdbe:	45d9      	cmp	r9, fp
   1fdc0:	f2c0 83a6 	blt.w	20510 <lv_draw_rect+0xff2>
    a.x1 = sh_area.x1;
   1fdc4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x2 = a.x1 + corner_size - 1;
   1fdc8:	9a07      	ldr	r2, [sp, #28]
    a.x1 = sh_area.x1;
   1fdca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
   1fdce:	3b01      	subs	r3, #1
   1fdd0:	4413      	add	r3, r2
   1fdd2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1 + corner_size;
   1fdd6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fdda:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y1 + corner_size;
   1fddc:	4413      	add	r3, r2
   1fdde:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
   1fde2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fde6:	a81c      	add	r0, sp, #112	; 0x70
    a.y2 = sh_area.y2 - corner_size;
   1fde8:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fdea:	4652      	mov	r2, sl
    a.y2 = sh_area.y2 - corner_size;
   1fdec:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fdf0:	f001 f908 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fdf4:	2800      	cmp	r0, #0
   1fdf6:	d03d      	beq.n	1fe74 <lv_draw_rect+0x956>
   1fdf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fdfa:	a918      	add	r1, sp, #96	; 0x60
   1fdfc:	a81a      	add	r0, sp, #104	; 0x68
   1fdfe:	f001 f9f4 	bl	211ea <_lv_area_is_in>
   1fe02:	bbb8      	cbnz	r0, 1fe74 <lv_draw_rect+0x956>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
   1fe04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fe06:	b14b      	cbz	r3, 1fe1c <lv_draw_rect+0x8fe>
   1fe08:	9b05      	ldr	r3, [sp, #20]
   1fe0a:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
   1fe0e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1fe12:	4293      	cmp	r3, r2
   1fe14:	bfa8      	it	ge
   1fe16:	4613      	movge	r3, r2
   1fe18:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1fe1c:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
   1fe20:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
   1fe24:	3601      	adds	r6, #1
   1fe26:	1af6      	subs	r6, r6, r3
   1fe28:	b236      	sxth	r6, r6
        if(w > 0) {
   1fe2a:	2e00      	cmp	r6, #0
   1fe2c:	dd22      	ble.n	1fe74 <lv_draw_rect+0x956>
            for(y = 0; y < h; y++) {
   1fe2e:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1fe32:	f8bd b076 	ldrh.w	fp, [sp, #118]	; 0x76
   1fe36:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
   1fe3a:	f10b 0b01 	add.w	fp, fp, #1
   1fe3e:	ebab 0b02 	sub.w	fp, fp, r2
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
   1fe42:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fe44:	f10d 0878 	add.w	r8, sp, #120	; 0x78
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
   1fe48:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
   1fe4a:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
   1fe4e:	4640      	mov	r0, r8
            sh_buf_tmp += ca.x1 - a.x1;
   1fe50:	1a9b      	subs	r3, r3, r2
   1fe52:	9a06      	ldr	r2, [sp, #24]
            lv_area_copy(&fa, &ca);
   1fe54:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += ca.x1 - a.x1;
   1fe56:	fb02 3707 	mla	r7, r2, r7, r3
   1fe5a:	9b08      	ldr	r3, [sp, #32]
   1fe5c:	fa0f fb8b 	sxth.w	fp, fp
   1fe60:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
   1fe62:	f7ff fa86 	bl	1f372 <lv_area_copy>
            fa.y2 = fa.y1;
   1fe66:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   1fe6a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   1fe6e:	45d9      	cmp	r9, fp
   1fe70:	f2c0 8379 	blt.w	20566 <lv_draw_rect+0x1048>
    a.x1 = sh_area.x1 + corner_size;
   1fe74:	9a07      	ldr	r2, [sp, #28]
   1fe76:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fe7a:	a91a      	add	r1, sp, #104	; 0x68
    a.x1 = sh_area.x1 + corner_size;
   1fe7c:	4413      	add	r3, r2
   1fe7e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
   1fe82:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fe86:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = sh_area.x2 - corner_size;
   1fe88:	1a9b      	subs	r3, r3, r2
   1fe8a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1;
   1fe8e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   1fe92:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y1 + corner_size - 1;
   1fe96:	3b01      	subs	r3, #1
   1fe98:	4413      	add	r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fe9a:	4652      	mov	r2, sl
    a.y2 = sh_area.y1 + corner_size - 1;
   1fe9c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fea0:	f001 f8b0 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fea4:	2800      	cmp	r0, #0
   1fea6:	d039      	beq.n	1ff1c <lv_draw_rect+0x9fe>
   1fea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1feaa:	a918      	add	r1, sp, #96	; 0x60
   1feac:	a81a      	add	r0, sp, #104	; 0x68
   1feae:	f001 f99c 	bl	211ea <_lv_area_is_in>
   1feb2:	bb98      	cbnz	r0, 1ff1c <lv_draw_rect+0x9fe>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
   1feb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1feb6:	b14b      	cbz	r3, 1fecc <lv_draw_rect+0x9ae>
   1feb8:	9b05      	ldr	r3, [sp, #20]
   1feba:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
   1febe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1fec2:	4293      	cmp	r3, r2
   1fec4:	bfa8      	it	ge
   1fec6:	4613      	movge	r3, r2
   1fec8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(y = 0; y < h; y++) {
   1fecc:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1fed0:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   1fed4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   1fed8:	3701      	adds	r7, #1
   1feda:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1fedc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
   1fee0:	f9bd 6072 	ldrsh.w	r6, [sp, #114]	; 0x72
   1fee4:	3301      	adds	r3, #1
   1fee6:	1b9b      	subs	r3, r3, r6
   1fee8:	fa0f fb83 	sxth.w	fp, r3
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1feec:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
   1fef0:	9a06      	ldr	r2, [sp, #24]
   1fef2:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
   1fef4:	9b06      	ldr	r3, [sp, #24]
        lv_area_copy(&fa, &ca);
   1fef6:	f10d 0878 	add.w	r8, sp, #120	; 0x78
        sh_buf_tmp = sh_buf + corner_size - 1;
   1fefa:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1fefc:	fb02 3606 	mla	r6, r2, r6, r3
   1ff00:	9b08      	ldr	r3, [sp, #32]
        lv_area_copy(&fa, &ca);
   1ff02:	4640      	mov	r0, r8
   1ff04:	a91c      	add	r1, sp, #112	; 0x70
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
   1ff06:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
   1ff08:	f7ff fa33 	bl	1f372 <lv_area_copy>
        fa.y2 = fa.y1;
   1ff0c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ff10:	b23f      	sxth	r7, r7
   1ff12:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(y = 0; y < h; y++) {
   1ff16:	45d9      	cmp	r9, fp
   1ff18:	f2c0 8351 	blt.w	205be <lv_draw_rect+0x10a0>
    a.x1 = sh_area.x1 + corner_size;
   1ff1c:	9a07      	ldr	r2, [sp, #28]
   1ff1e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    a.y1 = sh_area.y2 - corner_size + 1;
   1ff22:	9907      	ldr	r1, [sp, #28]
    a.x1 = sh_area.x1 + corner_size;
   1ff24:	4413      	add	r3, r2
   1ff26:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
   1ff2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
   1ff2e:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = sh_area.x2 - corner_size;
   1ff30:	1a9b      	subs	r3, r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
   1ff32:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    a.x2 = sh_area.x2 - corner_size;
   1ff36:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
   1ff3a:	1c53      	adds	r3, r2, #1
   1ff3c:	1a5b      	subs	r3, r3, r1
    a.y2 = sh_area.y2;
   1ff3e:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1ff42:	a91a      	add	r1, sp, #104	; 0x68
   1ff44:	4652      	mov	r2, sl
    a.y1 = sh_area.y2 - corner_size + 1;
   1ff46:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
   1ff4a:	f001 f85b 	bl	21004 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1ff4e:	2800      	cmp	r0, #0
   1ff50:	d039      	beq.n	1ffc6 <lv_draw_rect+0xaa8>
   1ff52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff54:	a918      	add	r1, sp, #96	; 0x60
   1ff56:	a81a      	add	r0, sp, #104	; 0x68
   1ff58:	f001 f947 	bl	211ea <_lv_area_is_in>
   1ff5c:	bb98      	cbnz	r0, 1ffc6 <lv_draw_rect+0xaa8>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
   1ff5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ff60:	b14b      	cbz	r3, 1ff76 <lv_draw_rect+0xa58>
   1ff62:	9b05      	ldr	r3, [sp, #20]
   1ff64:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
   1ff68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   1ff6c:	4293      	cmp	r3, r2
   1ff6e:	bfb8      	it	lt
   1ff70:	4613      	movlt	r3, r2
   1ff72:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(y = 0; y < h; y++) {
   1ff76:	f04f 0900 	mov.w	r9, #0
   1ff7a:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ff7e:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ff82:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ff86:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ff8a:	3701      	adds	r7, #1
   1ff8c:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ff8e:	1c53      	adds	r3, r2, #1
   1ff90:	1a5b      	subs	r3, r3, r1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1ff92:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
   1ff96:	fa0f fb83 	sxth.w	fp, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
   1ff9a:	9b06      	ldr	r3, [sp, #24]
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1ff9c:	1ab6      	subs	r6, r6, r2
   1ff9e:	9a06      	ldr	r2, [sp, #24]
        sh_buf_tmp = sh_buf + corner_size - 1;
   1ffa0:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1ffa2:	fb02 3606 	mla	r6, r2, r6, r3
        lv_area_copy(&fa, &ca);
   1ffa6:	f10d 0878 	add.w	r8, sp, #120	; 0x78
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1ffaa:	9b08      	ldr	r3, [sp, #32]
        lv_area_copy(&fa, &ca);
   1ffac:	4640      	mov	r0, r8
   1ffae:	a91c      	add	r1, sp, #112	; 0x70
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
   1ffb0:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
   1ffb2:	f7ff f9de 	bl	1f372 <lv_area_copy>
        fa.y1 = fa.y2;
   1ffb6:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ffba:	b23f      	sxth	r7, r7
   1ffbc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
   1ffc0:	45d9      	cmp	r9, fp
   1ffc2:	f2c0 8333 	blt.w	2062c <lv_draw_rect+0x110e>
    a.x1 = sh_area.x1 + corner_size;
   1ffc6:	9a07      	ldr	r2, [sp, #28]
   1ffc8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
   1ffcc:	a91a      	add	r1, sp, #104	; 0x68
    a.x1 = sh_area.x1 + corner_size;
   1ffce:	4413      	add	r3, r2
   1ffd0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
   1ffd4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
   1ffd8:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = sh_area.x2 - corner_size;
   1ffda:	1a9b      	subs	r3, r3, r2
   1ffdc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1 + corner_size;
   1ffe0:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   1ffe4:	4413      	add	r3, r2
   1ffe6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
   1ffea:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   1ffee:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fff0:	4652      	mov	r2, sl
    a.y2 = sh_area.y2 - corner_size;
   1fff2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
   1fff6:	f001 f805 	bl	21004 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
   1fffa:	b330      	cbz	r0, 2004a <lv_draw_rect+0xb2c>
   1fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fffe:	bb23      	cbnz	r3, 2004a <lv_draw_rect+0xb2c>
   20000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20002:	a918      	add	r1, sp, #96	; 0x60
   20004:	a81a      	add	r0, sp, #104	; 0x68
   20006:	f001 f8f0 	bl	211ea <_lv_area_is_in>
   2000a:	b9f0      	cbnz	r0, 2004a <lv_draw_rect+0xb2c>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   2000c:	f04f 09ff 	mov.w	r9, #255	; 0xff
   20010:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
   20014:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20018:	f8bd 8076 	ldrh.w	r8, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2001c:	3701      	adds	r7, #1
   2001e:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20020:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   20024:	f108 0801 	add.w	r8, r8, #1
        lv_area_copy(&fa, &ca);
   20028:	a91c      	add	r1, sp, #112	; 0x70
   2002a:	a81e      	add	r0, sp, #120	; 0x78
   2002c:	eba8 0803 	sub.w	r8, r8, r3
   20030:	f7ff f99f 	bl	1f372 <lv_area_copy>
        fa.y2 = fa.y1;
   20034:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
   20038:	9e09      	ldr	r6, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2003a:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2003c:	fa0f f888 	sxth.w	r8, r8
        fa.y2 = fa.y1;
   20040:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(y = 0; y < h; y++) {
   20044:	4546      	cmp	r6, r8
   20046:	f2c0 8328 	blt.w	2069a <lv_draw_rect+0x117c>
    lv_draw_mask_remove_id(mask_rout_id);
   2004a:	980e      	ldr	r0, [sp, #56]	; 0x38
   2004c:	f7f1 fd02 	bl	11a54 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   20050:	4628      	mov	r0, r5
   20052:	f7f2 fdbf 	bl	12bd4 <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
   20056:	9808      	ldr	r0, [sp, #32]
   20058:	f7f2 fdbc 	bl	12bd4 <_lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
   2005c:	7ca3      	ldrb	r3, [r4, #18]
   2005e:	2b02      	cmp	r3, #2
   20060:	f240 80aa 	bls.w	201b8 <lv_draw_rect+0xc9a>
    lv_area_copy(&coords_bg, coords);
   20064:	9905      	ldr	r1, [sp, #20]
   20066:	a818      	add	r0, sp, #96	; 0x60
   20068:	f7ff f983 	bl	1f372 <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
   2006c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
   20070:	2b01      	cmp	r3, #1
   20072:	dd24      	ble.n	200be <lv_draw_rect+0xba0>
   20074:	7f23      	ldrb	r3, [r4, #28]
   20076:	2bfc      	cmp	r3, #252	; 0xfc
   20078:	d921      	bls.n	200be <lv_draw_rect+0xba0>
   2007a:	f9b4 3000 	ldrsh.w	r3, [r4]
   2007e:	b1f3      	cbz	r3, 200be <lv_draw_rect+0xba0>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   20080:	8b63      	ldrh	r3, [r4, #26]
   20082:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
   20086:	f3c3 0180 	ubfx	r1, r3, #2, #1
   2008a:	4401      	add	r1, r0
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   2008c:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   20090:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   20094:	f3c3 0140 	ubfx	r1, r3, #1, #1
   20098:	4401      	add	r1, r0
   2009a:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
   2009e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   200a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   200a6:	1acb      	subs	r3, r1, r3
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   200a8:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
   200ac:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
   200b0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   200b4:	f002 0201 	and.w	r2, r2, #1
   200b8:	1a9b      	subs	r3, r3, r2
   200ba:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    lv_opa_t opa = dsc->bg_opa;
   200be:	f894 b012 	ldrb.w	fp, [r4, #18]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   200c2:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   200c6:	bf28      	it	cs
   200c8:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   200cc:	f7ef ffba 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   200d0:	f000 ff1c 	bl	20f0c <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   200d4:	4652      	mov	r2, sl
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   200d6:	9006      	str	r0, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   200d8:	a918      	add	r1, sp, #96	; 0x60
   200da:	a81a      	add	r0, sp, #104	; 0x68
   200dc:	f000 ff92 	bl	21004 <_lv_area_intersect>
    if(is_common == false) return;
   200e0:	2800      	cmp	r0, #0
   200e2:	d069      	beq.n	201b8 <lv_draw_rect+0xc9a>
    draw_area.x1 -= disp_area->x1;
   200e4:	9b06      	ldr	r3, [sp, #24]
   200e6:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
   200ea:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
    draw_area.y1 -= disp_area->y1;
   200ee:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    draw_area.x1 -= disp_area->x1;
   200f2:	1a83      	subs	r3, r0, r2
   200f4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
   200f8:	9b06      	ldr	r3, [sp, #24]
   200fa:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
    draw_area.x2 -= disp_area->x1;
   200fe:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
    draw_area.y1 -= disp_area->y1;
   20102:	1b49      	subs	r1, r1, r5
    draw_area.x2 -= disp_area->x1;
   20104:	1a9a      	subs	r2, r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20106:	3301      	adds	r3, #1
   20108:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
   2010c:	1a1b      	subs	r3, r3, r0
    draw_area.y2 -= disp_area->y1;
   2010e:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
   20112:	b21b      	sxth	r3, r3
   20114:	1b52      	subs	r2, r2, r5
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   20116:	4618      	mov	r0, r3
    draw_area.y1 -= disp_area->y1;
   20118:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    draw_area.y2 -= disp_area->y1;
   2011c:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
   20120:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   20122:	f7f2 fcf5 	bl	12b10 <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   20126:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
   2012a:	7b26      	ldrb	r6, [r4, #12]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   2012c:	4680      	mov	r8, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   2012e:	429a      	cmp	r2, r3
   20130:	bf08      	it	eq
   20132:	2600      	moveq	r6, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
   20134:	f7f1 fcb4 	bl	11aa0 <lv_draw_mask_get_cnt>
   20138:	9010      	str	r0, [sp, #64]	; 0x40
   2013a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2013e:	9311      	str	r3, [sp, #68]	; 0x44
    if(other_mask_cnt) simple_mode = false;
   20140:	2b00      	cmp	r3, #0
   20142:	f040 82d2 	bne.w	206ea <lv_draw_rect+0x11cc>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
   20146:	1eb3      	subs	r3, r6, #2
   20148:	bf18      	it	ne
   2014a:	2301      	movne	r3, #1
   2014c:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20150:	f8bd 5066 	ldrh.w	r5, [sp, #102]	; 0x66
    if(other_mask_cnt) simple_mode = false;
   20154:	930a      	str	r3, [sp, #40]	; 0x28
   20156:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2015a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   2015e:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20160:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20162:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20164:	1aad      	subs	r5, r5, r2
    int32_t coords_h = lv_area_get_height(&coords_bg);
   20166:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20168:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   2016a:	42bd      	cmp	r5, r7
   2016c:	bfa8      	it	ge
   2016e:	463d      	movge	r5, r7
    int32_t rout = dsc->radius;
   20170:	f9b4 3000 	ldrsh.w	r3, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
   20174:	106d      	asrs	r5, r5, #1
   20176:	429d      	cmp	r5, r3
   20178:	bfa8      	it	ge
   2017a:	461d      	movge	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
   2017c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2017e:	2b00      	cmp	r3, #0
   20180:	f000 82b5 	beq.w	206ee <lv_draw_rect+0x11d0>
   20184:	2d00      	cmp	r5, #0
   20186:	f040 82b2 	bne.w	206ee <lv_draw_rect+0x11d0>
   2018a:	2e00      	cmp	r6, #0
   2018c:	f040 8352 	bne.w	20834 <lv_draw_rect+0x1316>
        _lv_blend_fill(clip, &coords_bg,
   20190:	7ce3      	ldrb	r3, [r4, #19]
   20192:	4650      	mov	r0, sl
   20194:	e9cd b301 	strd	fp, r3, [sp, #4]
   20198:	2301      	movs	r3, #1
   2019a:	9300      	str	r3, [sp, #0]
   2019c:	6862      	ldr	r2, [r4, #4]
   2019e:	4633      	mov	r3, r6
   201a0:	a918      	add	r1, sp, #96	; 0x60
   201a2:	f7fd fc79 	bl	1da98 <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   201a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   201aa:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_mask_remove_id(mask_rout_id);
   201ac:	980d      	ldr	r0, [sp, #52]	; 0x34
   201ae:	f7f1 fc51 	bl	11a54 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   201b2:	4640      	mov	r0, r8
   201b4:	f7f2 fd0e 	bl	12bd4 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
   201b8:	7f23      	ldrb	r3, [r4, #28]
   201ba:	2b02      	cmp	r3, #2
   201bc:	f240 8179 	bls.w	204b2 <lv_draw_rect+0xf94>
    if(dsc->border_width == 0) return;
   201c0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
   201c4:	2b00      	cmp	r3, #0
   201c6:	f000 8174 	beq.w	204b2 <lv_draw_rect+0xf94>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
   201ca:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
   201ce:	2b00      	cmp	r3, #0
   201d0:	f000 816f 	beq.w	204b2 <lv_draw_rect+0xf94>
    if(dsc->border_post) return;
   201d4:	7fa3      	ldrb	r3, [r4, #30]
   201d6:	07d9      	lsls	r1, r3, #31
   201d8:	f100 816b 	bmi.w	204b2 <lv_draw_rect+0xf94>
   201dc:	9b05      	ldr	r3, [sp, #20]
   201de:	9a05      	ldr	r2, [sp, #20]
   201e0:	889b      	ldrh	r3, [r3, #4]
   201e2:	8816      	ldrh	r6, [r2, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   201e4:	9905      	ldr	r1, [sp, #20]
   201e6:	88d2      	ldrh	r2, [r2, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   201e8:	3301      	adds	r3, #1
   201ea:	1b9b      	subs	r3, r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   201ec:	884e      	ldrh	r6, [r1, #2]
   201ee:	3201      	adds	r2, #1
   201f0:	1b92      	subs	r2, r2, r6
    int32_t coords_h = lv_area_get_height(coords);
   201f2:	b216      	sxth	r6, r2
    int32_t coords_w = lv_area_get_width(coords);
   201f4:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   201f6:	42b3      	cmp	r3, r6
   201f8:	bfa8      	it	ge
   201fa:	4633      	movge	r3, r6
    int32_t rout = dsc->radius;
   201fc:	f9b4 b000 	ldrsh.w	fp, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
   20200:	105e      	asrs	r6, r3, #1
   20202:	45b3      	cmp	fp, r6
    lv_area_copy(&area_inner, coords);
   20204:	a816      	add	r0, sp, #88	; 0x58
   20206:	bfa8      	it	ge
   20208:	46b3      	movge	fp, r6
   2020a:	f7ff f8b2 	bl	1f372 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   2020e:	8b60      	ldrh	r0, [r4, #26]
   20210:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
   20214:	f010 0f04 	tst.w	r0, #4
   20218:	bf14      	ite	ne
   2021a:	461a      	movne	r2, r3
   2021c:	8b22      	ldrheq	r2, [r4, #24]
   2021e:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
   20222:	bf02      	ittt	eq
   20224:	445a      	addeq	r2, fp
   20226:	4252      	negeq	r2, r2
   20228:	b212      	sxtheq	r2, r2
   2022a:	442a      	add	r2, r5
   2022c:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   20230:	0702      	lsls	r2, r0, #28
   20232:	bf4c      	ite	mi
   20234:	461a      	movmi	r2, r3
   20236:	eb03 020b 	addpl.w	r2, r3, fp
   2023a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
   2023e:	bf5c      	itt	pl
   20240:	4252      	negpl	r2, r2
   20242:	b212      	sxthpl	r2, r2
   20244:	1ab2      	subs	r2, r6, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   20246:	0787      	lsls	r7, r0, #30
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   20248:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   2024c:	bf48      	it	mi
   2024e:	461a      	movmi	r2, r3
   20250:	461d      	mov	r5, r3
   20252:	bf5c      	itt	pl
   20254:	eb03 020b 	addpl.w	r2, r3, fp
   20258:	4252      	negpl	r2, r2
   2025a:	f9bd 605a 	ldrsh.w	r6, [sp, #90]	; 0x5a
   2025e:	bf58      	it	pl
   20260:	b212      	sxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   20262:	07c0      	lsls	r0, r0, #31
   20264:	bf58      	it	pl
   20266:	445b      	addpl	r3, fp
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   20268:	4432      	add	r2, r6
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   2026a:	bf58      	it	pl
   2026c:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   2026e:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   20272:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
   20276:	bf58      	it	pl
   20278:	b21d      	sxthpl	r5, r3
   2027a:	1b53      	subs	r3, r2, r5
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   2027c:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   20280:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
   20284:	7f23      	ldrb	r3, [r4, #28]
   20286:	290f      	cmp	r1, #15
   20288:	9306      	str	r3, [sp, #24]
   2028a:	f040 84fc 	bne.w	20c86 <lv_draw_rect+0x1768>
        draw_full_border(&area_inner, coords, clip, dsc->radius, dsc->border_color, dsc->border_opa, dsc->border_blend_mode);
   2028e:	f9b4 3000 	ldrsh.w	r3, [r4]
   20292:	6965      	ldr	r5, [r4, #20]
   20294:	9309      	str	r3, [sp, #36]	; 0x24
   20296:	7f63      	ldrb	r3, [r4, #29]
   20298:	9307      	str	r3, [sp, #28]
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   2029a:	f7f1 fc01 	bl	11aa0 <lv_draw_mask_get_cnt>
   2029e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   202a2:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   202a6:	930a      	str	r3, [sp, #40]	; 0x28
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   202a8:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   202aa:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
   202ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   202b2:	f9bd 405e 	ldrsh.w	r4, [sp, #94]	; 0x5e
   202b6:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   202b8:	9b05      	ldr	r3, [sp, #20]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   202ba:	900c      	str	r0, [sp, #48]	; 0x30
   202bc:	f9b3 9000 	ldrsh.w	r9, [r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   202c0:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
   202c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   202c8:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    if(rout > short_side >> 1) rout = short_side >> 1;

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   202ca:	f7ef febb 	bl	10044 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   202ce:	f000 fe1d 	bl	20f0c <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   202d2:	4652      	mov	r2, sl
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   202d4:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   202d6:	9905      	ldr	r1, [sp, #20]
   202d8:	a818      	add	r0, sp, #96	; 0x60
   202da:	f000 fe93 	bl	21004 <_lv_area_intersect>
    if(is_common == false) return;
   202de:	2800      	cmp	r0, #0
   202e0:	f000 80e7 	beq.w	204b2 <lv_draw_rect+0xf94>
   202e4:	1c72      	adds	r2, r6, #1
   202e6:	b213      	sxth	r3, r2
   202e8:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   202ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   202ec:	1c62      	adds	r2, r4, #1
   202ee:	1b9e      	subs	r6, r3, r6
   202f0:	b233      	sxth	r3, r6
   202f2:	9308      	str	r3, [sp, #32]
   202f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   202f6:	3701      	adds	r7, #1
   202f8:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   202fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    int32_t inner_h = lv_area_get_height(area_inner);
   202fc:	b212      	sxth	r2, r2
   202fe:	eba3 0808 	sub.w	r8, r3, r8
    int32_t inner_w = lv_area_get_width(area_inner);
   20302:	fa0f f888 	sxth.w	r8, r8
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
   20306:	4542      	cmp	r2, r8
   20308:	bfa8      	it	ge
   2030a:	4642      	movge	r2, r8
   2030c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
   2030e:	1052      	asrs	r2, r2, #1
   20310:	429a      	cmp	r2, r3
   20312:	bfa8      	it	ge
   20314:	461a      	movge	r2, r3
   20316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    int32_t rout = rin + border_width;
   20318:	fa02 f686 	sxtah	r6, r2, r6
   2031c:	1c59      	adds	r1, r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2031e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20320:	eba1 0909 	sub.w	r9, r1, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   20324:	1afb      	subs	r3, r7, r3
    int32_t coords_out_w = lv_area_get_width(area_outer);
   20326:	fa0f f989 	sxth.w	r9, r9
    int32_t coords_out_h = lv_area_get_height(area_outer);
   2032a:	b21b      	sxth	r3, r3
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
   2032c:	4599      	cmp	r9, r3
   2032e:	bfa8      	it	ge
   20330:	4699      	movge	r9, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
   20332:	ea4f 0969 	mov.w	r9, r9, asr #1
   20336:	45b1      	cmp	r9, r6
   20338:	464b      	mov	r3, r9
   2033a:	bfa8      	it	ge
   2033c:	4633      	movge	r3, r6

    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
   2033e:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
   20342:	f9bd 6064 	ldrsh.w	r6, [sp, #100]	; 0x64
   20346:	9309      	str	r3, [sp, #36]	; 0x24
    draw_area.x1 -= disp_area->x1;
   20348:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
    draw_area.y1 -= disp_area->y1;
   2034c:	f8bd 4062 	ldrh.w	r4, [sp, #98]	; 0x62
    draw_area.x1 -= disp_area->x1;
   20350:	1ac8      	subs	r0, r1, r3
    draw_area.x2 -= disp_area->x1;
   20352:	1af3      	subs	r3, r6, r3
    draw_area.x1 -= disp_area->x1;
   20354:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
   20358:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    draw_area.x2 -= disp_area->x1;
   2035c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
   20360:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20364:	3601      	adds	r6, #1
   20366:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   20368:	1a24      	subs	r4, r4, r0

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   2036a:	b212      	sxth	r2, r2
    draw_area.y2 -= disp_area->y1;
   2036c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
   20370:	1a76      	subs	r6, r6, r1
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   20372:	2301      	movs	r3, #1
   20374:	a916      	add	r1, sp, #88	; 0x58
   20376:	a81e      	add	r0, sp, #120	; 0x78
    draw_area.y1 -= disp_area->y1;
   20378:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   2037c:	f7f1 fc22 	bl	11bc4 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   20380:	2100      	movs	r1, #0
   20382:	a81e      	add	r0, sp, #120	; 0x78
   20384:	f7f1 fb1e 	bl	119c4 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   20388:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
   2038c:	2300      	movs	r3, #0
   2038e:	464a      	mov	r2, r9
   20390:	9905      	ldr	r1, [sp, #20]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   20392:	900e      	str	r0, [sp, #56]	; 0x38
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   20394:	a825      	add	r0, sp, #148	; 0x94
   20396:	f7f1 fc15 	bl	11bc4 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   2039a:	2100      	movs	r1, #0
   2039c:	a825      	add	r0, sp, #148	; 0x94
   2039e:	f7f1 fb11 	bl	119c4 <lv_draw_mask_add>
   203a2:	b236      	sxth	r6, r6
   203a4:	900f      	str	r0, [sp, #60]	; 0x3c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   203a6:	4630      	mov	r0, r6
   203a8:	f7f2 fbb2 	bl	12b10 <_lv_mem_buf_get>
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
   203ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   203ae:	4604      	mov	r4, r0
    if(simple_mode) {
   203b0:	2b00      	cmp	r3, #0
   203b2:	f040 8427 	bne.w	20c04 <lv_draw_rect+0x16e6>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   203b6:	9b08      	ldr	r3, [sp, #32]
   203b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   203ba:	3b01      	subs	r3, #1
   203bc:	4293      	cmp	r3, r2
   203be:	bfb8      	it	lt
   203c0:	4613      	movlt	r3, r2
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
   203c2:	9a05      	ldr	r2, [sp, #20]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   203c4:	930a      	str	r3, [sp, #40]	; 0x28
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
   203c6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
   203ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   203cc:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   203d0:	440a      	add	r2, r1
   203d2:	eba2 0803 	sub.w	r8, r2, r3

        fill_area.x1 = area_outer->x1;
   203d6:	9a05      	ldr	r2, [sp, #20]
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   203d8:	f9bd 7062 	ldrsh.w	r7, [sp, #98]	; 0x62
        fill_area.x1 = area_outer->x1;
   203dc:	8812      	ldrh	r2, [r2, #0]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   203de:	443b      	add	r3, r7
        fill_area.x1 = area_outer->x1;
   203e0:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        fill_area.x2 = area_outer->x2;
   203e4:	9a05      	ldr	r2, [sp, #20]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   203e6:	b21b      	sxth	r3, r3
        fill_area.x2 = area_outer->x2;
   203e8:	8892      	ldrh	r2, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   203ea:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.x2 = area_outer->x2;
   203ee:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        fill_area.y2 = fill_area.y1;
   203f2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   203f6:	45b8      	cmp	r8, r7
   203f8:	f280 8307 	bge.w	20a0a <lv_draw_rect+0x14ec>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   203fc:	9a05      	ldr	r2, [sp, #20]
   203fe:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   20402:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
   20406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20408:	1abf      	subs	r7, r7, r2
   2040a:	1aff      	subs	r7, r7, r3
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   2040c:	45b8      	cmp	r8, r7
   2040e:	bfa8      	it	ge
   20410:	f108 0701 	addge.w	r7, r8, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
   20414:	443b      	add	r3, r7
   20416:	b21b      	sxth	r3, r3
   20418:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   2041c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   20420:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   20424:	429f      	cmp	r7, r3
   20426:	f340 836f 	ble.w	20b08 <lv_draw_rect+0x15ea>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   2042a:	2601      	movs	r6, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
   2042c:	9b05      	ldr	r3, [sp, #20]
   2042e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20430:	885b      	ldrh	r3, [r3, #2]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20432:	4650      	mov	r0, sl
        fill_area.y1 = area_outer->y1 + corner_size + 1;
   20434:	3301      	adds	r3, #1
   20436:	fa03 f382 	sxtah	r3, r3, r2
   2043a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   2043e:	9b05      	ldr	r3, [sp, #20]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20440:	a91a      	add	r1, sp, #104	; 0x68
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   20442:	88db      	ldrh	r3, [r3, #6]
   20444:	3b01      	subs	r3, #1
   20446:	eba3 0b02 	sub.w	fp, r3, r2
        fill_area.x1 = area_outer->x1;
   2044a:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   2044c:	9a08      	ldr	r2, [sp, #32]
        fill_area.x1 = area_outer->x1;
   2044e:	f9b3 3000 	ldrsh.w	r3, [r3]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20452:	9600      	str	r6, [sp, #0]
        fill_area.x1 = area_outer->x1;
   20454:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        fill_area.x2 = area_outer->x1 + border_width - 1;
   20458:	3b01      	subs	r3, #1
   2045a:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   2045c:	9b07      	ldr	r3, [sp, #28]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   2045e:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20462:	9302      	str	r3, [sp, #8]
   20464:	9b06      	ldr	r3, [sp, #24]
   20466:	462a      	mov	r2, r5
   20468:	9301      	str	r3, [sp, #4]
   2046a:	2300      	movs	r3, #0
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   2046c:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20470:	f7fd fb12 	bl	1da98 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
   20474:	9b05      	ldr	r3, [sp, #20]
   20476:	990b      	ldr	r1, [sp, #44]	; 0x2c
   20478:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2047c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        fill_area.x2 = area_outer->x2;
   2047e:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        fill_area.x1 = area_outer->x2 - border_width + 1;
   20482:	4413      	add	r3, r2
   20484:	1a5b      	subs	r3, r3, r1
   20486:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   2048a:	9b07      	ldr	r3, [sp, #28]
   2048c:	462a      	mov	r2, r5
   2048e:	9302      	str	r3, [sp, #8]
   20490:	9b06      	ldr	r3, [sp, #24]
   20492:	4650      	mov	r0, sl
   20494:	e9cd 6300 	strd	r6, r3, [sp]
   20498:	a91a      	add	r1, sp, #104	; 0x68
   2049a:	2300      	movs	r3, #0
   2049c:	f7fd fafc 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
   204a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   204a2:	f7f1 fad7 	bl	11a54 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
   204a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   204a8:	f7f1 fad4 	bl	11a54 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   204ac:	4620      	mov	r0, r4
        _lv_mem_buf_release(mask_buf);
   204ae:	f7f2 fb91 	bl	12bd4 <_lv_mem_buf_release>
}
   204b2:	b02d      	add	sp, #180	; 0xb4
   204b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204b8:	4631      	mov	r1, r6
   204ba:	463a      	mov	r2, r7
   204bc:	4628      	mov	r0, r5
   204be:	f7f8 fea3 	bl	19208 <memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   204c2:	463b      	mov	r3, r7
   204c4:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   204c8:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   204cc:	4628      	mov	r0, r5
   204ce:	f7f1 fa9f 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   204d2:	2801      	cmp	r0, #1
   204d4:	bf08      	it	eq
   204d6:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   204d8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   204dc:	4641      	mov	r1, r8
   204de:	9302      	str	r3, [sp, #8]
   204e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
   204e2:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   204e6:	e9cd 0300 	strd	r0, r3, [sp]
   204ea:	462b      	mov	r3, r5
   204ec:	4650      	mov	r0, sl
   204ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   204f0:	f7fd fad2 	bl	1da98 <_lv_blend_fill>
                fa.y1++;
   204f4:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   204f8:	3301      	adds	r3, #1
   204fa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2++;
   204fe:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   20502:	3301      	adds	r3, #1
   20504:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                sh_buf_tmp += corner_size;
   20508:	9b06      	ldr	r3, [sp, #24]
   2050a:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
   2050c:	f7ff bbf8 	b.w	1fd00 <lv_draw_rect+0x7e2>
   20510:	4639      	mov	r1, r7
   20512:	4632      	mov	r2, r6
   20514:	4628      	mov	r0, r5
   20516:	f7f8 fe77 	bl	19208 <memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   2051a:	4633      	mov	r3, r6
   2051c:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   20520:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   20524:	4628      	mov	r0, r5
   20526:	f7f1 fa73 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   2052a:	2801      	cmp	r0, #1
   2052c:	bf08      	it	eq
   2052e:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   20530:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   20534:	4641      	mov	r1, r8
   20536:	9302      	str	r3, [sp, #8]
   20538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
   2053a:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   2053e:	e9cd 0300 	strd	r0, r3, [sp]
   20542:	462b      	mov	r3, r5
   20544:	4650      	mov	r0, sl
   20546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20548:	f7fd faa6 	bl	1da98 <_lv_blend_fill>
                fa.y1--;
   2054c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   20550:	3b01      	subs	r3, #1
   20552:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2--;
   20556:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   2055a:	3b01      	subs	r3, #1
   2055c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                sh_buf_tmp += corner_size;
   20560:	9b06      	ldr	r3, [sp, #24]
   20562:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
   20564:	e42b      	b.n	1fdbe <lv_draw_rect+0x8a0>
   20566:	4632      	mov	r2, r6
   20568:	4639      	mov	r1, r7
   2056a:	4628      	mov	r0, r5
   2056c:	f7f8 fe4c 	bl	19208 <memcpy>
                if(simple_mode) {
   20570:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20572:	b94b      	cbnz	r3, 20588 <lv_draw_rect+0x106a>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   20574:	4633      	mov	r3, r6
   20576:	4628      	mov	r0, r5
   20578:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   2057c:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   20580:	f7f1 fa46 	bl	11a10 <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   20584:	2801      	cmp	r0, #1
   20586:	d100      	bne.n	2058a <lv_draw_rect+0x106c>
   20588:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
   2058a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2058e:	4641      	mov	r1, r8
   20590:	9302      	str	r3, [sp, #8]
   20592:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            for(y = 0; y < h; y++) {
   20596:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
   2059a:	e9cd 0300 	strd	r0, r3, [sp]
   2059e:	462b      	mov	r3, r5
   205a0:	4650      	mov	r0, sl
   205a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   205a4:	f7fd fa78 	bl	1da98 <_lv_blend_fill>
                fa.y1++;
   205a8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
   205ac:	3301      	adds	r3, #1
   205ae:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fa.y2++;
   205b2:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   205b6:	3301      	adds	r3, #1
   205b8:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            for(y = 0; y < h; y++) {
   205bc:	e457      	b.n	1fe6e <lv_draw_rect+0x950>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
   205be:	7833      	ldrb	r3, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
   205c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    memset(dst, v, len);
   205c2:	4628      	mov	r0, r5
   205c4:	ea02 0103 	and.w	r1, r2, r3
   205c8:	29ff      	cmp	r1, #255	; 0xff
   205ca:	bf18      	it	ne
   205cc:	fb12 f303 	smulbbne	r3, r2, r3
   205d0:	463a      	mov	r2, r7
   205d2:	bf18      	it	ne
   205d4:	f3c3 2107 	ubfxne	r1, r3, #8, #8
   205d8:	f7f8 fe41 	bl	1925e <memset>
            if(simple_mode) {
   205dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   205de:	b94b      	cbnz	r3, 205f4 <lv_draw_rect+0x10d6>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   205e0:	463b      	mov	r3, r7
   205e2:	4628      	mov	r0, r5
   205e4:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   205e8:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   205ec:	f7f1 fa10 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   205f0:	2801      	cmp	r0, #1
   205f2:	d100      	bne.n	205f6 <lv_draw_rect+0x10d8>
   205f4:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   205f6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   205fa:	4641      	mov	r1, r8
   205fc:	9302      	str	r3, [sp, #8]
   205fe:	23ff      	movs	r3, #255	; 0xff
   20600:	e9cd 0300 	strd	r0, r3, [sp]
   20604:	462b      	mov	r3, r5
   20606:	4650      	mov	r0, sl
   20608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2060a:	f7fd fa45 	bl	1da98 <_lv_blend_fill>
            fa.y1++;
   2060e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
   20612:	f109 0901 	add.w	r9, r9, #1
            fa.y1++;
   20616:	3301      	adds	r3, #1
   20618:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fa.y2++;
   2061c:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   20620:	3301      	adds	r3, #1
   20622:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            sh_buf_tmp += corner_size;
   20626:	9b06      	ldr	r3, [sp, #24]
   20628:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
   2062a:	e474      	b.n	1ff16 <lv_draw_rect+0x9f8>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
   2062c:	7833      	ldrb	r3, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
   2062e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20630:	4628      	mov	r0, r5
   20632:	ea02 0103 	and.w	r1, r2, r3
   20636:	29ff      	cmp	r1, #255	; 0xff
   20638:	bf18      	it	ne
   2063a:	fb12 f303 	smulbbne	r3, r2, r3
   2063e:	463a      	mov	r2, r7
   20640:	bf18      	it	ne
   20642:	f3c3 2107 	ubfxne	r1, r3, #8, #8
   20646:	f7f8 fe0a 	bl	1925e <memset>
            if(simple_mode) {
   2064a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2064c:	b94b      	cbnz	r3, 20662 <lv_draw_rect+0x1144>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   2064e:	463b      	mov	r3, r7
   20650:	4628      	mov	r0, r5
   20652:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   20656:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   2065a:	f7f1 f9d9 	bl	11a10 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   2065e:	2801      	cmp	r0, #1
   20660:	d100      	bne.n	20664 <lv_draw_rect+0x1146>
   20662:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   20664:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   20668:	4641      	mov	r1, r8
   2066a:	9302      	str	r3, [sp, #8]
   2066c:	23ff      	movs	r3, #255	; 0xff
   2066e:	e9cd 0300 	strd	r0, r3, [sp]
   20672:	462b      	mov	r3, r5
   20674:	4650      	mov	r0, sl
   20676:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20678:	f7fd fa0e 	bl	1da98 <_lv_blend_fill>
            fa.y1--;
   2067c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
   20680:	f109 0901 	add.w	r9, r9, #1
            fa.y1--;
   20684:	3b01      	subs	r3, #1
   20686:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fa.y2--;
   2068a:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   2068e:	3b01      	subs	r3, #1
   20690:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            sh_buf_tmp += corner_size;
   20694:	9b06      	ldr	r3, [sp, #24]
   20696:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
   20698:	e492      	b.n	1ffc0 <lv_draw_rect+0xaa2>
   2069a:	463a      	mov	r2, r7
   2069c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   206a0:	4628      	mov	r0, r5
   206a2:	f7f8 fddc 	bl	1925e <memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
   206a6:	463b      	mov	r3, r7
   206a8:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
   206ac:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
   206b0:	4628      	mov	r0, r5
   206b2:	f7f1 f9ad 	bl	11a10 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
   206b6:	2801      	cmp	r0, #1
   206b8:	bf08      	it	eq
   206ba:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
   206bc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   206c0:	9000      	str	r0, [sp, #0]
   206c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
   206c6:	4650      	mov	r0, sl
   206c8:	462b      	mov	r3, r5
   206ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   206cc:	a91e      	add	r1, sp, #120	; 0x78
   206ce:	f7fd f9e3 	bl	1da98 <_lv_blend_fill>
            fa.y1++;
   206d2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
   206d6:	3601      	adds	r6, #1
            fa.y1++;
   206d8:	3301      	adds	r3, #1
   206da:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fa.y2++;
   206de:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
   206e2:	3301      	adds	r3, #1
   206e4:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(y = 0; y < h; y++) {
   206e8:	e4ac      	b.n	20044 <lv_draw_rect+0xb26>
    if(other_mask_cnt) simple_mode = false;
   206ea:	2300      	movs	r3, #0
   206ec:	e52e      	b.n	2014c <lv_draw_rect+0xc2e>
        if(rout > 0) {
   206ee:	2d00      	cmp	r5, #0
   206f0:	f340 80a0 	ble.w	20834 <lv_draw_rect+0x1316>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
   206f4:	2300      	movs	r3, #0
   206f6:	462a      	mov	r2, r5
   206f8:	a918      	add	r1, sp, #96	; 0x60
   206fa:	a825      	add	r0, sp, #148	; 0x94
   206fc:	f7f1 fa62 	bl	11bc4 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   20700:	2100      	movs	r1, #0
   20702:	a825      	add	r0, sp, #148	; 0x94
   20704:	f7f1 f95e 	bl	119c4 <lv_draw_mask_add>
   20708:	900d      	str	r0, [sp, #52]	; 0x34
        lv_color_t grad_color = dsc->bg_color;
   2070a:	6863      	ldr	r3, [r4, #4]
        if(grad_dir == LV_GRAD_DIR_HOR) {
   2070c:	2e02      	cmp	r6, #2
        lv_color_t grad_color = dsc->bg_color;
   2070e:	9308      	str	r3, [sp, #32]
        if(grad_dir == LV_GRAD_DIR_HOR) {
   20710:	f040 80a0 	bne.w	20854 <lv_draw_rect+0x1336>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   20714:	00b8      	lsls	r0, r7, #2
   20716:	f7f2 f9fb 	bl	12b10 <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
   2071a:	f04f 0900 	mov.w	r9, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   2071e:	900b      	str	r0, [sp, #44]	; 0x2c
            for(i = 0; i < coords_w; i++) {
   20720:	454f      	cmp	r7, r9
   20722:	f300 808b 	bgt.w	2083c <lv_draw_rect+0x131e>
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
   20726:	f06f 0301 	mvn.w	r3, #1
   2072a:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
   2072e:	436b      	muls	r3, r5
   20730:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
   20734:	1c4a      	adds	r2, r1, #1
   20736:	1a12      	subs	r2, r2, r0
   20738:	fa03 f382 	sxtah	r3, r3, r2
   2073c:	930f      	str	r3, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   2073e:	9b06      	ldr	r3, [sp, #24]
   20740:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
   20744:	8a5b      	ldrh	r3, [r3, #18]
        fill_area.x1 = coords_bg.x1;
   20746:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   2074a:	4413      	add	r3, r2
   2074c:	b21b      	sxth	r3, r3
   2074e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
   20752:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   20756:	b22b      	sxth	r3, r5
        fill_area.x2 = coords_bg.x2;
   20758:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   2075c:	9207      	str	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   2075e:	930e      	str	r3, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20760:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
   20764:	9a07      	ldr	r2, [sp, #28]
   20766:	429a      	cmp	r2, r3
   20768:	dd77      	ble.n	2085a <lv_draw_rect+0x133c>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
   2076a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2076c:	4333      	orrs	r3, r6
   2076e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20772:	d157      	bne.n	20824 <lv_draw_rect+0x1306>
   20774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20776:	2a32      	cmp	r2, #50	; 0x32
   20778:	dd54      	ble.n	20824 <lv_draw_rect+0x1306>
            fill_area.x1 = coords_bg.x1 + rout;
   2077a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   2077e:	b22f      	sxth	r7, r5
   20780:	442a      	add	r2, r5
   20782:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            fill_area.x2 = coords_bg.x2 - rout;
   20786:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
            _lv_blend_fill(clip, &fill_area,
   2078a:	4650      	mov	r0, sl
            fill_area.x2 = coords_bg.x2 - rout;
   2078c:	1b52      	subs	r2, r2, r5
   2078e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
            fill_area.y1 = coords_bg.y1;
   20792:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
            _lv_blend_fill(clip, &fill_area,
   20796:	a91c      	add	r1, sp, #112	; 0x70
            fill_area.y2 = coords_bg.y1 + rout;
   20798:	4415      	add	r5, r2
            fill_area.y1 = coords_bg.y1;
   2079a:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
   2079e:	7ce2      	ldrb	r2, [r4, #19]
            fill_area.y2 = coords_bg.y1 + rout;
   207a0:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
   207a4:	e9cd b201 	strd	fp, r2, [sp, #4]
   207a8:	2201      	movs	r2, #1
            _lv_blend_fill(clip, &fill_area,
   207aa:	2501      	movs	r5, #1
            _lv_blend_fill(clip, &fill_area,
   207ac:	9200      	str	r2, [sp, #0]
   207ae:	6862      	ldr	r2, [r4, #4]
   207b0:	f7fd f972 	bl	1da98 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
   207b4:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   207b8:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
            fill_area.y1 = coords_bg.y2 - rout;
   207bc:	1bca      	subs	r2, r1, r7
   207be:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   207c0:	429a      	cmp	r2, r3
   207c2:	bfd8      	it	le
   207c4:	3301      	addle	r3, #1
            fill_area.y1 = coords_bg.y2 - rout;
   207c6:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   207ca:	bfd8      	it	le
   207cc:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
   207d0:	7ce3      	ldrb	r3, [r4, #19]
   207d2:	9500      	str	r5, [sp, #0]
   207d4:	e9cd b301 	strd	fp, r3, [sp, #4]
   207d8:	4650      	mov	r0, sl
   207da:	2300      	movs	r3, #0
   207dc:	6862      	ldr	r2, [r4, #4]
            fill_area.y2 = coords_bg.y2;
   207de:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
   207e2:	a91c      	add	r1, sp, #112	; 0x70
   207e4:	f7fd f958 	bl	1da98 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
   207e8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
   207ec:	4650      	mov	r0, sl
            fill_area.x1 = coords_bg.x1;
   207ee:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.x2 = coords_bg.x2;
   207f2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            _lv_blend_fill(clip, &fill_area,
   207f6:	a91c      	add	r1, sp, #112	; 0x70
            fill_area.x2 = coords_bg.x2;
   207f8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            fill_area.y1 = coords_bg.y1 + rout + 1;
   207fc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   20800:	442b      	add	r3, r5
   20802:	443b      	add	r3, r7
   20804:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2 = coords_bg.y2 - rout - 1;
   20808:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   2080c:	3b01      	subs	r3, #1
   2080e:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
   20810:	7ce3      	ldrb	r3, [r4, #19]
   20812:	9500      	str	r5, [sp, #0]
   20814:	e9cd b301 	strd	fp, r3, [sp, #4]
   20818:	2300      	movs	r3, #0
   2081a:	6862      	ldr	r2, [r4, #4]
            fill_area.y2 = coords_bg.y2 - rout - 1;
   2081c:	f8ad 7076 	strh.w	r7, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
   20820:	f7fd f93a 	bl	1da98 <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
   20824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20826:	2b00      	cmp	r3, #0
   20828:	f43f acc0 	beq.w	201ac <lv_draw_rect+0xc8e>
   2082c:	4618      	mov	r0, r3
   2082e:	f7f2 f9d1 	bl	12bd4 <_lv_mem_buf_release>
   20832:	e4bb      	b.n	201ac <lv_draw_rect+0xc8e>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   20834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20838:	930d      	str	r3, [sp, #52]	; 0x34
   2083a:	e766      	b.n	2070a <lv_draw_rect+0x11ec>
                grad_map[i] = grad_get(dsc, coords_w, i);
   2083c:	fa0f f289 	sxth.w	r2, r9
   20840:	4639      	mov	r1, r7
   20842:	4620      	mov	r0, r4
   20844:	f7fe fd51 	bl	1f2ea <grad_get>
   20848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2084a:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            for(i = 0; i < coords_w; i++) {
   2084e:	f109 0901 	add.w	r9, r9, #1
   20852:	e765      	b.n	20720 <lv_draw_rect+0x1202>
        lv_color_t * grad_map = NULL;
   20854:	2300      	movs	r3, #0
   20856:	930b      	str	r3, [sp, #44]	; 0x2c
   20858:	e765      	b.n	20726 <lv_draw_rect+0x1208>
            int32_t y = h + vdb->area.y1;
   2085a:	9b06      	ldr	r3, [sp, #24]
   2085c:	9a07      	ldr	r2, [sp, #28]
   2085e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
   20862:	4413      	add	r3, r2
   20864:	930c      	str	r3, [sp, #48]	; 0x30
            if(y > coords_bg.y1 + rout + 1 &&
   20866:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
   2086a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2086c:	3301      	adds	r3, #1
   2086e:	442b      	add	r3, r5
   20870:	429a      	cmp	r2, r3
   20872:	dd09      	ble.n	20888 <lv_draw_rect+0x136a>
               y < coords_bg.y2 - rout - 1) {
   20874:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   20878:	3b01      	subs	r3, #1
   2087a:	1b5b      	subs	r3, r3, r5
            if(y > coords_bg.y1 + rout + 1 &&
   2087c:	429a      	cmp	r2, r3
   2087e:	da03      	bge.n	20888 <lv_draw_rect+0x136a>
                if(simple_mode == false) {
   20880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20882:	2b00      	cmp	r3, #0
   20884:	f040 82ee 	bne.w	20e64 <lv_draw_rect+0x1946>
   20888:	4659      	mov	r1, fp
   2088a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2088c:	4640      	mov	r0, r8
   2088e:	f7f8 fce6 	bl	1925e <memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20892:	9b06      	ldr	r3, [sp, #24]
   20894:	4640      	mov	r0, r8
   20896:	8a5a      	ldrh	r2, [r3, #18]
   20898:	9b07      	ldr	r3, [sp, #28]
   2089a:	441a      	add	r2, r3
   2089c:	9b06      	ldr	r3, [sp, #24]
   2089e:	b212      	sxth	r2, r2
   208a0:	8a19      	ldrh	r1, [r3, #16]
   208a2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   208a6:	4419      	add	r1, r3
   208a8:	b209      	sxth	r1, r1
   208aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   208ac:	f7f1 f8b0 	bl	11a10 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
   208b0:	2802      	cmp	r0, #2
   208b2:	bf14      	ite	ne
   208b4:	46d9      	movne	r9, fp
   208b6:	f04f 09ff 	moveq.w	r9, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
   208ba:	2e01      	cmp	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   208bc:	4607      	mov	r7, r0
            if(grad_dir == LV_GRAD_DIR_VER) {
   208be:	d175      	bne.n	209ac <lv_draw_rect+0x148e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   208c0:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
   208c4:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   208c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   208ca:	3101      	adds	r1, #1
   208cc:	1ad2      	subs	r2, r2, r3
   208ce:	1ac9      	subs	r1, r1, r3
   208d0:	4620      	mov	r0, r4
   208d2:	b212      	sxth	r2, r2
   208d4:	b209      	sxth	r1, r1
   208d6:	f7fe fd08 	bl	1f2ea <grad_get>
            if(simple_mode && split &&
   208da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   208dc:	9008      	str	r0, [sp, #32]
            if(simple_mode && split &&
   208de:	2b00      	cmp	r3, #0
   208e0:	f000 808b 	beq.w	209fa <lv_draw_rect+0x14dc>
   208e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   208e6:	2b32      	cmp	r3, #50	; 0x32
   208e8:	dd6b      	ble.n	209c2 <lv_draw_rect+0x14a4>
               (y < coords_bg.y1 + rout + 1 ||
   208ea:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
            if(simple_mode && split &&
   208ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
               (y < coords_bg.y1 + rout + 1 ||
   208f0:	3301      	adds	r3, #1
   208f2:	442b      	add	r3, r5
            if(simple_mode && split &&
   208f4:	429a      	cmp	r2, r3
   208f6:	db05      	blt.n	20904 <lv_draw_rect+0x13e6>
                y > coords_bg.y2 - rout - 1)) {
   208f8:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   208fc:	3b01      	subs	r3, #1
   208fe:	1b5b      	subs	r3, r3, r5
               (y < coords_bg.y1 + rout + 1 ||
   20900:	429a      	cmp	r2, r3
   20902:	dd5e      	ble.n	209c2 <lv_draw_rect+0x14a4>
                fill_area2.x1 = coords_bg.x1;
   20904:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   20908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                fill_area2.x1 = coords_bg.x1;
   2090a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   2090e:	3b01      	subs	r3, #1
   20910:	4413      	add	r3, r2
   20912:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                fill_area2.y1 = fill_area.y1;
   20916:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
                _lv_blend_fill(clip, &fill_area2,
   2091a:	4650      	mov	r0, sl
                fill_area2.y1 = fill_area.y1;
   2091c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                fill_area2.y2 = fill_area.y2;
   20920:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fill_area2,
   20924:	9a08      	ldr	r2, [sp, #32]
                fill_area2.y2 = fill_area.y2;
   20926:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                _lv_blend_fill(clip, &fill_area2,
   2092a:	7ce3      	ldrb	r3, [r4, #19]
   2092c:	a91e      	add	r1, sp, #120	; 0x78
   2092e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   20932:	9700      	str	r7, [sp, #0]
   20934:	4643      	mov	r3, r8
   20936:	f7fd f8af 	bl	1da98 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
   2093a:	2e01      	cmp	r6, #1
   2093c:	d114      	bne.n	20968 <lv_draw_rect+0x144a>
                    fill_area2.x1 = coords_bg.x1 + rout;
   2093e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20940:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
   20944:	4650      	mov	r0, sl
                    fill_area2.x1 = coords_bg.x1 + rout;
   20946:	4413      	add	r3, r2
   20948:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                    fill_area2.x2 = coords_bg.x2 - rout;
   2094c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
                    _lv_blend_fill(clip, &fill_area2,
   20950:	a91e      	add	r1, sp, #120	; 0x78
                    fill_area2.x2 = coords_bg.x2 - rout;
   20952:	1a9b      	subs	r3, r3, r2
   20954:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                    _lv_blend_fill(clip, &fill_area2,
   20958:	7ce3      	ldrb	r3, [r4, #19]
   2095a:	9a08      	ldr	r2, [sp, #32]
   2095c:	e9cd b301 	strd	fp, r3, [sp, #4]
   20960:	9600      	str	r6, [sp, #0]
   20962:	2300      	movs	r3, #0
   20964:	f7fd f898 	bl	1da98 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   20968:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
   2096c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2096e:	1c53      	adds	r3, r2, #1
                fill_area2.x2 = coords_bg.x2;
   20970:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20974:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   20978:	1a59      	subs	r1, r3, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   2097a:	1a9b      	subs	r3, r3, r2
   2097c:	9a06      	ldr	r2, [sp, #24]
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   2097e:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20982:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   20986:	1b5b      	subs	r3, r3, r5
   20988:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
   2098a:	2b00      	cmp	r3, #0
   2098c:	bfac      	ite	ge
   2098e:	4443      	addge	r3, r8
   20990:	f108 0300 	addlt.w	r3, r8, #0
   20994:	7ce2      	ldrb	r2, [r4, #19]
   20996:	a91e      	add	r1, sp, #120	; 0x78
   20998:	e9cd 9201 	strd	r9, r2, [sp, #4]
   2099c:	9a08      	ldr	r2, [sp, #32]
   2099e:	9700      	str	r7, [sp, #0]
                    _lv_blend_fill(clip, &fill_area,
   209a0:	4650      	mov	r0, sl
   209a2:	f7fd f879 	bl	1da98 <_lv_blend_fill>
   209a6:	e018      	b.n	209da <lv_draw_rect+0x14bc>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   209a8:	4637      	mov	r7, r6
   209aa:	e789      	b.n	208c0 <lv_draw_rect+0x13a2>
            if(simple_mode && split &&
   209ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   209ae:	2b00      	cmp	r3, #0
   209b0:	d198      	bne.n	208e4 <lv_draw_rect+0x13c6>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   209b2:	2e02      	cmp	r6, #2
   209b4:	d007      	beq.n	209c6 <lv_draw_rect+0x14a8>
                else if(other_mask_cnt != 0 || !split) {
   209b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   209b8:	b9fb      	cbnz	r3, 209fa <lv_draw_rect+0x14dc>
   209ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   209bc:	2b32      	cmp	r3, #50	; 0x32
   209be:	dc0c      	bgt.n	209da <lv_draw_rect+0x14bc>
   209c0:	e01b      	b.n	209fa <lv_draw_rect+0x14dc>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   209c2:	2e02      	cmp	r6, #2
   209c4:	d117      	bne.n	209f6 <lv_draw_rect+0x14d8>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
   209c6:	7ce3      	ldrb	r3, [r4, #19]
   209c8:	4650      	mov	r0, sl
   209ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
   209ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   209d0:	4643      	mov	r3, r8
   209d2:	9700      	str	r7, [sp, #0]
   209d4:	a91c      	add	r1, sp, #112	; 0x70
   209d6:	f7fd faef 	bl	1dfb8 <_lv_blend_map>
            fill_area.y1++;
   209da:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   209de:	3301      	adds	r3, #1
   209e0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
   209e4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
   209e8:	3301      	adds	r3, #1
   209ea:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   209ee:	9b07      	ldr	r3, [sp, #28]
   209f0:	3301      	adds	r3, #1
   209f2:	9307      	str	r3, [sp, #28]
   209f4:	e6b4      	b.n	20760 <lv_draw_rect+0x1242>
                else if(grad_dir == LV_GRAD_DIR_VER) {
   209f6:	2e01      	cmp	r6, #1
   209f8:	d1dd      	bne.n	209b6 <lv_draw_rect+0x1498>
                    _lv_blend_fill(clip, &fill_area,
   209fa:	7ce3      	ldrb	r3, [r4, #19]
   209fc:	9a08      	ldr	r2, [sp, #32]
   209fe:	e9cd 9301 	strd	r9, r3, [sp, #4]
   20a02:	9700      	str	r7, [sp, #0]
   20a04:	4643      	mov	r3, r8
   20a06:	a91c      	add	r1, sp, #112	; 0x70
   20a08:	e7ca      	b.n	209a0 <lv_draw_rect+0x1482>
    memset(dst, 0xFF, len);
   20a0a:	4632      	mov	r2, r6
   20a0c:	21ff      	movs	r1, #255	; 0xff
   20a0e:	4620      	mov	r0, r4
   20a10:	f7f8 fc25 	bl	1925e <memset>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20a14:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   20a18:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   20a1c:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   20a20:	443a      	add	r2, r7
   20a22:	4419      	add	r1, r3
   20a24:	b212      	sxth	r2, r2
   20a26:	4633      	mov	r3, r6
   20a28:	b209      	sxth	r1, r1
   20a2a:	4620      	mov	r0, r4
   20a2c:	f7f0 fff0 	bl	11a10 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
   20a30:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20a34:	462a      	mov	r2, r5
            fill_area2.y1 = fill_area.y1;
   20a36:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area2.y2 = fill_area.y2;
   20a3a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20a3e:	900c      	str	r0, [sp, #48]	; 0x30
            fill_area2.y2 = fill_area.y2;
   20a40:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fill_area2.x1 = area_outer->x1;
   20a44:	9b05      	ldr	r3, [sp, #20]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20a46:	a91c      	add	r1, sp, #112	; 0x70
            fill_area2.x1 = area_outer->x1;
   20a48:	f9b3 3000 	ldrsh.w	r3, [r3]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20a4c:	9000      	str	r0, [sp, #0]
            fill_area2.x1 = area_outer->x1;
   20a4e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area2.x2 = area_outer->x1 + rout - 1;
   20a52:	3b01      	subs	r3, #1
   20a54:	444b      	add	r3, r9
   20a56:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20a5a:	9b07      	ldr	r3, [sp, #28]
   20a5c:	4650      	mov	r0, sl
   20a5e:	9302      	str	r3, [sp, #8]
   20a60:	9b06      	ldr	r3, [sp, #24]
   20a62:	9301      	str	r3, [sp, #4]
   20a64:	4623      	mov	r3, r4
   20a66:	f7fd f817 	bl	1da98 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
   20a6a:	9b05      	ldr	r3, [sp, #20]
   20a6c:	9908      	ldr	r1, [sp, #32]
   20a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   20a72:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
   20a76:	440b      	add	r3, r1
   20a78:	429a      	cmp	r2, r3
   20a7a:	da16      	bge.n	20aaa <lv_draw_rect+0x158c>
                fill_area2.x1 = area_outer->x1 + rout;
   20a7c:	9b05      	ldr	r3, [sp, #20]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20a7e:	462a      	mov	r2, r5
                fill_area2.x1 = area_outer->x1 + rout;
   20a80:	881b      	ldrh	r3, [r3, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20a82:	4650      	mov	r0, sl
                fill_area2.x1 = area_outer->x1 + rout;
   20a84:	444b      	add	r3, r9
   20a86:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                fill_area2.x2 = area_outer->x2 - rout;
   20a8a:	9b05      	ldr	r3, [sp, #20]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20a8c:	a91c      	add	r1, sp, #112	; 0x70
                fill_area2.x2 = area_outer->x2 - rout;
   20a8e:	889b      	ldrh	r3, [r3, #4]
   20a90:	eba3 0309 	sub.w	r3, r3, r9
   20a94:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20a98:	9b07      	ldr	r3, [sp, #28]
   20a9a:	9302      	str	r3, [sp, #8]
   20a9c:	9b06      	ldr	r3, [sp, #24]
   20a9e:	9301      	str	r3, [sp, #4]
   20aa0:	2301      	movs	r3, #1
   20aa2:	9300      	str	r3, [sp, #0]
   20aa4:	2300      	movs	r3, #0
   20aa6:	f7fc fff7 	bl	1da98 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20aaa:	9b05      	ldr	r3, [sp, #20]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20aac:	4650      	mov	r0, sl
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20aae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20ab2:	a91c      	add	r1, sp, #112	; 0x70
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20ab4:	1c53      	adds	r3, r2, #1
   20ab6:	eba3 0309 	sub.w	r3, r3, r9
   20aba:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20abe:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
            fill_area2.x2 = area_outer->x2;
   20ac2:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20ac6:	f1c3 0301 	rsb	r3, r3, #1
   20aca:	4413      	add	r3, r2
   20acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   20ace:	3701      	adds	r7, #1
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20ad0:	1a9b      	subs	r3, r3, r2
   20ad2:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   20ad6:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20ad8:	9a07      	ldr	r2, [sp, #28]
   20ada:	2b00      	cmp	r3, #0
   20adc:	bfac      	ite	ge
   20ade:	18e3      	addge	r3, r4, r3
   20ae0:	1c23      	addlt	r3, r4, #0
   20ae2:	9202      	str	r2, [sp, #8]
   20ae4:	9a06      	ldr	r2, [sp, #24]
   20ae6:	9201      	str	r2, [sp, #4]
   20ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20aea:	9200      	str	r2, [sp, #0]
   20aec:	462a      	mov	r2, r5
   20aee:	f7fc ffd3 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   20af2:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   20af6:	3301      	adds	r3, #1
   20af8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   20afc:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   20b00:	3301      	adds	r3, #1
   20b02:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   20b06:	e476      	b.n	203f6 <lv_draw_rect+0xed8>
   20b08:	4632      	mov	r2, r6
   20b0a:	21ff      	movs	r1, #255	; 0xff
   20b0c:	4620      	mov	r0, r4
   20b0e:	f7f8 fba6 	bl	1925e <memset>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20b12:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   20b16:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   20b1a:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   20b1e:	443a      	add	r2, r7
   20b20:	4419      	add	r1, r3
   20b22:	b212      	sxth	r2, r2
   20b24:	4633      	mov	r3, r6
   20b26:	b209      	sxth	r1, r1
   20b28:	4620      	mov	r0, r4
   20b2a:	f7f0 ff71 	bl	11a10 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
   20b2e:	9b05      	ldr	r3, [sp, #20]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20b30:	462a      	mov	r2, r5
            fill_area2.x1 = area_outer->x1;
   20b32:	f9b3 3000 	ldrsh.w	r3, [r3]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20b36:	a91c      	add	r1, sp, #112	; 0x70
            fill_area2.x1 = area_outer->x1;
   20b38:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area2.x2 = area_outer->x1 + rout - 1;
   20b3c:	3b01      	subs	r3, #1
   20b3e:	444b      	add	r3, r9
   20b40:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            fill_area2.y1 = fill_area.y1;
   20b44:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20b48:	4680      	mov	r8, r0
            fill_area2.y1 = fill_area.y1;
   20b4a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area2.y2 = fill_area.y2;
   20b4e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   20b52:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   20b56:	9b07      	ldr	r3, [sp, #28]
   20b58:	9302      	str	r3, [sp, #8]
   20b5a:	9b06      	ldr	r3, [sp, #24]
   20b5c:	e9cd 0300 	strd	r0, r3, [sp]
   20b60:	4623      	mov	r3, r4
   20b62:	4650      	mov	r0, sl
   20b64:	f7fc ff98 	bl	1da98 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
   20b68:	9b05      	ldr	r3, [sp, #20]
   20b6a:	9908      	ldr	r1, [sp, #32]
   20b6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   20b70:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
   20b74:	1a5b      	subs	r3, r3, r1
   20b76:	429a      	cmp	r2, r3
   20b78:	dd16      	ble.n	20ba8 <lv_draw_rect+0x168a>
                fill_area2.x1 = area_outer->x1 + rout;
   20b7a:	9b05      	ldr	r3, [sp, #20]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20b7c:	462a      	mov	r2, r5
                fill_area2.x1 = area_outer->x1 + rout;
   20b7e:	881b      	ldrh	r3, [r3, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20b80:	4650      	mov	r0, sl
                fill_area2.x1 = area_outer->x1 + rout;
   20b82:	444b      	add	r3, r9
   20b84:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                fill_area2.x2 = area_outer->x2 - rout;
   20b88:	9b05      	ldr	r3, [sp, #20]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20b8a:	a91c      	add	r1, sp, #112	; 0x70
                fill_area2.x2 = area_outer->x2 - rout;
   20b8c:	889b      	ldrh	r3, [r3, #4]
   20b8e:	eba3 0309 	sub.w	r3, r3, r9
   20b92:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   20b96:	9b07      	ldr	r3, [sp, #28]
   20b98:	9302      	str	r3, [sp, #8]
   20b9a:	9b06      	ldr	r3, [sp, #24]
   20b9c:	9301      	str	r3, [sp, #4]
   20b9e:	2301      	movs	r3, #1
   20ba0:	9300      	str	r3, [sp, #0]
   20ba2:	2300      	movs	r3, #0
   20ba4:	f7fc ff78 	bl	1da98 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20ba8:	9b05      	ldr	r3, [sp, #20]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20baa:	4650      	mov	r0, sl
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20bac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20bb0:	a91c      	add	r1, sp, #112	; 0x70
            fill_area2.x1 = area_outer->x2 - rout + 1;
   20bb2:	1c53      	adds	r3, r2, #1
   20bb4:	eba3 0309 	sub.w	r3, r3, r9
   20bb8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20bbc:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
            fill_area2.x2 = area_outer->x2;
   20bc0:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20bc4:	f1c3 0301 	rsb	r3, r3, #1
   20bc8:	4413      	add	r3, r2
   20bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   20bcc:	3701      	adds	r7, #1
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   20bce:	1a9b      	subs	r3, r3, r2
   20bd0:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   20bd4:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   20bd6:	9a07      	ldr	r2, [sp, #28]
   20bd8:	2b00      	cmp	r3, #0
   20bda:	bfac      	ite	ge
   20bdc:	18e3      	addge	r3, r4, r3
   20bde:	1c23      	addlt	r3, r4, #0
   20be0:	9202      	str	r2, [sp, #8]
   20be2:	9a06      	ldr	r2, [sp, #24]
   20be4:	e9cd 8200 	strd	r8, r2, [sp]
   20be8:	462a      	mov	r2, r5
   20bea:	f7fc ff55 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   20bee:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   20bf2:	3301      	adds	r3, #1
   20bf4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   20bf8:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   20bfc:	3301      	adds	r3, #1
   20bfe:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   20c02:	e40d      	b.n	20420 <lv_draw_rect+0xf02>
        fill_area.x1 = area_outer->x1;
   20c04:	9b05      	ldr	r3, [sp, #20]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20c06:	f9bd 7062 	ldrsh.w	r7, [sp, #98]	; 0x62
        fill_area.x1 = area_outer->x1;
   20c0a:	881b      	ldrh	r3, [r3, #0]
   20c0c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        fill_area.x2 = area_outer->x2;
   20c10:	9b05      	ldr	r3, [sp, #20]
   20c12:	889b      	ldrh	r3, [r3, #4]
   20c14:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20c18:	f8bb 3012 	ldrh.w	r3, [fp, #18]
   20c1c:	443b      	add	r3, r7
   20c1e:	b21b      	sxth	r3, r3
   20c20:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   20c24:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20c28:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   20c2c:	429f      	cmp	r7, r3
   20c2e:	f73f ac37 	bgt.w	204a0 <lv_draw_rect+0xf82>
   20c32:	4632      	mov	r2, r6
   20c34:	21ff      	movs	r1, #255	; 0xff
   20c36:	4620      	mov	r0, r4
   20c38:	f7f8 fb11 	bl	1925e <memset>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20c3c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   20c40:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   20c44:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   20c48:	443a      	add	r2, r7
   20c4a:	4419      	add	r1, r3
   20c4c:	b212      	sxth	r2, r2
   20c4e:	4633      	mov	r3, r6
   20c50:	b209      	sxth	r1, r1
   20c52:	4620      	mov	r0, r4
   20c54:	f7f0 fedc 	bl	11a10 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
   20c58:	9b07      	ldr	r3, [sp, #28]
   20c5a:	462a      	mov	r2, r5
   20c5c:	9302      	str	r3, [sp, #8]
   20c5e:	9b06      	ldr	r3, [sp, #24]
   20c60:	a91a      	add	r1, sp, #104	; 0x68
   20c62:	e9cd 0300 	strd	r0, r3, [sp]
   20c66:	4623      	mov	r3, r4
   20c68:	4650      	mov	r0, sl
   20c6a:	f7fc ff15 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   20c6e:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20c72:	3701      	adds	r7, #1
            fill_area.y1++;
   20c74:	3301      	adds	r3, #1
   20c76:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   20c7a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   20c7e:	3301      	adds	r3, #1
   20c80:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20c84:	e7d0      	b.n	20c28 <lv_draw_rect+0x170a>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   20c86:	9b06      	ldr	r3, [sp, #24]
   20c88:	2bfe      	cmp	r3, #254	; 0xfe
   20c8a:	bf28      	it	cs
   20c8c:	23ff      	movcs	r3, #255	; 0xff
   20c8e:	9306      	str	r3, [sp, #24]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   20c90:	f7ef f9d8 	bl	10044 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   20c94:	f000 f93a 	bl	20f0c <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   20c98:	4652      	mov	r2, sl
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   20c9a:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   20c9c:	9905      	ldr	r1, [sp, #20]
   20c9e:	a81a      	add	r0, sp, #104	; 0x68
   20ca0:	f000 f9b0 	bl	21004 <_lv_area_intersect>
        if(is_common == false) return;
   20ca4:	2800      	cmp	r0, #0
   20ca6:	f43f ac04 	beq.w	204b2 <lv_draw_rect+0xf94>
        draw_area.x1 -= disp_area->x1;
   20caa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
   20cae:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
        draw_area.y1 -= disp_area->y1;
   20cb2:	f9b7 5012 	ldrsh.w	r5, [r7, #18]
        draw_area.x1 -= disp_area->x1;
   20cb6:	1a83      	subs	r3, r0, r2
   20cb8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        draw_area.x2 -= disp_area->x1;
   20cbc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
        draw_area.y1 -= disp_area->y1;
   20cc0:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
        draw_area.x2 -= disp_area->x1;
   20cc4:	1a9a      	subs	r2, r3, r2
   20cc6:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        draw_area.y2 -= disp_area->y1;
   20cca:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
        draw_area.y1 -= disp_area->y1;
   20cce:	1b49      	subs	r1, r1, r5
        draw_area.y2 -= disp_area->y1;
   20cd0:	1b52      	subs	r2, r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   20cd2:	1c5d      	adds	r5, r3, #1
   20cd4:	1a2d      	subs	r5, r5, r0
   20cd6:	b22d      	sxth	r5, r5
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   20cd8:	4628      	mov	r0, r5
        draw_area.y1 -= disp_area->y1;
   20cda:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
        draw_area.y2 -= disp_area->y1;
   20cde:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   20ce2:	f7f1 ff15 	bl	12b10 <_lv_mem_buf_get>
        if(rout > 0) {
   20ce6:	f1bb 0f00 	cmp.w	fp, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   20cea:	4680      	mov	r8, r0
        if(rout > 0) {
   20cec:	fa0f f68b 	sxth.w	r6, fp
   20cf0:	dd3c      	ble.n	20d6c <lv_draw_rect+0x184e>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
   20cf2:	2300      	movs	r3, #0
   20cf4:	4632      	mov	r2, r6
   20cf6:	9905      	ldr	r1, [sp, #20]
   20cf8:	a81e      	add	r0, sp, #120	; 0x78
   20cfa:	f7f0 ff63 	bl	11bc4 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   20cfe:	2100      	movs	r1, #0
   20d00:	a81e      	add	r0, sp, #120	; 0x78
   20d02:	f7f0 fe5f 	bl	119c4 <lv_draw_mask_add>
   20d06:	4681      	mov	r9, r0
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
   20d08:	8b22      	ldrh	r2, [r4, #24]
   20d0a:	2301      	movs	r3, #1
   20d0c:	1ab2      	subs	r2, r6, r2
   20d0e:	b212      	sxth	r2, r2
   20d10:	a916      	add	r1, sp, #88	; 0x58
   20d12:	a825      	add	r0, sp, #148	; 0x94
   20d14:	f7f0 ff56 	bl	11bc4 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   20d18:	2100      	movs	r1, #0
   20d1a:	a825      	add	r0, sp, #148	; 0x94
   20d1c:	f7f0 fe52 	bl	119c4 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   20d20:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
        lv_color_t color = dsc->border_color;
   20d24:	6963      	ldr	r3, [r4, #20]
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   20d26:	3e01      	subs	r6, #1
   20d28:	455e      	cmp	r6, fp
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20d2a:	8a7a      	ldrh	r2, [r7, #18]
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   20d2c:	bfb8      	it	lt
   20d2e:	465e      	movlt	r6, fp
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20d30:	f9bd b06a 	ldrsh.w	fp, [sp, #106]	; 0x6a
        lv_color_t color = dsc->border_color;
   20d34:	9309      	str	r3, [sp, #36]	; 0x24
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   20d36:	7f63      	ldrb	r3, [r4, #29]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20d38:	445a      	add	r2, fp
   20d3a:	b212      	sxth	r2, r2
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   20d3c:	9308      	str	r3, [sp, #32]
        fill_area.x1 = coords->x1;
   20d3e:	9b05      	ldr	r3, [sp, #20]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   20d40:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
   20d44:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   20d48:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        fill_area.x1 = coords->x1;
   20d4c:	f9b3 1000 	ldrsh.w	r1, [r3]
        fill_area.x2 = coords->x2;
   20d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   20d54:	2a04      	cmp	r2, #4
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   20d56:	9007      	str	r0, [sp, #28]
        fill_area.x1 = coords->x1;
   20d58:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
   20d5c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   20d60:	d107      	bne.n	20d72 <lv_draw_rect+0x1854>
   20d62:	198c      	adds	r4, r1, r6
   20d64:	f8ad 4074 	strh.w	r4, [sp, #116]	; 0x74
        uint32_t buf_ofs = 0;
   20d68:	2400      	movs	r4, #0
   20d6a:	e009      	b.n	20d80 <lv_draw_rect+0x1862>
        int16_t mask_rout_id = LV_MASK_ID_INV;
   20d6c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   20d70:	e7ca      	b.n	20d08 <lv_draw_rect+0x17ea>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
   20d72:	2a08      	cmp	r2, #8
   20d74:	d1f8      	bne.n	20d68 <lv_draw_rect+0x184a>
            fill_area.x1 = coords->x2 - corner_size;
   20d76:	1b9c      	subs	r4, r3, r6
   20d78:	b224      	sxth	r4, r4
   20d7a:	f8ad 4070 	strh.w	r4, [sp, #112]	; 0x70
            buf_ofs = fill_area.x1 - coords->x1;
   20d7e:	1a64      	subs	r4, r4, r1
        volatile bool top_only = false;
   20d80:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   20d82:	2a02      	cmp	r2, #2
        volatile bool top_only = false;
   20d84:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        volatile bool bottom_only = false;
   20d88:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   20d8c:	d11b      	bne.n	20dc6 <lv_draw_rect+0x18a8>
   20d8e:	2301      	movs	r3, #1
   20d90:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        volatile bool normal = !top_only && !bottom_only ? true : false;
   20d94:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   20d98:	bb13      	cbnz	r3, 20de0 <lv_draw_rect+0x18c2>
   20d9a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   20d9e:	f083 0301 	eor.w	r3, r3, #1
   20da2:	f003 0301 	and.w	r3, r3, #1
   20da6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   20daa:	4444      	add	r4, r8
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20dac:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
   20db0:	459b      	cmp	fp, r3
   20db2:	dd17      	ble.n	20de4 <lv_draw_rect+0x18c6>
        lv_draw_mask_remove_id(mask_rin_id);
   20db4:	9807      	ldr	r0, [sp, #28]
   20db6:	f7f0 fe4d 	bl	11a54 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
   20dba:	4648      	mov	r0, r9
   20dbc:	f7f0 fe4a 	bl	11a54 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
   20dc0:	4640      	mov	r0, r8
   20dc2:	f7ff bb74 	b.w	204ae <lv_draw_rect+0xf90>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   20dc6:	2a01      	cmp	r2, #1
   20dc8:	d007      	beq.n	20dda <lv_draw_rect+0x18bc>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   20dca:	2a03      	cmp	r2, #3
   20dcc:	d1e2      	bne.n	20d94 <lv_draw_rect+0x1876>
            top_only = true;
   20dce:	2301      	movs	r3, #1
   20dd0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            bottom_only = true;
   20dd4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   20dd8:	e7dc      	b.n	20d94 <lv_draw_rect+0x1876>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   20dda:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   20dde:	e7d9      	b.n	20d94 <lv_draw_rect+0x1876>
        volatile bool normal = !top_only && !bottom_only ? true : false;
   20de0:	2300      	movs	r3, #0
   20de2:	e7de      	b.n	20da2 <lv_draw_rect+0x1884>
            if(normal ||
   20de4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   20de8:	b99b      	cbnz	r3, 20e12 <lv_draw_rect+0x18f4>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   20dea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   20dee:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            if(normal ||
   20df2:	b12b      	cbz	r3, 20e00 <lv_draw_rect+0x18e2>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   20df4:	9b05      	ldr	r3, [sp, #20]
   20df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   20dfa:	4433      	add	r3, r6
   20dfc:	429a      	cmp	r2, r3
   20dfe:	dd08      	ble.n	20e12 <lv_draw_rect+0x18f4>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   20e00:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   20e04:	b30b      	cbz	r3, 20e4a <lv_draw_rect+0x192c>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   20e06:	9b05      	ldr	r3, [sp, #20]
   20e08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   20e0c:	1b9b      	subs	r3, r3, r6
   20e0e:	429a      	cmp	r2, r3
   20e10:	db1b      	blt.n	20e4a <lv_draw_rect+0x192c>
   20e12:	462a      	mov	r2, r5
   20e14:	21ff      	movs	r1, #255	; 0xff
   20e16:	4640      	mov	r0, r8
   20e18:	f7f8 fa21 	bl	1925e <memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   20e1c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   20e20:	8a7a      	ldrh	r2, [r7, #18]
   20e22:	8a39      	ldrh	r1, [r7, #16]
   20e24:	445a      	add	r2, fp
   20e26:	4419      	add	r1, r3
   20e28:	b212      	sxth	r2, r2
   20e2a:	462b      	mov	r3, r5
   20e2c:	b209      	sxth	r1, r1
   20e2e:	4640      	mov	r0, r8
   20e30:	f7f0 fdee 	bl	11a10 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   20e34:	9b08      	ldr	r3, [sp, #32]
   20e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20e38:	9302      	str	r3, [sp, #8]
   20e3a:	9b06      	ldr	r3, [sp, #24]
   20e3c:	a91c      	add	r1, sp, #112	; 0x70
   20e3e:	e9cd 0300 	strd	r0, r3, [sp]
   20e42:	4623      	mov	r3, r4
   20e44:	4650      	mov	r0, sl
   20e46:	f7fc fe27 	bl	1da98 <_lv_blend_fill>
            fill_area.y1++;
   20e4a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20e4e:	f10b 0b01 	add.w	fp, fp, #1
            fill_area.y1++;
   20e52:	3301      	adds	r3, #1
   20e54:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
   20e58:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
   20e5c:	3301      	adds	r3, #1
   20e5e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   20e62:	e7a3      	b.n	20dac <lv_draw_rect+0x188e>
            if(grad_dir == LV_GRAD_DIR_VER) {
   20e64:	2e01      	cmp	r6, #1
            opa2 = opa;
   20e66:	46d9      	mov	r9, fp
            if(grad_dir == LV_GRAD_DIR_VER) {
   20e68:	f43f ad9e 	beq.w	209a8 <lv_draw_rect+0x148a>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   20e6c:	2701      	movs	r7, #1
   20e6e:	e539      	b.n	208e4 <lv_draw_rect+0x13c6>

00020e70 <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
   20e70:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
   20e72:	3901      	subs	r1, #1
    res->y2 = h - 1;
   20e74:	3a01      	subs	r2, #1
    res->x1 = 0;
   20e76:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
   20e78:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
   20e7a:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
   20e7c:	80c2      	strh	r2, [r0, #6]
#endif
}
   20e7e:	4770      	bx	lr

00020e80 <lv_img_decoder_built_in_close>:
{
   20e80:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   20e82:	6a0d      	ldr	r5, [r1, #32]
{
   20e84:	460c      	mov	r4, r1
    if(user_data) {
   20e86:	b165      	cbz	r5, 20ea2 <lv_img_decoder_built_in_close+0x22>
        if(user_data->palette) lv_mem_free(user_data->palette);
   20e88:	6828      	ldr	r0, [r5, #0]
   20e8a:	b108      	cbz	r0, 20e90 <lv_img_decoder_built_in_close+0x10>
   20e8c:	f7f1 fde6 	bl	12a5c <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
   20e90:	6868      	ldr	r0, [r5, #4]
   20e92:	b108      	cbz	r0, 20e98 <lv_img_decoder_built_in_close+0x18>
   20e94:	f7f1 fde2 	bl	12a5c <lv_mem_free>
        lv_mem_free(user_data);
   20e98:	4628      	mov	r0, r5
   20e9a:	f7f1 fddf 	bl	12a5c <lv_mem_free>
        dsc->user_data = NULL;
   20e9e:	2300      	movs	r3, #0
   20ea0:	6223      	str	r3, [r4, #32]
}
   20ea2:	bd38      	pop	{r3, r4, r5, pc}

00020ea4 <lv_img_decoder_read_line>:
{
   20ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20ea6:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
   20ea8:	6800      	ldr	r0, [r0, #0]
   20eaa:	6884      	ldr	r4, [r0, #8]
   20eac:	b144      	cbz	r4, 20ec0 <lv_img_decoder_read_line+0x1c>
   20eae:	9e06      	ldr	r6, [sp, #24]
   20eb0:	e9cd 3600 	strd	r3, r6, [sp]
   20eb4:	4613      	mov	r3, r2
   20eb6:	460a      	mov	r2, r1
   20eb8:	4629      	mov	r1, r5
   20eba:	47a0      	blx	r4
}
   20ebc:	b002      	add	sp, #8
   20ebe:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
   20ec0:	4620      	mov	r0, r4
   20ec2:	e7fb      	b.n	20ebc <lv_img_decoder_read_line+0x18>

00020ec4 <lv_img_decoder_close>:
{
   20ec4:	b510      	push	{r4, lr}
   20ec6:	4604      	mov	r4, r0
    if(dsc->decoder) {
   20ec8:	6800      	ldr	r0, [r0, #0]
   20eca:	b158      	cbz	r0, 20ee4 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   20ecc:	68c3      	ldr	r3, [r0, #12]
   20ece:	b10b      	cbz	r3, 20ed4 <lv_img_decoder_close+0x10>
   20ed0:	4621      	mov	r1, r4
   20ed2:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   20ed4:	7b23      	ldrb	r3, [r4, #12]
   20ed6:	2b01      	cmp	r3, #1
   20ed8:	d104      	bne.n	20ee4 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   20eda:	6860      	ldr	r0, [r4, #4]
   20edc:	f7f1 fdbe 	bl	12a5c <lv_mem_free>
            dsc->src = NULL;
   20ee0:	2300      	movs	r3, #0
   20ee2:	6063      	str	r3, [r4, #4]
}
   20ee4:	bd10      	pop	{r4, pc}

00020ee6 <lv_disp_buf_init>:
{
   20ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ee8:	4604      	mov	r4, r0
   20eea:	460d      	mov	r5, r1
   20eec:	4617      	mov	r7, r2
   20eee:	461e      	mov	r6, r3
    memset(dst, 0x00, len);
   20ef0:	2224      	movs	r2, #36	; 0x24
   20ef2:	2100      	movs	r1, #0
   20ef4:	f7f8 f9b3 	bl	1925e <memset>
    disp_buf->buf2    = buf2;
   20ef8:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   20efc:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   20f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020f02 <lv_disp_flush_ready>:
    disp_drv->buffer->flushing = 0;
   20f02:	2200      	movs	r2, #0
   20f04:	6843      	ldr	r3, [r0, #4]
   20f06:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
   20f08:	61da      	str	r2, [r3, #28]
}
   20f0a:	4770      	bx	lr

00020f0c <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   20f0c:	6840      	ldr	r0, [r0, #4]
   20f0e:	4770      	bx	lr

00020f10 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   20f10:	6843      	ldr	r3, [r0, #4]
   20f12:	6818      	ldr	r0, [r3, #0]
   20f14:	b118      	cbz	r0, 20f1e <lv_disp_is_double_buf+0xe>
   20f16:	6858      	ldr	r0, [r3, #4]
   20f18:	3800      	subs	r0, #0
   20f1a:	bf18      	it	ne
   20f1c:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   20f1e:	4770      	bx	lr

00020f20 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   20f20:	b508      	push	{r3, lr}
   20f22:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   20f24:	f7ff fff4 	bl	20f10 <lv_disp_is_double_buf>
   20f28:	b140      	cbz	r0, 20f3c <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   20f2a:	8853      	ldrh	r3, [r2, #2]
   20f2c:	8810      	ldrh	r0, [r2, #0]
   20f2e:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   20f32:	6853      	ldr	r3, [r2, #4]
   20f34:	68db      	ldr	r3, [r3, #12]
   20f36:	1ac3      	subs	r3, r0, r3
   20f38:	4258      	negs	r0, r3
   20f3a:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
   20f3c:	bd08      	pop	{r3, pc}

00020f3e <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   20f3e:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   20f40:	f001 fe69 	bl	22c16 <z_impl_k_uptime_ticks>
   20f44:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   20f48:	fba0 2304 	umull	r2, r3, r0, r4
   20f4c:	fb04 3301 	mla	r3, r4, r1, r3
   20f50:	0bd0      	lsrs	r0, r2, #15

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   20f52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   20f56:	bd10      	pop	{r4, pc}

00020f58 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   20f58:	b538      	push	{r3, r4, r5, lr}
   20f5a:	4604      	mov	r4, r0
   20f5c:	f001 fe5b 	bl	22c16 <z_impl_k_uptime_ticks>
   20f60:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   20f64:	fba0 2305 	umull	r2, r3, r0, r5
   20f68:	fb05 3301 	mla	r3, r5, r1, r3
   20f6c:	0bd0      	lsrs	r0, r2, #15
   20f6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   20f72:	1b00      	subs	r0, r0, r4
   20f74:	bd38      	pop	{r3, r4, r5, pc}

00020f76 <lv_anim_path_linear>:
    if(a->time == a->act_time) {
   20f76:	e9d1 0309 	ldrd	r0, r3, [r1, #36]	; 0x24
   20f7a:	4298      	cmp	r0, r3
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
   20f7c:	bf1a      	itte	ne
   20f7e:	029b      	lslne	r3, r3, #10
   20f80:	fb93 f3f0 	sdivne	r3, r3, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
   20f84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    new_value = (int32_t)step * (a->end - a->start);
   20f88:	6988      	ldr	r0, [r1, #24]
   20f8a:	6a0a      	ldr	r2, [r1, #32]
   20f8c:	1a12      	subs	r2, r2, r0
   20f8e:	4353      	muls	r3, r2
    new_value += a->start;
   20f90:	eb00 20a3 	add.w	r0, r0, r3, asr #10
}
   20f94:	b200      	sxth	r0, r0
   20f96:	4770      	bx	lr

00020f98 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   20f98:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   20f9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   20f9e:	f9b0 5000 	ldrsh.w	r5, [r0]
    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   20fa2:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
   20fa4:	8840      	ldrh	r0, [r0, #2]
   20fa6:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
   20fa8:	1b5b      	subs	r3, r3, r5
   20faa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t py = p->y - cy;
   20fae:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
   20fb0:	105c      	asrs	r4, r3, #1
    lv_coord_t px = p->x - cx;
   20fb2:	1b52      	subs	r2, r2, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
   20fb4:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
   20fb8:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
   20fba:	1acb      	subs	r3, r1, r3

    int32_t r_sqrd = r * r;
    int32_t dist = (px * px) + (py * py);
   20fbc:	fb13 f303 	smulbb	r3, r3, r3
    int32_t r_sqrd = r * r;
   20fc0:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
   20fc2:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   20fc6:	4294      	cmp	r4, r2
   20fc8:	bfb4      	ite	lt
   20fca:	2000      	movlt	r0, #0
   20fcc:	2001      	movge	r0, #1
   20fce:	bd30      	pop	{r4, r5, pc}

00020fd0 <lv_area_set>:
    area_p->x2 = x2;
   20fd0:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   20fd2:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   20fd6:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   20fd8:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   20fda:	80c3      	strh	r3, [r0, #6]
}
   20fdc:	4770      	bx	lr

00020fde <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   20fde:	8843      	ldrh	r3, [r0, #2]
   20fe0:	3901      	subs	r1, #1
   20fe2:	4419      	add	r1, r3
   20fe4:	80c1      	strh	r1, [r0, #6]
}
   20fe6:	4770      	bx	lr

00020fe8 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   20fe8:	f9b0 3000 	ldrsh.w	r3, [r0]
   20fec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   20ff0:	1ad2      	subs	r2, r2, r3
   20ff2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   20ff6:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   20ffa:	3301      	adds	r3, #1
   20ffc:	1a18      	subs	r0, r3, r0
}
   20ffe:	fb02 0000 	mla	r0, r2, r0, r0
   21002:	4770      	bx	lr

00021004 <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   21004:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   21008:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2100a:	f9b2 6000 	ldrsh.w	r6, [r2]
{
   2100e:	4604      	mov	r4, r0
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   21010:	429e      	cmp	r6, r3
   21012:	bfb8      	it	lt
   21014:	461e      	movlt	r6, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   21016:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2101a:	8006      	strh	r6, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2101c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   21020:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   21024:	4283      	cmp	r3, r0
   21026:	bfb8      	it	lt
   21028:	4603      	movlt	r3, r0
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2102a:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2102e:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   21030:	4285      	cmp	r5, r0
   21032:	bfa8      	it	ge
   21034:	4605      	movge	r5, r0
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   21036:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
   2103a:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2103e:	80a5      	strh	r5, [r4, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   21040:	4290      	cmp	r0, r2
   21042:	bfa8      	it	ge
   21044:	4610      	movge	r0, r2
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   21046:	42ae      	cmp	r6, r5
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   21048:	80e0      	strh	r0, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2104a:	dc04      	bgt.n	21056 <_lv_area_intersect+0x52>
   2104c:	4283      	cmp	r3, r0
   2104e:	bfcc      	ite	gt
   21050:	2000      	movgt	r0, #0
   21052:	2001      	movle	r0, #1
}
   21054:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   21056:	2000      	movs	r0, #0
   21058:	e7fc      	b.n	21054 <_lv_area_intersect+0x50>

0002105a <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2105a:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   2105e:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   21060:	f9b1 4000 	ldrsh.w	r4, [r1]
   21064:	42a3      	cmp	r3, r4
   21066:	bfa8      	it	ge
   21068:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2106a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2106e:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   21070:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   21074:	42a3      	cmp	r3, r4
   21076:	bfa8      	it	ge
   21078:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   2107a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2107e:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   21080:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   21084:	42a3      	cmp	r3, r4
   21086:	bfb8      	it	lt
   21088:	4623      	movlt	r3, r4
   2108a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   2108c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   21090:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   21094:	4293      	cmp	r3, r2
   21096:	bfb8      	it	lt
   21098:	4613      	movlt	r3, r2
   2109a:	80c3      	strh	r3, [r0, #6]
}
   2109c:	bd10      	pop	{r4, pc}

0002109e <_lv_area_is_point_on>:
{
   2109e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   210a2:	f9b1 3000 	ldrsh.w	r3, [r1]
   210a6:	f9b0 5000 	ldrsh.w	r5, [r0]
{
   210aa:	460e      	mov	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   210ac:	42ab      	cmp	r3, r5
   210ae:	db7d      	blt.n	211ac <_lv_area_is_point_on+0x10e>
   210b0:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   210b4:	4543      	cmp	r3, r8
   210b6:	dc79      	bgt.n	211ac <_lv_area_is_point_on+0x10e>
   210b8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   210bc:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
   210c0:	42bb      	cmp	r3, r7
   210c2:	db73      	blt.n	211ac <_lv_area_is_point_on+0x10e>
   210c4:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
   210c8:	454b      	cmp	r3, r9
   210ca:	dc6f      	bgt.n	211ac <_lv_area_is_point_on+0x10e>
    if(radius <= 0) {
   210cc:	2a00      	cmp	r2, #0
   210ce:	dc03      	bgt.n	210d8 <_lv_area_is_point_on+0x3a>
        return true;
   210d0:	2001      	movs	r0, #1
}
   210d2:	b003      	add	sp, #12
   210d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   210d8:	f108 0301 	add.w	r3, r8, #1
   210dc:	1b5b      	subs	r3, r3, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   210de:	f109 0001 	add.w	r0, r9, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   210e2:	f3c3 34c0 	ubfx	r4, r3, #15, #1
   210e6:	1bc0      	subs	r0, r0, r7
   210e8:	fa04 f383 	sxtah	r3, r4, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   210ec:	f3c0 34c0 	ubfx	r4, r0, #15, #1
   210f0:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   210f4:	105c      	asrs	r4, r3, #1
   210f6:	1043      	asrs	r3, r0, #1
   210f8:	429c      	cmp	r4, r3
   210fa:	bfa8      	it	ge
   210fc:	461c      	movge	r4, r3
   210fe:	4294      	cmp	r4, r2
   21100:	bfa8      	it	ge
   21102:	4614      	movge	r4, r2
    corner_area.x1 = a_p->x1;
   21104:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.y2 = a_p->y1 + radius;
   21108:	eb07 0a04 	add.w	sl, r7, r4
    corner_area.x2 = a_p->x1 + radius;
   2110c:	4425      	add	r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2110e:	2200      	movs	r2, #0
   21110:	4668      	mov	r0, sp
    corner_area.x2 = a_p->x1 + radius;
   21112:	b22d      	sxth	r5, r5
    corner_area.y2 = a_p->y1 + radius;
   21114:	fa0f fa8a 	sxth.w	sl, sl
    corner_area.x2 = a_p->x1 + radius;
   21118:	f8ad 5004 	strh.w	r5, [sp, #4]
    corner_area.y1 = a_p->y1;
   2111c:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   21120:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   21124:	f7ff ffbb 	bl	2109e <_lv_area_is_point_on>
   21128:	4602      	mov	r2, r0
   2112a:	b130      	cbz	r0, 2113a <_lv_area_is_point_on+0x9c>
        corner_area.x2 += radius;
   2112c:	4425      	add	r5, r4
   2112e:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y2 += radius;
   21132:	4454      	add	r4, sl
   21134:	f8ad 4006 	strh.w	r4, [sp, #6]
   21138:	e014      	b.n	21164 <_lv_area_is_point_on+0xc6>
    corner_area.y1 = a_p->y2 - radius;
   2113a:	eba9 0b04 	sub.w	fp, r9, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2113e:	4631      	mov	r1, r6
   21140:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y2 - radius;
   21142:	fa0f fb8b 	sxth.w	fp, fp
   21146:	f8ad b002 	strh.w	fp, [sp, #2]
    corner_area.y2 = a_p->y2;
   2114a:	f8ad 9006 	strh.w	r9, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2114e:	f7ff ffa6 	bl	2109e <_lv_area_is_point_on>
   21152:	4602      	mov	r2, r0
   21154:	b158      	cbz	r0, 2116e <_lv_area_is_point_on+0xd0>
        corner_area.x2 += radius;
   21156:	4425      	add	r5, r4
   21158:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y1 -= radius;
   2115c:	ebab 0404 	sub.w	r4, fp, r4
   21160:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
   21164:	4631      	mov	r1, r6
   21166:	4668      	mov	r0, sp
   21168:	f7ff ff16 	bl	20f98 <lv_point_within_circle>
   2116c:	e7b1      	b.n	210d2 <_lv_area_is_point_on+0x34>
    corner_area.x1 = a_p->x2 - radius;
   2116e:	eba8 0304 	sub.w	r3, r8, r4
   21172:	b21d      	sxth	r5, r3
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   21174:	4631      	mov	r1, r6
   21176:	4668      	mov	r0, sp
    corner_area.x1 = a_p->x2 - radius;
   21178:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.x2 = a_p->x2;
   2117c:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   21180:	f7ff ff8d 	bl	2109e <_lv_area_is_point_on>
   21184:	4602      	mov	r2, r0
   21186:	b118      	cbz	r0, 21190 <_lv_area_is_point_on+0xf2>
        corner_area.x1 -= radius;
   21188:	1b2b      	subs	r3, r5, r4
   2118a:	f8ad 3000 	strh.w	r3, [sp]
   2118e:	e7e5      	b.n	2115c <_lv_area_is_point_on+0xbe>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   21190:	4631      	mov	r1, r6
   21192:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y1;
   21194:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   21198:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2119c:	f7ff ff7f 	bl	2109e <_lv_area_is_point_on>
   211a0:	2800      	cmp	r0, #0
   211a2:	d095      	beq.n	210d0 <_lv_area_is_point_on+0x32>
        corner_area.x1 -= radius;
   211a4:	1b2b      	subs	r3, r5, r4
   211a6:	f8ad 3000 	strh.w	r3, [sp]
   211aa:	e7c2      	b.n	21132 <_lv_area_is_point_on+0x94>
        return false;
   211ac:	2000      	movs	r0, #0
   211ae:	e790      	b.n	210d2 <_lv_area_is_point_on+0x34>

000211b0 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   211b0:	f9b0 2000 	ldrsh.w	r2, [r0]
   211b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   211b8:	429a      	cmp	r2, r3
   211ba:	dc14      	bgt.n	211e6 <_lv_area_is_on+0x36>
   211bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   211c0:	f9b1 3000 	ldrsh.w	r3, [r1]
   211c4:	429a      	cmp	r2, r3
   211c6:	db0e      	blt.n	211e6 <_lv_area_is_on+0x36>
   211c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   211cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   211d0:	429a      	cmp	r2, r3
   211d2:	dc08      	bgt.n	211e6 <_lv_area_is_on+0x36>
   211d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   211d8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   211dc:	4298      	cmp	r0, r3
   211de:	bfb4      	ite	lt
   211e0:	2000      	movlt	r0, #0
   211e2:	2001      	movge	r0, #1
   211e4:	4770      	bx	lr
        return false;
   211e6:	2000      	movs	r0, #0
}
   211e8:	4770      	bx	lr

000211ea <_lv_area_is_in>:
{
   211ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   211ee:	f9b1 3000 	ldrsh.w	r3, [r1]
   211f2:	f9b0 7000 	ldrsh.w	r7, [r0]
{
   211f6:	4605      	mov	r5, r0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   211f8:	42bb      	cmp	r3, r7
{
   211fa:	460c      	mov	r4, r1
   211fc:	4616      	mov	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   211fe:	dc23      	bgt.n	21248 <_lv_area_is_in+0x5e>
   21200:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   21204:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   21208:	429a      	cmp	r2, r3
   2120a:	db1d      	blt.n	21248 <_lv_area_is_in+0x5e>
   2120c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   21210:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   21214:	429a      	cmp	r2, r3
   21216:	dc17      	bgt.n	21248 <_lv_area_is_in+0x5e>
   21218:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2121c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
   21220:	4283      	cmp	r3, r0
   21222:	bfcc      	ite	gt
   21224:	2000      	movgt	r0, #0
   21226:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
   21228:	b15e      	cbz	r6, 21242 <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
   2122a:	886b      	ldrh	r3, [r5, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2122c:	4632      	mov	r2, r6
   2122e:	4620      	mov	r0, r4
   21230:	a901      	add	r1, sp, #4
    p.x = ain_p->x1;
   21232:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
   21236:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2123a:	f7ff ff30 	bl	2109e <_lv_area_is_point_on>
   2123e:	b928      	cbnz	r0, 2124c <_lv_area_is_in+0x62>
   21240:	2000      	movs	r0, #0
}
   21242:	b002      	add	sp, #8
   21244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   21248:	2000      	movs	r0, #0
   2124a:	e7ed      	b.n	21228 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
   2124c:	f9b5 8004 	ldrsh.w	r8, [r5, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   21250:	4632      	mov	r2, r6
   21252:	4620      	mov	r0, r4
   21254:	a901      	add	r1, sp, #4
    p.x = ain_p->x2;
   21256:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2125a:	f7ff ff20 	bl	2109e <_lv_area_is_point_on>
   2125e:	2800      	cmp	r0, #0
   21260:	d0ee      	beq.n	21240 <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
   21262:	88eb      	ldrh	r3, [r5, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   21264:	4632      	mov	r2, r6
   21266:	4620      	mov	r0, r4
   21268:	a901      	add	r1, sp, #4
    p.x = ain_p->x1;
   2126a:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
   2126e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   21272:	f7ff ff14 	bl	2109e <_lv_area_is_point_on>
   21276:	2800      	cmp	r0, #0
   21278:	d0e2      	beq.n	21240 <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2127a:	4632      	mov	r2, r6
   2127c:	4620      	mov	r0, r4
   2127e:	a901      	add	r1, sp, #4
    p.x = ain_p->x2;
   21280:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   21284:	f7ff ff0b 	bl	2109e <_lv_area_is_point_on>
   21288:	e7db      	b.n	21242 <_lv_area_is_in+0x58>

0002128a <_lv_area_align>:
{
   2128a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2128c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   21290:	f9b0 5000 	ldrsh.w	r5, [r0]
   21294:	2a14      	cmp	r2, #20
   21296:	d83f      	bhi.n	21318 <_lv_area_align+0x8e>
   21298:	e8df f012 	tbh	[pc, r2, lsl #1]
   2129c:	003b0015 	.word	0x003b0015
   212a0:	005a0045 	.word	0x005a0045
   212a4:	00690061 	.word	0x00690061
   212a8:	0083007c 	.word	0x0083007c
   212ac:	008c0085 	.word	0x008c0085
   212b0:	00a60093 	.word	0x00a60093
   212b4:	00b300ad 	.word	0x00b300ad
   212b8:	00cd00c6 	.word	0x00cd00c6
   212bc:	00d700d2 	.word	0x00d700d2
   212c0:	00df00dc 	.word	0x00df00dc
   212c4:	00e2      	.short	0x00e2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   212c6:	888a      	ldrh	r2, [r1, #4]
   212c8:	880e      	ldrh	r6, [r1, #0]
   212ca:	3201      	adds	r2, #1
   212cc:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   212ce:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   212d2:	fa06 f682 	sxtah	r6, r6, r2
   212d6:	8882      	ldrh	r2, [r0, #4]
   212d8:	3201      	adds	r2, #1
   212da:	1b52      	subs	r2, r2, r5
   212dc:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   212e0:	fa07 f282 	sxtah	r2, r7, r2
   212e4:	1052      	asrs	r2, r2, #1
   212e6:	eba2 0266 	sub.w	r2, r2, r6, asr #1
            res->x = lv_area_get_width(base);
   212ea:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   212ec:	88ca      	ldrh	r2, [r1, #6]
   212ee:	8849      	ldrh	r1, [r1, #2]
   212f0:	3201      	adds	r2, #1
   212f2:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   212f4:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   212f8:	fa01 f182 	sxtah	r1, r1, r2
   212fc:	88c2      	ldrh	r2, [r0, #6]
   212fe:	3201      	adds	r2, #1
   21300:	1b12      	subs	r2, r2, r4
   21302:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   21306:	fa00 f282 	sxtah	r2, r0, r2
   2130a:	1052      	asrs	r2, r2, #1
   2130c:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   21310:	e001      	b.n	21316 <_lv_area_align+0x8c>
            res->x = 0;
   21312:	2200      	movs	r2, #0
   21314:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   21316:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   21318:	881a      	ldrh	r2, [r3, #0]
   2131a:	4415      	add	r5, r2
    res->y += base->y1;
   2131c:	885a      	ldrh	r2, [r3, #2]
    res->x += base->x1;
   2131e:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
   21320:	4414      	add	r4, r2
   21322:	805c      	strh	r4, [r3, #2]
}
   21324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   21326:	888a      	ldrh	r2, [r1, #4]
   21328:	8809      	ldrh	r1, [r1, #0]
   2132a:	3201      	adds	r2, #1
   2132c:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2132e:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   21332:	fa01 f182 	sxtah	r1, r1, r2
   21336:	8882      	ldrh	r2, [r0, #4]
   21338:	3201      	adds	r2, #1
   2133a:	1b52      	subs	r2, r2, r5
   2133c:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   21340:	fa00 f282 	sxtah	r2, r0, r2
   21344:	1052      	asrs	r2, r2, #1
   21346:	eba2 0261 	sub.w	r2, r2, r1, asr #1
            res->x = lv_area_get_width(base);
   2134a:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   2134c:	2200      	movs	r2, #0
   2134e:	e7e2      	b.n	21316 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   21350:	880a      	ldrh	r2, [r1, #0]
   21352:	8889      	ldrh	r1, [r1, #4]
   21354:	1a52      	subs	r2, r2, r1
   21356:	8881      	ldrh	r1, [r0, #4]
   21358:	440a      	add	r2, r1
   2135a:	1b52      	subs	r2, r2, r5
   2135c:	e7f5      	b.n	2134a <_lv_area_align+0xc0>
            res->x = 0;
   2135e:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
   21360:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   21362:	884a      	ldrh	r2, [r1, #2]
   21364:	88c9      	ldrh	r1, [r1, #6]
   21366:	1a52      	subs	r2, r2, r1
   21368:	88c1      	ldrh	r1, [r0, #6]
   2136a:	440a      	add	r2, r1
   2136c:	e047      	b.n	213fe <_lv_area_align+0x174>
   2136e:	888a      	ldrh	r2, [r1, #4]
   21370:	880e      	ldrh	r6, [r1, #0]
   21372:	3201      	adds	r2, #1
   21374:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   21376:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2137a:	fa06 f682 	sxtah	r6, r6, r2
   2137e:	8882      	ldrh	r2, [r0, #4]
   21380:	3201      	adds	r2, #1
   21382:	1b52      	subs	r2, r2, r5
   21384:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   21388:	fa07 f282 	sxtah	r2, r7, r2
   2138c:	1052      	asrs	r2, r2, #1
   2138e:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   21392:	e7e5      	b.n	21360 <_lv_area_align+0xd6>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   21394:	888e      	ldrh	r6, [r1, #4]
   21396:	880a      	ldrh	r2, [r1, #0]
   21398:	1b92      	subs	r2, r2, r6
   2139a:	8886      	ldrh	r6, [r0, #4]
   2139c:	4432      	add	r2, r6
   2139e:	1b52      	subs	r2, r2, r5
   213a0:	e7de      	b.n	21360 <_lv_area_align+0xd6>
            res->x = 0;
   213a2:	2200      	movs	r2, #0
   213a4:	e7a1      	b.n	212ea <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   213a6:	888e      	ldrh	r6, [r1, #4]
   213a8:	880a      	ldrh	r2, [r1, #0]
   213aa:	1b92      	subs	r2, r2, r6
   213ac:	8886      	ldrh	r6, [r0, #4]
   213ae:	4432      	add	r2, r6
   213b0:	1b52      	subs	r2, r2, r5
   213b2:	e79a      	b.n	212ea <_lv_area_align+0x60>
            res->x = 0;
   213b4:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   213b6:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   213b8:	88ca      	ldrh	r2, [r1, #6]
   213ba:	1c50      	adds	r0, r2, #1
   213bc:	884a      	ldrh	r2, [r1, #2]
            res->y = -lv_area_get_height(to_align);
   213be:	1a12      	subs	r2, r2, r0
   213c0:	e7a9      	b.n	21316 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   213c2:	888a      	ldrh	r2, [r1, #4]
   213c4:	880e      	ldrh	r6, [r1, #0]
   213c6:	3201      	adds	r2, #1
   213c8:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   213ca:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   213ce:	fa06 f682 	sxtah	r6, r6, r2
   213d2:	8882      	ldrh	r2, [r0, #4]
   213d4:	3201      	adds	r2, #1
   213d6:	1b52      	subs	r2, r2, r5
   213d8:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   213dc:	fa00 f282 	sxtah	r2, r0, r2
   213e0:	1052      	asrs	r2, r2, #1
   213e2:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   213e6:	e7e6      	b.n	213b6 <_lv_area_align+0x12c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   213e8:	880a      	ldrh	r2, [r1, #0]
   213ea:	888e      	ldrh	r6, [r1, #4]
   213ec:	8880      	ldrh	r0, [r0, #4]
   213ee:	1b92      	subs	r2, r2, r6
   213f0:	4402      	add	r2, r0
   213f2:	1b52      	subs	r2, r2, r5
   213f4:	e7df      	b.n	213b6 <_lv_area_align+0x12c>
            res->x = 0;
   213f6:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   213f8:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   213fa:	88c2      	ldrh	r2, [r0, #6]
   213fc:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   213fe:	1b12      	subs	r2, r2, r4
   21400:	e789      	b.n	21316 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   21402:	888a      	ldrh	r2, [r1, #4]
   21404:	8809      	ldrh	r1, [r1, #0]
   21406:	3201      	adds	r2, #1
   21408:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2140a:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2140e:	fa01 f182 	sxtah	r1, r1, r2
   21412:	8882      	ldrh	r2, [r0, #4]
   21414:	3201      	adds	r2, #1
   21416:	1b52      	subs	r2, r2, r5
   21418:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2141c:	fa06 f282 	sxtah	r2, r6, r2
   21420:	1052      	asrs	r2, r2, #1
   21422:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   21426:	e7e7      	b.n	213f8 <_lv_area_align+0x16e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   21428:	880a      	ldrh	r2, [r1, #0]
   2142a:	8889      	ldrh	r1, [r1, #4]
   2142c:	1a52      	subs	r2, r2, r1
   2142e:	8881      	ldrh	r1, [r0, #4]
   21430:	440a      	add	r2, r1
   21432:	1b52      	subs	r2, r2, r5
   21434:	e7e0      	b.n	213f8 <_lv_area_align+0x16e>
   21436:	888a      	ldrh	r2, [r1, #4]
   21438:	1c50      	adds	r0, r2, #1
   2143a:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2143c:	1a12      	subs	r2, r2, r0
   2143e:	e784      	b.n	2134a <_lv_area_align+0xc0>
   21440:	888a      	ldrh	r2, [r1, #4]
   21442:	1c56      	adds	r6, r2, #1
   21444:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   21446:	1b92      	subs	r2, r2, r6
   21448:	e74f      	b.n	212ea <_lv_area_align+0x60>
   2144a:	888a      	ldrh	r2, [r1, #4]
   2144c:	1c56      	adds	r6, r2, #1
   2144e:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   21450:	1b92      	subs	r2, r2, r6
   21452:	e785      	b.n	21360 <_lv_area_align+0xd6>
   21454:	8882      	ldrh	r2, [r0, #4]
   21456:	3201      	adds	r2, #1
   21458:	e77f      	b.n	2135a <_lv_area_align+0xd0>
   2145a:	8882      	ldrh	r2, [r0, #4]
   2145c:	3201      	adds	r2, #1
   2145e:	e7a7      	b.n	213b0 <_lv_area_align+0x126>
   21460:	8882      	ldrh	r2, [r0, #4]
   21462:	3201      	adds	r2, #1
   21464:	e79b      	b.n	2139e <_lv_area_align+0x114>

00021466 <lv_color_fill>:
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
   21466:	2a10      	cmp	r2, #16
   21468:	4603      	mov	r3, r0
   2146a:	f100 0040 	add.w	r0, r0, #64	; 0x40
   2146e:	d804      	bhi.n	2147a <lv_color_fill+0x14>
   21470:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        *buf = color;
        buf++;

        px_num -= 16;
    }
    while(px_num) {
   21474:	4293      	cmp	r3, r2
   21476:	d112      	bne.n	2149e <lv_color_fill+0x38>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   21478:	4770      	bx	lr
        *buf = color;
   2147a:	e940 1110 	strd	r1, r1, [r0, #-64]	; 0x40
        *buf = color;
   2147e:	e940 110e 	strd	r1, r1, [r0, #-56]	; 0x38
        *buf = color;
   21482:	e940 110c 	strd	r1, r1, [r0, #-48]	; 0x30
        *buf = color;
   21486:	e940 110a 	strd	r1, r1, [r0, #-40]	; 0x28
        *buf = color;
   2148a:	e940 1108 	strd	r1, r1, [r0, #-32]
        *buf = color;
   2148e:	e940 1106 	strd	r1, r1, [r0, #-24]
        *buf = color;
   21492:	e940 1104 	strd	r1, r1, [r0, #-16]
        *buf = color;
   21496:	e940 1102 	strd	r1, r1, [r0, #-8]
        px_num -= 16;
   2149a:	3a10      	subs	r2, #16
   2149c:	e7e3      	b.n	21466 <lv_color_fill>
        *buf = color;
   2149e:	f843 1b04 	str.w	r1, [r3], #4
        px_num --;
   214a2:	e7e7      	b.n	21474 <lv_color_fill+0xe>

000214a4 <lv_color_darken>:
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   214a4:	b510      	push	{r4, lr}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   214a6:	f248 0481 	movw	r4, #32897	; 0x8081
   214aa:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   214ae:	f3c0 4307 	ubfx	r3, r0, #16, #8
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   214b2:	f3c0 2207 	ubfx	r2, r0, #8, #8
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   214b6:	b2c0      	uxtb	r0, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   214b8:	434b      	muls	r3, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   214ba:	434a      	muls	r2, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   214bc:	4341      	muls	r1, r0
   214be:	2000      	movs	r0, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   214c0:	4363      	muls	r3, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   214c2:	4362      	muls	r2, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   214c4:	434c      	muls	r4, r1
   214c6:	0de4      	lsrs	r4, r4, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   214c8:	f3c2 52c7 	ubfx	r2, r2, #23, #8
   214cc:	f364 0007 	bfi	r0, r4, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   214d0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
   214d4:	f362 200f 	bfi	r0, r2, #8, #8
   214d8:	f363 4017 	bfi	r0, r3, #16, #8
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   214dc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
   214e0:	bd10      	pop	{r4, pc}

000214e2 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   214e2:	b109      	cbz	r1, 214e8 <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
   214e4:	6803      	ldr	r3, [r0, #0]
   214e6:	50ca      	str	r2, [r1, r3]
}
   214e8:	4770      	bx	lr

000214ea <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   214ea:	b111      	cbz	r1, 214f2 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
   214ec:	6803      	ldr	r3, [r0, #0]
   214ee:	4419      	add	r1, r3
   214f0:	604a      	str	r2, [r1, #4]
}
   214f2:	4770      	bx	lr

000214f4 <_lv_ll_init>:
    ll_p->head = NULL;
   214f4:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
   214f6:	3103      	adds	r1, #3
   214f8:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
   214fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
   21500:	6001      	str	r1, [r0, #0]
}
   21502:	4770      	bx	lr

00021504 <_lv_ll_ins_head>:
{
   21504:	b538      	push	{r3, r4, r5, lr}
   21506:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   21508:	6800      	ldr	r0, [r0, #0]
   2150a:	3008      	adds	r0, #8
   2150c:	f7f1 fa7e 	bl	12a0c <lv_mem_alloc>
    if(n_new != NULL) {
   21510:	4605      	mov	r5, r0
   21512:	b180      	cbz	r0, 21536 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   21514:	4601      	mov	r1, r0
   21516:	2200      	movs	r2, #0
   21518:	4620      	mov	r0, r4
   2151a:	f7ff ffe2 	bl	214e2 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   2151e:	6862      	ldr	r2, [r4, #4]
   21520:	f7ff ffe3 	bl	214ea <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   21524:	6861      	ldr	r1, [r4, #4]
   21526:	b111      	cbz	r1, 2152e <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
   21528:	462a      	mov	r2, r5
   2152a:	f7ff ffda 	bl	214e2 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2152e:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   21530:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   21532:	b903      	cbnz	r3, 21536 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
   21534:	60a5      	str	r5, [r4, #8]
}
   21536:	4628      	mov	r0, r5
   21538:	bd38      	pop	{r3, r4, r5, pc}

0002153a <_lv_ll_ins_tail>:
{
   2153a:	b538      	push	{r3, r4, r5, lr}
   2153c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2153e:	6800      	ldr	r0, [r0, #0]
   21540:	3008      	adds	r0, #8
   21542:	f7f1 fa63 	bl	12a0c <lv_mem_alloc>
    if(n_new != NULL) {
   21546:	4605      	mov	r5, r0
   21548:	b188      	cbz	r0, 2156e <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   2154a:	4601      	mov	r1, r0
   2154c:	2200      	movs	r2, #0
   2154e:	4620      	mov	r0, r4
   21550:	f7ff ffcb 	bl	214ea <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
   21554:	4629      	mov	r1, r5
   21556:	68a2      	ldr	r2, [r4, #8]
   21558:	f7ff ffc3 	bl	214e2 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   2155c:	68a1      	ldr	r1, [r4, #8]
   2155e:	b111      	cbz	r1, 21566 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
   21560:	462a      	mov	r2, r5
   21562:	f7ff ffc2 	bl	214ea <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   21566:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   21568:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2156a:	b903      	cbnz	r3, 2156e <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
   2156c:	6065      	str	r5, [r4, #4]
}
   2156e:	4628      	mov	r0, r5
   21570:	bd38      	pop	{r3, r4, r5, pc}

00021572 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   21572:	b100      	cbz	r0, 21576 <_lv_ll_get_head+0x4>
        head = ll_p->head;
   21574:	6840      	ldr	r0, [r0, #4]
}
   21576:	4770      	bx	lr

00021578 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   21578:	b100      	cbz	r0, 2157c <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   2157a:	6880      	ldr	r0, [r0, #8]
}
   2157c:	4770      	bx	lr

0002157e <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
   2157e:	b110      	cbz	r0, 21586 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
   21580:	6803      	ldr	r3, [r0, #0]
   21582:	4419      	add	r1, r3
   21584:	6848      	ldr	r0, [r1, #4]
}
   21586:	4770      	bx	lr

00021588 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
   21588:	b108      	cbz	r0, 2158e <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
   2158a:	6803      	ldr	r3, [r0, #0]
   2158c:	58c8      	ldr	r0, [r1, r3]
}
   2158e:	4770      	bx	lr

00021590 <_lv_ll_ins_prev>:
{
   21590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21592:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   21594:	4605      	mov	r5, r0
   21596:	b348      	cbz	r0, 215ec <_lv_ll_ins_prev+0x5c>
   21598:	b351      	cbz	r1, 215f0 <_lv_ll_ins_prev+0x60>
    if(_lv_ll_get_head(ll_p) == n_act) {
   2159a:	6843      	ldr	r3, [r0, #4]
   2159c:	4299      	cmp	r1, r3
   2159e:	d107      	bne.n	215b0 <_lv_ll_ins_prev+0x20>
        n_new = _lv_ll_ins_head(ll_p);
   215a0:	f7ff ffb0 	bl	21504 <_lv_ll_ins_head>
        if(n_new == NULL) return NULL;
   215a4:	2800      	cmp	r0, #0
   215a6:	bf38      	it	cc
   215a8:	2000      	movcc	r0, #0
   215aa:	4604      	mov	r4, r0
}
   215ac:	4620      	mov	r0, r4
   215ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   215b0:	6800      	ldr	r0, [r0, #0]
   215b2:	3008      	adds	r0, #8
   215b4:	f7f1 fa2a 	bl	12a0c <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   215b8:	4604      	mov	r4, r0
   215ba:	2800      	cmp	r0, #0
   215bc:	d0f6      	beq.n	215ac <_lv_ll_ins_prev+0x1c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   215be:	4631      	mov	r1, r6
   215c0:	4628      	mov	r0, r5
   215c2:	f7ff ffe1 	bl	21588 <_lv_ll_get_prev>
   215c6:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   215c8:	4622      	mov	r2, r4
   215ca:	4601      	mov	r1, r0
   215cc:	4628      	mov	r0, r5
   215ce:	f7ff ff8c 	bl	214ea <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   215d2:	463a      	mov	r2, r7
   215d4:	4621      	mov	r1, r4
   215d6:	f7ff ff84 	bl	214e2 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
   215da:	4622      	mov	r2, r4
   215dc:	4631      	mov	r1, r6
   215de:	f7ff ff80 	bl	214e2 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
   215e2:	4632      	mov	r2, r6
   215e4:	4621      	mov	r1, r4
   215e6:	f7ff ff80 	bl	214ea <node_set_next.isra.0>
   215ea:	e7df      	b.n	215ac <_lv_ll_ins_prev+0x1c>
    if(NULL == ll_p || NULL == n_act) return NULL;
   215ec:	4604      	mov	r4, r0
   215ee:	e7dd      	b.n	215ac <_lv_ll_ins_prev+0x1c>
   215f0:	460c      	mov	r4, r1
   215f2:	e7db      	b.n	215ac <_lv_ll_ins_prev+0x1c>

000215f4 <_lv_ll_remove>:
{
   215f4:	b570      	push	{r4, r5, r6, lr}
   215f6:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   215f8:	4604      	mov	r4, r0
   215fa:	b308      	cbz	r0, 21640 <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
   215fc:	6843      	ldr	r3, [r0, #4]
   215fe:	4299      	cmp	r1, r3
   21600:	d10e      	bne.n	21620 <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   21602:	4629      	mov	r1, r5
   21604:	4620      	mov	r0, r4
   21606:	f7ff ffba 	bl	2157e <_lv_ll_get_next>
   2160a:	4601      	mov	r1, r0
   2160c:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   2160e:	b908      	cbnz	r0, 21614 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
   21610:	60a0      	str	r0, [r4, #8]
}
   21612:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   21614:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   21616:	4620      	mov	r0, r4
}
   21618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   2161c:	f7ff bf61 	b.w	214e2 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   21620:	6883      	ldr	r3, [r0, #8]
   21622:	4299      	cmp	r1, r3
   21624:	d10e      	bne.n	21644 <_lv_ll_remove+0x50>
   21626:	f7ff ffaf 	bl	21588 <_lv_ll_get_prev>
   2162a:	4601      	mov	r1, r0
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   2162c:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   2162e:	b908      	cbnz	r0, 21634 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
   21630:	6060      	str	r0, [r4, #4]
   21632:	e7ee      	b.n	21612 <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   21634:	4620      	mov	r0, r4
}
   21636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   2163a:	2200      	movs	r2, #0
   2163c:	f7ff bf55 	b.w	214ea <node_set_next.isra.0>
    if(_lv_ll_get_head(ll_p) == node_p) {
   21640:	2900      	cmp	r1, #0
   21642:	d0de      	beq.n	21602 <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   21644:	4629      	mov	r1, r5
   21646:	4620      	mov	r0, r4
   21648:	f7ff ff9e 	bl	21588 <_lv_ll_get_prev>
   2164c:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2164e:	4620      	mov	r0, r4
   21650:	f7ff ff95 	bl	2157e <_lv_ll_get_next>
   21654:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   21656:	4602      	mov	r2, r0
   21658:	4631      	mov	r1, r6
   2165a:	4620      	mov	r0, r4
   2165c:	f7ff ff45 	bl	214ea <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   21660:	4632      	mov	r2, r6
   21662:	4629      	mov	r1, r5
   21664:	e7d7      	b.n	21616 <_lv_ll_remove+0x22>

00021666 <_lv_ll_clear>:
{
   21666:	b570      	push	{r4, r5, r6, lr}
    if(ll_p != NULL) {
   21668:	4604      	mov	r4, r0
   2166a:	b108      	cbz	r0, 21670 <_lv_ll_clear+0xa>
        head = ll_p->head;
   2166c:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
   2166e:	b905      	cbnz	r5, 21672 <_lv_ll_clear+0xc>
}
   21670:	bd70      	pop	{r4, r5, r6, pc}
        i_next = _lv_ll_get_next(ll_p, i);
   21672:	4629      	mov	r1, r5
   21674:	4620      	mov	r0, r4
   21676:	f7ff ff82 	bl	2157e <_lv_ll_get_next>
   2167a:	4606      	mov	r6, r0
        _lv_ll_remove(ll_p, i);
   2167c:	4629      	mov	r1, r5
   2167e:	4620      	mov	r0, r4
   21680:	f7ff ffb8 	bl	215f4 <_lv_ll_remove>
        lv_mem_free(i);
   21684:	4628      	mov	r0, r5
   21686:	f7f1 f9e9 	bl	12a5c <lv_mem_free>
        i = i_next;
   2168a:	4635      	mov	r5, r6
   2168c:	e7ef      	b.n	2166e <_lv_ll_clear+0x8>

0002168e <_lv_ll_get_len>:
    if(ll_p != NULL) {
   2168e:	4602      	mov	r2, r0
{
   21690:	b510      	push	{r4, lr}
    if(ll_p != NULL) {
   21692:	b150      	cbz	r0, 216aa <_lv_ll_get_len+0x1c>
        head = ll_p->head;
   21694:	2400      	movs	r4, #0
   21696:	6841      	ldr	r1, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
   21698:	b909      	cbnz	r1, 2169e <_lv_ll_get_len+0x10>
}
   2169a:	4620      	mov	r0, r4
   2169c:	bd10      	pop	{r4, pc}
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
   2169e:	4610      	mov	r0, r2
   216a0:	f7ff ff6d 	bl	2157e <_lv_ll_get_next>
        len++;
   216a4:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
   216a6:	4601      	mov	r1, r0
   216a8:	e7f6      	b.n	21698 <_lv_ll_get_len+0xa>
   216aa:	4604      	mov	r4, r0
    return len;
   216ac:	e7f5      	b.n	2169a <_lv_ll_get_len+0xc>

000216ae <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   216ae:	4291      	cmp	r1, r2
{
   216b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   216b2:	4604      	mov	r4, r0
   216b4:	460d      	mov	r5, r1
   216b6:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   216b8:	d01f      	beq.n	216fa <_lv_ll_move_before+0x4c>
    if(n_after != NULL)
   216ba:	b1fa      	cbz	r2, 216fc <_lv_ll_move_before+0x4e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   216bc:	4611      	mov	r1, r2
   216be:	f7ff ff63 	bl	21588 <_lv_ll_get_prev>
   216c2:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   216c4:	42ae      	cmp	r6, r5
   216c6:	d018      	beq.n	216fa <_lv_ll_move_before+0x4c>
    _lv_ll_remove(ll_p, n_act);
   216c8:	4629      	mov	r1, r5
   216ca:	4620      	mov	r0, r4
   216cc:	f7ff ff92 	bl	215f4 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
   216d0:	4620      	mov	r0, r4
   216d2:	462a      	mov	r2, r5
   216d4:	4631      	mov	r1, r6
   216d6:	f7ff ff08 	bl	214ea <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   216da:	4632      	mov	r2, r6
   216dc:	4629      	mov	r1, r5
   216de:	f7ff ff00 	bl	214e2 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
   216e2:	462a      	mov	r2, r5
   216e4:	4639      	mov	r1, r7
   216e6:	f7ff fefc 	bl	214e2 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
   216ea:	463a      	mov	r2, r7
   216ec:	4629      	mov	r1, r5
   216ee:	f7ff fefc 	bl	214ea <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   216f2:	b907      	cbnz	r7, 216f6 <_lv_ll_move_before+0x48>
   216f4:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   216f6:	b906      	cbnz	r6, 216fa <_lv_ll_move_before+0x4c>
   216f8:	6065      	str	r5, [r4, #4]
}
   216fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   216fc:	b108      	cbz	r0, 21702 <_lv_ll_move_before+0x54>
        tail = ll_p->tail;
   216fe:	6886      	ldr	r6, [r0, #8]
   21700:	e7e0      	b.n	216c4 <_lv_ll_move_before+0x16>
    void * tail = NULL;
   21702:	4606      	mov	r6, r0
   21704:	e7de      	b.n	216c4 <_lv_ll_move_before+0x16>

00021706 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   21706:	b130      	cbz	r0, 21716 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   21708:	6843      	ldr	r3, [r0, #4]
   2170a:	b933      	cbnz	r3, 2171a <_lv_ll_is_empty+0x14>
   2170c:	6880      	ldr	r0, [r0, #8]
   2170e:	fab0 f080 	clz	r0, r0
   21712:	0940      	lsrs	r0, r0, #5
   21714:	4770      	bx	lr
    if(ll_p == NULL) return true;
   21716:	2001      	movs	r0, #1
   21718:	4770      	bx	lr
    return false;
   2171a:	2000      	movs	r0, #0
}
   2171c:	4770      	bx	lr

0002171e <_lv_sqrt>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/

    uint32_t root = 0;
   2171e:	2300      	movs	r3, #0
{
   21720:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   21722:	0200      	lsls	r0, r0, #8
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   21724:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
   21726:	fb04 f504 	mul.w	r5, r4, r4
   2172a:	4285      	cmp	r5, r0
   2172c:	bf98      	it	ls
   2172e:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
   21730:	0852      	lsrs	r2, r2, #1
   21732:	d1f7      	bne.n	21724 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   21734:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
   21736:	011b      	lsls	r3, r3, #4
   21738:	b2db      	uxtb	r3, r3
    q->i = (uint32_t) root >> 4;
   2173a:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   2173c:	804b      	strh	r3, [r1, #2]
}
   2173e:	bd30      	pop	{r4, r5, pc}

00021740 <_lv_mem_init>:
}
   21740:	4770      	bx	lr

00021742 <lv_task_create>:
{
   21742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21746:	4680      	mov	r8, r0
   21748:	460f      	mov	r7, r1
   2174a:	4616      	mov	r6, r2
   2174c:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   2174e:	f7f1 faaf 	bl	12cb0 <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   21752:	4604      	mov	r4, r0
   21754:	b130      	cbz	r0, 21764 <lv_task_create+0x22>
    lv_task_set_prio(new_task, prio);
   21756:	4631      	mov	r1, r6
    task->task_cb = task_cb;
   21758:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   2175c:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   2175e:	f7f1 fbf1 	bl	12f44 <lv_task_set_prio>
    new_task->user_data = user_data;
   21762:	60e5      	str	r5, [r4, #12]
}
   21764:	4620      	mov	r0, r4
   21766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002176a <lv_task_ready>:
{
   2176a:	b510      	push	{r4, lr}
   2176c:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   2176e:	f7ff fbe6 	bl	20f3e <lv_tick_get>
   21772:	6823      	ldr	r3, [r4, #0]
   21774:	43db      	mvns	r3, r3
   21776:	4403      	add	r3, r0
   21778:	6063      	str	r3, [r4, #4]
}
   2177a:	bd10      	pop	{r4, pc}

0002177c <lv_txt_iso8859_1_next>:
    if(i == NULL) return txt[1]; /*Get the next char */
   2177c:	b909      	cbnz	r1, 21782 <lv_txt_iso8859_1_next+0x6>
   2177e:	7840      	ldrb	r0, [r0, #1]
   21780:	4770      	bx	lr
    uint8_t letter = txt[*i];
   21782:	680b      	ldr	r3, [r1, #0]
   21784:	5cc0      	ldrb	r0, [r0, r3]
    (*i)++;
   21786:	3301      	adds	r3, #1
   21788:	600b      	str	r3, [r1, #0]
}
   2178a:	4770      	bx	lr

0002178c <lv_txt_iso8859_1_get_char_id>:
   2178c:	4608      	mov	r0, r1
   2178e:	4770      	bx	lr

00021790 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   21790:	2923      	cmp	r1, #35	; 0x23
{
   21792:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   21794:	d116      	bne.n	217c4 <_lv_txt_is_cmd+0x34>
   21796:	7802      	ldrb	r2, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   21798:	b95a      	cbnz	r2, 217b2 <_lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_PAR;
   2179a:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
   2179c:	7018      	strb	r0, [r3, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   2179e:	781a      	ldrb	r2, [r3, #0]
   217a0:	2a01      	cmp	r2, #1
   217a2:	d105      	bne.n	217b0 <_lv_txt_is_cmd+0x20>
        if(c == ' ') {
   217a4:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   217a6:	bf08      	it	eq
   217a8:	2102      	moveq	r1, #2
        ret = true;
   217aa:	4610      	mov	r0, r2
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   217ac:	bf08      	it	eq
   217ae:	7019      	strbeq	r1, [r3, #0]
}
   217b0:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   217b2:	2a01      	cmp	r2, #1
   217b4:	f04f 0000 	mov.w	r0, #0
   217b8:	d0f0      	beq.n	2179c <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   217ba:	2a02      	cmp	r2, #2
   217bc:	d1ef      	bne.n	2179e <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_WAIT;
   217be:	7018      	strb	r0, [r3, #0]
            ret    = true;
   217c0:	2001      	movs	r0, #1
   217c2:	e7ec      	b.n	2179e <_lv_txt_is_cmd+0xe>
    bool ret = false;
   217c4:	2000      	movs	r0, #0
   217c6:	e7ea      	b.n	2179e <_lv_txt_is_cmd+0xe>

000217c8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   217c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   217cc:	4680      	mov	r8, r0
   217ce:	460f      	mov	r7, r1
   217d0:	4614      	mov	r4, r2
   217d2:	4699      	mov	r9, r3
   217d4:	9d08      	ldr	r5, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   217d6:	b90c      	cbnz	r4, 217dc <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   217d8:	4626      	mov	r6, r4
   217da:	e012      	b.n	21802 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
   217dc:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   217e0:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
   217e4:	4640      	mov	r0, r8
   217e6:	4631      	mov	r1, r6
   217e8:	47a8      	blx	r5
   217ea:	2800      	cmp	r0, #0
   217ec:	dd08      	ble.n	21800 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
   217ee:	43e4      	mvns	r4, r4
   217f0:	f004 0401 	and.w	r4, r4, #1
   217f4:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
   217f8:	eb06 0709 	add.w	r7, r6, r9
{
   217fc:	4654      	mov	r4, sl
   217fe:	e7ea      	b.n	217d6 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
   21800:	d1fc      	bne.n	217fc <_lv_utils_bsearch+0x34>
}
   21802:	4630      	mov	r0, r6
   21804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021808 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   21808:	6843      	ldr	r3, [r0, #4]
   2180a:	4718      	bx	r3

0002180c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   2180c:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   2180e:	6804      	ldr	r4, [r0, #0]
   21810:	46a4      	mov	ip, r4
}
   21812:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   21814:	4760      	bx	ip

00021816 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   21816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21818:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   2181a:	460a      	mov	r2, r1
   2181c:	a901      	add	r1, sp, #4
   2181e:	f7ff fff5 	bl	2180c <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   21822:	b108      	cbz	r0, 21828 <lv_font_get_glyph_width+0x12>
   21824:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   21828:	b005      	add	sp, #20
   2182a:	f85d fb04 	ldr.w	pc, [sp], #4

0002182e <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   2182e:	7803      	ldrb	r3, [r0, #0]
   21830:	780a      	ldrb	r2, [r1, #0]
   21832:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   21834:	bf09      	itett	eq
   21836:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   21838:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   2183a:	7840      	ldrbeq	r0, [r0, #1]
   2183c:	1ac0      	subeq	r0, r0, r3

}
   2183e:	4770      	bx	lr

00021840 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   21840:	8803      	ldrh	r3, [r0, #0]
   21842:	880a      	ldrh	r2, [r1, #0]
   21844:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   21846:	bf09      	itett	eq
   21848:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   2184a:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   2184c:	8840      	ldrheq	r0, [r0, #2]
   2184e:	1ac0      	subeq	r0, r0, r3
}
   21850:	4770      	bx	lr

00021852 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   21852:	8800      	ldrh	r0, [r0, #0]
   21854:	880b      	ldrh	r3, [r1, #0]
}
   21856:	1ac0      	subs	r0, r0, r3
   21858:	4770      	bx	lr

0002185a <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
   2185a:	2909      	cmp	r1, #9
{
   2185c:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
   2185e:	d002      	beq.n	21866 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
   21860:	b911      	cbnz	r1, 21868 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
   21862:	2000      	movs	r0, #0
}
   21864:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
   21866:	2120      	movs	r1, #32
   21868:	f850 4f10 	ldr.w	r4, [r0, #16]!
   2186c:	f7f1 fd3e 	bl	132ec <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
   21870:	2800      	cmp	r0, #0
   21872:	d0f6      	beq.n	21862 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   21874:	7d21      	ldrb	r1, [r4, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   21876:	6863      	ldr	r3, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   21878:	0789      	lsls	r1, r1, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   2187a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2187e:	d1f0      	bne.n	21862 <lv_font_get_bitmap_fmt_txt+0x8>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   21880:	2a00      	cmp	r2, #0
   21882:	d0ee      	beq.n	21862 <lv_font_get_bitmap_fmt_txt+0x8>
   21884:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   21888:	6820      	ldr	r0, [r4, #0]
   2188a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2188e:	4418      	add	r0, r3
   21890:	e7e8      	b.n	21864 <lv_font_get_bitmap_fmt_txt+0xa>

00021892 <lv_color_hex>:
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   21892:	2300      	movs	r3, #0
   21894:	f360 030f 	bfi	r3, r0, #0, #16
}

static inline lv_color_t lv_color_hex(uint32_t c)
{
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
   21898:	0c00      	lsrs	r0, r0, #16
   2189a:	f360 4317 	bfi	r3, r0, #16, #8
}
   2189e:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
   218a2:	4770      	bx	lr

000218a4 <create_axis_label_iter>:
{
   218a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_chart_label_iterator_t iterator = {0};
   218a6:	2400      	movs	r4, #0
   218a8:	4627      	mov	r7, r4
   218aa:	8144      	strh	r4, [r0, #10]
    for(j = 0; list[j] != '\0'; j++) {
   218ac:	b2e3      	uxtb	r3, r4
   218ae:	5ccd      	ldrb	r5, [r1, r3]
   218b0:	1c7e      	adds	r6, r7, #1
   218b2:	b2f6      	uxtb	r6, r6
   218b4:	b95d      	cbnz	r5, 218ce <create_axis_label_iter+0x2a>
    if(iterator_dir == LV_CHART_LABEL_ITERATOR_FORWARD) {
   218b6:	2a01      	cmp	r2, #1
        iterator.is_reverse_iter = 1;
   218b8:	bf17      	itett	ne
   218ba:	2501      	movne	r5, #1
        iterator.current_pos = list;
   218bc:	460b      	moveq	r3, r1
        iterator.current_pos = list + j - 1;
   218be:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
   218c2:	185b      	addne	r3, r3, r1
    return iterator;
   218c4:	e9c0 1300 	strd	r1, r3, [r0]
   218c8:	7206      	strb	r6, [r0, #8]
   218ca:	7245      	strb	r5, [r0, #9]
}
   218cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(list[j] == '\n')
   218ce:	2d0a      	cmp	r5, #10
   218d0:	bf08      	it	eq
   218d2:	4637      	moveq	r7, r6
    for(j = 0; list[j] != '\0'; j++) {
   218d4:	3401      	adds	r4, #1
   218d6:	e7e9      	b.n	218ac <create_axis_label_iter+0x8>

000218d8 <get_next_axis_label>:
{
   218d8:	b538      	push	{r3, r4, r5, lr}
    if(iterator->is_reverse_iter) {
   218da:	7a42      	ldrb	r2, [r0, #9]
{
   218dc:	460d      	mov	r5, r1
    if(iterator->is_reverse_iter) {
   218de:	bb42      	cbnz	r2, 21932 <get_next_axis_label+0x5a>
        while(iterator->current_pos[label_len] != '\n' &&
   218e0:	6841      	ldr	r1, [r0, #4]
   218e2:	188b      	adds	r3, r1, r2
   218e4:	5c89      	ldrb	r1, [r1, r2]
   218e6:	290a      	cmp	r1, #10
   218e8:	d000      	beq.n	218ec <get_next_axis_label+0x14>
   218ea:	bb21      	cbnz	r1, 21936 <get_next_axis_label+0x5e>
        iterator->current_pos += label_len;
   218ec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   218f0:	bf28      	it	cs
   218f2:	f44f 7280 	movcs.w	r2, #256	; 0x100
   218f6:	6043      	str	r3, [r0, #4]
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
   218f8:	4614      	mov	r4, r2
        if(*iterator->current_pos == '\n') iterator->current_pos++;
   218fa:	781a      	ldrb	r2, [r3, #0]
   218fc:	2a0a      	cmp	r2, #10
   218fe:	bf04      	itt	eq
   21900:	3301      	addeq	r3, #1
   21902:	6043      	streq	r3, [r0, #4]
   21904:	e012      	b.n	2192c <get_next_axis_label+0x54>
            iterator->current_pos--;
   21906:	3b01      	subs	r3, #1
   21908:	6043      	str	r3, [r0, #4]
        while((*iterator->current_pos != '\n') &&
   2190a:	6843      	ldr	r3, [r0, #4]
   2190c:	7819      	ldrb	r1, [r3, #0]
   2190e:	290a      	cmp	r1, #10
   21910:	d016      	beq.n	21940 <get_next_axis_label+0x68>
              (iterator->current_pos != iterator->list_start)) {
   21912:	6801      	ldr	r1, [r0, #0]
   21914:	3201      	adds	r2, #1
        while((*iterator->current_pos != '\n') &&
   21916:	428b      	cmp	r3, r1
   21918:	d1f5      	bne.n	21906 <get_next_axis_label+0x2e>
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
   2191a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   2191e:	bf28      	it	cs
   21920:	f44f 7280 	movcs.w	r2, #256	; 0x100
        strncpy(buf, label_start, label_len);
   21924:	4628      	mov	r0, r5
   21926:	4614      	mov	r4, r2
   21928:	f7f7 fc20 	bl	1916c <strncpy>
    buf[label_len] = '\0';
   2192c:	2300      	movs	r3, #0
   2192e:	552b      	strb	r3, [r5, r4]
}
   21930:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t label_len = 0;
   21932:	2200      	movs	r2, #0
   21934:	e7e9      	b.n	2190a <get_next_axis_label+0x32>
            if(label_len < LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
   21936:	2aff      	cmp	r2, #255	; 0xff
                buf[label_len] = iterator->current_pos[label_len];
   21938:	bf98      	it	ls
   2193a:	54a9      	strbls	r1, [r5, r2]
                label_len++;
   2193c:	3201      	adds	r2, #1
   2193e:	e7cf      	b.n	218e0 <get_next_axis_label+0x8>
            label_start++;
   21940:	1c59      	adds	r1, r3, #1
            iterator->current_pos--;
   21942:	3b01      	subs	r3, #1
   21944:	6043      	str	r3, [r0, #4]
   21946:	e7e8      	b.n	2191a <get_next_axis_label+0x42>

00021948 <get_series_area>:

    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
}

static void get_series_area(lv_obj_t * chart, lv_area_t * series_area)
{
   21948:	b538      	push	{r3, r4, r5, lr}
   2194a:	460c      	mov	r4, r1
   2194c:	4605      	mov	r5, r0
   2194e:	f100 0110 	add.w	r1, r0, #16
   21952:	2208      	movs	r2, #8
   21954:	4620      	mov	r0, r4
   21956:	f7f7 fc57 	bl	19208 <memcpy>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   2195a:	2212      	movs	r2, #18
   2195c:	2100      	movs	r1, #0
   2195e:	4628      	mov	r0, r5
   21960:	f7ed fc54 	bl	f20c <_lv_obj_get_style_int>
    lv_area_copy(series_area, &chart->coords);
    series_area->x1 += lv_obj_get_style_pad_left(chart, LV_CHART_PART_BG);
   21964:	8823      	ldrh	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   21966:	2213      	movs	r2, #19
   21968:	4418      	add	r0, r3
   2196a:	2100      	movs	r1, #0
   2196c:	8020      	strh	r0, [r4, #0]
   2196e:	4628      	mov	r0, r5
   21970:	f7ed fc4c 	bl	f20c <_lv_obj_get_style_int>
    series_area->x2 -= lv_obj_get_style_pad_right(chart, LV_CHART_PART_BG);
   21974:	88a3      	ldrh	r3, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   21976:	2210      	movs	r2, #16
   21978:	1a1b      	subs	r3, r3, r0
   2197a:	2100      	movs	r1, #0
   2197c:	80a3      	strh	r3, [r4, #4]
   2197e:	4628      	mov	r0, r5
   21980:	f7ed fc44 	bl	f20c <_lv_obj_get_style_int>
    series_area->y1 += lv_obj_get_style_pad_top(chart, LV_CHART_PART_BG);
   21984:	8863      	ldrh	r3, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   21986:	2211      	movs	r2, #17
   21988:	4418      	add	r0, r3
   2198a:	8060      	strh	r0, [r4, #2]
   2198c:	2100      	movs	r1, #0
   2198e:	4628      	mov	r0, r5
   21990:	f7ed fc3c 	bl	f20c <_lv_obj_get_style_int>
    series_area->y2 -= lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_BG);
   21994:	88e3      	ldrh	r3, [r4, #6]
   21996:	1a1b      	subs	r3, r3, r0
   21998:	80e3      	strh	r3, [r4, #6]
}
   2199a:	bd38      	pop	{r3, r4, r5, pc}

0002199c <draw_y_ticks>:
{
   2199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219a0:	4698      	mov	r8, r3
   219a2:	b0e7      	sub	sp, #412	; 0x19c
   219a4:	4682      	mov	sl, r0
   219a6:	460d      	mov	r5, r1
   219a8:	4617      	mov	r7, r2
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   219aa:	f7fa fef5 	bl	1c798 <lv_obj_get_ext_attr>
                                   &ext->y_axis : &ext->secondary_y_axis;
   219ae:	f1b8 0f00 	cmp.w	r8, #0
   219b2:	f040 808f 	bne.w	21ad4 <draw_y_ticks+0x138>
   219b6:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
   219ba:	6821      	ldr	r1, [r4, #0]
   219bc:	b919      	cbnz	r1, 219c6 <draw_y_ticks+0x2a>
   219be:	7963      	ldrb	r3, [r4, #5]
   219c0:	2b00      	cmp	r3, #0
   219c2:	f000 8084 	beq.w	21ace <draw_y_ticks+0x132>
    lv_coord_t y_ofs = series_area->y1;
   219c6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   219ca:	79a6      	ldrb	r6, [r4, #6]
    lv_coord_t y_ofs = series_area->y1;
   219cc:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   219ce:	88eb      	ldrh	r3, [r5, #6]
   219d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   219d2:	3301      	adds	r3, #1
   219d4:	1a9b      	subs	r3, r3, r2
   219d6:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   219d8:	f9b5 2000 	ldrsh.w	r2, [r5]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   219dc:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   219de:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        x_ofs = series_area->x2;
   219e2:	f1b8 0f00 	cmp.w	r8, #0
   219e6:	bf0c      	ite	eq
   219e8:	4693      	moveq	fp, r2
   219ea:	469b      	movne	fp, r3
    if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   219ec:	2eff      	cmp	r6, #255	; 0xff
   219ee:	d105      	bne.n	219fc <draw_y_ticks+0x60>
   219f0:	1c5e      	adds	r6, r3, #1
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
   219f2:	230f      	movs	r3, #15
   219f4:	1ab6      	subs	r6, r6, r2
   219f6:	b236      	sxth	r6, r6
   219f8:	fb96 f6f3 	sdiv	r6, r6, r3
    if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   219fc:	79e5      	ldrb	r5, [r4, #7]
        major_tick_len = y_axis->major_tick_len;
   219fe:	b276      	sxtb	r6, r6
    if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
   21a00:	2dff      	cmp	r5, #255	; 0xff
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
   21a02:	bf02      	ittt	eq
   21a04:	2303      	moveq	r3, #3
   21a06:	0075      	lsleq	r5, r6, #1
   21a08:	fb95 f5f3 	sdiveq	r5, r5, r3
    iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE :
   21a0c:	7922      	ldrb	r2, [r4, #4]
    if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
   21a0e:	f1b8 0f01 	cmp.w	r8, #1
        minor_tick_len = y_axis->minor_tick_len;
   21a12:	b26d      	sxtb	r5, r5
    iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE :
   21a14:	f082 0202 	eor.w	r2, r2, #2
        major_tick_len *= -1;
   21a18:	bf04      	itt	eq
   21a1a:	4276      	negeq	r6, r6
        minor_tick_len *= -1;
   21a1c:	426d      	negeq	r5, r5
    iter = create_axis_label_iter(y_axis->list_of_values, iter_dir);
   21a1e:	a80c      	add	r0, sp, #48	; 0x30
   21a20:	f3c2 0240 	ubfx	r2, r2, #1, #1
        major_tick_len *= -1;
   21a24:	bf04      	itt	eq
   21a26:	b276      	sxtbeq	r6, r6
        minor_tick_len *= -1;
   21a28:	b26d      	sxtbeq	r5, r5
    iter = create_axis_label_iter(y_axis->list_of_values, iter_dir);
   21a2a:	f7ff ff3b 	bl	218a4 <create_axis_label_iter>
   21a2e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
   21a32:	c807      	ldmia	r0, {r0, r1, r2}
   21a34:	e889 0007 	stmia.w	r9, {r0, r1, r2}
    if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
   21a38:	7963      	ldrb	r3, [r4, #5]
    num_of_labels = iter.items_left;
   21a3a:	f899 9008 	ldrb.w	r9, [r9, #8]
    if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
   21a3e:	b90b      	cbnz	r3, 21a44 <draw_y_ticks+0xa8>
   21a40:	2301      	movs	r3, #1
   21a42:	7163      	strb	r3, [r4, #5]
    if(num_of_labels < 2)
   21a44:	7963      	ldrb	r3, [r4, #5]
   21a46:	f1b9 0f01 	cmp.w	r9, #1
   21a4a:	9305      	str	r3, [sp, #20]
   21a4c:	d906      	bls.n	21a5c <draw_y_ticks+0xc0>
        num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
   21a4e:	9a05      	ldr	r2, [sp, #20]
   21a50:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   21a54:	fb13 f302 	smulbb	r3, r3, r2
   21a58:	b2db      	uxtb	r3, r3
   21a5a:	9305      	str	r3, [sp, #20]
    lv_style_int_t label_dist  = which_axis == LV_CHART_AXIS_PRIMARY_Y ?
   21a5c:	f1b8 0f00 	cmp.w	r8, #0
   21a60:	d13b      	bne.n	21ada <draw_y_ticks+0x13e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   21a62:	2212      	movs	r2, #18
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   21a64:	2101      	movs	r1, #1
   21a66:	4650      	mov	r0, sl
   21a68:	f7ed fbd0 	bl	f20c <_lv_obj_get_style_int>
    lv_draw_line_dsc_init(&line_dsc);
   21a6c:	ab19      	add	r3, sp, #100	; 0x64
   21a6e:	9006      	str	r0, [sp, #24]
   21a70:	4618      	mov	r0, r3
   21a72:	f7fc ffdf 	bl	1ea34 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
   21a76:	ab19      	add	r3, sp, #100	; 0x64
   21a78:	461a      	mov	r2, r3
   21a7a:	2100      	movs	r1, #0
   21a7c:	4650      	mov	r0, sl
   21a7e:	f7fb f8bb 	bl	1cbf8 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
   21a82:	a81c      	add	r0, sp, #112	; 0x70
   21a84:	f7ee ff1c 	bl	108c0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
   21a88:	4650      	mov	r0, sl
   21a8a:	aa1c      	add	r2, sp, #112	; 0x70
   21a8c:	2100      	movs	r1, #0
   21a8e:	f7fb f840 	bl	1cb12 <lv_obj_init_draw_label_dsc>
            p1.x--;
   21a92:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
            p1.x++;
   21a96:	f10b 0b01 	add.w	fp, fp, #1
   21a9a:	f1b8 0f00 	cmp.w	r8, #0
   21a9e:	bf08      	it	eq
   21aa0:	4693      	moveq	fp, r2
   21aa2:	fa0f fb8b 	sxth.w	fp, fp
            p2.x = p1.x - minor_tick_len; /* minor tick */
   21aa6:	ebab 0505 	sub.w	r5, fp, r5
   21aaa:	b22b      	sxth	r3, r5
            p2.x = p1.x - major_tick_len; /* major tick */
   21aac:	ebab 0606 	sub.w	r6, fp, r6
            p2.x = p1.x - minor_tick_len; /* minor tick */
   21ab0:	9308      	str	r3, [sp, #32]
            p2.x = p1.x - major_tick_len; /* major tick */
   21ab2:	b233      	sxth	r3, r6
   21ab4:	9307      	str	r3, [sp, #28]
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   21ab6:	9b05      	ldr	r3, [sp, #20]
   21ab8:	f04f 0a00 	mov.w	sl, #0
   21abc:	3301      	adds	r3, #1
   21abe:	930b      	str	r3, [sp, #44]	; 0x2c
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
   21ac0:	ab19      	add	r3, sp, #100	; 0x64
   21ac2:	461e      	mov	r6, r3
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   21ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21ac6:	fa5f f58a 	uxtb.w	r5, sl
   21aca:	429d      	cmp	r5, r3
   21acc:	db07      	blt.n	21ade <draw_y_ticks+0x142>
}
   21ace:	b067      	add	sp, #412	; 0x19c
   21ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                   &ext->y_axis : &ext->secondary_y_axis;
   21ad4:	f100 043c 	add.w	r4, r0, #60	; 0x3c
   21ad8:	e76f      	b.n	219ba <draw_y_ticks+0x1e>
   21ada:	2213      	movs	r2, #19
   21adc:	e7c2      	b.n	21a64 <draw_y_ticks+0xc8>
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
   21ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21ae0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
   21ae4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
   21ae8:	1ad3      	subs	r3, r2, r3
   21aea:	436b      	muls	r3, r5
   21aec:	9a05      	ldr	r2, [sp, #20]
   21aee:	fb93 f3f2 	sdiv	r3, r3, r2
   21af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21af4:	4413      	add	r3, r2
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
   21af6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
   21af8:	b21b      	sxth	r3, r3
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
   21afa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
        p2.y = p1.y =
   21afe:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
   21b02:	1a98      	subs	r0, r3, r2
   21b04:	4288      	cmp	r0, r1
        p2.y = p1.y =
   21b06:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
   21b0a:	dce0      	bgt.n	21ace <draw_y_ticks+0x132>
        if(p2.y + label_dsc.font->line_height < mask->y1) {
   21b0c:	4413      	add	r3, r2
   21b0e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   21b12:	4293      	cmp	r3, r2
   21b14:	da0f      	bge.n	21b36 <draw_y_ticks+0x19a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
   21b16:	b13d      	cbz	r5, 21b28 <draw_y_ticks+0x18c>
   21b18:	7962      	ldrb	r2, [r4, #5]
   21b1a:	fbb5 f3f2 	udiv	r3, r5, r2
   21b1e:	fb02 5513 	mls	r5, r2, r3, r5
            if(is_tick_with_label(i, y_axis)) {
   21b22:	f015 0fff 	tst.w	r5, #255	; 0xff
   21b26:	d103      	bne.n	21b30 <draw_y_ticks+0x194>
                get_next_axis_label(&iter, buf);
   21b28:	a925      	add	r1, sp, #148	; 0x94
   21b2a:	a816      	add	r0, sp, #88	; 0x58
   21b2c:	f7ff fed4 	bl	218d8 <get_next_axis_label>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
   21b30:	f10a 0a01 	add.w	sl, sl, #1
   21b34:	e7c6      	b.n	21ac4 <draw_y_ticks+0x128>
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
   21b36:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
        if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
   21b3a:	f1b9 0f00 	cmp.w	r9, #0
   21b3e:	d05e      	beq.n	21bfe <draw_y_ticks+0x262>
   21b40:	2d00      	cmp	r5, #0
   21b42:	d05e      	beq.n	21c02 <draw_y_ticks+0x266>
   21b44:	7962      	ldrb	r2, [r4, #5]
   21b46:	fbb5 f3f2 	udiv	r3, r5, r2
   21b4a:	fb02 5313 	mls	r3, r2, r3, r5
            p2.x = p1.x - major_tick_len; /* major tick */
   21b4e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
        if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
   21b52:	b2db      	uxtb	r3, r3
            p2.x = p1.x - major_tick_len; /* major tick */
   21b54:	2b00      	cmp	r3, #0
   21b56:	bf08      	it	eq
   21b58:	460a      	moveq	r2, r1
   21b5a:	4613      	mov	r3, r2
   21b5c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) {
   21b60:	7923      	ldrb	r3, [r4, #4]
   21b62:	079a      	lsls	r2, r3, #30
   21b64:	d55b      	bpl.n	21c1e <draw_y_ticks+0x282>
            if(i != 0)
   21b66:	2d00      	cmp	r5, #0
   21b68:	d04d      	beq.n	21c06 <draw_y_ticks+0x26a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
   21b6a:	4633      	mov	r3, r6
   21b6c:	463a      	mov	r2, r7
   21b6e:	a912      	add	r1, sp, #72	; 0x48
   21b70:	a811      	add	r0, sp, #68	; 0x44
   21b72:	f7ef fb2b 	bl	111cc <lv_draw_line>
        if(num_of_labels != 0) {
   21b76:	f1b9 0f00 	cmp.w	r9, #0
   21b7a:	d0d9      	beq.n	21b30 <draw_y_ticks+0x194>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
   21b7c:	7962      	ldrb	r2, [r4, #5]
   21b7e:	fbb5 f3f2 	udiv	r3, r5, r2
   21b82:	fb02 5513 	mls	r5, r2, r3, r5
            if(is_tick_with_label(i, y_axis)) {
   21b86:	f015 0fff 	tst.w	r5, #255	; 0xff
   21b8a:	d1d1      	bne.n	21b30 <draw_y_ticks+0x194>
                get_next_axis_label(&iter, buf);
   21b8c:	a925      	add	r1, sp, #148	; 0x94
   21b8e:	a816      	add	r0, sp, #88	; 0x58
   21b90:	f7ff fea2 	bl	218d8 <get_next_axis_label>
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
   21b94:	f647 4318 	movw	r3, #31768	; 0x7c18
   21b98:	2204      	movs	r2, #4
   21b9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   21b9e:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
   21ba2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   21ba4:	9300      	str	r3, [sp, #0]
   21ba6:	a925      	add	r1, sp, #148	; 0x94
   21ba8:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
   21bac:	a813      	add	r0, sp, #76	; 0x4c
   21bae:	f7f1 fb2b 	bl	13208 <_lv_txt_get_size>
                lv_area_t a = {.y1 = p2.y - size.y / 2, .y2 = p2.y + size.y / 2};
   21bb2:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
   21bb6:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
   21bba:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   21bbe:	eba2 0163 	sub.w	r1, r2, r3, asr #1
   21bc2:	eb02 0363 	add.w	r3, r2, r3, asr #1
   21bc6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
                if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
   21bca:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   21bce:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                lv_area_t a = {.y1 = p2.y - size.y / 2, .y2 = p2.y + size.y / 2};
   21bd2:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
                if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
   21bd6:	f1b8 0f00 	cmp.w	r8, #0
   21bda:	d133      	bne.n	21c44 <draw_y_ticks+0x2a8>
                    a.x1 = p2.x - size.x - label_dist;
   21bdc:	9906      	ldr	r1, [sp, #24]
   21bde:	1a9a      	subs	r2, r3, r2
   21be0:	1a52      	subs	r2, r2, r1
   21be2:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
                    a.x2 = p2.x - label_dist;
   21be6:	1a5b      	subs	r3, r3, r1
                    a.x2 = p2.x + size.x + label_dist;
   21be8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
   21bec:	2300      	movs	r3, #0
   21bee:	4639      	mov	r1, r7
   21bf0:	9300      	str	r3, [sp, #0]
   21bf2:	aa1c      	add	r2, sp, #112	; 0x70
   21bf4:	ab25      	add	r3, sp, #148	; 0x94
   21bf6:	a814      	add	r0, sp, #80	; 0x50
   21bf8:	f7ee fe7c 	bl	108f4 <lv_draw_label>
   21bfc:	e798      	b.n	21b30 <draw_y_ticks+0x194>
            p2.x = p1.x - minor_tick_len; /* minor tick */
   21bfe:	9b08      	ldr	r3, [sp, #32]
   21c00:	e7ac      	b.n	21b5c <draw_y_ticks+0x1c0>
            p2.x = p1.x - major_tick_len; /* major tick */
   21c02:	9b07      	ldr	r3, [sp, #28]
   21c04:	e7aa      	b.n	21b5c <draw_y_ticks+0x1c0>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
   21c06:	07d8      	lsls	r0, r3, #31
   21c08:	d505      	bpl.n	21c16 <draw_y_ticks+0x27a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
   21c0a:	4633      	mov	r3, r6
   21c0c:	463a      	mov	r2, r7
   21c0e:	a912      	add	r1, sp, #72	; 0x48
   21c10:	a811      	add	r0, sp, #68	; 0x44
   21c12:	f7ef fadb 	bl	111cc <lv_draw_line>
        if(num_of_labels != 0) {
   21c16:	f1b9 0f00 	cmp.w	r9, #0
   21c1a:	d1b7      	bne.n	21b8c <draw_y_ticks+0x1f0>
   21c1c:	e788      	b.n	21b30 <draw_y_ticks+0x194>
            if(i != num_scale_ticks)
   21c1e:	9a05      	ldr	r2, [sp, #20]
   21c20:	42aa      	cmp	r2, r5
   21c22:	d00c      	beq.n	21c3e <draw_y_ticks+0x2a2>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
   21c24:	4633      	mov	r3, r6
   21c26:	463a      	mov	r2, r7
   21c28:	a912      	add	r1, sp, #72	; 0x48
   21c2a:	a811      	add	r0, sp, #68	; 0x44
   21c2c:	f7ef face 	bl	111cc <lv_draw_line>
        if(num_of_labels != 0) {
   21c30:	f1b9 0f00 	cmp.w	r9, #0
   21c34:	f43f af7c 	beq.w	21b30 <draw_y_ticks+0x194>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
   21c38:	2d00      	cmp	r5, #0
   21c3a:	d19f      	bne.n	21b7c <draw_y_ticks+0x1e0>
   21c3c:	e7a6      	b.n	21b8c <draw_y_ticks+0x1f0>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
   21c3e:	07d9      	lsls	r1, r3, #31
   21c40:	d4f0      	bmi.n	21c24 <draw_y_ticks+0x288>
   21c42:	e7f5      	b.n	21c30 <draw_y_ticks+0x294>
                    a.x1 = p2.x + label_dist;
   21c44:	9906      	ldr	r1, [sp, #24]
   21c46:	1859      	adds	r1, r3, r1
                    a.x2 = p2.x + size.x + label_dist;
   21c48:	4413      	add	r3, r2
   21c4a:	9a06      	ldr	r2, [sp, #24]
                    a.x1 = p2.x + label_dist;
   21c4c:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
                    a.x2 = p2.x + size.x + label_dist;
   21c50:	4413      	add	r3, r2
   21c52:	e7c9      	b.n	21be8 <draw_y_ticks+0x24c>

00021c54 <lv_chart_add_series>:
{
   21c54:	b570      	push	{r4, r5, r6, lr}
   21c56:	460d      	mov	r5, r1
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
   21c58:	f7fa fd9e 	bl	1c798 <lv_obj_get_ext_attr>
   21c5c:	4606      	mov	r6, r0
    lv_chart_series_t * ser = _lv_ll_ins_head(&ext->series_ll);
   21c5e:	f7ff fc51 	bl	21504 <_lv_ll_ins_head>
    if(ser == NULL) return NULL;
   21c62:	4604      	mov	r4, r0
   21c64:	b178      	cbz	r0, 21c86 <lv_chart_add_series+0x32>
    ser->color  = color;
   21c66:	6045      	str	r5, [r0, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
   21c68:	8af0      	ldrh	r0, [r6, #22]
   21c6a:	0040      	lsls	r0, r0, #1
   21c6c:	f7f0 fece 	bl	12a0c <lv_mem_alloc>
   21c70:	4605      	mov	r5, r0
   21c72:	6020      	str	r0, [r4, #0]
    if(ser->points == NULL) {
   21c74:	b948      	cbnz	r0, 21c8a <lv_chart_add_series+0x36>
        _lv_ll_remove(&ext->series_ll, ser);
   21c76:	4621      	mov	r1, r4
   21c78:	4630      	mov	r0, r6
   21c7a:	f7ff fcbb 	bl	215f4 <_lv_ll_remove>
        lv_mem_free(ser);
   21c7e:	4620      	mov	r0, r4
   21c80:	f7f0 feec 	bl	12a5c <lv_mem_free>
        return NULL;
   21c84:	462c      	mov	r4, r5
}
   21c86:	4620      	mov	r0, r4
   21c88:	bd70      	pop	{r4, r5, r6, pc}
    ser->start_point = 0;
   21c8a:	2300      	movs	r3, #0
        *p_tmp = def;
   21c8c:	f248 30e8 	movw	r0, #33768	; 0x83e8
    ser->ext_buf_assigned = false;
   21c90:	7aa2      	ldrb	r2, [r4, #10]
    ser->start_point = 0;
   21c92:	8123      	strh	r3, [r4, #8]
    ser->ext_buf_assigned = false;
   21c94:	f022 0203 	bic.w	r2, r2, #3
   21c98:	72a2      	strb	r2, [r4, #10]
    for(i = 0; i < ext->point_cnt; i++) {
   21c9a:	8af1      	ldrh	r1, [r6, #22]
   21c9c:	b29a      	uxth	r2, r3
   21c9e:	4291      	cmp	r1, r2
   21ca0:	d9f1      	bls.n	21c86 <lv_chart_add_series+0x32>
        *p_tmp = def;
   21ca2:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 0; i < ext->point_cnt; i++) {
   21ca6:	3301      	adds	r3, #1
   21ca8:	e7f7      	b.n	21c9a <lv_chart_add_series+0x46>

00021caa <lv_chart_set_type>:
{
   21caa:	b538      	push	{r3, r4, r5, lr}
   21cac:	460c      	mov	r4, r1
   21cae:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21cb0:	f7fa fd72 	bl	1c798 <lv_obj_get_ext_attr>
    if(ext->type == type) return;
   21cb4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   21cb8:	42a3      	cmp	r3, r4
   21cba:	d006      	beq.n	21cca <lv_chart_set_type+0x20>
    ext->type = type;
   21cbc:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    lv_obj_invalidate(chart);
   21cc0:	4628      	mov	r0, r5
}
   21cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
   21cc6:	f7fa b9aa 	b.w	1c01e <lv_obj_invalidate>
}
   21cca:	bd38      	pop	{r3, r4, r5, pc}

00021ccc <lv_chart_set_next>:
{
   21ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cd0:	b087      	sub	sp, #28
   21cd2:	460f      	mov	r7, r1
   21cd4:	4614      	mov	r4, r2
   21cd6:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21cd8:	f7fa fd5e 	bl	1c798 <lv_obj_get_ext_attr>
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
   21cdc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   21ce0:	893a      	ldrh	r2, [r7, #8]
   21ce2:	f013 0f01 	tst.w	r3, #1
   21ce6:	683b      	ldr	r3, [r7, #0]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21ce8:	4680      	mov	r8, r0
        ser->points[ser->start_point] =
   21cea:	f823 4012 	strh.w	r4, [r3, r2, lsl #1]
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
   21cee:	d10d      	bne.n	21d0c <lv_chart_set_next+0x40>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
   21cf0:	893b      	ldrh	r3, [r7, #8]
   21cf2:	8ac1      	ldrh	r1, [r0, #22]
   21cf4:	3301      	adds	r3, #1
   21cf6:	fbb3 f2f1 	udiv	r2, r3, r1
   21cfa:	fb01 3312 	mls	r3, r1, r2, r3
    lv_obj_invalidate(chart);
   21cfe:	4628      	mov	r0, r5
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
   21d00:	813b      	strh	r3, [r7, #8]
    lv_obj_invalidate(chart);
   21d02:	f7fa f98c 	bl	1c01e <lv_obj_invalidate>
}
   21d06:	b007      	add	sp, #28
   21d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->type & LV_CHART_TYPE_LINE) invalidate_lines(chart, ser->start_point);
   21d0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   21d10:	07da      	lsls	r2, r3, #31
   21d12:	d569      	bpl.n	21de8 <lv_chart_set_next+0x11c>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21d14:	4628      	mov	r0, r5
        if(ext->type & LV_CHART_TYPE_LINE) invalidate_lines(chart, ser->start_point);
   21d16:	893e      	ldrh	r6, [r7, #8]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21d18:	f7fa fd3e 	bl	1c798 <lv_obj_get_ext_attr>
    if(i >= ext->point_cnt) return;
   21d1c:	8ac2      	ldrh	r2, [r0, #22]
   21d1e:	9001      	str	r0, [sp, #4]
   21d20:	42b2      	cmp	r2, r6
   21d22:	d961      	bls.n	21de8 <lv_chart_set_next+0x11c>
    get_series_area(chart, &series_area);
   21d24:	4628      	mov	r0, r5
   21d26:	a902      	add	r1, sp, #8
   21d28:	f7ff fe0e 	bl	21948 <get_series_area>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   21d2c:	2290      	movs	r2, #144	; 0x90
   21d2e:	2102      	movs	r1, #2
   21d30:	4628      	mov	r0, r5
   21d32:	f9bd b008 	ldrsh.w	fp, [sp, #8]
   21d36:	f8bd 400c 	ldrh.w	r4, [sp, #12]
   21d3a:	f7ed fa67 	bl	f20c <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   21d3e:	2203      	movs	r2, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   21d40:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   21d42:	2102      	movs	r1, #2
   21d44:	4628      	mov	r0, r5
   21d46:	f7ed fa61 	bl	f20c <_lv_obj_get_style_int>
   21d4a:	2208      	movs	r2, #8
   21d4c:	4681      	mov	r9, r0
   21d4e:	eb0d 0102 	add.w	r1, sp, r2
   21d52:	a804      	add	r0, sp, #16
   21d54:	f7f7 fa58 	bl	19208 <memcpy>
    coords.y1 -= line_width + point_radius;
   21d58:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   21d5c:	eb09 020a 	add.w	r2, r9, sl
   21d60:	b212      	sxth	r2, r2
   21d62:	1a89      	subs	r1, r1, r2
   21d64:	f8ad 1012 	strh.w	r1, [sp, #18]
    coords.y2 += line_width + point_radius;
   21d68:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    if(i < ext->point_cnt - 1) {
   21d6c:	9b01      	ldr	r3, [sp, #4]
    coords.y2 += line_width + point_radius;
   21d6e:	440a      	add	r2, r1
   21d70:	f8ad 2016 	strh.w	r2, [sp, #22]
    if(i < ext->point_cnt - 1) {
   21d74:	8ada      	ldrh	r2, [r3, #22]
   21d76:	3401      	adds	r4, #1
   21d78:	1e50      	subs	r0, r2, #1
   21d7a:	eba4 040b 	sub.w	r4, r4, fp
   21d7e:	4286      	cmp	r6, r0
   21d80:	b224      	sxth	r4, r4
   21d82:	da17      	bge.n	21db4 <lv_chart_set_next+0xe8>
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21d84:	fb04 f206 	mul.w	r2, r4, r6
   21d88:	fb92 f1f0 	sdiv	r1, r2, r0
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21d8c:	4422      	add	r2, r4
   21d8e:	fb92 f2f0 	sdiv	r2, r2, r0
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21d92:	4459      	add	r1, fp
   21d94:	eba1 010a 	sub.w	r1, r1, sl
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21d98:	445a      	add	r2, fp
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21d9a:	eba1 0109 	sub.w	r1, r1, r9
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21d9e:	4452      	add	r2, sl
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21da0:	f8ad 1010 	strh.w	r1, [sp, #16]
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21da4:	444a      	add	r2, r9
        lv_obj_invalidate_area(chart, &coords);
   21da6:	4628      	mov	r0, r5
   21da8:	a904      	add	r1, sp, #16
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21daa:	f8ad 2014 	strh.w	r2, [sp, #20]
        lv_obj_invalidate_area(chart, &coords);
   21dae:	f7fa f924 	bl	1bffa <lv_obj_invalidate_area>
   21db2:	9b01      	ldr	r3, [sp, #4]
    if(i > 0) {
   21db4:	b1c6      	cbz	r6, 21de8 <lv_chart_set_next+0x11c>
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21db6:	3e01      	subs	r6, #1
   21db8:	4366      	muls	r6, r4
   21dba:	8ada      	ldrh	r2, [r3, #22]
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21dbc:	4434      	add	r4, r6
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21dbe:	3a01      	subs	r2, #1
   21dc0:	fb96 f3f2 	sdiv	r3, r6, r2
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21dc4:	fb94 f4f2 	sdiv	r4, r4, r2
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21dc8:	445b      	add	r3, fp
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21dca:	445c      	add	r4, fp
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21dcc:	eba3 030a 	sub.w	r3, r3, sl
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21dd0:	44a2      	add	sl, r4
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21dd2:	eba3 0309 	sub.w	r3, r3, r9
        lv_obj_invalidate_area(chart, &coords);
   21dd6:	4628      	mov	r0, r5
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21dd8:	44d1      	add	r9, sl
        lv_obj_invalidate_area(chart, &coords);
   21dda:	a904      	add	r1, sp, #16
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
   21ddc:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
   21de0:	f8ad 9014 	strh.w	r9, [sp, #20]
        lv_obj_invalidate_area(chart, &coords);
   21de4:	f7fa f909 	bl	1bffa <lv_obj_invalidate_area>
        if(ext->type & LV_CHART_TYPE_COLUMN) invalidate_columns(chart, ser->start_point);
   21de8:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   21dec:	079b      	lsls	r3, r3, #30
   21dee:	d537      	bpl.n	21e60 <lv_chart_set_next+0x194>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
   21df0:	4628      	mov	r0, r5
   21df2:	893e      	ldrh	r6, [r7, #8]
   21df4:	f7fa fcd0 	bl	1c798 <lv_obj_get_ext_attr>
   21df8:	4681      	mov	r9, r0
    get_series_area(chart, &series_area);
   21dfa:	a902      	add	r1, sp, #8
   21dfc:	4628      	mov	r0, r5
   21dfe:	f7ff fda3 	bl	21948 <get_series_area>
   21e02:	f8bd 400c 	ldrh.w	r4, [sp, #12]
   21e06:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
   21e0a:	4648      	mov	r0, r9
   21e0c:	3401      	adds	r4, #1
   21e0e:	1ae4      	subs	r4, r4, r3
   21e10:	f7ff fc3d 	bl	2168e <_lv_ll_get_len>
   21e14:	f8b9 3016 	ldrh.w	r3, [r9, #22]
   21e18:	b224      	sxth	r4, r4
   21e1a:	fb00 3003 	mla	r0, r0, r3, r3
   21e1e:	fbb4 f0f0 	udiv	r0, r4, r0
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
   21e22:	4374      	muls	r4, r6
   21e24:	fb94 f4f3 	sdiv	r4, r4, r3
   21e28:	f8bd 6008 	ldrh.w	r6, [sp, #8]
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
   21e2c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
   21e30:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
   21e34:	fa03 f080 	sxtah	r0, r3, r0
   21e38:	1040      	asrs	r0, r0, #1
   21e3a:	4434      	add	r4, r6
    x_act += series_area.x1 + x_ofs;
   21e3c:	fa00 f484 	sxtah	r4, r0, r4
    lv_obj_get_coords(chart, &col_a);
   21e40:	a904      	add	r1, sp, #16
   21e42:	4628      	mov	r0, r5
    x_act += series_area.x1 + x_ofs;
   21e44:	b224      	sxth	r4, r4
    lv_obj_get_coords(chart, &col_a);
   21e46:	f7fa f9d3 	bl	1c1f0 <lv_obj_get_coords>
    col_a.x1 = x_act;
   21e4a:	f8ad 4010 	strh.w	r4, [sp, #16]
    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
   21e4e:	4628      	mov	r0, r5
    col_a.x2 = col_a.x1 + col_w;
   21e50:	444c      	add	r4, r9
   21e52:	f8ad 4014 	strh.w	r4, [sp, #20]
    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
   21e56:	f7ec ff47 	bl	ece8 <lv_obj_get_disp>
   21e5a:	a904      	add	r1, sp, #16
   21e5c:	f7fb f9a4 	bl	1d1a8 <_lv_inv_area>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
   21e60:	893b      	ldrh	r3, [r7, #8]
   21e62:	f8b8 1016 	ldrh.w	r1, [r8, #22]
   21e66:	3301      	adds	r3, #1
   21e68:	fbb3 f2f1 	udiv	r2, r3, r1
   21e6c:	fb01 3312 	mls	r3, r1, r2, r3
   21e70:	813b      	strh	r3, [r7, #8]
}
   21e72:	e748      	b.n	21d06 <lv_chart_set_next+0x3a>

00021e74 <lv_chart_refresh>:
    lv_obj_invalidate(chart);
   21e74:	f7fa b8d3 	b.w	1c01e <lv_obj_invalidate>

00021e78 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   21e78:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   21e7a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   21e7c:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   21e7e:	b984      	cbnz	r4, 21ea2 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   21e80:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   21e82:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   21e84:	291f      	cmp	r1, #31
   21e86:	bf98      	it	ls
   21e88:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   21e8c:	b165      	cbz	r5, 21ea8 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   21e8e:	6881      	ldr	r1, [r0, #8]
   21e90:	428b      	cmp	r3, r1
   21e92:	d209      	bcs.n	21ea8 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   21e94:	6900      	ldr	r0, [r0, #16]
   21e96:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   21e98:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   21e9c:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   21e9e:	bc30      	pop	{r4, r5}
   21ea0:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   21ea2:	4623      	mov	r3, r4
}
   21ea4:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   21ea6:	4718      	bx	r3
			: METAL_BAD_PHYS);
   21ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21eac:	e7f7      	b.n	21e9e <metal_io_phys+0x26>

00021eae <virtqueue_create>:
{
   21eae:	b570      	push	{r4, r5, r6, lr}
   21eb0:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   21eb2:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   21eb4:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   21eb6:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   21eba:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   21ebc:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   21ebe:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   21ec0:	1c96      	adds	r6, r2, #2
   21ec2:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   21ec4:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   21ec8:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   21ecc:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   21ece:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   21ed2:	1c6e      	adds	r6, r5, #1
   21ed4:	4433      	add	r3, r6
   21ed6:	426d      	negs	r5, r5
   21ed8:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   21eda:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   21edc:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   21ede:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   21ee2:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   21ee4:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   21ee6:	b96b      	cbnz	r3, 21f04 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   21ee8:	3a01      	subs	r2, #1
   21eea:	4293      	cmp	r3, r2
   21eec:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   21ef0:	db0a      	blt.n	21f08 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   21ef2:	2300      	movs	r3, #0
   21ef4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   21ef8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   21efc:	7393      	strb	r3, [r2, #14]
   21efe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   21f02:	73d3      	strb	r3, [r2, #15]
}
   21f04:	2000      	movs	r0, #0
   21f06:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   21f08:	3301      	adds	r3, #1
   21f0a:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   21f0c:	e7ed      	b.n	21eea <virtqueue_create+0x3c>

00021f0e <virtqueue_add_buffer>:
{
   21f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21f12:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   21f14:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   21f18:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21f1a:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   21f1c:	46ba      	mov	sl, r7
{
   21f1e:	b085      	sub	sp, #20
	needed = readable + writable;
   21f20:	18d6      	adds	r6, r2, r3
{
   21f22:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   21f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21f26:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   21f2a:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   21f2c:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   21f2e:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   21f30:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21f32:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   21f36:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21f38:	42be      	cmp	r6, r7
   21f3a:	dc19      	bgt.n	21f70 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   21f3c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   21f3e:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   21f40:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   21f42:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   21f44:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   21f46:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   21f48:	1e51      	subs	r1, r2, #1
   21f4a:	885a      	ldrh	r2, [r3, #2]
}
   21f4c:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   21f4e:	400a      	ands	r2, r1
   21f50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   21f54:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   21f58:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   21f5c:	69e2      	ldr	r2, [r4, #28]
   21f5e:	8853      	ldrh	r3, [r2, #2]
   21f60:	3301      	adds	r3, #1
   21f62:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   21f64:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   21f66:	3301      	adds	r3, #1
   21f68:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   21f6a:	b005      	add	sp, #20
   21f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   21f70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   21f72:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   21f74:	f858 1c04 	ldr.w	r1, [r8, #-4]
   21f78:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   21f7c:	9302      	str	r3, [sp, #8]
   21f7e:	6803      	ldr	r3, [r0, #0]
   21f80:	9203      	str	r2, [sp, #12]
   21f82:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   21f84:	6883      	ldr	r3, [r0, #8]
   21f86:	f108 0808 	add.w	r8, r8, #8
   21f8a:	4299      	cmp	r1, r3
   21f8c:	bf28      	it	cs
   21f8e:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   21f92:	f7ff ff71 	bl	21e78 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   21f96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   21f9a:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   21f9c:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   21fa0:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   21fa4:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   21fa6:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   21fa8:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   21fac:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   21fae:	bfb6      	itet	lt
   21fb0:	2201      	movlt	r2, #1
		dp->flags = 0;
   21fb2:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   21fb6:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   21fb8:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   21fba:	bfd8      	it	le
   21fbc:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21fbe:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   21fc2:	bfdc      	itt	le
   21fc4:	f042 0202 	orrle.w	r2, r2, #2
   21fc8:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   21fca:	89ed      	ldrh	r5, [r5, #14]
   21fcc:	e7b4      	b.n	21f38 <virtqueue_add_buffer+0x2a>

00021fce <virtqueue_get_buffer>:
{
   21fce:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   21fd0:	b350      	cbz	r0, 22028 <virtqueue_get_buffer+0x5a>
   21fd2:	6a05      	ldr	r5, [r0, #32]
   21fd4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   21fd6:	886c      	ldrh	r4, [r5, #2]
   21fd8:	429c      	cmp	r4, r3
   21fda:	d030      	beq.n	2203e <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   21fdc:	1c5c      	adds	r4, r3, #1
   21fde:	85c4      	strh	r4, [r0, #46]	; 0x2e
   21fe0:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   21fe2:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   21fe6:	3c01      	subs	r4, #1
   21fe8:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   21fea:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   21fee:	686b      	ldr	r3, [r5, #4]
   21ff0:	b29e      	uxth	r6, r3
	if (len)
   21ff2:	b109      	cbz	r1, 21ff8 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   21ff4:	68ad      	ldr	r5, [r5, #8]
   21ff6:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   21ff8:	f8d0 c018 	ldr.w	ip, [r0, #24]
   21ffc:	b29b      	uxth	r3, r3
   21ffe:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   22002:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   22006:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   22008:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2200a:	442f      	add	r7, r5
	dxp->ndescs--;
   2200c:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2200e:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   22010:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   22012:	898d      	ldrh	r5, [r1, #12]
   22014:	076f      	lsls	r7, r5, #29
   22016:	d50e      	bpl.n	22036 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   22018:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2201a:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2201c:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2201e:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   22020:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   22022:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   22024:	b102      	cbz	r2, 22028 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   22026:	8014      	strh	r4, [r2, #0]
}
   22028:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2202a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2202c:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2202e:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   22030:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   22034:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   22036:	898d      	ldrh	r5, [r1, #12]
   22038:	07ed      	lsls	r5, r5, #31
   2203a:	d4f6      	bmi.n	2202a <virtqueue_get_buffer+0x5c>
   2203c:	e7ec      	b.n	22018 <virtqueue_get_buffer+0x4a>
		return NULL;
   2203e:	2000      	movs	r0, #0
   22040:	e7f2      	b.n	22028 <virtqueue_get_buffer+0x5a>

00022042 <virtqueue_get_available_buffer>:
{
   22042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   22046:	f3bf 8f5b 	dmb	ish
{
   2204a:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2204c:	69c2      	ldr	r2, [r0, #28]
{
   2204e:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   22050:	8853      	ldrh	r3, [r2, #2]
   22052:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   22054:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   22056:	428b      	cmp	r3, r1
   22058:	d046      	beq.n	220e8 <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2205a:	1c4b      	adds	r3, r1, #1
   2205c:	8603      	strh	r3, [r0, #48]	; 0x30
   2205e:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   22060:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   22064:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   22066:	400b      	ands	r3, r1
   22068:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2206c:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2206e:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   22070:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   22072:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   22076:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   22078:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   2207c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   22080:	bb5b      	cbnz	r3, 220da <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   22082:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   22086:	1c62      	adds	r2, r4, #1
   22088:	bf09      	itett	eq
   2208a:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   2208e:	ea09 0404 	andne.w	r4, r9, r4
   22092:	681c      	ldreq	r4, [r3, #0]
   22094:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   22098:	4621      	mov	r1, r4
   2209a:	4640      	mov	r0, r8
   2209c:	f7ff feec 	bl	21e78 <metal_io_phys>
   220a0:	4581      	cmp	r9, r0
   220a2:	d009      	beq.n	220b8 <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   220a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   220a8:	3301      	adds	r3, #1
   220aa:	441c      	add	r4, r3
		} while (offset < io->size);
   220ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   220b0:	429c      	cmp	r4, r3
   220b2:	d3f1      	bcc.n	22098 <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   220b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return (io->virt != METAL_BAD_VA && offset < io->size
   220b8:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   220bc:	1c43      	adds	r3, r0, #1
   220be:	d011      	beq.n	220e4 <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   220c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   220c4:	42a3      	cmp	r3, r4
   220c6:	d90d      	bls.n	220e4 <virtqueue_get_available_buffer+0xa2>
		: NULL);
   220c8:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   220ca:	8832      	ldrh	r2, [r6, #0]
   220cc:	69ab      	ldr	r3, [r5, #24]
   220ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   220d2:	689b      	ldr	r3, [r3, #8]
   220d4:	603b      	str	r3, [r7, #0]
}
   220d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   220da:	4649      	mov	r1, r9
   220dc:	4640      	mov	r0, r8
   220de:	4798      	blx	r3
   220e0:	4604      	mov	r4, r0
   220e2:	e7e9      	b.n	220b8 <virtqueue_get_available_buffer+0x76>
		: NULL);
   220e4:	2000      	movs	r0, #0
   220e6:	e7f0      	b.n	220ca <virtqueue_get_available_buffer+0x88>
		return NULL;
   220e8:	2000      	movs	r0, #0
   220ea:	e7f4      	b.n	220d6 <virtqueue_get_available_buffer+0x94>

000220ec <virtqueue_disable_cb>:
{
   220ec:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   220ee:	2500      	movs	r5, #0
   220f0:	6802      	ldr	r2, [r0, #0]
   220f2:	6993      	ldr	r3, [r2, #24]
   220f4:	6912      	ldr	r2, [r2, #16]
   220f6:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   220fa:	ea54 0205 	orrs.w	r2, r4, r5
   220fe:	d014      	beq.n	2212a <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   22100:	b94b      	cbnz	r3, 22116 <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   22102:	69c2      	ldr	r2, [r0, #28]
   22104:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   22106:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   22108:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   2210a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2210e:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   22110:	3b01      	subs	r3, #1
   22112:	8093      	strh	r3, [r2, #4]
}
   22114:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   22116:	2b01      	cmp	r3, #1
   22118:	d1fc      	bne.n	22114 <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   2211a:	6a02      	ldr	r2, [r0, #32]
   2211c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2211e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   22120:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   22122:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   22126:	1a1b      	subs	r3, r3, r0
   22128:	e7f2      	b.n	22110 <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   2212a:	b92b      	cbnz	r3, 22138 <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2212c:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2212e:	8813      	ldrh	r3, [r2, #0]
   22130:	f043 0301 	orr.w	r3, r3, #1
   22134:	8013      	strh	r3, [r2, #0]
}
   22136:	e7ed      	b.n	22114 <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   22138:	2b01      	cmp	r3, #1
   2213a:	d1eb      	bne.n	22114 <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2213c:	6a02      	ldr	r2, [r0, #32]
   2213e:	e7f6      	b.n	2212e <virtqueue_disable_cb+0x42>

00022140 <virtqueue_kick>:
{
   22140:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   22142:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   22146:	2300      	movs	r3, #0
   22148:	6801      	ldr	r1, [r0, #0]
{
   2214a:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2214c:	6908      	ldr	r0, [r1, #16]
   2214e:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   22152:	4313      	orrs	r3, r2
   22154:	698b      	ldr	r3, [r1, #24]
   22156:	d020      	beq.n	2219a <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   22158:	b9b3      	cbnz	r3, 22188 <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   2215a:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   2215c:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   2215e:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   22160:	6a23      	ldr	r3, [r4, #32]
   22162:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   22166:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   22168:	1ad2      	subs	r2, r2, r3
   2216a:	3a01      	subs	r2, #1
   2216c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2216e:	b292      	uxth	r2, r2
   22170:	4293      	cmp	r3, r2
   22172:	bf94      	ite	ls
   22174:	2300      	movls	r3, #0
   22176:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   22178:	b11b      	cbz	r3, 22182 <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2217a:	6923      	ldr	r3, [r4, #16]
   2217c:	b10b      	cbz	r3, 22182 <virtqueue_kick+0x42>
		vq->notify(vq);
   2217e:	4620      	mov	r0, r4
   22180:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   22182:	2300      	movs	r3, #0
   22184:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   22186:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   22188:	2b01      	cmp	r3, #1
   2218a:	d1fa      	bne.n	22182 <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   2218c:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2218e:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   22190:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   22192:	69e3      	ldr	r3, [r4, #28]
   22194:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   22198:	e7e5      	b.n	22166 <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   2219a:	b92b      	cbnz	r3, 221a8 <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   2219c:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   2219e:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   221a0:	43db      	mvns	r3, r3
   221a2:	f003 0301 	and.w	r3, r3, #1
   221a6:	e7e7      	b.n	22178 <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   221a8:	2b01      	cmp	r3, #1
   221aa:	d1ea      	bne.n	22182 <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   221ac:	69e3      	ldr	r3, [r4, #28]
   221ae:	e7f6      	b.n	2219e <virtqueue_kick+0x5e>

000221b0 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   221b0:	69c2      	ldr	r2, [r0, #28]
   221b2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   221b4:	8853      	ldrh	r3, [r2, #2]
   221b6:	428b      	cmp	r3, r1
   221b8:	d00a      	beq.n	221d0 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   221ba:	8943      	ldrh	r3, [r0, #10]
   221bc:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   221be:	400b      	ands	r3, r1
   221c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   221c4:	889a      	ldrh	r2, [r3, #4]
   221c6:	6983      	ldr	r3, [r0, #24]
   221c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   221cc:	6898      	ldr	r0, [r3, #8]
	return len;
   221ce:	4770      	bx	lr
		return 0;
   221d0:	2000      	movs	r0, #0
}
   221d2:	4770      	bx	lr

000221d4 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   221d4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   221d8:	68c3      	ldr	r3, [r0, #12]
   221da:	b103      	cbz	r3, 221de <virtqueue_notification+0xa>
		vq->callback(vq);
   221dc:	4718      	bx	r3
}
   221de:	4770      	bx	lr

000221e0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   221e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   221e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   221e8:	f7f4 bc42 	b.w	16a70 <z_impl_k_sem_take>

000221ec <rpmsg_unregister_endpoint>:
{
   221ec:	b570      	push	{r4, r5, r6, lr}
   221ee:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   221f0:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   221f2:	f105 0658 	add.w	r6, r5, #88	; 0x58
   221f6:	4630      	mov	r0, r6
   221f8:	f7ff fff2 	bl	221e0 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   221fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   221fe:	1c5a      	adds	r2, r3, #1
   22200:	d010      	beq.n	22224 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   22202:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   22206:	2b7f      	cmp	r3, #127	; 0x7f
   22208:	d80c      	bhi.n	22224 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2220a:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2220c:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2220e:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   22210:	f003 031f 	and.w	r3, r3, #31
   22214:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   22218:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   2221c:	ea22 0203 	bic.w	r2, r2, r3
   22220:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   22224:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   22228:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2222c:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2222e:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   22230:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   22234:	2300      	movs	r3, #0
   22236:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   22238:	4630      	mov	r0, r6
}
   2223a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2223e:	f7f4 bbf1 	b.w	16a24 <z_impl_k_sem_give>

00022242 <rpmsg_send_ns_message>:
{
   22242:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   22244:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   22246:	b08c      	sub	sp, #48	; 0x30
   22248:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2224a:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2224c:	2220      	movs	r2, #32
   2224e:	4601      	mov	r1, r0
   22250:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   22252:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   22254:	f7f6 ff8a 	bl	1916c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   22258:	2328      	movs	r3, #40	; 0x28
   2225a:	2201      	movs	r2, #1
   2225c:	4620      	mov	r0, r4
   2225e:	e9cd 3200 	strd	r3, r2, [sp]
   22262:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22264:	2235      	movs	r2, #53	; 0x35
   22266:	ab02      	add	r3, sp, #8
   22268:	f7f3 f9a4 	bl	155b4 <rpmsg_send_offchannel_raw>
}
   2226c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   22270:	b00c      	add	sp, #48	; 0x30
   22272:	bd10      	pop	{r4, pc}

00022274 <rpmsg_get_endpoint>:
{
   22274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22278:	4680      	mov	r8, r0
   2227a:	4689      	mov	r9, r1
   2227c:	4615      	mov	r5, r2
   2227e:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   22280:	6807      	ldr	r7, [r0, #0]
   22282:	45b8      	cmp	r8, r7
   22284:	d101      	bne.n	2228a <rpmsg_get_endpoint+0x16>
	return NULL;
   22286:	2400      	movs	r4, #0
   22288:	e021      	b.n	222ce <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2228a:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2228c:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   22290:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22292:	d006      	beq.n	222a2 <rpmsg_get_endpoint+0x2e>
   22294:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   22296:	d01a      	beq.n	222ce <rpmsg_get_endpoint+0x5a>
		if (name)
   22298:	f1b9 0f00 	cmp.w	r9, #0
   2229c:	d106      	bne.n	222ac <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   2229e:	683f      	ldr	r7, [r7, #0]
   222a0:	e7ef      	b.n	22282 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   222a2:	3301      	adds	r3, #1
   222a4:	d1f8      	bne.n	22298 <rpmsg_get_endpoint+0x24>
   222a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   222a8:	42b3      	cmp	r3, r6
   222aa:	e7f4      	b.n	22296 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   222ac:	2220      	movs	r2, #32
   222ae:	4649      	mov	r1, r9
   222b0:	4620      	mov	r0, r4
   222b2:	f7f6 ff8a 	bl	191ca <strncmp>
		if (!name || !name_match)
   222b6:	2800      	cmp	r0, #0
   222b8:	d1f1      	bne.n	2229e <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   222ba:	1c72      	adds	r2, r6, #1
   222bc:	d002      	beq.n	222c4 <rpmsg_get_endpoint+0x50>
   222be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   222c0:	42b3      	cmp	r3, r6
   222c2:	d004      	beq.n	222ce <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   222c4:	1c6b      	adds	r3, r5, #1
   222c6:	d1ea      	bne.n	2229e <rpmsg_get_endpoint+0x2a>
   222c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   222ca:	3301      	adds	r3, #1
   222cc:	d1e7      	bne.n	2229e <rpmsg_get_endpoint+0x2a>
}
   222ce:	4620      	mov	r0, r4
   222d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000222d4 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   222d4:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   222d6:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   222da:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   222de:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   222e0:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   222e2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   222e4:	6013      	str	r3, [r2, #0]
}
   222e6:	4770      	bx	lr

000222e8 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   222e8:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   222ea:	4604      	mov	r4, r0
   222ec:	b190      	cbz	r0, 22314 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   222ee:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   222f0:	b183      	cbz	r3, 22314 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   222f2:	7802      	ldrb	r2, [r0, #0]
   222f4:	b14a      	cbz	r2, 2230a <rpmsg_destroy_ept+0x22>
   222f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   222fa:	b133      	cbz	r3, 2230a <rpmsg_destroy_ept+0x22>
   222fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   222fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22302:	d302      	bcc.n	2230a <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   22304:	2101      	movs	r1, #1
   22306:	f7ff ff9c 	bl	22242 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2230a:	4620      	mov	r0, r4
}
   2230c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   22310:	f7ff bf6c 	b.w	221ec <rpmsg_unregister_endpoint>
}
   22314:	bd10      	pop	{r4, pc}

00022316 <rpmsg_virtio_tx_callback>:
}
   22316:	4770      	bx	lr

00022318 <k_sem_give>:
   22318:	f7f4 bb84 	b.w	16a24 <z_impl_k_sem_give>

0002231c <rpmsg_virtio_get_rx_buffer>:
{
   2231c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2231e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   22320:	4613      	mov	r3, r2
   22322:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   22324:	b925      	cbnz	r5, 22330 <rpmsg_virtio_get_rx_buffer+0x14>
}
   22326:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   22328:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   2232c:	f7ff be4f 	b.w	21fce <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   22330:	2d01      	cmp	r5, #1
   22332:	d106      	bne.n	22342 <rpmsg_virtio_get_rx_buffer+0x26>
}
   22334:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   22336:	460a      	mov	r2, r1
   22338:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   2233c:	4619      	mov	r1, r3
   2233e:	f7ff be80 	b.w	22042 <virtqueue_get_available_buffer>
}
   22342:	2000      	movs	r0, #0
   22344:	bc30      	pop	{r4, r5}
   22346:	4770      	bx	lr

00022348 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   22348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22350:	f7f4 bb8e 	b.w	16a70 <z_impl_k_sem_take>

00022354 <rpmsg_virtio_ns_callback>:
{
   22354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   22358:	2a28      	cmp	r2, #40	; 0x28
{
   2235a:	4680      	mov	r8, r0
   2235c:	460e      	mov	r6, r1
   2235e:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   22360:	d12b      	bne.n	223ba <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   22362:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   22364:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   22366:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   2236a:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2236c:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2236e:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   22370:	1a71      	subs	r1, r6, r1
   22372:	42a1      	cmp	r1, r4
   22374:	bf28      	it	cs
   22376:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
   2237a:	f7f9 fcdf 	bl	1bd3c <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2237e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   22382:	f8d6 9020 	ldr.w	r9, [r6, #32]
   22386:	4638      	mov	r0, r7
   22388:	f7ff ffde 	bl	22348 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2238c:	464b      	mov	r3, r9
   2238e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22392:	4669      	mov	r1, sp
   22394:	4628      	mov	r0, r5
   22396:	f7ff ff6d 	bl	22274 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2239a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2239c:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2239e:	07db      	lsls	r3, r3, #31
   223a0:	d50f      	bpl.n	223c2 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   223a2:	b110      	cbz	r0, 223aa <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   223a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   223a8:	6283      	str	r3, [r0, #40]	; 0x28
   223aa:	4638      	mov	r0, r7
   223ac:	f7ff ffb4 	bl	22318 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   223b0:	b11c      	cbz	r4, 223ba <rpmsg_virtio_ns_callback+0x66>
   223b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   223b4:	b10b      	cbz	r3, 223ba <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   223b6:	4640      	mov	r0, r8
   223b8:	4798      	blx	r3
}
   223ba:	2000      	movs	r0, #0
   223bc:	b009      	add	sp, #36	; 0x24
   223be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   223c2:	b950      	cbnz	r0, 223da <rpmsg_virtio_ns_callback+0x86>
   223c4:	4638      	mov	r0, r7
   223c6:	f7ff ffa7 	bl	22318 <k_sem_give>
			if (rdev->ns_bind_cb)
   223ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   223cc:	2b00      	cmp	r3, #0
   223ce:	d0f4      	beq.n	223ba <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   223d0:	464a      	mov	r2, r9
   223d2:	4669      	mov	r1, sp
   223d4:	4628      	mov	r0, r5
   223d6:	4798      	blx	r3
   223d8:	e7ef      	b.n	223ba <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   223da:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   223de:	4638      	mov	r0, r7
   223e0:	f7ff ff9a 	bl	22318 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   223e4:	e7e9      	b.n	223ba <rpmsg_virtio_ns_callback+0x66>

000223e6 <rpmsg_virtio_rx_callback>:
{
   223e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   223ea:	6803      	ldr	r3, [r0, #0]
{
   223ec:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   223ee:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   223f0:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   223f4:	4638      	mov	r0, r7
   223f6:	f7ff ffa7 	bl	22348 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   223fa:	4630      	mov	r0, r6
   223fc:	f10d 020a 	add.w	r2, sp, #10
   22400:	a903      	add	r1, sp, #12
   22402:	f7ff ff8b 	bl	2231c <rpmsg_virtio_get_rx_buffer>
   22406:	4604      	mov	r4, r0
   22408:	4638      	mov	r0, r7
   2240a:	f7ff ff85 	bl	22318 <k_sem_give>
	while (rp_hdr) {
   2240e:	b914      	cbnz	r4, 22416 <rpmsg_virtio_rx_callback+0x30>
}
   22410:	b006      	add	sp, #24
   22412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22416:	4638      	mov	r0, r7
   22418:	f7ff ff96 	bl	22348 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   2241c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22420:	2100      	movs	r1, #0
   22422:	4630      	mov	r0, r6
   22424:	6862      	ldr	r2, [r4, #4]
   22426:	f7ff ff25 	bl	22274 <rpmsg_get_endpoint>
   2242a:	4605      	mov	r5, r0
   2242c:	4638      	mov	r0, r7
   2242e:	f7ff ff73 	bl	22318 <k_sem_give>
		if (ept) {
   22432:	b185      	cbz	r5, 22456 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   22434:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22436:	6823      	ldr	r3, [r4, #0]
   22438:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2243a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   2243c:	bf08      	it	eq
   2243e:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   22440:	89a2      	ldrh	r2, [r4, #12]
   22442:	9100      	str	r1, [sp, #0]
   22444:	4628      	mov	r0, r5
   22446:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   2244a:	f104 0110 	add.w	r1, r4, #16
   2244e:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   22450:	2800      	cmp	r0, #0
   22452:	da00      	bge.n	22456 <rpmsg_virtio_rx_callback+0x70>
   22454:	e7fe      	b.n	22454 <rpmsg_virtio_rx_callback+0x6e>
   22456:	4638      	mov	r0, r7
   22458:	f7ff ff76 	bl	22348 <__metal_mutex_acquire>
   2245c:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2245e:	9b03      	ldr	r3, [sp, #12]
   22460:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   22462:	b9b2      	cbnz	r2, 22492 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   22464:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   22466:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2246a:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   2246e:	2301      	movs	r3, #1
   22470:	a904      	add	r1, sp, #16
   22472:	f7ff fd4c 	bl	21f0e <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   22476:	4630      	mov	r0, r6
   22478:	f10d 020a 	add.w	r2, sp, #10
   2247c:	a903      	add	r1, sp, #12
   2247e:	f7ff ff4d 	bl	2231c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   22482:	4604      	mov	r4, r0
   22484:	2800      	cmp	r0, #0
   22486:	d1bf      	bne.n	22408 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   22488:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   2248c:	f7ff fe58 	bl	22140 <virtqueue_kick>
   22490:	e7ba      	b.n	22408 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   22492:	2a01      	cmp	r2, #1
   22494:	d1ef      	bne.n	22476 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   22496:	461a      	mov	r2, r3
   22498:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   2249c:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   224a0:	f7f3 f86c 	bl	1557c <virtqueue_add_consumed_buffer>
   224a4:	e7e7      	b.n	22476 <rpmsg_virtio_rx_callback+0x90>

000224a6 <rpmsg_virtio_shm_pool_get_buffer>:
{
   224a6:	4603      	mov	r3, r0
	if (shpool->avail < size)
   224a8:	6842      	ldr	r2, [r0, #4]
{
   224aa:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   224ac:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   224ae:	bf29      	itett	cs
   224b0:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   224b2:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   224b4:	1a84      	subcs	r4, r0, r2
   224b6:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   224b8:	bf22      	ittt	cs
   224ba:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   224bc:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   224be:	605a      	strcs	r2, [r3, #4]
}
   224c0:	bd10      	pop	{r4, pc}

000224c2 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   224c2:	b110      	cbz	r0, 224ca <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   224c4:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   224c8:	6001      	str	r1, [r0, #0]
}
   224ca:	4770      	bx	lr

000224cc <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   224cc:	f7f6 ba14 	b.w	188f8 <z_clock_idle_exit>

000224d0 <k_heap_init>:
{
   224d0:	b410      	push	{r4}
   224d2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   224d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   224da:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   224dc:	f7f5 bbfd 	b.w	17cda <sys_heap_init>

000224e0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   224e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224e4:	b087      	sub	sp, #28
   224e6:	4604      	mov	r4, r0
   224e8:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   224ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   224ee:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   224f0:	f000 fb93 	bl	22c1a <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   224f4:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   224f8:	4605      	mov	r5, r0
   224fa:	4688      	mov	r8, r1
	__asm__ volatile(
   224fc:	f04f 0320 	mov.w	r3, #32
   22500:	f3ef 8b11 	mrs	fp, BASEPRI
   22504:	f383 8811 	msr	BASEPRI, r3
   22508:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2250c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   22510:	463a      	mov	r2, r7
   22512:	4631      	mov	r1, r6
   22514:	4620      	mov	r0, r4
   22516:	f7f5 fb83 	bl	17c20 <sys_heap_aligned_alloc>
   2251a:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   2251c:	f7f4 fdc2 	bl	170a4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   22520:	9b05      	ldr	r3, [sp, #20]
   22522:	b13b      	cbz	r3, 22534 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22524:	f38b 8811 	msr	BASEPRI, fp
   22528:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2252c:	4618      	mov	r0, r3
   2252e:	b007      	add	sp, #28
   22530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22534:	1a2a      	subs	r2, r5, r0
   22536:	9202      	str	r2, [sp, #8]
   22538:	eb68 0201 	sbc.w	r2, r8, r1
   2253c:	9203      	str	r2, [sp, #12]
   2253e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22542:	2901      	cmp	r1, #1
   22544:	f172 0200 	sbcs.w	r2, r2, #0
   22548:	dbec      	blt.n	22524 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2254a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2254e:	4659      	mov	r1, fp
   22550:	e9cd 2300 	strd	r2, r3, [sp]
   22554:	4648      	mov	r0, r9
   22556:	4652      	mov	r2, sl
   22558:	f7f4 f950 	bl	167fc <z_pend_curr>
	__asm__ volatile(
   2255c:	f04f 0320 	mov.w	r3, #32
   22560:	f3ef 8b11 	mrs	fp, BASEPRI
   22564:	f383 8811 	msr	BASEPRI, r3
   22568:	f3bf 8f6f 	isb	sy
   2256c:	e7d0      	b.n	22510 <k_heap_aligned_alloc+0x30>

0002256e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2256e:	b538      	push	{r3, r4, r5, lr}
   22570:	4604      	mov	r4, r0
   22572:	f04f 0320 	mov.w	r3, #32
   22576:	f3ef 8511 	mrs	r5, BASEPRI
   2257a:	f383 8811 	msr	BASEPRI, r3
   2257e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22582:	f7f5 fb00 	bl	17b86 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22586:	f104 000c 	add.w	r0, r4, #12
   2258a:	f000 fa2c 	bl	229e6 <z_unpend_all>
   2258e:	b130      	cbz	r0, 2259e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22590:	4629      	mov	r1, r5
   22592:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2259a:	f7f3 bee7 	b.w	1636c <z_reschedule>
	__asm__ volatile(
   2259e:	f385 8811 	msr	BASEPRI, r5
   225a2:	f3bf 8f6f 	isb	sy
}
   225a6:	bd38      	pop	{r3, r4, r5, pc}

000225a8 <mbox_message_match>:
{
   225a8:	460b      	mov	r3, r1
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   225aa:	6a01      	ldr	r1, [r0, #32]
{
   225ac:	4602      	mov	r2, r0
   225ae:	b530      	push	{r4, r5, lr}
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   225b0:	b111      	cbz	r1, 225b8 <mbox_message_match+0x10>
   225b2:	6a18      	ldr	r0, [r3, #32]
   225b4:	4281      	cmp	r1, r0
   225b6:	d124      	bne.n	22602 <mbox_message_match+0x5a>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   225b8:	69d8      	ldr	r0, [r3, #28]
   225ba:	69d1      	ldr	r1, [r2, #28]
	     (tx_msg->tx_target_thread == rx_msg->tx_target_thread)) &&
   225bc:	b108      	cbz	r0, 225c2 <mbox_message_match+0x1a>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   225be:	4288      	cmp	r0, r1
   225c0:	d11f      	bne.n	22602 <mbox_message_match+0x5a>
		rx_msg->rx_source_thread = tx_msg->rx_source_thread;
   225c2:	61d9      	str	r1, [r3, #28]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   225c4:	6a19      	ldr	r1, [r3, #32]
		rx_msg->info = tx_msg->info;
   225c6:	6890      	ldr	r0, [r2, #8]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   225c8:	6211      	str	r1, [r2, #32]
		temp_info = rx_msg->info;
   225ca:	6899      	ldr	r1, [r3, #8]
		rx_msg->info = tx_msg->info;
   225cc:	6098      	str	r0, [r3, #8]
		if (rx_msg->size > tx_msg->size) {
   225ce:	6858      	ldr	r0, [r3, #4]
		tx_msg->info = temp_info;
   225d0:	6091      	str	r1, [r2, #8]
		if (rx_msg->size > tx_msg->size) {
   225d2:	6851      	ldr	r1, [r2, #4]
		rx_msg->tx_data = tx_msg->tx_data;
   225d4:	68d5      	ldr	r5, [r2, #12]
		if (rx_msg->size > tx_msg->size) {
   225d6:	4288      	cmp	r0, r1
		rx_msg->tx_block = tx_msg->tx_block;
   225d8:	f103 0414 	add.w	r4, r3, #20
			rx_msg->size = tx_msg->size;
   225dc:	bf88      	it	hi
   225de:	6059      	strhi	r1, [r3, #4]
		rx_msg->tx_data = tx_msg->tx_data;
   225e0:	60dd      	str	r5, [r3, #12]
		rx_msg->tx_block = tx_msg->tx_block;
   225e2:	e9d2 0105 	ldrd	r0, r1, [r2, #20]
   225e6:	e884 0003 	stmia.w	r4, {r0, r1}
		if (rx_msg->tx_data != NULL) {
   225ea:	b12d      	cbz	r5, 225f8 <mbox_message_match+0x50>
			rx_msg->tx_block.data = NULL;
   225ec:	2100      	movs	r1, #0
   225ee:	6159      	str	r1, [r3, #20]
		return 0;
   225f0:	2000      	movs	r0, #0
		rx_msg->_syncing_thread = tx_msg->_syncing_thread;
   225f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
   225f4:	625a      	str	r2, [r3, #36]	; 0x24
}
   225f6:	bd30      	pop	{r4, r5, pc}
		} else if (rx_msg->tx_block.data != NULL) {
   225f8:	6959      	ldr	r1, [r3, #20]
   225fa:	2900      	cmp	r1, #0
   225fc:	d0f8      	beq.n	225f0 <mbox_message_match+0x48>
			rx_msg->tx_data = rx_msg->tx_block.data;
   225fe:	60d9      	str	r1, [r3, #12]
   22600:	e7f6      	b.n	225f0 <mbox_message_match+0x48>
	return -1;
   22602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22606:	e7f6      	b.n	225f6 <mbox_message_match+0x4e>

00022608 <k_mbox_data_get>:
{
   22608:	b510      	push	{r4, lr}
	if (buffer == NULL) {
   2260a:	460b      	mov	r3, r1
{
   2260c:	4604      	mov	r4, r0
	if (buffer == NULL) {
   2260e:	b921      	cbnz	r1, 2261a <k_mbox_data_get+0x12>
		rx_msg->size = 0;
   22610:	6041      	str	r1, [r0, #4]
}
   22612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mbox_message_dispose(rx_msg);
   22616:	f7f3 bc1f 	b.w	15e58 <mbox_message_dispose>
	if ((rx_msg->tx_data != NULL) && (rx_msg->size > 0)) {
   2261a:	68c1      	ldr	r1, [r0, #12]
   2261c:	b121      	cbz	r1, 22628 <k_mbox_data_get+0x20>
   2261e:	6842      	ldr	r2, [r0, #4]
   22620:	b112      	cbz	r2, 22628 <k_mbox_data_get+0x20>
		(void)memcpy(buffer, rx_msg->tx_data, rx_msg->size);
   22622:	4618      	mov	r0, r3
   22624:	f7f6 fdf0 	bl	19208 <memcpy>
	mbox_message_dispose(rx_msg);
   22628:	4620      	mov	r0, r4
   2262a:	e7f2      	b.n	22612 <k_mbox_data_get+0xa>

0002262c <k_mem_slab_init>:
{
   2262c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2262e:	2400      	movs	r4, #0
   22630:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22632:	ea41 0402 	orr.w	r4, r1, r2
   22636:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2263a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2263e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22640:	d10c      	bne.n	2265c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22642:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22644:	42a3      	cmp	r3, r4
   22646:	d103      	bne.n	22650 <k_mem_slab_init+0x24>
   22648:	e9c0 0000 	strd	r0, r0, [r0]
}
   2264c:	2000      	movs	r0, #0
}
   2264e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22650:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22652:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   22654:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   22656:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22658:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2265a:	e7f3      	b.n	22644 <k_mem_slab_init+0x18>
		return -EINVAL;
   2265c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22660:	e7f5      	b.n	2264e <k_mem_slab_init+0x22>

00022662 <z_impl_k_mutex_init>:
{
   22662:	4603      	mov	r3, r0
	mutex->owner = NULL;
   22664:	2000      	movs	r0, #0
   22666:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2266a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2266e:	4770      	bx	lr

00022670 <queue_insert>:
{
   22670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22674:	4699      	mov	r9, r3
   22676:	4604      	mov	r4, r0
   22678:	460d      	mov	r5, r1
   2267a:	4690      	mov	r8, r2
   2267c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22680:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22684:	f04f 0220 	mov.w	r2, #32
   22688:	f3ef 8711 	mrs	r7, BASEPRI
   2268c:	f382 8811 	msr	BASEPRI, r2
   22690:	f3bf 8f6f 	isb	sy
	if (is_append) {
   22694:	b103      	cbz	r3, 22698 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   22696:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22698:	4630      	mov	r0, r6
   2269a:	f000 f97f 	bl	2299c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2269e:	b160      	cbz	r0, 226ba <queue_insert+0x4a>
   226a0:	2400      	movs	r4, #0
   226a2:	f8c0 8014 	str.w	r8, [r0, #20]
   226a6:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   226aa:	f000 f91a 	bl	228e2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   226ae:	4630      	mov	r0, r6
   226b0:	4639      	mov	r1, r7
   226b2:	f7f3 fe5b 	bl	1636c <z_reschedule>
	return 0;
   226b6:	2000      	movs	r0, #0
   226b8:	e00c      	b.n	226d4 <queue_insert+0x64>
	if (alloc) {
   226ba:	f1b9 0f00 	cmp.w	r9, #0
   226be:	d01b      	beq.n	226f8 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   226c0:	2108      	movs	r1, #8
   226c2:	f7f4 fe17 	bl	172f4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   226c6:	b938      	cbnz	r0, 226d8 <queue_insert+0x68>
	__asm__ volatile(
   226c8:	f387 8811 	msr	BASEPRI, r7
   226cc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   226d0:	f06f 000b 	mvn.w	r0, #11
}
   226d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   226d8:	2301      	movs	r3, #1
		anode->data = data;
   226da:	f8c0 8004 	str.w	r8, [r0, #4]
   226de:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   226e0:	6803      	ldr	r3, [r0, #0]
   226e2:	f003 0203 	and.w	r2, r3, #3
   226e6:	b95d      	cbnz	r5, 22700 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   226e8:	6823      	ldr	r3, [r4, #0]
   226ea:	4313      	orrs	r3, r2
   226ec:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   226ee:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   226f0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   226f2:	b973      	cbnz	r3, 22712 <queue_insert+0xa2>
	list->tail = node;
   226f4:	6060      	str	r0, [r4, #4]
}
   226f6:	e00c      	b.n	22712 <queue_insert+0xa2>
}
   226f8:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   226fa:	f8c8 9000 	str.w	r9, [r8]
}
   226fe:	e7ef      	b.n	226e0 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22700:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22702:	f033 0303 	bics.w	r3, r3, #3
   22706:	d110      	bne.n	2272a <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22708:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2270a:	6862      	ldr	r2, [r4, #4]
   2270c:	b93a      	cbnz	r2, 2271e <queue_insert+0xae>
	list->head = node;
   2270e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22712:	2104      	movs	r1, #4
   22714:	f104 0010 	add.w	r0, r4, #16
   22718:	f000 fc16 	bl	22f48 <z_handle_obj_poll_events>
   2271c:	e7c7      	b.n	226ae <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2271e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22720:	f003 0303 	and.w	r3, r3, #3
   22724:	4303      	orrs	r3, r0
   22726:	6013      	str	r3, [r2, #0]
   22728:	e7e4      	b.n	226f4 <queue_insert+0x84>
   2272a:	4313      	orrs	r3, r2
   2272c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2272e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22730:	f003 0303 	and.w	r3, r3, #3
   22734:	4303      	orrs	r3, r0
   22736:	602b      	str	r3, [r5, #0]
}
   22738:	e7eb      	b.n	22712 <queue_insert+0xa2>

0002273a <z_queue_node_peek>:
{
   2273a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2273c:	4604      	mov	r4, r0
   2273e:	b130      	cbz	r0, 2274e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22740:	6802      	ldr	r2, [r0, #0]
   22742:	0793      	lsls	r3, r2, #30
   22744:	d003      	beq.n	2274e <z_queue_node_peek+0x14>
		ret = anode->data;
   22746:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22748:	b109      	cbz	r1, 2274e <z_queue_node_peek+0x14>
			k_free(anode);
   2274a:	f000 fc29 	bl	22fa0 <k_free>
}
   2274e:	4620      	mov	r0, r4
   22750:	bd10      	pop	{r4, pc}

00022752 <z_impl_k_queue_init>:
	list->head = NULL;
   22752:	2300      	movs	r3, #0
	list->tail = NULL;
   22754:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22758:	f100 0308 	add.w	r3, r0, #8
   2275c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22760:	f100 0310 	add.w	r3, r0, #16
   22764:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22768:	4770      	bx	lr

0002276a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2276a:	2301      	movs	r3, #1
{
   2276c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2276e:	9300      	str	r3, [sp, #0]
   22770:	2300      	movs	r3, #0
{
   22772:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22774:	4619      	mov	r1, r3
   22776:	f7ff ff7b 	bl	22670 <queue_insert>
}
   2277a:	b003      	add	sp, #12
   2277c:	f85d fb04 	ldr.w	pc, [sp], #4

00022780 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   22780:	2300      	movs	r3, #0
{
   22782:	b507      	push	{r0, r1, r2, lr}
   22784:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22786:	9300      	str	r3, [sp, #0]
   22788:	4619      	mov	r1, r3
   2278a:	f7ff ff71 	bl	22670 <queue_insert>
}
   2278e:	b003      	add	sp, #12
   22790:	f85d fb04 	ldr.w	pc, [sp], #4

00022794 <k_queue_append_list>:
{
   22794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22798:	4605      	mov	r5, r0
   2279a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2279c:	460c      	mov	r4, r1
   2279e:	b391      	cbz	r1, 22806 <k_queue_append_list+0x72>
   227a0:	b38a      	cbz	r2, 22806 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   227a2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   227a6:	f04f 0320 	mov.w	r3, #32
   227aa:	f3ef 8811 	mrs	r8, BASEPRI
   227ae:	f383 8811 	msr	BASEPRI, r3
   227b2:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   227b6:	4638      	mov	r0, r7
   227b8:	f000 f8f0 	bl	2299c <z_unpend_first_thread>
   227bc:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   227c0:	b920      	cbnz	r0, 227cc <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   227c2:	686b      	ldr	r3, [r5, #4]
   227c4:	b9cb      	cbnz	r3, 227fa <k_queue_append_list+0x66>
	list->head = node;
   227c6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   227c8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   227ca:	e00a      	b.n	227e2 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   227cc:	6144      	str	r4, [r0, #20]
   227ce:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   227d2:	f000 f886 	bl	228e2 <z_ready_thread>
		head = *(void **)head;
   227d6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   227d8:	4638      	mov	r0, r7
   227da:	f000 f8df 	bl	2299c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   227de:	2c00      	cmp	r4, #0
   227e0:	d1ee      	bne.n	227c0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   227e2:	2104      	movs	r1, #4
   227e4:	f105 0010 	add.w	r0, r5, #16
   227e8:	f000 fbae 	bl	22f48 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   227ec:	4638      	mov	r0, r7
   227ee:	4641      	mov	r1, r8
   227f0:	f7f3 fdbc 	bl	1636c <z_reschedule>
	return 0;
   227f4:	2000      	movs	r0, #0
}
   227f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   227fa:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   227fc:	f001 0103 	and.w	r1, r1, #3
   22800:	430c      	orrs	r4, r1
   22802:	601c      	str	r4, [r3, #0]
}
   22804:	e7e0      	b.n	227c8 <k_queue_append_list+0x34>
		return -EINVAL;
   22806:	f06f 0015 	mvn.w	r0, #21
   2280a:	e7f4      	b.n	227f6 <k_queue_append_list+0x62>

0002280c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2280c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   22810:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   22814:	4298      	cmp	r0, r3
   22816:	bfac      	ite	ge
   22818:	2000      	movge	r0, #0
   2281a:	2001      	movlt	r0, #1
   2281c:	4770      	bx	lr

0002281e <z_find_first_thread_to_unpend>:
{
   2281e:	b510      	push	{r4, lr}
   22820:	f04f 0320 	mov.w	r3, #32
   22824:	f3ef 8411 	mrs	r4, BASEPRI
   22828:	f383 8811 	msr	BASEPRI, r3
   2282c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   22830:	f000 f84d 	bl	228ce <z_priq_dumb_best>
	__asm__ volatile(
   22834:	f384 8811 	msr	BASEPRI, r4
   22838:	f3bf 8f6f 	isb	sy
}
   2283c:	bd10      	pop	{r4, pc}

0002283e <z_unpend_thread_no_timeout>:
{
   2283e:	b510      	push	{r4, lr}
	__asm__ volatile(
   22840:	f04f 0320 	mov.w	r3, #32
   22844:	f3ef 8411 	mrs	r4, BASEPRI
   22848:	f383 8811 	msr	BASEPRI, r3
   2284c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22850:	f000 f81b 	bl	2288a <unpend_thread_no_timeout>
	__asm__ volatile(
   22854:	f384 8811 	msr	BASEPRI, r4
   22858:	f3bf 8f6f 	isb	sy
}
   2285c:	bd10      	pop	{r4, pc}

0002285e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2285e:	4603      	mov	r3, r0
   22860:	b920      	cbnz	r0, 2286c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22862:	f3ef 8205 	mrs	r2, IPSR
   22866:	b90a      	cbnz	r2, 2286c <z_reschedule_irqlock+0xe>
   22868:	f7e1 bbae 	b.w	3fc8 <arch_swap>
   2286c:	f383 8811 	msr	BASEPRI, r3
   22870:	f3bf 8f6f 	isb	sy
}
   22874:	4770      	bx	lr

00022876 <z_reschedule_unlocked>:
	__asm__ volatile(
   22876:	f04f 0320 	mov.w	r3, #32
   2287a:	f3ef 8011 	mrs	r0, BASEPRI
   2287e:	f383 8811 	msr	BASEPRI, r3
   22882:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22886:	f7ff bfea 	b.w	2285e <z_reschedule_irqlock>

0002288a <unpend_thread_no_timeout>:
{
   2288a:	4601      	mov	r1, r0
   2288c:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2288e:	6880      	ldr	r0, [r0, #8]
   22890:	f7f3 fd92 	bl	163b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22894:	7b4b      	ldrb	r3, [r1, #13]
   22896:	f023 0302 	bic.w	r3, r3, #2
   2289a:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2289c:	2300      	movs	r3, #0
   2289e:	608b      	str	r3, [r1, #8]
}
   228a0:	bd08      	pop	{r3, pc}

000228a2 <z_unpend_thread>:
{
   228a2:	b538      	push	{r3, r4, r5, lr}
   228a4:	4604      	mov	r4, r0
   228a6:	f04f 0320 	mov.w	r3, #32
   228aa:	f3ef 8511 	mrs	r5, BASEPRI
   228ae:	f383 8811 	msr	BASEPRI, r3
   228b2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   228b6:	f7ff ffe8 	bl	2288a <unpend_thread_no_timeout>
	__asm__ volatile(
   228ba:	f385 8811 	msr	BASEPRI, r5
   228be:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   228c2:	f104 0018 	add.w	r0, r4, #24
}
   228c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   228ca:	f000 b960 	b.w	22b8e <z_abort_timeout>

000228ce <z_priq_dumb_best>:
{
   228ce:	4603      	mov	r3, r0
	return list->head == list;
   228d0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   228d2:	4283      	cmp	r3, r0
   228d4:	d003      	beq.n	228de <z_priq_dumb_best+0x10>
	if (n != NULL) {
   228d6:	2800      	cmp	r0, #0
   228d8:	bf38      	it	cc
   228da:	2000      	movcc	r0, #0
   228dc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   228de:	2000      	movs	r0, #0
}
   228e0:	4770      	bx	lr

000228e2 <z_ready_thread>:
{
   228e2:	b510      	push	{r4, lr}
	__asm__ volatile(
   228e4:	f04f 0320 	mov.w	r3, #32
   228e8:	f3ef 8411 	mrs	r4, BASEPRI
   228ec:	f383 8811 	msr	BASEPRI, r3
   228f0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   228f4:	f7f3 fdba 	bl	1646c <ready_thread>
	__asm__ volatile(
   228f8:	f384 8811 	msr	BASEPRI, r4
   228fc:	f3bf 8f6f 	isb	sy
}
   22900:	bd10      	pop	{r4, pc}

00022902 <z_thread_timeout>:
{
   22902:	b570      	push	{r4, r5, r6, lr}
   22904:	4604      	mov	r4, r0
	__asm__ volatile(
   22906:	f04f 0320 	mov.w	r3, #32
   2290a:	f3ef 8611 	mrs	r6, BASEPRI
   2290e:	f383 8811 	msr	BASEPRI, r3
   22912:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   22916:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2291a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   2291e:	b113      	cbz	r3, 22926 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   22920:	4628      	mov	r0, r5
   22922:	f7ff ffb2 	bl	2288a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22926:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   2292a:	4628      	mov	r0, r5
   2292c:	f023 0314 	bic.w	r3, r3, #20
   22930:	f804 3c0b 	strb.w	r3, [r4, #-11]
   22934:	f7f3 fd9a 	bl	1646c <ready_thread>
	__asm__ volatile(
   22938:	f386 8811 	msr	BASEPRI, r6
   2293c:	f3bf 8f6f 	isb	sy
}
   22940:	bd70      	pop	{r4, r5, r6, pc}

00022942 <add_to_waitq_locked>:
{
   22942:	b538      	push	{r3, r4, r5, lr}
   22944:	4604      	mov	r4, r0
   22946:	460d      	mov	r5, r1
	unready_thread(thread);
   22948:	f7f3 ff18 	bl	1677c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2294c:	7b63      	ldrb	r3, [r4, #13]
   2294e:	f043 0302 	orr.w	r3, r3, #2
   22952:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22954:	b1c5      	cbz	r5, 22988 <add_to_waitq_locked+0x46>
	return list->head == list;
   22956:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22958:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2295a:	429d      	cmp	r5, r3
   2295c:	bf08      	it	eq
   2295e:	2300      	moveq	r3, #0
   22960:	2b00      	cmp	r3, #0
   22962:	bf38      	it	cc
   22964:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22966:	b183      	cbz	r3, 2298a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   22968:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2296c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   22970:	4291      	cmp	r1, r2
   22972:	db04      	blt.n	2297e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   22974:	686a      	ldr	r2, [r5, #4]
   22976:	429a      	cmp	r2, r3
   22978:	d007      	beq.n	2298a <add_to_waitq_locked+0x48>
   2297a:	681b      	ldr	r3, [r3, #0]
   2297c:	e7f3      	b.n	22966 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2297e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22980:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22984:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22986:	605c      	str	r4, [r3, #4]
}
   22988:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2298a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2298c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2298e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22990:	686b      	ldr	r3, [r5, #4]
   22992:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22994:	606c      	str	r4, [r5, #4]
   22996:	e7f7      	b.n	22988 <add_to_waitq_locked+0x46>

00022998 <z_pend_thread>:
	pend(thread, wait_q, timeout);
   22998:	f7f3 bf0a 	b.w	167b0 <pend>

0002299c <z_unpend_first_thread>:
{
   2299c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2299e:	f04f 0320 	mov.w	r3, #32
   229a2:	f3ef 8211 	mrs	r2, BASEPRI
   229a6:	f383 8811 	msr	BASEPRI, r3
   229aa:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   229ae:	f7ff ff8e 	bl	228ce <z_priq_dumb_best>
   229b2:	4604      	mov	r4, r0
	__asm__ volatile(
   229b4:	f382 8811 	msr	BASEPRI, r2
   229b8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   229bc:	b188      	cbz	r0, 229e2 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   229be:	f04f 0320 	mov.w	r3, #32
   229c2:	f3ef 8511 	mrs	r5, BASEPRI
   229c6:	f383 8811 	msr	BASEPRI, r3
   229ca:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   229ce:	f7ff ff5c 	bl	2288a <unpend_thread_no_timeout>
	__asm__ volatile(
   229d2:	f385 8811 	msr	BASEPRI, r5
   229d6:	f3bf 8f6f 	isb	sy
   229da:	f104 0018 	add.w	r0, r4, #24
   229de:	f000 f8d6 	bl	22b8e <z_abort_timeout>
}
   229e2:	4620      	mov	r0, r4
   229e4:	bd38      	pop	{r3, r4, r5, pc}

000229e6 <z_unpend_all>:
{
   229e6:	b538      	push	{r3, r4, r5, lr}
   229e8:	4605      	mov	r5, r0
	int need_sched = 0;
   229ea:	2000      	movs	r0, #0
	return list->head == list;
   229ec:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   229ee:	42a5      	cmp	r5, r4
   229f0:	d000      	beq.n	229f4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   229f2:	b904      	cbnz	r4, 229f6 <z_unpend_all+0x10>
}
   229f4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   229f6:	4620      	mov	r0, r4
   229f8:	f7ff ff53 	bl	228a2 <z_unpend_thread>
		z_ready_thread(thread);
   229fc:	4620      	mov	r0, r4
   229fe:	f7ff ff70 	bl	228e2 <z_ready_thread>
		need_sched = 1;
   22a02:	2001      	movs	r0, #1
   22a04:	e7f2      	b.n	229ec <z_unpend_all+0x6>

00022a06 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   22a06:	b15a      	cbz	r2, 22a20 <z_impl_k_sem_init+0x1a>
   22a08:	428a      	cmp	r2, r1
   22a0a:	d309      	bcc.n	22a20 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22a0c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22a10:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   22a14:	e9c0 0000 	strd	r0, r0, [r0]
   22a18:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22a1c:	2000      	movs	r0, #0
   22a1e:	4770      	bx	lr
		return -EINVAL;
   22a20:	f06f 0015 	mvn.w	r0, #21
}
   22a24:	4770      	bx	lr

00022a26 <z_impl_k_stack_push>:
{
   22a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a2a:	4605      	mov	r5, r0
   22a2c:	460e      	mov	r6, r1
	__asm__ volatile(
   22a2e:	f04f 0320 	mov.w	r3, #32
   22a32:	f3ef 8711 	mrs	r7, BASEPRI
   22a36:	f383 8811 	msr	BASEPRI, r3
   22a3a:	f3bf 8f6f 	isb	sy
	CHECKIF(stack->next == stack->top) {
   22a3e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   22a42:	429a      	cmp	r2, r3
   22a44:	d01b      	beq.n	22a7e <z_impl_k_stack_push+0x58>
	first_pending_thread = z_unpend_first_thread(&stack->wait_q);
   22a46:	f7ff ffa9 	bl	2299c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22a4a:	4604      	mov	r4, r0
   22a4c:	b170      	cbz	r0, 22a6c <z_impl_k_stack_push+0x46>
   22a4e:	f04f 0800 	mov.w	r8, #0
		z_ready_thread(first_pending_thread);
   22a52:	f7ff ff46 	bl	228e2 <z_ready_thread>
		z_reschedule(&stack->lock, key);
   22a56:	f105 0008 	add.w	r0, r5, #8
   22a5a:	4639      	mov	r1, r7
   22a5c:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
   22a60:	6166      	str	r6, [r4, #20]
   22a62:	f7f3 fc83 	bl	1636c <z_reschedule>
	int ret = 0;
   22a66:	4640      	mov	r0, r8
}
   22a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(stack->next) = data;
   22a6c:	68eb      	ldr	r3, [r5, #12]
   22a6e:	f843 6b04 	str.w	r6, [r3], #4
		stack->next++;
   22a72:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   22a74:	f387 8811 	msr	BASEPRI, r7
   22a78:	f3bf 8f6f 	isb	sy
	return ret;
   22a7c:	e7f4      	b.n	22a68 <z_impl_k_stack_push+0x42>
		ret = -ENOMEM;
   22a7e:	f06f 000b 	mvn.w	r0, #11
   22a82:	e7f7      	b.n	22a74 <z_impl_k_stack_push+0x4e>

00022a84 <k_is_in_isr>:
   22a84:	f3ef 8005 	mrs	r0, IPSR
}
   22a88:	3800      	subs	r0, #0
   22a8a:	bf18      	it	ne
   22a8c:	2001      	movne	r0, #1
   22a8e:	4770      	bx	lr

00022a90 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   22a90:	b108      	cbz	r0, 22a96 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   22a92:	f7df baab 	b.w	1fec <arch_busy_wait>
}
   22a96:	4770      	bx	lr

00022a98 <z_impl_k_thread_name_set>:
}
   22a98:	f06f 0046 	mvn.w	r0, #70	; 0x46
   22a9c:	4770      	bx	lr

00022a9e <k_thread_name_get>:
}
   22a9e:	2000      	movs	r0, #0
   22aa0:	4770      	bx	lr

00022aa2 <z_init_thread_base>:
	thread_base->user_options = (uint8_t)options;
   22aa2:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   22aa4:	2300      	movs	r3, #0
	thread_base->thread_state = (uint8_t)initial_state;
   22aa6:	7342      	strb	r2, [r0, #13]
	node->prev = NULL;
   22aa8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread_base->prio = priority;
   22aac:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   22aae:	73c3      	strb	r3, [r0, #15]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   22ab0:	4770      	bx	lr

00022ab2 <k_work_submit_to_queue>:
{
   22ab2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ab4:	f101 0308 	add.w	r3, r1, #8
   22ab8:	e8d3 2fef 	ldaex	r2, [r3]
   22abc:	f042 0c01 	orr.w	ip, r2, #1
   22ac0:	e8c3 cfee 	stlex	lr, ip, [r3]
   22ac4:	f1be 0f00 	cmp.w	lr, #0
   22ac8:	d1f6      	bne.n	22ab8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22aca:	07d3      	lsls	r3, r2, #31
   22acc:	d403      	bmi.n	22ad6 <k_work_submit_to_queue+0x24>
}
   22ace:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22ad2:	f7ff be4a 	b.w	2276a <k_queue_append>
}
   22ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00022ada <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   22ada:	f1a0 0110 	sub.w	r1, r0, #16
   22ade:	6980      	ldr	r0, [r0, #24]
   22ae0:	f7ff bfe7 	b.w	22ab2 <k_work_submit_to_queue>

00022ae4 <work_cancel>:
{
   22ae4:	b570      	push	{r4, r5, r6, lr}
   22ae6:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   22ae8:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22aec:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   22af0:	07db      	lsls	r3, r3, #31
   22af2:	d52f      	bpl.n	22b54 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   22af4:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   22af6:	6a82      	ldr	r2, [r0, #40]	; 0x28
   22af8:	6813      	ldr	r3, [r2, #0]
   22afa:	b913      	cbnz	r3, 22b02 <work_cancel+0x1e>
			return -EINVAL;
   22afc:	f06f 0015 	mvn.w	r0, #21
}
   22b00:	bd70      	pop	{r4, r5, r6, pc}
   22b02:	429c      	cmp	r4, r3
   22b04:	d121      	bne.n	22b4a <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   22b06:	6823      	ldr	r3, [r4, #0]
   22b08:	6856      	ldr	r6, [r2, #4]
   22b0a:	f023 0003 	bic.w	r0, r3, #3
   22b0e:	b991      	cbnz	r1, 22b36 <work_cancel+0x52>
   22b10:	42b4      	cmp	r4, r6
	list->head = node;
   22b12:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   22b14:	d100      	bne.n	22b18 <work_cancel+0x34>
	list->tail = node;
   22b16:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b18:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22b1a:	f003 0303 	and.w	r3, r3, #3
   22b1e:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   22b20:	2000      	movs	r0, #0
   22b22:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22b24:	e8d5 3fef 	ldaex	r3, [r5]
   22b28:	f023 0301 	bic.w	r3, r3, #1
   22b2c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   22b30:	2a00      	cmp	r2, #0
   22b32:	d0e5      	beq.n	22b00 <work_cancel+0x1c>
   22b34:	e7f6      	b.n	22b24 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b36:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   22b38:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   22b3a:	f003 0303 	and.w	r3, r3, #3
   22b3e:	ea43 0300 	orr.w	r3, r3, r0
   22b42:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22b44:	bf08      	it	eq
   22b46:	6051      	streq	r1, [r2, #4]
}
   22b48:	e7e6      	b.n	22b18 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22b4a:	6818      	ldr	r0, [r3, #0]
   22b4c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   22b4e:	f020 0303 	bic.w	r3, r0, #3
   22b52:	e7d2      	b.n	22afa <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   22b54:	3010      	adds	r0, #16
   22b56:	f000 f81a 	bl	22b8e <z_abort_timeout>
		if (err) {
   22b5a:	2800      	cmp	r0, #0
   22b5c:	d0e0      	beq.n	22b20 <work_cancel+0x3c>
			return -EALREADY;
   22b5e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   22b62:	e7cd      	b.n	22b00 <work_cancel+0x1c>

00022b64 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22b64:	b510      	push	{r4, lr}
	__asm__ volatile(
   22b66:	f04f 0220 	mov.w	r2, #32
   22b6a:	f3ef 8411 	mrs	r4, BASEPRI
   22b6e:	f382 8811 	msr	BASEPRI, r2
   22b72:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   22b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22b78:	b133      	cbz	r3, 22b88 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   22b7a:	f7ff ffb3 	bl	22ae4 <work_cancel>
	__asm__ volatile(
   22b7e:	f384 8811 	msr	BASEPRI, r4
   22b82:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   22b86:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22b88:	f06f 0015 	mvn.w	r0, #21
   22b8c:	e7f7      	b.n	22b7e <k_delayed_work_cancel+0x1a>

00022b8e <z_abort_timeout>:
{
   22b8e:	b510      	push	{r4, lr}
	__asm__ volatile(
   22b90:	f04f 0220 	mov.w	r2, #32
   22b94:	f3ef 8411 	mrs	r4, BASEPRI
   22b98:	f382 8811 	msr	BASEPRI, r2
   22b9c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22ba0:	6803      	ldr	r3, [r0, #0]
   22ba2:	b13b      	cbz	r3, 22bb4 <z_abort_timeout+0x26>
			remove_timeout(to);
   22ba4:	f7f4 f940 	bl	16e28 <remove_timeout>
			ret = 0;
   22ba8:	2000      	movs	r0, #0
	__asm__ volatile(
   22baa:	f384 8811 	msr	BASEPRI, r4
   22bae:	f3bf 8f6f 	isb	sy
}
   22bb2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22bb4:	f06f 0015 	mvn.w	r0, #21
   22bb8:	e7f7      	b.n	22baa <z_abort_timeout+0x1c>

00022bba <z_get_next_timeout_expiry>:
{
   22bba:	b510      	push	{r4, lr}
	__asm__ volatile(
   22bbc:	f04f 0320 	mov.w	r3, #32
   22bc0:	f3ef 8411 	mrs	r4, BASEPRI
   22bc4:	f383 8811 	msr	BASEPRI, r3
   22bc8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22bcc:	f7f4 f946 	bl	16e5c <next_timeout>
	__asm__ volatile(
   22bd0:	f384 8811 	msr	BASEPRI, r4
   22bd4:	f3bf 8f6f 	isb	sy
}
   22bd8:	bd10      	pop	{r4, pc}

00022bda <z_set_timeout_expiry>:
{
   22bda:	b570      	push	{r4, r5, r6, lr}
   22bdc:	4604      	mov	r4, r0
   22bde:	460d      	mov	r5, r1
	__asm__ volatile(
   22be0:	f04f 0320 	mov.w	r3, #32
   22be4:	f3ef 8611 	mrs	r6, BASEPRI
   22be8:	f383 8811 	msr	BASEPRI, r3
   22bec:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22bf0:	f7f4 f934 	bl	16e5c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22bf4:	2801      	cmp	r0, #1
   22bf6:	dd05      	ble.n	22c04 <z_set_timeout_expiry+0x2a>
   22bf8:	42a0      	cmp	r0, r4
   22bfa:	dd03      	ble.n	22c04 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   22bfc:	4629      	mov	r1, r5
   22bfe:	4620      	mov	r0, r4
   22c00:	f7e0 fed0 	bl	39a4 <z_clock_set_timeout>
	__asm__ volatile(
   22c04:	f386 8811 	msr	BASEPRI, r6
   22c08:	f3bf 8f6f 	isb	sy
}
   22c0c:	bd70      	pop	{r4, r5, r6, pc}

00022c0e <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   22c0e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   22c10:	f7f4 fa48 	bl	170a4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22c14:	bd08      	pop	{r3, pc}

00022c16 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   22c16:	f7f4 ba45 	b.w	170a4 <z_tick_get>

00022c1a <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   22c1a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22c1c:	1c4b      	adds	r3, r1, #1
   22c1e:	bf08      	it	eq
   22c20:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   22c24:	4604      	mov	r4, r0
   22c26:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22c28:	d013      	beq.n	22c52 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c2a:	ea54 0105 	orrs.w	r1, r4, r5
   22c2e:	d103      	bne.n	22c38 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   22c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   22c34:	f7f4 ba36 	b.w	170a4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22c38:	f06f 0101 	mvn.w	r1, #1
   22c3c:	1a0a      	subs	r2, r1, r0
   22c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c42:	eb61 0305 	sbc.w	r3, r1, r5
   22c46:	2a00      	cmp	r2, #0
   22c48:	f173 0100 	sbcs.w	r1, r3, #0
   22c4c:	db02      	blt.n	22c54 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   22c4e:	4610      	mov	r0, r2
   22c50:	4619      	mov	r1, r3
}
   22c52:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   22c54:	f7f4 fa26 	bl	170a4 <z_tick_get>
   22c58:	2c01      	cmp	r4, #1
   22c5a:	f175 0300 	sbcs.w	r3, r5, #0
   22c5e:	bfbc      	itt	lt
   22c60:	2401      	movlt	r4, #1
   22c62:	2500      	movlt	r5, #0
   22c64:	1820      	adds	r0, r4, r0
   22c66:	eb45 0101 	adc.w	r1, r5, r1
   22c6a:	e7f2      	b.n	22c52 <z_timeout_end_calc+0x38>

00022c6c <k_timer_init>:
	timer->status = 0U;
   22c6c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   22c6e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   22c72:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   22c76:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   22c7a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   22c7e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   22c80:	6343      	str	r3, [r0, #52]	; 0x34
}
   22c82:	4770      	bx	lr

00022c84 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   22c84:	b510      	push	{r4, lr}
   22c86:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   22c88:	f7ff ff81 	bl	22b8e <z_abort_timeout>

	if (inactive) {
   22c8c:	b9d8      	cbnz	r0, 22cc6 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   22c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22c90:	b10b      	cbz	r3, 22c96 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   22c92:	4620      	mov	r0, r4
   22c94:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   22c96:	f104 0018 	add.w	r0, r4, #24
   22c9a:	2100      	movs	r1, #0
   22c9c:	f7ff fdbf 	bl	2281e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   22ca0:	4604      	mov	r4, r0
   22ca2:	b180      	cbz	r0, 22cc6 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   22ca4:	f7ff fdcb 	bl	2283e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   22ca8:	4620      	mov	r0, r4
   22caa:	f7ff fe1a 	bl	228e2 <z_ready_thread>
	__asm__ volatile(
   22cae:	f04f 0320 	mov.w	r3, #32
   22cb2:	f3ef 8011 	mrs	r0, BASEPRI
   22cb6:	f383 8811 	msr	BASEPRI, r3
   22cba:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   22cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   22cc2:	f7ff bdcc 	b.w	2285e <z_reschedule_irqlock>
   22cc6:	bd10      	pop	{r4, pc}

00022cc8 <clear_event_registrations>:
	while (num_events--) {
   22cc8:	2314      	movs	r3, #20
{
   22cca:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   22ccc:	2400      	movs	r4, #0
   22cce:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   22cd2:	4281      	cmp	r1, r0
   22cd4:	d100      	bne.n	22cd8 <clear_event_registrations+0x10>
}
   22cd6:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   22cd8:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   22cdc:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   22ce0:	f003 030f 	and.w	r3, r3, #15
   22ce4:	2b02      	cmp	r3, #2
   22ce6:	d80a      	bhi.n	22cfe <clear_event_registrations+0x36>
   22ce8:	b15b      	cbz	r3, 22d02 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   22cea:	f851 3c14 	ldr.w	r3, [r1, #-20]
   22cee:	b143      	cbz	r3, 22d02 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   22cf0:	f851 5c10 	ldr.w	r5, [r1, #-16]
   22cf4:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   22cf6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   22cf8:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   22cfc:	e001      	b.n	22d02 <clear_event_registrations+0x3a>
	switch (event->type) {
   22cfe:	2b04      	cmp	r3, #4
   22d00:	d0f3      	beq.n	22cea <clear_event_registrations+0x22>
	__asm__ volatile(
   22d02:	f382 8811 	msr	BASEPRI, r2
   22d06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22d0a:	f04f 0320 	mov.w	r3, #32
   22d0e:	f3ef 8211 	mrs	r2, BASEPRI
   22d12:	f383 8811 	msr	BASEPRI, r3
   22d16:	f3bf 8f6f 	isb	sy
   22d1a:	3914      	subs	r1, #20
   22d1c:	e7d9      	b.n	22cd2 <clear_event_registrations+0xa>

00022d1e <k_work_submit_to_queue>:
{
   22d1e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22d20:	f101 0308 	add.w	r3, r1, #8
   22d24:	e8d3 2fef 	ldaex	r2, [r3]
   22d28:	f042 0c01 	orr.w	ip, r2, #1
   22d2c:	e8c3 cfee 	stlex	lr, ip, [r3]
   22d30:	f1be 0f00 	cmp.w	lr, #0
   22d34:	d1f6      	bne.n	22d24 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22d36:	07d3      	lsls	r3, r2, #31
   22d38:	d403      	bmi.n	22d42 <k_work_submit_to_queue+0x24>
}
   22d3a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22d3e:	f7ff bd14 	b.w	2276a <k_queue_append>
}
   22d42:	f85d fb04 	ldr.w	pc, [sp], #4

00022d46 <signal_poll_event>:
{
   22d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   22d4a:	6884      	ldr	r4, [r0, #8]
{
   22d4c:	4605      	mov	r5, r0
   22d4e:	460e      	mov	r6, r1
	if (poller) {
   22d50:	b144      	cbz	r4, 22d64 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   22d52:	7863      	ldrb	r3, [r4, #1]
   22d54:	2b01      	cmp	r3, #1
   22d56:	d138      	bne.n	22dca <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   22d58:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   22d5c:	f013 0302 	ands.w	r3, r3, #2
   22d60:	d10a      	bne.n	22d78 <signal_poll_event+0x32>
		poller->is_polling = false;
   22d62:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   22d64:	2000      	movs	r0, #0
	event->state |= state;
   22d66:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   22d68:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   22d6a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   22d6e:	430e      	orrs	r6, r1
   22d70:	f366 3310 	bfi	r3, r6, #12, #5
   22d74:	60eb      	str	r3, [r5, #12]
	return retcode;
   22d76:	e00d      	b.n	22d94 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   22d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22d7c:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   22d80:	f06f 0001 	mvn.w	r0, #1
   22d84:	428b      	cmp	r3, r1
   22d86:	bf08      	it	eq
   22d88:	4282      	cmpeq	r2, r0
   22d8a:	d105      	bne.n	22d98 <signal_poll_event+0x52>
		poller->is_polling = false;
   22d8c:	2300      	movs	r3, #0
		return -EAGAIN;
   22d8e:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   22d92:	7023      	strb	r3, [r4, #0]
}
   22d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22d98:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   22d9c:	4640      	mov	r0, r8
   22d9e:	f7ff fd80 	bl	228a2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22da2:	2e08      	cmp	r6, #8
   22da4:	bf0c      	ite	eq
   22da6:	f06f 0303 	mvneq.w	r3, #3
   22daa:	2300      	movne	r3, #0
   22dac:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22dae:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   22db2:	06db      	lsls	r3, r3, #27
   22db4:	d102      	bne.n	22dbc <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   22db6:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   22dba:	b10f      	cbz	r7, 22dc0 <signal_poll_event+0x7a>
		poller->is_polling = false;
   22dbc:	2300      	movs	r3, #0
   22dbe:	e7d0      	b.n	22d62 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   22dc0:	4640      	mov	r0, r8
   22dc2:	f7ff fd8e 	bl	228e2 <z_ready_thread>
		poller->is_polling = false;
   22dc6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   22dc8:	e7cc      	b.n	22d64 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   22dca:	2b02      	cmp	r3, #2
   22dcc:	d1f6      	bne.n	22dbc <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   22dce:	7823      	ldrb	r3, [r4, #0]
   22dd0:	2b00      	cmp	r3, #0
   22dd2:	d0c7      	beq.n	22d64 <signal_poll_event+0x1e>
   22dd4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   22dd8:	2f00      	cmp	r7, #0
   22dda:	d0f4      	beq.n	22dc6 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   22ddc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   22de0:	f1a4 0910 	sub.w	r9, r4, #16
   22de4:	f104 0010 	add.w	r0, r4, #16
   22de8:	f7ff fed1 	bl	22b8e <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   22dec:	4649      	mov	r1, r9
   22dee:	4638      	mov	r0, r7
		twork->poll_result = 0;
   22df0:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   22df4:	f7ff ff93 	bl	22d1e <k_work_submit_to_queue>
		poller->is_polling = false;
   22df8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   22dfc:	e7b2      	b.n	22d64 <signal_poll_event+0x1e>

00022dfe <add_event>:
{
   22dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e00:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22e02:	e9d0 2300 	ldrd	r2, r3, [r0]
   22e06:	4290      	cmp	r0, r2
   22e08:	4604      	mov	r4, r0
   22e0a:	460d      	mov	r5, r1
   22e0c:	d106      	bne.n	22e1c <add_event+0x1e>
	node->prev = list->tail;
   22e0e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   22e10:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   22e12:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   22e14:	6863      	ldr	r3, [r4, #4]
   22e16:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22e18:	6065      	str	r5, [r4, #4]
}
   22e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   22e1c:	2b00      	cmp	r3, #0
   22e1e:	d0f6      	beq.n	22e0e <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   22e20:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22e22:	b100      	cbz	r0, 22e26 <add_event+0x28>
   22e24:	3864      	subs	r0, #100	; 0x64
   22e26:	b107      	cbz	r7, 22e2a <add_event+0x2c>
   22e28:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   22e2a:	4639      	mov	r1, r7
   22e2c:	f7ff fcee 	bl	2280c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   22e30:	2800      	cmp	r0, #0
   22e32:	d1ec      	bne.n	22e0e <add_event+0x10>
	return list->head == list;
   22e34:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e36:	42b4      	cmp	r4, r6
   22e38:	d0e9      	beq.n	22e0e <add_event+0x10>
   22e3a:	2e00      	cmp	r6, #0
   22e3c:	bf38      	it	cc
   22e3e:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22e40:	2e00      	cmp	r6, #0
   22e42:	d0e4      	beq.n	22e0e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   22e44:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22e46:	b101      	cbz	r1, 22e4a <add_event+0x4c>
   22e48:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   22e4a:	4638      	mov	r0, r7
   22e4c:	f7ff fcde 	bl	2280c <z_is_t1_higher_prio_than_t2>
   22e50:	b128      	cbz	r0, 22e5e <add_event+0x60>
	node->prev = successor->prev;
   22e52:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   22e54:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   22e58:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22e5a:	6075      	str	r5, [r6, #4]
			return;
   22e5c:	e7dd      	b.n	22e1a <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   22e5e:	6863      	ldr	r3, [r4, #4]
   22e60:	42b3      	cmp	r3, r6
   22e62:	d0d4      	beq.n	22e0e <add_event+0x10>
   22e64:	6836      	ldr	r6, [r6, #0]
   22e66:	e7eb      	b.n	22e40 <add_event+0x42>

00022e68 <register_events>:
{
   22e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   22e6c:	f04f 0a00 	mov.w	sl, #0
{
   22e70:	460e      	mov	r6, r1
   22e72:	4614      	mov	r4, r2
   22e74:	461f      	mov	r7, r3
   22e76:	4683      	mov	fp, r0
	int events_registered = 0;
   22e78:	4655      	mov	r5, sl
	event->poller = NULL;
   22e7a:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   22e7c:	45b2      	cmp	sl, r6
   22e7e:	db02      	blt.n	22e86 <register_events+0x1e>
}
   22e80:	4628      	mov	r0, r5
   22e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e86:	f04f 0320 	mov.w	r3, #32
   22e8a:	f3ef 8911 	mrs	r9, BASEPRI
   22e8e:	f383 8811 	msr	BASEPRI, r3
   22e92:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   22e96:	f89b 200d 	ldrb.w	r2, [fp, #13]
   22e9a:	f002 020f 	and.w	r2, r2, #15
   22e9e:	2a02      	cmp	r2, #2
   22ea0:	d006      	beq.n	22eb0 <register_events+0x48>
   22ea2:	2a04      	cmp	r2, #4
   22ea4:	d008      	beq.n	22eb8 <register_events+0x50>
   22ea6:	2a01      	cmp	r2, #1
   22ea8:	d120      	bne.n	22eec <register_events+0x84>
		if (event->signal->signaled != 0U) {
   22eaa:	f8db 3010 	ldr.w	r3, [fp, #16]
   22eae:	e001      	b.n	22eb4 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   22eb0:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   22eb4:	689b      	ldr	r3, [r3, #8]
   22eb6:	e002      	b.n	22ebe <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   22eb8:	f8db 3010 	ldr.w	r3, [fp, #16]
   22ebc:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   22ebe:	b1ab      	cbz	r3, 22eec <register_events+0x84>
	event->state |= state;
   22ec0:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   22ec4:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   22ec8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   22ecc:	430a      	orrs	r2, r1
   22ece:	f362 3310 	bfi	r3, r2, #12, #5
   22ed2:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   22ed6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   22eda:	f389 8811 	msr	BASEPRI, r9
   22ede:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22ee2:	f10a 0a01 	add.w	sl, sl, #1
   22ee6:	f10b 0b14 	add.w	fp, fp, #20
   22eea:	e7c7      	b.n	22e7c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   22eec:	2f00      	cmp	r7, #0
   22eee:	d1f4      	bne.n	22eda <register_events+0x72>
   22ef0:	7823      	ldrb	r3, [r4, #0]
   22ef2:	2b00      	cmp	r3, #0
   22ef4:	d0f1      	beq.n	22eda <register_events+0x72>
	switch (event->type) {
   22ef6:	f89b 300d 	ldrb.w	r3, [fp, #13]
   22efa:	f003 030f 	and.w	r3, r3, #15
   22efe:	2b02      	cmp	r3, #2
   22f00:	d008      	beq.n	22f14 <register_events+0xac>
   22f02:	2b04      	cmp	r3, #4
   22f04:	d006      	beq.n	22f14 <register_events+0xac>
   22f06:	2b01      	cmp	r3, #1
   22f08:	d10b      	bne.n	22f22 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   22f0a:	4622      	mov	r2, r4
   22f0c:	4659      	mov	r1, fp
   22f0e:	f8db 0010 	ldr.w	r0, [fp, #16]
   22f12:	e004      	b.n	22f1e <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   22f14:	4622      	mov	r2, r4
   22f16:	4659      	mov	r1, fp
   22f18:	f8db 0010 	ldr.w	r0, [fp, #16]
   22f1c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   22f1e:	f7ff ff6e 	bl	22dfe <add_event>
	event->poller = poller;
   22f22:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   22f26:	3501      	adds	r5, #1
   22f28:	e7d7      	b.n	22eda <register_events+0x72>

00022f2a <k_poll_event_init>:
{
   22f2a:	b510      	push	{r4, lr}
	event->poller = NULL;
   22f2c:	2400      	movs	r4, #0
	event->type = type;
   22f2e:	0452      	lsls	r2, r2, #17
   22f30:	0209      	lsls	r1, r1, #8
   22f32:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   22f36:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   22f3a:	430a      	orrs	r2, r1
   22f3c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   22f3e:	6084      	str	r4, [r0, #8]
	event->type = type;
   22f40:	430a      	orrs	r2, r1
	event->obj = obj;
   22f42:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   22f46:	bd10      	pop	{r4, pc}

00022f48 <z_handle_obj_poll_events>:
{
   22f48:	4603      	mov	r3, r0
	return list->head == list;
   22f4a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   22f4c:	4283      	cmp	r3, r0
   22f4e:	d008      	beq.n	22f62 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   22f50:	e9d0 3200 	ldrd	r3, r2, [r0]
   22f54:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22f56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22f58:	2300      	movs	r3, #0
	node->prev = NULL;
   22f5a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   22f5e:	f7ff bef2 	b.w	22d46 <signal_poll_event>
}
   22f62:	4770      	bx	lr

00022f64 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   22f64:	2904      	cmp	r1, #4
{
   22f66:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   22f6a:	460d      	mov	r5, r1
   22f6c:	bf38      	it	cc
   22f6e:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22f70:	1952      	adds	r2, r2, r5
{
   22f72:	4606      	mov	r6, r0
   22f74:	d209      	bcs.n	22f8a <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   22f76:	f04f 0800 	mov.w	r8, #0
   22f7a:	f04f 0900 	mov.w	r9, #0
   22f7e:	e9cd 8900 	strd	r8, r9, [sp]
   22f82:	f7ff faad 	bl	224e0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22f86:	4604      	mov	r4, r0
   22f88:	b918      	cbnz	r0, 22f92 <z_heap_aligned_alloc+0x2e>
		return NULL;
   22f8a:	2000      	movs	r0, #0
}
   22f8c:	b002      	add	sp, #8
   22f8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   22f92:	462a      	mov	r2, r5
   22f94:	21ff      	movs	r1, #255	; 0xff
   22f96:	f7f6 f962 	bl	1925e <memset>
	*heap_ref = heap;
   22f9a:	6026      	str	r6, [r4, #0]
	return mem + excess;
   22f9c:	1960      	adds	r0, r4, r5
   22f9e:	e7f5      	b.n	22f8c <z_heap_aligned_alloc+0x28>

00022fa0 <k_free>:
	if (ptr != NULL) {
   22fa0:	b138      	cbz	r0, 22fb2 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   22fa2:	1f03      	subs	r3, r0, #4
   22fa4:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   22fa6:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   22faa:	1c42      	adds	r2, r0, #1
   22fac:	d0fa      	beq.n	22fa4 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   22fae:	f7ff bade 	b.w	2256e <k_heap_free>
}
   22fb2:	4770      	bx	lr

00022fb4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   22fb4:	4770      	bx	lr
